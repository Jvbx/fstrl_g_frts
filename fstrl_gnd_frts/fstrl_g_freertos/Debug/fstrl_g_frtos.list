
fstrl_g_frtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e754  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800e944  0800e944  0001e944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f620  0800f620  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800f620  0800f620  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f620  0800f620  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800f628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007124  20000188  0800f7b0  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00003004  200072ac  0800f7b0  000272ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067113  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b9bd  00000000  00000000  000872c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00021472  00000000  00000000  00092c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002540  00000000  00000000  000b40f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ed8  00000000  00000000  000b6638  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00029ad4  00000000  00000000  000b9510  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00035abf  00000000  00000000  000e2fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a3055  00000000  00000000  00118aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001bbaf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007300  00000000  00000000  001bbb74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         000000cc  00000000  00000000  001c2e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001c2f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000188 	.word	0x20000188
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e92c 	.word	0x0800e92c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000018c 	.word	0x2000018c
 800022c:	0800e92c 	.word	0x0800e92c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__popcountsi2>:
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	0883      	lsrs	r3, r0, #2
 800024a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800024e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000252:	4418      	add	r0, r3
 8000254:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000258:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800025c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000260:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000264:	0e00      	lsrs	r0, r0, #24
 8000266:	4770      	bx	lr

08000268 <vReset_Perifery_Device>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vReset_Perifery_Device */
void vReset_Perifery_Device(const void * argument)
{
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	b0bb      	sub	sp, #236	; 0xec
  osThreadSuspendAll();
 800026c:	f007 fde4 	bl	8007e38 <osThreadSuspendAll>

  /* init code for FATFS */
  MX_FATFS_Init();
 8000270:	f006 fa58 	bl	8006724 <MX_FATFS_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000274:	f00c ff34 	bl	800d0e0 <MX_USB_DEVICE_Init>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000278:	4b57      	ldr	r3, [pc, #348]	; (80003d8 <vReset_Perifery_Device+0x170>)
 800027a:	2210      	movs	r2, #16
 800027c:	615a      	str	r2, [r3, #20]
  USB_PIN_CONNECT()


  /* USER CODE BEGIN StartDefaultTask */
  //инициализация функции микросекунных задержек
   DWT_Delay_Init();
 800027e:	f006 fa2f 	bl	80066e0 <DWT_Delay_Init>

   //инициализация дисплея
   LCD1602A_Init();
 8000282:	f002 f937 	bl	80024f4 <LCD1602A_Init>
   LCD1602A_DisplayControl(ON, OFF, OFF);
 8000286:	2200      	movs	r2, #0
 8000288:	4611      	mov	r1, r2
 800028a:	2001      	movs	r0, #1
 800028c:	f002 f850 	bl	8002330 <LCD1602A_DisplayControl>

   //инициализация spi-nand
   gd5f_init(&spi_nand_gd5f);
 8000290:	4c52      	ldr	r4, [pc, #328]	; (80003dc <vReset_Perifery_Device+0x174>)
 8000292:	4620      	mov	r0, r4
 8000294:	f001 fe8e 	bl	8001fb4 <gd5f_init>
   gd5f_reset(&spi_nand_gd5f);
 8000298:	4620      	mov	r0, r4
 800029a:	f001 fd41 	bl	8001d20 <gd5f_reset>
   gd5f_get_features(&spi_nand_gd5f);
 800029e:	4620      	mov	r0, r4
 80002a0:	f001 fc58 	bl	8001b54 <gd5f_get_features>



   char outbuff[20] = {};
 80002a4:	2300      	movs	r3, #0
 80002a6:	9335      	str	r3, [sp, #212]	; 0xd4
 80002a8:	9336      	str	r3, [sp, #216]	; 0xd8
 80002aa:	9337      	str	r3, [sp, #220]	; 0xdc
 80002ac:	9338      	str	r3, [sp, #224]	; 0xe0
 80002ae:	9339      	str	r3, [sp, #228]	; 0xe4

extern const struct lfs_config cfg;
lfs_t      lfs;
lfs_file_t file;

   volatile int32_t err = lfs_mount(&lfs, &cfg);
 80002b0:	494b      	ldr	r1, [pc, #300]	; (80003e0 <vReset_Perifery_Device+0x178>)
 80002b2:	a817      	add	r0, sp, #92	; 0x5c
 80002b4:	f00b f920 	bl	800b4f8 <lfs_mount>
 80002b8:	9001      	str	r0, [sp, #4]
         if (err < 0) // если есть ошибка монтирования
 80002ba:	9b01      	ldr	r3, [sp, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db60      	blt.n	8000382 <vReset_Perifery_Device+0x11a>
             LCD1602A_SetCursorPos(1, 1);
             LCD1602A_PrintStr("Formatting...");
             err = lfs_format(&lfs, &cfg);
             err = lfs_mount(&lfs, &cfg);
         }
         LL_mDelay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f006 f9f0 	bl	80066a8 <LL_mDelay>
         LCD1602A_SetCursorPos(0, 1);
 80002c8:	2101      	movs	r1, #1
 80002ca:	2000      	movs	r0, #0
 80002cc:	f002 f806 	bl	80022dc <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 80002d0:	4d44      	ldr	r5, [pc, #272]	; (80003e4 <vReset_Perifery_Device+0x17c>)
 80002d2:	4628      	mov	r0, r5
 80002d4:	f002 f928 	bl	8002528 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(0, 1);
 80002d8:	2101      	movs	r1, #1
 80002da:	2000      	movs	r0, #0
 80002dc:	f001 fffe 	bl	80022dc <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("LFS Mount OK...");
 80002e0:	4841      	ldr	r0, [pc, #260]	; (80003e8 <vReset_Perifery_Device+0x180>)
 80002e2:	f002 f921 	bl	8002528 <LCD1602A_PrintStr>
         // прочитать текущее значение кол-ва загрузок
         uint32_t boot_count = 0;
 80002e6:	2400      	movs	r4, #0
 80002e8:	9400      	str	r4, [sp, #0]
         err = lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80002ea:	f240 1303 	movw	r3, #259	; 0x103
 80002ee:	4a3f      	ldr	r2, [pc, #252]	; (80003ec <vReset_Perifery_Device+0x184>)
 80002f0:	a902      	add	r1, sp, #8
 80002f2:	a817      	add	r0, sp, #92	; 0x5c
 80002f4:	f00c fe0a 	bl	800cf0c <lfs_file_open>
 80002f8:	9001      	str	r0, [sp, #4]
         err = lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 80002fa:	2304      	movs	r3, #4
 80002fc:	466a      	mov	r2, sp
 80002fe:	a902      	add	r1, sp, #8
 8000300:	a817      	add	r0, sp, #92	; 0x5c
 8000302:	f00b fe03 	bl	800bf0c <lfs_file_read>
 8000306:	9001      	str	r0, [sp, #4]

         // обновить счетчик загрузок
         boot_count += 1;
 8000308:	9b00      	ldr	r3, [sp, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	9300      	str	r3, [sp, #0]
         // перейти в начало файла
         err = lfs_file_rewind(&lfs, &file);
 800030e:	a902      	add	r1, sp, #8
 8000310:	a817      	add	r0, sp, #92	; 0x5c
 8000312:	f00b feb0 	bl	800c076 <lfs_file_rewind>
 8000316:	9001      	str	r0, [sp, #4]
         // произвести запись
         err = lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000318:	2304      	movs	r3, #4
 800031a:	466a      	mov	r2, sp
 800031c:	a902      	add	r1, sp, #8
 800031e:	a817      	add	r0, sp, #92	; 0x5c
 8000320:	f00b fc74 	bl	800bc0c <lfs_file_write>
 8000324:	9001      	str	r0, [sp, #4]

         // закрыть файл, окончательно производится дозапись на носитель
         err = lfs_file_close(&lfs, &file);
 8000326:	a902      	add	r1, sp, #8
 8000328:	a817      	add	r0, sp, #92	; 0x5c
 800032a:	f00c fcae 	bl	800cc8a <lfs_file_close>
 800032e:	9001      	str	r0, [sp, #4]

         // размонтировать файловую систему
         err = lfs_unmount(&lfs);
 8000330:	a817      	add	r0, sp, #92	; 0x5c
 8000332:	f00b f8dd 	bl	800b4f0 <lfs_unmount>
 8000336:	9001      	str	r0, [sp, #4]

         // печать значения счетчика включений
         sprintf(outbuff, "boot_count: %ld", boot_count);
 8000338:	9a00      	ldr	r2, [sp, #0]
 800033a:	492d      	ldr	r1, [pc, #180]	; (80003f0 <vReset_Perifery_Device+0x188>)
 800033c:	a835      	add	r0, sp, #212	; 0xd4
 800033e:	f00d fd13 	bl	800dd68 <siprintf>
         LCD1602A_SetCursorPos(1, 1);
 8000342:	2101      	movs	r1, #1
 8000344:	4608      	mov	r0, r1
 8000346:	f001 ffc9 	bl	80022dc <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 800034a:	4628      	mov	r0, r5
 800034c:	f002 f8ec 	bl	8002528 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 1);
 8000350:	2101      	movs	r1, #1
 8000352:	4608      	mov	r0, r1
 8000354:	f001 ffc2 	bl	80022dc <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr(outbuff);
 8000358:	a835      	add	r0, sp, #212	; 0xd4
 800035a:	f002 f8e5 	bl	8002528 <LCD1602A_PrintStr>

         LL_mDelay(1000);
 800035e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000362:	f006 f9a1 	bl	80066a8 <LL_mDelay>
         LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000366:	f001 ffc6 	bl	80022f6 <LCD1602A_ClearScreen>
         LCD1602A_SetCursorPos(0, 1); //Установка курсора
 800036a:	2101      	movs	r1, #1
 800036c:	4620      	mov	r0, r4
 800036e:	f001 ffb5 	bl	80022dc <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("Starting OS");
 8000372:	4820      	ldr	r0, [pc, #128]	; (80003f4 <vReset_Perifery_Device+0x18c>)
 8000374:	f002 f8d8 	bl	8002528 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 0);
 8000378:	4621      	mov	r1, r4
 800037a:	2001      	movs	r0, #1
 800037c:	f001 ffae 	bl	80022dc <LCD1602A_SetCursorPos>
         for (uint8_t i = 0; i < 16; i++) {
 8000380:	e021      	b.n	80003c6 <vReset_Perifery_Device+0x15e>
             LCD1602A_SetCursorPos(0, 1);
 8000382:	2101      	movs	r1, #1
 8000384:	2000      	movs	r0, #0
 8000386:	f001 ffa9 	bl	80022dc <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Mount FAIL...");
 800038a:	481b      	ldr	r0, [pc, #108]	; (80003f8 <vReset_Perifery_Device+0x190>)
 800038c:	f002 f8cc 	bl	8002528 <LCD1602A_PrintStr>
             LCD1602A_SetCursorPos(1, 1);
 8000390:	2101      	movs	r1, #1
 8000392:	4608      	mov	r0, r1
 8000394:	f001 ffa2 	bl	80022dc <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Formatting...");
 8000398:	4818      	ldr	r0, [pc, #96]	; (80003fc <vReset_Perifery_Device+0x194>)
 800039a:	f002 f8c5 	bl	8002528 <LCD1602A_PrintStr>
             err = lfs_format(&lfs, &cfg);
 800039e:	4c10      	ldr	r4, [pc, #64]	; (80003e0 <vReset_Perifery_Device+0x178>)
 80003a0:	4621      	mov	r1, r4
 80003a2:	a817      	add	r0, sp, #92	; 0x5c
 80003a4:	f00c fdbc 	bl	800cf20 <lfs_format>
 80003a8:	9001      	str	r0, [sp, #4]
             err = lfs_mount(&lfs, &cfg);
 80003aa:	4621      	mov	r1, r4
 80003ac:	a817      	add	r0, sp, #92	; 0x5c
 80003ae:	f00b f8a3 	bl	800b4f8 <lfs_mount>
 80003b2:	9001      	str	r0, [sp, #4]
 80003b4:	e784      	b.n	80002c0 <vReset_Perifery_Device+0x58>
             LCD1602A_PrintStr("*");
 80003b6:	4812      	ldr	r0, [pc, #72]	; (8000400 <vReset_Perifery_Device+0x198>)
 80003b8:	f002 f8b6 	bl	8002528 <LCD1602A_PrintStr>
             LL_mDelay(50);
 80003bc:	2032      	movs	r0, #50	; 0x32
 80003be:	f006 f973 	bl	80066a8 <LL_mDelay>
         for (uint8_t i = 0; i < 16; i++) {
 80003c2:	3401      	adds	r4, #1
 80003c4:	b2e4      	uxtb	r4, r4
 80003c6:	2c0f      	cmp	r4, #15
 80003c8:	d9f5      	bls.n	80003b6 <vReset_Perifery_Device+0x14e>
         }


         osThreadResumeAll();
 80003ca:	f007 fd3a 	bl	8007e42 <osThreadResumeAll>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f007 fc53 	bl	8007c7a <osDelay>
 80003d4:	e7fb      	b.n	80003ce <vReset_Perifery_Device+0x166>
 80003d6:	bf00      	nop
 80003d8:	40010800 	.word	0x40010800
 80003dc:	20006520 	.word	0x20006520
 80003e0:	0800ead4 	.word	0x0800ead4
 80003e4:	0800ea04 	.word	0x0800ea04
 80003e8:	0800ea18 	.word	0x0800ea18
 80003ec:	0800ea28 	.word	0x0800ea28
 80003f0:	0800ea34 	.word	0x0800ea34
 80003f4:	0800ea44 	.word	0x0800ea44
 80003f8:	0800e9e4 	.word	0x0800e9e4
 80003fc:	0800e9f4 	.word	0x0800e9f4
 8000400:	0800ea50 	.word	0x0800ea50

08000404 <Start_tsk_LEDx_blink>:
* @param argument: Not used
* @retval None
*/
/* Header_Start_tsk_LEDx_blink */
void Start_tsk_LEDx_blink(const void * argument)
{
 8000404:	b510      	push	{r4, lr}
 8000406:	4604      	mov	r4, r0
 8000408:	e015      	b.n	8000436 <Start_tsk_LEDx_blink+0x32>
  /* Infinite loop */
  for(;;)
  {
      if (arg == 0)
          {
          if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
 800040a:	2100      	movs	r1, #0
 800040c:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	f007 fc96 	bl	8007d40 <osSemaphoreWait>
 8000414:	2800      	cmp	r0, #0
 8000416:	d034      	beq.n	8000482 <Start_tsk_LEDx_blink+0x7e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <Start_tsk_LEDx_blink+0xd8>)
 800041a:	68d3      	ldr	r3, [r2, #12]
 800041c:	f083 0302 	eor.w	r3, r3, #2
 8000420:	60d3      	str	r3, [r2, #12]
          LCD1602A_PrintStr("LED1Task_enter" + '\0');
          osSemaphoreRelease(mt_LCD_freeHandle);}
          //uint8_t flag1 = 1;
          LED1_TOGGLE();
          //flag1 = 0;
          osDelay(100);
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f007 fc29 	bl	8007c7a <osDelay>
          if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
 8000428:	2100      	movs	r1, #0
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	f007 fc87 	bl	8007d40 <osSemaphoreWait>
 8000432:	2800      	cmp	r0, #0
 8000434:	d033      	beq.n	800049e <Start_tsk_LEDx_blink+0x9a>
      if (arg == 0)
 8000436:	2c00      	cmp	r4, #0
 8000438:	d0e7      	beq.n	800040a <Start_tsk_LEDx_blink+0x6>
          LCD1602A_PrintStr("LED1Task_exit" + '\0');
          osSemaphoreRelease(mt_LCD_freeHandle);}
          //taskYIELD();
          } else
                {
              if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
 800043a:	2100      	movs	r1, #0
 800043c:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	f007 fc7e 	bl	8007d40 <osSemaphoreWait>
 8000444:	2800      	cmp	r0, #0
 8000446:	d038      	beq.n	80004ba <Start_tsk_LEDx_blink+0xb6>
 8000448:	4a24      	ldr	r2, [pc, #144]	; (80004dc <Start_tsk_LEDx_blink+0xd8>)
 800044a:	68d3      	ldr	r3, [r2, #12]
 800044c:	f083 0304 	eor.w	r3, r3, #4
 8000450:	60d3      	str	r3, [r2, #12]
                               LCD1602A_PrintStr("LED2Task_enter" + '\0');
                               osSemaphoreRelease(mt_LCD_freeHandle);}
                 //uint8_t flag2 = 1;
                 LED2_TOGGLE();
                 //flag2 = 0;
                 osDelay(230);
 8000452:	20e6      	movs	r0, #230	; 0xe6
 8000454:	f007 fc11 	bl	8007c7a <osDelay>
                 if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
 8000458:	2100      	movs	r1, #0
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 800045c:	6818      	ldr	r0, [r3, #0]
 800045e:	f007 fc6f 	bl	8007d40 <osSemaphoreWait>
 8000462:	2800      	cmp	r0, #0
 8000464:	d1e7      	bne.n	8000436 <Start_tsk_LEDx_blink+0x32>
                 LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000466:	f001 ff46 	bl	80022f6 <LCD1602A_ClearScreen>
                 LCD1602A_SetCursorPos(1, 1); //Установка курсора
 800046a:	2101      	movs	r1, #1
 800046c:	4608      	mov	r0, r1
 800046e:	f001 ff35 	bl	80022dc <LCD1602A_SetCursorPos>
                 LCD1602A_PrintStr("LED2Task_exit" + '\0');
 8000472:	481b      	ldr	r0, [pc, #108]	; (80004e0 <Start_tsk_LEDx_blink+0xdc>)
 8000474:	f002 f858 	bl	8002528 <LCD1602A_PrintStr>
                 osSemaphoreRelease(mt_LCD_freeHandle);}
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	f007 fc9a 	bl	8007db4 <osSemaphoreRelease>
 8000480:	e7d9      	b.n	8000436 <Start_tsk_LEDx_blink+0x32>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000482:	f001 ff38 	bl	80022f6 <LCD1602A_ClearScreen>
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
 8000486:	2101      	movs	r1, #1
 8000488:	2000      	movs	r0, #0
 800048a:	f001 ff27 	bl	80022dc <LCD1602A_SetCursorPos>
          LCD1602A_PrintStr("LED1Task_enter" + '\0');
 800048e:	4815      	ldr	r0, [pc, #84]	; (80004e4 <Start_tsk_LEDx_blink+0xe0>)
 8000490:	f002 f84a 	bl	8002528 <LCD1602A_PrintStr>
          osSemaphoreRelease(mt_LCD_freeHandle);}
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	f007 fc8c 	bl	8007db4 <osSemaphoreRelease>
 800049c:	e7bc      	b.n	8000418 <Start_tsk_LEDx_blink+0x14>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 800049e:	f001 ff2a 	bl	80022f6 <LCD1602A_ClearScreen>
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
 80004a2:	2101      	movs	r1, #1
 80004a4:	2000      	movs	r0, #0
 80004a6:	f001 ff19 	bl	80022dc <LCD1602A_SetCursorPos>
          LCD1602A_PrintStr("LED1Task_exit" + '\0');
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <Start_tsk_LEDx_blink+0xe4>)
 80004ac:	f002 f83c 	bl	8002528 <LCD1602A_PrintStr>
          osSemaphoreRelease(mt_LCD_freeHandle);}
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	f007 fc7e 	bl	8007db4 <osSemaphoreRelease>
 80004b8:	e7bd      	b.n	8000436 <Start_tsk_LEDx_blink+0x32>
                               LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 80004ba:	f001 ff1c 	bl	80022f6 <LCD1602A_ClearScreen>
                               LCD1602A_SetCursorPos(1, 1); //Установка курсора
 80004be:	2101      	movs	r1, #1
 80004c0:	4608      	mov	r0, r1
 80004c2:	f001 ff0b 	bl	80022dc <LCD1602A_SetCursorPos>
                               LCD1602A_PrintStr("LED2Task_enter" + '\0');
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <Start_tsk_LEDx_blink+0xe8>)
 80004c8:	f002 f82e 	bl	8002528 <LCD1602A_PrintStr>
                               osSemaphoreRelease(mt_LCD_freeHandle);}
 80004cc:	4b02      	ldr	r3, [pc, #8]	; (80004d8 <Start_tsk_LEDx_blink+0xd4>)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	f007 fc70 	bl	8007db4 <osSemaphoreRelease>
 80004d4:	e7b8      	b.n	8000448 <Start_tsk_LEDx_blink+0x44>
 80004d6:	bf00      	nop
 80004d8:	2000601c 	.word	0x2000601c
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	0800ea84 	.word	0x0800ea84
 80004e4:	0800ea54 	.word	0x0800ea54
 80004e8:	0800ea64 	.word	0x0800ea64
 80004ec:	0800ea74 	.word	0x0800ea74

080004f0 <vStart_SpiNand_wrkr>:
* @param argument: Not used
* @retval None
*/
/* Header_Start_SpiNand_wrkr */
void vStart_SpiNand_wrkr(const void * argument)
{
 80004f0:	e7fe      	b.n	80004f0 <vStart_SpiNand_wrkr>
	...

080004f4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x1c>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004fe:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000506:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000508:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);

}
 800050a:	b002      	add	sp, #8
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000514:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 8000516:	4bae      	ldr	r3, [pc, #696]	; (80007d0 <MX_DMA_Init+0x2bc>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	f002 0201 	and.w	r2, r2, #1
 8000526:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000528:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	f042 0202 	orr.w	r2, r2, #2
 8000530:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800053a:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800053c:	4ba5      	ldr	r3, [pc, #660]	; (80007d4 <MX_DMA_Init+0x2c0>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000544:	f022 0210 	bic.w	r2, r2, #16
 8000548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800054c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000558:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	f022 0220 	bic.w	r2, r2, #32
 8000560:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000568:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000570:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800057c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000588:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800058a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000594:	f022 0210 	bic.w	r2, r2, #16
 8000598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800059c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80005a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	f022 0220 	bic.w	r2, r2, #32
 80005b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80005d0:	601a      	str	r2, [r3, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d2:	4b81      	ldr	r3, [pc, #516]	; (80007d8 <MX_DMA_Init+0x2c4>)
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005da:	f1c2 0307 	rsb	r3, r2, #7
 80005de:	2b04      	cmp	r3, #4
 80005e0:	bf28      	it	cs
 80005e2:	2304      	movcs	r3, #4
 80005e4:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d13      	adds	r3, r2, #4
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	f240 80e0 	bls.w	80007ae <MX_DMA_Init+0x29a>
 80005ee:	3a03      	subs	r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	408b      	lsls	r3, r1
 80005f6:	43db      	mvns	r3, r3
 80005f8:	f003 0305 	and.w	r3, r3, #5
 80005fc:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4a76      	ldr	r2, [pc, #472]	; (80007dc <MX_DMA_Init+0x2c8>)
 8000604:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060c:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060e:	4b72      	ldr	r3, [pc, #456]	; (80007d8 <MX_DMA_Init+0x2c4>)
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000616:	f1c2 0307 	rsb	r3, r2, #7
 800061a:	2b04      	cmp	r3, #4
 800061c:	bf28      	it	cs
 800061e:	2304      	movcs	r3, #4
 8000620:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d13      	adds	r3, r2, #4
 8000624:	2b06      	cmp	r3, #6
 8000626:	f240 80c4 	bls.w	80007b2 <MX_DMA_Init+0x29e>
 800062a:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	f003 0305 	and.w	r3, r3, #5
 8000638:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4a67      	ldr	r2, [pc, #412]	; (80007dc <MX_DMA_Init+0x2c8>)
 8000640:	f882 330c 	strb.w	r3, [r2, #780]	; 0x30c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064a:	4b63      	ldr	r3, [pc, #396]	; (80007d8 <MX_DMA_Init+0x2c4>)
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000652:	f1c2 0307 	rsb	r3, r2, #7
 8000656:	2b04      	cmp	r3, #4
 8000658:	bf28      	it	cs
 800065a:	2304      	movcs	r3, #4
 800065c:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065e:	1d13      	adds	r3, r2, #4
 8000660:	2b06      	cmp	r3, #6
 8000662:	f240 80a8 	bls.w	80007b6 <MX_DMA_Init+0x2a2>
 8000666:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	408b      	lsls	r3, r1
 800066e:	43db      	mvns	r3, r3
 8000670:	f003 0305 	and.w	r3, r3, #5
 8000674:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4a58      	ldr	r2, [pc, #352]	; (80007dc <MX_DMA_Init+0x2c8>)
 800067c:	f882 330d 	strb.w	r3, [r2, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000684:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000686:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <MX_DMA_Init+0x2c4>)
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068e:	f1c2 0307 	rsb	r3, r2, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d13      	adds	r3, r2, #4
 800069c:	2b06      	cmp	r3, #6
 800069e:	f240 808c 	bls.w	80007ba <MX_DMA_Init+0x2a6>
 80006a2:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	408b      	lsls	r3, r1
 80006aa:	43db      	mvns	r3, r3
 80006ac:	f003 0305 	and.w	r3, r3, #5
 80006b0:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4a49      	ldr	r2, [pc, #292]	; (80007dc <MX_DMA_Init+0x2c8>)
 80006b8:	f882 330e 	strb.w	r3, [r2, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006c0:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c2:	4b45      	ldr	r3, [pc, #276]	; (80007d8 <MX_DMA_Init+0x2c4>)
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c2 0307 	rsb	r3, r2, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	1d13      	adds	r3, r2, #4
 80006d8:	2b06      	cmp	r3, #6
 80006da:	d970      	bls.n	80007be <MX_DMA_Init+0x2aa>
 80006dc:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	408b      	lsls	r3, r1
 80006e4:	43db      	mvns	r3, r3
 80006e6:	f003 0305 	and.w	r3, r3, #5
 80006ea:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_DMA_Init+0x2c8>)
 80006f2:	f882 330f 	strb.w	r3, [r2, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006fa:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_DMA_Init+0x2c4>)
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	f1c2 0307 	rsb	r3, r2, #7
 8000708:	2b04      	cmp	r3, #4
 800070a:	bf28      	it	cs
 800070c:	2304      	movcs	r3, #4
 800070e:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000710:	1d13      	adds	r3, r2, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d955      	bls.n	80007c2 <MX_DMA_Init+0x2ae>
 8000716:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	408b      	lsls	r3, r1
 800071e:	43db      	mvns	r3, r3
 8000720:	f003 0305 	and.w	r3, r3, #5
 8000724:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <MX_DMA_Init+0x2c8>)
 800072c:	f882 3310 	strb.w	r3, [r2, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_DMA_Init+0x2c4>)
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073e:	f1c2 0307 	rsb	r3, r2, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	1d13      	adds	r3, r2, #4
 800074c:	2b06      	cmp	r3, #6
 800074e:	d93a      	bls.n	80007c6 <MX_DMA_Init+0x2b2>
 8000750:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	408b      	lsls	r3, r1
 8000758:	43db      	mvns	r3, r3
 800075a:	f003 0305 	and.w	r3, r3, #5
 800075e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MX_DMA_Init+0x2c8>)
 8000766:	f882 3311 	strb.w	r3, [r2, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800076a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800076e:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_DMA_Init+0x2c4>)
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	f1c2 0307 	rsb	r3, r2, #7
 800077c:	2b04      	cmp	r3, #4
 800077e:	bf28      	it	cs
 8000780:	2304      	movcs	r3, #4
 8000782:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000784:	1d13      	adds	r3, r2, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d91f      	bls.n	80007ca <MX_DMA_Init+0x2b6>
 800078a:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	408b      	lsls	r3, r1
 8000792:	43db      	mvns	r3, r3
 8000794:	f003 0305 	and.w	r3, r3, #5
 8000798:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <MX_DMA_Init+0x2c8>)
 80007a0:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);

}
 80007aa:	b002      	add	sp, #8
 80007ac:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	2200      	movs	r2, #0
 80007b0:	e71e      	b.n	80005f0 <MX_DMA_Init+0xdc>
 80007b2:	2200      	movs	r2, #0
 80007b4:	e73a      	b.n	800062c <MX_DMA_Init+0x118>
 80007b6:	2200      	movs	r2, #0
 80007b8:	e756      	b.n	8000668 <MX_DMA_Init+0x154>
 80007ba:	2200      	movs	r2, #0
 80007bc:	e772      	b.n	80006a4 <MX_DMA_Init+0x190>
 80007be:	2200      	movs	r2, #0
 80007c0:	e78d      	b.n	80006de <MX_DMA_Init+0x1ca>
 80007c2:	2200      	movs	r2, #0
 80007c4:	e7a8      	b.n	8000718 <MX_DMA_Init+0x204>
 80007c6:	2200      	movs	r2, #0
 80007c8:	e7c3      	b.n	8000752 <MX_DMA_Init+0x23e>
 80007ca:	2200      	movs	r2, #0
 80007cc:	e7de      	b.n	800078c <MX_DMA_Init+0x278>
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40020008 	.word	0x40020008
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <tmTestTimer_clbck>:
void tmTestTimer_clbck(void const * argument)
{
  /* USER CODE BEGIN tmTestTimer_clbck */

  /* USER CODE END tmTestTimer_clbck */
}
 80007e0:	4770      	bx	lr

080007e2 <configureTimerForRunTimeStats>:
}
 80007e2:	4770      	bx	lr

080007e4 <getRunTimeCounterValue>:
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	4770      	bx	lr

080007e8 <vApplicationMallocFailedHook>:
}
 80007e8:	4770      	bx	lr
	...

080007ec <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer   = &xIdleTaskTCBBuffer;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <vApplicationGetIdleTaskMemory+0x10>)
 80007ee:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <vApplicationGetIdleTaskMemory+0x14>)
 80007f2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	4770      	bx	lr
 80007fc:	200005a4 	.word	0x200005a4
 8000800:	200001a4 	.word	0x200001a4

08000804 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <vApplicationGetTimerTaskMemory+0x10>)
 8000806:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <vApplicationGetTimerTaskMemory+0x14>)
 800080a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800080c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000810:	6013      	str	r3, [r2, #0]
}
 8000812:	4770      	bx	lr
 8000814:	20000e08 	.word	0x20000e08
 8000818:	20000608 	.word	0x20000608

0800081c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	b0b5      	sub	sp, #212	; 0xd4
  osMutexStaticDef(mt_SPI1_free, &mt_SPI1_freeControlBlock);
 8000820:	2500      	movs	r5, #0
 8000822:	9532      	str	r5, [sp, #200]	; 0xc8
 8000824:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <MX_FREERTOS_Init+0x13c>)
 8000826:	9333      	str	r3, [sp, #204]	; 0xcc
  mt_SPI1_freeHandle = osMutexCreate(osMutex(mt_SPI1_free));
 8000828:	a832      	add	r0, sp, #200	; 0xc8
 800082a:	f007 fa51 	bl	8007cd0 <osMutexCreate>
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <MX_FREERTOS_Init+0x140>)
 8000830:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_SPI2_free, &mt_SPI2_freeControlBlock);
 8000832:	9530      	str	r5, [sp, #192]	; 0xc0
 8000834:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <MX_FREERTOS_Init+0x144>)
 8000836:	9331      	str	r3, [sp, #196]	; 0xc4
  mt_SPI2_freeHandle = osMutexCreate(osMutex(mt_SPI2_free));
 8000838:	a830      	add	r0, sp, #192	; 0xc0
 800083a:	f007 fa49 	bl	8007cd0 <osMutexCreate>
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <MX_FREERTOS_Init+0x148>)
 8000840:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_LCD_free, &mt_LCD_freeControlBlock);
 8000842:	952e      	str	r5, [sp, #184]	; 0xb8
 8000844:	4b48      	ldr	r3, [pc, #288]	; (8000968 <MX_FREERTOS_Init+0x14c>)
 8000846:	932f      	str	r3, [sp, #188]	; 0xbc
  mt_LCD_freeHandle = osMutexCreate(osMutex(mt_LCD_free));
 8000848:	a82e      	add	r0, sp, #184	; 0xb8
 800084a:	f007 fa41 	bl	8007cd0 <osMutexCreate>
 800084e:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_FREERTOS_Init+0x150>)
 8000850:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART1_free, &mt_UART1_freeControlBlock);
 8000852:	952c      	str	r5, [sp, #176]	; 0xb0
 8000854:	4b46      	ldr	r3, [pc, #280]	; (8000970 <MX_FREERTOS_Init+0x154>)
 8000856:	932d      	str	r3, [sp, #180]	; 0xb4
  mt_UART1_freeHandle = osMutexCreate(osMutex(mt_UART1_free));
 8000858:	a82c      	add	r0, sp, #176	; 0xb0
 800085a:	f007 fa39 	bl	8007cd0 <osMutexCreate>
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_FREERTOS_Init+0x158>)
 8000860:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART2_free, &mt_UART2_freeControlBlock);
 8000862:	952a      	str	r5, [sp, #168]	; 0xa8
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <MX_FREERTOS_Init+0x15c>)
 8000866:	932b      	str	r3, [sp, #172]	; 0xac
  mt_UART2_freeHandle = osMutexCreate(osMutex(mt_UART2_free));
 8000868:	a82a      	add	r0, sp, #168	; 0xa8
 800086a:	f007 fa31 	bl	8007cd0 <osMutexCreate>
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <MX_FREERTOS_Init+0x160>)
 8000870:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_NAND_FLASH, &mt_NAND_FLASHControlBlock);
 8000872:	9528      	str	r5, [sp, #160]	; 0xa0
 8000874:	4b42      	ldr	r3, [pc, #264]	; (8000980 <MX_FREERTOS_Init+0x164>)
 8000876:	9329      	str	r3, [sp, #164]	; 0xa4
  mt_NAND_FLASHHandle = osMutexCreate(osMutex(mt_NAND_FLASH));
 8000878:	a828      	add	r0, sp, #160	; 0xa0
 800087a:	f007 fa29 	bl	8007cd0 <osMutexCreate>
 800087e:	4b41      	ldr	r3, [pc, #260]	; (8000984 <MX_FREERTOS_Init+0x168>)
 8000880:	6018      	str	r0, [r3, #0]
  osSemaphoreStaticDef(sm_LCD_Bus_ready, &sm_LCD_Bus_readyControlBlock);
 8000882:	9526      	str	r5, [sp, #152]	; 0x98
 8000884:	4b40      	ldr	r3, [pc, #256]	; (8000988 <MX_FREERTOS_Init+0x16c>)
 8000886:	9327      	str	r3, [sp, #156]	; 0x9c
  sm_LCD_Bus_readyHandle = osSemaphoreCreate(osSemaphore(sm_LCD_Bus_ready), 1);
 8000888:	2101      	movs	r1, #1
 800088a:	a826      	add	r0, sp, #152	; 0x98
 800088c:	f007 fa2b 	bl	8007ce6 <osSemaphoreCreate>
 8000890:	4b3e      	ldr	r3, [pc, #248]	; (800098c <MX_FREERTOS_Init+0x170>)
 8000892:	6018      	str	r0, [r3, #0]
  osTimerStaticDef(tmTestTimer, tmTestTimer_clbck, &tmTestTimerControlBlock);
 8000894:	4c3e      	ldr	r4, [pc, #248]	; (8000990 <MX_FREERTOS_Init+0x174>)
 8000896:	ab24      	add	r3, sp, #144	; 0x90
 8000898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
  tmTestTimerHandle = osTimerCreate(osTimer(tmTestTimer), osTimerPeriodic, NULL);
 80008a0:	462a      	mov	r2, r5
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 f9f1 	bl	8007c8c <osTimerCreate>
 80008aa:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <MX_FREERTOS_Init+0x178>)
 80008ac:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(msgto_SpiNand_wrkr, 16, uint8_t, msgto_SpiNand_wrkrBuffer, &msgto_SpiNand_wrkrControlBlock);
 80008ae:	ae20      	add	r6, sp, #128	; 0x80
 80008b0:	f104 0308 	add.w	r3, r4, #8
 80008b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  msgto_SpiNand_wrkrHandle = osMessageCreate(osMessageQ(msgto_SpiNand_wrkr), NULL);
 80008ba:	4629      	mov	r1, r5
 80008bc:	4630      	mov	r0, r6
 80008be:	f007 faa7 	bl	8007e10 <osMessageCreate>
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_FREERTOS_Init+0x17c>)
 80008c4:	6018      	str	r0, [r3, #0]
  osMessageQDef(msgto_LED_wrkr, 16, uint16_t);
 80008c6:	ae1c      	add	r6, sp, #112	; 0x70
 80008c8:	f104 0318 	add.w	r3, r4, #24
 80008cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ce:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  msgto_LED_wrkrHandle = osMessageCreate(osMessageQ(msgto_LED_wrkr), NULL);
 80008d2:	4629      	mov	r1, r5
 80008d4:	4630      	mov	r0, r6
 80008d6:	f007 fa9b 	bl	8007e10 <osMessageCreate>
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_FREERTOS_Init+0x180>)
 80008dc:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_PERIF_Reset, vReset_Perifery_Device, osPriorityAboveNormal, 0, 512, tsk_PERIF_ResetBuffer, &tsk_PERIF_ResetControlBlock);
 80008de:	ae15      	add	r6, sp, #84	; 0x54
 80008e0:	f104 0728 	add.w	r7, r4, #40	; 0x28
 80008e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80008e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008e8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80008ec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_PERIF_ResetHandle = osThreadCreate(osThread(tsk_PERIF_Reset), NULL);
 80008f0:	4629      	mov	r1, r5
 80008f2:	a815      	add	r0, sp, #84	; 0x54
 80008f4:	f007 f98b 	bl	8007c0e <osThreadCreate>
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_FREERTOS_Init+0x184>)
 80008fa:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_SPINand_wrk, vStart_SpiNand_wrkr, osPriorityNormal, 0, 1024, tskSpiNand_wrkrBuffer, &tskSpiNand_wrkrControlBlock);
 80008fc:	ae0e      	add	r6, sp, #56	; 0x38
 80008fe:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8000902:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000904:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000906:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800090a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_SPINand_wrkHandle = osThreadCreate(osThread(tsk_SPINand_wrk), NULL);
 800090e:	4629      	mov	r1, r5
 8000910:	a80e      	add	r0, sp, #56	; 0x38
 8000912:	f007 f97c 	bl	8007c0e <osThreadCreate>
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_FREERTOS_Init+0x188>)
 8000918:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED1_blink, Start_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED1_blinkBuffer, &tsk_LED1_blinkControlBlock);
 800091a:	ae07      	add	r6, sp, #28
 800091c:	f104 0760 	add.w	r7, r4, #96	; 0x60
 8000920:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000922:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000924:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000928:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_LED1_blinkHandle = osThreadCreate(osThread(tsk_LED1_blink), NULL);
 800092c:	4629      	mov	r1, r5
 800092e:	a807      	add	r0, sp, #28
 8000930:	f007 f96d 	bl	8007c0e <osThreadCreate>
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_FREERTOS_Init+0x18c>)
 8000936:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED2_blink, Start_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED2_blinkBuffer, &tsk_LED2_blinkControlBlock);
 8000938:	466d      	mov	r5, sp
 800093a:	347c      	adds	r4, #124	; 0x7c
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000944:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  tsk_LED2_blinkHandle = osThreadCreate(osThread(tsk_LED2_blink), (void*) 1);
 8000948:	2101      	movs	r1, #1
 800094a:	4668      	mov	r0, sp
 800094c:	f007 f95f 	bl	8007c0e <osThreadCreate>
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_FREERTOS_Init+0x190>)
 8000952:	6018      	str	r0, [r3, #0]
}
 8000954:	b035      	add	sp, #212	; 0xd4
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	200044a0 	.word	0x200044a0
 800095c:	20003ff8 	.word	0x20003ff8
 8000960:	2000560c 	.word	0x2000560c
 8000964:	20006018 	.word	0x20006018
 8000968:	20004000 	.word	0x20004000
 800096c:	2000601c 	.word	0x2000601c
 8000970:	20005f2c 	.word	0x20005f2c
 8000974:	20006428 	.word	0x20006428
 8000978:	20004450 	.word	0x20004450
 800097c:	20005ed4 	.word	0x20005ed4
 8000980:	2000642c 	.word	0x2000642c
 8000984:	20005ed0 	.word	0x20005ed0
 8000988:	20005ed8 	.word	0x20005ed8
 800098c:	20003ff4 	.word	0x20003ff4
 8000990:	0800e944 	.word	0x0800e944
 8000994:	20004554 	.word	0x20004554
 8000998:	20005fb0 	.word	0x20005fb0
 800099c:	20006020 	.word	0x20006020
 80009a0:	20005f28 	.word	0x20005f28
 80009a4:	20003ffc 	.word	0x20003ffc
 80009a8:	20006424 	.word	0x20006424
 80009ac:	20005f7c 	.word	0x20005f7c

080009b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b4:	b08d      	sub	sp, #52	; 0x34

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80009b6:	2400      	movs	r4, #0
 80009b8:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	9405      	str	r4, [sp, #20]
 80009bc:	9406      	str	r4, [sp, #24]
 80009be:	9407      	str	r4, [sp, #28]
 80009c0:	9408      	str	r4, [sp, #32]
 80009c2:	9409      	str	r4, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009c4:	4b79      	ldr	r3, [pc, #484]	; (8000bac <MX_GPIO_Init+0x1fc>)
 80009c6:	699a      	ldr	r2, [r3, #24]
 80009c8:	f042 0210 	orr.w	r2, r2, #16
 80009cc:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009ce:	699a      	ldr	r2, [r3, #24]
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80009d6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	f042 0220 	orr.w	r2, r2, #32
 80009de:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	f002 0220 	and.w	r2, r2, #32
 80009e6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80009e8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009ea:	699a      	ldr	r2, [r3, #24]
 80009ec:	f042 0204 	orr.w	r2, r2, #4
 80009f0:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f2:	699a      	ldr	r2, [r3, #24]
 80009f4:	f002 0204 	and.w	r2, r2, #4
 80009f8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80009fa:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	f042 0208 	orr.w	r2, r2, #8
 8000a02:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a0c:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000a0e:	4f68      	ldr	r7, [pc, #416]	; (8000bb0 <MX_GPIO_Init+0x200>)
 8000a10:	f248 0303 	movw	r3, #32771	; 0x8003
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000bcc <MX_GPIO_Init+0x21c>
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	f8c8 3014 	str.w	r3, [r8, #20]
 8000a20:	4e64      	ldr	r6, [pc, #400]	; (8000bb4 <MX_GPIO_Init+0x204>)
 8000a22:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8000a26:	6173      	str	r3, [r6, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000a28:	2310      	movs	r3, #16
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	2350      	movs	r3, #80	; 0x50
 8000a2e:	f8c8 3010 	str.w	r3, [r8, #16]
 8000a32:	f04f 0a02 	mov.w	sl, #2
 8000a36:	f8c6 a010 	str.w	sl, [r6, #16]
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000a3a:	4a5f      	ldr	r2, [pc, #380]	; (8000bb8 <MX_GPIO_Init+0x208>)
 8000a3c:	6891      	ldr	r1, [r2, #8]
 8000a3e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a46:	fa93 f3a3 	rbit	r3, r3
 8000a4a:	fab3 f383 	clz	r3, r3
 8000a4e:	fa0a f303 	lsl.w	r3, sl, r3
 8000a52:	430b      	orrs	r3, r1
 8000a54:	6093      	str	r3, [r2, #8]
 8000a56:	6953      	ldr	r3, [r2, #20]
 8000a58:	f023 030f 	bic.w	r3, r3, #15
 8000a5c:	f04f 090f 	mov.w	r9, #15
 8000a60:	fa99 f1a9 	rbit	r1, r9
 8000a64:	fab1 f181 	clz	r1, r1
 8000a68:	2501      	movs	r5, #1
 8000a6a:	fa05 f101 	lsl.w	r1, r5, r1
 8000a6e:	430b      	orrs	r3, r1
 8000a70:	6153      	str	r3, [r2, #20]

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000a72:	2308      	movs	r3, #8
 8000a74:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a76:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a7a:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a7e:	a80a      	add	r0, sp, #40	; 0x28
 8000a80:	f003 fe7a 	bl	8004778 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a8a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000a8e:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a92:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a96:	a80a      	add	r0, sp, #40	; 0x28
 8000a98:	f003 fe6e 	bl	8004778 <LL_EXTI_Init>
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000a9c:	f8d8 1000 	ldr.w	r1, [r8]
 8000aa0:	f640 0308 	movw	r3, #2056	; 0x808
 8000aa4:	fa93 f2a3 	rbit	r2, r3
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	fa02 f20a 	lsl.w	r2, r2, sl
 8000ab0:	fa09 f202 	lsl.w	r2, r9, r2
 8000ab4:	ea21 0202 	bic.w	r2, r1, r2
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	fab3 f383 	clz	r3, r3
 8000ac0:	fa03 f30a 	lsl.w	r3, r3, sl
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	f8c8 3000 	str.w	r3, [r8]
 8000ad0:	6872      	ldr	r2, [r6, #4]
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <MX_GPIO_Init+0x20c>)
 8000ad4:	fa93 f0a3 	rbit	r0, r3
 8000ad8:	fab0 f080 	clz	r0, r0
 8000adc:	fa00 f00a 	lsl.w	r0, r0, sl
 8000ae0:	fa09 f900 	lsl.w	r9, r9, r0
 8000ae4:	ea22 0209 	bic.w	r2, r2, r9
 8000ae8:	fa93 f3a3 	rbit	r3, r3
 8000aec:	fab3 f383 	clz	r3, r3
 8000af0:	fa03 f30a 	lsl.w	r3, r3, sl
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	6073      	str	r3, [r6, #4]

  /**/
  LL_GPIO_SetPinMode(NRF24_IRQ_GPIO_Port, NRF24_IRQ_Pin, LL_GPIO_MODE_FLOATING);

  /**/
  GPIO_InitStruct.Pin = E32_M0_Pin|E32_M1_Pin;
 8000afc:	f240 3303 	movw	r3, #771	; 0x303
 8000b00:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b02:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b04:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b08:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	a905      	add	r1, sp, #20
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f003 fec1 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_DISCONNECT_Pin;
 8000b12:	f241 0b10 	movw	fp, #4112	; 0x1010
 8000b16:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b1a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b1c:	f04f 0903 	mov.w	r9, #3
 8000b20:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b24:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(USB_DISCONNECT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	a905      	add	r1, sp, #20
 8000b28:	4638      	mov	r0, r7
 8000b2a:	f003 feb3 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FLASH_CSN_Pin;
 8000b2e:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b32:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b34:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(FLASH_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	a905      	add	r1, sp, #20
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f003 fea9 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRF24_PWR_EN_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8000b42:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
 8000b46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b48:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000b4a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b4c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	a905      	add	r1, sp, #20
 8000b50:	4640      	mov	r0, r8
 8000b52:	f003 fe9f 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = E32_PWR_EN_Pin|LED1_Pin|LED2_Pin;
 8000b56:	f240 7307 	movw	r3, #1799	; 0x707
 8000b5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b5c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b62:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	a905      	add	r1, sp, #20
 8000b66:	4630      	mov	r0, r6
 8000b68:	f003 fe94 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDIO_SW_IN_Pin;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x210>)
 8000b6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b70:	2308      	movs	r3, #8
 8000b72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b74:	9509      	str	r5, [sp, #36]	; 0x24
  LL_GPIO_Init(SDIO_SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000b76:	a905      	add	r1, sp, #20
 8000b78:	4638      	mov	r0, r7
 8000b7a:	f003 fe8b 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RW_Pin;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x214>)
 8000b80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b84:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b88:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	a905      	add	r1, sp, #20
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f003 fe81 	bl	8004894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0x218>)
 8000b94:	9305      	str	r3, [sp, #20]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b96:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b98:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b9c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	a905      	add	r1, sp, #20
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f003 fe77 	bl	8004894 <LL_GPIO_Init>

}
 8000ba6:	b00d      	add	sp, #52	; 0x34
 8000ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	04100010 	.word	0x04100010
 8000bc0:	04010001 	.word	0x04010001
 8000bc4:	04800080 	.word	0x04800080
 8000bc8:	0403f0f3 	.word	0x0403f0f3
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bd0:	b530      	push	{r4, r5, lr}
 8000bd2:	b08f      	sub	sp, #60	; 0x3c
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	9408      	str	r4, [sp, #32]
 8000bd8:	9409      	str	r4, [sp, #36]	; 0x24
 8000bda:	940a      	str	r4, [sp, #40]	; 0x28
 8000bdc:	940b      	str	r4, [sp, #44]	; 0x2c
 8000bde:	940c      	str	r4, [sp, #48]	; 0x30
 8000be0:	940d      	str	r4, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000be4:	4d20      	ldr	r5, [pc, #128]	; (8000c68 <MX_I2C2_Init+0x98>)
 8000be6:	69ab      	ldr	r3, [r5, #24]
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bee:	69ab      	ldr	r3, [r5, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000bf6:	9b02      	ldr	r3, [sp, #8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
  /**I2C2 GPIO Configuration  
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_I2C2_Init+0x9c>)
 8000bfa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c04:	2304      	movs	r3, #4
 8000c06:	9306      	str	r3, [sp, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	a903      	add	r1, sp, #12
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <MX_I2C2_Init+0xa0>)
 8000c0c:	f003 fe42 	bl	8004894 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c10:	69eb      	ldr	r3, [r5, #28]
 8000c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c16:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c18:	69eb      	ldr	r3, [r5, #28]
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c20:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000c22:	f5a5 35dc 	sub.w	r5, r5, #112640	; 0x1b800
 8000c26:	68eb      	ldr	r3, [r5, #12]
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c34:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c3c:	602b      	str	r3, [r5, #0]
  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
  LL_I2C_DisableGeneralCall(I2C2);
  LL_I2C_EnableClockStretching(I2C2);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000c3e:	9408      	str	r4, [sp, #32]
  I2C_InitStruct.ClockSpeed = 400000;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_I2C2_Init+0xa4>)
 8000c42:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000c44:	940a      	str	r4, [sp, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000c46:	940b      	str	r4, [sp, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4c:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c52:	930d      	str	r3, [sp, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000c54:	a908      	add	r1, sp, #32
 8000c56:	4628      	mov	r0, r5
 8000c58:	f003 fef0 	bl	8004a3c <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000c5c:	68eb      	ldr	r3, [r5, #12]
 8000c5e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000c62:	60eb      	str	r3, [r5, #12]
  LL_I2C_SetOwnAddress2(I2C2, 0);

}
 8000c64:	b00f      	add	sp, #60	; 0x3c
 8000c66:	bd30      	pop	{r4, r5, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	040c000c 	.word	0x040c000c
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	00061a80 	.word	0x00061a80

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <SystemClock_Config+0xec>)
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	f023 0307 	bic.w	r3, r3, #7
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c88:	6813      	ldr	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c8a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <SystemClock_Config+0xf0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
    Error_Handler();
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c9e:	d0fa      	beq.n	8000c96 <SystemClock_Config+0x1e>
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca0:	4a32      	ldr	r2, [pc, #200]	; (8000d6c <SystemClock_Config+0xf4>)
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <SystemClock_Config+0xf0>)
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cb2:	621a      	str	r2, [r3, #32]
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000cb4:	6a1a      	ldr	r2, [r3, #32]
 8000cb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cba:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cbc:	6a1a      	ldr	r2, [r3, #32]
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	621a      	str	r2, [r3, #32]
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemClock_Config+0xf0>)
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
  LL_RCC_ForceBackupDomainReset();
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000cc8:	f013 0f02 	tst.w	r3, #2
 8000ccc:	d0fa      	beq.n	8000cc4 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <SystemClock_Config+0xf0>)
 8000cd0:	6a1a      	ldr	r2, [r3, #32]
 8000cd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cda:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce2:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000cea:	601a      	str	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000cf2:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8000cf6:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cfe:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <SystemClock_Config+0xf0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d08:	d0fa      	beq.n	8000d00 <SystemClock_Config+0x88>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <SystemClock_Config+0xf0>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d12:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d1e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000d26:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	f022 0203 	bic.w	r2, r2, #3
 8000d2e:	f042 0202 	orr.w	r2, r2, #2
 8000d32:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <SystemClock_Config+0xf0>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d1f9      	bne.n	8000d34 <SystemClock_Config+0xbc>
  {

  }
  LL_Init1msTick(72000000);
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <SystemClock_Config+0xf8>)
 8000d42:	4620      	mov	r0, r4
 8000d44:	f005 fca0 	bl	8006688 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SystemClock_Config+0xfc>)
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6013      	str	r3, [r2, #0]
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(72000000);
 8000d52:	4620      	mov	r0, r4
 8000d54:	f005 fcbe 	bl	80066d4 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <SystemClock_Config+0xf0>)
 8000d5a:	6853      	ldr	r3, [r2, #4]
 8000d5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d60:	6053      	str	r3, [r2, #4]
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	40022000 	.word	0x40022000
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40007000 	.word	0x40007000
 8000d70:	044aa200 	.word	0x044aa200
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <main>:
{
 8000d78:	b508      	push	{r3, lr}
  HAL_Init();
 8000d7a:	f001 fbfb 	bl	8002574 <HAL_Init>
  SystemClock_Config();
 8000d7e:	f7ff ff7b 	bl	8000c78 <SystemClock_Config>
  MX_GPIO_Init();
 8000d82:	f7ff fe15 	bl	80009b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d86:	f7ff fbc5 	bl	8000514 <MX_DMA_Init>
  MX_SPI2_Init();
 8000d8a:	f000 f95d 	bl	8001048 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000d8e:	f000 f86b 	bl	8000e68 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000d92:	f000 fb21 	bl	80013d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d96:	f000 fbdd 	bl	8001554 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d9a:	f000 f8c5 	bl	8000f28 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d9e:	f7ff ff17 	bl	8000bd0 <MX_I2C2_Init>
  MX_CRC_Init();
 8000da2:	f7ff fba7 	bl	80004f4 <MX_CRC_Init>
  MX_TIM7_Init();
 8000da6:	f000 faaf 	bl	8001308 <MX_TIM7_Init>
  MX_RTC_Init();
 8000daa:	f000 f819 	bl	8000de0 <MX_RTC_Init>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <main+0x48>)
 8000db0:	2210      	movs	r2, #16
 8000db2:	611a      	str	r2, [r3, #16]
  MX_FREERTOS_Init();
 8000db4:	f7ff fd32 	bl	800081c <MX_FREERTOS_Init>
  osKernelStart();
 8000db8:	f006 ff24 	bl	8007c04 <osKernelStart>
 8000dbc:	e7fe      	b.n	8000dbc <main+0x44>
 8000dbe:	bf00      	nop
 8000dc0:	40010800 	.word	0x40010800

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dc6:	6802      	ldr	r2, [r0, #0]
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d000      	beq.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000dd0:	f001 fbe2 	bl	8002598 <HAL_IncTick>
}
 8000dd4:	e7fb      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0xa>
 8000dd6:	bf00      	nop
 8000dd8:	40001000 	.word	0x40001000

08000ddc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ddc:	4770      	bx	lr

08000dde <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dde:	4770      	bx	lr

08000de0 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000de0:	b530      	push	{r4, r5, lr}
 8000de2:	b085      	sub	sp, #20
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000de4:	2400      	movs	r4, #0
 8000de6:	9402      	str	r4, [sp, #8]
 8000de8:	9403      	str	r4, [sp, #12]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000dea:	f8ad 4004 	strh.w	r4, [sp, #4]
 8000dee:	f88d 4006 	strb.w	r4, [sp, #6]
 8000df2:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <MX_RTC_Init+0x7c>)
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_RTC_Init+0x80>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000e04:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000e0c:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000e0e:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e16:	621a      	str	r2, [r3, #32]
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();

  /** Initialize RTC and set the Time and Date 
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	9302      	str	r3, [sp, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000e1e:	4d11      	ldr	r5, [pc, #68]	; (8000e64 <MX_RTC_Init+0x84>)
 8000e20:	a902      	add	r1, sp, #8
 8000e22:	4628      	mov	r0, r5
 8000e24:	f004 f880 	bl	8004f28 <LL_RTC_Init>
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8000e28:	68aa      	ldr	r2, [r5, #8]
 8000e2a:	f022 020f 	bic.w	r2, r2, #15
 8000e2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e32:	430a      	orrs	r2, r1
 8000e34:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8000e36:	68eb      	ldr	r3, [r5, #12]
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	60eb      	str	r3, [r5, #12]
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
  /** Initialize RTC and set the Time and Date 
  */
  RTC_TimeStruct.Hours = 0;
 8000e40:	f88d 4004 	strb.w	r4, [sp, #4]
  RTC_TimeStruct.Minutes = 0;
 8000e44:	f88d 4005 	strb.w	r4, [sp, #5]
  RTC_TimeStruct.Seconds = 0;
 8000e48:	f88d 4006 	strb.w	r4, [sp, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8000e4c:	aa01      	add	r2, sp, #4
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4628      	mov	r0, r5
 8000e52:	f003 ff91 	bl	8004d78 <LL_RTC_TIME_Init>

}
 8000e56:	b005      	add	sp, #20
 8000e58:	bd30      	pop	{r4, r5, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40002800 	.word	0x40002800

08000e68 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_SDIO_SD_Init+0x20>)
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <MX_SDIO_SD_Init+0x24>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e72:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8000e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e78:	60d9      	str	r1, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e7a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000e7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e80:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 8000e82:	2201      	movs	r2, #1
 8000e84:	619a      	str	r2, [r3, #24]

}
 8000e86:	4770      	bx	lr
 8000e88:	2000649c 	.word	0x2000649c
 8000e8c:	40018000 	.word	0x40018000

08000e90 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e90:	b530      	push	{r4, r5, lr}
 8000e92:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	9304      	str	r3, [sp, #16]
 8000e98:	9305      	str	r3, [sp, #20]
 8000e9a:	9306      	str	r3, [sp, #24]
 8000e9c:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDIO)
 8000e9e:	6802      	ldr	r2, [r0, #0]
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_SD_MspInit+0x8c>)
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d001      	beq.n	8000eaa <HAL_SD_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ea6:	b009      	add	sp, #36	; 0x24
 8000ea8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000eaa:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000eae:	695a      	ldr	r2, [r3, #20]
 8000eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000ebc:	9201      	str	r2, [sp, #4]
 8000ebe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	f042 0210 	orr.w	r2, r2, #16
 8000ec6:	619a      	str	r2, [r3, #24]
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	f002 0210 	and.w	r2, r2, #16
 8000ece:	9202      	str	r2, [sp, #8]
 8000ed0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	699a      	ldr	r2, [r3, #24]
 8000ed4:	f042 0220 	orr.w	r2, r2, #32
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ee4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ee8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2502      	movs	r5, #2
 8000eec:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2403      	movs	r4, #3
 8000ef0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <HAL_SD_MspInit+0x90>)
 8000ef6:	f001 fca3 	bl	8002840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efa:	2304      	movs	r3, #4
 8000efc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	a904      	add	r1, sp, #16
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <HAL_SD_MspInit+0x94>)
 8000f06:	f001 fc9b 	bl	8002840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	2031      	movs	r0, #49	; 0x31
 8000f10:	f001 fb86 	bl	8002620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f14:	2031      	movs	r0, #49	; 0x31
 8000f16:	f001 fbc9 	bl	80026ac <HAL_NVIC_EnableIRQ>
}
 8000f1a:	e7c4      	b.n	8000ea6 <HAL_SD_MspInit+0x16>
 8000f1c:	40018000 	.word	0x40018000
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400

08000f28 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f28:	b530      	push	{r4, r5, lr}
 8000f2a:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f2c:	2228      	movs	r2, #40	; 0x28
 8000f2e:	2100      	movs	r1, #0
 8000f30:	a808      	add	r0, sp, #32
 8000f32:	f00c fb7d 	bl	800d630 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	2400      	movs	r4, #0
 8000f38:	9406      	str	r4, [sp, #24]
 8000f3a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <MX_SPI1_Init+0x110>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f44:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f4c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f4e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	f042 0204 	orr.w	r2, r2, #4
 8000f56:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f60:	9b01      	ldr	r3, [sp, #4]
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = FLASH_SPI1_SCK_Pin|FLASH_SPI1_MOSI_Pin;
 8000f62:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000f66:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	4d32      	ldr	r5, [pc, #200]	; (800103c <MX_SPI1_Init+0x114>)
 8000f72:	a903      	add	r1, sp, #12
 8000f74:	4628      	mov	r0, r5
 8000f76:	f003 fc8d 	bl	8004894 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FLASH_SPI1_MISO_Pin;
 8000f7a:	f244 0340 	movw	r3, #16448	; 0x4040
 8000f7e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000f80:	2304      	movs	r3, #4
 8000f82:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(FLASH_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f84:	a903      	add	r1, sp, #12
 8000f86:	4628      	mov	r0, r5
 8000f88:	f003 fc84 	bl	8004894 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_SPI1_Init+0x118>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f94:	f022 0210 	bic.w	r2, r2, #16
 8000f98:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000fa0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f022 0220 	bic.w	r2, r2, #32
 8000fa8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fc0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000fc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000fca:	3314      	adds	r3, #20
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fd2:	f022 0210 	bic.w	r2, r2, #16
 8000fd6:	f042 0210 	orr.w	r2, r2, #16
 8000fda:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000fe2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f022 0220 	bic.w	r2, r2, #32
 8000fea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ff2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ffa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001002:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800100a:	601a      	str	r2, [r3, #0]

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800100c:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800100e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001012:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001014:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001016:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001018:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001020:	2308      	movs	r3, #8
 8001022:	930e      	str	r3, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001024:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001026:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 8001028:	230a      	movs	r3, #10
 800102a:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800102c:	a908      	add	r1, sp, #32
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_SPI1_Init+0x11c>)
 8001030:	f004 fc44 	bl	80058bc <LL_SPI_Init>

}
 8001034:	b013      	add	sp, #76	; 0x4c
 8001036:	bd30      	pop	{r4, r5, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	4002001c 	.word	0x4002001c
 8001044:	40013000 	.word	0x40013000

08001048 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001048:	b530      	push	{r4, r5, lr}
 800104a:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800104c:	2228      	movs	r2, #40	; 0x28
 800104e:	2100      	movs	r1, #0
 8001050:	a808      	add	r0, sp, #32
 8001052:	f00c faed 	bl	800d630 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	2400      	movs	r4, #0
 8001058:	9406      	str	r4, [sp, #24]
 800105a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_SPI2_Init+0x8c>)
 800105e:	69da      	ldr	r2, [r3, #28]
 8001060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001064:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001066:	69da      	ldr	r2, [r3, #28]
 8001068:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800106c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800106e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	f042 0208 	orr.w	r2, r2, #8
 8001076:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001080:	9b01      	ldr	r3, [sp, #4]
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = NRF24_SPI2_SCK_Pin|NRF24_SPI2_MOSI_Pin;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPI2_Init+0x90>)
 8001084:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001086:	2309      	movs	r3, #9
 8001088:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	4d13      	ldr	r5, [pc, #76]	; (80010dc <MX_SPI2_Init+0x94>)
 8001090:	a903      	add	r1, sp, #12
 8001092:	4628      	mov	r0, r5
 8001094:	f003 fbfe 	bl	8004894 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_SPI2_MISO_Pin;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI2_Init+0x98>)
 800109a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800109c:	2304      	movs	r3, #4
 800109e:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(NRF24_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80010a0:	a903      	add	r1, sp, #12
 80010a2:	4628      	mov	r0, r5
 80010a4:	f003 fbf6 	bl	8004894 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010a8:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ae:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010b0:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80010b2:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80010b4:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80010bc:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010be:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010c0:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 80010c2:	230a      	movs	r3, #10
 80010c4:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80010c6:	a908      	add	r1, sp, #32
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_SPI2_Init+0x9c>)
 80010ca:	f004 fbf7 	bl	80058bc <LL_SPI_Init>

}
 80010ce:	b013      	add	sp, #76	; 0x4c
 80010d0:	bd30      	pop	{r4, r5, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	04a000a0 	.word	0x04a000a0
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	04400040 	.word	0x04400040
 80010e4:	40003800 	.word	0x40003800

080010e8 <gd5f_block_device_sync>:
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
return LFS_ERR_OK;
}


static int gd5f_block_device_sync(const struct lfs_config *c){
 80010e8:	b508      	push	{r3, lr}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <gd5f_block_device_sync+0x14>)
 80010ec:	f000 fd32 	bl	8001b54 <gd5f_get_features>
 80010f0:	b908      	cbnz	r0, 80010f6 <gd5f_block_device_sync+0xe>
return LFS_ERR_OK;
 80010f2:	2000      	movs	r0, #0
}
 80010f4:	bd08      	pop	{r3, pc}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 80010f6:	f06f 0004 	mvn.w	r0, #4
 80010fa:	e7fb      	b.n	80010f4 <gd5f_block_device_sync+0xc>
 80010fc:	20006520 	.word	0x20006520

08001100 <gd5f_block_device_erase>:
static int gd5f_block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8001100:	b508      	push	{r3, lr}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <gd5f_block_device_erase+0x14>)
 8001104:	f000 fecf 	bl	8001ea6 <gd5f_blockerase>
 8001108:	b908      	cbnz	r0, 800110e <gd5f_block_device_erase+0xe>
return LFS_ERR_OK;
 800110a:	2000      	movs	r0, #0
}
 800110c:	bd08      	pop	{r3, pc}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 800110e:	f06f 0004 	mvn.w	r0, #4
 8001112:	e7fb      	b.n	800110c <gd5f_block_device_erase+0xc>
 8001114:	20006520 	.word	0x20006520

08001118 <gd5f_block_device_prog>:
static int gd5f_block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8001118:	b500      	push	{lr}
 800111a:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 800111c:	0189      	lsls	r1, r1, #6
 800111e:	b289      	uxth	r1, r1
 8001120:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 8001124:	4401      	add	r1, r0
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001126:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800112a:	9000      	str	r0, [sp, #0]
 800112c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001130:	b289      	uxth	r1, r1
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <gd5f_block_device_prog+0x30>)
 8001134:	f000 fe51 	bl	8001dda <gd5f_random_write_page>
 8001138:	b918      	cbnz	r0, 8001142 <gd5f_block_device_prog+0x2a>
return LFS_ERR_OK;
 800113a:	2000      	movs	r0, #0
}
 800113c:	b003      	add	sp, #12
 800113e:	f85d fb04 	ldr.w	pc, [sp], #4
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001142:	f06f 0004 	mvn.w	r0, #4
 8001146:	e7f9      	b.n	800113c <gd5f_block_device_prog+0x24>
 8001148:	20006520 	.word	0x20006520

0800114c <gd5f_block_device_read>:
static int gd5f_block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800114c:	b500      	push	{lr}
 800114e:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 8001150:	0189      	lsls	r1, r1, #6
 8001152:	b289      	uxth	r1, r1
 8001154:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 8001158:	4401      	add	r1, r0
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 800115a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800115e:	9000      	str	r0, [sp, #0]
 8001160:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001164:	b289      	uxth	r1, r1
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <gd5f_block_device_read+0x30>)
 8001168:	f000 fdfd 	bl	8001d66 <gd5f_random_read_page>
 800116c:	b918      	cbnz	r0, 8001176 <gd5f_block_device_read+0x2a>
return LFS_ERR_OK;
 800116e:	2000      	movs	r0, #0
}
 8001170:	b003      	add	sp, #12
 8001172:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001176:	f06f 0004 	mvn.w	r0, #4
 800117a:	e7f9      	b.n	8001170 <gd5f_block_device_read+0x24>
 800117c:	20006520 	.word	0x20006520

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b500      	push	{lr}
 8001182:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_MspInit+0x5c>)
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	f002 0201 	and.w	r2, r2, #1
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	69da      	ldr	r2, [r3, #28]
 800119a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800119e:	61da      	str	r2, [r3, #28]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f001 fa35 	bl	8002620 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	4608      	mov	r0, r1
 80011bc:	f001 fa30 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011c0:	2005      	movs	r0, #5
 80011c2:	f001 fa73 	bl	80026ac <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_MspInit+0x60>)
 80011c8:	6853      	ldr	r3, [r2, #4]
 80011ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d4:	b003      	add	sp, #12
 80011d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b500      	push	{lr}
 80011e6:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 80011e8:	2200      	movs	r2, #0
 80011ea:	4601      	mov	r1, r0
 80011ec:	2036      	movs	r0, #54	; 0x36
 80011ee:	f001 fa17 	bl	8002620 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 80011f2:	2036      	movs	r0, #54	; 0x36
 80011f4:	f001 fa5a 	bl	80026ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_InitTick+0x6c>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	f042 0210 	orr.w	r2, r2, #16
 8001200:	61da      	str	r2, [r3, #28]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	a902      	add	r1, sp, #8
 800120e:	a803      	add	r0, sp, #12
 8001210:	f002 f97e 	bl	8003510 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001214:	f002 f96c 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8001218:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_InitTick+0x70>)
 800121c:	fba0 2303 	umull	r2, r3, r0, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_InitTick+0x74>)
 8001226:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_InitTick+0x78>)
 8001228:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800122a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800122e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001230:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001238:	f003 fa34 	bl	80046a4 <HAL_TIM_Base_Init>
 800123c:	b118      	cbz	r0, 8001246 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800123e:	2001      	movs	r0, #1
}
 8001240:	b009      	add	sp, #36	; 0x24
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <HAL_InitTick+0x74>)
 8001248:	f003 f8e8 	bl	800441c <HAL_TIM_Base_Start_IT>
 800124c:	e7f8      	b.n	8001240 <HAL_InitTick+0x5c>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	431bde83 	.word	0x431bde83
 8001258:	20006538 	.word	0x20006538
 800125c:	40001000 	.word	0x40001000

08001260 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001260:	4770      	bx	lr

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler>

0800126a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	4770      	bx	lr

0800126c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800126c:	4770      	bx	lr

0800126e <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126e:	4770      	bx	lr

08001270 <DMA1_Channel2_IRQHandler>:
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001270:	4770      	bx	lr

08001272 <DMA1_Channel3_IRQHandler>:
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001272:	4770      	bx	lr

08001274 <DMA1_Channel4_IRQHandler>:
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001274:	4770      	bx	lr

08001276 <DMA1_Channel5_IRQHandler>:
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001276:	4770      	bx	lr

08001278 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001278:	4770      	bx	lr

0800127a <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800127a:	4770      	bx	lr

0800127c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800127c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001280:	f001 fff7 	bl	8003272 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001284:	bd08      	pop	{r3, pc}
 8001286:	bf00      	nop
 8001288:	20006e48 	.word	0x20006e48

0800128c <USART1_IRQHandler>:

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <USART2_IRQHandler>:

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001292:	4802      	ldr	r0, [pc, #8]	; (800129c <SDIO_IRQHandler+0xc>)
 8001294:	f002 ffd2 	bl	800423c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop
 800129c:	2000649c 	.word	0x2000649c

080012a0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80012a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a2:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM6_IRQHandler+0xc>)
 80012a4:	f003 f8f4 	bl	8004490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80012a8:	bd08      	pop	{r3, pc}
 80012aa:	bf00      	nop
 80012ac:	20006538 	.word	0x20006538

080012b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM_Delay_Callback();
 80012b2:	f001 f949 	bl	8002548 <TIM_Delay_Callback>
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <DMA2_Channel1_IRQHandler>:
  /* USER CODE END DMA2_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80012b8:	4770      	bx	lr
	...

080012bc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <SystemInit+0x40>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <SystemInit+0x44>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012e8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SystemInit+0x48>)
 80012f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	f8ff0000 	.word	0xf8ff0000
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001308:	b510      	push	{r4, lr}
 800130a:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	9304      	str	r3, [sp, #16]
 8001316:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800131c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001330:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_TIM7_Init+0xc0>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133a:	f1c2 0307 	rsb	r3, r2, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	1d13      	adds	r3, r2, #4
 8001348:	2b06      	cmp	r3, #6
 800134a:	d93b      	bls.n	80013c4 <MX_TIM7_Init+0xbc>
 800134c:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	408b      	lsls	r3, r1
 8001354:	43db      	mvns	r3, r3
 8001356:	f003 0305 	and.w	r3, r3, #5
 800135a:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <MX_TIM7_Init+0xc4>)
 8001362:	f882 3337 	strb.w	r3, [r2, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001366:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800136a:	6053      	str	r3, [r2, #4]

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(TIM7_IRQn);

  TIM_InitStruct.Prescaler = ((SystemCoreClock/1000000) - 1);
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM7_Init+0xc8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f102 42c8 	add.w	r2, r2, #1677721600	; 0x64000000
 8001374:	f5a2 0265 	sub.w	r2, r2, #15007744	; 0xe50000
 8001378:	f2a2 227d 	subw	r2, r2, #637	; 0x27d
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9b      	lsrs	r3, r3, #18
 8001382:	3b01      	subs	r3, #1
 8001384:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001388:	2300      	movs	r3, #0
 800138a:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 0xFFFF;
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001390:	9303      	str	r3, [sp, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8001392:	4c10      	ldr	r4, [pc, #64]	; (80013d4 <MX_TIM7_Init+0xcc>)
 8001394:	a901      	add	r1, sp, #4
 8001396:	4620      	mov	r0, r4
 8001398:	f004 fb4c 	bl	8005a34 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013a2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013b2:	f043 0320 	orr.w	r3, r3, #32
 80013b6:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80013b8:	68a3      	ldr	r3, [r4, #8]
 80013ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013be:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM7);
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
  LL_TIM_DisableMasterSlaveMode(TIM7);

}
 80013c0:	b006      	add	sp, #24
 80013c2:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c4:	2200      	movs	r2, #0
 80013c6:	e7c2      	b.n	800134e <MX_TIM7_Init+0x46>
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	20000000 	.word	0x20000000
 80013d4:	40001400 	.word	0x40001400

080013d8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013dc:	2300      	movs	r3, #0
 80013de:	9308      	str	r3, [sp, #32]
 80013e0:	9309      	str	r3, [sp, #36]	; 0x24
 80013e2:	930a      	str	r3, [sp, #40]	; 0x28
 80013e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013e6:	930c      	str	r3, [sp, #48]	; 0x30
 80013e8:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	9306      	str	r3, [sp, #24]
 80013ec:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fc:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001404:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001406:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	f042 0204 	orr.w	r2, r2, #4
 800140e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001418:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <MX_USART1_UART_Init+0x160>)
 800141c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800141e:	2309      	movs	r3, #9
 8001420:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	4c45      	ldr	r4, [pc, #276]	; (800153c <MX_USART1_UART_Init+0x164>)
 8001428:	a903      	add	r1, sp, #12
 800142a:	4620      	mov	r0, r4
 800142c:	f003 fa32 	bl	8004894 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <MX_USART1_UART_Init+0x168>)
 8001432:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001434:	2304      	movs	r3, #4
 8001436:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	a903      	add	r1, sp, #12
 800143a:	4620      	mov	r0, r4
 800143c:	f003 fa2a 	bl	8004894 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <MX_USART1_UART_Init+0x16c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001454:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f022 0220 	bic.w	r2, r2, #32
 800145c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001464:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800146c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001474:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800147c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800147e:	3b14      	subs	r3, #20
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001486:	f022 0210 	bic.w	r2, r2, #16
 800148a:	f042 0210 	orr.w	r2, r2, #16
 800148e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001496:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f022 0220 	bic.w	r2, r2, #32
 800149e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014be:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_USART1_UART_Init+0x170>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	f1c2 0307 	rsb	r3, r2, #7
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	bf28      	it	cs
 80014d0:	2304      	movcs	r3, #4
 80014d2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d4:	1d13      	adds	r3, r2, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d92b      	bls.n	8001532 <MX_USART1_UART_Init+0x15a>
 80014da:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	408b      	lsls	r3, r1
 80014e2:	43db      	mvns	r3, r3
 80014e4:	f003 0305 	and.w	r3, r3, #5
 80014e8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_USART1_UART_Init+0x174>)
 80014f0:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014f4:	2320      	movs	r3, #32
 80014f6:	6053      	str	r3, [r2, #4]

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART1_IRQn);

  USART_InitStruct.BaudRate = 115200;
 80014f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014fc:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014fe:	2300      	movs	r3, #0
 8001500:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001504:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001506:	220c      	movs	r2, #12
 8001508:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800150a:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800150c:	4c10      	ldr	r4, [pc, #64]	; (8001550 <MX_USART1_UART_Init+0x178>)
 800150e:	a908      	add	r1, sp, #32
 8001510:	4620      	mov	r0, r4
 8001512:	f004 fb21 	bl	8005b58 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001516:	6923      	ldr	r3, [r4, #16]
 8001518:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800151c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800151e:	6963      	ldr	r3, [r4, #20]
 8001520:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001524:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001526:	68e3      	ldr	r3, [r4, #12]
 8001528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152c:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 800152e:	b00e      	add	sp, #56	; 0x38
 8001530:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	2200      	movs	r2, #0
 8001534:	e7d2      	b.n	80014dc <MX_USART1_UART_Init+0x104>
 8001536:	bf00      	nop
 8001538:	04020002 	.word	0x04020002
 800153c:	40010800 	.word	0x40010800
 8001540:	04040004 	.word	0x04040004
 8001544:	40020058 	.word	0x40020058
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	e000e100 	.word	0xe000e100
 8001550:	40013800 	.word	0x40013800

08001554 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001554:	b510      	push	{r4, lr}
 8001556:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001558:	2300      	movs	r3, #0
 800155a:	9308      	str	r3, [sp, #32]
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
 800155e:	930a      	str	r3, [sp, #40]	; 0x28
 8001560:	930b      	str	r3, [sp, #44]	; 0x2c
 8001562:	930c      	str	r3, [sp, #48]	; 0x30
 8001564:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	9306      	str	r3, [sp, #24]
 8001568:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 800156a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800156e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001578:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001580:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001582:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	f042 0204 	orr.w	r2, r2, #4
 800158a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001594:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001596:	f240 4304 	movw	r3, #1028	; 0x404
 800159a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800159c:	2309      	movs	r3, #9
 800159e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	4c44      	ldr	r4, [pc, #272]	; (80016b8 <MX_USART2_UART_Init+0x164>)
 80015a6:	a903      	add	r1, sp, #12
 80015a8:	4620      	mov	r0, r4
 80015aa:	f003 f973 	bl	8004894 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80015ae:	f640 0308 	movw	r3, #2056	; 0x808
 80015b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015b4:	2304      	movs	r3, #4
 80015b6:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	a903      	add	r1, sp, #12
 80015ba:	4620      	mov	r0, r4
 80015bc:	f003 f96a 	bl	8004894 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <MX_USART2_UART_Init+0x168>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015c8:	f022 0210 	bic.w	r2, r2, #16
 80015cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80015d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f022 0220 	bic.w	r2, r2, #32
 80015dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80015fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015fe:	3314      	adds	r3, #20
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001606:	f022 0210 	bic.w	r2, r2, #16
 800160a:	f042 0210 	orr.w	r2, r2, #16
 800160e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001616:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f022 0220 	bic.w	r2, r2, #32
 800161e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001626:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001636:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800163e:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_USART2_UART_Init+0x16c>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	f1c2 0307 	rsb	r3, r2, #7
 800164c:	2b04      	cmp	r3, #4
 800164e:	bf28      	it	cs
 8001650:	2304      	movcs	r3, #4
 8001652:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001654:	1d13      	adds	r3, r2, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d92b      	bls.n	80016b2 <MX_USART2_UART_Init+0x15e>
 800165a:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	408b      	lsls	r3, r1
 8001662:	43db      	mvns	r3, r3
 8001664:	f003 0305 	and.w	r3, r3, #5
 8001668:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_USART2_UART_Init+0x170>)
 8001670:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001674:	2340      	movs	r3, #64	; 0x40
 8001676:	6053      	str	r3, [r2, #4]

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART2_IRQn);

  USART_InitStruct.BaudRate = 115200;
 8001678:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800167c:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800167e:	2300      	movs	r3, #0
 8001680:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001682:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001684:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001686:	220c      	movs	r2, #12
 8001688:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800168a:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800168c:	4c0e      	ldr	r4, [pc, #56]	; (80016c8 <MX_USART2_UART_Init+0x174>)
 800168e:	a908      	add	r1, sp, #32
 8001690:	4620      	mov	r0, r4
 8001692:	f004 fa61 	bl	8005b58 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001696:	6923      	ldr	r3, [r4, #16]
 8001698:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800169c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800169e:	6963      	ldr	r3, [r4, #20]
 80016a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80016a4:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016a6:	68e3      	ldr	r3, [r4, #12]
 80016a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ac:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART2);
  LL_USART_Enable(USART2);

}
 80016ae:	b00e      	add	sp, #56	; 0x38
 80016b0:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	2200      	movs	r2, #0
 80016b4:	e7d2      	b.n	800165c <MX_USART2_UART_Init+0x108>
 80016b6:	bf00      	nop
 80016b8:	40010800 	.word	0x40010800
 80016bc:	4002006c 	.word	0x4002006c
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	40004400 	.word	0x40004400

080016cc <gd5f_spi_sendbyte>:



GD5F_RESULT gd5f_spi_sendbyte(gd5f* dev,           // device handler
                            uint8_t databyte)
{
 80016cc:	b430      	push	{r4, r5}
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 80016ce:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016d6:	d103      	bne.n	80016e0 <gd5f_spi_sendbyte+0x14>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016de:	601a      	str	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80016e0:	6882      	ldr	r2, [r0, #8]
 80016e2:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80016e4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80016e8:	6153      	str	r3, [r2, #20]
     gd5f_spi_start(dev);
     GD5F_WAIT_TX_EMPTY();
 80016ea:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 80016ec:	6804      	ldr	r4, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80016ee:	68a3      	ldr	r3, [r4, #8]
 80016f0:	f013 0f02 	tst.w	r3, #2
 80016f4:	d104      	bne.n	8001700 <gd5f_spi_sendbyte+0x34>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80016f6:	1e53      	subs	r3, r2, #1
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b1b2      	cbz	r2, 800172a <gd5f_spi_sendbyte+0x5e>
 80016fc:	461a      	mov	r2, r3
 80016fe:	e7f5      	b.n	80016ec <gd5f_spi_sendbyte+0x20>
		return GD5F_OK;
 8001700:	2500      	movs	r5, #0
     GD5F_WAIT_TX_EMPTY();
 8001702:	b1ad      	cbz	r5, 8001730 <gd5f_spi_sendbyte+0x64>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001704:	6882      	ldr	r2, [r0, #8]
 8001706:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001708:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800170c:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800170e:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001716:	d076      	beq.n	8001806 <gd5f_spi_sendbyte+0x13a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171e:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 8001720:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     databyte = LL_SPI_ReceiveData8(dev->hw_config.spi);
     GD5F_WAIT_TX_EMPTY();
     GD5F_WAIT_SPI_BUSY();
     gd5f_spi_stop(dev);
  return GD5F_OK;
}
 8001724:	4628      	mov	r0, r5
 8001726:	bc30      	pop	{r4, r5}
 8001728:	4770      	bx	lr
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800172a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800172e:	e7e8      	b.n	8001702 <gd5f_spi_sendbyte+0x36>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  SPIx->DR = TxData;
 8001730:	60e1      	str	r1, [r4, #12]
     GD5F_WAIT_RX_NOT_EMPTY();
 8001732:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 8001734:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001736:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001738:	688b      	ldr	r3, [r1, #8]
 800173a:	f013 0f01 	tst.w	r3, #1
 800173e:	d106      	bne.n	800174e <gd5f_spi_sendbyte+0x82>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001740:	1e53      	subs	r3, r2, #1
 8001742:	b29b      	uxth	r3, r3
 8001744:	b10a      	cbz	r2, 800174a <gd5f_spi_sendbyte+0x7e>
 8001746:	461a      	mov	r2, r3
 8001748:	e7f5      	b.n	8001736 <gd5f_spi_sendbyte+0x6a>
 800174a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_RX_NOT_EMPTY();
 800174e:	b185      	cbz	r5, 8001772 <gd5f_spi_sendbyte+0xa6>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001750:	6882      	ldr	r2, [r0, #8]
 8001752:	68c3      	ldr	r3, [r0, #12]
 8001754:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001758:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800175a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001762:	d053      	beq.n	800180c <gd5f_spi_sendbyte+0x140>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_RX_NOT_EMPTY();
 800176c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001770:	e7d8      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001772:	68cb      	ldr	r3, [r1, #12]
	uint16_t timeleft = timeout_us;
 8001774:	4622      	mov	r2, r4
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001776:	688b      	ldr	r3, [r1, #8]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001778:	f013 0f02 	tst.w	r3, #2
 800177c:	d106      	bne.n	800178c <gd5f_spi_sendbyte+0xc0>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800177e:	1e53      	subs	r3, r2, #1
 8001780:	b29b      	uxth	r3, r3
 8001782:	b10a      	cbz	r2, 8001788 <gd5f_spi_sendbyte+0xbc>
 8001784:	461a      	mov	r2, r3
 8001786:	e7f6      	b.n	8001776 <gd5f_spi_sendbyte+0xaa>
 8001788:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_TX_EMPTY();
 800178c:	b185      	cbz	r5, 80017b0 <gd5f_spi_sendbyte+0xe4>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 800178e:	6882      	ldr	r2, [r0, #8]
 8001790:	68c3      	ldr	r3, [r0, #12]
 8001792:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001796:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001798:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017a0:	d037      	beq.n	8001812 <gd5f_spi_sendbyte+0x146>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a8:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 80017aa:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80017ae:	e7b9      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 80017b0:	688b      	ldr	r3, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 80017b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017b6:	d004      	beq.n	80017c2 <gd5f_spi_sendbyte+0xf6>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80017b8:	1e63      	subs	r3, r4, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b194      	cbz	r4, 80017e4 <gd5f_spi_sendbyte+0x118>
 80017be:	461c      	mov	r4, r3
 80017c0:	e7f6      	b.n	80017b0 <gd5f_spi_sendbyte+0xe4>
        dev->gd5f_busy = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75c3      	strb	r3, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80017c6:	6882      	ldr	r2, [r0, #8]
 80017c8:	68c3      	ldr	r3, [r0, #12]
 80017ca:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80017ce:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80017d0:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017d8:	d0a4      	beq.n	8001724 <gd5f_spi_sendbyte+0x58>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e79f      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80017e4:	6882      	ldr	r2, [r0, #8]
 80017e6:	68c3      	ldr	r3, [r0, #12]
 80017e8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80017ec:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80017ee:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017f6:	d00f      	beq.n	8001818 <gd5f_spi_sendbyte+0x14c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fe:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_SPI_BUSY();
 8001800:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001804:	e78e      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 8001806:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800180a:	e78b      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_RX_NOT_EMPTY();
 800180c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001810:	e788      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 8001812:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001816:	e785      	b.n	8001724 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_SPI_BUSY();
 8001818:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800181c:	e782      	b.n	8001724 <gd5f_spi_sendbyte+0x58>

0800181e <gd5f_write_enable>:



GD5F_RESULT gd5f_write_enable(gd5f* dev)
{
 800181e:	b508      	push	{r3, lr}
	return gd5f_spi_sendbyte(dev, GD5F_WRITE_ENABLE);
 8001820:	2106      	movs	r1, #6
 8001822:	f7ff ff53 	bl	80016cc <gd5f_spi_sendbyte>
}
 8001826:	bd08      	pop	{r3, pc}

08001828 <gd5f_cmd>:
                  uint32_t address,
                   uint8_t addrlen,
                   uint8_t *databuf,
                  uint16_t datalen,
                   uint8_t noreadback)
{
 8001828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800182c:	af00      	add	r7, sp, #0
 800182e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8001832:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
 8001836:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
    uint8_t  cmd_len = (addrlen + 1);
 800183a:	1c5c      	adds	r4, r3, #1
 800183c:	b2e4      	uxtb	r4, r4
    uint8_t  cmdbuf[cmd_len];
 800183e:	1de5      	adds	r5, r4, #7
 8001840:	f405 75fc 	and.w	r5, r5, #504	; 0x1f8
 8001844:	ebad 0d05 	sub.w	sp, sp, r5
 8001848:	466d      	mov	r5, sp
    cmdbuf[0] = cmd;
 800184a:	f88d 1000 	strb.w	r1, [sp]
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 800184e:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001850:	f8d1 8000 	ldr.w	r8, [r1]
 8001854:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001858:	d105      	bne.n	8001866 <gd5f_cmd+0x3e>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800185a:	f8d1 8000 	ldr.w	r8, [r1]
 800185e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8001862:	f8c1 8000 	str.w	r8, [r1]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001866:	68c1      	ldr	r1, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001868:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800186c:	6886      	ldr	r6, [r0, #8]
 800186e:	6171      	str	r1, [r6, #20]

    gd5f_spi_start(dev);


     switch (addrlen) {
 8001870:	2b03      	cmp	r3, #3
 8001872:	f200 8154 	bhi.w	8001b1e <gd5f_cmd+0x2f6>
 8001876:	e8df f003 	tbb	[pc, r3]
 800187a:	1009      	.short	0x1009
 800187c:	020b      	.short	0x020b
        case 3: {
                cmdbuf[1] = (uint8_t)((address & BYTE_2_MASK32) >> 16);
 800187e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001882:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 8001884:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001888:	70ab      	strb	r3, [r5, #2]
                cmdbuf[3] = (uint8_t)((address) & BYTE_0_MASK32);
 800188a:	70ea      	strb	r2, [r5, #3]
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800188c:	2100      	movs	r1, #0
 800188e:	e038      	b.n	8001902 <gd5f_cmd+0xda>
                break;}
        case 2: {
                cmdbuf[1] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 8001890:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001894:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address) & BYTE_0_MASK32);
 8001896:	70aa      	strb	r2, [r5, #2]
                break;}
 8001898:	e7f8      	b.n	800188c <gd5f_cmd+0x64>
        case 1: {
                cmdbuf[1] = (uint8_t)((address) & BYTE_0_MASK32);
 800189a:	706a      	strb	r2, [r5, #1]
                break;}
 800189c:	e7f6      	b.n	800188c <gd5f_cmd+0x64>
		return GD5F_OK;
 800189e:	f04f 0900 	mov.w	r9, #0

     //uint8_t  spi_rsp = 0;
     //transmitting command opcode and address if needed
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
            {
               GD5F_WAIT_TX_EMPTY();
 80018a2:	f1b9 0f00 	cmp.w	r9, #0
 80018a6:	d10f      	bne.n	80018c8 <gd5f_cmd+0xa0>
               LL_SPI_TransmitData8(dev->hw_config.spi, cmdbuf[curr_byte_num]);
 80018a8:	5c6b      	ldrb	r3, [r5, r1]
  SPIx->DR = TxData;
 80018aa:	60f3      	str	r3, [r6, #12]
               GD5F_WAIT_RX_NOT_EMPTY();
 80018ac:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 80018ae:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80018b0:	68b3      	ldr	r3, [r6, #8]
 80018b2:	f013 0f01 	tst.w	r3, #1
 80018b6:	d11e      	bne.n	80018f6 <gd5f_cmd+0xce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018b8:	1e53      	subs	r3, r2, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b1ca      	cbz	r2, 80018f2 <gd5f_cmd+0xca>
 80018be:	461a      	mov	r2, r3
 80018c0:	e7f5      	b.n	80018ae <gd5f_cmd+0x86>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018c2:	f06f 095f 	mvn.w	r9, #95	; 0x5f
 80018c6:	e7ec      	b.n	80018a2 <gd5f_cmd+0x7a>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80018c8:	6882      	ldr	r2, [r0, #8]
 80018ca:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80018cc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80018d0:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80018d2:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80018da:	f000 8123 	beq.w	8001b24 <gd5f_cmd+0x2fc>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e4:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_TX_EMPTY();
 80018e6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
GD5F_WAIT_TX_EMPTY();
GD5F_WAIT_SPI_BUSY();

gd5f_spi_stop(dev);
return GD5F_OK;
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018f2:	f06f 095f 	mvn.w	r9, #95	; 0x5f
               GD5F_WAIT_RX_NOT_EMPTY();
 80018f6:	f1b9 0f00 	cmp.w	r9, #0
 80018fa:	d110      	bne.n	800191e <gd5f_cmd+0xf6>
  return (uint8_t)(READ_REG(SPIx->DR));
 80018fc:	68f3      	ldr	r3, [r6, #12]
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
 80018fe:	3101      	adds	r1, #1
 8001900:	b2c9      	uxtb	r1, r1
 8001902:	42a1      	cmp	r1, r4
 8001904:	d21d      	bcs.n	8001942 <gd5f_cmd+0x11a>
               GD5F_WAIT_TX_EMPTY();
 8001906:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001908:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800190a:	68b3      	ldr	r3, [r6, #8]
 800190c:	f013 0f02 	tst.w	r3, #2
 8001910:	d1c5      	bne.n	800189e <gd5f_cmd+0x76>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001912:	1e53      	subs	r3, r2, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	2a00      	cmp	r2, #0
 8001918:	d0d3      	beq.n	80018c2 <gd5f_cmd+0x9a>
 800191a:	461a      	mov	r2, r3
 800191c:	e7f4      	b.n	8001908 <gd5f_cmd+0xe0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 800191e:	6882      	ldr	r2, [r0, #8]
 8001920:	68c3      	ldr	r3, [r0, #12]
 8001922:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001926:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001928:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001930:	f000 80fb 	beq.w	8001b2a <gd5f_cmd+0x302>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193a:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_RX_NOT_EMPTY();
 800193c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001940:	e7d3      	b.n	80018ea <gd5f_cmd+0xc2>
     if (noreadback) {
 8001942:	f1be 0f00 	cmp.w	lr, #0
 8001946:	d14c      	bne.n	80019e2 <gd5f_cmd+0x1ba>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001948:	2400      	movs	r4, #0
 800194a:	e07b      	b.n	8001a44 <gd5f_cmd+0x21c>
		return GD5F_OK;
 800194c:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 800194e:	b985      	cbnz	r5, 8001972 <gd5f_cmd+0x14a>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 8001950:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 8001954:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001956:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001958:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 800195a:	688b      	ldr	r3, [r1, #8]
 800195c:	f013 0f01 	tst.w	r3, #1
 8001960:	d11b      	bne.n	800199a <gd5f_cmd+0x172>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001962:	1e53      	subs	r3, r2, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	b1b2      	cbz	r2, 8001996 <gd5f_cmd+0x16e>
 8001968:	461a      	mov	r2, r3
 800196a:	e7f5      	b.n	8001958 <gd5f_cmd+0x130>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800196c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001970:	e7ed      	b.n	800194e <gd5f_cmd+0x126>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001972:	6882      	ldr	r2, [r0, #8]
 8001974:	68c3      	ldr	r3, [r0, #12]
 8001976:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800197a:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800197c:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001984:	f000 80d4 	beq.w	8001b30 <gd5f_cmd+0x308>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198e:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 8001990:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001994:	e7a9      	b.n	80018ea <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001996:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 800199a:	b985      	cbnz	r5, 80019be <gd5f_cmd+0x196>
  return (uint8_t)(READ_REG(SPIx->DR));
 800199c:	68cb      	ldr	r3, [r1, #12]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 800199e:	3401      	adds	r4, #1
 80019a0:	b2a4      	uxth	r4, r4
 80019a2:	4564      	cmp	r4, ip
 80019a4:	d26d      	bcs.n	8001a82 <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 80019a6:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 80019a8:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80019aa:	688b      	ldr	r3, [r1, #8]
 80019ac:	f013 0f02 	tst.w	r3, #2
 80019b0:	d1cc      	bne.n	800194c <gd5f_cmd+0x124>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80019b2:	1e53      	subs	r3, r2, #1
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d0d8      	beq.n	800196c <gd5f_cmd+0x144>
 80019ba:	461a      	mov	r2, r3
 80019bc:	e7f4      	b.n	80019a8 <gd5f_cmd+0x180>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80019be:	6882      	ldr	r2, [r0, #8]
 80019c0:	68c3      	ldr	r3, [r0, #12]
 80019c2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80019c6:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80019c8:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019d0:	f000 80b1 	beq.w	8001b36 <gd5f_cmd+0x30e>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 80019dc:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80019e0:	e783      	b.n	80018ea <gd5f_cmd+0xc2>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 80019e2:	2400      	movs	r4, #0
 80019e4:	e7dd      	b.n	80019a2 <gd5f_cmd+0x17a>
		return GD5F_OK;
 80019e6:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 80019e8:	b995      	cbnz	r5, 8001a10 <gd5f_cmd+0x1e8>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 80019ea:	eb0a 0e04 	add.w	lr, sl, r4
 80019ee:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 80019f2:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 80019f4:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 80019f6:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80019f8:	688b      	ldr	r3, [r1, #8]
 80019fa:	f013 0f01 	tst.w	r3, #1
 80019fe:	d11b      	bne.n	8001a38 <gd5f_cmd+0x210>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a00:	1e53      	subs	r3, r2, #1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b1b2      	cbz	r2, 8001a34 <gd5f_cmd+0x20c>
 8001a06:	461a      	mov	r2, r3
 8001a08:	e7f5      	b.n	80019f6 <gd5f_cmd+0x1ce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a0a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001a0e:	e7eb      	b.n	80019e8 <gd5f_cmd+0x1c0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a10:	6882      	ldr	r2, [r0, #8]
 8001a12:	68c3      	ldr	r3, [r0, #12]
 8001a14:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001a18:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a1a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a22:	f000 808b 	beq.w	8001b3c <gd5f_cmd+0x314>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2c:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 8001a2e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001a32:	e75a      	b.n	80018ea <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a34:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 8001a38:	b995      	cbnz	r5, 8001a60 <gd5f_cmd+0x238>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a3a:	68cb      	ldr	r3, [r1, #12]
                databuf[curr_byte_num] = LL_SPI_ReceiveData8(dev->hw_config.spi);
 8001a3c:	f88e 3000 	strb.w	r3, [lr]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001a40:	3401      	adds	r4, #1
 8001a42:	b2a4      	uxth	r4, r4
 8001a44:	4564      	cmp	r4, ip
 8001a46:	d21c      	bcs.n	8001a82 <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 8001a48:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001a4a:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001a4c:	688b      	ldr	r3, [r1, #8]
 8001a4e:	f013 0f02 	tst.w	r3, #2
 8001a52:	d1c8      	bne.n	80019e6 <gd5f_cmd+0x1be>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a54:	1e53      	subs	r3, r2, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d0d6      	beq.n	8001a0a <gd5f_cmd+0x1e2>
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	e7f4      	b.n	8001a4a <gd5f_cmd+0x222>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a60:	6882      	ldr	r2, [r0, #8]
 8001a62:	68c3      	ldr	r3, [r0, #12]
 8001a64:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001a68:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a6a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a72:	d066      	beq.n	8001b42 <gd5f_cmd+0x31a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7a:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001a7c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001a80:	e733      	b.n	80018ea <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001a82:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 8001a84:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001a86:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001a88:	688b      	ldr	r3, [r1, #8]
 8001a8a:	f013 0f02 	tst.w	r3, #2
 8001a8e:	d104      	bne.n	8001a9a <gd5f_cmd+0x272>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a90:	1e53      	subs	r3, r2, #1
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b1a2      	cbz	r2, 8001ac0 <gd5f_cmd+0x298>
 8001a96:	461a      	mov	r2, r3
 8001a98:	e7f5      	b.n	8001a86 <gd5f_cmd+0x25e>
		return GD5F_OK;
 8001a9a:	2300      	movs	r3, #0
GD5F_WAIT_TX_EMPTY();
 8001a9c:	b19b      	cbz	r3, 8001ac6 <gd5f_cmd+0x29e>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a9e:	6882      	ldr	r2, [r0, #8]
 8001aa0:	68c3      	ldr	r3, [r0, #12]
 8001aa2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001aa6:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001aa8:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ab0:	d04a      	beq.n	8001b48 <gd5f_cmd+0x320>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab8:	601a      	str	r2, [r3, #0]
GD5F_WAIT_TX_EMPTY();
 8001aba:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001abe:	e714      	b.n	80018ea <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001ac0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001ac4:	e7ea      	b.n	8001a9c <gd5f_cmd+0x274>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8001ac6:	688a      	ldr	r2, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 8001ac8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001acc:	d004      	beq.n	8001ad8 <gd5f_cmd+0x2b0>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001ace:	1e62      	subs	r2, r4, #1
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	b19c      	cbz	r4, 8001afc <gd5f_cmd+0x2d4>
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	e7f6      	b.n	8001ac6 <gd5f_cmd+0x29e>
        dev->gd5f_busy = 0;
 8001ad8:	2200      	movs	r2, #0
 8001ada:	75c2      	strb	r2, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001adc:	6881      	ldr	r1, [r0, #8]
 8001ade:	68c2      	ldr	r2, [r0, #12]
 8001ae0:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001ae4:	610a      	str	r2, [r1, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001ae6:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001ae8:	6811      	ldr	r1, [r2, #0]
 8001aea:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001aee:	f43f aefc 	beq.w	80018ea <gd5f_cmd+0xc2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001af2:	6811      	ldr	r1, [r2, #0]
 8001af4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001af8:	6011      	str	r1, [r2, #0]
 8001afa:	e6f6      	b.n	80018ea <gd5f_cmd+0xc2>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001afc:	6882      	ldr	r2, [r0, #8]
 8001afe:	68c3      	ldr	r3, [r0, #12]
 8001b00:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001b04:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001b06:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b0e:	d01e      	beq.n	8001b4e <gd5f_cmd+0x326>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b16:	601a      	str	r2, [r3, #0]
GD5F_WAIT_SPI_BUSY();
 8001b18:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b1c:	e6e5      	b.n	80018ea <gd5f_cmd+0xc2>
        return GD5F_INVALID_ARGUMENT;
 8001b1e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001b22:	e6e2      	b.n	80018ea <gd5f_cmd+0xc2>
               GD5F_WAIT_TX_EMPTY();
 8001b24:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b28:	e6df      	b.n	80018ea <gd5f_cmd+0xc2>
               GD5F_WAIT_RX_NOT_EMPTY();
 8001b2a:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b2e:	e6dc      	b.n	80018ea <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001b30:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b34:	e6d9      	b.n	80018ea <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b36:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b3a:	e6d6      	b.n	80018ea <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001b3c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b40:	e6d3      	b.n	80018ea <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b42:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b46:	e6d0      	b.n	80018ea <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001b48:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b4c:	e6cd      	b.n	80018ea <gd5f_cmd+0xc2>
GD5F_WAIT_SPI_BUSY();
 8001b4e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b52:	e6ca      	b.n	80018ea <gd5f_cmd+0xc2>

08001b54 <gd5f_get_features>:




GD5F_RESULT gd5f_get_features(gd5f* dev)
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	4605      	mov	r5, r0
volatile GD5F_RESULT res = 0;
 8001b5a:	2600      	movs	r6, #0
 8001b5c:	f88d 6017 	strb.w	r6, [sp, #23]

 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_PROTECTION, 1, &dev->registers.protection,  1, 0);
 8001b60:	9602      	str	r6, [sp, #8]
 8001b62:	2401      	movs	r4, #1
 8001b64:	9401      	str	r4, [sp, #4]
 8001b66:	f100 0310 	add.w	r3, r0, #16
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	22a0      	movs	r2, #160	; 0xa0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f7ff fe59 	bl	8001828 <gd5f_cmd>
 8001b76:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	4318      	orrs	r0, r3
 8001b7e:	b240      	sxtb	r0, r0
 8001b80:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_1,  1, &dev->registers.feature_1,   1, 0);
 8001b84:	9602      	str	r6, [sp, #8]
 8001b86:	9401      	str	r4, [sp, #4]
 8001b88:	f105 0313 	add.w	r3, r5, #19
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4623      	mov	r3, r4
 8001b90:	22b0      	movs	r2, #176	; 0xb0
 8001b92:	210f      	movs	r1, #15
 8001b94:	4628      	mov	r0, r5
 8001b96:	f7ff fe47 	bl	8001828 <gd5f_cmd>
 8001b9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	4318      	orrs	r0, r3
 8001ba2:	b240      	sxtb	r0, r0
 8001ba4:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_1,   1, &dev->registers.status_1,    1, 0);
 8001ba8:	9602      	str	r6, [sp, #8]
 8001baa:	9401      	str	r4, [sp, #4]
 8001bac:	f105 0311 	add.w	r3, r5, #17
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	22c0      	movs	r2, #192	; 0xc0
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f7ff fe35 	bl	8001828 <gd5f_cmd>
 8001bbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	4318      	orrs	r0, r3
 8001bc6:	b240      	sxtb	r0, r0
 8001bc8:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_2,  1, &dev->registers.feature_2,   1, 0);
 8001bcc:	9602      	str	r6, [sp, #8]
 8001bce:	9401      	str	r4, [sp, #4]
 8001bd0:	f105 0314 	add.w	r3, r5, #20
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	22d0      	movs	r2, #208	; 0xd0
 8001bda:	210f      	movs	r1, #15
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff fe23 	bl	8001828 <gd5f_cmd>
 8001be2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	4318      	orrs	r0, r3
 8001bea:	b240      	sxtb	r0, r0
 8001bec:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_2,   1, &dev->registers.status_2,    1, 0);
 8001bf0:	9602      	str	r6, [sp, #8]
 8001bf2:	9401      	str	r4, [sp, #4]
 8001bf4:	f105 0312 	add.w	r3, r5, #18
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	22f0      	movs	r2, #240	; 0xf0
 8001bfe:	210f      	movs	r1, #15
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff fe11 	bl	8001828 <gd5f_cmd>
 8001c06:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	4318      	orrs	r0, r3
 8001c0e:	b240      	sxtb	r0, r0
 8001c10:	f88d 0017 	strb.w	r0, [sp, #23]
return res;
 8001c14:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 8001c18:	b240      	sxtb	r0, r0
 8001c1a:	b006      	add	sp, #24
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}

08001c1e <gd5f_get_feature>:

GD5F_RESULT gd5f_get_feature(gd5f* dev, GD5F_FEATURE_REGS feature_reg, uint8_t* feature_byte)
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	4606      	mov	r6, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4615      	mov	r5, r2
volatile GD5F_RESULT res = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f88d 3017 	strb.w	r3, [sp, #23]

res = gd5f_cmd(dev, GD5F_GET_FEATURES, feature_reg, 1, feature_byte, 1, 0);
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	9200      	str	r2, [sp, #0]
 8001c36:	460a      	mov	r2, r1
 8001c38:	210f      	movs	r1, #15
 8001c3a:	f7ff fdf5 	bl	8001828 <gd5f_cmd>
 8001c3e:	f88d 0017 	strb.w	r0, [sp, #23]
if (res != GD5F_OK) return res;
 8001c42:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	b94b      	cbnz	r3, 8001c5e <gd5f_get_feature+0x40>

    switch (feature_reg) {
 8001c4a:	2cc0      	cmp	r4, #192	; 0xc0
 8001c4c:	d019      	beq.n	8001c82 <gd5f_get_feature+0x64>
 8001c4e:	d80b      	bhi.n	8001c68 <gd5f_get_feature+0x4a>
 8001c50:	2ca0      	cmp	r4, #160	; 0xa0
 8001c52:	d010      	beq.n	8001c76 <gd5f_get_feature+0x58>
 8001c54:	2cb0      	cmp	r4, #176	; 0xb0
 8001c56:	d11a      	bne.n	8001c8e <gd5f_get_feature+0x70>
             dev->registers.protection = *feature_byte;
             break;
            }
        case GD5F_FEATURE_1:
            {
             dev->registers.feature_1 = *feature_byte;
 8001c58:	782b      	ldrb	r3, [r5, #0]
 8001c5a:	74f3      	strb	r3, [r6, #19]
             break;
 8001c5c:	e00d      	b.n	8001c7a <gd5f_get_feature+0x5c>
if (res != GD5F_OK) return res;
 8001c5e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001c62:	b240      	sxtb	r0, r0
        default:{
        return GD5F_INVALID_ARGUMENT;
        break;}
    }
return res;
}
 8001c64:	b006      	add	sp, #24
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
    switch (feature_reg) {
 8001c68:	2cd0      	cmp	r4, #208	; 0xd0
 8001c6a:	d00d      	beq.n	8001c88 <gd5f_get_feature+0x6a>
 8001c6c:	2cf0      	cmp	r4, #240	; 0xf0
 8001c6e:	d10e      	bne.n	8001c8e <gd5f_get_feature+0x70>
            dev->registers.status_2 = *feature_byte;
 8001c70:	782b      	ldrb	r3, [r5, #0]
 8001c72:	74b3      	strb	r3, [r6, #18]
            break;
 8001c74:	e001      	b.n	8001c7a <gd5f_get_feature+0x5c>
             dev->registers.protection = *feature_byte;
 8001c76:	782b      	ldrb	r3, [r5, #0]
 8001c78:	7433      	strb	r3, [r6, #16]
return res;
 8001c7a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001c7e:	b240      	sxtb	r0, r0
 8001c80:	e7f0      	b.n	8001c64 <gd5f_get_feature+0x46>
            dev->registers.status_1 = *feature_byte;
 8001c82:	782b      	ldrb	r3, [r5, #0]
 8001c84:	7473      	strb	r3, [r6, #17]
            break;
 8001c86:	e7f8      	b.n	8001c7a <gd5f_get_feature+0x5c>
            dev->registers.feature_2 = *feature_byte;
 8001c88:	782b      	ldrb	r3, [r5, #0]
 8001c8a:	7533      	strb	r3, [r6, #20]
            break;
 8001c8c:	e7f5      	b.n	8001c7a <gd5f_get_feature+0x5c>
        return GD5F_INVALID_ARGUMENT;
 8001c8e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001c92:	e7e7      	b.n	8001c64 <gd5f_get_feature+0x46>

08001c94 <gd5f_is_busy>:
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
   return res;
}

uint8_t gd5f_is_busy(gd5f* dev)
{
 8001c94:	b500      	push	{lr}
 8001c96:	b083      	sub	sp, #12
uint8_t feature_byte = 0;
 8001c98:	aa02      	add	r2, sp, #8
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f802 3d01 	strb.w	r3, [r2, #-1]!
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001ca0:	21c0      	movs	r1, #192	; 0xc0
 8001ca2:	f7ff ffbc 	bl	8001c1e <gd5f_get_feature>
 8001ca6:	b930      	cbnz	r0, 8001cb6 <gd5f_is_busy+0x22>
return (feature_byte & GD5F_STATUS_1_OIP);
 8001ca8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001cac:	f000 0001 	and.w	r0, r0, #1
}
 8001cb0:	b003      	add	sp, #12
 8001cb2:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001cb6:	20ff      	movs	r0, #255	; 0xff
 8001cb8:	e7fa      	b.n	8001cb0 <gd5f_is_busy+0x1c>
	...

08001cbc <gd5f_wait_busy>:

GD5F_RESULT gd5f_wait_busy(gd5f* dev)
{
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	4605      	mov	r5, r0
uint8_t is_not_timeout = 1;
volatile uint32_t microseconds = GD5F_OP_TIMEOUT;
 8001cc2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cc6:	9301      	str	r3, [sp, #4]
uint32_t clk_cycle_start = DWT->CYCCNT;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <gd5f_wait_busy+0x58>)
 8001cca:	685e      	ldr	r6, [r3, #4]
microseconds *= (SystemCoreClock / 1000000);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <gd5f_wait_busy+0x5c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <gd5f_wait_busy+0x60>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	9301      	str	r3, [sp, #4]
dev->gd5f_busy = 1;
 8001ce0:	2401      	movs	r4, #1
 8001ce2:	75c4      	strb	r4, [r0, #23]

while(gd5f_is_busy(dev) && is_not_timeout) {
 8001ce4:	e007      	b.n	8001cf6 <gd5f_wait_busy+0x3a>
    is_not_timeout = ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <gd5f_wait_busy+0x58>)
 8001ce8:	685c      	ldr	r4, [r3, #4]
 8001cea:	1ba4      	subs	r4, r4, r6
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	bf2c      	ite	cs
 8001cf2:	2400      	movcs	r4, #0
 8001cf4:	2401      	movcc	r4, #1
while(gd5f_is_busy(dev) && is_not_timeout) {
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff ffcc 	bl	8001c94 <gd5f_is_busy>
 8001cfc:	b108      	cbz	r0, 8001d02 <gd5f_wait_busy+0x46>
 8001cfe:	2c00      	cmp	r4, #0
 8001d00:	d1f1      	bne.n	8001ce6 <gd5f_wait_busy+0x2a>
    }

if (is_not_timeout) {
 8001d02:	b11c      	cbz	r4, 8001d0c <gd5f_wait_busy+0x50>
    dev->gd5f_busy = 0;
 8001d04:	2000      	movs	r0, #0
 8001d06:	75e8      	strb	r0, [r5, #23]
    return GD5F_OK;
    }
return GD5F_DEV_TIMEOUT;
}
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
return GD5F_DEV_TIMEOUT;
 8001d0c:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001d10:	e7fa      	b.n	8001d08 <gd5f_wait_busy+0x4c>
 8001d12:	bf00      	nop
 8001d14:	e0001000 	.word	0xe0001000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	431bde83 	.word	0x431bde83

08001d20 <gd5f_reset>:
GD5F_RESULT gd5f_reset(gd5f* dev){
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001d24:	21ff      	movs	r1, #255	; 0xff
 8001d26:	f7ff fcd1 	bl	80016cc <gd5f_spi_sendbyte>
 8001d2a:	b948      	cbnz	r0, 8001d40 <gd5f_reset+0x20>
    GD5F_WAIT_BUSY();
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ffc5 	bl	8001cbc <gd5f_wait_busy>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b908      	cbnz	r0, 8001d3a <gd5f_reset+0x1a>
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd10      	pop	{r4, pc}
    GD5F_WAIT_BUSY();
 8001d3a:	f06f 037b 	mvn.w	r3, #123	; 0x7b
 8001d3e:	e7fa      	b.n	8001d36 <gd5f_reset+0x16>
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001d40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d44:	e7f7      	b.n	8001d36 <gd5f_reset+0x16>

08001d46 <gd5f_get_id>:


GD5F_RESULT gd5f_get_id(gd5f* dev)
{
 8001d46:	b500      	push	{lr}
 8001d48:	b085      	sub	sp, #20
return gd5f_cmd(dev, GD5F_READ_ID, GD5F_ID_ADDR_MID_DID, 1, (uint8_t*)&dev->devid, 2, 0);
 8001d4a:	f100 0315 	add.w	r3, r0, #21
 8001d4e:	2200      	movs	r2, #0
 8001d50:	9202      	str	r2, [sp, #8]
 8001d52:	2102      	movs	r1, #2
 8001d54:	9101      	str	r1, [sp, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	219f      	movs	r1, #159	; 0x9f
 8001d5c:	f7ff fd64 	bl	8001828 <gd5f_cmd>
}
 8001d60:	b005      	add	sp, #20
 8001d62:	f85d fb04 	ldr.w	pc, [sp], #4

08001d66 <gd5f_random_read_page>:
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^
//       block number (0..1023)  | page num in block (0..63)
//

GD5F_RESULT gd5f_random_read_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *rxbuf, uint16_t datalen)
{
 8001d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	460f      	mov	r7, r1
 8001d70:	4615      	mov	r5, r2
 8001d72:	4698      	mov	r8, r3
 8001d74:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 GD5F_WAIT_BUSY();
 8001d78:	f7ff ffa0 	bl	8001cbc <gd5f_wait_busy>
 8001d7c:	bb08      	cbnz	r0, 8001dc2 <gd5f_random_read_page+0x5c>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2303      	movs	r3, #3
 8001d8a:	463a      	mov	r2, r7
 8001d8c:	2113      	movs	r1, #19
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff fd4a 	bl	8001828 <gd5f_cmd>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001d94:	b9c0      	cbnz	r0, 8001dc8 <gd5f_random_read_page+0x62>
 GD5F_WAIT_BUSY();
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff ff90 	bl	8001cbc <gd5f_wait_busy>
 8001d9c:	b9b8      	cbnz	r0, 8001dce <gd5f_random_read_page+0x68>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001d9e:	1973      	adds	r3, r6, r5
 8001da0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001da4:	da16      	bge.n	8001dd4 <gd5f_random_read_page+0x6e>
return gd5f_cmd(dev, GD5F_PAGE_READ_FROM_CACHE, (byte_addr << 8), 3, rxbuf, datalen, 0);
 8001da6:	2300      	movs	r3, #0
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	9601      	str	r6, [sp, #4]
 8001dac:	f8cd 8000 	str.w	r8, [sp]
 8001db0:	2303      	movs	r3, #3
 8001db2:	022a      	lsls	r2, r5, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fd36 	bl	8001828 <gd5f_cmd>
 return gd5f_read_from_cache(dev, start_bytenum, rxbuf, datalen);
 gd5f_get_features(dev);
}
 8001dbc:	b004      	add	sp, #16
 8001dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 GD5F_WAIT_BUSY();
 8001dc2:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001dc6:	e7f9      	b.n	8001dbc <gd5f_random_read_page+0x56>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001dc8:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001dcc:	e7f6      	b.n	8001dbc <gd5f_random_read_page+0x56>
 GD5F_WAIT_BUSY();
 8001dce:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001dd2:	e7f3      	b.n	8001dbc <gd5f_random_read_page+0x56>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001dd4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001dd8:	e7f0      	b.n	8001dbc <gd5f_random_read_page+0x56>

08001dda <gd5f_random_write_page>:

GD5F_RESULT gd5f_random_write_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *txbuf, uint16_t datalen)
{
 8001dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	4604      	mov	r4, r0
 8001de2:	460d      	mov	r5, r1
 8001de4:	4616      	mov	r6, r2
 8001de6:	4698      	mov	r8, r3
 8001de8:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    GD5F_WAIT_BUSY();
 8001dec:	f7ff ff66 	bl	8001cbc <gd5f_wait_busy>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d13d      	bne.n	8001e70 <gd5f_random_write_page+0x96>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001df4:	2301      	movs	r3, #1
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2303      	movs	r3, #3
 8001e00:	462a      	mov	r2, r5
 8001e02:	2113      	movs	r1, #19
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff fd0f 	bl	8001828 <gd5f_cmd>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e0a:	bba0      	cbnz	r0, 8001e76 <gd5f_random_write_page+0x9c>
    GD5F_WAIT_BUSY();
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7ff ff55 	bl	8001cbc <gd5f_wait_busy>
 8001e12:	bb98      	cbnz	r0, 8001e7c <gd5f_random_write_page+0xa2>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff fd02 	bl	800181e <gd5f_write_enable>
 8001e1a:	bb90      	cbnz	r0, 8001e82 <gd5f_random_write_page+0xa8>
    GD5F_WAIT_BUSY();
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff ff4d 	bl	8001cbc <gd5f_wait_busy>
 8001e22:	bb88      	cbnz	r0, 8001e88 <gd5f_random_write_page+0xae>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001e24:	19bb      	adds	r3, r7, r6
 8001e26:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001e2a:	da30      	bge.n	8001e8e <gd5f_random_write_page+0xb4>
return gd5f_cmd(dev, GD5F_PROGRAM_LOAD_RANDOM_DATA, byte_addr, 2, txbuf, datalen, 1);
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	9701      	str	r7, [sp, #4]
 8001e32:	f8cd 8000 	str.w	r8, [sp]
 8001e36:	2302      	movs	r3, #2
 8001e38:	4632      	mov	r2, r6
 8001e3a:	2184      	movs	r1, #132	; 0x84
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff fcf3 	bl	8001828 <gd5f_cmd>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e42:	bb38      	cbnz	r0, 8001e94 <gd5f_random_write_page+0xba>
return gd5f_cmd(dev, GD5F_PROGRAM_EXECUTE, pageaddress, 3, NULL, 0, 1);
 8001e44:	2301      	movs	r3, #1
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2303      	movs	r3, #3
 8001e50:	462a      	mov	r2, r5
 8001e52:	2110      	movs	r1, #16
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff fce7 	bl	8001828 <gd5f_cmd>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e5a:	b9f0      	cbnz	r0, 8001e9a <gd5f_random_write_page+0xc0>
    GD5F_WAIT_BUSY();
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7ff ff2d 	bl	8001cbc <gd5f_wait_busy>
 8001e62:	b9e8      	cbnz	r0, 8001ea0 <gd5f_random_write_page+0xc6>
    return gd5f_wait_busy(dev);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff ff29 	bl	8001cbc <gd5f_wait_busy>
    gd5f_get_features(dev);
}
 8001e6a:	b004      	add	sp, #16
 8001e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GD5F_WAIT_BUSY();
 8001e70:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e74:	e7f9      	b.n	8001e6a <gd5f_random_write_page+0x90>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e76:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e7a:	e7f6      	b.n	8001e6a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001e7c:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e80:	e7f3      	b.n	8001e6a <gd5f_random_write_page+0x90>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e82:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e86:	e7f0      	b.n	8001e6a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001e88:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e8c:	e7ed      	b.n	8001e6a <gd5f_random_write_page+0x90>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e8e:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e92:	e7ea      	b.n	8001e6a <gd5f_random_write_page+0x90>
 8001e94:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e98:	e7e7      	b.n	8001e6a <gd5f_random_write_page+0x90>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e9a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e9e:	e7e4      	b.n	8001e6a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001ea0:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ea4:	e7e1      	b.n	8001e6a <gd5f_random_write_page+0x90>

08001ea6 <gd5f_blockerase>:
    GD5F_WAIT_BUSY();
    return gd5f_get_features(dev);
}

GD5F_RESULT gd5f_blockerase(gd5f* dev, uint32_t block_num)
{
 8001ea6:	b530      	push	{r4, r5, lr}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	4605      	mov	r5, r0
 8001eac:	460c      	mov	r4, r1
    GD5F_WAIT_BUSY();
 8001eae:	f7ff ff05 	bl	8001cbc <gd5f_wait_busy>
 8001eb2:	b9c8      	cbnz	r0, 8001ee8 <gd5f_blockerase+0x42>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f7ff fcb2 	bl	800181e <gd5f_write_enable>
 8001eba:	b9c0      	cbnz	r0, 8001eee <gd5f_blockerase+0x48>
    GD5F_WAIT_BUSY();
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f7ff fefd 	bl	8001cbc <gd5f_wait_busy>
 8001ec2:	b9b8      	cbnz	r0, 8001ef4 <gd5f_blockerase+0x4e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001ec4:	01a2      	lsls	r2, r4, #6
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	21d8      	movs	r1, #216	; 0xd8
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	f7ff fca6 	bl	8001828 <gd5f_cmd>
 8001edc:	b968      	cbnz	r0, 8001efa <gd5f_blockerase+0x54>
    return gd5f_wait_busy(dev);
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f7ff feec 	bl	8001cbc <gd5f_wait_busy>
}
 8001ee4:	b005      	add	sp, #20
 8001ee6:	bd30      	pop	{r4, r5, pc}
    GD5F_WAIT_BUSY();
 8001ee8:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001eec:	e7fa      	b.n	8001ee4 <gd5f_blockerase+0x3e>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001eee:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ef2:	e7f7      	b.n	8001ee4 <gd5f_blockerase+0x3e>
    GD5F_WAIT_BUSY();
 8001ef4:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ef8:	e7f4      	b.n	8001ee4 <gd5f_blockerase+0x3e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001efa:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001efe:	e7f1      	b.n	8001ee4 <gd5f_blockerase+0x3e>

08001f00 <gd5f_unblock>:

GD5F_RESULT gd5f_unblock(gd5f* dev)
{
 8001f00:	b510      	push	{r4, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 8001f06:	f7ff fed9 	bl	8001cbc <gd5f_wait_busy>
 8001f0a:	b9f0      	cbnz	r0, 8001f4a <gd5f_unblock+0x4a>
gd5f_get_features(dev);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fe21 	bl	8001b54 <gd5f_get_features>
uint8_t feature_byte = 0x00; //dev->registers.protection & ((~(GD5F_PROTECTION_BP0|GD5F_PROTECTION_BP1|GD5F_PROTECTION_BP2))&(~GD5F_PROTECTION_RESERVED));
 8001f12:	2300      	movs	r3, #0
 8001f14:	f88d 3017 	strb.w	r3, [sp, #23]
   volatile GD5F_RESULT res = 0;
 8001f18:	f88d 3016 	strb.w	r3, [sp, #22]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	f10d 0217 	add.w	r2, sp, #23
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	22a0      	movs	r2, #160	; 0xa0
 8001f2a:	211f      	movs	r1, #31
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff fc7b 	bl	8001828 <gd5f_cmd>
 8001f32:	f88d 0016 	strb.w	r0, [sp, #22]
   return res;
 8001f36:	f89d 3016 	ldrb.w	r3, [sp, #22]
gd5f_set_feature(dev, GD5F_PROTECTION, &feature_byte);

gd5f_get_features(dev);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fe0a 	bl	8001b54 <gd5f_get_features>
return gd5f_wait_busy(dev);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff febb 	bl	8001cbc <gd5f_wait_busy>
}
 8001f46:	b006      	add	sp, #24
 8001f48:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 8001f4a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f4e:	e7fa      	b.n	8001f46 <gd5f_unblock+0x46>

08001f50 <gd5f_ecc_on>:
gd5f_get_features(dev);
return gd5f_wait_busy(dev);
}

GD5F_RESULT gd5f_ecc_on(gd5f* dev)
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 8001f56:	f7ff feb1 	bl	8001cbc <gd5f_wait_busy>
 8001f5a:	bb20      	cbnz	r0, 8001fa6 <gd5f_ecc_on+0x56>
gd5f_get_features(dev);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff fdf9 	bl	8001b54 <gd5f_get_features>
dev->registers.feature_1 |= GD5F_FEATURE_1_ECC_EN;
 8001f62:	7ce3      	ldrb	r3, [r4, #19]
 8001f64:	f043 0310 	orr.w	r3, r3, #16
 8001f68:	4622      	mov	r2, r4
 8001f6a:	f802 3f13 	strb.w	r3, [r2, #19]!
   volatile GD5F_RESULT res = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f88d 3017 	strb.w	r3, [sp, #23]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 8001f74:	2301      	movs	r3, #1
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	22b0      	movs	r2, #176	; 0xb0
 8001f7e:	211f      	movs	r1, #31
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fc51 	bl	8001828 <gd5f_cmd>
 8001f86:	f88d 0017 	strb.w	r0, [sp, #23]
   return res;
 8001f8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
gd5f_set_feature(dev, GD5F_FEATURE_1, &dev->registers.feature_1);
GD5F_WAIT_BUSY();
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff fe94 	bl	8001cbc <gd5f_wait_busy>
 8001f94:	b950      	cbnz	r0, 8001fac <gd5f_ecc_on+0x5c>
gd5f_get_features(dev);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff fddc 	bl	8001b54 <gd5f_get_features>
return gd5f_wait_busy(dev);
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7ff fe8d 	bl	8001cbc <gd5f_wait_busy>
}
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 8001fa6:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001faa:	e7fa      	b.n	8001fa2 <gd5f_ecc_on+0x52>
GD5F_WAIT_BUSY();
 8001fac:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001fb0:	e7f7      	b.n	8001fa2 <gd5f_ecc_on+0x52>
	...

08001fb4 <gd5f_init>:
{
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	4604      	mov	r4, r0
volatile GD5F_RESULT res = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f88d 3007 	strb.w	r3, [sp, #7]
    dev->hw_config.spi = SPI1;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <gd5f_init+0x60>)
 8001fc2:	6003      	str	r3, [r0, #0]
    dev->hw_config.csn_port = FLASH_CSN_GPIO_Port;
 8001fc4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001fc8:	6083      	str	r3, [r0, #8]
    dev->hw_config.csn_pin = FLASH_CSN_Pin;
 8001fca:	f241 0310 	movw	r3, #4112	; 0x1010
 8001fce:	60c3      	str	r3, [r0, #12]
    dev->hw_config.spi_retry_count = GD5F_OP_TIMEOUT;
 8001fd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001fd4:	6043      	str	r3, [r0, #4]
    res |= gd5f_get_id(dev);
 8001fd6:	f7ff feb6 	bl	8001d46 <gd5f_get_id>
 8001fda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	4318      	orrs	r0, r3
 8001fe2:	b240      	sxtb	r0, r0
 8001fe4:	f88d 0007 	strb.w	r0, [sp, #7]
    res |= gd5f_get_features(dev);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff fdb3 	bl	8001b54 <gd5f_get_features>
 8001fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	4318      	orrs	r0, r3
 8001ff6:	b240      	sxtb	r0, r0
 8001ff8:	f88d 0007 	strb.w	r0, [sp, #7]
    gd5f_unblock(dev);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ff7f 	bl	8001f00 <gd5f_unblock>
    gd5f_ecc_on(dev);
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff ffa4 	bl	8001f50 <gd5f_ecc_on>
	return res;
 8002008:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800200c:	b240      	sxtb	r0, r0
 800200e:	b002      	add	sp, #8
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	40013000 	.word	0x40013000

08002018 <LCD1602A_WaitReady>:
{
	LL_GPIO_ResetOutputPin(LCD_DATA_PORT, LCD_BUS_MASK);
}

void LCD1602A_WaitReady(void)
{
 8002018:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800201a:	4a59      	ldr	r2, [pc, #356]	; (8002180 <LCD1602A_WaitReady+0x168>)
 800201c:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	6151      	str	r1, [r2, #20]
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002026:	6810      	ldr	r0, [r2, #0]
 8002028:	f248 0380 	movw	r3, #32896	; 0x8080
 800202c:	fa93 f4a3 	rbit	r4, r3
 8002030:	fab4 f484 	clz	r4, r4
 8002034:	00a4      	lsls	r4, r4, #2
 8002036:	250f      	movs	r5, #15
 8002038:	fa05 f404 	lsl.w	r4, r5, r4
 800203c:	ea20 0004 	bic.w	r0, r0, r4
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	2408      	movs	r4, #8
 800204c:	fa04 f303 	lsl.w	r3, r4, r3
 8002050:	4303      	orrs	r3, r0
 8002052:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002054:	68d0      	ldr	r0, [r2, #12]
 8002056:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800205a:	fa91 f3a1 	rbit	r3, r1
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	4303      	orrs	r3, r0
 800206a:	60d3      	str	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <LCD1602A_WaitReady+0x16c>)
 800206e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002072:	611a      	str	r2, [r3, #16]
	uint8_t Busy_Flag = 0xFF;
	uint16_t retrycount = 0xFFFF;
 8002074:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <LCD1602A_WaitReady+0x168>)
 800207a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800207e:	611a      	str	r2, [r3, #16]
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <LCD1602A_WaitReady+0x170>)
 8002082:	685d      	ldr	r5, [r3, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002084:	f001 fa2e 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002088:	4a40      	ldr	r2, [pc, #256]	; (800218c <LCD1602A_WaitReady+0x174>)
 800208a:	fba2 3200 	umull	r3, r2, r2, r0
 800208e:	0c92      	lsrs	r2, r2, #18
 8002090:	0052      	lsls	r2, r2, #1

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <LCD1602A_WaitReady+0x170>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	1b5b      	subs	r3, r3, r5
 8002098:	4293      	cmp	r3, r2
 800209a:	d3fa      	bcc.n	8002092 <LCD1602A_WaitReady+0x7a>
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <LCD1602A_WaitReady+0x168>)
 800209e:	689d      	ldr	r5, [r3, #8]
 80020a0:	43ed      	mvns	r5, r5
 80020a2:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020aa:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <LCD1602A_WaitReady+0x170>)
 80020ae:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020b0:	f001 fa18 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <LCD1602A_WaitReady+0x174>)
 80020b6:	fba3 3000 	umull	r3, r0, r3, r0
 80020ba:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <LCD1602A_WaitReady+0x170>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	1b9b      	subs	r3, r3, r6
 80020c2:	4283      	cmp	r3, r0
 80020c4:	d3fa      	bcc.n	80020bc <LCD1602A_WaitReady+0xa4>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <LCD1602A_WaitReady+0x168>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <LCD1602A_WaitReady+0x170>)
 80020d0:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020d2:	f001 fa07 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <LCD1602A_WaitReady+0x174>)
 80020d8:	fba2 3200 	umull	r3, r2, r2, r0
 80020dc:	0c92      	lsrs	r2, r2, #18
 80020de:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <LCD1602A_WaitReady+0x170>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	1b9b      	subs	r3, r3, r6
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d3fa      	bcc.n	80020e0 <LCD1602A_WaitReady+0xc8>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <LCD1602A_WaitReady+0x168>)
 80020ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f0:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <LCD1602A_WaitReady+0x170>)
 80020f4:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020f6:	f001 f9f5 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <LCD1602A_WaitReady+0x174>)
 80020fc:	fba3 3000 	umull	r3, r0, r3, r0
 8002100:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <LCD1602A_WaitReady+0x170>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	1b9b      	subs	r3, r3, r6
 8002108:	4283      	cmp	r3, r0
 800210a:	d3fa      	bcc.n	8002102 <LCD1602A_WaitReady+0xea>
			LCD1602A_Delay_us(2);
			Busy_Flag = (LL_GPIO_IsInputPinSet(LCD_PORT_D7, LCD_PIN_D7) > 0);
			LCD1602A_ResetPins(LCD_PORT_E, LCD_PIN_E);
			LCD1602A_Delay_us(1);
			LCD1602A_E_Strobe();
			retrycount --;
 800210c:	3c01      	subs	r4, #1
 800210e:	b2a4      	uxth	r4, r4
		}
	while (Busy_Flag && retrycount);
 8002110:	b90d      	cbnz	r5, 8002116 <LCD1602A_WaitReady+0xfe>
 8002112:	2c00      	cmp	r4, #0
 8002114:	d1b0      	bne.n	8002078 <LCD1602A_WaitReady+0x60>
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <LCD1602A_WaitReady+0x168>)
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002118:	6813      	ldr	r3, [r2, #0]
 800211a:	f248 0180 	movw	r1, #32896	; 0x8080
 800211e:	fa91 f0a1 	rbit	r0, r1
 8002122:	fab0 f080 	clz	r0, r0
 8002126:	0080      	lsls	r0, r0, #2
 8002128:	240f      	movs	r4, #15
 800212a:	fa04 f000 	lsl.w	r0, r4, r0
 800212e:	ea23 0300 	bic.w	r3, r3, r0
 8002132:	fa91 f0a1 	rbit	r0, r1
 8002136:	fab0 f080 	clz	r0, r0
 800213a:	0080      	lsls	r0, r0, #2
 800213c:	2401      	movs	r4, #1
 800213e:	fa04 f000 	lsl.w	r0, r4, r0
 8002142:	4303      	orrs	r3, r0
 8002144:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002146:	2480      	movs	r4, #128	; 0x80
 8002148:	6154      	str	r4, [r2, #20]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800214a:	68d0      	ldr	r0, [r2, #12]
 800214c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002150:	fa94 f4a4 	rbit	r4, r4
 8002154:	60d0      	str	r0, [r2, #12]
 8002156:	fa91 f0a1 	rbit	r0, r1
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800215a:	fab0 f080 	clz	r0, r0
 800215e:	0080      	lsls	r0, r0, #2
 8002160:	2404      	movs	r4, #4
 8002162:	fa04 f000 	lsl.w	r0, r4, r0
 8002166:	ea23 0300 	bic.w	r3, r3, r0
 800216a:	fa91 f1a1 	rbit	r1, r1
 800216e:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002170:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002174:	6153      	str	r3, [r2, #20]
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <LCD1602A_WaitReady+0x16c>)
 8002178:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800217c:	615a      	str	r2, [r3, #20]
	LCD1602A_SetPinDataOut(LCD_PORT_D7, LCD_PIN_D7);
	LCD1602A_ResetPins(LCD_DATA_PORT, LCD_PIN_MASK);
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40010800 	.word	0x40010800
 8002188:	e0001000 	.word	0xe0001000
 800218c:	431bde83 	.word	0x431bde83

08002190 <LCD1602A_SendByte>:


//---Отсылка байта в дисплей---//

void LCD1602A_SendByte(char databyte, uint8_t isData)
{
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4604      	mov	r4, r0
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <LCD1602A_SendByte+0xc4>)
 8002196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800219a:	615a      	str	r2, [r3, #20]
 800219c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80021a4:	615a      	str	r2, [r3, #20]

	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
	if (isData) LCD1602A_SetPins(LCD_PORT_RS, LCD_PIN_RS);
 80021a6:	b111      	cbz	r1, 80021ae <LCD1602A_SendByte+0x1e>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <LCD1602A_SendByte+0xc8>)
 80021b4:	6113      	str	r3, [r2, #16]
 80021b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ba:	6113      	str	r3, [r2, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <LCD1602A_SendByte+0xcc>)
 80021be:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80021c0:	f001 f990 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <LCD1602A_SendByte+0xd0>)
 80021c6:	fba2 3200 	umull	r3, r2, r2, r0
 80021ca:	0c92      	lsrs	r2, r2, #18
 80021cc:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <LCD1602A_SendByte+0xcc>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	1b5b      	subs	r3, r3, r5
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d3fa      	bcc.n	80021ce <LCD1602A_SendByte+0x3e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <LCD1602A_SendByte+0xc8>)
 80021da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021de:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <LCD1602A_SendByte+0xcc>)
 80021e2:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80021e4:	f001 f97e 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <LCD1602A_SendByte+0xd0>)
 80021ea:	fba3 3000 	umull	r3, r0, r3, r0
 80021ee:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <LCD1602A_SendByte+0xcc>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	1b5b      	subs	r3, r3, r5
 80021f6:	4283      	cmp	r3, r0
 80021f8:	d3fa      	bcc.n	80021f0 <LCD1602A_SendByte+0x60>
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <LCD1602A_SendByte+0xc8>)
 80021fc:	22f0      	movs	r2, #240	; 0xf0
 80021fe:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002200:	0124      	lsls	r4, r4, #4
 8002202:	b2e4      	uxtb	r4, r4
 8002204:	611c      	str	r4, [r3, #16]
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <LCD1602A_SendByte+0xcc>)
 800220e:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002210:	f001 f968 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <LCD1602A_SendByte+0xd0>)
 8002216:	fba2 3200 	umull	r3, r2, r2, r0
 800221a:	0c92      	lsrs	r2, r2, #18
 800221c:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <LCD1602A_SendByte+0xcc>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	1b1b      	subs	r3, r3, r4
 8002224:	4293      	cmp	r3, r2
 8002226:	d3fa      	bcc.n	800221e <LCD1602A_SendByte+0x8e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <LCD1602A_SendByte+0xc8>)
 800222a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222e:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <LCD1602A_SendByte+0xcc>)
 8002232:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002234:	f001 f956 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <LCD1602A_SendByte+0xd0>)
 800223a:	fba3 3000 	umull	r3, r0, r3, r0
 800223e:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <LCD1602A_SendByte+0xcc>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	1b1b      	subs	r3, r3, r4
 8002246:	4283      	cmp	r3, r0
 8002248:	d3fa      	bcc.n	8002240 <LCD1602A_SendByte+0xb0>
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <LCD1602A_SendByte+0xc8>)
 800224c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002250:	615a      	str	r2, [r3, #20]
	LCD1602A_ClearDataBus();
    //second halfbyte
	LCD1602A_SetPins(LCD_DATA_PORT, (((databyte & 0x0F) << 4U) << 8U));
	LCD1602A_E_Strobe();
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 8002252:	bd38      	pop	{r3, r4, r5, pc}
 8002254:	40010800 	.word	0x40010800
 8002258:	40010c00 	.word	0x40010c00
 800225c:	e0001000 	.word	0xe0001000
 8002260:	431bde83 	.word	0x431bde83

08002264 <LCD1602A_SendCmdHalfByte>:

void LCD1602A_SendCmdHalfByte(char cmdbyte)
{
 8002264:	b510      	push	{r4, lr}
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <LCD1602A_SendCmdHalfByte+0x68>)
 8002268:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800226c:	615a      	str	r2, [r3, #20]
 800226e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002272:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002276:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002278:	0100      	lsls	r0, r0, #4
 800227a:	b2c0      	uxtb	r0, r0
 800227c:	6118      	str	r0, [r3, #16]
 800227e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002282:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <LCD1602A_SendCmdHalfByte+0x6c>)
 8002286:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002288:	f001 f92c 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <LCD1602A_SendCmdHalfByte+0x70>)
 800228e:	fba2 3200 	umull	r3, r2, r2, r0
 8002292:	0c92      	lsrs	r2, r2, #18
 8002294:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <LCD1602A_SendCmdHalfByte+0x6c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	1b1b      	subs	r3, r3, r4
 800229c:	4293      	cmp	r3, r2
 800229e:	d3fa      	bcc.n	8002296 <LCD1602A_SendCmdHalfByte+0x32>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <LCD1602A_SendCmdHalfByte+0x74>)
 80022a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a6:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022aa:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80022ac:	f001 f91a 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <LCD1602A_SendCmdHalfByte+0x70>)
 80022b2:	fba3 3000 	umull	r3, r0, r3, r0
 80022b6:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	1b1b      	subs	r3, r3, r4
 80022be:	4283      	cmp	r3, r0
 80022c0:	d3fa      	bcc.n	80022b8 <LCD1602A_SendCmdHalfByte+0x54>
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <LCD1602A_SendCmdHalfByte+0x74>)
 80022c4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80022c8:	615a      	str	r2, [r3, #20]

    //second halfbyte, lower half only 0b----XXXX
    LCD1602A_SetPins(LCD_DATA_PORT, (((cmdbyte & 0x0F) << 4U) << 8U));
    LCD1602A_E_Strobe();
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 80022ca:	bd10      	pop	{r4, pc}
 80022cc:	40010800 	.word	0x40010800
 80022d0:	e0001000 	.word	0xe0001000
 80022d4:	431bde83 	.word	0x431bde83
 80022d8:	40010c00 	.word	0x40010c00

080022dc <LCD1602A_SetCursorPos>:
{
	LCD1602A_SendByte(databyte, DATA);
}

void LCD1602A_SetCursorPos(char Row, char Col)
{
 80022dc:	b510      	push	{r4, lr}
	   char address;
	   if (Row == 0)
 80022de:	4604      	mov	r4, r0
 80022e0:	b100      	cbz	r0, 80022e4 <LCD1602A_SetCursorPos+0x8>
	   address = 0;
	   else
	   address = 0x40;
 80022e2:	2440      	movs	r4, #64	; 0x40
	   address |= Col;
 80022e4:	430c      	orrs	r4, r1
	   LCD1602A_WaitReady();
 80022e6:	f7ff fe97 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80022ea:	2100      	movs	r1, #0
 80022ec:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80022f0:	f7ff ff4e 	bl	8002190 <LCD1602A_SendByte>
	   LCD1602A_SendCmd((LCD_SET_DDRAM_ADDR | address));
}
 80022f4:	bd10      	pop	{r4, pc}

080022f6 <LCD1602A_ClearScreen>:


//---Очистка дисплея---//
void LCD1602A_ClearScreen(void)
{
 80022f6:	b508      	push	{r3, lr}
	LCD1602A_WaitReady();
 80022f8:	f7ff fe8e 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80022fc:	2100      	movs	r1, #0
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff ff46 	bl	8002190 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_CLEAR_DISPLAY);
	LCD1602A_WaitReady();
 8002304:	f7ff fe88 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002308:	2100      	movs	r1, #0
 800230a:	2002      	movs	r0, #2
 800230c:	f7ff ff40 	bl	8002190 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_RETURN_HOME);
	LCD1602A_WaitReady();
 8002310:	f7ff fe82 	bl	8002018 <LCD1602A_WaitReady>
}
 8002314:	bd08      	pop	{r3, pc}

08002316 <LCD1602A_EntryModeSet>:


void LCD1602A_EntryModeSet(uint8_t left_to_right, uint8_t shift_all_display)
{
 8002316:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_ENTRY_MODE_SET|(left_to_right << LCD_SHIFT_RIGHT)|(shift_all_display));
 8002318:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 800231c:	b2e4      	uxtb	r4, r4
 800231e:	f044 0404 	orr.w	r4, r4, #4
	LCD1602A_WaitReady();
 8002322:	f7ff fe79 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002326:	2100      	movs	r1, #0
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff31 	bl	8002190 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 800232e:	bd10      	pop	{r4, pc}

08002330 <LCD1602A_DisplayControl>:

void LCD1602A_DisplayControl(uint8_t display_state, uint8_t cursor_show, uint8_t cursor_blink)
{
 8002330:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_DISPLAY_CONTROL|(display_state << LCD_DISPLAY_ON)|(cursor_show << LCD_CURSOR_SHOW)|(cursor_blink));
 8002332:	0080      	lsls	r0, r0, #2
 8002334:	f040 0008 	orr.w	r0, r0, #8
 8002338:	b240      	sxtb	r0, r0
 800233a:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 800233e:	b249      	sxtb	r1, r1
 8002340:	430a      	orrs	r2, r1
 8002342:	b2d4      	uxtb	r4, r2
	LCD1602A_WaitReady();
 8002344:	f7ff fe68 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002348:	2100      	movs	r1, #0
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ff20 	bl	8002190 <LCD1602A_SendByte>
	LCD1602A_SendCmd(lcd_cmd);
}
 8002350:	bd10      	pop	{r4, pc}

08002352 <LCD1602A_FunctionSet>:




void LCD1602A_FunctionSet(uint8_t display_8bit, uint8_t two_lines, uint8_t bigfont)
{
 8002352:	b508      	push	{r3, lr}
	uint8_t lcd_cmd = (LCD_FUNCTION_SET|(display_8bit << LCD_BIT_MODE)|(two_lines << LCD_2_LINES)|(bigfont << LCD_FONT_SIZE_BIG));
 8002354:	0100      	lsls	r0, r0, #4
 8002356:	f040 0020 	orr.w	r0, r0, #32
 800235a:	b240      	sxtb	r0, r0
 800235c:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 8002360:	b240      	sxtb	r0, r0
 8002362:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
	LCD1602A_SendByte(cmdbyte, CMD);
 8002366:	2100      	movs	r1, #0
 8002368:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800236c:	f7ff ff10 	bl	8002190 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 8002370:	bd08      	pop	{r3, pc}

08002372 <LCD1602A_DDRAM_Set>:
	uint8_t lcd_cmd = (LCD_SET_SGRAM_ADDR|(cgram_address & LCD_SGRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}

void LCD1602A_DDRAM_Set(uint8_t ddram_address)
{
 8002372:	b508      	push	{r3, lr}
	LCD1602A_SendByte(cmdbyte, CMD);
 8002374:	2100      	movs	r1, #0
 8002376:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800237a:	f7ff ff09 	bl	8002190 <LCD1602A_SendByte>
	uint8_t lcd_cmd = (LCD_SET_DDRAM_ADDR|(ddram_address & LCD_DDRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}
 800237e:	bd08      	pop	{r3, pc}

08002380 <LCD1602A_4BIT_Preinit>:




void LCD1602A_4BIT_Preinit(void)
{
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <LCD1602A_4BIT_Preinit+0x168>)
 8002384:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002392:	615a      	str	r2, [r3, #20]
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);

	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 8002394:	2003      	movs	r0, #3
 8002396:	f7ff ff65 	bl	8002264 <LCD1602A_SendCmdHalfByte>
 800239a:	f241 0404 	movw	r4, #4100	; 0x1004
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80023a0:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023a2:	f001 f89f 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80023a6:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 80023a8:	fba3 3000 	umull	r3, r0, r3, r0
 80023ac:	0c80      	lsrs	r0, r0, #18
 80023ae:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023b2:	4b4e      	ldr	r3, [pc, #312]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	1b5b      	subs	r3, r3, r5
 80023b8:	42a3      	cmp	r3, r4
 80023ba:	d3fa      	bcc.n	80023b2 <LCD1602A_4BIT_Preinit+0x32>
	LCD1602A_Delay_us(4100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 80023bc:	2003      	movs	r0, #3
 80023be:	f7ff ff51 	bl	8002264 <LCD1602A_SendCmdHalfByte>
 80023c2:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80023c6:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023c8:	f001 f88c 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80023cc:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 80023ce:	fba3 3000 	umull	r3, r0, r3, r0
 80023d2:	0c80      	lsrs	r0, r0, #18
 80023d4:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	1b5b      	subs	r3, r3, r5
 80023de:	42a3      	cmp	r3, r4
 80023e0:	d3fa      	bcc.n	80023d8 <LCD1602A_4BIT_Preinit+0x58>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f7ff ff3e 	bl	8002264 <LCD1602A_SendCmdHalfByte>
 80023e8:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80023ec:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023ee:	f001 f879 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 80023f4:	fba3 3000 	umull	r3, r0, r3, r0
 80023f8:	0c80      	lsrs	r0, r0, #18
 80023fa:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	1b5b      	subs	r3, r3, r5
 8002404:	42a3      	cmp	r3, r4
 8002406:	d3fa      	bcc.n	80023fe <LCD1602A_4BIT_Preinit+0x7e>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_4_BIT);
 8002408:	2002      	movs	r0, #2
 800240a:	f7ff ff2b 	bl	8002264 <LCD1602A_SendCmdHalfByte>
 800240e:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 8002412:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002414:	f001 f866 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 800241a:	fba3 3000 	umull	r3, r0, r3, r0
 800241e:	0c80      	lsrs	r0, r0, #18
 8002420:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	1b5b      	subs	r3, r3, r5
 800242a:	42a3      	cmp	r3, r4
 800242c:	d3fa      	bcc.n	8002424 <LCD1602A_4BIT_Preinit+0xa4>
	LCD1602A_Delay_us(100);
	LCD1602A_FunctionSet(OFF, ON, OFF);
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	4610      	mov	r0, r2
 8002434:	f7ff ff8d 	bl	8002352 <LCD1602A_FunctionSet>
 8002438:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 800243c:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800243e:	f001 f851 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 8002444:	fba3 3000 	umull	r3, r0, r3, r0
 8002448:	0c80      	lsrs	r0, r0, #18
 800244a:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	1b5b      	subs	r3, r3, r5
 8002454:	42a3      	cmp	r3, r4
 8002456:	d3fa      	bcc.n	800244e <LCD1602A_4BIT_Preinit+0xce>
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, OFF, OFF);
 8002458:	2200      	movs	r2, #0
 800245a:	4611      	mov	r1, r2
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff ff67 	bl	8002330 <LCD1602A_DisplayControl>
 8002462:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 8002466:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002468:	f001 f83c 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 800246e:	fba3 3000 	umull	r3, r0, r3, r0
 8002472:	0c80      	lsrs	r0, r0, #18
 8002474:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	1b5b      	subs	r3, r3, r5
 800247e:	42a3      	cmp	r3, r4
 8002480:	d3fa      	bcc.n	8002478 <LCD1602A_4BIT_Preinit+0xf8>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002482:	2100      	movs	r1, #0
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff fe83 	bl	8002190 <LCD1602A_SendByte>
 800248a:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 800248e:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002490:	f001 f828 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 8002496:	fba3 3000 	umull	r3, r0, r3, r0
 800249a:	0c80      	lsrs	r0, r0, #18
 800249c:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	1b5b      	subs	r3, r3, r5
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	d3fa      	bcc.n	80024a0 <LCD1602A_4BIT_Preinit+0x120>
	LCD1602A_Delay_us(80);
	LCD1602A_SendCmd(0x01);
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, ON, ON);
 80024aa:	2201      	movs	r2, #1
 80024ac:	4611      	mov	r1, r2
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7ff ff3e 	bl	8002330 <LCD1602A_DisplayControl>
 80024b4:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80024b8:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80024ba:	f001 f813 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <LCD1602A_4BIT_Preinit+0x170>)
 80024c0:	fba3 3000 	umull	r3, r0, r3, r0
 80024c4:	0c80      	lsrs	r0, r0, #18
 80024c6:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <LCD1602A_4BIT_Preinit+0x16c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	1b5b      	subs	r3, r3, r5
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d3fa      	bcc.n	80024ca <LCD1602A_4BIT_Preinit+0x14a>
	LCD1602A_Delay_us(80);
	LCD1602A_EntryModeSet(ON, OFF);
 80024d4:	2100      	movs	r1, #0
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff ff1d 	bl	8002316 <LCD1602A_EntryModeSet>
	LCD1602A_DDRAM_Set(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff ff48 	bl	8002372 <LCD1602A_DDRAM_Set>
	LCD1602A_WaitReady();
 80024e2:	f7ff fd99 	bl	8002018 <LCD1602A_WaitReady>
}
 80024e6:	bd38      	pop	{r3, r4, r5, pc}
 80024e8:	40010800 	.word	0x40010800
 80024ec:	e0001000 	.word	0xe0001000
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <LCD1602A_Init>:


void LCD1602A_Init(void)
{
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	f64e 2460 	movw	r4, #60000	; 0xea60
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <LCD1602A_Init+0x2c>)
 80024fc:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80024fe:	f000 fff1 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <LCD1602A_Init+0x30>)
 8002504:	fba3 3000 	umull	r3, r0, r3, r0
 8002508:	0c80      	lsrs	r0, r0, #18
 800250a:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <LCD1602A_Init+0x2c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	1b5b      	subs	r3, r3, r5
 8002514:	42a3      	cmp	r3, r4
 8002516:	d3fa      	bcc.n	800250e <LCD1602A_Init+0x1a>
	LCD1602A_Delay_us(60000);
	LCD1602A_4BIT_Preinit();
 8002518:	f7ff ff32 	bl	8002380 <LCD1602A_4BIT_Preinit>
}
 800251c:	bd38      	pop	{r3, r4, r5, pc}
 800251e:	bf00      	nop
 8002520:	e0001000 	.word	0xe0001000
 8002524:	431bde83 	.word	0x431bde83

08002528 <LCD1602A_PrintStr>:


//---Печать строки---//

void LCD1602A_PrintStr(char *Text)
{
 8002528:	b510      	push	{r4, lr}
 800252a:	4604      	mov	r4, r0
	 char *c;
	    c = Text;
	    while ((c != 0) && (*c != 0))
 800252c:	e006      	b.n	800253c <LCD1602A_PrintStr+0x14>
	    {
	    	LCD1602A_WaitReady();
 800252e:	f7ff fd73 	bl	8002018 <LCD1602A_WaitReady>
	LCD1602A_SendByte(databyte, DATA);
 8002532:	2101      	movs	r1, #1
 8002534:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002538:	f7ff fe2a 	bl	8002190 <LCD1602A_SendByte>
	    while ((c != 0) && (*c != 0))
 800253c:	b114      	cbz	r4, 8002544 <LCD1602A_PrintStr+0x1c>
 800253e:	7823      	ldrb	r3, [r4, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f4      	bne.n	800252e <LCD1602A_PrintStr+0x6>
	    	LCD1602A_SendData(*c);
	        c++;
	    }
}
 8002544:	bd10      	pop	{r4, pc}
	...

08002548 <TIM_Delay_Callback>:
    }
    
}
 void TIM_Delay_Callback(void)
{
    tim_wait = 0;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <TIM_Delay_Callback+0x24>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <TIM_Delay_Callback+0x28>)
 8002550:	691b      	ldr	r3, [r3, #16]
    if(LL_TIM_IsActiveFlag_UPDATE(TIM_DELAY))
 8002552:	f013 0f01 	tst.w	r3, #1
 8002556:	d007      	beq.n	8002568 <TIM_Delay_Callback+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <TIM_Delay_Callback+0x28>)
 800255a:	f06f 0201 	mvn.w	r2, #1
 800255e:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]
      {
          LL_TIM_ClearFlag_UPDATE(TIM_DELAY);
          LL_TIM_DisableIT_UPDATE(TIM_DELAY);
      }
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	200012f0 	.word	0x200012f0
 8002570:	40001400 	.word	0x40001400

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x20>)
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f043 0310 	orr.w	r3, r3, #16
 800257e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002580:	2003      	movs	r0, #3
 8002582:	f000 f82f 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe fe2c 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800258c:	f7fe fdf8 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002590:	2000      	movs	r0, #0
 8002592:	bd08      	pop	{r3, pc}
 8002594:	40022000 	.word	0x40022000

08002598 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002598:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <HAL_IncTick+0x10>)
 800259a:	6811      	ldr	r1, [r2, #0]
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_IncTick+0x14>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	440b      	add	r3, r1
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20006578 	.word	0x20006578
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025b0:	4b01      	ldr	r3, [pc, #4]	; (80025b8 <HAL_GetTick+0x8>)
 80025b2:	6818      	ldr	r0, [r3, #0]
}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20006578 	.word	0x20006578

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fff6 	bl	80025b0 <HAL_GetTick>
 80025c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80025ca:	d002      	beq.n	80025d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_Delay+0x24>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d2:	f7ff ffed 	bl	80025b0 <HAL_GetTick>
 80025d6:	1b40      	subs	r0, r0, r5
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d3fa      	bcc.n	80025d2 <HAL_Delay+0x16>
  {
  }
}
 80025dc:	bd38      	pop	{r3, r4, r5, pc}
 80025de:	bf00      	nop
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80025e8:	1ec3      	subs	r3, r0, #3
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d80f      	bhi.n	800260e <HAL_NVIC_SetPriorityGrouping+0x2a>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80025f0:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80025fa:	0224      	lsls	r4, r4, #8
 80025fc:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8002602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800260a:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800260c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800260e:	21a2      	movs	r1, #162	; 0xa2
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8002612:	f7fe fbe4 	bl	8000dde <assert_failed>
 8002616:	e7ea      	b.n	80025ee <HAL_NVIC_SetPriorityGrouping+0xa>
 8002618:	e000ed00 	.word	0xe000ed00
 800261c:	0800eb34 	.word	0x0800eb34

08002620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	4605      	mov	r5, r0
 8002624:	460c      	mov	r4, r1
 8002626:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002628:	2a0f      	cmp	r2, #15
 800262a:	d825      	bhi.n	8002678 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800262c:	2c0f      	cmp	r4, #15
 800262e:	d828      	bhi.n	8002682 <HAL_NVIC_SetPriority+0x62>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_NVIC_SetPriority+0x80>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	f1c3 0207 	rsb	r2, r3, #7
 800263c:	2a04      	cmp	r2, #4
 800263e:	bf28      	it	cs
 8002640:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	1d19      	adds	r1, r3, #4
 8002644:	2906      	cmp	r1, #6
 8002646:	d921      	bls.n	800268c <HAL_NVIC_SetPriority+0x6c>
 8002648:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264a:	f04f 31ff 	mov.w	r1, #4294967295
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	ea24 0402 	bic.w	r4, r4, r2
 8002656:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) < 0)
 8002662:	2d00      	cmp	r5, #0
 8002664:	db14      	blt.n	8002690 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	0124      	lsls	r4, r4, #4
 8002668:	b2e4      	uxtb	r4, r4
 800266a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800266e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8002672:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002676:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002678:	21ba      	movs	r1, #186	; 0xba
 800267a:	480a      	ldr	r0, [pc, #40]	; (80026a4 <HAL_NVIC_SetPriority+0x84>)
 800267c:	f7fe fbaf 	bl	8000dde <assert_failed>
 8002680:	e7d4      	b.n	800262c <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002682:	21bb      	movs	r1, #187	; 0xbb
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <HAL_NVIC_SetPriority+0x84>)
 8002686:	f7fe fbaa 	bl	8000dde <assert_failed>
 800268a:	e7d1      	b.n	8002630 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268c:	2300      	movs	r3, #0
 800268e:	e7dc      	b.n	800264a <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	f005 050f 	and.w	r5, r5, #15
 8002694:	0124      	lsls	r4, r4, #4
 8002696:	b2e4      	uxtb	r4, r4
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_NVIC_SetPriority+0x88>)
 800269a:	555c      	strb	r4, [r3, r5]
 800269c:	e7eb      	b.n	8002676 <HAL_NVIC_SetPriority+0x56>
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00
 80026a4:	0800eb34 	.word	0x0800eb34
 80026a8:	e000ed14 	.word	0xe000ed14

080026ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026ae:	1e04      	subs	r4, r0, #0
 80026b0:	db08      	blt.n	80026c4 <HAL_NVIC_EnableIRQ+0x18>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026b2:	f004 021f 	and.w	r2, r4, #31
 80026b6:	0964      	lsrs	r4, r4, #5
 80026b8:	2301      	movs	r3, #1
 80026ba:	4093      	lsls	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_NVIC_EnableIRQ+0x24>)
 80026be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026c2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026c4:	21ce      	movs	r1, #206	; 0xce
 80026c6:	4803      	ldr	r0, [pc, #12]	; (80026d4 <HAL_NVIC_EnableIRQ+0x28>)
 80026c8:	f7fe fb89 	bl	8000dde <assert_failed>
 80026cc:	e7f1      	b.n	80026b2 <HAL_NVIC_EnableIRQ+0x6>
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	0800eb34 	.word	0x0800eb34

080026d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e2:	2304      	movs	r3, #4
 80026e4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80026e8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ea:	6802      	ldr	r2, [r0, #0]
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f023 030e 	bic.w	r3, r3, #14
 80026f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026f4:	6802      	ldr	r2, [r0, #0]
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026fe:	6803      	ldr	r3, [r0, #0]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_DMA_Abort_IT+0x158>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d94e      	bls.n	80027a4 <HAL_DMA_Abort_IT+0xcc>
 8002706:	3a78      	subs	r2, #120	; 0x78
 8002708:	4293      	cmp	r3, r2
 800270a:	d024      	beq.n	8002756 <HAL_DMA_Abort_IT+0x7e>
 800270c:	3214      	adds	r2, #20
 800270e:	4293      	cmp	r3, r2
 8002710:	d030      	beq.n	8002774 <HAL_DMA_Abort_IT+0x9c>
 8002712:	3214      	adds	r2, #20
 8002714:	4293      	cmp	r3, r2
 8002716:	d02f      	beq.n	8002778 <HAL_DMA_Abort_IT+0xa0>
 8002718:	3214      	adds	r2, #20
 800271a:	4293      	cmp	r3, r2
 800271c:	d02f      	beq.n	800277e <HAL_DMA_Abort_IT+0xa6>
 800271e:	3214      	adds	r2, #20
 8002720:	4293      	cmp	r3, r2
 8002722:	d02f      	beq.n	8002784 <HAL_DMA_Abort_IT+0xac>
 8002724:	3214      	adds	r2, #20
 8002726:	4293      	cmp	r3, r2
 8002728:	d02f      	beq.n	800278a <HAL_DMA_Abort_IT+0xb2>
 800272a:	3214      	adds	r2, #20
 800272c:	4293      	cmp	r3, r2
 800272e:	d02f      	beq.n	8002790 <HAL_DMA_Abort_IT+0xb8>
 8002730:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002734:	4293      	cmp	r3, r2
 8002736:	d02e      	beq.n	8002796 <HAL_DMA_Abort_IT+0xbe>
 8002738:	3214      	adds	r2, #20
 800273a:	4293      	cmp	r3, r2
 800273c:	d02d      	beq.n	800279a <HAL_DMA_Abort_IT+0xc2>
 800273e:	3214      	adds	r2, #20
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_Abort_IT+0xc6>
 8002744:	3214      	adds	r2, #20
 8002746:	4293      	cmp	r3, r2
 8002748:	d002      	beq.n	8002750 <HAL_DMA_Abort_IT+0x78>
 800274a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800274e:	e003      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002754:	e000      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002756:	2201      	movs	r2, #1
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <HAL_DMA_Abort_IT+0x15c>)
 800275a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800275c:	2301      	movs	r3, #1
 800275e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002762:	2300      	movs	r3, #0
 8002764:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002768:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d05e      	beq.n	800282c <HAL_DMA_Abort_IT+0x154>
      hdma->XferAbortCallback(hdma);
 800276e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2000      	movs	r0, #0
 8002772:	e7b9      	b.n	80026e8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002774:	2210      	movs	r2, #16
 8002776:	e7ef      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277c:	e7ec      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 800277e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002782:	e7e9      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002784:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002788:	e7e6      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 800278a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800278e:	e7e3      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002794:	e7e0      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 8002796:	2201      	movs	r2, #1
 8002798:	e7de      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 800279a:	2210      	movs	r2, #16
 800279c:	e7dc      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 800279e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a2:	e7d9      	b.n	8002758 <HAL_DMA_Abort_IT+0x80>
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_DMA_Abort_IT+0x160>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d024      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x11c>
 80027aa:	3214      	adds	r2, #20
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d025      	beq.n	80027fc <HAL_DMA_Abort_IT+0x124>
 80027b0:	3214      	adds	r2, #20
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d024      	beq.n	8002800 <HAL_DMA_Abort_IT+0x128>
 80027b6:	3214      	adds	r2, #20
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d024      	beq.n	8002806 <HAL_DMA_Abort_IT+0x12e>
 80027bc:	3214      	adds	r2, #20
 80027be:	4293      	cmp	r3, r2
 80027c0:	d024      	beq.n	800280c <HAL_DMA_Abort_IT+0x134>
 80027c2:	3214      	adds	r2, #20
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d024      	beq.n	8002812 <HAL_DMA_Abort_IT+0x13a>
 80027c8:	3214      	adds	r2, #20
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d024      	beq.n	8002818 <HAL_DMA_Abort_IT+0x140>
 80027ce:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d023      	beq.n	800281e <HAL_DMA_Abort_IT+0x146>
 80027d6:	3214      	adds	r2, #20
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_Abort_IT+0x14a>
 80027dc:	3214      	adds	r2, #20
 80027de:	4293      	cmp	r3, r2
 80027e0:	d021      	beq.n	8002826 <HAL_DMA_Abort_IT+0x14e>
 80027e2:	3214      	adds	r2, #20
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d002      	beq.n	80027ee <HAL_DMA_Abort_IT+0x116>
 80027e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ec:	e003      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 80027ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f2:	e000      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 80027f4:	2201      	movs	r2, #1
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_DMA_Abort_IT+0x164>)
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e7af      	b.n	800275c <HAL_DMA_Abort_IT+0x84>
 80027fc:	2210      	movs	r2, #16
 80027fe:	e7fa      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002804:	e7f7      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800280a:	e7f4      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 800280c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002810:	e7f1      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002812:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002816:	e7ee      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800281c:	e7eb      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 800281e:	2201      	movs	r2, #1
 8002820:	e7e9      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002822:	2210      	movs	r2, #16
 8002824:	e7e7      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
 8002826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800282a:	e7e4      	b.n	80027f6 <HAL_DMA_Abort_IT+0x11e>
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e75b      	b.n	80026e8 <HAL_DMA_Abort_IT+0x10>
 8002830:	40020080 	.word	0x40020080
 8002834:	40020400 	.word	0x40020400
 8002838:	40020008 	.word	0x40020008
 800283c:	40020000 	.word	0x40020000

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002844:	b083      	sub	sp, #12
 8002846:	4680      	mov	r8, r0
 8002848:	460f      	mov	r7, r1
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800284a:	4bba      	ldr	r3, [pc, #744]	; (8002b34 <HAL_GPIO_Init+0x2f4>)
 800284c:	4298      	cmp	r0, r3
 800284e:	d01b      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002854:	4298      	cmp	r0, r3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285c:	4298      	cmp	r0, r3
 800285e:	d013      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	4298      	cmp	r0, r3
 8002866:	d00f      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286c:	4298      	cmp	r0, r3
 800286e:	d00b      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	4298      	cmp	r0, r3
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287c:	4298      	cmp	r0, r3
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x48>
 8002880:	21cd      	movs	r1, #205	; 0xcd
 8002882:	48ad      	ldr	r0, [pc, #692]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002884:	f7fe faab 	bl	8000dde <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	b112      	cbz	r2, 8002894 <HAL_GPIO_Init+0x54>
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	b11b      	cbz	r3, 800289c <HAL_GPIO_Init+0x5c>
 8002894:	21ce      	movs	r1, #206	; 0xce
 8002896:	48a8      	ldr	r0, [pc, #672]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002898:	f7fe faa1 	bl	8000dde <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d91e      	bls.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028a2:	2b11      	cmp	r3, #17
 80028a4:	d01c      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d01a      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d018      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028ae:	4aa3      	ldr	r2, [pc, #652]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d015      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028b4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d011      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028bc:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00d      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028c4:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028cc:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d005      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028d4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80028d8:	4293      	cmp	r3, r2
 80028da:	d001      	beq.n	80028e0 <HAL_GPIO_Init+0xa0>
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d103      	bne.n	80028e8 <HAL_GPIO_Init+0xa8>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e0:	f04f 0900 	mov.w	r9, #0
 80028e4:	464e      	mov	r6, r9
 80028e6:	e0e2      	b.n	8002aae <HAL_GPIO_Init+0x26e>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028e8:	21cf      	movs	r1, #207	; 0xcf
 80028ea:	4893      	ldr	r0, [pc, #588]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80028ec:	f7fe fa77 	bl	8000dde <assert_failed>
 80028f0:	e7f6      	b.n	80028e0 <HAL_GPIO_Init+0xa0>
      switch (GPIO_Init->Mode)
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d068      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d86f      	bhi.n	80029e2 <HAL_GPIO_Init+0x1a2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002902:	f8d7 900c 	ldr.w	r9, [r7, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002906:	2cff      	cmp	r4, #255	; 0xff
 8002908:	f200 80a0 	bhi.w	8002a4c <HAL_GPIO_Init+0x20c>
 800290c:	4640      	mov	r0, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800290e:	2cff      	cmp	r4, #255	; 0xff
 8002910:	f200 809f 	bhi.w	8002a52 <HAL_GPIO_Init+0x212>
 8002914:	00b2      	lsls	r2, r6, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	210f      	movs	r1, #15
 800291a:	4091      	lsls	r1, r2
 800291c:	ea23 0301 	bic.w	r3, r3, r1
 8002920:	fa09 f202 	lsl.w	r2, r9, r2
 8002924:	4313      	orrs	r3, r2
 8002926:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800292e:	f000 80bd 	beq.w	8002aac <HAL_GPIO_Init+0x26c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002932:	4b83      	ldr	r3, [pc, #524]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	619a      	str	r2, [r3, #24]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8002946:	08b2      	lsrs	r2, r6, #2
 8002948:	1c91      	adds	r1, r2, #2
 800294a:	4b7e      	ldr	r3, [pc, #504]	; (8002b44 <HAL_GPIO_Init+0x304>)
 800294c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002950:	f006 0303 	and.w	r3, r6, #3
 8002954:	0099      	lsls	r1, r3, #2
 8002956:	230f      	movs	r3, #15
 8002958:	408b      	lsls	r3, r1
 800295a:	ea20 0003 	bic.w	r0, r0, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <HAL_GPIO_Init+0x2f4>)
 8002960:	4598      	cmp	r8, r3
 8002962:	d07c      	beq.n	8002a5e <HAL_GPIO_Init+0x21e>
 8002964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002968:	4598      	cmp	r8, r3
 800296a:	f000 80df 	beq.w	8002b2c <HAL_GPIO_Init+0x2ec>
 800296e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002972:	4598      	cmp	r8, r3
 8002974:	f000 80dc 	beq.w	8002b30 <HAL_GPIO_Init+0x2f0>
 8002978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297c:	4598      	cmp	r8, r3
 800297e:	f000 80e9 	beq.w	8002b54 <HAL_GPIO_Init+0x314>
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	4598      	cmp	r8, r3
 8002988:	f000 80e6 	beq.w	8002b58 <HAL_GPIO_Init+0x318>
 800298c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002990:	4598      	cmp	r8, r3
 8002992:	d062      	beq.n	8002a5a <HAL_GPIO_Init+0x21a>
 8002994:	2306      	movs	r3, #6
 8002996:	e063      	b.n	8002a60 <HAL_GPIO_Init+0x220>
      switch (GPIO_Init->Mode)
 8002998:	4a6b      	ldr	r2, [pc, #428]	; (8002b48 <HAL_GPIO_Init+0x308>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d014      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 800299e:	d90b      	bls.n	80029b8 <HAL_GPIO_Init+0x178>
 80029a0:	4a6a      	ldr	r2, [pc, #424]	; (8002b4c <HAL_GPIO_Init+0x30c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d010      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 80029a6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00c      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 80029ae:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d1a7      	bne.n	8002906 <HAL_GPIO_Init+0xc6>
 80029b6:	e007      	b.n	80029c8 <HAL_GPIO_Init+0x188>
 80029b8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 80029c0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d19e      	bne.n	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d82d      	bhi.n	8002a2a <HAL_GPIO_Init+0x1ea>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d038      	beq.n	8002a46 <HAL_GPIO_Init+0x206>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d02e      	beq.n	8002a36 <HAL_GPIO_Init+0x1f6>
            GPIOx->BRR = ioposition;
 80029d8:	f8c8 5014 	str.w	r5, [r8, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029dc:	f04f 0908 	mov.w	r9, #8
 80029e0:	e791      	b.n	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80029e2:	21e5      	movs	r1, #229	; 0xe5
 80029e4:	4854      	ldr	r0, [pc, #336]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80029e6:	f7fe f9fa 	bl	8000dde <assert_failed>
 80029ea:	e78a      	b.n	8002902 <HAL_GPIO_Init+0xc2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80029ec:	21ec      	movs	r1, #236	; 0xec
 80029ee:	4852      	ldr	r0, [pc, #328]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 80029f0:	f7fe f9f5 	bl	8000dde <assert_failed>
 80029f4:	e096      	b.n	8002b24 <HAL_GPIO_Init+0x2e4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d803      	bhi.n	8002a06 <HAL_GPIO_Init+0x1c6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f103 0908 	add.w	r9, r3, #8
          break;
 8002a04:	e77f      	b.n	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a06:	21f3      	movs	r1, #243	; 0xf3
 8002a08:	484b      	ldr	r0, [pc, #300]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a0a:	f7fe f9e8 	bl	8000dde <assert_failed>
 8002a0e:	e7f6      	b.n	80029fe <HAL_GPIO_Init+0x1be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d803      	bhi.n	8002a20 <HAL_GPIO_Init+0x1e0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f103 090c 	add.w	r9, r3, #12
          break;
 8002a1e:	e772      	b.n	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a20:	21fa      	movs	r1, #250	; 0xfa
 8002a22:	4845      	ldr	r0, [pc, #276]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a24:	f7fe f9db 	bl	8000dde <assert_failed>
 8002a28:	e7f6      	b.n	8002a18 <HAL_GPIO_Init+0x1d8>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002a2a:	f240 1107 	movw	r1, #263	; 0x107
 8002a2e:	4842      	ldr	r0, [pc, #264]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a30:	f7fe f9d5 	bl	8000dde <assert_failed>
 8002a34:	e7cb      	b.n	80029ce <HAL_GPIO_Init+0x18e>
            GPIOx->BSRR = ioposition;
 8002a36:	f8c8 5010 	str.w	r5, [r8, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a3a:	f04f 0908 	mov.w	r9, #8
 8002a3e:	e762      	b.n	8002906 <HAL_GPIO_Init+0xc6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a40:	f04f 0900 	mov.w	r9, #0
 8002a44:	e75f      	b.n	8002906 <HAL_GPIO_Init+0xc6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a46:	f04f 0904 	mov.w	r9, #4
 8002a4a:	e75c      	b.n	8002906 <HAL_GPIO_Init+0xc6>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a4c:	f108 0004 	add.w	r0, r8, #4
 8002a50:	e75d      	b.n	800290e <HAL_GPIO_Init+0xce>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002a52:	f1a6 0208 	sub.w	r2, r6, #8
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	e75d      	b.n	8002916 <HAL_GPIO_Init+0xd6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x220>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	408b      	lsls	r3, r1
 8002a62:	4303      	orrs	r3, r0
        AFIO->EXTICR[position >> 2U] = temp;
 8002a64:	3202      	adds	r2, #2
 8002a66:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a72:	d073      	beq.n	8002b5c <HAL_GPIO_Init+0x31c>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a74:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	4323      	orrs	r3, r4
 8002a7a:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a82:	d071      	beq.n	8002b68 <HAL_GPIO_Init+0x328>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a84:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	4323      	orrs	r3, r4
 8002a8a:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a92:	d06f      	beq.n	8002b74 <HAL_GPIO_Init+0x334>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a94:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002a96:	6893      	ldr	r3, [r2, #8]
 8002a98:	4323      	orrs	r3, r4
 8002a9a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002aa2:	d06d      	beq.n	8002b80 <HAL_GPIO_Init+0x340>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aa4:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002aa6:	68d3      	ldr	r3, [r2, #12]
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	60d4      	str	r4, [r2, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002aac:	3601      	adds	r6, #1
 8002aae:	2e0f      	cmp	r6, #15
 8002ab0:	d86c      	bhi.n	8002b8c <HAL_GPIO_Init+0x34c>
    ioposition = (0x01U << position);
 8002ab2:	2501      	movs	r5, #1
 8002ab4:	40b5      	lsls	r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683c      	ldr	r4, [r7, #0]
 8002ab8:	402c      	ands	r4, r5
    if (iocurrent == ioposition)
 8002aba:	42a5      	cmp	r5, r4
 8002abc:	d1f6      	bne.n	8002aac <HAL_GPIO_Init+0x26c>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_GPIO_Init+0x2f4>)
 8002ac0:	4598      	cmp	r8, r3
 8002ac2:	d01b      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac8:	4598      	cmp	r8, r3
 8002aca:	d017      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad0:	4598      	cmp	r8, r3
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad8:	4598      	cmp	r8, r3
 8002ada:	d00f      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae0:	4598      	cmp	r8, r3
 8002ae2:	d00b      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae8:	4598      	cmp	r8, r3
 8002aea:	d007      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af0:	4598      	cmp	r8, r3
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2bc>
 8002af4:	21dd      	movs	r1, #221	; 0xdd
 8002af6:	4810      	ldr	r0, [pc, #64]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002af8:	f7fe f971 	bl	8000dde <assert_failed>
      switch (GPIO_Init->Mode)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d086      	beq.n	8002a10 <HAL_GPIO_Init+0x1d0>
 8002b02:	f63f af49 	bhi.w	8002998 <HAL_GPIO_Init+0x158>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f43f af75 	beq.w	80029f6 <HAL_GPIO_Init+0x1b6>
 8002b0c:	f67f aef1 	bls.w	80028f2 <HAL_GPIO_Init+0xb2>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d095      	beq.n	8002a40 <HAL_GPIO_Init+0x200>
 8002b14:	2b11      	cmp	r3, #17
 8002b16:	f47f aef6 	bne.w	8002906 <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f63f af64 	bhi.w	80029ec <HAL_GPIO_Init+0x1ac>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f103 0904 	add.w	r9, r3, #4
          break;
 8002b2a:	e6ec      	b.n	8002906 <HAL_GPIO_Init+0xc6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e797      	b.n	8002a60 <HAL_GPIO_Init+0x220>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e795      	b.n	8002a60 <HAL_GPIO_Init+0x220>
 8002b34:	40010800 	.word	0x40010800
 8002b38:	0800eb70 	.word	0x0800eb70
 8002b3c:	10110000 	.word	0x10110000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010000 	.word	0x40010000
 8002b48:	10210000 	.word	0x10210000
 8002b4c:	10310000 	.word	0x10310000
 8002b50:	40010400 	.word	0x40010400
 8002b54:	2303      	movs	r3, #3
 8002b56:	e783      	b.n	8002a60 <HAL_GPIO_Init+0x220>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e781      	b.n	8002a60 <HAL_GPIO_Init+0x220>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_GPIO_Init+0x354>)
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	ea23 0304 	bic.w	r3, r3, r4
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e789      	b.n	8002a7c <HAL_GPIO_Init+0x23c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_GPIO_Init+0x354>)
 8002b6a:	6853      	ldr	r3, [r2, #4]
 8002b6c:	ea23 0304 	bic.w	r3, r3, r4
 8002b70:	6053      	str	r3, [r2, #4]
 8002b72:	e78b      	b.n	8002a8c <HAL_GPIO_Init+0x24c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b74:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_GPIO_Init+0x354>)
 8002b76:	6893      	ldr	r3, [r2, #8]
 8002b78:	ea23 0304 	bic.w	r3, r3, r4
 8002b7c:	6093      	str	r3, [r2, #8]
 8002b7e:	e78d      	b.n	8002a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_GPIO_Init+0x354>)
 8002b82:	68d3      	ldr	r3, [r2, #12]
 8002b84:	ea23 0404 	bic.w	r4, r3, r4
 8002b88:	60d4      	str	r4, [r2, #12]
 8002b8a:	e78f      	b.n	8002aac <HAL_GPIO_Init+0x26c>
        }
      }
    }
  }
}
 8002b8c:	b003      	add	sp, #12
 8002b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b92:	bf00      	nop
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	b121      	cbz	r1, 8002baa <HAL_GPIO_ReadPin+0x12>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba0:	68ab      	ldr	r3, [r5, #8]
 8002ba2:	421c      	tst	r4, r3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002baa:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <HAL_GPIO_ReadPin+0x24>)
 8002bb0:	f7fe f915 	bl	8000dde <assert_failed>
 8002bb4:	e7f4      	b.n	8002ba0 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_SET;
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	e7f6      	b.n	8002ba8 <HAL_GPIO_ReadPin+0x10>
 8002bba:	bf00      	nop
 8002bbc:	0800eb70 	.word	0x0800eb70

08002bc0 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d06f      	beq.n	8002ca4 <HAL_PCD_Init+0xe4>
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002bca:	6802      	ldr	r2, [r0, #0]
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_PCD_Init+0xe8>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d003      	beq.n	8002bda <HAL_PCD_Init+0x1a>
 8002bd2:	219f      	movs	r1, #159	; 0x9f
 8002bd4:	4835      	ldr	r0, [pc, #212]	; (8002cac <HAL_PCD_Init+0xec>)
 8002bd6:	f7fe f902 	bl	8000dde <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002bda:	f894 3429 	ldrb.w	r3, [r4, #1065]	; 0x429
 8002bde:	b1c3      	cbz	r3, 8002c12 <HAL_PCD_Init+0x52>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be0:	2303      	movs	r3, #3
 8002be2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002be6:	6820      	ldr	r0, [r4, #0]
 8002be8:	f003 f8a1 	bl	8005d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002bec:	4625      	mov	r5, r4
 8002bee:	f855 7b10 	ldr.w	r7, [r5], #16
 8002bf2:	466e      	mov	r6, sp
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	6033      	str	r3, [r6, #0]
 8002bfc:	1d23      	adds	r3, r4, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	4638      	mov	r0, r7
 8002c02:	f003 f885 	bl	8005d10 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8002c06:	2100      	movs	r1, #0
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	f003 f89a 	bl	8005d42 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e016      	b.n	8002c40 <HAL_PCD_Init+0x80>
    hpcd->Lock = HAL_UNLOCKED;
 8002c12:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f00a fb80 	bl	800d31c <HAL_PCD_MspInit>
 8002c1c:	e7e0      	b.n	8002be0 <HAL_PCD_Init+0x20>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8002c1e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002c22:	2101      	movs	r1, #1
 8002c24:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 8002c28:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002c2c:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8002c34:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8002c36:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8002c38:	1c9a      	adds	r2, r3, #2
 8002c3a:	0152      	lsls	r2, r2, #5
 8002c3c:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8002c3e:	3301      	adds	r3, #1
 8002c40:	2b0e      	cmp	r3, #14
 8002c42:	d9ec      	bls.n	8002c1e <HAL_PCD_Init+0x5e>
  }
 
  for (index = 0U; index < 15U ; index++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	e012      	b.n	8002c6e <HAL_PCD_Init+0xae>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8002c48:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 8002c52:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002c56:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8002c58:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8002c5c:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8002c60:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8002c64:	f103 0212 	add.w	r2, r3, #18
 8002c68:	0152      	lsls	r2, r2, #5
 8002c6a:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	2b0e      	cmp	r3, #14
 8002c70:	d9ea      	bls.n	8002c48 <HAL_PCD_Init+0x88>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c72:	4625      	mov	r5, r4
 8002c74:	f855 7b10 	ldr.w	r7, [r5], #16
 8002c78:	466e      	mov	r6, sp
 8002c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	6033      	str	r3, [r6, #0]
 8002c82:	1d23      	adds	r3, r4, #4
 8002c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c86:	4638      	mov	r0, r7
 8002c88:	f003 f85d 	bl	8005d46 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	f003 fb6c 	bl	8006376 <USB_DevDisconnect>
  return HAL_OK;
 8002c9e:	4628      	mov	r0, r5
}
 8002ca0:	b007      	add	sp, #28
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
}
 8002ca6:	4770      	bx	lr
 8002ca8:	40005c00 	.word	0x40005c00
 8002cac:	0800ebac 	.word	0x0800ebac

08002cb0 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002cb0:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d010      	beq.n	8002cda <HAL_PCD_Start+0x2a>
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8002cc2:	f00a fc36 	bl	800d532 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	f003 fb53 	bl	8006372 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	f003 f826 	bl	8005d1e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8002cd8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002cda:	2002      	movs	r0, #2
}
 8002cdc:	4770      	bx	lr

08002cde <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002cde:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00d      	beq.n	8002d02 <HAL_PCD_SetAddress+0x24>
{
 8002ce6:	b510      	push	{r4, lr}
 8002ce8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002cea:	2301      	movs	r3, #1
 8002cec:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002cf0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8002cf4:	6800      	ldr	r0, [r0, #0]
 8002cf6:	f003 fb36 	bl	8006366 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8002d00:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002d02:	2002      	movs	r0, #2
}
 8002d04:	4770      	bx	lr

08002d06 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d06:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002d08:	b24d      	sxtb	r5, r1
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	db1c      	blt.n	8002d48 <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002d0e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002d12:	0164      	lsls	r4, r4, #5
 8002d14:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8002d18:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8002d1a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002d1e:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002d20:	0fed      	lsrs	r5, r5, #31
 8002d22:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8002d24:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8002d26:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8002d28:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d011      	beq.n	8002d54 <HAL_PCD_EP_Open+0x4e>
 8002d30:	4605      	mov	r5, r0
 8002d32:	2301      	movs	r3, #1
 8002d34:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002d38:	4621      	mov	r1, r4
 8002d3a:	6800      	ldr	r0, [r0, #0]
 8002d3c:	f003 f81d 	bl	8005d7a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002d48:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002d4c:	0164      	lsls	r4, r4, #5
 8002d4e:	3428      	adds	r4, #40	; 0x28
 8002d50:	4404      	add	r4, r0
 8002d52:	e7e2      	b.n	8002d1a <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 8002d54:	2002      	movs	r0, #2
 8002d56:	e7f6      	b.n	8002d46 <HAL_PCD_EP_Open+0x40>

08002d58 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002d58:	b24a      	sxtb	r2, r1
 8002d5a:	2a00      	cmp	r2, #0
 8002d5c:	db1b      	blt.n	8002d96 <HAL_PCD_EP_Close+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002d5e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002d68:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8002d6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002d6e:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002d70:	0fd2      	lsrs	r2, r2, #31
 8002d72:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002d74:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	d012      	beq.n	8002da2 <HAL_PCD_EP_Close+0x4a>
{  
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002d86:	4619      	mov	r1, r3
 8002d88:	6800      	ldr	r0, [r0, #0]
 8002d8a:	f003 f98a 	bl	80060a2 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8002d94:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002d96:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	3328      	adds	r3, #40	; 0x28
 8002d9e:	4403      	add	r3, r0
 8002da0:	e7e3      	b.n	8002d6a <HAL_PCD_EP_Close+0x12>
  __HAL_LOCK(hpcd);
 8002da2:	2002      	movs	r0, #2
}
 8002da4:	4770      	bx	lr

08002da6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da6:	b570      	push	{r4, r5, r6, lr}
 8002da8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002dac:	016c      	lsls	r4, r5, #5
 8002dae:	f504 710a 	add.w	r1, r4, #552	; 0x228
 8002db2:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002db4:	4404      	add	r4, r0
 8002db6:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8002dba:	f105 0212 	add.w	r2, r5, #18
 8002dbe:	0152      	lsls	r2, r2, #5
 8002dc0:	1886      	adds	r6, r0, r2
 8002dc2:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 8002dc8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 8002dcc:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 8002dd0:	b125      	cbz	r5, 8002ddc <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002dd2:	6800      	ldr	r0, [r0, #0]
 8002dd4:	f003 faeb 	bl	80063ae <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002dd8:	2000      	movs	r0, #0
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f003 fae6 	bl	80063ae <USB_EPStartXfer>
 8002de2:	e7f9      	b.n	8002dd8 <HAL_PCD_EP_Receive+0x32>

08002de4 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002de4:	f001 010f 	and.w	r1, r1, #15
 8002de8:	3112      	adds	r1, #18
 8002dea:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8002dee:	8888      	ldrh	r0, [r1, #4]
 8002df0:	4770      	bx	lr

08002df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df2:	b570      	push	{r4, r5, r6, lr}
 8002df4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002df8:	016c      	lsls	r4, r5, #5
 8002dfa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002dfe:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002e00:	4404      	add	r4, r0
 8002e02:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8002e04:	1caa      	adds	r2, r5, #2
 8002e06:	0152      	lsls	r2, r2, #5
 8002e08:	1886      	adds	r6, r0, r2
 8002e0a:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8002e16:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 8002e1a:	b125      	cbz	r5, 8002e26 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002e1c:	6800      	ldr	r0, [r0, #0]
 8002e1e:	f003 fac6 	bl	80063ae <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8002e22:	2000      	movs	r0, #0
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002e26:	6800      	ldr	r0, [r0, #0]
 8002e28:	f003 fac1 	bl	80063ae <USB_EPStartXfer>
 8002e2c:	e7f9      	b.n	8002e22 <HAL_PCD_EP_Transmit+0x30>

08002e2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8002e3a:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002e4a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e4e:	f000 820d 	beq.w	800326c <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e52:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 8002e56:	f015 050f 	ands.w	r5, r5, #15
 8002e5a:	f040 80c2 	bne.w	8002fe2 <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002e5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002e62:	f013 0f10 	tst.w	r3, #16
 8002e66:	d050      	beq.n	8002f0a <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e68:	8803      	ldrh	r3, [r0, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002e74:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e78:	d179      	bne.n	8002f6e <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002e7e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e82:	d0dc      	beq.n	8002e3e <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e84:	8803      	ldrh	r3, [r0, #0]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	0d1b      	lsrs	r3, r3, #20
 8002e8e:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e96:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8002e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e9e:	3306      	adds	r3, #6
 8002ea0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ea4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eac:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d17c      	bne.n	8002fae <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f00a fa58 	bl	800d36c <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002ec2:	3206      	adds	r2, #6
 8002ec4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ec8:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 8002ecc:	293e      	cmp	r1, #62	; 0x3e
 8002ece:	d97c      	bls.n	8002fca <PCD_EP_ISR_Handler+0x19c>
 8002ed0:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8002ed4:	f011 0f1f 	tst.w	r1, #31
 8002ed8:	d101      	bne.n	8002ede <PCD_EP_ISR_Handler+0xb0>
 8002eda:	3a01      	subs	r2, #1
 8002edc:	b292      	uxth	r2, r2
 8002ede:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002ee2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	8813      	ldrh	r3, [r2, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	8013      	strh	r3, [r2, #0]
 8002f08:	e799      	b.n	8002e3e <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f0a:	8803      	ldrh	r3, [r0, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002f20:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002f24:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002f28:	3302      	adds	r3, #2
 8002f2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f36:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002f38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f3a:	4413      	add	r3, r2
 8002f3c:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4620      	mov	r0, r4
 8002f42:	f00a fa1d 	bl	800d380 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8002f46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f43f af77 	beq.w	8002e3e <PCD_EP_ISR_Handler+0x10>
 8002f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f47f af73 	bne.w	8002e3e <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002f58:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f62:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002f6c:	e767      	b.n	8002e3e <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f72:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8002f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f7a:	3306      	adds	r3, #6
 8002f7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f88:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002f8c:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8002f90:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8002f94:	f003 fb68 	bl	8006668 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	8813      	ldrh	r3, [r2, #0]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	0d1b      	lsrs	r3, r3, #20
 8002fa4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f00a f9d8 	bl	800d35c <HAL_PCD_SetupStageCallback>
 8002fac:	e747      	b.n	8002e3e <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002fae:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8002fb2:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8002fb6:	f003 fb57 	bl	8006668 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002fba:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8002fbe:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 8002fc8:	e774      	b.n	8002eb4 <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002fca:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8002fce:	f011 0f01 	tst.w	r1, #1
 8002fd2:	d001      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x1aa>
 8002fd4:	3201      	adds	r2, #1
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	0292      	lsls	r2, r2, #10
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002fe0:	e784      	b.n	8002eec <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fe2:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ff0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ff4:	d135      	bne.n	8003062 <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ff6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ffa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ffe:	f43f af1e 	beq.w	8002e3e <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	b29b      	uxth	r3, r3
 8003014:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8003018:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800301c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 80b2 	bne.w	800318a <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003026:	6820      	ldr	r0, [r4, #0]
 8003028:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800302c:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003030:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003038:	3302      	adds	r3, #2
 800303a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800303e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003046:	1caa      	adds	r2, r5, #2
 8003048:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800304c:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80c6 	beq.w	80031e0 <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003054:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003058:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800305a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800305c:	f003 f992 	bl	8006384 <USB_WritePMA>
 8003060:	e0be      	b.n	80031e0 <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003062:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	0d1b      	lsrs	r3, r3, #20
 800306e:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8003072:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003076:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 800307a:	b9d3      	cbnz	r3, 80030b2 <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003082:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003086:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 800308a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800308e:	3306      	adds	r3, #6
 8003090:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003094:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8003098:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 800309c:	b386      	cbz	r6, 8003100 <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800309e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80030a2:	4633      	mov	r3, r6
 80030a4:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80030a8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80030ac:	f003 fadc 	bl	8006668 <USB_ReadPMA>
 80030b0:	e026      	b.n	8003100 <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80030b2:	6820      	ldr	r0, [r4, #0]
 80030b4:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80030b8:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 80030bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80030c4:	d042      	beq.n	800314c <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030ce:	3302      	adds	r3, #2
 80030d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80030d4:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80030d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80030dc:	bb66      	cbnz	r6, 8003138 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80030e4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80030e8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80030ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	0d1b      	lsrs	r3, r3, #20
 80030f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030fc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 8003100:	f105 0312 	add.w	r3, r5, #18
 8003104:	015b      	lsls	r3, r3, #5
 8003106:	18e1      	adds	r1, r4, r3
 8003108:	684a      	ldr	r2, [r1, #4]
 800310a:	4432      	add	r2, r6
 800310c:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 800310e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003112:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8003116:	4432      	add	r2, r6
 8003118:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800311c:	58e3      	ldr	r3, [r4, r3]
 800311e:	b11b      	cbz	r3, 8003128 <PCD_EP_ISR_Handler+0x2fa>
 8003120:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8003124:	428e      	cmp	r6, r1
 8003126:	d228      	bcs.n	800317a <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003128:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800312c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8003130:	4620      	mov	r0, r4
 8003132:	f00a f91b 	bl	800d36c <HAL_PCD_DataOutStageCallback>
 8003136:	e75e      	b.n	8002ff6 <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003138:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800313c:	4633      	mov	r3, r6
 800313e:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8003142:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8003146:	f003 fa8f 	bl	8006668 <USB_ReadPMA>
 800314a:	e7c8      	b.n	80030de <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800314c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003154:	3306      	adds	r3, #6
 8003156:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800315a:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800315e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8003162:	2e00      	cmp	r6, #0
 8003164:	d0bb      	beq.n	80030de <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003166:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800316a:	4633      	mov	r3, r6
 800316c:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8003170:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8003174:	f003 fa78 	bl	8006668 <USB_ReadPMA>
 8003178:	e7b1      	b.n	80030de <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800317a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800317e:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fe0f 	bl	8002da6 <HAL_PCD_EP_Receive>
 8003188:	e735      	b.n	8002ff6 <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003190:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003194:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003198:	f013 0f40 	tst.w	r3, #64	; 0x40
 800319c:	d046      	beq.n	800322c <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800319e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80031a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031a6:	3302      	adds	r3, #2
 80031a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80031ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80031b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b4:	1caa      	adds	r2, r5, #2
 80031b6:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 80031ba:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 80031bc:	bb7b      	cbnz	r3, 800321e <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80031c4:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80031c8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80031cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d0:	051b      	lsls	r3, r3, #20
 80031d2:	0d1b      	lsrs	r3, r3, #20
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031dc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80031e6:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 80031ea:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80031ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80031f2:	3302      	adds	r3, #2
 80031f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80031f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80031fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003200:	1cab      	adds	r3, r5, #2
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	18e1      	adds	r1, r4, r3
 8003206:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8003208:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800320a:	440a      	add	r2, r1
 800320c:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800320e:	58e3      	ldr	r3, [r4, r3]
 8003210:	bb23      	cbnz	r3, 800325c <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003212:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8003216:	4620      	mov	r0, r4
 8003218:	f00a f8b2 	bl	800d380 <HAL_PCD_DataInStageCallback>
 800321c:	e60f      	b.n	8002e3e <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800321e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003222:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8003224:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003226:	f003 f8ad 	bl	8006384 <USB_WritePMA>
 800322a:	e7c8      	b.n	80031be <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800322c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003234:	3306      	adds	r3, #6
 8003236:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800323a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	1caa      	adds	r2, r5, #2
 8003244:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8003248:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0b7      	beq.n	80031be <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800324e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003252:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8003254:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003256:	f003 f895 	bl	8006384 <USB_WritePMA>
 800325a:	e7b0      	b.n	80031be <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800325c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8003260:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff fdc4 	bl	8002df2 <HAL_PCD_EP_Transmit>
 800326a:	e5e8      	b.n	8002e3e <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 800326c:	2000      	movs	r0, #0
 800326e:	b002      	add	sp, #8
 8003270:	bd70      	pop	{r4, r5, r6, pc}

08003272 <HAL_PCD_IRQHandler>:
{ 
 8003272:	b510      	push	{r4, lr}
 8003274:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003276:	6800      	ldr	r0, [r0, #0]
 8003278:	f003 f87f 	bl	800637a <USB_ReadInterrupts>
 800327c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003280:	d145      	bne.n	800330e <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8003282:	6820      	ldr	r0, [r4, #0]
 8003284:	f003 f879 	bl	800637a <USB_ReadInterrupts>
 8003288:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800328c:	d143      	bne.n	8003316 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	f003 f873 	bl	800637a <USB_ReadInterrupts>
 8003294:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003298:	d008      	beq.n	80032ac <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	f003 f864 	bl	800637a <USB_ReadInterrupts>
 80032b2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80032b6:	d008      	beq.n	80032ca <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	f003 f855 	bl	800637a <USB_ReadInterrupts>
 80032d0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80032d4:	d130      	bne.n	8003338 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80032d6:	6820      	ldr	r0, [r4, #0]
 80032d8:	f003 f84f 	bl	800637a <USB_ReadInterrupts>
 80032dc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80032e0:	d149      	bne.n	8003376 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	f003 f849 	bl	800637a <USB_ReadInterrupts>
 80032e8:	f410 7f00 	tst.w	r0, #512	; 0x200
 80032ec:	d164      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f003 f843 	bl	800637a <USB_ReadInterrupts>
 80032f4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80032f8:	d008      	beq.n	800330c <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003306:	b29b      	uxth	r3, r3
 8003308:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800330c:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff fd8d 	bl	8002e2e <PCD_EP_ISR_Handler>
 8003314:	e7b5      	b.n	8003282 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003322:	b29b      	uxth	r3, r3
 8003324:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003328:	4620      	mov	r0, r4
 800332a:	f00a f838 	bl	800d39e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 800332e:	2100      	movs	r1, #0
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff fcd4 	bl	8002cde <HAL_PCD_SetAddress>
 8003336:	e7aa      	b.n	800328e <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800333e:	b29b      	uxth	r3, r3
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	b29b      	uxth	r3, r3
 8003346:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003350:	b29b      	uxth	r3, r3
 8003352:	f023 0308 	bic.w	r3, r3, #8
 8003356:	b29b      	uxth	r3, r3
 8003358:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800335c:	4620      	mov	r0, r4
 800335e:	f00a f83f 	bl	800d3e0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003368:	b29b      	uxth	r3, r3
 800336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800336e:	b29b      	uxth	r3, r3
 8003370:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003374:	e7af      	b.n	80032d6 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003390:	b29b      	uxth	r3, r3
 8003392:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	f002 ffe8 	bl	800637a <USB_ReadInterrupts>
 80033aa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80033ae:	d198      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 80033b0:	4620      	mov	r0, r4
 80033b2:	f00a f805 	bl	800d3c0 <HAL_PCD_SuspendCallback>
 80033b6:	e794      	b.n	80032e2 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f009 ffe1 	bl	800d392 <HAL_PCD_SOFCallback>
 80033d0:	e78d      	b.n	80032ee <HAL_PCD_IRQHandler+0x7c>

080033d2 <HAL_PCD_EP_SetStall>:
{
 80033d2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80033d4:	b24a      	sxtb	r2, r1
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	db1b      	blt.n	8003412 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 80033da:	014b      	lsls	r3, r1, #5
 80033dc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80033e0:	4403      	add	r3, r0
  ep->is_stall = 1U;
 80033e2:	2401      	movs	r4, #1
 80033e4:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80033e6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80033ea:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80033ec:	0fd2      	lsrs	r2, r2, #31
 80033ee:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 80033f0:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80033f4:	42a2      	cmp	r2, r4
 80033f6:	d018      	beq.n	800342a <HAL_PCD_EP_SetStall+0x58>
 80033f8:	4604      	mov	r4, r0
 80033fa:	2201      	movs	r2, #1
 80033fc:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8003400:	4619      	mov	r1, r3
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	f002 ff2f 	bl	8006266 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8003408:	b14d      	cbz	r5, 800341e <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 800340a:	2000      	movs	r0, #0
 800340c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003410:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003412:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003416:	015b      	lsls	r3, r3, #5
 8003418:	3328      	adds	r3, #40	; 0x28
 800341a:	4403      	add	r3, r0
 800341c:	e7e1      	b.n	80033e2 <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800341e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	f002 ffac 	bl	8006380 <USB_EP0_OutStart>
 8003428:	e7ef      	b.n	800340a <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 800342a:	2002      	movs	r0, #2
 800342c:	e7f0      	b.n	8003410 <HAL_PCD_EP_SetStall+0x3e>

0800342e <HAL_PCD_EP_ClrStall>:
{
 800342e:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8003430:	b24a      	sxtb	r2, r1
 8003432:	2a00      	cmp	r2, #0
 8003434:	db1a      	blt.n	800346c <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 8003436:	014b      	lsls	r3, r1, #5
 8003438:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800343c:	4403      	add	r3, r0
  ep->is_stall = 0U;
 800343e:	2400      	movs	r4, #0
 8003440:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003442:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003446:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003448:	0fd2      	lsrs	r2, r2, #31
 800344a:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 800344c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8003450:	2a01      	cmp	r2, #1
 8003452:	d011      	beq.n	8003478 <HAL_PCD_EP_ClrStall+0x4a>
 8003454:	4604      	mov	r4, r0
 8003456:	2201      	movs	r2, #1
 8003458:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800345c:	4619      	mov	r1, r3
 800345e:	6800      	ldr	r0, [r0, #0]
 8003460:	f002 ff38 	bl	80062d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8003464:	2000      	movs	r0, #0
 8003466:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 800346a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800346c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003470:	015b      	lsls	r3, r3, #5
 8003472:	3328      	adds	r3, #40	; 0x28
 8003474:	4403      	add	r3, r0
 8003476:	e7e2      	b.n	800343e <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8003478:	2002      	movs	r0, #2
 800347a:	e7f6      	b.n	800346a <HAL_PCD_EP_ClrStall+0x3c>

0800347c <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 800347c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8003480:	2b01      	cmp	r3, #1
 8003482:	d014      	beq.n	80034ae <HAL_PCD_EP_Flush+0x32>
{
 8003484:	b510      	push	{r4, lr}
 8003486:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003488:	2301      	movs	r3, #1
 800348a:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  if ((ep_addr & 0x80U) == 0x80U)
 800348e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003492:	d106      	bne.n	80034a2 <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 8003494:	6800      	ldr	r0, [r0, #0]
 8003496:	f002 fc6e 	bl	8005d76 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd); 
 800349a:	2000      	movs	r0, #0
 800349c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 80034a0:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 80034a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80034a6:	6800      	ldr	r0, [r0, #0]
 80034a8:	f002 fc63 	bl	8005d72 <USB_FlushTxFifo>
 80034ac:	e7f5      	b.n	800349a <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 80034ae:	2002      	movs	r0, #2
}
 80034b0:	4770      	bx	lr

080034b2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80034b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034b6:	d00c      	beq.n	80034d2 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80034b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80034bc:	0149      	lsls	r1, r1, #5
 80034be:	3128      	adds	r1, #40	; 0x28
 80034c0:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034c2:	b15a      	cbz	r2, 80034dc <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80034c4:	2201      	movs	r2, #1
 80034c6:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80034c8:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 80034ce:	2000      	movs	r0, #0
 80034d0:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80034d2:	0149      	lsls	r1, r1, #5
 80034d4:	f501 710a 	add.w	r1, r1, #552	; 0x228
 80034d8:	4401      	add	r1, r0
 80034da:	e7f2      	b.n	80034c2 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 80034dc:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 80034de:	808b      	strh	r3, [r1, #4]
 80034e0:	e7f5      	b.n	80034ce <HAL_PCDEx_PMAConfig+0x1c>
	...

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80034e4:	4b01      	ldr	r3, [pc, #4]	; (80034ec <HAL_RCC_GetHCLKFreq+0x8>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f2:	f7ff fff7 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x18>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80034fe:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003502:	40d8      	lsrs	r0, r3
 8003504:	bd08      	pop	{r3, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	0800eb2c 	.word	0x0800eb2c

08003510 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003514:	4604      	mov	r4, r0
 8003516:	b1d0      	cbz	r0, 800354e <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != NULL);
 8003518:	b1fd      	cbz	r5, 800355a <HAL_RCC_GetClockConfig+0x4a>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351a:	230f      	movs	r3, #15
 800351c:	6023      	str	r3, [r4, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_RCC_GetClockConfig+0x58>)
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	6062      	str	r2, [r4, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800352e:	60a2      	str	r2, [r4, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003536:	60e2      	str	r2, [r4, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003540:	6123      	str	r3, [r4, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_GetClockConfig+0x5c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	602b      	str	r3, [r5, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 800354c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != NULL);
 800354e:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8003552:	4807      	ldr	r0, [pc, #28]	; (8003570 <HAL_RCC_GetClockConfig+0x60>)
 8003554:	f7fd fc43 	bl	8000dde <assert_failed>
 8003558:	e7de      	b.n	8003518 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != NULL);
 800355a:	f240 5131 	movw	r1, #1329	; 0x531
 800355e:	4804      	ldr	r0, [pc, #16]	; (8003570 <HAL_RCC_GetClockConfig+0x60>)
 8003560:	f7fd fc3d 	bl	8000dde <assert_failed>
 8003564:	e7d9      	b.n	800351a <HAL_RCC_GetClockConfig+0xa>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40022000 	.word	0x40022000
 8003570:	0800ebe4 	.word	0x0800ebe4

08003574 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	f002 f8b6 	bl	80056f0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003584:	4605      	mov	r5, r0
 8003586:	b110      	cbz	r0, 800358e <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8003588:	4628      	mov	r0, r5
 800358a:	b002      	add	sp, #8
 800358c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	f002 f8c1 	bl	8005716 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003594:	4606      	mov	r6, r0
 8003596:	b310      	cbz	r0, 80035de <SD_PowerON+0x6a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003598:	2300      	movs	r3, #0
 800359a:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 800359c:	462e      	mov	r6, r5
    while(validvoltage == 0U)
 800359e:	b9de      	cbnz	r6, 80035d8 <SD_PowerON+0x64>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	9201      	str	r2, [sp, #4]
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d044      	beq.n	8003638 <SD_PowerON+0xc4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80035ae:	2100      	movs	r1, #0
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f002 f8c7 	bl	8005744 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d141      	bne.n	800363e <SD_PowerON+0xca>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80035ba:	2100      	movs	r1, #0
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	f002 f8d9 	bl	8005774 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035c2:	4606      	mov	r6, r0
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d13d      	bne.n	8003644 <SD_PowerON+0xd0>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035c8:	2100      	movs	r1, #0
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	f001 fe6e 	bl	80052ac <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80035d0:	0fc0      	lsrs	r0, r0, #31
 80035d2:	d0e4      	beq.n	800359e <SD_PowerON+0x2a>
 80035d4:	4606      	mov	r6, r0
 80035d6:	e7e2      	b.n	800359e <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 80035d8:	2300      	movs	r3, #0
 80035da:	6463      	str	r3, [r4, #68]	; 0x44
 80035dc:	e7d4      	b.n	8003588 <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80035de:	2301      	movs	r3, #1
 80035e0:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 80035e2:	4605      	mov	r5, r0
    while(validvoltage == 0U)
 80035e4:	b9ed      	cbnz	r5, 8003622 <SD_PowerON+0xae>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80035e6:	9b01      	ldr	r3, [sp, #4]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	9201      	str	r2, [sp, #4]
 80035ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02a      	beq.n	800364a <SD_PowerON+0xd6>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80035f4:	2100      	movs	r1, #0
 80035f6:	6820      	ldr	r0, [r4, #0]
 80035f8:	f002 f8a4 	bl	8005744 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80035fc:	4605      	mov	r5, r0
 80035fe:	2800      	cmp	r0, #0
 8003600:	d1c2      	bne.n	8003588 <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	f002 f8b4 	bl	8005774 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800360c:	4605      	mov	r5, r0
 800360e:	2800      	cmp	r0, #0
 8003610:	d1ba      	bne.n	8003588 <SD_PowerON+0x14>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003612:	2100      	movs	r1, #0
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	f001 fe49 	bl	80052ac <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800361a:	0fc3      	lsrs	r3, r0, #31
 800361c:	d0e2      	beq.n	80035e4 <SD_PowerON+0x70>
 800361e:	461d      	mov	r5, r3
 8003620:	e7e0      	b.n	80035e4 <SD_PowerON+0x70>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003622:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003626:	d103      	bne.n	8003630 <SD_PowerON+0xbc>
      hsd->SdCard.CardType = CARD_SDSC;
 8003628:	2300      	movs	r3, #0
 800362a:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 800362c:	4635      	mov	r5, r6
 800362e:	e7ab      	b.n	8003588 <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003630:	2301      	movs	r3, #1
 8003632:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003634:	4635      	mov	r5, r6
 8003636:	e7a7      	b.n	8003588 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003638:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800363c:	e7a4      	b.n	8003588 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800363e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003642:	e7a1      	b.n	8003588 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003648:	e79e      	b.n	8003588 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800364a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800364e:	e79b      	b.n	8003588 <SD_PowerON+0x14>

08003650 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003654:	6a86      	ldr	r6, [r0, #40]	; 0x28
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003656:	2400      	movs	r4, #0
 8003658:	e005      	b.n	8003666 <SD_Read_IT+0x16>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800365a:	6828      	ldr	r0, [r5, #0]
 800365c:	f001 fdce 	bl	80051fc <SDIO_ReadFIFO>
 8003660:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for(count = 0U; count < 8U; count++)
 8003664:	3401      	adds	r4, #1
 8003666:	2c07      	cmp	r4, #7
 8003668:	d9f7      	bls.n	800365a <SD_Read_IT+0xa>
  }
  
  hsd->pRxBuffPtr += 8U;
 800366a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800366c:	3320      	adds	r3, #32
 800366e:	62ab      	str	r3, [r5, #40]	; 0x28
  
  return HAL_OK;
}
 8003670:	2000      	movs	r0, #0
 8003672:	bd70      	pop	{r4, r5, r6, pc}

08003674 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003678:	6a06      	ldr	r6, [r0, #32]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800367a:	2400      	movs	r4, #0
 800367c:	e005      	b.n	800368a <SD_Write_IT+0x16>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800367e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8003682:	6828      	ldr	r0, [r5, #0]
 8003684:	f001 fdbd 	bl	8005202 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003688:	3401      	adds	r4, #1
 800368a:	2c07      	cmp	r4, #7
 800368c:	d9f7      	bls.n	800367e <SD_Write_IT+0xa>
  }
  
  hsd->pTxBuffPtr += 8U;
 800368e:	6a2b      	ldr	r3, [r5, #32]
 8003690:	3320      	adds	r3, #32
 8003692:	622b      	str	r3, [r5, #32]
  
  return HAL_OK;
}
 8003694:	2000      	movs	r0, #0
 8003696:	bd70      	pop	{r4, r5, r6, pc}

08003698 <SD_FindSCR>:
{
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	b088      	sub	sp, #32
 800369e:	4604      	mov	r4, r0
 80036a0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80036a2:	f7fe ff85 	bl	80025b0 <HAL_GetTick>
 80036a6:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 80036a8:	2300      	movs	r3, #0
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80036ae:	2108      	movs	r1, #8
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	f001 ff73 	bl	800559c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80036b6:	4605      	mov	r5, r0
 80036b8:	b118      	cbz	r0, 80036c2 <SD_FindSCR+0x2a>
}
 80036ba:	4628      	mov	r0, r5
 80036bc:	b008      	add	sp, #32
 80036be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80036c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80036c4:	0409      	lsls	r1, r1, #16
 80036c6:	6820      	ldr	r0, [r4, #0]
 80036c8:	f002 f83c 	bl	8005744 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80036cc:	4605      	mov	r5, r0
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d1f3      	bne.n	80036ba <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80036d8:	2308      	movs	r3, #8
 80036da:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80036dc:	2330      	movs	r3, #48	; 0x30
 80036de:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80036e0:	2302      	movs	r3, #2
 80036e2:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 80036ec:	a902      	add	r1, sp, #8
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	f001 fef2 	bl	80054d8 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	f002 f86e 	bl	80057d6 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 80036fa:	4605      	mov	r5, r0
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d1dc      	bne.n	80036ba <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8003700:	4680      	mov	r8, r0
 8003702:	e005      	b.n	8003710 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003704:	f7fe ff54 	bl	80025b0 <HAL_GetTick>
 8003708:	1b80      	subs	r0, r0, r6
 800370a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800370e:	d043      	beq.n	8003798 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003714:	f240 432a 	movw	r3, #1066	; 0x42a
 8003718:	421a      	tst	r2, r3
 800371a:	d10a      	bne.n	8003732 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800371c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800371e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003722:	d0ef      	beq.n	8003704 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003724:	f001 fd6a 	bl	80051fc <SDIO_ReadFIFO>
 8003728:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 800372c:	f108 0801 	add.w	r8, r8, #1
 8003730:	e7e8      	b.n	8003704 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003732:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003734:	f013 0f08 	tst.w	r3, #8
 8003738:	d125      	bne.n	8003786 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800373a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800373c:	f013 0f02 	tst.w	r3, #2
 8003740:	d124      	bne.n	800378c <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003742:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003744:	f013 0f20 	tst.w	r3, #32
 8003748:	d123      	bne.n	8003792 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800374a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800374e:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003750:	9a00      	ldr	r2, [sp, #0]
 8003752:	0213      	lsls	r3, r2, #8
 8003754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800375c:	0a11      	lsrs	r1, r2, #8
 800375e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003762:	430b      	orrs	r3, r1
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003768:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800376a:	9a01      	ldr	r2, [sp, #4]
 800376c:	0213      	lsls	r3, r2, #8
 800376e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003772:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003776:	0a11      	lsrs	r1, r2, #8
 8003778:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800377c:	430b      	orrs	r3, r1
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800377e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003782:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 8003784:	e799      	b.n	80036ba <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003786:	2508      	movs	r5, #8
 8003788:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800378a:	e796      	b.n	80036ba <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800378c:	2502      	movs	r5, #2
 800378e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003790:	e793      	b.n	80036ba <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003792:	2520      	movs	r5, #32
 8003794:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003796:	e790      	b.n	80036ba <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8003798:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800379c:	e78d      	b.n	80036ba <SD_FindSCR+0x22>

0800379e <SD_WideBus_Enable>:
{
 800379e:	b510      	push	{r4, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80037a4:	2100      	movs	r1, #0
 80037a6:	9100      	str	r1, [sp, #0]
 80037a8:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	f001 fd7e 	bl	80052ac <SDIO_GetResponse>
 80037b0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80037b4:	d116      	bne.n	80037e4 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80037b6:	4669      	mov	r1, sp
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff ff6d 	bl	8003698 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80037be:	4603      	mov	r3, r0
 80037c0:	b990      	cbnz	r0, 80037e8 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80037c8:	d011      	beq.n	80037ee <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80037cc:	0409      	lsls	r1, r1, #16
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	f001 ffb8 	bl	8005744 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80037d4:	4603      	mov	r3, r0
 80037d6:	b938      	cbnz	r0, 80037e8 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037d8:	2102      	movs	r1, #2
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	f001 ffe3 	bl	80057a6 <SDMMC_CmdBusWidth>
 80037e0:	4603      	mov	r3, r0
 80037e2:	e001      	b.n	80037e8 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	b002      	add	sp, #8
 80037ec:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037f2:	e7f9      	b.n	80037e8 <SD_WideBus_Enable+0x4a>

080037f4 <SD_WideBus_Disable>:
{
 80037f4:	b510      	push	{r4, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80037fa:	2100      	movs	r1, #0
 80037fc:	9100      	str	r1, [sp, #0]
 80037fe:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	f001 fd53 	bl	80052ac <SDIO_GetResponse>
 8003806:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800380a:	d116      	bne.n	800383a <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800380c:	4669      	mov	r1, sp
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff ff42 	bl	8003698 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003814:	4603      	mov	r3, r0
 8003816:	b990      	cbnz	r0, 800383e <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800381e:	d011      	beq.n	8003844 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003820:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003822:	0409      	lsls	r1, r1, #16
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	f001 ff8d 	bl	8005744 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800382a:	4603      	mov	r3, r0
 800382c:	b938      	cbnz	r0, 800383e <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800382e:	2100      	movs	r1, #0
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	f001 ffb8 	bl	80057a6 <SDMMC_CmdBusWidth>
 8003836:	4603      	mov	r3, r0
 8003838:	e001      	b.n	800383e <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800383a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800383e:	4618      	mov	r0, r3
 8003840:	b002      	add	sp, #8
 8003842:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003848:	e7f9      	b.n	800383e <SD_WideBus_Disable+0x4a>

0800384a <SD_SendStatus>:
{
 800384a:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800384c:	b181      	cbz	r1, 8003870 <SD_SendStatus+0x26>
 800384e:	460d      	mov	r5, r1
 8003850:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003852:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003854:	0409      	lsls	r1, r1, #16
 8003856:	6800      	ldr	r0, [r0, #0]
 8003858:	f002 f817 	bl	800588a <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800385c:	4606      	mov	r6, r0
 800385e:	b108      	cbz	r0, 8003864 <SD_SendStatus+0x1a>
}
 8003860:	4630      	mov	r0, r6
 8003862:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003864:	2100      	movs	r1, #0
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	f001 fd20 	bl	80052ac <SDIO_GetResponse>
 800386c:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 800386e:	e7f7      	b.n	8003860 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8003870:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8003874:	e7f4      	b.n	8003860 <SD_SendStatus+0x16>

08003876 <HAL_SD_ReadBlocks>:
{
 8003876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	4604      	mov	r4, r0
 800387e:	460d      	mov	r5, r1
 8003880:	4616      	mov	r6, r2
 8003882:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7fe fe94 	bl	80025b0 <HAL_GetTick>
  if(NULL == pData)
 8003888:	b16d      	cbz	r5, 80038a6 <HAL_SD_ReadBlocks+0x30>
 800388a:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800388c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d00d      	beq.n	80038b2 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800389c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800389e:	2001      	movs	r0, #1
}
 80038a0:	b007      	add	sp, #28
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038ac:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80038ae:	2001      	movs	r0, #1
 80038b0:	e7f6      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038b6:	19f3      	adds	r3, r6, r7
 80038b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d81b      	bhi.n	80038f6 <HAL_SD_ReadBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 80038be:	2303      	movs	r3, #3
 80038c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d000      	beq.n	80038d2 <HAL_SD_ReadBlocks+0x5c>
      BlockAdd *= 512U;
 80038d0:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	f001 fe60 	bl	800559c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038dc:	4603      	mov	r3, r0
 80038de:	b180      	cbz	r0, 8003902 <HAL_SD_ReadBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80038e6:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038ea:	4318      	orrs	r0, r3
 80038ec:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038ee:	2001      	movs	r0, #1
 80038f0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80038f4:	e7d4      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038fc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
 8003900:	e7ce      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003908:	027b      	lsls	r3, r7, #9
 800390a:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800390c:	2390      	movs	r3, #144	; 0x90
 800390e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003910:	2302      	movs	r3, #2
 8003912:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003914:	2300      	movs	r3, #0
 8003916:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003918:	2301      	movs	r3, #1
 800391a:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 800391c:	4669      	mov	r1, sp
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f001 fdda 	bl	80054d8 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003924:	2f01      	cmp	r7, #1
 8003926:	d915      	bls.n	8003954 <HAL_SD_ReadBlocks+0xde>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003928:	2302      	movs	r3, #2
 800392a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800392c:	4631      	mov	r1, r6
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	f001 fe64 	bl	80055fc <SDMMC_CmdReadMultiBlock>
 8003934:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8003936:	f1b9 0f00 	cmp.w	r9, #0
 800393a:	d025      	beq.n	8003988 <HAL_SD_ReadBlocks+0x112>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003946:	ea43 0309 	orr.w	r3, r3, r9
 800394a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800394c:	2001      	movs	r0, #1
 800394e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003952:	e7a5      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003954:	2301      	movs	r3, #1
 8003956:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003958:	4631      	mov	r1, r6
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	f001 fe36 	bl	80055cc <SDMMC_CmdReadSingleBlock>
 8003960:	4681      	mov	r9, r0
 8003962:	e7e8      	b.n	8003936 <HAL_SD_ReadBlocks+0xc0>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	f001 fc49 	bl	80051fc <SDIO_ReadFIFO>
 800396a:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
        for(count = 0U; count < 8U; count++)
 800396e:	3601      	adds	r6, #1
 8003970:	2e07      	cmp	r6, #7
 8003972:	d9f7      	bls.n	8003964 <HAL_SD_ReadBlocks+0xee>
        tempbuff += 8U;
 8003974:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003978:	b193      	cbz	r3, 80039a0 <HAL_SD_ReadBlocks+0x12a>
 800397a:	f7fe fe19 	bl	80025b0 <HAL_GetTick>
 800397e:	eba0 0008 	sub.w	r0, r0, r8
 8003982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003984:	4298      	cmp	r0, r3
 8003986:	d20b      	bcs.n	80039a0 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800398c:	f240 332a 	movw	r3, #810	; 0x32a
 8003990:	421a      	tst	r2, r3
 8003992:	d112      	bne.n	80039ba <HAL_SD_ReadBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003994:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003996:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800399a:	d0ec      	beq.n	8003976 <HAL_SD_ReadBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 800399c:	464e      	mov	r6, r9
 800399e:	e7e7      	b.n	8003970 <HAL_SD_ReadBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80039a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80039b6:	2003      	movs	r0, #3
 80039b8:	e772      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039c0:	d007      	beq.n	80039d2 <HAL_SD_ReadBlocks+0x15c>
 80039c2:	2f01      	cmp	r7, #1
 80039c4:	d905      	bls.n	80039d2 <HAL_SD_ReadBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80039c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d002      	beq.n	80039d2 <HAL_SD_ReadBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039cc:	f001 fe5e 	bl	800568c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80039d0:	bb50      	cbnz	r0, 8003a28 <HAL_SD_ReadBlocks+0x1b2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d6:	f012 0f08 	tst.w	r2, #8
 80039da:	d130      	bne.n	8003a3e <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	f012 0f02 	tst.w	r2, #2
 80039e2:	d137      	bne.n	8003a54 <HAL_SD_ReadBlocks+0x1de>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e6:	f012 0f20 	tst.w	r2, #32
 80039ea:	d13e      	bne.n	8003a6a <HAL_SD_ReadBlocks+0x1f4>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80039f4:	d044      	beq.n	8003a80 <HAL_SD_ReadBlocks+0x20a>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80039f6:	f001 fc01 	bl	80051fc <SDIO_ReadFIFO>
 80039fa:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80039fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a00:	b133      	cbz	r3, 8003a10 <HAL_SD_ReadBlocks+0x19a>
 8003a02:	f7fe fdd5 	bl	80025b0 <HAL_GetTick>
 8003a06:	eba0 0008 	sub.w	r0, r0, r8
 8003a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a0c:	4298      	cmp	r0, r3
 8003a0e:	d3ed      	bcc.n	80039ec <HAL_SD_ReadBlocks+0x176>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a20:	2001      	movs	r0, #1
 8003a22:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8003a26:	e73b      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003a2e:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a32:	4303      	orrs	r3, r0
 8003a34:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a36:	2001      	movs	r0, #1
 8003a38:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 8003a3c:	e730      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003a52:	e725      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a62:	2001      	movs	r0, #1
 8003a64:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003a68:	e71a      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a72:	f043 0320 	orr.w	r3, r3, #32
 8003a76:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003a7e:	e70f      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a80:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003a84:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	e707      	b.n	80038a0 <HAL_SD_ReadBlocks+0x2a>

08003a90 <HAL_SD_WriteBlocks>:
{
 8003a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a94:	b087      	sub	sp, #28
 8003a96:	4604      	mov	r4, r0
 8003a98:	460d      	mov	r5, r1
 8003a9a:	4616      	mov	r6, r2
 8003a9c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003a9e:	f7fe fd87 	bl	80025b0 <HAL_GetTick>
  if(NULL == pData)
 8003aa2:	b16d      	cbz	r5, 8003ac0 <HAL_SD_WriteBlocks+0x30>
 8003aa4:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8003aa6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d00d      	beq.n	8003acc <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab6:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ab8:	2001      	movs	r0, #1
}
 8003aba:	b007      	add	sp, #28
 8003abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ac2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ac6:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e7f6      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ad0:	19f3      	adds	r3, r6, r7
 8003ad2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d828      	bhi.n	8003b2a <HAL_SD_WriteBlocks+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d000      	beq.n	8003aec <HAL_SD_WriteBlocks+0x5c>
      BlockAdd *= 512U;
 8003aea:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	f001 fd53 	bl	800559c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003af6:	4603      	mov	r3, r0
 8003af8:	b9e8      	cbnz	r0, 8003b36 <HAL_SD_WriteBlocks+0xa6>
    if(NumberOfBlocks > 1U)
 8003afa:	2f01      	cmp	r7, #1
 8003afc:	d926      	bls.n	8003b4c <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003afe:	2320      	movs	r3, #32
 8003b00:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003b02:	4631      	mov	r1, r6
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	f001 fda9 	bl	800565c <SDMMC_CmdWriteMultiBlock>
 8003b0a:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0c:	f1b9 0f00 	cmp.w	r9, #0
 8003b10:	d024      	beq.n	8003b5c <HAL_SD_WriteBlocks+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b1c:	ea43 0309 	orr.w	r3, r3, r9
 8003b20:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b22:	2001      	movs	r0, #1
 8003b24:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003b28:	e7c7      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b30:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003b32:	2001      	movs	r0, #1
 8003b34:	e7c1      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003b3c:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b40:	4318      	orrs	r0, r3
 8003b42:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b44:	2001      	movs	r0, #1
 8003b46:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003b4a:	e7b6      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003b50:	4631      	mov	r1, r6
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	f001 fd6a 	bl	800562c <SDMMC_CmdWriteSingleBlock>
 8003b58:	4681      	mov	r9, r0
 8003b5a:	e7d7      	b.n	8003b0c <HAL_SD_WriteBlocks+0x7c>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003b62:	027b      	lsls	r3, r7, #9
 8003b64:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b66:	2390      	movs	r3, #144	; 0x90
 8003b68:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b6e:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8003b74:	4669      	mov	r1, sp
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	f001 fcae 	bl	80054d8 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003b7c:	e011      	b.n	8003ba2 <HAL_SD_WriteBlocks+0x112>
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003b7e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	f001 fb3d 	bl	8005202 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003b88:	3601      	adds	r6, #1
 8003b8a:	2e07      	cmp	r6, #7
 8003b8c:	d9f7      	bls.n	8003b7e <HAL_SD_WriteBlocks+0xee>
        tempbuff += 8U;
 8003b8e:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b92:	b193      	cbz	r3, 8003bba <HAL_SD_WriteBlocks+0x12a>
 8003b94:	f7fe fd0c 	bl	80025b0 <HAL_GetTick>
 8003b98:	eba0 0008 	sub.w	r0, r0, r8
 8003b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b9e:	4298      	cmp	r0, r3
 8003ba0:	d20b      	bcs.n	8003bba <HAL_SD_WriteBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003ba6:	f240 331a 	movw	r3, #794	; 0x31a
 8003baa:	421a      	tst	r2, r3
 8003bac:	d112      	bne.n	8003bd4 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8003bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bb0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003bb4:	d0ec      	beq.n	8003b90 <HAL_SD_WriteBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 8003bb6:	464e      	mov	r6, r9
 8003bb8:	e7e7      	b.n	8003b8a <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc4:	ea43 0309 	orr.w	r3, r3, r9
 8003bc8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	e772      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bd6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bda:	d007      	beq.n	8003bec <HAL_SD_WriteBlocks+0x15c>
 8003bdc:	2f01      	cmp	r7, #1
 8003bde:	d905      	bls.n	8003bec <HAL_SD_WriteBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003be0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d002      	beq.n	8003bec <HAL_SD_WriteBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003be6:	f001 fd51 	bl	800568c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bea:	b9b8      	cbnz	r0, 8003c1c <HAL_SD_WriteBlocks+0x18c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf0:	f012 0f08 	tst.w	r2, #8
 8003bf4:	d11d      	bne.n	8003c32 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf8:	f012 0f02 	tst.w	r2, #2
 8003bfc:	d124      	bne.n	8003c48 <HAL_SD_WriteBlocks+0x1b8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c00:	f012 0f10 	tst.w	r2, #16
 8003c04:	d02b      	beq.n	8003c5e <HAL_SD_WriteBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c0e:	f043 0310 	orr.w	r3, r3, #16
 8003c12:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c14:	2001      	movs	r0, #1
 8003c16:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003c1a:	e74e      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003c22:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c26:	4303      	orrs	r3, r0
 8003c28:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 8003c30:	e743      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c3a:	f043 0308 	orr.w	r3, r3, #8
 8003c3e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c40:	2001      	movs	r0, #1
 8003c42:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003c46:	e738      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c56:	2001      	movs	r0, #1
 8003c58:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003c5c:	e72d      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	e725      	b.n	8003aba <HAL_SD_WriteBlocks+0x2a>

08003c6e <HAL_SD_ErrorCallback>:
}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_SD_GetCardCSD>:
{
 8003c70:	b430      	push	{r4, r5}
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003c72:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8003c74:	0f9a      	lsrs	r2, r3, #30
 8003c76:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8003c78:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8003c7c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8003c7e:	f3c3 6301 	ubfx	r3, r3, #24, #2
 8003c82:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8003c84:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003c88:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8003c8a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8003c8e:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003c90:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8003c94:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003c96:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8003c9e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8003ca2:	88cc      	ldrh	r4, [r1, #6]
 8003ca4:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8003ca8:	4322      	orrs	r2, r4
 8003caa:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8003cb2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8003cb6:	09da      	lsrs	r2, r3, #7
 8003cb8:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003cba:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8003cbe:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003cc0:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003cc4:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003cc6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003cca:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003ccc:	2200      	movs	r2, #0
 8003cce:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003cd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	f040 8092 	bne.w	8003dfc <HAL_SD_GetCardCSD+0x18c>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003cd8:	029b      	lsls	r3, r3, #10
 8003cda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cde:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003ce0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2U;
 8003ce2:	690a      	ldr	r2, [r1, #16]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003cee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8003cf0:	690a      	ldr	r2, [r1, #16]
 8003cf2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003cf6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8003cf8:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8003cfc:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003cfe:	f3c3 6302 	ubfx	r3, r3, #24, #3
 8003d02:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003d04:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003d06:	f3c2 4307 	ubfx	r3, r2, #16, #8
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8003d0a:	f3c2 5442 	ubfx	r4, r2, #21, #3
 8003d0e:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8003d10:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8003d14:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	f003 0306 	and.w	r3, r3, #6
 8003d1c:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003d1e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003d20:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8003d24:	7e0c      	ldrb	r4, [r1, #24]
 8003d26:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003d2a:	4322      	orrs	r2, r4
 8003d2c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d2e:	690a      	ldr	r2, [r1, #16]
 8003d30:	3201      	adds	r2, #1
 8003d32:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003d34:	7e0c      	ldrb	r4, [r1, #24]
 8003d36:	3402      	adds	r4, #2
 8003d38:	fa02 f404 	lsl.w	r4, r2, r4
 8003d3c:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003d3e:	7a0a      	ldrb	r2, [r1, #8]
 8003d40:	b2d5      	uxtb	r5, r2
 8003d42:	2201      	movs	r2, #1
 8003d44:	40aa      	lsls	r2, r5
 8003d46:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003d48:	0a52      	lsrs	r2, r2, #9
 8003d4a:	fb02 f204 	mul.w	r2, r2, r4
 8003d4e:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d54:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003d56:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8003d5a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003d62:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003d64:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003d66:	7e8a      	ldrb	r2, [r1, #26]
 8003d68:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8003d6c:	4322      	orrs	r2, r4
 8003d6e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003d76:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003d78:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003d7a:	0fdc      	lsrs	r4, r3, #31
 8003d7c:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003d7e:	f3c3 7441 	ubfx	r4, r3, #29, #2
 8003d82:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8003d84:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003d88:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8003d8a:	0093      	lsls	r3, r2, #2
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8003d92:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8003d94:	7fca      	ldrb	r2, [r1, #31]
 8003d96:	f3c3 5481 	ubfx	r4, r3, #22, #2
 8003d9a:	4322      	orrs	r2, r4
 8003d9c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8003d9e:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8003da2:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8003da6:	2200      	movs	r2, #0
 8003da8:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8003dac:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8003db0:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8003db4:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8003db6:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8003dba:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8003dbe:	f3c3 3480 	ubfx	r4, r3, #14, #1
 8003dc2:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8003dc6:	f3c3 3440 	ubfx	r4, r3, #13, #1
 8003dca:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8003dce:	f3c3 3400 	ubfx	r4, r3, #12, #1
 8003dd2:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8003dd6:	f3c3 2481 	ubfx	r4, r3, #10, #2
 8003dda:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8003dde:	f3c3 2301 	ubfx	r3, r3, #8, #2
 8003de2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8003de6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003de8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003dec:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 8003df6:	4610      	mov	r0, r2
}
 8003df8:	bc30      	pop	{r4, r5}
 8003dfa:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003dfc:	2a01      	cmp	r2, #1
 8003dfe:	d00c      	beq.n	8003e1a <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e10:	2201      	movs	r2, #1
 8003e12:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003e16:	4610      	mov	r0, r2
 8003e18:	e7ee      	b.n	8003df8 <HAL_SD_GetCardCSD+0x188>
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003e1a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003e22:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003e24:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8U);
 8003e28:	690b      	ldr	r3, [r1, #16]
 8003e2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e2e:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8003e30:	690a      	ldr	r2, [r1, #16]
 8003e32:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8003e36:	4313      	orrs	r3, r2
 8003e38:	610b      	str	r3, [r1, #16]
 8003e3a:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8003e3e:	690a      	ldr	r2, [r1, #16]
 8003e40:	3201      	adds	r2, #1
 8003e42:	0292      	lsls	r2, r2, #10
 8003e44:	6542      	str	r2, [r0, #84]	; 0x54
 8003e46:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4c:	6582      	str	r2, [r0, #88]	; 0x58
 8003e4e:	6602      	str	r2, [r0, #96]	; 0x60
 8003e50:	e781      	b.n	8003d56 <HAL_SD_GetCardCSD+0xe6>

08003e52 <SD_InitCard>:
{
 8003e52:	b570      	push	{r4, r5, r6, lr}
 8003e54:	b090      	sub	sp, #64	; 0x40
 8003e56:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003e5e:	6800      	ldr	r0, [r0, #0]
 8003e60:	f001 f9d8 	bl	8005214 <SDIO_GetPowerState>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d06a      	beq.n	8003f3e <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d143      	bne.n	8003ef6 <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003e6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d15b      	bne.n	8003f2c <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003e74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d01d      	beq.n	8003eb6 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e7a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8003e7e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e80:	0409      	lsls	r1, r1, #16
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	f001 fcd4 	bl	8005830 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e88:	4605      	mov	r5, r0
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d159      	bne.n	8003f42 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e8e:	2100      	movs	r1, #0
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	f001 fa0b 	bl	80052ac <SDIO_GetResponse>
 8003e96:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e98:	2104      	movs	r1, #4
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	f001 fa06 	bl	80052ac <SDIO_GetResponse>
 8003ea0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ea2:	2108      	movs	r1, #8
 8003ea4:	6820      	ldr	r0, [r4, #0]
 8003ea6:	f001 fa01 	bl	80052ac <SDIO_GetResponse>
 8003eaa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003eac:	210c      	movs	r1, #12
 8003eae:	6820      	ldr	r0, [r4, #0]
 8003eb0:	f001 f9fc 	bl	80052ac <SDIO_GetResponse>
 8003eb4:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	6820      	ldr	r0, [r4, #0]
 8003eba:	f001 f9f7 	bl	80052ac <SDIO_GetResponse>
 8003ebe:	0d00      	lsrs	r0, r0, #20
 8003ec0:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003ec2:	a905      	add	r1, sp, #20
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff fed3 	bl	8003c70 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003eca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ecc:	0412      	lsls	r2, r2, #16
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	f001 fbf5 	bl	80056c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	bb98      	cbnz	r0, 8003f42 <SD_InitCard+0xf0>
  SDIO_Init(hsd->Instance, hsd->Init);
 8003eda:	4623      	mov	r3, r4
 8003edc:	f853 6b10 	ldr.w	r6, [r3], #16
 8003ee0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ee4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003ee8:	3404      	adds	r4, #4
 8003eea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f001 f918 	bl	8005124 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8003ef4:	e025      	b.n	8003f42 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	f001 fc85 	bl	8005806 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efc:	4605      	mov	r5, r0
 8003efe:	bb00      	cbnz	r0, 8003f42 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f00:	2100      	movs	r1, #0
 8003f02:	6820      	ldr	r0, [r4, #0]
 8003f04:	f001 f9d2 	bl	80052ac <SDIO_GetResponse>
 8003f08:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	f001 f9cd 	bl	80052ac <SDIO_GetResponse>
 8003f12:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f14:	2108      	movs	r1, #8
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	f001 f9c8 	bl	80052ac <SDIO_GetResponse>
 8003f1c:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f1e:	210c      	movs	r1, #12
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	f001 f9c3 	bl	80052ac <SDIO_GetResponse>
 8003f26:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8003f2a:	e7a0      	b.n	8003e6e <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003f2c:	f10d 0112 	add.w	r1, sp, #18
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	f001 fc92 	bl	800585a <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f36:	4605      	mov	r5, r0
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d09b      	beq.n	8003e74 <SD_InitCard+0x22>
 8003f3c:	e001      	b.n	8003f42 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f3e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003f42:	4628      	mov	r0, r5
 8003f44:	b010      	add	sp, #64	; 0x40
 8003f46:	bd70      	pop	{r4, r5, r6, pc}

08003f48 <HAL_SD_InitCard>:
{
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003f4e:	2400      	movs	r4, #0
 8003f50:	9404      	str	r4, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003f52:	9405      	str	r4, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f54:	9406      	str	r4, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003f56:	9407      	str	r4, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f58:	9408      	str	r4, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003f5a:	23c3      	movs	r3, #195	; 0xc3
 8003f5c:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8003f5e:	ab0a      	add	r3, sp, #40	; 0x28
 8003f60:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003f64:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003f68:	ab04      	add	r3, sp, #16
 8003f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f6c:	6828      	ldr	r0, [r5, #0]
 8003f6e:	f001 f8d9 	bl	8005124 <SDIO_Init>
  __HAL_SD_DISABLE(hsd); 
 8003f72:	4e12      	ldr	r6, [pc, #72]	; (8003fbc <HAL_SD_InitCard+0x74>)
 8003f74:	6034      	str	r4, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8003f76:	6828      	ldr	r0, [r5, #0]
 8003f78:	f001 f948 	bl	800520c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	6033      	str	r3, [r6, #0]
  HAL_Delay(2U);
 8003f80:	2002      	movs	r0, #2
 8003f82:	f7fe fb1b 	bl	80025bc <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7ff faf4 	bl	8003574 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f8c:	b140      	cbz	r0, 8003fa0 <HAL_SD_InitCard+0x58>
 8003f8e:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 8003f90:	2001      	movs	r0, #1
 8003f92:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f96:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8003f9c:	b00a      	add	sp, #40	; 0x28
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SD_InitCard(hsd);
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f7ff ff56 	bl	8003e52 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	b130      	cbz	r0, 8003fb8 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8003faa:	2001      	movs	r0, #1
 8003fac:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003fb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8003fb6:	e7f1      	b.n	8003f9c <HAL_SD_InitCard+0x54>
  return HAL_OK;
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e7ef      	b.n	8003f9c <HAL_SD_InitCard+0x54>
 8003fbc:	423000a0 	.word	0x423000a0

08003fc0 <HAL_SD_Init>:
  if(hsd == NULL)
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d062      	beq.n	800408a <HAL_SD_Init+0xca>
{
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4604      	mov	r4, r0
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));
 8003fc8:	6802      	ldr	r2, [r0, #0]
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_SD_Init+0xd0>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d004      	beq.n	8003fda <HAL_SD_Init+0x1a>
 8003fd0:	f240 1137 	movw	r1, #311	; 0x137
 8003fd4:	482f      	ldr	r0, [pc, #188]	; (8004094 <HAL_SD_Init+0xd4>)
 8003fd6:	f7fc ff02 	bl	8000dde <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	b113      	cbz	r3, 8003fe4 <HAL_SD_Init+0x24>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d129      	bne.n	8004038 <HAL_SD_Init+0x78>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8003fe4:	68a3      	ldr	r3, [r4, #8]
 8003fe6:	b113      	cbz	r3, 8003fee <HAL_SD_Init+0x2e>
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d12a      	bne.n	8004044 <HAL_SD_Init+0x84>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	b113      	cbz	r3, 8003ff8 <HAL_SD_Init+0x38>
 8003ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff6:	d12b      	bne.n	8004050 <HAL_SD_Init+0x90>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	b12b      	cbz	r3, 8004008 <HAL_SD_Init+0x48>
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004000:	d002      	beq.n	8004008 <HAL_SD_Init+0x48>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d129      	bne.n	800405c <HAL_SD_Init+0x9c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8004008:	6963      	ldr	r3, [r4, #20]
 800400a:	b113      	cbz	r3, 8004012 <HAL_SD_Init+0x52>
 800400c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004010:	d12a      	bne.n	8004068 <HAL_SD_Init+0xa8>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 8004012:	69a3      	ldr	r3, [r4, #24]
 8004014:	2bff      	cmp	r3, #255	; 0xff
 8004016:	d82d      	bhi.n	8004074 <HAL_SD_Init+0xb4>
  if(hsd->State == HAL_SD_STATE_RESET)
 8004018:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800401c:	b383      	cbz	r3, 8004080 <HAL_SD_Init+0xc0>
  hsd->State = HAL_SD_STATE_BUSY;
 800401e:	2303      	movs	r3, #3
 8004020:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff ff8f 	bl	8003f48 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800402a:	2000      	movs	r0, #0
 800402c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800402e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004030:	2301      	movs	r3, #1
 8004032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004036:	bd10      	pop	{r4, pc}
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 8004038:	f44f 719c 	mov.w	r1, #312	; 0x138
 800403c:	4815      	ldr	r0, [pc, #84]	; (8004094 <HAL_SD_Init+0xd4>)
 800403e:	f7fc fece 	bl	8000dde <assert_failed>
 8004042:	e7cf      	b.n	8003fe4 <HAL_SD_Init+0x24>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8004044:	f240 1139 	movw	r1, #313	; 0x139
 8004048:	4812      	ldr	r0, [pc, #72]	; (8004094 <HAL_SD_Init+0xd4>)
 800404a:	f7fc fec8 	bl	8000dde <assert_failed>
 800404e:	e7ce      	b.n	8003fee <HAL_SD_Init+0x2e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004050:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8004054:	480f      	ldr	r0, [pc, #60]	; (8004094 <HAL_SD_Init+0xd4>)
 8004056:	f7fc fec2 	bl	8000dde <assert_failed>
 800405a:	e7cd      	b.n	8003ff8 <HAL_SD_Init+0x38>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 800405c:	f240 113b 	movw	r1, #315	; 0x13b
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <HAL_SD_Init+0xd4>)
 8004062:	f7fc febc 	bl	8000dde <assert_failed>
 8004066:	e7cf      	b.n	8004008 <HAL_SD_Init+0x48>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8004068:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800406c:	4809      	ldr	r0, [pc, #36]	; (8004094 <HAL_SD_Init+0xd4>)
 800406e:	f7fc feb6 	bl	8000dde <assert_failed>
 8004072:	e7ce      	b.n	8004012 <HAL_SD_Init+0x52>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 8004074:	f240 113d 	movw	r1, #317	; 0x13d
 8004078:	4806      	ldr	r0, [pc, #24]	; (8004094 <HAL_SD_Init+0xd4>)
 800407a:	f7fc feb0 	bl	8000dde <assert_failed>
 800407e:	e7cb      	b.n	8004018 <HAL_SD_Init+0x58>
    hsd->Lock = HAL_UNLOCKED;
 8004080:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 8004082:	4620      	mov	r0, r4
 8004084:	f7fc ff04 	bl	8000e90 <HAL_SD_MspInit>
 8004088:	e7c9      	b.n	800401e <HAL_SD_Init+0x5e>
    return HAL_ERROR;
 800408a:	2001      	movs	r0, #1
}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40018000 	.word	0x40018000
 8004094:	0800ec1c 	.word	0x0800ec1c

08004098 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004098:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800409a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800409c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800409e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80040a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80040a2:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80040a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040a6:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80040a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80040aa:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80040ac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80040ae:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80040b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80040b2:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040b4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80040b6:	61cb      	str	r3, [r1, #28]
}
 80040b8:	2000      	movs	r0, #0
 80040ba:	4770      	bx	lr

080040bc <HAL_SD_ConfigWideBusOperation>:
{
 80040bc:	b530      	push	{r4, r5, lr}
 80040be:	b08b      	sub	sp, #44	; 0x2c
 80040c0:	4604      	mov	r4, r0
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 80040c2:	460d      	mov	r5, r1
 80040c4:	b129      	cbz	r1, 80040d2 <HAL_SD_ConfigWideBusOperation+0x16>
 80040c6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80040ca:	d002      	beq.n	80040d2 <HAL_SD_ConfigWideBusOperation+0x16>
 80040cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80040d0:	d111      	bne.n	80040f6 <HAL_SD_ConfigWideBusOperation+0x3a>
  hsd->State = HAL_SD_STATE_BUSY;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80040d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d024      	beq.n	8004128 <HAL_SD_ConfigWideBusOperation+0x6c>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80040de:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80040e2:	d00e      	beq.n	8004102 <HAL_SD_ConfigWideBusOperation+0x46>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80040e4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80040e8:	d010      	beq.n	800410c <HAL_SD_ConfigWideBusOperation+0x50>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80040ea:	b1b5      	cbz	r5, 800411a <HAL_SD_ConfigWideBusOperation+0x5e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80040f4:	e01c      	b.n	8004130 <HAL_SD_ConfigWideBusOperation+0x74>
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 80040f6:	f240 71ba 	movw	r1, #1978	; 0x7ba
 80040fa:	4820      	ldr	r0, [pc, #128]	; (800417c <HAL_SD_ConfigWideBusOperation+0xc0>)
 80040fc:	f7fc fe6f 	bl	8000dde <assert_failed>
 8004100:	e7e7      	b.n	80040d2 <HAL_SD_ConfigWideBusOperation+0x16>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	63a3      	str	r3, [r4, #56]	; 0x38
 800410a:	e011      	b.n	8004130 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Enable(hsd);
 800410c:	4620      	mov	r0, r4
 800410e:	f7ff fb46 	bl	800379e <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8004112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004114:	4318      	orrs	r0, r3
 8004116:	63a0      	str	r0, [r4, #56]	; 0x38
 8004118:	e00a      	b.n	8004130 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Disable(hsd);
 800411a:	4620      	mov	r0, r4
 800411c:	f7ff fb6a 	bl	80037f4 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8004120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004122:	4318      	orrs	r0, r3
 8004124:	63a0      	str	r0, [r4, #56]	; 0x38
 8004126:	e003      	b.n	8004130 <HAL_SD_ConfigWideBusOperation+0x74>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004132:	b143      	cbz	r3, 8004146 <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800413c:	2001      	movs	r0, #1
 800413e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8004142:	b00b      	add	sp, #44	; 0x2c
 8004144:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004146:	6863      	ldr	r3, [r4, #4]
 8004148:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800414a:	68a3      	ldr	r3, [r4, #8]
 800414c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8004152:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004154:	6963      	ldr	r3, [r4, #20]
 8004156:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004158:	69a3      	ldr	r3, [r4, #24]
 800415a:	9309      	str	r3, [sp, #36]	; 0x24
    SDIO_Init(hsd->Instance, Init);
 800415c:	ab0a      	add	r3, sp, #40	; 0x28
 800415e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004162:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004166:	ab04      	add	r3, sp, #16
 8004168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800416a:	6820      	ldr	r0, [r4, #0]
 800416c:	f000 ffda 	bl	8005124 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004170:	2301      	movs	r3, #1
 8004172:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004176:	2000      	movs	r0, #0
 8004178:	e7e3      	b.n	8004142 <HAL_SD_ConfigWideBusOperation+0x86>
 800417a:	bf00      	nop
 800417c:	0800ec1c 	.word	0x0800ec1c

08004180 <HAL_SD_GetCardState>:
{
 8004180:	b510      	push	{r4, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8004186:	a902      	add	r1, sp, #8
 8004188:	2300      	movs	r3, #0
 800418a:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 800418e:	f7ff fb5c 	bl	800384a <SD_SendStatus>
  if(errorstate != HAL_OK)
 8004192:	b118      	cbz	r0, 800419c <HAL_SD_GetCardState+0x1c>
 8004194:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8004196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004198:	4318      	orrs	r0, r3
 800419a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800419c:	9801      	ldr	r0, [sp, #4]
 800419e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80041a2:	b002      	add	sp, #8
 80041a4:	bd10      	pop	{r4, pc}

080041a6 <SD_DMATxAbort>:
{
 80041a6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmatx != NULL)
 80041aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ac:	b10b      	cbz	r3, 80041b2 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 80041b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041b4:	b103      	cbz	r3, 80041b8 <SD_DMATxAbort+0x12>
}
 80041b6:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff ffe1 	bl	8004180 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041be:	2300      	movs	r3, #0
 80041c0:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041c8:	3805      	subs	r0, #5
 80041ca:	b2c0      	uxtb	r0, r0
 80041cc:	4298      	cmp	r0, r3
 80041ce:	d8f2      	bhi.n	80041b6 <SD_DMATxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	f001 fa5b 	bl	800568c <SDMMC_CmdStopTransfer>
 80041d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d8:	4318      	orrs	r0, r3
 80041da:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80041dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041de:	b91b      	cbnz	r3, 80041e8 <SD_DMATxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff fd44 	bl	8003c6e <HAL_SD_ErrorCallback>
}
 80041e6:	e7e6      	b.n	80041b6 <SD_DMATxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 80041e8:	4620      	mov	r0, r4
 80041ea:	f002 fadc 	bl	80067a6 <HAL_SD_AbortCallback>
 80041ee:	e7e2      	b.n	80041b6 <SD_DMATxAbort+0x10>

080041f0 <SD_DMARxAbort>:
{
 80041f0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmarx != NULL)
 80041f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041f6:	b10b      	cbz	r3, 80041fc <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 80041fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041fe:	b103      	cbz	r3, 8004202 <SD_DMARxAbort+0x12>
}
 8004200:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff ffbc 	bl	8004180 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004208:	2300      	movs	r3, #0
 800420a:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800420c:	2301      	movs	r3, #1
 800420e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004212:	3805      	subs	r0, #5
 8004214:	b2c0      	uxtb	r0, r0
 8004216:	4298      	cmp	r0, r3
 8004218:	d8f2      	bhi.n	8004200 <SD_DMARxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	f001 fa36 	bl	800568c <SDMMC_CmdStopTransfer>
 8004220:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004222:	4318      	orrs	r0, r3
 8004224:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004228:	b91b      	cbnz	r3, 8004232 <SD_DMARxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 800422a:	4620      	mov	r0, r4
 800422c:	f7ff fd1f 	bl	8003c6e <HAL_SD_ErrorCallback>
}
 8004230:	e7e6      	b.n	8004200 <SD_DMARxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 8004232:	4620      	mov	r0, r4
 8004234:	f002 fab7 	bl	80067a6 <HAL_SD_AbortCallback>
 8004238:	e7e2      	b.n	8004200 <SD_DMARxAbort+0x10>
	...

0800423c <HAL_SD_IRQHandler>:
{
 800423c:	b510      	push	{r4, lr}
 800423e:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004240:	6803      	ldr	r3, [r0, #0]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004248:	d061      	beq.n	800430e <HAL_SD_IRQHandler+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800424a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004250:	6802      	ldr	r2, [r0, #0]
 8004252:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004254:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004258:	f023 0302 	bic.w	r3, r3, #2
 800425c:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800425e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004260:	f013 0f08 	tst.w	r3, #8
 8004264:	d02a      	beq.n	80042bc <HAL_SD_IRQHandler+0x80>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004266:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004268:	f013 0f02 	tst.w	r3, #2
 800426c:	d103      	bne.n	8004276 <HAL_SD_IRQHandler+0x3a>
 800426e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004270:	f013 0f20 	tst.w	r3, #32
 8004274:	d004      	beq.n	8004280 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	f001 fa08 	bl	800568c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800427c:	4603      	mov	r3, r0
 800427e:	b990      	cbnz	r0, 80042a6 <HAL_SD_IRQHandler+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004288:	2301      	movs	r3, #1
 800428a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800428e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004290:	f013 0f01 	tst.w	r3, #1
 8004294:	d103      	bne.n	800429e <HAL_SD_IRQHandler+0x62>
 8004296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004298:	f013 0f02 	tst.w	r3, #2
 800429c:	d00a      	beq.n	80042b4 <HAL_SD_IRQHandler+0x78>
        HAL_SD_RxCpltCallback(hsd);
 800429e:	4620      	mov	r0, r4
 80042a0:	f002 fa8b 	bl	80067ba <HAL_SD_RxCpltCallback>
}
 80042a4:	bd10      	pop	{r4, pc}
          hsd->ErrorCode |= errorstate;
 80042a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042a8:	4313      	orrs	r3, r2
 80042aa:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7ff fcde 	bl	8003c6e <HAL_SD_ErrorCallback>
 80042b2:	e7e5      	b.n	8004280 <HAL_SD_IRQHandler+0x44>
        HAL_SD_TxCpltCallback(hsd);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f002 fa7b 	bl	80067b0 <HAL_SD_TxCpltCallback>
 80042ba:	e7f3      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80042bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042c2:	d0ef      	beq.n	80042a4 <HAL_SD_IRQHandler+0x68>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80042c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80042c6:	f013 0f20 	tst.w	r3, #32
 80042ca:	d113      	bne.n	80042f4 <HAL_SD_IRQHandler+0xb8>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80042cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042ce:	f013 0f01 	tst.w	r3, #1
 80042d2:	d1e7      	bne.n	80042a4 <HAL_SD_IRQHandler+0x68>
 80042d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042d6:	f013 0f02 	tst.w	r3, #2
 80042da:	d1e3      	bne.n	80042a4 <HAL_SD_IRQHandler+0x68>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042e0:	f023 0308 	bic.w	r3, r3, #8
 80042e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f002 fa5f 	bl	80067b0 <HAL_SD_TxCpltCallback>
 80042f2:	e7d7      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042f4:	6800      	ldr	r0, [r0, #0]
 80042f6:	f001 f9c9 	bl	800568c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80042fa:	4603      	mov	r3, r0
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d0e5      	beq.n	80042cc <HAL_SD_IRQHandler+0x90>
          hsd->ErrorCode |= errorstate;
 8004300:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004302:	4313      	orrs	r3, r2
 8004304:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff fcb1 	bl	8003c6e <HAL_SD_ErrorCallback>
 800430c:	e7de      	b.n	80042cc <HAL_SD_IRQHandler+0x90>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800430e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004310:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004314:	d14c      	bne.n	80043b0 <HAL_SD_IRQHandler+0x174>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800431c:	d14e      	bne.n	80043bc <HAL_SD_IRQHandler+0x180>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800431e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004320:	f240 223a 	movw	r2, #570	; 0x23a
 8004324:	4211      	tst	r1, r2
 8004326:	d0bd      	beq.n	80042a4 <HAL_SD_IRQHandler+0x68>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	f012 0f02 	tst.w	r2, #2
 800432e:	d003      	beq.n	8004338 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004330:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004332:	f042 0202 	orr.w	r2, r2, #2
 8004336:	6382      	str	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8004338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433a:	f012 0f08 	tst.w	r2, #8
 800433e:	d003      	beq.n	8004348 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8004340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8004348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434a:	f012 0f20 	tst.w	r2, #32
 800434e:	d003      	beq.n	8004358 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8004350:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8004358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435a:	f012 0f10 	tst.w	r2, #16
 800435e:	d003      	beq.n	8004368 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004360:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004362:	f042 0210 	orr.w	r2, r2, #16
 8004366:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800436e:	d003      	beq.n	8004378 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004370:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004378:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004382:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004386:	f023 0302 	bic.w	r3, r3, #2
 800438a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800438c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800438e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004392:	d030      	beq.n	80043f6 <HAL_SD_IRQHandler+0x1ba>
      if(hsd->hdmatx != NULL)
 8004394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004396:	b1bb      	cbz	r3, 80043c8 <HAL_SD_IRQHandler+0x18c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_SD_IRQHandler+0x1d4>)
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800439c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800439e:	f7fe f99b 	bl	80026d8 <HAL_DMA_Abort_IT>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	f43f af7e 	beq.w	80042a4 <HAL_SD_IRQHandler+0x68>
          SD_DMATxAbort(hsd->hdmatx);
 80043a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80043aa:	f7ff fefc 	bl	80041a6 <SD_DMATxAbort>
 80043ae:	e779      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80043b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80043b6:	f7ff f95d 	bl	8003674 <SD_Write_IT>
 80043ba:	e773      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80043bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80043c2:	f7ff f945 	bl	8003650 <SD_Read_IT>
 80043c6:	e76d      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
      else if(hsd->hdmarx != NULL)
 80043c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ca:	b15b      	cbz	r3, 80043e4 <HAL_SD_IRQHandler+0x1a8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_SD_IRQHandler+0x1d8>)
 80043ce:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80043d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80043d2:	f7fe f981 	bl	80026d8 <HAL_DMA_Abort_IT>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f43f af64 	beq.w	80042a4 <HAL_SD_IRQHandler+0x68>
          SD_DMARxAbort(hsd->hdmarx);
 80043dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80043de:	f7ff ff07 	bl	80041f0 <SD_DMARxAbort>
 80043e2:	e75f      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80043ee:	4620      	mov	r0, r4
 80043f0:	f002 f9d9 	bl	80067a6 <HAL_SD_AbortCallback>
 80043f4:	e756      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80043f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043f8:	f013 0f08 	tst.w	r3, #8
 80043fc:	f43f af52 	beq.w	80042a4 <HAL_SD_IRQHandler+0x68>
      hsd->State = HAL_SD_STATE_READY;
 8004400:	2301      	movs	r3, #1
 8004402:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff fc31 	bl	8003c6e <HAL_SD_ErrorCallback>
}
 800440c:	e74a      	b.n	80042a4 <HAL_SD_IRQHandler+0x68>
 800440e:	bf00      	nop
 8004410:	080041a7 	.word	0x080041a7
 8004414:	080041f1 	.word	0x080041f1

08004418 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004418:	4770      	bx	lr
	...

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b510      	push	{r4, lr}
 800441e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	4a17      	ldr	r2, [pc, #92]	; (8004480 <HAL_TIM_Base_Start_IT+0x64>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01f      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 8004428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800442c:	4293      	cmp	r3, r2
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 8004436:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800443a:	4293      	cmp	r3, r2
 800443c:	d014      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 800443e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004442:	4293      	cmp	r3, r2
 8004444:	d010      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 8004446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800444a:	4293      	cmp	r3, r2
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 800444e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004452:	4293      	cmp	r3, r2
 8004454:	d008      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 8004456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x4c>
 800445e:	f240 1161 	movw	r1, #353	; 0x161
 8004462:	4808      	ldr	r0, [pc, #32]	; (8004484 <HAL_TIM_Base_Start_IT+0x68>)
 8004464:	f7fc fcbb 	bl	8000dde <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	68d3      	ldr	r3, [r2, #12]
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800447c:	2000      	movs	r0, #0
 800447e:	bd10      	pop	{r4, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	0800ec54 	.word	0x0800ec54

08004488 <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_IRQHandler>:
{
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	f012 0f02 	tst.w	r2, #2
 800449c:	d011      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	f012 0f02 	tst.w	r2, #2
 80044a4:	d00d      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a6:	f06f 0202 	mvn.w	r2, #2
 80044aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ac:	2301      	movs	r3, #1
 80044ae:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b0:	6803      	ldr	r3, [r0, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f013 0f03 	tst.w	r3, #3
 80044b8:	d070      	beq.n	800459c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	f7ff ffe6 	bl	800448a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	2300      	movs	r3, #0
 80044c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	f012 0f04 	tst.w	r2, #4
 80044ca:	d012      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	f012 0f04 	tst.w	r2, #4
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d4:	f06f 0204 	mvn.w	r2, #4
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044da:	2302      	movs	r3, #2
 80044dc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80044e6:	d05f      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff ffce 	bl	800448a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	2300      	movs	r3, #0
 80044f0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	f012 0f08 	tst.w	r2, #8
 80044fa:	d012      	beq.n	8004522 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	f012 0f08 	tst.w	r2, #8
 8004502:	d00e      	beq.n	8004522 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004504:	f06f 0208 	mvn.w	r2, #8
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	2304      	movs	r3, #4
 800450c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f013 0f03 	tst.w	r3, #3
 8004516:	d04e      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004518:	4620      	mov	r0, r4
 800451a:	f7ff ffb6 	bl	800448a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	2300      	movs	r3, #0
 8004520:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	f012 0f10 	tst.w	r2, #16
 800452a:	d012      	beq.n	8004552 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	f012 0f10 	tst.w	r2, #16
 8004532:	d00e      	beq.n	8004552 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004534:	f06f 0210 	mvn.w	r2, #16
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453a:	2308      	movs	r3, #8
 800453c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004546:	d03d      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	4620      	mov	r0, r4
 800454a:	f7ff ff9e 	bl	800448a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	2300      	movs	r3, #0
 8004550:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	f012 0f01 	tst.w	r2, #1
 800455a:	d003      	beq.n	8004564 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	f012 0f01 	tst.w	r2, #1
 8004562:	d136      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	f012 0f80 	tst.w	r2, #128	; 0x80
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004574:	d134      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800457e:	d003      	beq.n	8004588 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004586:	d132      	bne.n	80045ee <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	f012 0f20 	tst.w	r2, #32
 8004590:	d003      	beq.n	800459a <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	f012 0f20 	tst.w	r2, #32
 8004598:	d130      	bne.n	80045fc <HAL_TIM_IRQHandler+0x16c>
}
 800459a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800459c:	f7ff ff74 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7ff ff73 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
 80045a6:	e78a      	b.n	80044be <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff ff6d 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff ff6c 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
 80045b4:	e79b      	b.n	80044ee <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff ff66 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ff65 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
 80045c2:	e7ac      	b.n	800451e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff ff5f 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7ff ff5e 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
 80045d0:	e7bd      	b.n	800454e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d2:	f06f 0201 	mvn.w	r2, #1
 80045d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d8:	4620      	mov	r0, r4
 80045da:	f7fc fbf3 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
 80045de:	e7c1      	b.n	8004564 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f8c5 	bl	8004776 <HAL_TIMEx_BreakCallback>
 80045ec:	e7c3      	b.n	8004576 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7ff ff4a 	bl	800448e <HAL_TIM_TriggerCallback>
 80045fa:	e7c5      	b.n	8004588 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045fc:	f06f 0220 	mvn.w	r2, #32
 8004600:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f8b6 	bl	8004774 <HAL_TIMEx_CommutationCallback>
}
 8004608:	e7c7      	b.n	800459a <HAL_TIM_IRQHandler+0x10a>
	...

0800460c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800460c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <TIM_Base_SetConfig+0x94>)
 8004610:	4290      	cmp	r0, r2
 8004612:	d012      	beq.n	800463a <TIM_Base_SetConfig+0x2e>
 8004614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004618:	4290      	cmp	r0, r2
 800461a:	d00e      	beq.n	800463a <TIM_Base_SetConfig+0x2e>
 800461c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0x2e>
 8004622:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004626:	4290      	cmp	r0, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0x2e>
 800462a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800462e:	4290      	cmp	r0, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0x2e>
 8004632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004636:	4290      	cmp	r0, r2
 8004638:	d103      	bne.n	8004642 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800463e:	684a      	ldr	r2, [r1, #4]
 8004640:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <TIM_Base_SetConfig+0x94>)
 8004644:	4290      	cmp	r0, r2
 8004646:	d012      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464c:	4290      	cmp	r0, r2
 800464e:	d00e      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004650:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004656:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800465a:	4290      	cmp	r0, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 800465e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004662:	4290      	cmp	r0, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x62>
 8004666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800466a:	4290      	cmp	r0, r2
 800466c:	d103      	bne.n	8004676 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	68ca      	ldr	r2, [r1, #12]
 8004674:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800467a:	694a      	ldr	r2, [r1, #20]
 800467c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800467e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004680:	688b      	ldr	r3, [r1, #8]
 8004682:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004684:	680b      	ldr	r3, [r1, #0]
 8004686:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <TIM_Base_SetConfig+0x94>)
 800468a:	4298      	cmp	r0, r3
 800468c:	d003      	beq.n	8004696 <TIM_Base_SetConfig+0x8a>
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	4298      	cmp	r0, r3
 8004694:	d101      	bne.n	800469a <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004696:	690b      	ldr	r3, [r1, #16]
 8004698:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800469a:	2301      	movs	r3, #1
 800469c:	6143      	str	r3, [r0, #20]
}
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00

080046a4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d05e      	beq.n	8004766 <HAL_TIM_Base_Init+0xc2>
{
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_TIM_Base_Init+0xc8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01e      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01a      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d017      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046c2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_Base_Init+0x4e>
 80046ea:	21d9      	movs	r1, #217	; 0xd9
 80046ec:	4820      	ldr	r0, [pc, #128]	; (8004770 <HAL_TIM_Base_Init+0xcc>)
 80046ee:	f7fc fb76 	bl	8000dde <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	b13b      	cbz	r3, 8004706 <HAL_TIM_Base_Init+0x62>
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d005      	beq.n	8004706 <HAL_TIM_Base_Init+0x62>
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_Base_Init+0x62>
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Base_Init+0x62>
 8004702:	2b60      	cmp	r3, #96	; 0x60
 8004704:	d11a      	bne.n	800473c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	b12b      	cbz	r3, 8004716 <HAL_TIM_Base_Init+0x72>
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d002      	beq.n	8004716 <HAL_TIM_Base_Init+0x72>
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d117      	bne.n	8004746 <HAL_TIM_Base_Init+0xa2>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004716:	69a3      	ldr	r3, [r4, #24]
 8004718:	b10b      	cbz	r3, 800471e <HAL_TIM_Base_Init+0x7a>
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d118      	bne.n	8004750 <HAL_TIM_Base_Init+0xac>
  if(htim->State == HAL_TIM_STATE_RESET)
 800471e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004722:	b1d3      	cbz	r3, 800475a <HAL_TIM_Base_Init+0xb6>
  htim->State= HAL_TIM_STATE_BUSY;
 8004724:	2302      	movs	r3, #2
 8004726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472a:	1d21      	adds	r1, r4, #4
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	f7ff ff6d 	bl	800460c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004732:	2301      	movs	r3, #1
 8004734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004738:	2000      	movs	r0, #0
}
 800473a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800473c:	21da      	movs	r1, #218	; 0xda
 800473e:	480c      	ldr	r0, [pc, #48]	; (8004770 <HAL_TIM_Base_Init+0xcc>)
 8004740:	f7fc fb4d 	bl	8000dde <assert_failed>
 8004744:	e7df      	b.n	8004706 <HAL_TIM_Base_Init+0x62>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004746:	21db      	movs	r1, #219	; 0xdb
 8004748:	4809      	ldr	r0, [pc, #36]	; (8004770 <HAL_TIM_Base_Init+0xcc>)
 800474a:	f7fc fb48 	bl	8000dde <assert_failed>
 800474e:	e7e2      	b.n	8004716 <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004750:	21dc      	movs	r1, #220	; 0xdc
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <HAL_TIM_Base_Init+0xcc>)
 8004754:	f7fc fb43 	bl	8000dde <assert_failed>
 8004758:	e7e1      	b.n	800471e <HAL_TIM_Base_Init+0x7a>
    htim->Lock = HAL_UNLOCKED;
 800475a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800475e:	4620      	mov	r0, r4
 8004760:	f7ff fe5a 	bl	8004418 <HAL_TIM_Base_MspInit>
 8004764:	e7de      	b.n	8004724 <HAL_TIM_Base_Init+0x80>
    return HAL_ERROR;
 8004766:	2001      	movs	r0, #1
}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	0800ec54 	.word	0x0800ec54

08004774 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004774:	4770      	bx	lr

08004776 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004776:	4770      	bx	lr

08004778 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
  ErrorStatus status = SUCCESS;
  /* Check the parameters */
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	0cdb      	lsrs	r3, r3, #19
 8004780:	04db      	lsls	r3, r3, #19
 8004782:	b9b3      	cbnz	r3, 80047b2 <LL_EXTI_Init+0x3a>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8004784:	7923      	ldrb	r3, [r4, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d818      	bhi.n	80047bc <LL_EXTI_Init+0x44>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 800478a:	7963      	ldrb	r3, [r4, #5]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d81a      	bhi.n	80047c6 <LL_EXTI_Init+0x4e>

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004790:	7923      	ldrb	r3, [r4, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d06b      	beq.n	800486e <LL_EXTI_Init+0xf6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 8004796:	79a3      	ldrb	r3, [r4, #6]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d819      	bhi.n	80047d0 <LL_EXTI_Init+0x58>

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d072      	beq.n	8004888 <LL_EXTI_Init+0x110>
    {
      switch (EXTI_InitStruct->Mode)
 80047a2:	7962      	ldrb	r2, [r4, #5]
 80047a4:	2a01      	cmp	r2, #1
 80047a6:	d02d      	beq.n	8004804 <LL_EXTI_Init+0x8c>
 80047a8:	b1ba      	cbz	r2, 80047da <LL_EXTI_Init+0x62>
 80047aa:	2a02      	cmp	r2, #2
 80047ac:	d035      	beq.n	800481a <LL_EXTI_Init+0xa2>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 80047ae:	2000      	movs	r0, #0
 80047b0:	e01d      	b.n	80047ee <LL_EXTI_Init+0x76>
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 80047b2:	217d      	movs	r1, #125	; 0x7d
 80047b4:	4835      	ldr	r0, [pc, #212]	; (800488c <LL_EXTI_Init+0x114>)
 80047b6:	f7fc fb12 	bl	8000dde <assert_failed>
 80047ba:	e7e3      	b.n	8004784 <LL_EXTI_Init+0xc>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 80047bc:	217e      	movs	r1, #126	; 0x7e
 80047be:	4833      	ldr	r0, [pc, #204]	; (800488c <LL_EXTI_Init+0x114>)
 80047c0:	f7fc fb0d 	bl	8000dde <assert_failed>
 80047c4:	e7e1      	b.n	800478a <LL_EXTI_Init+0x12>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 80047c6:	217f      	movs	r1, #127	; 0x7f
 80047c8:	4830      	ldr	r0, [pc, #192]	; (800488c <LL_EXTI_Init+0x114>)
 80047ca:	f7fc fb08 	bl	8000dde <assert_failed>
 80047ce:	e7df      	b.n	8004790 <LL_EXTI_Init+0x18>
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 80047d0:	2184      	movs	r1, #132	; 0x84
 80047d2:	482e      	ldr	r0, [pc, #184]	; (800488c <LL_EXTI_Init+0x114>)
 80047d4:	f7fc fb03 	bl	8000dde <assert_failed>
 80047d8:	e7e0      	b.n	800479c <LL_EXTI_Init+0x24>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80047da:	4a2d      	ldr	r2, [pc, #180]	; (8004890 <LL_EXTI_Init+0x118>)
 80047dc:	6851      	ldr	r1, [r2, #4]
 80047de:	ea21 0303 	bic.w	r3, r1, r3
 80047e2:	6053      	str	r3, [r2, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047e4:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 80047e6:	6811      	ldr	r1, [r2, #0]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6013      	str	r3, [r2, #0]
  ErrorStatus status = SUCCESS;
 80047ec:	2001      	movs	r0, #1
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80047ee:	79a3      	ldrb	r3, [r4, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d048      	beq.n	8004886 <LL_EXTI_Init+0x10e>
      {
        switch (EXTI_InitStruct->Trigger)
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d025      	beq.n	8004844 <LL_EXTI_Init+0xcc>
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d02e      	beq.n	800485a <LL_EXTI_Init+0xe2>
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d016      	beq.n	800482e <LL_EXTI_Init+0xb6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status = ERROR;
 8004800:	2000      	movs	r0, #0
 8004802:	e040      	b.n	8004886 <LL_EXTI_Init+0x10e>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <LL_EXTI_Init+0x118>)
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	ea21 0303 	bic.w	r3, r1, r3
 800480c:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800480e:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004810:	6851      	ldr	r1, [r2, #4]
 8004812:	430b      	orrs	r3, r1
 8004814:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8004816:	2001      	movs	r0, #1
 8004818:	e7e9      	b.n	80047ee <LL_EXTI_Init+0x76>
  SET_BIT(EXTI->IMR, ExtiLine);
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <LL_EXTI_Init+0x118>)
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	430b      	orrs	r3, r1
 8004820:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004822:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004824:	6851      	ldr	r1, [r2, #4]
 8004826:	430b      	orrs	r3, r1
 8004828:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 800482a:	2001      	movs	r0, #1
 800482c:	e7df      	b.n	80047ee <LL_EXTI_Init+0x76>
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800482e:	6821      	ldr	r1, [r4, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <LL_EXTI_Init+0x118>)
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	ea22 0201 	bic.w	r2, r2, r1
 8004838:	60da      	str	r2, [r3, #12]
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800483a:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	e020      	b.n	8004886 <LL_EXTI_Init+0x10e>
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004844:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <LL_EXTI_Init+0x118>)
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	ea22 0201 	bic.w	r2, r2, r1
 800484e:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004850:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004852:	68d9      	ldr	r1, [r3, #12]
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e015      	b.n	8004886 <LL_EXTI_Init+0x10e>
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800485a:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <LL_EXTI_Init+0x118>)
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004864:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004866:	68d9      	ldr	r1, [r3, #12]
 8004868:	430a      	orrs	r2, r1
 800486a:	60da      	str	r2, [r3, #12]
 800486c:	e00b      	b.n	8004886 <LL_EXTI_Init+0x10e>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800486e:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <LL_EXTI_Init+0x118>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	ea22 0201 	bic.w	r2, r2, r1
 8004878:	601a      	str	r2, [r3, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800487a:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	ea22 0201 	bic.w	r2, r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  ErrorStatus status = SUCCESS;
 8004884:	2001      	movs	r0, #1
  }
  return status;
}
 8004886:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8004888:	2001      	movs	r0, #1
 800488a:	e7fc      	b.n	8004886 <LL_EXTI_Init+0x10e>
 800488c:	0800ec8c 	.word	0x0800ec8c
 8004890:	40010400 	.word	0x40010400

08004894 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	4607      	mov	r7, r0
 800489a:	460e      	mov	r6, r1
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800489c:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <LL_GPIO_Init+0x1a0>)
 800489e:	4298      	cmp	r0, r3
 80048a0:	d01b      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a6:	4298      	cmp	r0, r3
 80048a8:	d017      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ae:	4298      	cmp	r0, r3
 80048b0:	d013      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	4298      	cmp	r0, r3
 80048b8:	d00f      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	4298      	cmp	r0, r3
 80048c0:	d00b      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c6:	4298      	cmp	r0, r3
 80048c8:	d007      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ce:	4298      	cmp	r0, r3
 80048d0:	d003      	beq.n	80048da <LL_GPIO_Init+0x46>
 80048d2:	21b2      	movs	r1, #178	; 0xb2
 80048d4:	4858      	ldr	r0, [pc, #352]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 80048d6:	f7fc fa82 	bl	8000dde <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 80048da:	6833      	ldr	r3, [r6, #0]
 80048dc:	f033 427b 	bics.w	r2, r3, #4211081216	; 0xfb000000
 80048e0:	d002      	beq.n	80048e8 <LL_GPIO_Init+0x54>
 80048e2:	f013 4f7b 	tst.w	r3, #4211081216	; 0xfb000000
 80048e6:	d003      	beq.n	80048f0 <LL_GPIO_Init+0x5c>
 80048e8:	21b3      	movs	r1, #179	; 0xb3
 80048ea:	4853      	ldr	r0, [pc, #332]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 80048ec:	f7fc fa77 	bl	8000dde <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	f3c3 280f 	ubfx	r8, r3, #8, #16
 80048f6:	fa98 f5a8 	rbit	r5, r8
  pinpos = POSITION_VAL(pinmask);
 80048fa:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 80048fe:	e06a      	b.n	80049d6 <LL_GPIO_Init+0x142>
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8004900:	f1a5 0308 	sub.w	r3, r5, #8
 8004904:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 8004908:	409c      	lsls	r4, r3
 800490a:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 800490e:	e06f      	b.n	80049f0 <LL_GPIO_Init+0x15c>
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004910:	6933      	ldr	r3, [r6, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d87c      	bhi.n	8004a10 <LL_GPIO_Init+0x17c>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004916:	6871      	ldr	r1, [r6, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004918:	ea4f 6914 	mov.w	r9, r4, lsr #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800491c:	f857 3009 	ldr.w	r3, [r7, r9]
 8004920:	fa94 f2a4 	rbit	r2, r4
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	0092      	lsls	r2, r2, #2
 800492a:	200f      	movs	r0, #15
 800492c:	fa00 f202 	lsl.w	r2, r0, r2
 8004930:	ea23 0302 	bic.w	r3, r3, r2
 8004934:	fa94 f2a4 	rbit	r2, r4
 8004938:	fab2 f282 	clz	r2, r2
 800493c:	0092      	lsls	r2, r2, #2
 800493e:	fa01 f202 	lsl.w	r2, r1, r2
 8004942:	4313      	orrs	r3, r2
 8004944:	f847 3009 	str.w	r3, [r7, r9]

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004948:	6932      	ldr	r2, [r6, #16]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	0a23      	lsrs	r3, r4, #8
 800494e:	ea21 0103 	bic.w	r1, r1, r3
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	430b      	orrs	r3, r1
 8004960:	60fb      	str	r3, [r7, #12]

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004962:	6873      	ldr	r3, [r6, #4]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <LL_GPIO_Init+0xd8>
 8004968:	2b09      	cmp	r3, #9
 800496a:	d133      	bne.n	80049d4 <LL_GPIO_Init+0x140>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800496c:	68b3      	ldr	r3, [r6, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	2b02      	cmp	r3, #2
 8004972:	d852      	bhi.n	8004a1a <LL_GPIO_Init+0x186>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004974:	68f3      	ldr	r3, [r6, #12]
 8004976:	b10b      	cbz	r3, 800497c <LL_GPIO_Init+0xe8>
 8004978:	2b04      	cmp	r3, #4
 800497a:	d153      	bne.n	8004a24 <LL_GPIO_Init+0x190>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800497c:	68b1      	ldr	r1, [r6, #8]
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800497e:	f857 3009 	ldr.w	r3, [r7, r9]
 8004982:	fa94 f2a4 	rbit	r2, r4
 8004986:	fab2 f282 	clz	r2, r2
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	2003      	movs	r0, #3
 800498e:	fa00 f202 	lsl.w	r2, r0, r2
 8004992:	ea23 0302 	bic.w	r3, r3, r2
 8004996:	fa94 f2a4 	rbit	r2, r4
 800499a:	fab2 f282 	clz	r2, r2
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	fa01 f202 	lsl.w	r2, r1, r2
 80049a4:	431a      	orrs	r2, r3
 80049a6:	f847 2009 	str.w	r2, [r7, r9]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80049aa:	68f3      	ldr	r3, [r6, #12]
 80049ac:	fa94 f1a4 	rbit	r1, r4
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80049b0:	fab1 f181 	clz	r1, r1
 80049b4:	0089      	lsls	r1, r1, #2
 80049b6:	2004      	movs	r0, #4
 80049b8:	fa00 f101 	lsl.w	r1, r0, r1
 80049bc:	ea22 0201 	bic.w	r2, r2, r1
 80049c0:	fa94 f4a4 	rbit	r4, r4
 80049c4:	fab4 f484 	clz	r4, r4
 80049c8:	00a4      	lsls	r4, r4, #2
 80049ca:	fa03 f404 	lsl.w	r4, r3, r4
 80049ce:	4314      	orrs	r4, r2
 80049d0:	f847 4009 	str.w	r4, [r7, r9]
      }
    }
    pinpos++;
 80049d4:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0U)
 80049d6:	fa38 f305 	lsrs.w	r3, r8, r5
 80049da:	d028      	beq.n	8004a2e <LL_GPIO_Init+0x19a>
    if ((pinmask & (1U << pinpos)) != 0U)
 80049dc:	2301      	movs	r3, #1
 80049de:	40ab      	lsls	r3, r5
 80049e0:	ea13 0f08 	tst.w	r3, r8
 80049e4:	d0f6      	beq.n	80049d4 <LL_GPIO_Init+0x140>
      if (pinpos < GPIO_PIN_MASK_POS)
 80049e6:	2d07      	cmp	r5, #7
 80049e8:	d88a      	bhi.n	8004900 <LL_GPIO_Init+0x6c>
        currentpin = (0x00000101U << pinpos);
 80049ea:	f240 1401 	movw	r4, #257	; 0x101
 80049ee:	40ac      	lsls	r4, r5
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 80049f0:	6873      	ldr	r3, [r6, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d08c      	beq.n	8004910 <LL_GPIO_Init+0x7c>
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d08a      	beq.n	8004910 <LL_GPIO_Init+0x7c>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d088      	beq.n	8004910 <LL_GPIO_Init+0x7c>
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d086      	beq.n	8004910 <LL_GPIO_Init+0x7c>
 8004a02:	2b09      	cmp	r3, #9
 8004a04:	d084      	beq.n	8004910 <LL_GPIO_Init+0x7c>
 8004a06:	21cc      	movs	r1, #204	; 0xcc
 8004a08:	480b      	ldr	r0, [pc, #44]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 8004a0a:	f7fc f9e8 	bl	8000dde <assert_failed>
 8004a0e:	e77f      	b.n	8004910 <LL_GPIO_Init+0x7c>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004a10:	21cd      	movs	r1, #205	; 0xcd
 8004a12:	4809      	ldr	r0, [pc, #36]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 8004a14:	f7fc f9e3 	bl	8000dde <assert_failed>
 8004a18:	e77d      	b.n	8004916 <LL_GPIO_Init+0x82>
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8004a1a:	21d8      	movs	r1, #216	; 0xd8
 8004a1c:	4806      	ldr	r0, [pc, #24]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 8004a1e:	f7fc f9de 	bl	8000dde <assert_failed>
 8004a22:	e7a7      	b.n	8004974 <LL_GPIO_Init+0xe0>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004a24:	21d9      	movs	r1, #217	; 0xd9
 8004a26:	4804      	ldr	r0, [pc, #16]	; (8004a38 <LL_GPIO_Init+0x1a4>)
 8004a28:	f7fc f9d9 	bl	8000dde <assert_failed>
 8004a2c:	e7a6      	b.n	800497c <LL_GPIO_Init+0xe8>
  }
  return (SUCCESS);
}
 8004a2e:	2001      	movs	r0, #1
 8004a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a34:	40010800 	.word	0x40010800
 8004a38:	0800ecc4 	.word	0x0800ecc4

08004a3c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	4604      	mov	r4, r0
 8004a42:	460d      	mov	r5, r1
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 8004a44:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <LL_I2C_Init+0x18c>)
 8004a46:	4298      	cmp	r0, r3
 8004a48:	d007      	beq.n	8004a5a <LL_I2C_Init+0x1e>
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d003      	beq.n	8004a5a <LL_I2C_Init+0x1e>
 8004a52:	2197      	movs	r1, #151	; 0x97
 8004a54:	485d      	ldr	r0, [pc, #372]	; (8004bcc <LL_I2C_Init+0x190>)
 8004a56:	f7fc f9c2 	bl	8000dde <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	b12b      	cbz	r3, 8004a6a <LL_I2C_Init+0x2e>
 8004a5e:	2b1a      	cmp	r3, #26
 8004a60:	d003      	beq.n	8004a6a <LL_I2C_Init+0x2e>
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d001      	beq.n	8004a6a <LL_I2C_Init+0x2e>
 8004a66:	2b12      	cmp	r3, #18
 8004a68:	d16f      	bne.n	8004b4a <LL_I2C_Init+0x10e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 8004a6a:	686b      	ldr	r3, [r5, #4]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <LL_I2C_Init+0x194>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d86f      	bhi.n	8004b54 <LL_I2C_Init+0x118>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8004a74:	68ab      	ldr	r3, [r5, #8]
 8004a76:	b113      	cbz	r3, 8004a7e <LL_I2C_Init+0x42>
 8004a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a7c:	d16f      	bne.n	8004b5e <LL_I2C_Init+0x122>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8004a7e:	68eb      	ldr	r3, [r5, #12]
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d270      	bcs.n	8004b68 <LL_I2C_Init+0x12c>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 8004a86:	692b      	ldr	r3, [r5, #16]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d001      	beq.n	8004a92 <LL_I2C_Init+0x56>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d16f      	bne.n	8004b72 <LL_I2C_Init+0x136>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 8004a92:	696b      	ldr	r3, [r5, #20]
 8004a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a98:	d006      	beq.n	8004aa8 <LL_I2C_Init+0x6c>
 8004a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a9e:	d003      	beq.n	8004aa8 <LL_I2C_Init+0x6c>
 8004aa0:	219f      	movs	r1, #159	; 0x9f
 8004aa2:	484a      	ldr	r0, [pc, #296]	; (8004bcc <LL_I2C_Init+0x190>)
 8004aa4:	f7fc f99b 	bl	8000dde <assert_failed>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6023      	str	r3, [r4, #0]

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ab0:	4668      	mov	r0, sp
 8004ab2:	f000 f8ed 	bl	8004c90 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004ab6:	9a02      	ldr	r2, [sp, #8]
 8004ab8:	686b      	ldr	r3, [r5, #4]
 8004aba:	68ae      	ldr	r6, [r5, #8]
{
  register uint32_t freqrange = 0x0U;
  register uint32_t clockconfig = 0x0U;

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004abc:	4945      	ldr	r1, [pc, #276]	; (8004bd4 <LL_I2C_Init+0x198>)
 8004abe:	fba1 0102 	umull	r0, r1, r1, r2
 8004ac2:	0c89      	lsrs	r1, r1, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004ac4:	6860      	ldr	r0, [r4, #4]
 8004ac6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004aca:	4308      	orrs	r0, r1
 8004acc:	6060      	str	r0, [r4, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004ace:	6a20      	ldr	r0, [r4, #32]
 8004ad0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004ad4:	4f40      	ldr	r7, [pc, #256]	; (8004bd8 <LL_I2C_Init+0x19c>)
 8004ad6:	42bb      	cmp	r3, r7
 8004ad8:	d850      	bhi.n	8004b7c <LL_I2C_Init+0x140>
 8004ada:	3101      	adds	r1, #1
 8004adc:	4301      	orrs	r1, r0
 8004ade:	6221      	str	r1, [r4, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004ae0:	493d      	ldr	r1, [pc, #244]	; (8004bd8 <LL_I2C_Init+0x19c>)
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d966      	bls.n	8004bb4 <LL_I2C_Init+0x178>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d152      	bne.n	8004b90 <LL_I2C_Init+0x154>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004aee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af2:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d056      	beq.n	8004ba8 <LL_I2C_Init+0x16c>
 8004afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afe:	ea46 0302 	orr.w	r3, r6, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004b02:	69e2      	ldr	r2, [r4, #28]
 8004b04:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8004b08:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	61e2      	str	r2, [r4, #28]
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004b10:	68ea      	ldr	r2, [r5, #12]
 8004b12:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60a3      	str	r3, [r4, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004b24:	682b      	ldr	r3, [r5, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	f022 021a 	bic.w	r2, r2, #26
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6023      	str	r3, [r4, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004b38:	692b      	ldr	r3, [r5, #16]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	4313      	orrs	r3, r2
 8004b42:	6023      	str	r3, [r4, #0]

  return SUCCESS;
}
 8004b44:	2001      	movs	r0, #1
 8004b46:	b005      	add	sp, #20
 8004b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8004b4a:	219a      	movs	r1, #154	; 0x9a
 8004b4c:	481f      	ldr	r0, [pc, #124]	; (8004bcc <LL_I2C_Init+0x190>)
 8004b4e:	f7fc f946 	bl	8000dde <assert_failed>
 8004b52:	e78a      	b.n	8004a6a <LL_I2C_Init+0x2e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 8004b54:	219b      	movs	r1, #155	; 0x9b
 8004b56:	481d      	ldr	r0, [pc, #116]	; (8004bcc <LL_I2C_Init+0x190>)
 8004b58:	f7fc f941 	bl	8000dde <assert_failed>
 8004b5c:	e78a      	b.n	8004a74 <LL_I2C_Init+0x38>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8004b5e:	219c      	movs	r1, #156	; 0x9c
 8004b60:	481a      	ldr	r0, [pc, #104]	; (8004bcc <LL_I2C_Init+0x190>)
 8004b62:	f7fc f93c 	bl	8000dde <assert_failed>
 8004b66:	e78a      	b.n	8004a7e <LL_I2C_Init+0x42>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8004b68:	219d      	movs	r1, #157	; 0x9d
 8004b6a:	4818      	ldr	r0, [pc, #96]	; (8004bcc <LL_I2C_Init+0x190>)
 8004b6c:	f7fc f937 	bl	8000dde <assert_failed>
 8004b70:	e789      	b.n	8004a86 <LL_I2C_Init+0x4a>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 8004b72:	219e      	movs	r1, #158	; 0x9e
 8004b74:	4815      	ldr	r0, [pc, #84]	; (8004bcc <LL_I2C_Init+0x190>)
 8004b76:	f7fc f932 	bl	8000dde <assert_failed>
 8004b7a:	e78a      	b.n	8004a92 <LL_I2C_Init+0x56>
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004b7c:	f44f 7796 	mov.w	r7, #300	; 0x12c
 8004b80:	fb07 f101 	mul.w	r1, r7, r1
 8004b84:	4f15      	ldr	r7, [pc, #84]	; (8004bdc <LL_I2C_Init+0x1a0>)
 8004b86:	fba7 7101 	umull	r7, r1, r7, r1
 8004b8a:	0989      	lsrs	r1, r1, #6
 8004b8c:	3101      	adds	r1, #1
 8004b8e:	e7a5      	b.n	8004adc <LL_I2C_Init+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b9c:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004ba0:	b12b      	cbz	r3, 8004bae <LL_I2C_Init+0x172>
 8004ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba6:	e7aa      	b.n	8004afe <LL_I2C_Init+0xc2>
 8004ba8:	f248 0201 	movw	r2, #32769	; 0x8001
 8004bac:	e7a7      	b.n	8004afe <LL_I2C_Init+0xc2>
 8004bae:	f248 0201 	movw	r2, #32769	; 0x8001
 8004bb2:	e7a4      	b.n	8004afe <LL_I2C_Init+0xc2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	f3c3 020b 	ubfx	r2, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004bbe:	2a03      	cmp	r2, #3
 8004bc0:	d89f      	bhi.n	8004b02 <LL_I2C_Init+0xc6>
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	e79d      	b.n	8004b02 <LL_I2C_Init+0xc6>
 8004bc6:	bf00      	nop
 8004bc8:	40005400 	.word	0x40005400
 8004bcc:	0800ecfc 	.word	0x0800ecfc
 8004bd0:	00061a7f 	.word	0x00061a7f
 8004bd4:	431bde83 	.word	0x431bde83
 8004bd8:	000186a0 	.word	0x000186a0
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <RCC_GetHCLKClockFreq+0x10>)
 8004be2:	685b      	ldr	r3, [r3, #4]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004be4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004be8:	4a02      	ldr	r2, [pc, #8]	; (8004bf4 <RCC_GetHCLKClockFreq+0x14>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
}
 8004bec:	40d8      	lsrs	r0, r3
 8004bee:	4770      	bx	lr
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	0800eb1c 	.word	0x0800eb1c

08004bf8 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <RCC_GetPCLK1ClockFreq+0x10>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004bfc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c00:	4a02      	ldr	r2, [pc, #8]	; (8004c0c <RCC_GetPCLK1ClockFreq+0x14>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c04:	40d8      	lsrs	r0, r3
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	0800eb2c 	.word	0x0800eb2c

08004c10 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <RCC_GetPCLK2ClockFreq+0x10>)
 8004c12:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c18:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <RCC_GetPCLK2ClockFreq+0x14>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c1c:	40d8      	lsrs	r0, r3
 8004c1e:	4770      	bx	lr
 8004c20:	40021000 	.word	0x40021000
 8004c24:	0800eb2c 	.word	0x0800eb2c

08004c28 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004c30:	b17b      	cbz	r3, 8004c52 <RCC_PLL_GetFreqDomain_SYS+0x2a>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8004c34:	6858      	ldr	r0, [r3, #4]
 8004c36:	f3c0 4040 	ubfx	r0, r0, #17, #1
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <RCC_PLL_GetFreqDomain_SYS+0x34>)
 8004c3e:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8004c44:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004c46:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8004c4a:	3302      	adds	r3, #2
}
 8004c4c:	fb00 f003 	mul.w	r0, r0, r3
 8004c50:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8004c52:	4803      	ldr	r0, [pc, #12]	; (8004c60 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 8004c54:	e7f5      	b.n	8004c42 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	00b71b00 	.word	0x00b71b00
 8004c60:	003d0900 	.word	0x003d0900

08004c64 <RCC_GetSystemClockFreq>:
{
 8004c64:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <RCC_GetSystemClockFreq+0x20>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d006      	beq.n	8004c80 <RCC_GetSystemClockFreq+0x1c>
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d001      	beq.n	8004c7a <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8004c76:	4804      	ldr	r0, [pc, #16]	; (8004c88 <RCC_GetSystemClockFreq+0x24>)
}
 8004c78:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004c7a:	f7ff ffd5 	bl	8004c28 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8004c7e:	e7fb      	b.n	8004c78 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 8004c82:	e7f9      	b.n	8004c78 <RCC_GetSystemClockFreq+0x14>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	007a1200 	.word	0x007a1200
 8004c8c:	00b71b00 	.word	0x00b71b00

08004c90 <LL_RCC_GetSystemClocksFreq>:
{
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004c94:	f7ff ffe6 	bl	8004c64 <RCC_GetSystemClockFreq>
 8004c98:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004c9a:	f7ff ffa1 	bl	8004be0 <RCC_GetHCLKClockFreq>
 8004c9e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004ca0:	f7ff ffaa 	bl	8004bf8 <RCC_GetPCLK1ClockFreq>
 8004ca4:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004ca6:	6860      	ldr	r0, [r4, #4]
 8004ca8:	f7ff ffb2 	bl	8004c10 <RCC_GetPCLK2ClockFreq>
 8004cac:	60e0      	str	r0, [r4, #12]
}
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8004cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cba:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <LL_RTC_EnterInitMode+0x58>)
 8004cbe:	4298      	cmp	r0, r3
 8004cc0:	d004      	beq.n	8004ccc <LL_RTC_EnterInitMode+0x1c>
 8004cc2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004cc6:	4811      	ldr	r0, [pc, #68]	; (8004d0c <LL_RTC_EnterInitMode+0x5c>)
 8004cc8:	f7fc f889 	bl	8000dde <assert_failed>
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 8004cd2:	2001      	movs	r0, #1

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8004cd4:	9a01      	ldr	r2, [sp, #4]
 8004cd6:	b182      	cbz	r2, 8004cfa <LL_RTC_EnterInitMode+0x4a>
 8004cd8:	b97b      	cbnz	r3, 8004cfa <LL_RTC_EnterInitMode+0x4a>
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <LL_RTC_EnterInitMode+0x60>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004cde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ce2:	d002      	beq.n	8004cea <LL_RTC_EnterInitMode+0x3a>
      {
        timeout --;
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	6863      	ldr	r3, [r4, #4]
 8004cec:	f3c3 1340 	ubfx	r3, r3, #5, #1
      }
      tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
      if (timeout == 0U)
 8004cf0:	9a01      	ldr	r2, [sp, #4]
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <LL_RTC_EnterInitMode+0x24>
      {
        status = ERROR;
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e7ec      	b.n	8004cd4 <LL_RTC_EnterInitMode+0x24>
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	f043 0310 	orr.w	r3, r3, #16
 8004d00:	6063      	str	r3, [r4, #4]

   /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
  
  return status;
}
 8004d02:	b002      	add	sp, #8
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	bf00      	nop
 8004d08:	40002800 	.word	0x40002800
 8004d0c:	0800ed34 	.word	0x0800ed34
 8004d10:	e000e010 	.word	0xe000e010

08004d14 <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 8004d14:	b510      	push	{r4, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;
  
  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <LL_RTC_ExitInitMode+0x58>)
 8004d22:	4298      	cmp	r0, r3
 8004d24:	d004      	beq.n	8004d30 <LL_RTC_ExitInitMode+0x1c>
 8004d26:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004d2a:	4811      	ldr	r0, [pc, #68]	; (8004d70 <LL_RTC_ExitInitMode+0x5c>)
 8004d2c:	f7fc f857 	bl	8000dde <assert_failed>
 CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 8004d3e:	2001      	movs	r0, #1
  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
  
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
  while ((timeout != 0U) && (tmp != 1U))
 8004d40:	9a01      	ldr	r2, [sp, #4]
 8004d42:	b182      	cbz	r2, 8004d66 <LL_RTC_ExitInitMode+0x52>
 8004d44:	b97b      	cbnz	r3, 8004d66 <LL_RTC_ExitInitMode+0x52>
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <LL_RTC_ExitInitMode+0x60>)
 8004d48:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004d4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d4e:	d002      	beq.n	8004d56 <LL_RTC_ExitInitMode+0x42>
    {
      timeout --;
 8004d50:	9b01      	ldr	r3, [sp, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	6863      	ldr	r3, [r4, #4]
 8004d58:	f3c3 1340 	ubfx	r3, r3, #5, #1
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    if (timeout == 0U)
 8004d5c:	9a01      	ldr	r2, [sp, #4]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	d1ee      	bne.n	8004d40 <LL_RTC_ExitInitMode+0x2c>
    {
      status = ERROR;
 8004d62:	2000      	movs	r0, #0
 8004d64:	e7ec      	b.n	8004d40 <LL_RTC_ExitInitMode+0x2c>
    }
  }
  return status;
}
 8004d66:	b002      	add	sp, #8
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40002800 	.word	0x40002800
 8004d70:	0800ed34 	.word	0x0800ed34
 8004d74:	e000e010 	.word	0xe000e010

08004d78 <LL_RTC_TIME_Init>:
{
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	4614      	mov	r4, r2
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8004d80:	4b4e      	ldr	r3, [pc, #312]	; (8004ebc <LL_RTC_TIME_Init+0x144>)
 8004d82:	4298      	cmp	r0, r3
 8004d84:	d003      	beq.n	8004d8e <LL_RTC_TIME_Init+0x16>
 8004d86:	21f0      	movs	r1, #240	; 0xf0
 8004d88:	484d      	ldr	r0, [pc, #308]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004d8a:	f7fc f828 	bl	8000dde <assert_failed>
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 8004d8e:	2e01      	cmp	r6, #1
 8004d90:	d83e      	bhi.n	8004e10 <LL_RTC_TIME_Init+0x98>
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8004d92:	2e00      	cmp	r6, #0
 8004d94:	d150      	bne.n	8004e38 <LL_RTC_TIME_Init+0xc0>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 8004d96:	7823      	ldrb	r3, [r4, #0]
 8004d98:	2b17      	cmp	r3, #23
 8004d9a:	d83e      	bhi.n	8004e1a <LL_RTC_TIME_Init+0xa2>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 8004d9c:	7863      	ldrb	r3, [r4, #1]
 8004d9e:	2b3b      	cmp	r3, #59	; 0x3b
 8004da0:	d840      	bhi.n	8004e24 <LL_RTC_TIME_Init+0xac>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 8004da2:	78a3      	ldrb	r3, [r4, #2]
 8004da4:	2b3b      	cmp	r3, #59	; 0x3b
 8004da6:	d842      	bhi.n	8004e2e <LL_RTC_TIME_Init+0xb6>
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7ff ff81 	bl	8004cb0 <LL_RTC_EnterInitMode>
 8004dae:	4607      	mov	r7, r0
 8004db0:	b348      	cbz	r0, 8004e06 <LL_RTC_TIME_Init+0x8e>
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	d170      	bne.n	8004e98 <LL_RTC_TIME_Init+0x120>
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8004db6:	7823      	ldrb	r3, [r4, #0]
 8004db8:	091a      	lsrs	r2, r3, #4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004dc2:	0051      	lsls	r1, r2, #1
 8004dc4:	440b      	add	r3, r1
 8004dc6:	b2db      	uxtb	r3, r3
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 8004dc8:	7862      	ldrb	r2, [r4, #1]
 8004dca:	0911      	lsrs	r1, r2, #4
 8004dcc:	f002 020f 	and.w	r2, r2, #15
 8004dd0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004dd4:	0048      	lsls	r0, r1, #1
 8004dd6:	4402      	add	r2, r0
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004dde:	0091      	lsls	r1, r2, #2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8004de0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004de4:	fb02 1303 	mla	r3, r2, r3, r1
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 8004de8:	78a2      	ldrb	r2, [r4, #2]
 8004dea:	0911      	lsrs	r1, r2, #4
 8004dec:	f002 020f 	and.w	r2, r2, #15
 8004df0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004df4:	0048      	lsls	r0, r1, #1
 8004df6:	4402      	add	r2, r0
 8004df8:	b2d2      	uxtb	r2, r2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8004dfa:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 8004dfc:	0c1a      	lsrs	r2, r3, #16
 8004dfe:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 8004e04:	2701      	movs	r7, #1
  LL_RTC_ExitInitMode(RTCx);
 8004e06:	4628      	mov	r0, r5
 8004e08:	f7ff ff84 	bl	8004d14 <LL_RTC_ExitInitMode>
}
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 8004e10:	21f1      	movs	r1, #241	; 0xf1
 8004e12:	482b      	ldr	r0, [pc, #172]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e14:	f7fb ffe3 	bl	8000dde <assert_failed>
 8004e18:	e7bb      	b.n	8004d92 <LL_RTC_TIME_Init+0x1a>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 8004e1a:	21f5      	movs	r1, #245	; 0xf5
 8004e1c:	4828      	ldr	r0, [pc, #160]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e1e:	f7fb ffde 	bl	8000dde <assert_failed>
 8004e22:	e7bb      	b.n	8004d9c <LL_RTC_TIME_Init+0x24>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 8004e24:	21f6      	movs	r1, #246	; 0xf6
 8004e26:	4826      	ldr	r0, [pc, #152]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e28:	f7fb ffd9 	bl	8000dde <assert_failed>
 8004e2c:	e7b9      	b.n	8004da2 <LL_RTC_TIME_Init+0x2a>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 8004e2e:	21f7      	movs	r1, #247	; 0xf7
 8004e30:	4823      	ldr	r0, [pc, #140]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e32:	f7fb ffd4 	bl	8000dde <assert_failed>
 8004e36:	e7b7      	b.n	8004da8 <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 8004e38:	7823      	ldrb	r3, [r4, #0]
 8004e3a:	091a      	lsrs	r2, r3, #4
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e44:	0051      	lsls	r1, r2, #1
 8004e46:	440b      	add	r3, r1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b17      	cmp	r3, #23
 8004e4c:	d81a      	bhi.n	8004e84 <LL_RTC_TIME_Init+0x10c>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 8004e4e:	7863      	ldrb	r3, [r4, #1]
 8004e50:	091a      	lsrs	r2, r3, #4
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e5a:	0051      	lsls	r1, r2, #1
 8004e5c:	440b      	add	r3, r1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b3b      	cmp	r3, #59	; 0x3b
 8004e62:	d814      	bhi.n	8004e8e <LL_RTC_TIME_Init+0x116>
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
 8004e64:	78a3      	ldrb	r3, [r4, #2]
 8004e66:	091a      	lsrs	r2, r3, #4
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e70:	0051      	lsls	r1, r2, #1
 8004e72:	440b      	add	r3, r1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b3b      	cmp	r3, #59	; 0x3b
 8004e78:	d996      	bls.n	8004da8 <LL_RTC_TIME_Init+0x30>
 8004e7a:	21fd      	movs	r1, #253	; 0xfd
 8004e7c:	4810      	ldr	r0, [pc, #64]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e7e:	f7fb ffae 	bl	8000dde <assert_failed>
 8004e82:	e791      	b.n	8004da8 <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 8004e84:	21fb      	movs	r1, #251	; 0xfb
 8004e86:	480e      	ldr	r0, [pc, #56]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e88:	f7fb ffa9 	bl	8000dde <assert_failed>
 8004e8c:	e7df      	b.n	8004e4e <LL_RTC_TIME_Init+0xd6>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 8004e8e:	21fc      	movs	r1, #252	; 0xfc
 8004e90:	480b      	ldr	r0, [pc, #44]	; (8004ec0 <LL_RTC_TIME_Init+0x148>)
 8004e92:	f7fb ffa4 	bl	8000dde <assert_failed>
 8004e96:	e7e5      	b.n	8004e64 <LL_RTC_TIME_Init+0xec>
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8004e98:	7823      	ldrb	r3, [r4, #0]
                        ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 8004e9a:	7862      	ldrb	r2, [r4, #1]
 8004e9c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004ea0:	0091      	lsls	r1, r2, #2
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8004ea2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004ea6:	fb02 1303 	mla	r3, r2, r3, r1
                        ((uint32_t)RTC_TimeStruct->Seconds));
 8004eaa:	78a2      	ldrb	r2, [r4, #2]
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8004eac:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 8004eae:	0c1a      	lsrs	r2, r3, #16
 8004eb0:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 8004eb6:	2701      	movs	r7, #1
 8004eb8:	e7a5      	b.n	8004e06 <LL_RTC_TIME_Init+0x8e>
 8004eba:	bf00      	nop
 8004ebc:	40002800 	.word	0x40002800
 8004ec0:	0800ed34 	.word	0x0800ed34

08004ec4 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8004eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ece:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <LL_RTC_WaitForSynchro+0x58>)
 8004ed2:	4298      	cmp	r0, r3
 8004ed4:	d004      	beq.n	8004ee0 <LL_RTC_WaitForSynchro+0x1c>
 8004ed6:	f240 2101 	movw	r1, #513	; 0x201
 8004eda:	4811      	ldr	r0, [pc, #68]	; (8004f20 <LL_RTC_WaitForSynchro+0x5c>)
 8004edc:	f7fb ff7f 	bl	8000dde <assert_failed>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 8004ee8:	6863      	ldr	r3, [r4, #4]
 8004eea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  ErrorStatus status = SUCCESS;
 8004eee:	2001      	movs	r0, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8004ef0:	9a01      	ldr	r2, [sp, #4]
 8004ef2:	b182      	cbz	r2, 8004f16 <LL_RTC_WaitForSynchro+0x52>
 8004ef4:	b17b      	cbz	r3, 8004f16 <LL_RTC_WaitForSynchro+0x52>
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <LL_RTC_WaitForSynchro+0x60>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004efa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004efe:	d002      	beq.n	8004f06 <LL_RTC_WaitForSynchro+0x42>
    {
      timeout--;
 8004f00:	9b01      	ldr	r3, [sp, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    if (timeout == 0U)
 8004f0c:	9a01      	ldr	r2, [sp, #4]
 8004f0e:	2a00      	cmp	r2, #0
 8004f10:	d1ee      	bne.n	8004ef0 <LL_RTC_WaitForSynchro+0x2c>
    {
      status = ERROR;
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7ec      	b.n	8004ef0 <LL_RTC_WaitForSynchro+0x2c>
    }
  }

  return (status);
}
 8004f16:	b002      	add	sp, #8
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40002800 	.word	0x40002800
 8004f20:	0800ed34 	.word	0x0800ed34
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <LL_RTC_Init>:
{
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	460d      	mov	r5, r1
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <LL_RTC_Init+0xb8>)
 8004f30:	4298      	cmp	r0, r3
 8004f32:	d003      	beq.n	8004f3c <LL_RTC_Init+0x14>
 8004f34:	21ae      	movs	r1, #174	; 0xae
 8004f36:	482b      	ldr	r0, [pc, #172]	; (8004fe4 <LL_RTC_Init+0xbc>)
 8004f38:	f7fb ff51 	bl	8000dde <assert_failed>
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f42:	d210      	bcs.n	8004f66 <LL_RTC_Init+0x3e>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 8004f44:	686b      	ldr	r3, [r5, #4]
 8004f46:	b13b      	cbz	r3, 8004f58 <LL_RTC_Init+0x30>
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d005      	beq.n	8004f58 <LL_RTC_Init+0x30>
 8004f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f50:	d002      	beq.n	8004f58 <LL_RTC_Init+0x30>
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d10b      	bne.n	8004f70 <LL_RTC_Init+0x48>
  if(LL_RTC_WaitForSynchro(RTCx) != ERROR)
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff ffb3 	bl	8004ec4 <LL_RTC_WaitForSynchro>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	b958      	cbnz	r0, 8004f7a <LL_RTC_Init+0x52>
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 8004f66:	21af      	movs	r1, #175	; 0xaf
 8004f68:	481e      	ldr	r0, [pc, #120]	; (8004fe4 <LL_RTC_Init+0xbc>)
 8004f6a:	f7fb ff38 	bl	8000dde <assert_failed>
 8004f6e:	e7e9      	b.n	8004f44 <LL_RTC_Init+0x1c>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 8004f70:	21b0      	movs	r1, #176	; 0xb0
 8004f72:	481c      	ldr	r0, [pc, #112]	; (8004fe4 <LL_RTC_Init+0xbc>)
 8004f74:	f7fb ff33 	bl	8000dde <assert_failed>
 8004f78:	e7ee      	b.n	8004f58 <LL_RTC_Init+0x30>
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7ff fe98 	bl	8004cb0 <LL_RTC_EnterInitMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d0ed      	beq.n	8004f62 <LL_RTC_Init+0x3a>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 8004f86:	6863      	ldr	r3, [r4, #4]
 8004f88:	f023 0302 	bic.w	r3, r3, #2
 8004f8c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	6063      	str	r3, [r4, #4]
      if(RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 8004f9e:	686b      	ldr	r3, [r5, #4]
 8004fa0:	b123      	cbz	r3, 8004fac <LL_RTC_Init+0x84>
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004fa2:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <LL_RTC_Init+0xc0>)
 8004fa4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6313      	str	r3, [r2, #48]	; 0x30
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 8004fac:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 8004fae:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <LL_RTC_Init+0xc0>)
 8004fb0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004fb2:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	62cb      	str	r3, [r1, #44]	; 0x2c
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8004fba:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8004fbc:	68a2      	ldr	r2, [r4, #8]
 8004fbe:	f022 020f 	bic.w	r2, r2, #15
 8004fc2:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8004fc6:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8004fc8:	68e3      	ldr	r3, [r4, #12]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	b289      	uxth	r1, r1
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	60e3      	str	r3, [r4, #12]
      LL_RTC_ExitInitMode(RTCx);      
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff fe9d 	bl	8004d14 <LL_RTC_ExitInitMode>
      status = SUCCESS;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e7c1      	b.n	8004f62 <LL_RTC_Init+0x3a>
 8004fde:	bf00      	nop
 8004fe0:	40002800 	.word	0x40002800
 8004fe4:	0800ed34 	.word	0x0800ed34
 8004fe8:	40006c00 	.word	0x40006c00

08004fec <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <SDMMC_GetCmdError+0x34>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <SDMMC_GetCmdError+0x38>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	0a5a      	lsrs	r2, r3, #9
 8004ff8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ffc:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	b14b      	cbz	r3, 8005018 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005004:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005006:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005008:	f011 0f80 	tst.w	r1, #128	; 0x80
 800500c:	d0f8      	beq.n	8005000 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800500e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005012:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005014:	2000      	movs	r0, #0
 8005016:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005018:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000
 8005024:	10624dd3 	.word	0x10624dd3

08005028 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <SDMMC_GetCmdResp2+0x54>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <SDMMC_GetCmdResp2+0x58>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	0a5a      	lsrs	r2, r3, #9
 8005034:	f241 3388 	movw	r3, #5000	; 0x1388
 8005038:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	b1cb      	cbz	r3, 8005074 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005040:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005042:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005044:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005048:	d0f8      	beq.n	800503c <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800504a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800504c:	f013 0f04 	tst.w	r3, #4
 8005050:	d108      	bne.n	8005064 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005052:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005054:	f013 0f01 	tst.w	r3, #1
 8005058:	d108      	bne.n	800506c <SDMMC_GetCmdResp2+0x44>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800505a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800505e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005060:	2000      	movs	r0, #0
 8005062:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005064:	2304      	movs	r3, #4
 8005066:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005068:	4618      	mov	r0, r3
 800506a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800506c:	2301      	movs	r3, #1
 800506e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005070:	4618      	mov	r0, r3
 8005072:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005074:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000
 8005080:	10624dd3 	.word	0x10624dd3

08005084 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <SDMMC_GetCmdResp3+0x44>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a10      	ldr	r2, [pc, #64]	; (80050cc <SDMMC_GetCmdResp3+0x48>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0a5a      	lsrs	r2, r3, #9
 8005090:	f241 3388 	movw	r3, #5000	; 0x1388
 8005094:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	b18b      	cbz	r3, 80050c0 <SDMMC_GetCmdResp3+0x3c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800509c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 800509e:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80050a0:	f011 0f45 	tst.w	r1, #69	; 0x45
 80050a4:	d0f8      	beq.n	8005098 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050a8:	f013 0f04 	tst.w	r3, #4
 80050ac:	d104      	bne.n	80050b8 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80050ae:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80050b2:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80050b4:	2000      	movs	r0, #0
 80050b6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050b8:	2304      	movs	r3, #4
 80050ba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050bc:	4618      	mov	r0, r3
 80050be:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80050c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000000 	.word	0x20000000
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <SDMMC_GetCmdResp7+0x4c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a12      	ldr	r2, [pc, #72]	; (8005120 <SDMMC_GetCmdResp7+0x50>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a5a      	lsrs	r2, r3, #9
 80050dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80050e0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	b1a3      	cbz	r3, 8005112 <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80050e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80050ea:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80050ec:	f011 0f45 	tst.w	r1, #69	; 0x45
 80050f0:	d0f8      	beq.n	80050e4 <SDMMC_GetCmdResp7+0x14>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050f4:	f013 0f04 	tst.w	r3, #4
 80050f8:	d107      	bne.n	800510a <SDMMC_GetCmdResp7+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80050fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005100:	d00a      	beq.n	8005118 <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005106:	2000      	movs	r0, #0
 8005108:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800510a:	2340      	movs	r3, #64	; 0x40
 800510c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800510e:	2004      	movs	r0, #4
 8005110:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005112:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005116:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8005118:	2000      	movs	r0, #0
  
}
 800511a:	4770      	bx	lr
 800511c:	20000000 	.word	0x20000000
 8005120:	10624dd3 	.word	0x10624dd3

08005124 <SDIO_Init>:
{
 8005124:	b084      	sub	sp, #16
 8005126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512a:	4606      	mov	r6, r0
 800512c:	a809      	add	r0, sp, #36	; 0x24
 800512e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8005132:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <SDIO_Init+0xd0>)
 8005134:	429e      	cmp	r6, r3
 8005136:	d003      	beq.n	8005140 <SDIO_Init+0x1c>
 8005138:	21e7      	movs	r1, #231	; 0xe7
 800513a:	482f      	ldr	r0, [pc, #188]	; (80051f8 <SDIO_Init+0xd4>)
 800513c:	f7fb fe4f 	bl	8000dde <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8005140:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005144:	f1b9 0f00 	cmp.w	r9, #0
 8005148:	d002      	beq.n	8005150 <SDIO_Init+0x2c>
 800514a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800514e:	d133      	bne.n	80051b8 <SDIO_Init+0x94>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8005150:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005154:	f1ba 0f00 	cmp.w	sl, #0
 8005158:	d002      	beq.n	8005160 <SDIO_Init+0x3c>
 800515a:	f5ba 6f80 	cmp.w	sl, #1024	; 0x400
 800515e:	d130      	bne.n	80051c2 <SDIO_Init+0x9e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8005160:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005164:	f1b8 0f00 	cmp.w	r8, #0
 8005168:	d002      	beq.n	8005170 <SDIO_Init+0x4c>
 800516a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 800516e:	d12d      	bne.n	80051cc <SDIO_Init+0xa8>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8005170:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005172:	b12d      	cbz	r5, 8005180 <SDIO_Init+0x5c>
 8005174:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005178:	d002      	beq.n	8005180 <SDIO_Init+0x5c>
 800517a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800517e:	d12a      	bne.n	80051d6 <SDIO_Init+0xb2>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8005180:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005182:	b117      	cbz	r7, 800518a <SDIO_Init+0x66>
 8005184:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8005188:	d12a      	bne.n	80051e0 <SDIO_Init+0xbc>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 800518a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800518c:	2cff      	cmp	r4, #255	; 0xff
 800518e:	d82c      	bhi.n	80051ea <SDIO_Init+0xc6>
  tmpreg |= (Init.ClockEdge           |\
 8005190:	ea49 090a 	orr.w	r9, r9, sl
             Init.ClockBypass         |\
 8005194:	ea48 0809 	orr.w	r8, r8, r9
             Init.ClockPowerSave      |\
 8005198:	ea45 0508 	orr.w	r5, r5, r8
             Init.BusWide             |\
 800519c:	433d      	orrs	r5, r7
             Init.HardwareFlowControl |\
 800519e:	432c      	orrs	r4, r5
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80051a0:	6873      	ldr	r3, [r6, #4]
 80051a2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80051a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051aa:	431c      	orrs	r4, r3
 80051ac:	6074      	str	r4, [r6, #4]
}
 80051ae:	2000      	movs	r0, #0
 80051b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	b004      	add	sp, #16
 80051b6:	4770      	bx	lr
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 80051b8:	21e8      	movs	r1, #232	; 0xe8
 80051ba:	480f      	ldr	r0, [pc, #60]	; (80051f8 <SDIO_Init+0xd4>)
 80051bc:	f7fb fe0f 	bl	8000dde <assert_failed>
 80051c0:	e7c6      	b.n	8005150 <SDIO_Init+0x2c>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 80051c2:	21e9      	movs	r1, #233	; 0xe9
 80051c4:	480c      	ldr	r0, [pc, #48]	; (80051f8 <SDIO_Init+0xd4>)
 80051c6:	f7fb fe0a 	bl	8000dde <assert_failed>
 80051ca:	e7c9      	b.n	8005160 <SDIO_Init+0x3c>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80051cc:	21ea      	movs	r1, #234	; 0xea
 80051ce:	480a      	ldr	r0, [pc, #40]	; (80051f8 <SDIO_Init+0xd4>)
 80051d0:	f7fb fe05 	bl	8000dde <assert_failed>
 80051d4:	e7cc      	b.n	8005170 <SDIO_Init+0x4c>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 80051d6:	21eb      	movs	r1, #235	; 0xeb
 80051d8:	4807      	ldr	r0, [pc, #28]	; (80051f8 <SDIO_Init+0xd4>)
 80051da:	f7fb fe00 	bl	8000dde <assert_failed>
 80051de:	e7cf      	b.n	8005180 <SDIO_Init+0x5c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 80051e0:	21ec      	movs	r1, #236	; 0xec
 80051e2:	4805      	ldr	r0, [pc, #20]	; (80051f8 <SDIO_Init+0xd4>)
 80051e4:	f7fb fdfb 	bl	8000dde <assert_failed>
 80051e8:	e7cf      	b.n	800518a <SDIO_Init+0x66>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 80051ea:	21ed      	movs	r1, #237	; 0xed
 80051ec:	4802      	ldr	r0, [pc, #8]	; (80051f8 <SDIO_Init+0xd4>)
 80051ee:	f7fb fdf6 	bl	8000dde <assert_failed>
 80051f2:	e7cd      	b.n	8005190 <SDIO_Init+0x6c>
 80051f4:	40018000 	.word	0x40018000
 80051f8:	0800ed6c 	.word	0x0800ed6c

080051fc <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80051fc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8005200:	4770      	bx	lr

08005202 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8005202:	680b      	ldr	r3, [r1, #0]
 8005204:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8005208:	2000      	movs	r0, #0
 800520a:	4770      	bx	lr

0800520c <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800520c:	2303      	movs	r3, #3
 800520e:	6003      	str	r3, [r0, #0]
}
 8005210:	2000      	movs	r0, #0
 8005212:	4770      	bx	lr

08005214 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005214:	6800      	ldr	r0, [r0, #0]
}
 8005216:	f000 0003 	and.w	r0, r0, #3
 800521a:	4770      	bx	lr

0800521c <SDIO_SendCommand>:
{
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4605      	mov	r5, r0
 8005220:	460c      	mov	r4, r1
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 8005222:	684b      	ldr	r3, [r1, #4]
 8005224:	2b3f      	cmp	r3, #63	; 0x3f
 8005226:	d829      	bhi.n	800527c <SDIO_SendCommand+0x60>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	b11b      	cbz	r3, 8005234 <SDIO_SendCommand+0x18>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d001      	beq.n	8005234 <SDIO_SendCommand+0x18>
 8005230:	2bc0      	cmp	r3, #192	; 0xc0
 8005232:	d129      	bne.n	8005288 <SDIO_SendCommand+0x6c>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 8005234:	68e3      	ldr	r3, [r4, #12]
 8005236:	b12b      	cbz	r3, 8005244 <SDIO_SendCommand+0x28>
 8005238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523c:	d002      	beq.n	8005244 <SDIO_SendCommand+0x28>
 800523e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005242:	d127      	bne.n	8005294 <SDIO_SendCommand+0x78>
  assert_param(IS_SDIO_CPSM(Command->CPSM));
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	b13b      	cbz	r3, 8005258 <SDIO_SendCommand+0x3c>
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d004      	beq.n	8005258 <SDIO_SendCommand+0x3c>
 800524e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8005252:	4813      	ldr	r0, [pc, #76]	; (80052a0 <SDIO_SendCommand+0x84>)
 8005254:	f7fb fdc3 	bl	8000dde <assert_failed>
  SDIOx->ARG = Command->Argument;
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800525c:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 800525e:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005260:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8005262:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 8005264:	4313      	orrs	r3, r2
                       Command->CPSM);
 8005266:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 8005268:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800526a:	68ea      	ldr	r2, [r5, #12]
 800526c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005270:	f022 020f 	bic.w	r2, r2, #15
 8005274:	4313      	orrs	r3, r2
 8005276:	60eb      	str	r3, [r5, #12]
}
 8005278:	2000      	movs	r0, #0
 800527a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 800527c:	f240 1173 	movw	r1, #371	; 0x173
 8005280:	4807      	ldr	r0, [pc, #28]	; (80052a0 <SDIO_SendCommand+0x84>)
 8005282:	f7fb fdac 	bl	8000dde <assert_failed>
 8005286:	e7cf      	b.n	8005228 <SDIO_SendCommand+0xc>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 8005288:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800528c:	4804      	ldr	r0, [pc, #16]	; (80052a0 <SDIO_SendCommand+0x84>)
 800528e:	f7fb fda6 	bl	8000dde <assert_failed>
 8005292:	e7cf      	b.n	8005234 <SDIO_SendCommand+0x18>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 8005294:	f240 1175 	movw	r1, #373	; 0x175
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <SDIO_SendCommand+0x84>)
 800529a:	f7fb fda0 	bl	8000dde <assert_failed>
 800529e:	e7d1      	b.n	8005244 <SDIO_SendCommand+0x28>
 80052a0:	0800ed6c 	.word	0x0800ed6c

080052a4 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80052a4:	6900      	ldr	r0, [r0, #16]
}
 80052a6:	b2c0      	uxtb	r0, r0
 80052a8:	4770      	bx	lr
	...

080052ac <SDIO_GetResponse>:
{
 80052ac:	b530      	push	{r4, r5, lr}
 80052ae:	b083      	sub	sp, #12
 80052b0:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDIO_RESP(Response));
 80052b6:	460d      	mov	r5, r1
 80052b8:	b151      	cbz	r1, 80052d0 <SDIO_GetResponse+0x24>
 80052ba:	2904      	cmp	r1, #4
 80052bc:	d008      	beq.n	80052d0 <SDIO_GetResponse+0x24>
 80052be:	2908      	cmp	r1, #8
 80052c0:	d006      	beq.n	80052d0 <SDIO_GetResponse+0x24>
 80052c2:	290c      	cmp	r1, #12
 80052c4:	d004      	beq.n	80052d0 <SDIO_GetResponse+0x24>
 80052c6:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80052ca:	4805      	ldr	r0, [pc, #20]	; (80052e0 <SDIO_GetResponse+0x34>)
 80052cc:	f7fb fd87 	bl	8000dde <assert_failed>
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80052d0:	3414      	adds	r4, #20
 80052d2:	442c      	add	r4, r5
 80052d4:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80052d6:	9b01      	ldr	r3, [sp, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
}  
 80052da:	b003      	add	sp, #12
 80052dc:	bd30      	pop	{r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	0800ed6c 	.word	0x0800ed6c

080052e4 <SDMMC_GetCmdResp1>:
{
 80052e4:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <SDMMC_GetCmdResp1+0x148>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4c51      	ldr	r4, [pc, #324]	; (8005430 <SDMMC_GetCmdResp1+0x14c>)
 80052ec:	fba4 4303 	umull	r4, r3, r4, r3
 80052f0:	0a5b      	lsrs	r3, r3, #9
 80052f2:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80052f6:	1e53      	subs	r3, r2, #1
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	d05e      	beq.n	80053ba <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80052fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 80052fe:	461a      	mov	r2, r3
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005300:	f014 0f45 	tst.w	r4, #69	; 0x45
 8005304:	d0f7      	beq.n	80052f6 <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005306:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005308:	f013 0f04 	tst.w	r3, #4
 800530c:	d107      	bne.n	800531e <SDMMC_GetCmdResp1+0x3a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800530e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005310:	f013 0f01 	tst.w	r3, #1
 8005314:	d007      	beq.n	8005326 <SDMMC_GetCmdResp1+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005316:	2301      	movs	r3, #1
 8005318:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800531a:	4618      	mov	r0, r3
 800531c:	e04f      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800531e:	2304      	movs	r3, #4
 8005320:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005322:	4618      	mov	r0, r3
 8005324:	e04b      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
 8005326:	460d      	mov	r5, r1
 8005328:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800532a:	f7ff ffbb 	bl	80052a4 <SDIO_GetCommandResponse>
 800532e:	42a8      	cmp	r0, r5
 8005330:	d001      	beq.n	8005336 <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005332:	2001      	movs	r0, #1
 8005334:	e043      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005336:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800533a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800533c:	2100      	movs	r1, #0
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff ffb4 	bl	80052ac <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005344:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <SDMMC_GetCmdResp1+0x150>)
 8005346:	4003      	ands	r3, r0
 8005348:	b3d3      	cbz	r3, 80053c0 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800534a:	2800      	cmp	r0, #0
 800534c:	db3a      	blt.n	80053c4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800534e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005352:	d13a      	bne.n	80053ca <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005354:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8005358:	d139      	bne.n	80053ce <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800535a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800535e:	d138      	bne.n	80053d2 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005360:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8005364:	d138      	bne.n	80053d8 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005366:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800536a:	d138      	bne.n	80053de <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800536c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005370:	d138      	bne.n	80053e4 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005372:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005376:	d138      	bne.n	80053ea <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005378:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800537c:	d138      	bne.n	80053f0 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800537e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8005382:	d138      	bne.n	80053f6 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005384:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005388:	d138      	bne.n	80053fc <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800538a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800538e:	d138      	bne.n	8005402 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005390:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8005394:	d138      	bne.n	8005408 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005396:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800539a:	d138      	bne.n	800540e <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800539c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80053a0:	d138      	bne.n	8005414 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80053a2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80053a6:	d138      	bne.n	800541a <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80053a8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80053ac:	d138      	bne.n	8005420 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80053ae:	f010 0f08 	tst.w	r0, #8
 80053b2:	d038      	beq.n	8005426 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80053b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053b8:	e001      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 80053ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80053be:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80053c0:	2000      	movs	r0, #0
 80053c2:	e7fc      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80053c8:	e7f9      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053ca:	2040      	movs	r0, #64	; 0x40
 80053cc:	e7f7      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80053ce:	2080      	movs	r0, #128	; 0x80
 80053d0:	e7f5      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053d6:	e7f2      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80053dc:	e7ef      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80053de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053e2:	e7ec      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80053e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053e8:	e7e9      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053ee:	e7e6      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80053f4:	e7e3      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80053f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80053fa:	e7e0      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 80053fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005400:	e7dd      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005402:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005406:	e7da      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005408:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800540c:	e7d7      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800540e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005412:	e7d4      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005414:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005418:	e7d1      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800541a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800541e:	e7ce      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8005420:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005424:	e7cb      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005426:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800542a:	e7c8      	b.n	80053be <SDMMC_GetCmdResp1+0xda>
 800542c:	20000000 	.word	0x20000000
 8005430:	10624dd3 	.word	0x10624dd3
 8005434:	fdffe008 	.word	0xfdffe008

08005438 <SDMMC_GetCmdResp6>:
{
 8005438:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800543a:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <SDMMC_GetCmdResp6+0x98>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4c25      	ldr	r4, [pc, #148]	; (80054d4 <SDMMC_GetCmdResp6+0x9c>)
 8005440:	fba4 4303 	umull	r4, r3, r4, r3
 8005444:	0a5c      	lsrs	r4, r3, #9
 8005446:	f241 3388 	movw	r3, #5000	; 0x1388
 800544a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 800544e:	1e5c      	subs	r4, r3, #1
 8005450:	b3a3      	cbz	r3, 80054bc <SDMMC_GetCmdResp6+0x84>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005452:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005454:	4623      	mov	r3, r4
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005456:	f015 0f45 	tst.w	r5, #69	; 0x45
 800545a:	d0f8      	beq.n	800544e <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800545c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800545e:	f013 0f04 	tst.w	r3, #4
 8005462:	d107      	bne.n	8005474 <SDMMC_GetCmdResp6+0x3c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005464:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005466:	f013 0f01 	tst.w	r3, #1
 800546a:	d007      	beq.n	800547c <SDMMC_GetCmdResp6+0x44>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800546c:	2301      	movs	r3, #1
 800546e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005470:	4618      	mov	r0, r3
 8005472:	e025      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005474:	2304      	movs	r3, #4
 8005476:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005478:	4618      	mov	r0, r3
 800547a:	e021      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
 800547c:	4616      	mov	r6, r2
 800547e:	460d      	mov	r5, r1
 8005480:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005482:	f7ff ff0f 	bl	80052a4 <SDIO_GetCommandResponse>
 8005486:	42a8      	cmp	r0, r5
 8005488:	d001      	beq.n	800548e <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800548a:	2001      	movs	r0, #1
 800548c:	e018      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800548e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005492:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005494:	2100      	movs	r1, #0
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff ff08 	bl	80052ac <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800549c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80054a0:	d008      	beq.n	80054b4 <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80054a2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80054a6:	d10c      	bne.n	80054c2 <SDMMC_GetCmdResp6+0x8a>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80054a8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80054ac:	d00c      	beq.n	80054c8 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054b2:	e005      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80054b4:	0c00      	lsrs	r0, r0, #16
 80054b6:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 80054b8:	2000      	movs	r0, #0
 80054ba:	e001      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
      return SDMMC_ERROR_TIMEOUT;
 80054bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80054c6:	e7fb      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80054cc:	e7f8      	b.n	80054c0 <SDMMC_GetCmdResp6+0x88>
 80054ce:	bf00      	nop
 80054d0:	20000000 	.word	0x20000000
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <SDIO_ConfigData>:
{
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	460c      	mov	r4, r1
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 80054de:	684b      	ldr	r3, [r1, #4]
 80054e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e4:	d23f      	bcs.n	8005566 <SDIO_ConfigData+0x8e>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	b1db      	cbz	r3, 8005522 <SDIO_ConfigData+0x4a>
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d019      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d017      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 80054f2:	2b30      	cmp	r3, #48	; 0x30
 80054f4:	d015      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d013      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 80054fa:	2b50      	cmp	r3, #80	; 0x50
 80054fc:	d011      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 80054fe:	2b60      	cmp	r3, #96	; 0x60
 8005500:	d00f      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 8005502:	2b70      	cmp	r3, #112	; 0x70
 8005504:	d00d      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d00b      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 800550a:	2b90      	cmp	r3, #144	; 0x90
 800550c:	d009      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 800550e:	2ba0      	cmp	r3, #160	; 0xa0
 8005510:	d007      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 8005512:	2bb0      	cmp	r3, #176	; 0xb0
 8005514:	d005      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 8005516:	2bc0      	cmp	r3, #192	; 0xc0
 8005518:	d003      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 800551a:	2bd0      	cmp	r3, #208	; 0xd0
 800551c:	d001      	beq.n	8005522 <SDIO_ConfigData+0x4a>
 800551e:	2be0      	cmp	r3, #224	; 0xe0
 8005520:	d127      	bne.n	8005572 <SDIO_ConfigData+0x9a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 8005522:	68e3      	ldr	r3, [r4, #12]
 8005524:	b10b      	cbz	r3, 800552a <SDIO_ConfigData+0x52>
 8005526:	2b02      	cmp	r3, #2
 8005528:	d129      	bne.n	800557e <SDIO_ConfigData+0xa6>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	b10b      	cbz	r3, 8005532 <SDIO_ConfigData+0x5a>
 800552e:	2b04      	cmp	r3, #4
 8005530:	d12b      	bne.n	800558a <SDIO_ConfigData+0xb2>
  assert_param(IS_SDIO_DPSM(Data->DPSM));
 8005532:	6963      	ldr	r3, [r4, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d904      	bls.n	8005542 <SDIO_ConfigData+0x6a>
 8005538:	f240 11bb 	movw	r1, #443	; 0x1bb
 800553c:	4816      	ldr	r0, [pc, #88]	; (8005598 <SDIO_ConfigData+0xc0>)
 800553e:	f7fb fc4e 	bl	8000dde <assert_failed>
  SDIOx->DTIMER = Data->DataTimeOut;
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	626b      	str	r3, [r5, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800554a:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 800554c:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800554e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8005550:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 8005552:	4313      	orrs	r3, r2
                       Data->DPSM);
 8005554:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8005556:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005558:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800555a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800555e:	4313      	orrs	r3, r2
 8005560:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8005562:	2000      	movs	r0, #0
 8005564:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8005566:	f240 11b7 	movw	r1, #439	; 0x1b7
 800556a:	480b      	ldr	r0, [pc, #44]	; (8005598 <SDIO_ConfigData+0xc0>)
 800556c:	f7fb fc37 	bl	8000dde <assert_failed>
 8005570:	e7b9      	b.n	80054e6 <SDIO_ConfigData+0xe>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 8005572:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005576:	4808      	ldr	r0, [pc, #32]	; (8005598 <SDIO_ConfigData+0xc0>)
 8005578:	f7fb fc31 	bl	8000dde <assert_failed>
 800557c:	e7d1      	b.n	8005522 <SDIO_ConfigData+0x4a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 800557e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8005582:	4805      	ldr	r0, [pc, #20]	; (8005598 <SDIO_ConfigData+0xc0>)
 8005584:	f7fb fc2b 	bl	8000dde <assert_failed>
 8005588:	e7cf      	b.n	800552a <SDIO_ConfigData+0x52>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 800558a:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800558e:	4802      	ldr	r0, [pc, #8]	; (8005598 <SDIO_ConfigData+0xc0>)
 8005590:	f7fb fc25 	bl	8000dde <assert_failed>
 8005594:	e7cd      	b.n	8005532 <SDIO_ConfigData+0x5a>
 8005596:	bf00      	nop
 8005598:	0800ed6c 	.word	0x0800ed6c

0800559c <SDMMC_CmdBlockLength>:
{
 800559c:	b530      	push	{r4, r5, lr}
 800559e:	b087      	sub	sp, #28
 80055a0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80055a2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80055a4:	2410      	movs	r4, #16
 80055a6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055ac:	2300      	movs	r3, #0
 80055ae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b6:	a901      	add	r1, sp, #4
 80055b8:	f7ff fe30 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7ff fe8e 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80055c8:	b007      	add	sp, #28
 80055ca:	bd30      	pop	{r4, r5, pc}

080055cc <SDMMC_CmdReadSingleBlock>:
{
 80055cc:	b530      	push	{r4, r5, lr}
 80055ce:	b087      	sub	sp, #28
 80055d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80055d4:	2411      	movs	r4, #17
 80055d6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055dc:	2300      	movs	r3, #0
 80055de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e6:	a901      	add	r1, sp, #4
 80055e8:	f7ff fe18 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f7ff fe76 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80055f8:	b007      	add	sp, #28
 80055fa:	bd30      	pop	{r4, r5, pc}

080055fc <SDMMC_CmdReadMultiBlock>:
{
 80055fc:	b530      	push	{r4, r5, lr}
 80055fe:	b087      	sub	sp, #28
 8005600:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005602:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005604:	2412      	movs	r4, #18
 8005606:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800560c:	2300      	movs	r3, #0
 800560e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005614:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005616:	a901      	add	r1, sp, #4
 8005618:	f7ff fe00 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f7ff fe5e 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 8005628:	b007      	add	sp, #28
 800562a:	bd30      	pop	{r4, r5, pc}

0800562c <SDMMC_CmdWriteSingleBlock>:
{
 800562c:	b530      	push	{r4, r5, lr}
 800562e:	b087      	sub	sp, #28
 8005630:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005632:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005634:	2418      	movs	r4, #24
 8005636:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005638:	2340      	movs	r3, #64	; 0x40
 800563a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800563c:	2300      	movs	r3, #0
 800563e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005644:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005646:	a901      	add	r1, sp, #4
 8005648:	f7ff fde8 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	f7ff fe46 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 8005658:	b007      	add	sp, #28
 800565a:	bd30      	pop	{r4, r5, pc}

0800565c <SDMMC_CmdWriteMultiBlock>:
{
 800565c:	b530      	push	{r4, r5, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005662:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005664:	2419      	movs	r4, #25
 8005666:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800566c:	2300      	movs	r3, #0
 800566e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005674:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005676:	a901      	add	r1, sp, #4
 8005678:	f7ff fdd0 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800567c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f7ff fe2e 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 8005688:	b007      	add	sp, #28
 800568a:	bd30      	pop	{r4, r5, pc}

0800568c <SDMMC_CmdStopTransfer>:
{
 800568c:	b530      	push	{r4, r5, lr}
 800568e:	b087      	sub	sp, #28
 8005690:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005696:	240c      	movs	r4, #12
 8005698:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800569e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056a6:	a901      	add	r1, sp, #4
 80056a8:	f7ff fdb8 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80056ac:	4a03      	ldr	r2, [pc, #12]	; (80056bc <SDMMC_CmdStopTransfer+0x30>)
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f7ff fe17 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80056b6:	b007      	add	sp, #28
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	05f5e100 	.word	0x05f5e100

080056c0 <SDMMC_CmdSelDesel>:
{
 80056c0:	b530      	push	{r4, r5, lr}
 80056c2:	b087      	sub	sp, #28
 80056c4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80056c6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80056c8:	2407      	movs	r4, #7
 80056ca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056d0:	2300      	movs	r3, #0
 80056d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d8:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056da:	a901      	add	r1, sp, #4
 80056dc:	f7ff fd9e 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7ff fdfc 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80056ec:	b007      	add	sp, #28
 80056ee:	bd30      	pop	{r4, r5, pc}

080056f0 <SDMMC_CmdGoIdleState>:
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80056fa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80056fc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005704:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005706:	a901      	add	r1, sp, #4
 8005708:	f7ff fd88 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fc6d 	bl	8004fec <SDMMC_GetCmdError>
}
 8005712:	b006      	add	sp, #24
 8005714:	bd10      	pop	{r4, pc}

08005716 <SDMMC_CmdOperCond>:
{
 8005716:	b510      	push	{r4, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800571c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005720:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005722:	2308      	movs	r3, #8
 8005724:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800572e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005732:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005734:	a901      	add	r1, sp, #4
 8005736:	f7ff fd71 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fcc8 	bl	80050d0 <SDMMC_GetCmdResp7>
}
 8005740:	b006      	add	sp, #24
 8005742:	bd10      	pop	{r4, pc}

08005744 <SDMMC_CmdAppCommand>:
{
 8005744:	b530      	push	{r4, r5, lr}
 8005746:	b087      	sub	sp, #28
 8005748:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800574a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800574c:	2437      	movs	r4, #55	; 0x37
 800574e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005754:	2300      	movs	r3, #0
 8005756:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800575c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800575e:	a901      	add	r1, sp, #4
 8005760:	f7ff fd5c 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f7ff fdba 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 8005770:	b007      	add	sp, #28
 8005772:	bd30      	pop	{r4, r5, pc}

08005774 <SDMMC_CmdAppOperCommand>:
{
 8005774:	b510      	push	{r4, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800577a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800577e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005782:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005784:	2329      	movs	r3, #41	; 0x29
 8005786:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005796:	a901      	add	r1, sp, #4
 8005798:	f7ff fd40 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff fc71 	bl	8005084 <SDMMC_GetCmdResp3>
}
 80057a2:	b006      	add	sp, #24
 80057a4:	bd10      	pop	{r4, pc}

080057a6 <SDMMC_CmdBusWidth>:
{
 80057a6:	b530      	push	{r4, r5, lr}
 80057a8:	b087      	sub	sp, #28
 80057aa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80057ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80057ae:	2406      	movs	r4, #6
 80057b0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b6:	2300      	movs	r3, #0
 80057b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057be:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c0:	a901      	add	r1, sp, #4
 80057c2:	f7ff fd2b 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7ff fd89 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80057d2:	b007      	add	sp, #28
 80057d4:	bd30      	pop	{r4, r5, pc}

080057d6 <SDMMC_CmdSendSCR>:
{
 80057d6:	b530      	push	{r4, r5, lr}
 80057d8:	b087      	sub	sp, #28
 80057da:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80057e0:	2433      	movs	r4, #51	; 0x33
 80057e2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e4:	2240      	movs	r2, #64	; 0x40
 80057e6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ee:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f0:	a901      	add	r1, sp, #4
 80057f2:	f7ff fd13 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f7ff fd71 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 8005802:	b007      	add	sp, #28
 8005804:	bd30      	pop	{r4, r5, pc}

08005806 <SDMMC_CmdSendCID>:
{
 8005806:	b510      	push	{r4, lr}
 8005808:	b086      	sub	sp, #24
 800580a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005810:	2202      	movs	r2, #2
 8005812:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005814:	22c0      	movs	r2, #192	; 0xc0
 8005816:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005818:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800581a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800581e:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005820:	a901      	add	r1, sp, #4
 8005822:	f7ff fcfb 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff fbfe 	bl	8005028 <SDMMC_GetCmdResp2>
}
 800582c:	b006      	add	sp, #24
 800582e:	bd10      	pop	{r4, pc}

08005830 <SDMMC_CmdSendCSD>:
{
 8005830:	b510      	push	{r4, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005836:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005838:	2309      	movs	r3, #9
 800583a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800583c:	23c0      	movs	r3, #192	; 0xc0
 800583e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005840:	2300      	movs	r3, #0
 8005842:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005848:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584a:	a901      	add	r1, sp, #4
 800584c:	f7ff fce6 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff fbe9 	bl	8005028 <SDMMC_GetCmdResp2>
}
 8005856:	b006      	add	sp, #24
 8005858:	bd10      	pop	{r4, pc}

0800585a <SDMMC_CmdSetRelAdd>:
{
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	b086      	sub	sp, #24
 800585e:	4605      	mov	r5, r0
 8005860:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005866:	2403      	movs	r4, #3
 8005868:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800586e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005874:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005876:	a901      	add	r1, sp, #4
 8005878:	f7ff fcd0 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800587c:	4632      	mov	r2, r6
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f7ff fdd9 	bl	8005438 <SDMMC_GetCmdResp6>
}
 8005886:	b006      	add	sp, #24
 8005888:	bd70      	pop	{r4, r5, r6, pc}

0800588a <SDMMC_CmdSendStatus>:
{
 800588a:	b530      	push	{r4, r5, lr}
 800588c:	b087      	sub	sp, #28
 800588e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005890:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005892:	240d      	movs	r4, #13
 8005894:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800589a:	2300      	movs	r3, #0
 800589c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800589e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	f7ff fcb9 	bl	800521c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4621      	mov	r1, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	f7ff fd17 	bl	80052e4 <SDMMC_GetCmdResp1>
}
 80058b6:	b007      	add	sp, #28
 80058b8:	bd30      	pop	{r4, r5, pc}
	...

080058bc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 80058c2:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <LL_SPI_Init+0x170>)
 80058c4:	4298      	cmp	r0, r3
 80058c6:	d00b      	beq.n	80058e0 <LL_SPI_Init+0x24>
 80058c8:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 80058cc:	4298      	cmp	r0, r3
 80058ce:	d007      	beq.n	80058e0 <LL_SPI_Init+0x24>
 80058d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d4:	4298      	cmp	r0, r3
 80058d6:	d003      	beq.n	80058e0 <LL_SPI_Init+0x24>
 80058d8:	21c7      	movs	r1, #199	; 0xc7
 80058da:	4855      	ldr	r0, [pc, #340]	; (8005a30 <LL_SPI_Init+0x174>)
 80058dc:	f7fb fa7f 	bl	8000dde <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	b143      	cbz	r3, 80058f6 <LL_SPI_Init+0x3a>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d005      	beq.n	80058f6 <LL_SPI_Init+0x3a>
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d002      	beq.n	80058f6 <LL_SPI_Init+0x3a>
 80058f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058f4:	d15c      	bne.n	80059b0 <LL_SPI_Init+0xf4>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fc:	d001      	beq.n	8005902 <LL_SPI_Init+0x46>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d15b      	bne.n	80059ba <LL_SPI_Init+0xfe>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	b113      	cbz	r3, 800590c <LL_SPI_Init+0x50>
 8005906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590a:	d15b      	bne.n	80059c4 <LL_SPI_Init+0x108>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 800590c:	68e3      	ldr	r3, [r4, #12]
 800590e:	b10b      	cbz	r3, 8005914 <LL_SPI_Init+0x58>
 8005910:	2b02      	cmp	r3, #2
 8005912:	d15c      	bne.n	80059ce <LL_SPI_Init+0x112>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d85e      	bhi.n	80059d8 <LL_SPI_Init+0x11c>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 800591a:	6963      	ldr	r3, [r4, #20]
 800591c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005920:	d003      	beq.n	800592a <LL_SPI_Init+0x6e>
 8005922:	b113      	cbz	r3, 800592a <LL_SPI_Init+0x6e>
 8005924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005928:	d15b      	bne.n	80059e2 <LL_SPI_Init+0x126>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	b16b      	cbz	r3, 800594a <LL_SPI_Init+0x8e>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d00b      	beq.n	800594a <LL_SPI_Init+0x8e>
 8005932:	2b10      	cmp	r3, #16
 8005934:	d009      	beq.n	800594a <LL_SPI_Init+0x8e>
 8005936:	2b18      	cmp	r3, #24
 8005938:	d007      	beq.n	800594a <LL_SPI_Init+0x8e>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d005      	beq.n	800594a <LL_SPI_Init+0x8e>
 800593e:	2b28      	cmp	r3, #40	; 0x28
 8005940:	d003      	beq.n	800594a <LL_SPI_Init+0x8e>
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d001      	beq.n	800594a <LL_SPI_Init+0x8e>
 8005946:	2b38      	cmp	r3, #56	; 0x38
 8005948:	d150      	bne.n	80059ec <LL_SPI_Init+0x130>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 800594a:	69e3      	ldr	r3, [r4, #28]
 800594c:	2b80      	cmp	r3, #128	; 0x80
 800594e:	d001      	beq.n	8005954 <LL_SPI_Init+0x98>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d150      	bne.n	80059f6 <LL_SPI_Init+0x13a>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8005954:	6a23      	ldr	r3, [r4, #32]
 8005956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595a:	d001      	beq.n	8005960 <LL_SPI_Init+0xa4>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d14f      	bne.n	8005a00 <LL_SPI_Init+0x144>
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8005960:	682b      	ldr	r3, [r5, #0]

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005962:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005966:	d15b      	bne.n	8005a20 <LL_SPI_Init+0x164>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005968:	682a      	ldr	r2, [r5, #0]
 800596a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800596e:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	430b      	orrs	r3, r1
 8005978:	68a1      	ldr	r1, [r4, #8]
 800597a:	430b      	orrs	r3, r1
 800597c:	68e1      	ldr	r1, [r4, #12]
 800597e:	430b      	orrs	r3, r1
 8005980:	6921      	ldr	r1, [r4, #16]
 8005982:	430b      	orrs	r3, r1
 8005984:	6961      	ldr	r1, [r4, #20]
 8005986:	430b      	orrs	r3, r1
 8005988:	69a1      	ldr	r1, [r4, #24]
 800598a:	430b      	orrs	r3, r1
 800598c:	69e1      	ldr	r1, [r4, #28]
 800598e:	430b      	orrs	r3, r1
 8005990:	6a21      	ldr	r1, [r4, #32]
 8005992:	430b      	orrs	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	602b      	str	r3, [r5, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005998:	686b      	ldr	r3, [r5, #4]
 800599a:	f023 0304 	bic.w	r3, r3, #4
 800599e:	8ae2      	ldrh	r2, [r4, #22]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	606b      	str	r3, [r5, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80059a4:	6a23      	ldr	r3, [r4, #32]
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	d02e      	beq.n	8005a0a <LL_SPI_Init+0x14e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80059ac:	2001      	movs	r0, #1
 80059ae:	e038      	b.n	8005a22 <LL_SPI_Init+0x166>
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 80059b0:	21ca      	movs	r1, #202	; 0xca
 80059b2:	481f      	ldr	r0, [pc, #124]	; (8005a30 <LL_SPI_Init+0x174>)
 80059b4:	f7fb fa13 	bl	8000dde <assert_failed>
 80059b8:	e79d      	b.n	80058f6 <LL_SPI_Init+0x3a>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 80059ba:	21cb      	movs	r1, #203	; 0xcb
 80059bc:	481c      	ldr	r0, [pc, #112]	; (8005a30 <LL_SPI_Init+0x174>)
 80059be:	f7fb fa0e 	bl	8000dde <assert_failed>
 80059c2:	e79e      	b.n	8005902 <LL_SPI_Init+0x46>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 80059c4:	21cc      	movs	r1, #204	; 0xcc
 80059c6:	481a      	ldr	r0, [pc, #104]	; (8005a30 <LL_SPI_Init+0x174>)
 80059c8:	f7fb fa09 	bl	8000dde <assert_failed>
 80059cc:	e79e      	b.n	800590c <LL_SPI_Init+0x50>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 80059ce:	21cd      	movs	r1, #205	; 0xcd
 80059d0:	4817      	ldr	r0, [pc, #92]	; (8005a30 <LL_SPI_Init+0x174>)
 80059d2:	f7fb fa04 	bl	8000dde <assert_failed>
 80059d6:	e79d      	b.n	8005914 <LL_SPI_Init+0x58>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 80059d8:	21ce      	movs	r1, #206	; 0xce
 80059da:	4815      	ldr	r0, [pc, #84]	; (8005a30 <LL_SPI_Init+0x174>)
 80059dc:	f7fb f9ff 	bl	8000dde <assert_failed>
 80059e0:	e79b      	b.n	800591a <LL_SPI_Init+0x5e>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 80059e2:	21cf      	movs	r1, #207	; 0xcf
 80059e4:	4812      	ldr	r0, [pc, #72]	; (8005a30 <LL_SPI_Init+0x174>)
 80059e6:	f7fb f9fa 	bl	8000dde <assert_failed>
 80059ea:	e79e      	b.n	800592a <LL_SPI_Init+0x6e>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 80059ec:	21d0      	movs	r1, #208	; 0xd0
 80059ee:	4810      	ldr	r0, [pc, #64]	; (8005a30 <LL_SPI_Init+0x174>)
 80059f0:	f7fb f9f5 	bl	8000dde <assert_failed>
 80059f4:	e7a9      	b.n	800594a <LL_SPI_Init+0x8e>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 80059f6:	21d1      	movs	r1, #209	; 0xd1
 80059f8:	480d      	ldr	r0, [pc, #52]	; (8005a30 <LL_SPI_Init+0x174>)
 80059fa:	f7fb f9f0 	bl	8000dde <assert_failed>
 80059fe:	e7a9      	b.n	8005954 <LL_SPI_Init+0x98>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8005a00:	21d2      	movs	r1, #210	; 0xd2
 8005a02:	480b      	ldr	r0, [pc, #44]	; (8005a30 <LL_SPI_Init+0x174>)
 8005a04:	f7fb f9eb 	bl	8000dde <assert_failed>
 8005a08:	e7aa      	b.n	8005960 <LL_SPI_Init+0xa4>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8005a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0c:	b11b      	cbz	r3, 8005a16 <LL_SPI_Init+0x15a>
 8005a0e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005a10:	612b      	str	r3, [r5, #16]
    status = SUCCESS;
 8005a12:	2001      	movs	r0, #1
 8005a14:	e005      	b.n	8005a22 <LL_SPI_Init+0x166>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8005a16:	21f5      	movs	r1, #245	; 0xf5
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <LL_SPI_Init+0x174>)
 8005a1a:	f7fb f9e0 	bl	8000dde <assert_failed>
 8005a1e:	e7f6      	b.n	8005a0e <LL_SPI_Init+0x152>
  ErrorStatus status = ERROR;
 8005a20:	2000      	movs	r0, #0
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a22:	69eb      	ldr	r3, [r5, #28]
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a28:	61eb      	str	r3, [r5, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	40013000 	.word	0x40013000
 8005a30:	0800eda8 	.word	0x0800eda8

08005a34 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
  uint32_t tmpcr1 = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 8005a3a:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <LL_TIM_Init+0x11c>)
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	d01f      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	4298      	cmp	r0, r3
 8005a46:	d01b      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a4c:	d018      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a4e:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8005a52:	4298      	cmp	r0, r3
 8005a54:	d014      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	d010      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	4298      	cmp	r0, r3
 8005a64:	d00c      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	d008      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	4298      	cmp	r0, r3
 8005a74:	d004      	beq.n	8005a80 <LL_TIM_Init+0x4c>
 8005a76:	f240 1159 	movw	r1, #345	; 0x159
 8005a7a:	4836      	ldr	r0, [pc, #216]	; (8005b54 <LL_TIM_Init+0x120>)
 8005a7c:	f7fb f9af 	bl	8000dde <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8005a80:	686b      	ldr	r3, [r5, #4]
 8005a82:	b13b      	cbz	r3, 8005a94 <LL_TIM_Init+0x60>
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d005      	beq.n	8005a94 <LL_TIM_Init+0x60>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d003      	beq.n	8005a94 <LL_TIM_Init+0x60>
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d001      	beq.n	8005a94 <LL_TIM_Init+0x60>
 8005a90:	2b60      	cmp	r3, #96	; 0x60
 8005a92:	d150      	bne.n	8005b36 <LL_TIM_Init+0x102>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8005a94:	68eb      	ldr	r3, [r5, #12]
 8005a96:	b12b      	cbz	r3, 8005aa4 <LL_TIM_Init+0x70>
 8005a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9c:	d002      	beq.n	8005aa4 <LL_TIM_Init+0x70>
 8005a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa2:	d14e      	bne.n	8005b42 <LL_TIM_Init+0x10e>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005aa4:	6823      	ldr	r3, [r4, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <LL_TIM_Init+0x11c>)
 8005aa8:	4294      	cmp	r4, r2
 8005aaa:	d012      	beq.n	8005ad2 <LL_TIM_Init+0x9e>
 8005aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab0:	4294      	cmp	r4, r2
 8005ab2:	d00e      	beq.n	8005ad2 <LL_TIM_Init+0x9e>
 8005ab4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005ab8:	d00b      	beq.n	8005ad2 <LL_TIM_Init+0x9e>
 8005aba:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005abe:	4294      	cmp	r4, r2
 8005ac0:	d007      	beq.n	8005ad2 <LL_TIM_Init+0x9e>
 8005ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac6:	4294      	cmp	r4, r2
 8005ac8:	d003      	beq.n	8005ad2 <LL_TIM_Init+0x9e>
 8005aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ace:	4294      	cmp	r4, r2
 8005ad0:	d103      	bne.n	8005ada <LL_TIM_Init+0xa6>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	686a      	ldr	r2, [r5, #4]
 8005ad8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ada:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <LL_TIM_Init+0x11c>)
 8005adc:	4294      	cmp	r4, r2
 8005ade:	d012      	beq.n	8005b06 <LL_TIM_Init+0xd2>
 8005ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae4:	4294      	cmp	r4, r2
 8005ae6:	d00e      	beq.n	8005b06 <LL_TIM_Init+0xd2>
 8005ae8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005aec:	d00b      	beq.n	8005b06 <LL_TIM_Init+0xd2>
 8005aee:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005af2:	4294      	cmp	r4, r2
 8005af4:	d007      	beq.n	8005b06 <LL_TIM_Init+0xd2>
 8005af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005afa:	4294      	cmp	r4, r2
 8005afc:	d003      	beq.n	8005b06 <LL_TIM_Init+0xd2>
 8005afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b02:	4294      	cmp	r4, r2
 8005b04:	d103      	bne.n	8005b0e <LL_TIM_Init+0xda>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0a:	68ea      	ldr	r2, [r5, #12]
 8005b0c:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005b0e:	6023      	str	r3, [r4, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005b10:	68ab      	ldr	r3, [r5, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005b12:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005b14:	882b      	ldrh	r3, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005b16:	62a3      	str	r3, [r4, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <LL_TIM_Init+0x11c>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d003      	beq.n	8005b26 <LL_TIM_Init+0xf2>
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d101      	bne.n	8005b2a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005b26:	7c2b      	ldrb	r3, [r5, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005b28:	6323      	str	r3, [r4, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005b2a:	6963      	ldr	r3, [r4, #20]
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6163      	str	r3, [r4, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8005b32:	2001      	movs	r0, #1
 8005b34:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8005b36:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005b3a:	4806      	ldr	r0, [pc, #24]	; (8005b54 <LL_TIM_Init+0x120>)
 8005b3c:	f7fb f94f 	bl	8000dde <assert_failed>
 8005b40:	e7a8      	b.n	8005a94 <LL_TIM_Init+0x60>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8005b42:	f240 115b 	movw	r1, #347	; 0x15b
 8005b46:	4803      	ldr	r0, [pc, #12]	; (8005b54 <LL_TIM_Init+0x120>)
 8005b48:	f7fb f949 	bl	8000dde <assert_failed>
 8005b4c:	e7aa      	b.n	8005aa4 <LL_TIM_Init+0x70>
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	0800ede0 	.word	0x0800ede0

08005b58 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005b58:	b530      	push	{r4, r5, lr}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8005b60:	4b63      	ldr	r3, [pc, #396]	; (8005cf0 <LL_USART_Init+0x198>)
 8005b62:	4298      	cmp	r0, r3
 8005b64:	d013      	beq.n	8005b8e <LL_USART_Init+0x36>
 8005b66:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	d00f      	beq.n	8005b8e <LL_USART_Init+0x36>
 8005b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b72:	4298      	cmp	r0, r3
 8005b74:	d00b      	beq.n	8005b8e <LL_USART_Init+0x36>
 8005b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	d007      	beq.n	8005b8e <LL_USART_Init+0x36>
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	4298      	cmp	r0, r3
 8005b84:	d003      	beq.n	8005b8e <LL_USART_Init+0x36>
 8005b86:	21da      	movs	r1, #218	; 0xda
 8005b88:	485a      	ldr	r0, [pc, #360]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005b8a:	f7fb f928 	bl	8000dde <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	4b59      	ldr	r3, [pc, #356]	; (8005cf8 <LL_USART_Init+0x1a0>)
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d831      	bhi.n	8005bfa <LL_USART_Init+0xa2>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	b113      	cbz	r3, 8005ba0 <LL_USART_Init+0x48>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d131      	bne.n	8005c04 <LL_USART_Init+0xac>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8005ba0:	68a3      	ldr	r3, [r4, #8]
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d006      	beq.n	8005bb6 <LL_USART_Init+0x5e>
 8005ba8:	b12b      	cbz	r3, 8005bb6 <LL_USART_Init+0x5e>
 8005baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bae:	d002      	beq.n	8005bb6 <LL_USART_Init+0x5e>
 8005bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb4:	d12b      	bne.n	8005c0e <LL_USART_Init+0xb6>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	b12b      	cbz	r3, 8005bc6 <LL_USART_Init+0x6e>
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbe:	d002      	beq.n	8005bc6 <LL_USART_Init+0x6e>
 8005bc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bc4:	d128      	bne.n	8005c18 <LL_USART_Init+0xc0>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	b12b      	cbz	r3, 8005bd6 <LL_USART_Init+0x7e>
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d003      	beq.n	8005bd6 <LL_USART_Init+0x7e>
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d001      	beq.n	8005bd6 <LL_USART_Init+0x7e>
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d125      	bne.n	8005c22 <LL_USART_Init+0xca>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8005bd6:	6963      	ldr	r3, [r4, #20]
 8005bd8:	b143      	cbz	r3, 8005bec <LL_USART_Init+0x94>
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bde:	d005      	beq.n	8005bec <LL_USART_Init+0x94>
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be4:	d002      	beq.n	8005bec <LL_USART_Init+0x94>
 8005be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bea:	d11f      	bne.n	8005c2c <LL_USART_Init+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005bec:	68eb      	ldr	r3, [r5, #12]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005bee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005bf2:	d020      	beq.n	8005c36 <LL_USART_Init+0xde>
  ErrorStatus status = ERROR;
 8005bf4:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005bf6:	b005      	add	sp, #20
 8005bf8:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8005bfa:	21db      	movs	r1, #219	; 0xdb
 8005bfc:	483d      	ldr	r0, [pc, #244]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005bfe:	f7fb f8ee 	bl	8000dde <assert_failed>
 8005c02:	e7c8      	b.n	8005b96 <LL_USART_Init+0x3e>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8005c04:	21dc      	movs	r1, #220	; 0xdc
 8005c06:	483b      	ldr	r0, [pc, #236]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005c08:	f7fb f8e9 	bl	8000dde <assert_failed>
 8005c0c:	e7c8      	b.n	8005ba0 <LL_USART_Init+0x48>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8005c0e:	21dd      	movs	r1, #221	; 0xdd
 8005c10:	4838      	ldr	r0, [pc, #224]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005c12:	f7fb f8e4 	bl	8000dde <assert_failed>
 8005c16:	e7ce      	b.n	8005bb6 <LL_USART_Init+0x5e>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8005c18:	21de      	movs	r1, #222	; 0xde
 8005c1a:	4836      	ldr	r0, [pc, #216]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005c1c:	f7fb f8df 	bl	8000dde <assert_failed>
 8005c20:	e7d1      	b.n	8005bc6 <LL_USART_Init+0x6e>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8005c22:	21df      	movs	r1, #223	; 0xdf
 8005c24:	4833      	ldr	r0, [pc, #204]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005c26:	f7fb f8da 	bl	8000dde <assert_failed>
 8005c2a:	e7d4      	b.n	8005bd6 <LL_USART_Init+0x7e>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8005c2c:	21e0      	movs	r1, #224	; 0xe0
 8005c2e:	4831      	ldr	r0, [pc, #196]	; (8005cf4 <LL_USART_Init+0x19c>)
 8005c30:	f7fb f8d5 	bl	8000dde <assert_failed>
 8005c34:	e7da      	b.n	8005bec <LL_USART_Init+0x94>
    MODIFY_REG(USARTx->CR1,
 8005c36:	68eb      	ldr	r3, [r5, #12]
 8005c38:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c3c:	f023 030c 	bic.w	r3, r3, #12
 8005c40:	6862      	ldr	r2, [r4, #4]
 8005c42:	68e1      	ldr	r1, [r4, #12]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60eb      	str	r3, [r5, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005c4e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005c50:	692a      	ldr	r2, [r5, #16]
 8005c52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005c56:	4313      	orrs	r3, r2
 8005c58:	612b      	str	r3, [r5, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005c5a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005c5c:	696a      	ldr	r2, [r5, #20]
 8005c5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c62:	4313      	orrs	r3, r2
 8005c64:	616b      	str	r3, [r5, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005c66:	4668      	mov	r0, sp
 8005c68:	f7ff f812 	bl	8004c90 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005c6c:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <LL_USART_Init+0x198>)
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	d00d      	beq.n	8005c8e <LL_USART_Init+0x136>
    else if (USARTx == USART2)
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <LL_USART_Init+0x1a4>)
 8005c74:	429d      	cmp	r5, r3
 8005c76:	d02f      	beq.n	8005cd8 <LL_USART_Init+0x180>
    else if (USARTx == USART3)
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <LL_USART_Init+0x1a8>)
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	d02e      	beq.n	8005cdc <LL_USART_Init+0x184>
    else if (USARTx == UART4)
 8005c7e:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <LL_USART_Init+0x1ac>)
 8005c80:	429d      	cmp	r5, r3
 8005c82:	d02d      	beq.n	8005ce0 <LL_USART_Init+0x188>
    else if (USARTx == UART5)
 8005c84:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <LL_USART_Init+0x1b0>)
 8005c86:	429d      	cmp	r5, r3
 8005c88:	d02c      	beq.n	8005ce4 <LL_USART_Init+0x18c>
  ErrorStatus status = ERROR;
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e7b3      	b.n	8005bf6 <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005c8e:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005c90:	b353      	cbz	r3, 8005ce8 <LL_USART_Init+0x190>
        && (USART_InitStruct->BaudRate != 0U))
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	b352      	cbz	r2, 8005cec <LL_USART_Init+0x194>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005c96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca4:	4c19      	ldr	r4, [pc, #100]	; (8005d0c <LL_USART_Init+0x1b4>)
 8005ca6:	fba4 2003 	umull	r2, r0, r4, r3
 8005caa:	0940      	lsrs	r0, r0, #5
 8005cac:	0102      	lsls	r2, r0, #4
 8005cae:	b291      	uxth	r1, r2
 8005cb0:	2264      	movs	r2, #100	; 0x64
 8005cb2:	fb02 3210 	mls	r2, r2, r0, r3
 8005cb6:	0113      	lsls	r3, r2, #4
 8005cb8:	3332      	adds	r3, #50	; 0x32
 8005cba:	fba4 2303 	umull	r2, r3, r4, r3
 8005cbe:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005cc2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cc6:	440a      	add	r2, r1
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	4413      	add	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	60ab      	str	r3, [r5, #8]
      status = SUCCESS;
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e78e      	b.n	8005bf6 <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	e7d9      	b.n	8005c90 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	e7d7      	b.n	8005c90 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	e7d5      	b.n	8005c90 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	e7d3      	b.n	8005c90 <LL_USART_Init+0x138>
  ErrorStatus status = ERROR;
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e784      	b.n	8005bf6 <LL_USART_Init+0x9e>
 8005cec:	2000      	movs	r0, #0
 8005cee:	e782      	b.n	8005bf6 <LL_USART_Init+0x9e>
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	0800ee18 	.word	0x0800ee18
 8005cf8:	00989680 	.word	0x00989680
 8005cfc:	40004400 	.word	0x40004400
 8005d00:	40004800 	.word	0x40004800
 8005d04:	40004c00 	.word	0x40004c00
 8005d08:	40005000 	.word	0x40005000
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d10:	b084      	sub	sp, #16
 8005d12:	a801      	add	r0, sp, #4
 8005d14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005d18:	2000      	movs	r0, #0
 8005d1a:	b004      	add	sp, #16
 8005d1c:	4770      	bx	lr

08005d1e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005d1e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005d22:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8005d26:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	4770      	bx	lr

08005d2e <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005d2e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005d32:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8005d36:	045b      	lsls	r3, r3, #17
 8005d38:	0c5b      	lsrs	r3, r3, #17
 8005d3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8005d3e:	2000      	movs	r0, #0
 8005d40:	4770      	bx	lr

08005d42 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005d42:	2000      	movs	r0, #0
 8005d44:	4770      	bx	lr

08005d46 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d46:	b084      	sub	sp, #16
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	ac05      	add	r4, sp, #20
 8005d4c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005d56:	2400      	movs	r4, #0
 8005d58:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005d5c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d60:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8005d64:	f7ff ffdb 	bl	8005d1e <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 8005d68:	4620      	mov	r0, r4
 8005d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d6e:	b004      	add	sp, #16
 8005d70:	4770      	bx	lr

08005d72 <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005d72:	2000      	movs	r0, #0
 8005d74:	4770      	bx	lr

08005d76 <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005d76:	2000      	movs	r0, #0
 8005d78:	4770      	bx	lr

08005d7a <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d7a:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8005d7c:	78cb      	ldrb	r3, [r1, #3]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d80f      	bhi.n	8005da2 <USB_ActivateEndpoint+0x28>
 8005d82:	e8df f003 	tbb	[pc, r3]
 8005d86:	6d02      	.short	0x6d02
 8005d88:	6054      	.short	0x6054
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8005d8a:	780a      	ldrb	r2, [r1, #0]
 8005d8c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005da2:	780a      	ldrb	r2, [r1, #0]
 8005da4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	0d1b      	lsrs	r3, r3, #20
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8005dbe:	7a8b      	ldrb	r3, [r1, #10]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 80af 	bne.w	8005f24 <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 8005dc6:	784b      	ldrb	r3, [r1, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d056      	beq.n	8005e7a <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dcc:	888a      	ldrh	r2, [r1, #4]
 8005dce:	0852      	lsrs	r2, r2, #1
 8005dd0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005dd4:	780c      	ldrb	r4, [r1, #0]
 8005dd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005dde:	0052      	lsls	r2, r2, #1
 8005de0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de4:	780a      	ldrb	r2, [r1, #0]
 8005de6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005dea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dee:	d00b      	beq.n	8005e08 <USB_ActivateEndpoint+0x8e>
 8005df0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df8:	051b      	lsls	r3, r3, #20
 8005dfa:	0d1b      	lsrs	r3, r3, #20
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8005e08:	780a      	ldrb	r2, [r1, #0]
 8005e0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e18:	f083 0320 	eor.w	r3, r3, #32
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	bc10      	pop	{r4}
 8005e2c:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8005e2e:	780a      	ldrb	r2, [r1, #0]
 8005e30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8005e44:	e7ad      	b.n	8005da2 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8005e46:	780a      	ldrb	r2, [r1, #0]
 8005e48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8005e5e:	e7a0      	b.n	8005da2 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8005e60:	780a      	ldrb	r2, [r1, #0]
 8005e62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8005e78:	e793      	b.n	8005da2 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e7a:	888a      	ldrh	r2, [r1, #4]
 8005e7c:	0852      	lsrs	r2, r2, #1
 8005e7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005e82:	780c      	ldrb	r4, [r1, #0]
 8005e84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e88:	3304      	adds	r3, #4
 8005e8a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005e8e:	0052      	lsls	r2, r2, #1
 8005e90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005e98:	780a      	ldrb	r2, [r1, #0]
 8005e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e9e:	3306      	adds	r3, #6
 8005ea0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005ea4:	690c      	ldr	r4, [r1, #16]
 8005ea6:	2c3e      	cmp	r4, #62	; 0x3e
 8005ea8:	d930      	bls.n	8005f0c <USB_ActivateEndpoint+0x192>
 8005eaa:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8005eae:	f014 0f1f 	tst.w	r4, #31
 8005eb2:	d101      	bne.n	8005eb8 <USB_ActivateEndpoint+0x13e>
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8005ebc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005ec0:	b292      	uxth	r2, r2
 8005ec2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec6:	780a      	ldrb	r2, [r1, #0]
 8005ec8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ecc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005ed0:	d00b      	beq.n	8005eea <USB_ActivateEndpoint+0x170>
 8005ed2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eda:	051b      	lsls	r3, r3, #20
 8005edc:	0d1b      	lsrs	r3, r3, #20
 8005ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eea:	780a      	ldrb	r2, [r1, #0]
 8005eec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005f0a:	e78d      	b.n	8005e28 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f0c:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8005f10:	f014 0f01 	tst.w	r4, #1
 8005f14:	d001      	beq.n	8005f1a <USB_ActivateEndpoint+0x1a0>
 8005f16:	3201      	adds	r2, #1
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	0292      	lsls	r2, r2, #10
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8005f22:	e7d0      	b.n	8005ec6 <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f24:	780a      	ldrb	r2, [r1, #0]
 8005f26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f2a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8005f2e:	051b      	lsls	r3, r3, #20
 8005f30:	0d1b      	lsrs	r3, r3, #20
 8005f32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8005f3e:	88ca      	ldrh	r2, [r1, #6]
 8005f40:	0852      	lsrs	r2, r2, #1
 8005f42:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005f46:	780c      	ldrb	r4, [r1, #0]
 8005f48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f50:	0052      	lsls	r2, r2, #1
 8005f52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8005f56:	890a      	ldrh	r2, [r1, #8]
 8005f58:	0852      	lsrs	r2, r2, #1
 8005f5a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005f5e:	780c      	ldrb	r4, [r1, #0]
 8005f60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f64:	3304      	adds	r3, #4
 8005f66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005f6a:	0052      	lsls	r2, r2, #1
 8005f6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 8005f70:	784b      	ldrb	r3, [r1, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d14b      	bne.n	800600e <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f76:	780a      	ldrb	r2, [r1, #0]
 8005f78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f7c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005f80:	d00b      	beq.n	8005f9a <USB_ActivateEndpoint+0x220>
 8005f82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	0d1b      	lsrs	r3, r3, #20
 8005f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9a:	780a      	ldrb	r2, [r1, #0]
 8005f9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fa0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fa4:	d00b      	beq.n	8005fbe <USB_ActivateEndpoint+0x244>
 8005fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fae:	051b      	lsls	r3, r3, #20
 8005fb0:	0d1b      	lsrs	r3, r3, #20
 8005fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005fbe:	780a      	ldrb	r2, [r1, #0]
 8005fc0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc8:	051b      	lsls	r3, r3, #20
 8005fca:	0d1b      	lsrs	r3, r3, #20
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd8:	780a      	ldrb	r2, [r1, #0]
 8005fda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005fec:	f248 0480 	movw	r4, #32896	; 0x8080
 8005ff0:	4323      	orrs	r3, r4
 8005ff2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ff6:	780a      	ldrb	r2, [r1, #0]
 8005ff8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006006:	4323      	orrs	r3, r4
 8006008:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800600c:	e70c      	b.n	8005e28 <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600e:	780a      	ldrb	r2, [r1, #0]
 8006010:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006014:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006018:	d00b      	beq.n	8006032 <USB_ActivateEndpoint+0x2b8>
 800601a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800601e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006022:	051b      	lsls	r3, r3, #20
 8006024:	0d1b      	lsrs	r3, r3, #20
 8006026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006032:	780a      	ldrb	r2, [r1, #0]
 8006034:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800603c:	d00b      	beq.n	8006056 <USB_ActivateEndpoint+0x2dc>
 800603e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006046:	051b      	lsls	r3, r3, #20
 8006048:	0d1b      	lsrs	r3, r3, #20
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006052:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006056:	780a      	ldrb	r2, [r1, #0]
 8006058:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800605c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	0d1b      	lsrs	r3, r3, #20
 8006064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006070:	780b      	ldrb	r3, [r1, #0]
 8006072:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006076:	b292      	uxth	r2, r2
 8006078:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800607c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006080:	f248 0480 	movw	r4, #32896	; 0x8080
 8006084:	4322      	orrs	r2, r4
 8006086:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800608a:	780a      	ldrb	r2, [r1, #0]
 800608c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	4323      	orrs	r3, r4
 800609c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80060a0:	e6c2      	b.n	8005e28 <USB_ActivateEndpoint+0xae>

080060a2 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 80060a2:	7a8b      	ldrb	r3, [r1, #10]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d144      	bne.n	8006132 <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 80060a8:	784b      	ldrb	r3, [r1, #1]
 80060aa:	b30b      	cbz	r3, 80060f0 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ac:	780a      	ldrb	r2, [r1, #0]
 80060ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060b6:	d00b      	beq.n	80060d0 <USB_DeactivateEndpoint+0x2e>
 80060b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	0d1b      	lsrs	r3, r3, #20
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80060d0:	780a      	ldrb	r2, [r1, #0]
 80060d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f0:	780a      	ldrb	r2, [r1, #0]
 80060f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80060fa:	d00b      	beq.n	8006114 <USB_DeactivateEndpoint+0x72>
 80060fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006104:	051b      	lsls	r3, r3, #20
 8006106:	0d1b      	lsrs	r3, r3, #20
 8006108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006114:	780a      	ldrb	r2, [r1, #0]
 8006116:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006130:	e7dc      	b.n	80060ec <USB_DeactivateEndpoint+0x4a>
{
 8006132:	b410      	push	{r4}
    if (ep->is_in==0)
 8006134:	784b      	ldrb	r3, [r1, #1]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d14b      	bne.n	80061d2 <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800613a:	780a      	ldrb	r2, [r1, #0]
 800613c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006140:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006144:	d00b      	beq.n	800615e <USB_DeactivateEndpoint+0xbc>
 8006146:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614e:	051b      	lsls	r3, r3, #20
 8006150:	0d1b      	lsrs	r3, r3, #20
 8006152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800615e:	780a      	ldrb	r2, [r1, #0]
 8006160:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006164:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006168:	d00b      	beq.n	8006182 <USB_DeactivateEndpoint+0xe0>
 800616a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800616e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006172:	051b      	lsls	r3, r3, #20
 8006174:	0d1b      	lsrs	r3, r3, #20
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800617e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006182:	780a      	ldrb	r2, [r1, #0]
 8006184:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618c:	051b      	lsls	r3, r3, #20
 800618e:	0d1b      	lsrs	r3, r3, #20
 8006190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006198:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800619c:	780b      	ldrb	r3, [r1, #0]
 800619e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80061a2:	b292      	uxth	r2, r2
 80061a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061ac:	f248 0480 	movw	r4, #32896	; 0x8080
 80061b0:	4322      	orrs	r2, r4
 80061b2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b6:	780a      	ldrb	r2, [r1, #0]
 80061b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	4323      	orrs	r3, r4
 80061c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80061cc:	2000      	movs	r0, #0
 80061ce:	bc10      	pop	{r4}
 80061d0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061d2:	780a      	ldrb	r2, [r1, #0]
 80061d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80061dc:	d00b      	beq.n	80061f6 <USB_DeactivateEndpoint+0x154>
 80061de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	051b      	lsls	r3, r3, #20
 80061e8:	0d1b      	lsrs	r3, r3, #20
 80061ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f6:	780a      	ldrb	r2, [r1, #0]
 80061f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006200:	d00b      	beq.n	800621a <USB_DeactivateEndpoint+0x178>
 8006202:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	0d1b      	lsrs	r3, r3, #20
 800620e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006212:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006216:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800621a:	780a      	ldrb	r2, [r1, #0]
 800621c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006224:	051b      	lsls	r3, r3, #20
 8006226:	0d1b      	lsrs	r3, r3, #20
 8006228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006230:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006234:	780b      	ldrb	r3, [r1, #0]
 8006236:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800623a:	b292      	uxth	r2, r2
 800623c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006244:	f248 0480 	movw	r4, #32896	; 0x8080
 8006248:	4322      	orrs	r2, r4
 800624a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624e:	780a      	ldrb	r2, [r1, #0]
 8006250:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	4323      	orrs	r3, r4
 8006260:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006264:	e7b2      	b.n	80061cc <USB_DeactivateEndpoint+0x12a>

08006266 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8006266:	780a      	ldrb	r2, [r1, #0]
 8006268:	b18a      	cbz	r2, 800628e <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 800626a:	784b      	ldrb	r3, [r1, #1]
 800626c:	bb13      	cbnz	r3, 80062b4 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800626e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800628c:	e010      	b.n	80062b0 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800628e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a0:	f083 0310 	eor.w	r3, r3, #16
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 80062b0:	2000      	movs	r0, #0
 80062b2:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80062b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c2:	f083 0310 	eor.w	r3, r3, #16
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80062d2:	e7ed      	b.n	80062b0 <USB_EPSetStall+0x4a>

080062d4 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80062d4:	784b      	ldrb	r3, [r1, #1]
 80062d6:	b31b      	cbz	r3, 8006320 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062d8:	780a      	ldrb	r2, [r1, #0]
 80062da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062e2:	d00b      	beq.n	80062fc <USB_EPClearStall+0x28>
 80062e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ec:	051b      	lsls	r3, r3, #20
 80062ee:	0d1b      	lsrs	r3, r3, #20
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062fc:	780a      	ldrb	r2, [r1, #0]
 80062fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 800631c:	2000      	movs	r0, #0
 800631e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006320:	780a      	ldrb	r2, [r1, #0]
 8006322:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006326:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800632a:	d00b      	beq.n	8006344 <USB_EPClearStall+0x70>
 800632c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006334:	051b      	lsls	r3, r3, #20
 8006336:	0d1b      	lsrs	r3, r3, #20
 8006338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006344:	780a      	ldrb	r2, [r1, #0]
 8006346:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006364:	e7da      	b.n	800631c <USB_EPClearStall+0x48>

08006366 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8006366:	b911      	cbnz	r1, 800636e <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 800636e:	2000      	movs	r0, #0
 8006370:	4770      	bx	lr

08006372 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006372:	2000      	movs	r0, #0
 8006374:	4770      	bx	lr

08006376 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006376:	2000      	movs	r0, #0
 8006378:	4770      	bx	lr

0800637a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800637a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800637e:	4770      	bx	lr

08006380 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006380:	2000      	movs	r0, #0
 8006382:	4770      	bx	lr

08006384 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8006384:	3301      	adds	r3, #1
 8006386:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8006388:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800638c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8006390:	b163      	cbz	r3, 80063ac <USB_WritePMA+0x28>
{
 8006392:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8006394:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8006396:	7848      	ldrb	r0, [r1, #1]
 8006398:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 800639c:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 80063a0:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 80063a2:	3b01      	subs	r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f5      	bne.n	8006394 <USB_WritePMA+0x10>
  }
}
 80063a8:	bc10      	pop	{r4}
 80063aa:	4770      	bx	lr
 80063ac:	4770      	bx	lr

080063ae <USB_EPStartXfer>:
{
 80063ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 80063b0:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 80063b2:	784d      	ldrb	r5, [r1, #1]
 80063b4:	2d01      	cmp	r5, #1
 80063b6:	d034      	beq.n	8006422 <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 80063b8:	690b      	ldr	r3, [r1, #16]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f080 80ea 	bcs.w	8006594 <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 80063c0:	1ad2      	subs	r2, r2, r3
 80063c2:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 80063c4:	7a8a      	ldrb	r2, [r1, #10]
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	f040 80f4 	bne.w	80065b4 <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80063cc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80063d0:	780c      	ldrb	r4, [r1, #0]
 80063d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80063d6:	3206      	adds	r2, #6
 80063d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80063dc:	2b3e      	cmp	r3, #62	; 0x3e
 80063de:	f240 80dd 	bls.w	800659c <USB_EPStartXfer+0x1ee>
 80063e2:	f3c3 144f 	ubfx	r4, r3, #5, #16
 80063e6:	f013 0f1f 	tst.w	r3, #31
 80063ea:	d101      	bne.n	80063f0 <USB_EPStartXfer+0x42>
 80063ec:	3c01      	subs	r4, #1
 80063ee:	b2a4      	uxth	r4, r4
 80063f0:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80063f4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80063f8:	b2a4      	uxth	r4, r4
 80063fa:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063fe:	780a      	ldrb	r2, [r1, #0]
 8006400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800641e:	2000      	movs	r0, #0
 8006420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006422:	690f      	ldr	r7, [r1, #16]
 8006424:	4297      	cmp	r7, r2
 8006426:	d225      	bcs.n	8006474 <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 8006428:	1bd2      	subs	r2, r2, r7
 800642a:	618a      	str	r2, [r1, #24]
 800642c:	460e      	mov	r6, r1
 800642e:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 8006430:	7a8b      	ldrb	r3, [r1, #10]
 8006432:	b31b      	cbz	r3, 800647c <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8006434:	780b      	ldrb	r3, [r1, #0]
 8006436:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800643a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800643e:	d069      	beq.n	8006514 <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006440:	2d00      	cmp	r5, #0
 8006442:	d137      	bne.n	80064b4 <USB_EPStartXfer+0x106>
 8006444:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800644c:	3306      	adds	r3, #6
 800644e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006452:	2f3e      	cmp	r7, #62	; 0x3e
 8006454:	d922      	bls.n	800649c <USB_EPStartXfer+0xee>
 8006456:	f3c7 124f 	ubfx	r2, r7, #5, #16
 800645a:	f017 0f1f 	tst.w	r7, #31
 800645e:	d101      	bne.n	8006464 <USB_EPStartXfer+0xb6>
 8006460:	3a01      	subs	r2, #1
 8006462:	b292      	uxth	r2, r2
 8006464:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006468:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800646c:	b292      	uxth	r2, r2
 800646e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006472:	e028      	b.n	80064c6 <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 8006474:	2300      	movs	r3, #0
 8006476:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006478:	4617      	mov	r7, r2
 800647a:	e7d7      	b.n	800642c <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800647c:	b2bb      	uxth	r3, r7
 800647e:	888a      	ldrh	r2, [r1, #4]
 8006480:	6949      	ldr	r1, [r1, #20]
 8006482:	f7ff ff7f 	bl	8006384 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006486:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800648a:	7832      	ldrb	r2, [r6, #0]
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	3302      	adds	r3, #2
 8006492:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006496:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 800649a:	e02a      	b.n	80064f2 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800649c:	f3c7 024f 	ubfx	r2, r7, #1, #16
 80064a0:	f017 0f01 	tst.w	r7, #1
 80064a4:	d001      	beq.n	80064aa <USB_EPStartXfer+0xfc>
 80064a6:	3201      	adds	r2, #1
 80064a8:	b292      	uxth	r2, r2
 80064aa:	0292      	lsls	r2, r2, #10
 80064ac:	b292      	uxth	r2, r2
 80064ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80064b2:	e008      	b.n	80064c6 <USB_EPStartXfer+0x118>
 80064b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80064b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064bc:	3302      	adds	r3, #2
 80064be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80064c2:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 80064c6:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80064c8:	b2bb      	uxth	r3, r7
 80064ca:	6971      	ldr	r1, [r6, #20]
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff ff59 	bl	8006384 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80064d2:	7873      	ldrb	r3, [r6, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d14d      	bne.n	8006574 <USB_EPStartXfer+0x1c6>
 80064d8:	7832      	ldrb	r2, [r6, #0]
 80064da:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80064de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064e2:	051b      	lsls	r3, r3, #20
 80064e4:	0d1b      	lsrs	r3, r3, #20
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064ee:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064f2:	7832      	ldrb	r2, [r6, #0]
 80064f4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006512:	e784      	b.n	800641e <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006514:	bb1d      	cbnz	r5, 800655e <USB_EPStartXfer+0x1b0>
 8006516:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800651a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800651e:	3302      	adds	r3, #2
 8006520:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006524:	2f3e      	cmp	r7, #62	; 0x3e
 8006526:	d90e      	bls.n	8006546 <USB_EPStartXfer+0x198>
 8006528:	f3c7 124f 	ubfx	r2, r7, #5, #16
 800652c:	f017 0f1f 	tst.w	r7, #31
 8006530:	d101      	bne.n	8006536 <USB_EPStartXfer+0x188>
 8006532:	3a01      	subs	r2, #1
 8006534:	b292      	uxth	r2, r2
 8006536:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800653a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800653e:	b292      	uxth	r2, r2
 8006540:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006544:	e014      	b.n	8006570 <USB_EPStartXfer+0x1c2>
 8006546:	f3c7 024f 	ubfx	r2, r7, #1, #16
 800654a:	f017 0f01 	tst.w	r7, #1
 800654e:	d001      	beq.n	8006554 <USB_EPStartXfer+0x1a6>
 8006550:	3201      	adds	r2, #1
 8006552:	b292      	uxth	r2, r2
 8006554:	0292      	lsls	r2, r2, #10
 8006556:	b292      	uxth	r2, r2
 8006558:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800655c:	e008      	b.n	8006570 <USB_EPStartXfer+0x1c2>
 800655e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006562:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006566:	3302      	adds	r3, #2
 8006568:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800656c:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8006570:	88f2      	ldrh	r2, [r6, #6]
 8006572:	e7a9      	b.n	80064c8 <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006574:	2b01      	cmp	r3, #1
 8006576:	d1bc      	bne.n	80064f2 <USB_EPStartXfer+0x144>
 8006578:	7832      	ldrb	r2, [r6, #0]
 800657a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800657e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006582:	051b      	lsls	r3, r3, #20
 8006584:	0d1b      	lsrs	r3, r3, #20
 8006586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006592:	e7ae      	b.n	80064f2 <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 8006594:	2300      	movs	r3, #0
 8006596:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006598:	4613      	mov	r3, r2
 800659a:	e713      	b.n	80063c4 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800659c:	f3c3 044f 	ubfx	r4, r3, #1, #16
 80065a0:	f013 0f01 	tst.w	r3, #1
 80065a4:	d001      	beq.n	80065aa <USB_EPStartXfer+0x1fc>
 80065a6:	3401      	adds	r4, #1
 80065a8:	b2a4      	uxth	r4, r4
 80065aa:	02a4      	lsls	r4, r4, #10
 80065ac:	b2a4      	uxth	r4, r4
 80065ae:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80065b2:	e724      	b.n	80063fe <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065b4:	b9bd      	cbnz	r5, 80065e6 <USB_EPStartXfer+0x238>
 80065b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80065ba:	780c      	ldrb	r4, [r1, #0]
 80065bc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80065c0:	3202      	adds	r2, #2
 80065c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80065c6:	2b3e      	cmp	r3, #62	; 0x3e
 80065c8:	d928      	bls.n	800661c <USB_EPStartXfer+0x26e>
 80065ca:	f3c3 144f 	ubfx	r4, r3, #5, #16
 80065ce:	f013 0f1f 	tst.w	r3, #31
 80065d2:	d101      	bne.n	80065d8 <USB_EPStartXfer+0x22a>
 80065d4:	3c01      	subs	r4, #1
 80065d6:	b2a4      	uxth	r4, r4
 80065d8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80065dc:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80065e0:	b2a4      	uxth	r4, r4
 80065e2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80065e6:	784a      	ldrb	r2, [r1, #1]
 80065e8:	bb82      	cbnz	r2, 800664c <USB_EPStartXfer+0x29e>
 80065ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80065ee:	780c      	ldrb	r4, [r1, #0]
 80065f0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80065f4:	3206      	adds	r2, #6
 80065f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80065fa:	2b3e      	cmp	r3, #62	; 0x3e
 80065fc:	d91a      	bls.n	8006634 <USB_EPStartXfer+0x286>
 80065fe:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006602:	f013 0f1f 	tst.w	r3, #31
 8006606:	d101      	bne.n	800660c <USB_EPStartXfer+0x25e>
 8006608:	3c01      	subs	r4, #1
 800660a:	b2a4      	uxth	r4, r4
 800660c:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006610:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006614:	b2a4      	uxth	r4, r4
 8006616:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 800661a:	e6f0      	b.n	80063fe <USB_EPStartXfer+0x50>
 800661c:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006620:	f013 0f01 	tst.w	r3, #1
 8006624:	d001      	beq.n	800662a <USB_EPStartXfer+0x27c>
 8006626:	3401      	adds	r4, #1
 8006628:	b2a4      	uxth	r4, r4
 800662a:	02a4      	lsls	r4, r4, #10
 800662c:	b2a4      	uxth	r4, r4
 800662e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006632:	e7d8      	b.n	80065e6 <USB_EPStartXfer+0x238>
 8006634:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006638:	f013 0f01 	tst.w	r3, #1
 800663c:	d001      	beq.n	8006642 <USB_EPStartXfer+0x294>
 800663e:	3401      	adds	r4, #1
 8006640:	b2a4      	uxth	r4, r4
 8006642:	02a4      	lsls	r4, r4, #10
 8006644:	b2a4      	uxth	r4, r4
 8006646:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 800664a:	e6d8      	b.n	80063fe <USB_EPStartXfer+0x50>
 800664c:	2a01      	cmp	r2, #1
 800664e:	f47f aed6 	bne.w	80063fe <USB_EPStartXfer+0x50>
 8006652:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006656:	780c      	ldrb	r4, [r1, #0]
 8006658:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800665c:	3202      	adds	r2, #2
 800665e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006662:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8006666:	e6ca      	b.n	80063fe <USB_EPStartXfer+0x50>

08006668 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8006668:	3301      	adds	r3, #1
 800666a:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800666c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8006674:	e004      	b.n	8006680 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8006676:	6810      	ldr	r0, [r2, #0]
 8006678:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 800667c:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800667e:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f8      	bne.n	8006676 <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8006684:	4770      	bx	lr
	...

08006688 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <LL_Init1msTick+0x18>)
 800668a:	fba3 3000 	umull	r3, r0, r3, r0
 800668e:	0980      	lsrs	r0, r0, #6
 8006690:	3801      	subs	r0, #1
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <LL_Init1msTick+0x1c>)
 8006694:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006696:	2200      	movs	r2, #0
 8006698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800669a:	2205      	movs	r2, #5
 800669c:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800669e:	4770      	bx	lr
 80066a0:	10624dd3 	.word	0x10624dd3
 80066a4:	e000e010 	.word	0xe000e010

080066a8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80066a8:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <LL_mDelay+0x28>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80066b0:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80066b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066b6:	d000      	beq.n	80066ba <LL_mDelay+0x12>
  {
    Delay++;
 80066b8:	3001      	adds	r0, #1
  }

  while (Delay)
 80066ba:	b130      	cbz	r0, 80066ca <LL_mDelay+0x22>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <LL_mDelay+0x28>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80066c4:	d0f9      	beq.n	80066ba <LL_mDelay+0x12>
    {
      Delay--;
 80066c6:	3801      	subs	r0, #1
 80066c8:	e7f7      	b.n	80066ba <LL_mDelay+0x12>
    }
  }
}
 80066ca:	b002      	add	sp, #8
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010

080066d4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80066d4:	4b01      	ldr	r3, [pc, #4]	; (80066dc <LL_SetSystemCoreClock+0x8>)
 80066d6:	6018      	str	r0, [r3, #0]
}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000000 	.word	0x20000000

080066e0 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <DWT_Delay_Init+0x3c>)
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80066e8:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80066f0:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <DWT_Delay_Init+0x40>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8006704:	2200      	movs	r2, #0
 8006706:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8006708:	bf00      	nop
     __ASM volatile ("NOP");
 800670a:	bf00      	nop
  __ASM volatile ("NOP");
 800670c:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	b90b      	cbnz	r3, 8006716 <DWT_Delay_Init+0x36>
     {
       return 0; /*clock cycle counter started*/
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8006712:	2001      	movs	r0, #1
  }
}
 8006714:	4770      	bx	lr
       return 0; /*clock cycle counter started*/
 8006716:	4610      	mov	r0, r2
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	e000edf0 	.word	0xe000edf0
 8006720:	e0001000 	.word	0xe0001000

08006724 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006724:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006726:	4903      	ldr	r1, [pc, #12]	; (8006734 <MX_FATFS_Init+0x10>)
 8006728:	4803      	ldr	r0, [pc, #12]	; (8006738 <MX_FATFS_Init+0x14>)
 800672a:	f001 f9d9 	bl	8007ae0 <FATFS_LinkDriver>
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <MX_FATFS_Init+0x18>)
 8006730:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006732:	bd08      	pop	{r3, pc}
 8006734:	20006580 	.word	0x20006580
 8006738:	0800ee6c 	.word	0x0800ee6c
 800673c:	2000657c 	.word	0x2000657c

08006740 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006740:	b500      	push	{lr}
 8006742:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	460a      	mov	r2, r1
 800674a:	4601      	mov	r1, r0
 800674c:	4803      	ldr	r0, [pc, #12]	; (800675c <BSP_SD_ReadBlocks+0x1c>)
 800674e:	f7fd f892 	bl	8003876 <HAL_SD_ReadBlocks>
 8006752:	b100      	cbz	r0, 8006756 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006754:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006756:	b003      	add	sp, #12
 8006758:	f85d fb04 	ldr.w	pc, [sp], #4
 800675c:	2000649c 	.word	0x2000649c

08006760 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006760:	b500      	push	{lr}
 8006762:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	460a      	mov	r2, r1
 800676a:	4601      	mov	r1, r0
 800676c:	4803      	ldr	r0, [pc, #12]	; (800677c <BSP_SD_WriteBlocks+0x1c>)
 800676e:	f7fd f98f 	bl	8003a90 <HAL_SD_WriteBlocks>
 8006772:	b100      	cbz	r0, 8006776 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006774:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006776:	b003      	add	sp, #12
 8006778:	f85d fb04 	ldr.w	pc, [sp], #4
 800677c:	2000649c 	.word	0x2000649c

08006780 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006780:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006782:	4803      	ldr	r0, [pc, #12]	; (8006790 <BSP_SD_GetCardState+0x10>)
 8006784:	f7fd fcfc 	bl	8004180 <HAL_SD_GetCardState>
}
 8006788:	3804      	subs	r0, #4
 800678a:	bf18      	it	ne
 800678c:	2001      	movne	r0, #1
 800678e:	bd08      	pop	{r3, pc}
 8006790:	2000649c 	.word	0x2000649c

08006794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006794:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006796:	4601      	mov	r1, r0
 8006798:	4801      	ldr	r0, [pc, #4]	; (80067a0 <BSP_SD_GetCardInfo+0xc>)
 800679a:	f7fd fc7d 	bl	8004098 <HAL_SD_GetCardInfo>
}
 800679e:	bd08      	pop	{r3, pc}
 80067a0:	2000649c 	.word	0x2000649c

080067a4 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 80067a4:	4770      	bx	lr

080067a6 <HAL_SD_AbortCallback>:
{
 80067a6:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80067a8:	f7ff fffc 	bl	80067a4 <BSP_SD_AbortCallback>
}
 80067ac:	bd08      	pop	{r3, pc}

080067ae <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 80067ae:	4770      	bx	lr

080067b0 <HAL_SD_TxCpltCallback>:
{
 80067b0:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80067b2:	f7ff fffc 	bl	80067ae <BSP_SD_WriteCpltCallback>
}
 80067b6:	bd08      	pop	{r3, pc}

080067b8 <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 80067b8:	4770      	bx	lr

080067ba <HAL_SD_RxCpltCallback>:
{
 80067ba:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80067bc:	f7ff fffc 	bl	80067b8 <BSP_SD_ReadCpltCallback>
}
 80067c0:	bd08      	pop	{r3, pc}

080067c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80067c2:	b500      	push	{lr}
 80067c4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80067cc:	f000 f824 	bl	8006818 <BSP_PlatformIsDetected>
 80067d0:	b910      	cbnz	r0, 80067d8 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80067d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80067dc:	b003      	add	sp, #12
 80067de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080067e4 <BSP_SD_Init>:
{
 80067e4:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067e6:	f7ff ffec 	bl	80067c2 <BSP_SD_IsDetected>
 80067ea:	2801      	cmp	r0, #1
 80067ec:	d002      	beq.n	80067f4 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 80067ee:	2401      	movs	r4, #1
}
 80067f0:	4620      	mov	r0, r4
 80067f2:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 80067f4:	4807      	ldr	r0, [pc, #28]	; (8006814 <BSP_SD_Init+0x30>)
 80067f6:	f7fd fbe3 	bl	8003fc0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80067fa:	4604      	mov	r4, r0
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1f7      	bne.n	80067f0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <BSP_SD_Init+0x30>)
 8006806:	f7fd fc59 	bl	80040bc <HAL_SD_ConfigWideBusOperation>
 800680a:	2800      	cmp	r0, #0
 800680c:	d0f0      	beq.n	80067f0 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800680e:	2401      	movs	r4, #1
 8006810:	e7ee      	b.n	80067f0 <BSP_SD_Init+0xc>
 8006812:	bf00      	nop
 8006814:	2000649c 	.word	0x2000649c

08006818 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006818:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800681a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800681e:	4804      	ldr	r0, [pc, #16]	; (8006830 <BSP_PlatformIsDetected+0x18>)
 8006820:	f7fc f9ba 	bl	8002b98 <HAL_GPIO_ReadPin>
 8006824:	b108      	cbz	r0, 800682a <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 8006826:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8006828:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 800682a:	2001      	movs	r0, #1
 800682c:	e7fc      	b.n	8006828 <BSP_PlatformIsDetected+0x10>
 800682e:	bf00      	nop
 8006830:	40010800 	.word	0x40010800

08006834 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006834:	2320      	movs	r3, #32
 8006836:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006838:	4800      	ldr	r0, [pc, #0]	; (800683c <USBD_MSC_GetHSCfgDesc+0x8>)
 800683a:	4770      	bx	lr
 800683c:	20000060 	.word	0x20000060

08006840 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006840:	2320      	movs	r3, #32
 8006842:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006844:	4800      	ldr	r0, [pc, #0]	; (8006848 <USBD_MSC_GetFSCfgDesc+0x8>)
 8006846:	4770      	bx	lr
 8006848:	20000040 	.word	0x20000040

0800684c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800684c:	2320      	movs	r3, #32
 800684e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006850:	4800      	ldr	r0, [pc, #0]	; (8006854 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006852:	4770      	bx	lr
 8006854:	2000008c 	.word	0x2000008c

08006858 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006858:	230a      	movs	r3, #10
 800685a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 800685c:	4800      	ldr	r0, [pc, #0]	; (8006860 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800685e:	4770      	bx	lr
 8006860:	20000080 	.word	0x20000080

08006864 <USBD_MSC_Init>:
{
 8006864:	b510      	push	{r4, lr}
 8006866:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006868:	7c03      	ldrb	r3, [r0, #16]
 800686a:	b9c3      	cbnz	r3, 800689e <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 800686c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006870:	2202      	movs	r2, #2
 8006872:	2101      	movs	r1, #1
 8006874:	f006 fdfc 	bl	800d470 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8006878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687c:	2202      	movs	r2, #2
 800687e:	2181      	movs	r1, #129	; 0x81
 8006880:	4620      	mov	r0, r4
 8006882:	f006 fdf5 	bl	800d470 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006886:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800688a:	f006 fe4d 	bl	800d528 <USBD_static_malloc>
 800688e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8006892:	b180      	cbz	r0, 80068b6 <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 8006894:	4620      	mov	r0, r4
 8006896:	f000 f8f3 	bl	8006a80 <MSC_BOT_Init>
    ret = 0;
 800689a:	2000      	movs	r0, #0
}
 800689c:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	2202      	movs	r2, #2
 80068a2:	2101      	movs	r1, #1
 80068a4:	f006 fde4 	bl	800d470 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80068a8:	2340      	movs	r3, #64	; 0x40
 80068aa:	2202      	movs	r2, #2
 80068ac:	2181      	movs	r1, #129	; 0x81
 80068ae:	4620      	mov	r0, r4
 80068b0:	f006 fdde 	bl	800d470 <USBD_LL_OpenEP>
 80068b4:	e7e7      	b.n	8006886 <USBD_MSC_Init+0x22>
    ret = 1; 
 80068b6:	2001      	movs	r0, #1
 80068b8:	e7f0      	b.n	800689c <USBD_MSC_Init+0x38>

080068ba <USBD_MSC_DeInit>:
{
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80068be:	2101      	movs	r1, #1
 80068c0:	f006 fde1 	bl	800d486 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80068c4:	2181      	movs	r1, #129	; 0x81
 80068c6:	4620      	mov	r0, r4
 80068c8:	f006 fddd 	bl	800d486 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 f903 	bl	8006ad8 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80068d2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80068d6:	b120      	cbz	r0, 80068e2 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 80068d8:	f006 fe2a 	bl	800d530 <USBD_static_free>
    pdev->pClassData  = NULL; 
 80068dc:	2300      	movs	r3, #0
 80068de:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80068e2:	2000      	movs	r0, #0
 80068e4:	bd10      	pop	{r4, pc}

080068e6 <USBD_MSC_Setup>:
{
 80068e6:	b570      	push	{r4, r5, r6, lr}
 80068e8:	4605      	mov	r5, r0
 80068ea:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80068ec:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f0:	780b      	ldrb	r3, [r1, #0]
 80068f2:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80068f6:	d035      	beq.n	8006964 <USBD_MSC_Setup+0x7e>
 80068f8:	2a20      	cmp	r2, #32
 80068fa:	d178      	bne.n	80069ee <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 80068fc:	784a      	ldrb	r2, [r1, #1]
 80068fe:	2afe      	cmp	r2, #254	; 0xfe
 8006900:	d005      	beq.n	800690e <USBD_MSC_Setup+0x28>
 8006902:	2aff      	cmp	r2, #255	; 0xff
 8006904:	d01d      	beq.n	8006942 <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 8006906:	f000 fe43 	bl	8007590 <USBD_CtlError>
       return USBD_FAIL; 
 800690a:	2002      	movs	r0, #2
 800690c:	e070      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 800690e:	884a      	ldrh	r2, [r1, #2]
 8006910:	b98a      	cbnz	r2, 8006936 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006912:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006914:	2a01      	cmp	r2, #1
 8006916:	d10e      	bne.n	8006936 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800691c:	d00b      	beq.n	8006936 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800691e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	4798      	blx	r3
 8006926:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 8006928:	2201      	movs	r2, #1
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	f001 f87d 	bl	8007a2c <USBD_CtlSendData>
  return 0;
 8006932:	2000      	movs	r0, #0
      break;
 8006934:	e05c      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 fe29 	bl	8007590 <USBD_CtlError>
         return USBD_FAIL; 
 800693e:	2002      	movs	r0, #2
 8006940:	e056      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 8006942:	884a      	ldrh	r2, [r1, #2]
 8006944:	b942      	cbnz	r2, 8006958 <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 8006946:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006948:	b932      	cbnz	r2, 8006958 <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 800694a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800694e:	d103      	bne.n	8006958 <USBD_MSC_Setup+0x72>
         MSC_BOT_Reset(pdev);
 8006950:	f000 f8b5 	bl	8006abe <MSC_BOT_Reset>
  return 0;
 8006954:	2000      	movs	r0, #0
      break;
 8006956:	e04b      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fe18 	bl	8007590 <USBD_CtlError>
         return USBD_FAIL; 
 8006960:	2002      	movs	r0, #2
 8006962:	e045      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
    switch (req->bRequest)
 8006964:	784b      	ldrb	r3, [r1, #1]
 8006966:	2b0a      	cmp	r3, #10
 8006968:	d005      	beq.n	8006976 <USBD_MSC_Setup+0x90>
 800696a:	2b0b      	cmp	r3, #11
 800696c:	d009      	beq.n	8006982 <USBD_MSC_Setup+0x9c>
 800696e:	2b01      	cmp	r3, #1
 8006970:	d00b      	beq.n	800698a <USBD_MSC_Setup+0xa4>
  return 0;
 8006972:	2000      	movs	r0, #0
 8006974:	e03c      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
      USBD_CtlSendData (pdev,
 8006976:	2201      	movs	r2, #1
 8006978:	1d31      	adds	r1, r6, #4
 800697a:	f001 f857 	bl	8007a2c <USBD_CtlSendData>
  return 0;
 800697e:	2000      	movs	r0, #0
      break;
 8006980:	e036      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
      hmsc->interface = (uint8_t)(req->wValue);
 8006982:	788b      	ldrb	r3, [r1, #2]
 8006984:	6073      	str	r3, [r6, #4]
  return 0;
 8006986:	2000      	movs	r0, #0
      break;
 8006988:	e032      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800698a:	7909      	ldrb	r1, [r1, #4]
 800698c:	f006 fd83 	bl	800d496 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006990:	7921      	ldrb	r1, [r4, #4]
 8006992:	4628      	mov	r0, r5
 8006994:	f006 fd77 	bl	800d486 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8006998:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	db0e      	blt.n	80069be <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80069a0:	7c2b      	ldrb	r3, [r5, #16]
 80069a2:	b9eb      	cbnz	r3, 80069e0 <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 80069a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a8:	2202      	movs	r2, #2
 80069aa:	2101      	movs	r1, #1
 80069ac:	4628      	mov	r0, r5
 80069ae:	f006 fd5f 	bl	800d470 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80069b2:	7921      	ldrb	r1, [r4, #4]
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f93a 	bl	8006c2e <MSC_BOT_CplClrFeature>
  return 0;
 80069ba:	2000      	movs	r0, #0
      break;
 80069bc:	e018      	b.n	80069f0 <USBD_MSC_Setup+0x10a>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80069be:	7c2b      	ldrb	r3, [r5, #16]
 80069c0:	b93b      	cbnz	r3, 80069d2 <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 80069c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c6:	2202      	movs	r2, #2
 80069c8:	2181      	movs	r1, #129	; 0x81
 80069ca:	4628      	mov	r0, r5
 80069cc:	f006 fd50 	bl	800d470 <USBD_LL_OpenEP>
 80069d0:	e7ef      	b.n	80069b2 <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 80069d2:	2340      	movs	r3, #64	; 0x40
 80069d4:	2202      	movs	r2, #2
 80069d6:	2181      	movs	r1, #129	; 0x81
 80069d8:	4628      	mov	r0, r5
 80069da:	f006 fd49 	bl	800d470 <USBD_LL_OpenEP>
 80069de:	e7e8      	b.n	80069b2 <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	2202      	movs	r2, #2
 80069e4:	2101      	movs	r1, #1
 80069e6:	4628      	mov	r0, r5
 80069e8:	f006 fd42 	bl	800d470 <USBD_LL_OpenEP>
 80069ec:	e7e1      	b.n	80069b2 <USBD_MSC_Setup+0xcc>
  return 0;
 80069ee:	2000      	movs	r0, #0
}
 80069f0:	bd70      	pop	{r4, r5, r6, pc}

080069f2 <USBD_MSC_DataIn>:
{
 80069f2:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 80069f4:	f000 f892 	bl	8006b1c <MSC_BOT_DataIn>
}
 80069f8:	2000      	movs	r0, #0
 80069fa:	bd08      	pop	{r3, pc}

080069fc <USBD_MSC_DataOut>:
{
 80069fc:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 80069fe:	f000 f8fd 	bl	8006bfc <MSC_BOT_DataOut>
}
 8006a02:	2000      	movs	r0, #0
 8006a04:	bd08      	pop	{r3, pc}

08006a06 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006a06:	b109      	cbz	r1, 8006a0c <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8006a08:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	4770      	bx	lr

08006a10 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006a14:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8006a18:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8006a1c:	b923      	cbnz	r3, 8006a28 <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 8006a1e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 8006a22:	b10b      	cbz	r3, 8006a28 <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8006a24:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 8006a26:	b13b      	cbz	r3, 8006a38 <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006a28:	2181      	movs	r1, #129	; 0x81
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f006 fd3b 	bl	800d4a6 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006a30:	7a63      	ldrb	r3, [r4, #9]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d004      	beq.n	8006a40 <MSC_BOT_Abort+0x30>
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006a38:	2101      	movs	r1, #1
 8006a3a:	f006 fd34 	bl	800d4a6 <USBD_LL_StallEP>
 8006a3e:	e7f3      	b.n	8006a28 <MSC_BOT_Abort+0x18>
    USBD_LL_PrepareReceive (pdev,
 8006a40:	231f      	movs	r3, #31
 8006a42:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006a46:	2101      	movs	r1, #1
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f006 fd5f 	bl	800d50c <USBD_LL_PrepareReceive>
}
 8006a4e:	e7f2      	b.n	8006a36 <MSC_BOT_Abort+0x26>

08006a50 <MSC_BOT_SendData>:
{
 8006a50:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006a52:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8006a56:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bf28      	it	cs
 8006a5e:	4613      	movcs	r3, r2
 8006a60:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 8006a62:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006a72:	2204      	movs	r2, #4
 8006a74:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8006a76:	460a      	mov	r2, r1
 8006a78:	2181      	movs	r1, #129	; 0x81
 8006a7a:	f006 fd3f 	bl	800d4fc <USBD_LL_Transmit>
}
 8006a7e:	bd10      	pop	{r4, pc}

08006a80 <MSC_BOT_Init>:
{
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006a84:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006a88:	2000      	movs	r0, #0
 8006a8a:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006a8c:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8006a8e:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 8006a92:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8006a96:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f006 fcf8 	bl	800d496 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006aa6:	2181      	movs	r1, #129	; 0x81
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f006 fcf4 	bl	800d496 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8006aae:	231f      	movs	r3, #31
 8006ab0:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f006 fd28 	bl	800d50c <USBD_LL_PrepareReceive>
}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}

08006abe <MSC_BOT_Reset>:
{
 8006abe:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006ac0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8006ac8:	2101      	movs	r1, #1
 8006aca:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8006acc:	231f      	movs	r3, #31
 8006ace:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ad2:	f006 fd1b 	bl	800d50c <USBD_LL_PrepareReceive>
}
 8006ad6:	bd08      	pop	{r3, pc}

08006ad8 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006ad8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006adc:	2200      	movs	r2, #0
 8006ade:	721a      	strb	r2, [r3, #8]
}
 8006ae0:	4770      	bx	lr
	...

08006ae4 <MSC_BOT_SendCSW>:
{
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006ae8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <MSC_BOT_SendCSW+0x34>)
 8006aee:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006af2:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8006afa:	230d      	movs	r3, #13
 8006afc:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006b00:	2181      	movs	r1, #129	; 0x81
 8006b02:	f006 fcfb 	bl	800d4fc <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8006b06:	231f      	movs	r3, #31
 8006b08:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f006 fcfc 	bl	800d50c <USBD_LL_PrepareReceive>
}
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	53425355 	.word	0x53425355

08006b1c <MSC_BOT_DataIn>:
{
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006b20:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8006b24:	7a0b      	ldrb	r3, [r1, #8]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d006      	beq.n	8006b38 <MSC_BOT_DataIn+0x1c>
 8006b2a:	d304      	bcc.n	8006b36 <MSC_BOT_DataIn+0x1a>
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d802      	bhi.n	8006b36 <MSC_BOT_DataIn+0x1a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006b30:	2100      	movs	r1, #0
 8006b32:	f7ff ffd7 	bl	8006ae4 <MSC_BOT_SendCSW>
}
 8006b36:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006b38:	f201 221b 	addw	r2, r1, #539	; 0x21b
 8006b3c:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 8006b40:	f000 fb69 	bl	8007216 <SCSI_ProcessCmd>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	daf6      	bge.n	8006b36 <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff ffca 	bl	8006ae4 <MSC_BOT_SendCSW>
 8006b50:	e7f1      	b.n	8006b36 <MSC_BOT_DataIn+0x1a>
	...

08006b54 <MSC_BOT_CBW_Decode>:
{
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006b58:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006b5c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006b60:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006b64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006b68:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	f006 fcd5 	bl	800d51c <USBD_LL_GetRxDataSize>
 8006b72:	281f      	cmp	r0, #31
 8006b74:	d104      	bne.n	8006b80 <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8006b76:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006b7a:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <MSC_BOT_CBW_Decode+0xa4>)
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d00c      	beq.n	8006b9a <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 8006b80:	2320      	movs	r3, #32
 8006b82:	2205      	movs	r2, #5
 8006b84:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 f8e9 	bl	8006d60 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8006b8e:	2302      	movs	r3, #2
 8006b90:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff ff3c 	bl	8006a10 <MSC_BOT_Abort>
}
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 8006b9a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8006b9e:	2901      	cmp	r1, #1
 8006ba0:	d8ee      	bhi.n	8006b80 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8006ba2:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0ea      	beq.n	8006b80 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d8e8      	bhi.n	8006b80 <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 8006bae:	f204 221b 	addw	r2, r4, #539	; 0x21b
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fb2f 	bl	8007216 <SCSI_ProcessCmd>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	db0b      	blt.n	8006bd4 <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8006bbc:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d9e8      	bls.n	8006b98 <MSC_BOT_CBW_Decode+0x44>
      if (hmsc->bot_data_length > 0)
 8006bc6:	8962      	ldrh	r2, [r4, #10]
 8006bc8:	b982      	cbnz	r2, 8006bec <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f7ff ff89 	bl	8006ae4 <MSC_BOT_SendCSW>
}
 8006bd2:	e7e1      	b.n	8006b98 <MSC_BOT_CBW_Decode+0x44>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8006bd4:	7a23      	ldrb	r3, [r4, #8]
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d003      	beq.n	8006be2 <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7ff ff18 	bl	8006a10 <MSC_BOT_Abort>
 8006be0:	e7da      	b.n	8006b98 <MSC_BOT_CBW_Decode+0x44>
       MSC_BOT_SendCSW (pdev,
 8006be2:	2101      	movs	r1, #1
 8006be4:	4628      	mov	r0, r5
 8006be6:	f7ff ff7d 	bl	8006ae4 <MSC_BOT_SendCSW>
 8006bea:	e7d5      	b.n	8006b98 <MSC_BOT_CBW_Decode+0x44>
        MSC_BOT_SendData(pdev,
 8006bec:	f104 010c 	add.w	r1, r4, #12
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f7ff ff2d 	bl	8006a50 <MSC_BOT_SendData>
 8006bf6:	e7cf      	b.n	8006b98 <MSC_BOT_CBW_Decode+0x44>
 8006bf8:	43425355 	.word	0x43425355

08006bfc <MSC_BOT_DataOut>:
{
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006c00:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8006c04:	7a1a      	ldrb	r2, [r3, #8]
 8006c06:	b112      	cbz	r2, 8006c0e <MSC_BOT_DataOut+0x12>
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	d003      	beq.n	8006c14 <MSC_BOT_DataOut+0x18>
}
 8006c0c:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 8006c0e:	f7ff ffa1 	bl	8006b54 <MSC_BOT_CBW_Decode>
    break;
 8006c12:	e7fb      	b.n	8006c0c <MSC_BOT_DataOut+0x10>
    if(SCSI_ProcessCmd(pdev,
 8006c14:	f203 221b 	addw	r2, r3, #539	; 0x21b
 8006c18:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006c1c:	f000 fafb 	bl	8007216 <SCSI_ProcessCmd>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	daf3      	bge.n	8006c0c <MSC_BOT_DataOut+0x10>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c24:	2101      	movs	r1, #1
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7ff ff5c 	bl	8006ae4 <MSC_BOT_SendCSW>
}
 8006c2c:	e7ee      	b.n	8006c0c <MSC_BOT_DataOut+0x10>

08006c2e <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c2e:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006c30:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8006c34:	7a63      	ldrb	r3, [r4, #9]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d003      	beq.n	8006c42 <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006c3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c3e:	d106      	bne.n	8006c4e <MSC_BOT_CplClrFeature+0x20>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 8006c40:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006c42:	2181      	movs	r1, #129	; 0x81
 8006c44:	f006 fc2f 	bl	800d4a6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8006c48:	2300      	movs	r3, #0
 8006c4a:	7263      	strb	r3, [r4, #9]
 8006c4c:	e7f8      	b.n	8006c40 <MSC_BOT_CplClrFeature+0x12>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d0f6      	beq.n	8006c40 <MSC_BOT_CplClrFeature+0x12>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8006c52:	2101      	movs	r1, #1
 8006c54:	f7ff ff46 	bl	8006ae4 <MSC_BOT_SendCSW>
}
 8006c58:	e7f2      	b.n	8006c40 <MSC_BOT_CplClrFeature+0x12>
	...

08006c5c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006c5c:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006c5e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 8006c62:	7853      	ldrb	r3, [r2, #1]
 8006c64:	f013 0f01 	tst.w	r3, #1
 8006c68:	d10d      	bne.n	8006c86 <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006c6a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006c6e:	69d8      	ldr	r0, [r3, #28]
 8006c70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006c74:	008b      	lsls	r3, r1, #2
 8006c76:	4418      	add	r0, r3
    len = pPage[4] + 5;
 8006c78:	7901      	ldrb	r1, [r0, #4]
 8006c7a:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 8006c7c:	7913      	ldrb	r3, [r2, #4]
 8006c7e:	428b      	cmp	r3, r1
 8006c80:	d903      	bls.n	8006c8a <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 8006c82:	460b      	mov	r3, r1
 8006c84:	e001      	b.n	8006c8a <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 8006c86:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8006c88:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 8006c8a:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 8006c8c:	e004      	b.n	8006c98 <SCSI_Inquiry+0x3c>
  {
    len--;
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8006c92:	5cc1      	ldrb	r1, [r0, r3]
 8006c94:	18e2      	adds	r2, r4, r3
 8006c96:	7311      	strb	r1, [r2, #12]
  while (len) 
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f8      	bne.n	8006c8e <SCSI_Inquiry+0x32>
  }
  return 0;
}
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	bc10      	pop	{r4}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	0800ee64 	.word	0x0800ee64

08006ca8 <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006ca8:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 8006cac:	2308      	movs	r3, #8
 8006cae:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 8006cb0:	e005      	b.n	8006cbe <SCSI_ModeSense6+0x16>
  {
    len--;
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <SCSI_ModeSense6+0x20>)
 8006cb8:	5cd1      	ldrb	r1, [r2, r3]
 8006cba:	18c2      	adds	r2, r0, r3
 8006cbc:	7311      	strb	r1, [r2, #12]
  while (len) 
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f7      	bne.n	8006cb2 <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	0800ee5c 	.word	0x0800ee5c

08006ccc <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006ccc:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	8143      	strh	r3, [r0, #10]

  while (len) 
 8006cd4:	e005      	b.n	8006ce2 <SCSI_ModeSense10+0x16>
  {
    len--;
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8006cda:	4a04      	ldr	r2, [pc, #16]	; (8006cec <SCSI_ModeSense10+0x20>)
 8006cdc:	5cd1      	ldrb	r1, [r2, r3]
 8006cde:	18c2      	adds	r2, r0, r3
 8006ce0:	7311      	strb	r1, [r2, #12]
  while (len) 
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f7      	bne.n	8006cd6 <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	0800ee54 	.word	0x0800ee54

08006cf0 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006cf0:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006cf2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e004      	b.n	8006d04 <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 8006cfa:	18e1      	adds	r1, r4, r3
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8006d00:	3301      	adds	r3, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b11      	cmp	r3, #17
 8006d06:	d9f8      	bls.n	8006cfa <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8006d08:	2370      	movs	r3, #112	; 0x70
 8006d0a:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8006d0c:	230c      	movs	r3, #12
 8006d0e:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8006d10:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 8006d14:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	d00f      	beq.n	8006d3c <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8006d1c:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8006d20:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006d24:	7908      	ldrb	r0, [r1, #4]
 8006d26:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8006d28:	7a48      	ldrb	r0, [r1, #9]
 8006d2a:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8006d2c:	7a09      	ldrb	r1, [r1, #8]
 8006d2e:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 8006d30:	3301      	adds	r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d008      	beq.n	8006d4e <SCSI_RequestSense+0x5e>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8006d3c:	2312      	movs	r3, #18
 8006d3e:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006d40:	7913      	ldrb	r3, [r2, #4]
 8006d42:	2b12      	cmp	r3, #18
 8006d44:	d800      	bhi.n	8006d48 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 8006d46:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bc10      	pop	{r4}
 8006d4c:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 8006d54:	e7f2      	b.n	8006d3c <SCSI_RequestSense+0x4c>

08006d56 <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 8006d56:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	8158      	strh	r0, [r3, #10]
  return 0;
}
 8006d5e:	4770      	bx	lr

08006d60 <SCSI_SenseCode>:
{
 8006d60:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006d62:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006d66:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8006d6a:	f101 0047 	add.w	r0, r1, #71	; 0x47
 8006d6e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006d72:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 8006d78:	3101      	adds	r1, #1
 8006d7a:	b2c9      	uxtb	r1, r1
 8006d7c:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006d80:	2904      	cmp	r1, #4
 8006d82:	d001      	beq.n	8006d88 <SCSI_SenseCode+0x28>
}
 8006d84:	bc10      	pop	{r4}
 8006d86:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 8006d8e:	e7f9      	b.n	8006d84 <SCSI_SenseCode+0x24>

08006d90 <SCSI_TestUnitReady>:
{
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006d94:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8006d98:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8006d9c:	b95b      	cbnz	r3, 8006db6 <SCSI_TestUnitReady+0x26>
 8006d9e:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8006da0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	4608      	mov	r0, r1
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	b960      	cbnz	r0, 8006dc8 <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 8006dae:	2200      	movs	r2, #0
 8006db0:	816a      	strh	r2, [r5, #10]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8006db6:	2320      	movs	r3, #32
 8006db8:	2205      	movs	r2, #5
 8006dba:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 8006dbe:	f7ff ffcf 	bl	8006d60 <SCSI_SenseCode>
    return -1;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	e7f4      	b.n	8006db2 <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 8006dc8:	233a      	movs	r3, #58	; 0x3a
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff ffc6 	bl	8006d60 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006dd4:	2305      	movs	r3, #5
 8006dd6:	722b      	strb	r3, [r5, #8]
    return -1;
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ddc:	e7e9      	b.n	8006db2 <SCSI_TestUnitReady+0x22>

08006dde <SCSI_ReadFormatCapacity>:
{
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	4605      	mov	r5, r0
 8006de4:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006de6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 8006dea:	2300      	movs	r3, #0
 8006dec:	e004      	b.n	8006df8 <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 8006dee:	18e2      	adds	r2, r4, r3
 8006df0:	2100      	movs	r1, #0
 8006df2:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 8006df4:	3301      	adds	r3, #1
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b0b      	cmp	r3, #11
 8006dfa:	d9f8      	bls.n	8006dee <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8006dfc:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f10d 0206 	add.w	r2, sp, #6
 8006e06:	4669      	mov	r1, sp
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4798      	blx	r3
 8006e0c:	4601      	mov	r1, r0
 8006e0e:	b9d8      	cbnz	r0, 8006e48 <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 8006e10:	2308      	movs	r3, #8
 8006e12:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8006e14:	9a00      	ldr	r2, [sp, #0]
 8006e16:	1e53      	subs	r3, r2, #1
 8006e18:	0e18      	lsrs	r0, r3, #24
 8006e1a:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8006e1c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006e20:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8006e22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006e26:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8006e28:	3a01      	subs	r2, #1
 8006e2a:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006e34:	2200      	movs	r2, #0
 8006e36:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006e38:	0a1a      	lsrs	r2, r3, #8
 8006e3a:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006e3c:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 8006e3e:	230c      	movs	r3, #12
 8006e40:	8163      	strh	r3, [r4, #10]
}
 8006e42:	4608      	mov	r0, r1
 8006e44:	b002      	add	sp, #8
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8006e48:	233a      	movs	r3, #58	; 0x3a
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff ff86 	bl	8006d60 <SCSI_SenseCode>
    return -1;
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295
 8006e58:	e7f3      	b.n	8006e42 <SCSI_ReadFormatCapacity+0x64>

08006e5a <SCSI_ReadCapacity10>:
{
 8006e5a:	b570      	push	{r4, r5, r6, lr}
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006e60:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006e64:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f204 225e 	addw	r2, r4, #606	; 0x25e
 8006e6e:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8006e72:	4630      	mov	r0, r6
 8006e74:	4798      	blx	r3
 8006e76:	b9c8      	cbnz	r0, 8006eac <SCSI_ReadCapacity10+0x52>
 8006e78:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8006e7a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 8006e7e:	1e53      	subs	r3, r2, #1
 8006e80:	0e18      	lsrs	r0, r3, #24
 8006e82:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8006e84:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006e88:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8006e8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006e8e:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8006e90:	3a01      	subs	r2, #1
 8006e92:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006e94:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 8006e98:	2200      	movs	r2, #0
 8006e9a:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006e9c:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006e9e:	0a1a      	lsrs	r2, r3, #8
 8006ea0:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006ea2:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	8163      	strh	r3, [r4, #10]
}
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8006eac:	233a      	movs	r3, #58	; 0x3a
 8006eae:	2202      	movs	r2, #2
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7ff ff54 	bl	8006d60 <SCSI_SenseCode>
    return -1;
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	e7f4      	b.n	8006ea8 <SCSI_ReadCapacity10+0x4e>

08006ebe <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8006ebe:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8006ec0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d801      	bhi.n	8006ed2 <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 8006ece:	2000      	movs	r0, #0
}
 8006ed0:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 8006ed2:	2321      	movs	r3, #33	; 0x21
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	f7ff ff43 	bl	8006d60 <SCSI_SenseCode>
    return -1;
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	e7f7      	b.n	8006ed0 <SCSI_CheckAddressRange+0x12>

08006ee0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8006ee8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8006eec:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8006ef0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006ef4:	bf28      	it	cs
 8006ef6:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8006efa:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006efe:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 8006f02:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8006f06:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8006f0a:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8006f0e:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	47c8      	blx	r9
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	db1a      	blt.n	8006f58 <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 8006f22:	b2ab      	uxth	r3, r5
 8006f24:	463a      	mov	r2, r7
 8006f26:	2181      	movs	r1, #129	; 0x81
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f006 fae7 	bl	800d4fc <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8006f2e:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8006f32:	442b      	add	r3, r5
 8006f34:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8006f38:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8006f3c:	1b5b      	subs	r3, r3, r5
 8006f3e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006f42:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8006f46:	1b55      	subs	r5, r2, r5
 8006f48:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8006f4c:	b96b      	cbnz	r3, 8006f6a <SCSI_ProcessRead+0x8a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 8006f52:	2000      	movs	r0, #0
}
 8006f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8006f58:	2311      	movs	r3, #17
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f7ff fefe 	bl	8006d60 <SCSI_SenseCode>
    return -1; 
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e7f4      	b.n	8006f54 <SCSI_ProcessRead+0x74>
  return 0;
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e7f2      	b.n	8006f54 <SCSI_ProcessRead+0x74>

08006f6e <SCSI_Read10>:
{
 8006f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f70:	4606      	mov	r6, r0
 8006f72:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8006f74:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8006f78:	7a23      	ldrb	r3, [r4, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d137      	bne.n	8006fee <SCSI_Read10+0x80>
 8006f7e:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8006f80:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da3a      	bge.n	8006ffe <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8006f88:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	4608      	mov	r0, r1
 8006f90:	4798      	blx	r3
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d13c      	bne.n	8007010 <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8006f96:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 8006f98:	78ea      	ldrb	r2, [r5, #3]
 8006f9a:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8006f9c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8006fa0:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 8006fa2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8006fa6:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 8006fa8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8006faa:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8006fae:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 8006fb0:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8006fb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006fb6:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006fba:	4639      	mov	r1, r7
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ff7e 	bl	8006ebe <SCSI_CheckAddressRange>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	db37      	blt.n	8007036 <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8006fca:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8006fce:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8006fd2:	fb01 f202 	mul.w	r2, r1, r2
 8006fd6:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8006fda:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8006fde:	fb03 f301 	mul.w	r3, r3, r1
 8006fe2:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8006fe6:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d119      	bne.n	8007022 <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8006fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff2:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff ff72 	bl	8006ee0 <SCSI_ProcessRead>
}
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8006ffe:	2320      	movs	r3, #32
 8007000:	2205      	movs	r2, #5
 8007002:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8007006:	f7ff feab 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e7f5      	b.n	8006ffc <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 8007010:	233a      	movs	r3, #58	; 0x3a
 8007012:	2202      	movs	r2, #2
 8007014:	4639      	mov	r1, r7
 8007016:	4630      	mov	r0, r6
 8007018:	f7ff fea2 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	e7ec      	b.n	8006ffc <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 8007022:	2320      	movs	r3, #32
 8007024:	2205      	movs	r2, #5
 8007026:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff fe98 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e7e2      	b.n	8006ffc <SCSI_Read10+0x8e>
      return -1; /* error */
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	e7df      	b.n	8006ffc <SCSI_Read10+0x8e>

0800703c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007040:	4606      	mov	r6, r0
 8007042:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007044:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8007048:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 800704c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007050:	bf28      	it	cs
 8007052:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8007056:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800705a:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 800705e:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8007062:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8007066:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 800706a:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800706e:	b29b      	uxth	r3, r3
 8007070:	fbb1 f2f2 	udiv	r2, r1, r2
 8007074:	4639      	mov	r1, r7
 8007076:	4640      	mov	r0, r8
 8007078:	47c8      	blx	r9
 800707a:	2800      	cmp	r0, #0
 800707c:	db1d      	blt.n	80070ba <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 800707e:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8007082:	442b      	add	r3, r5
 8007084:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8007088:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 800708c:	1b5b      	subs	r3, r3, r5
 800708e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007092:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8007096:	1b55      	subs	r5, r2, r5
 8007098:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 800709c:	b1b3      	cbz	r3, 80070cc <SCSI_ProcessWrite+0x90>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 800709e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a2:	bf28      	it	cs
 80070a4:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	463a      	mov	r2, r7
 80070ac:	2101      	movs	r1, #1
 80070ae:	4630      	mov	r0, r6
 80070b0:	f006 fa2c 	bl	800d50c <USBD_LL_PrepareReceive>
  }
  
  return 0;
 80070b4:	2000      	movs	r0, #0
}
 80070b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 80070ba:	2303      	movs	r3, #3
 80070bc:	2204      	movs	r2, #4
 80070be:	4641      	mov	r1, r8
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff fe4d 	bl	8006d60 <SCSI_SenseCode>
    return -1; 
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	e7f4      	b.n	80070b6 <SCSI_ProcessWrite+0x7a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80070cc:	2100      	movs	r1, #0
 80070ce:	4630      	mov	r0, r6
 80070d0:	f7ff fd08 	bl	8006ae4 <MSC_BOT_SendCSW>
  return 0;
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7ee      	b.n	80070b6 <SCSI_ProcessWrite+0x7a>

080070d8 <SCSI_Write10>:
{
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	4605      	mov	r5, r0
 80070de:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80070e0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80070e4:	7a23      	ldrb	r3, [r4, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d172      	bne.n	80071d0 <SCSI_Write10+0xf8>
 80070ea:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 80070ec:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	db48      	blt.n	8007186 <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80070f4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4608      	mov	r0, r1
 80070fc:	4798      	blx	r3
 80070fe:	2800      	cmp	r0, #0
 8007100:	d14a      	bne.n	8007198 <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8007102:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4638      	mov	r0, r7
 800710a:	4798      	blx	r3
 800710c:	4680      	mov	r8, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d14b      	bne.n	80071aa <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007112:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 8007114:	78f2      	ldrb	r2, [r6, #3]
 8007116:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007118:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 800711c:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 800711e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8007122:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 8007124:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007126:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800712a:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 800712c:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800712e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007132:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 8007136:	4639      	mov	r1, r7
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff fec0 	bl	8006ebe <SCSI_CheckAddressRange>
 800713e:	2800      	cmp	r0, #0
 8007140:	db4a      	blt.n	80071d8 <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8007142:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8007146:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 800714a:	fb01 f202 	mul.w	r2, r1, r2
 800714e:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8007152:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8007156:	fb03 f301 	mul.w	r3, r3, r1
 800715a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800715e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8007162:	4293      	cmp	r3, r2
 8007164:	d12a      	bne.n	80071bc <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8007166:	2101      	movs	r1, #1
 8007168:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800716a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716e:	bf28      	it	cs
 8007170:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8007174:	b29b      	uxth	r3, r3
 8007176:	f104 020c 	add.w	r2, r4, #12
 800717a:	4628      	mov	r0, r5
 800717c:	f006 f9c6 	bl	800d50c <USBD_LL_PrepareReceive>
}
 8007180:	4640      	mov	r0, r8
 8007182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 8007186:	2320      	movs	r3, #32
 8007188:	2205      	movs	r2, #5
 800718a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800718e:	f7ff fde7 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 8007192:	f04f 38ff 	mov.w	r8, #4294967295
 8007196:	e7f3      	b.n	8007180 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8007198:	233a      	movs	r3, #58	; 0x3a
 800719a:	2202      	movs	r2, #2
 800719c:	4639      	mov	r1, r7
 800719e:	4628      	mov	r0, r5
 80071a0:	f7ff fdde 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 80071a4:	f04f 38ff 	mov.w	r8, #4294967295
 80071a8:	e7ea      	b.n	8007180 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80071aa:	2327      	movs	r3, #39	; 0x27
 80071ac:	2202      	movs	r2, #2
 80071ae:	4639      	mov	r1, r7
 80071b0:	4628      	mov	r0, r5
 80071b2:	f7ff fdd5 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 80071b6:	f04f 38ff 	mov.w	r8, #4294967295
 80071ba:	e7e1      	b.n	8007180 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80071bc:	2320      	movs	r3, #32
 80071be:	2205      	movs	r2, #5
 80071c0:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80071c4:	4628      	mov	r0, r5
 80071c6:	f7ff fdcb 	bl	8006d60 <SCSI_SenseCode>
      return -1;
 80071ca:	f04f 38ff 	mov.w	r8, #4294967295
 80071ce:	e7d7      	b.n	8007180 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 80071d0:	f7ff ff34 	bl	800703c <SCSI_ProcessWrite>
 80071d4:	4680      	mov	r8, r0
 80071d6:	e7d3      	b.n	8007180 <SCSI_Write10+0xa8>
      return -1; /* error */      
 80071d8:	f04f 38ff 	mov.w	r8, #4294967295
 80071dc:	e7d0      	b.n	8007180 <SCSI_Write10+0xa8>

080071de <SCSI_Verify10>:
{
 80071de:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80071e0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 80071e4:	7853      	ldrb	r3, [r2, #1]
 80071e6:	f013 0f02 	tst.w	r3, #2
 80071ea:	d10a      	bne.n	8007202 <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 80071ec:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 80071f0:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80071f4:	f7ff fe63 	bl	8006ebe <SCSI_CheckAddressRange>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	db09      	blt.n	8007210 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 80071fc:	2000      	movs	r0, #0
 80071fe:	8160      	strh	r0, [r4, #10]
}
 8007200:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 8007202:	2324      	movs	r3, #36	; 0x24
 8007204:	2205      	movs	r2, #5
 8007206:	f7ff fdab 	bl	8006d60 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	e7f7      	b.n	8007200 <SCSI_Verify10+0x22>
    return -1; /* error */      
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	e7f4      	b.n	8007200 <SCSI_Verify10+0x22>

08007216 <SCSI_ProcessCmd>:
{
 8007216:	b508      	push	{r3, lr}
  switch (params[0])
 8007218:	7813      	ldrb	r3, [r2, #0]
 800721a:	2b5a      	cmp	r3, #90	; 0x5a
 800721c:	d853      	bhi.n	80072c6 <SCSI_ProcessCmd+0xb0>
 800721e:	e8df f003 	tbb	[pc, r3]
 8007222:	522e      	.short	0x522e
 8007224:	52523152 	.word	0x52523152
 8007228:	52525252 	.word	0x52525252
 800722c:	52525252 	.word	0x52525252
 8007230:	52525252 	.word	0x52525252
 8007234:	52525234 	.word	0x52525234
 8007238:	52525252 	.word	0x52525252
 800723c:	5252373d 	.word	0x5252373d
 8007240:	5252523a 	.word	0x5252523a
 8007244:	46524352 	.word	0x46524352
 8007248:	52495252 	.word	0x52495252
 800724c:	5252524c 	.word	0x5252524c
 8007250:	52524f52 	.word	0x52524f52
 8007254:	52525252 	.word	0x52525252
 8007258:	52525252 	.word	0x52525252
 800725c:	52525252 	.word	0x52525252
 8007260:	52525252 	.word	0x52525252
 8007264:	52525252 	.word	0x52525252
 8007268:	52525252 	.word	0x52525252
 800726c:	52525252 	.word	0x52525252
 8007270:	52525252 	.word	0x52525252
 8007274:	52525252 	.word	0x52525252
 8007278:	52525252 	.word	0x52525252
 800727c:	40          	.byte	0x40
 800727d:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 800727e:	f7ff fd87 	bl	8006d90 <SCSI_TestUnitReady>
}
 8007282:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 8007284:	f7ff fd34 	bl	8006cf0 <SCSI_RequestSense>
 8007288:	e7fb      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_Inquiry(pdev, lun, params);
 800728a:	f7ff fce7 	bl	8006c5c <SCSI_Inquiry>
 800728e:	e7f8      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 8007290:	f7ff fd61 	bl	8006d56 <SCSI_StartStopUnit>
 8007294:	e7f5      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 8007296:	f7ff fd5e 	bl	8006d56 <SCSI_StartStopUnit>
 800729a:	e7f2      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense6 (pdev, lun, params);
 800729c:	f7ff fd04 	bl	8006ca8 <SCSI_ModeSense6>
 80072a0:	e7ef      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense10 (pdev, lun, params);
 80072a2:	f7ff fd13 	bl	8006ccc <SCSI_ModeSense10>
 80072a6:	e7ec      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 80072a8:	f7ff fd99 	bl	8006dde <SCSI_ReadFormatCapacity>
 80072ac:	e7e9      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadCapacity10(pdev, lun, params);
 80072ae:	f7ff fdd4 	bl	8006e5a <SCSI_ReadCapacity10>
 80072b2:	e7e6      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_Read10(pdev, lun, params); 
 80072b4:	f7ff fe5b 	bl	8006f6e <SCSI_Read10>
 80072b8:	e7e3      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_Write10(pdev, lun, params);
 80072ba:	f7ff ff0d 	bl	80070d8 <SCSI_Write10>
 80072be:	e7e0      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    return SCSI_Verify10(pdev, lun, params);
 80072c0:	f7ff ff8d 	bl	80071de <SCSI_Verify10>
 80072c4:	e7dd      	b.n	8007282 <SCSI_ProcessCmd+0x6c>
    SCSI_SenseCode(pdev, 
 80072c6:	2320      	movs	r3, #32
 80072c8:	2205      	movs	r2, #5
 80072ca:	f7ff fd49 	bl	8006d60 <SCSI_SenseCode>
    return -1;
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	e7d6      	b.n	8007282 <SCSI_ProcessCmd+0x6c>

080072d4 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80072d4:	b198      	cbz	r0, 80072fe <USBD_Init+0x2a>
{
 80072d6:	b508      	push	{r3, lr}
 80072d8:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80072da:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80072de:	b110      	cbz	r0, 80072e6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80072e0:	2000      	movs	r0, #0
 80072e2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80072e6:	b109      	cbz	r1, 80072ec <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80072e8:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 80072ec:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80072f4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072f6:	f006 f879 	bl	800d3ec <USBD_LL_Init>
  
  return USBD_OK; 
 80072fa:	2000      	movs	r0, #0
}
 80072fc:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80072fe:	2002      	movs	r0, #2
}
 8007300:	4770      	bx	lr

08007302 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007302:	b119      	cbz	r1, 800730c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007304:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8007308:	2000      	movs	r0, #0
 800730a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800730c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800730e:	4770      	bx	lr

08007310 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007310:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8007312:	f006 f8a5 	bl	800d460 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8007316:	2000      	movs	r0, #0
 8007318:	bd08      	pop	{r3, pc}

0800731a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800731a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800731c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007320:	b133      	cbz	r3, 8007330 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4798      	blx	r3
 8007326:	b908      	cbnz	r0, 800732c <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8007328:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 800732a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800732c:	2002      	movs	r0, #2
 800732e:	e7fc      	b.n	800732a <USBD_SetClassConfig+0x10>
 8007330:	2002      	movs	r0, #2
 8007332:	e7fa      	b.n	800732a <USBD_SetClassConfig+0x10>

08007334 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007334:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8007336:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4798      	blx	r3
  return USBD_OK;
}
 800733e:	2000      	movs	r0, #0
 8007340:	bd08      	pop	{r3, pc}

08007342 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007342:	b538      	push	{r3, r4, r5, lr}
 8007344:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007346:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f90c 	bl	8007568 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8007350:	2301      	movs	r3, #1
 8007352:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8007356:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800735a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800735e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8007362:	f001 031f 	and.w	r3, r1, #31
 8007366:	2b01      	cmp	r3, #1
 8007368:	d00e      	beq.n	8007388 <USBD_LL_SetupStage+0x46>
 800736a:	b13b      	cbz	r3, 800737c <USBD_LL_SetupStage+0x3a>
 800736c:	2b02      	cmp	r3, #2
 800736e:	d010      	beq.n	8007392 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007370:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007374:	4620      	mov	r0, r4
 8007376:	f006 f896 	bl	800d4a6 <USBD_LL_StallEP>
    break;
 800737a:	e003      	b.n	8007384 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800737c:	4629      	mov	r1, r5
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fa6b 	bl	800785a <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8007384:	2000      	movs	r0, #0
 8007386:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8007388:	4629      	mov	r1, r5
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fa89 	bl	80078a2 <USBD_StdItfReq>
    break;
 8007390:	e7f8      	b.n	8007384 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8007392:	4629      	mov	r1, r5
 8007394:	4620      	mov	r0, r4
 8007396:	f000 faa0 	bl	80078da <USBD_StdEPReq>
    break;
 800739a:	e7f3      	b.n	8007384 <USBD_LL_SetupStage+0x42>

0800739c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800739c:	b510      	push	{r4, lr}
 800739e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80073a0:	bb21      	cbnz	r1, 80073ec <USBD_LL_DataOutStage+0x50>
 80073a2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073a4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80073a8:	2a03      	cmp	r2, #3
 80073aa:	d001      	beq.n	80073b0 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80073ac:	2000      	movs	r0, #0
 80073ae:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80073b0:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80073b4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80073b8:	4291      	cmp	r1, r2
 80073ba:	d80c      	bhi.n	80073d6 <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073bc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	b123      	cbz	r3, 80073ce <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073c4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80073c8:	2a03      	cmp	r2, #3
 80073ca:	d100      	bne.n	80073ce <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 80073cc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 fb49 	bl	8007a66 <USBD_CtlSendStatus>
 80073d4:	e7ea      	b.n	80073ac <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 80073d6:	1a89      	subs	r1, r1, r2
 80073d8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 80073dc:	428a      	cmp	r2, r1
 80073de:	bf28      	it	cs
 80073e0:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 80073e2:	b292      	uxth	r2, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	f000 fb36 	bl	8007a56 <USBD_CtlContinueRx>
 80073ea:	e7df      	b.n	80073ac <USBD_LL_DataOutStage+0x10>
 80073ec:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 80073ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0d9      	beq.n	80073ac <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f8:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80073fc:	2903      	cmp	r1, #3
 80073fe:	d1d5      	bne.n	80073ac <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8007400:	4611      	mov	r1, r2
 8007402:	4798      	blx	r3
 8007404:	e7d2      	b.n	80073ac <USBD_LL_DataOutStage+0x10>

08007406 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8007406:	b510      	push	{r4, lr}
 8007408:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800740a:	2900      	cmp	r1, #0
 800740c:	d146      	bne.n	800749c <USBD_LL_DataInStage+0x96>
 800740e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007410:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8007414:	2a02      	cmp	r2, #2
 8007416:	d005      	beq.n	8007424 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8007418:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800741c:	2b01      	cmp	r3, #1
 800741e:	d039      	beq.n	8007494 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8007420:	2000      	movs	r0, #0
 8007422:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8007424:	69c1      	ldr	r1, [r0, #28]
 8007426:	6a02      	ldr	r2, [r0, #32]
 8007428:	4291      	cmp	r1, r2
 800742a:	d819      	bhi.n	8007460 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 800742c:	6981      	ldr	r1, [r0, #24]
 800742e:	fbb1 f3f2 	udiv	r3, r1, r2
 8007432:	fb02 1313 	mls	r3, r2, r3, r1
 8007436:	b92b      	cbnz	r3, 8007444 <USBD_LL_DataInStage+0x3e>
 8007438:	428a      	cmp	r2, r1
 800743a:	d803      	bhi.n	8007444 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 800743c:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8007440:	4299      	cmp	r1, r3
 8007442:	d31a      	bcc.n	800747a <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007444:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	b12b      	cbz	r3, 8007458 <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800744c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007450:	2a03      	cmp	r2, #3
 8007452:	d101      	bne.n	8007458 <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 8007454:	4620      	mov	r0, r4
 8007456:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fb0f 	bl	8007a7c <USBD_CtlReceiveStatus>
 800745e:	e7db      	b.n	8007418 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8007460:	1a8a      	subs	r2, r1, r2
 8007462:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8007464:	b292      	uxth	r2, r2
 8007466:	4619      	mov	r1, r3
 8007468:	f000 faed 	bl	8007a46 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800746c:	2300      	movs	r3, #0
 800746e:	461a      	mov	r2, r3
 8007470:	4619      	mov	r1, r3
 8007472:	4620      	mov	r0, r4
 8007474:	f006 f84a 	bl	800d50c <USBD_LL_PrepareReceive>
 8007478:	e7ce      	b.n	8007418 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800747a:	2200      	movs	r2, #0
 800747c:	4611      	mov	r1, r2
 800747e:	f000 fae2 	bl	8007a46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8007482:	2100      	movs	r1, #0
 8007484:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8007488:	460b      	mov	r3, r1
 800748a:	460a      	mov	r2, r1
 800748c:	4620      	mov	r0, r4
 800748e:	f006 f83d 	bl	800d50c <USBD_LL_PrepareReceive>
 8007492:	e7c1      	b.n	8007418 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800749a:	e7c1      	b.n	8007420 <USBD_LL_DataInStage+0x1a>
 800749c:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 800749e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0bb      	beq.n	8007420 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074a8:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80074ac:	2903      	cmp	r1, #3
 80074ae:	d1b7      	bne.n	8007420 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 80074b0:	4611      	mov	r1, r2
 80074b2:	4798      	blx	r3
 80074b4:	e7b4      	b.n	8007420 <USBD_LL_DataInStage+0x1a>

080074b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80074b6:	b538      	push	{r3, r4, r5, lr}
 80074b8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80074ba:	2340      	movs	r3, #64	; 0x40
 80074bc:	2200      	movs	r2, #0
 80074be:	4611      	mov	r1, r2
 80074c0:	f005 ffd6 	bl	800d470 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074c4:	2540      	movs	r5, #64	; 0x40
 80074c6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80074ca:	462b      	mov	r3, r5
 80074cc:	2200      	movs	r2, #0
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	4620      	mov	r0, r4
 80074d2:	f005 ffcd 	bl	800d470 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d6:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d8:	2301      	movs	r3, #1
 80074da:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80074de:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80074e2:	b12b      	cbz	r3, 80074f0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80074e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	7921      	ldrb	r1, [r4, #4]
 80074ec:	4620      	mov	r0, r4
 80074ee:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80074f0:	2000      	movs	r0, #0
 80074f2:	bd38      	pop	{r3, r4, r5, pc}

080074f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80074f4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80074f6:	2000      	movs	r0, #0
 80074f8:	4770      	bx	lr

080074fa <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80074fa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80074fe:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007502:	2304      	movs	r3, #4
 8007504:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007508:	2000      	movs	r0, #0
 800750a:	4770      	bx	lr

0800750c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800750c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8007510:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007514:	2000      	movs	r0, #0
 8007516:	4770      	bx	lr

08007518 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007518:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800751a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800751e:	2b03      	cmp	r3, #3
 8007520:	d001      	beq.n	8007526 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8007522:	2000      	movs	r0, #0
 8007524:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8007526:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f8      	beq.n	8007522 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8007530:	4798      	blx	r3
 8007532:	e7f6      	b.n	8007522 <USBD_LL_SOF+0xa>

08007534 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 8007534:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8007536:	e002      	b.n	800753e <USBD_GetLen+0xa>
    {
        len++;
 8007538:	3301      	adds	r3, #1
 800753a:	b2db      	uxtb	r3, r3
        buf++;
 800753c:	3001      	adds	r0, #1
    while (*buf != '\0') 
 800753e:	7802      	ldrb	r2, [r0, #0]
 8007540:	2a00      	cmp	r2, #0
 8007542:	d1f9      	bne.n	8007538 <USBD_GetLen+0x4>
    }

    return len;
}
 8007544:	4618      	mov	r0, r3
 8007546:	4770      	bx	lr

08007548 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007548:	884b      	ldrh	r3, [r1, #2]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d10b      	bne.n	8007566 <USBD_SetFeature+0x1e>
{
 800754e:	b510      	push	{r4, lr}
 8007550:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8007552:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007556:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fa81 	bl	8007a66 <USBD_CtlSendStatus>
}
 8007564:	bd10      	pop	{r4, pc}
 8007566:	4770      	bx	lr

08007568 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007568:	780b      	ldrb	r3, [r1, #0]
 800756a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800756c:	784b      	ldrb	r3, [r1, #1]
 800756e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007570:	788b      	ldrb	r3, [r1, #2]
 8007572:	78ca      	ldrb	r2, [r1, #3]
 8007574:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007578:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800757a:	790b      	ldrb	r3, [r1, #4]
 800757c:	794a      	ldrb	r2, [r1, #5]
 800757e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007582:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007584:	798b      	ldrb	r3, [r1, #6]
 8007586:	79ca      	ldrb	r2, [r1, #7]
 8007588:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800758c:	80c3      	strh	r3, [r0, #6]
}
 800758e:	4770      	bx	lr

08007590 <USBD_CtlError>:
{
 8007590:	b510      	push	{r4, lr}
 8007592:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007594:	2180      	movs	r1, #128	; 0x80
 8007596:	f005 ff86 	bl	800d4a6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800759a:	2100      	movs	r1, #0
 800759c:	4620      	mov	r0, r4
 800759e:	f005 ff82 	bl	800d4a6 <USBD_LL_StallEP>
}
 80075a2:	bd10      	pop	{r4, pc}

080075a4 <USBD_GetDescriptor>:
{
 80075a4:	b530      	push	{r4, r5, lr}
 80075a6:	b083      	sub	sp, #12
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 80075ac:	884a      	ldrh	r2, [r1, #2]
 80075ae:	0a13      	lsrs	r3, r2, #8
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	f200 8081 	bhi.w	80076ba <USBD_GetDescriptor+0x116>
 80075b8:	e8df f003 	tbb	[pc, r3]
 80075bc:	7f271304 	.word	0x7f271304
 80075c0:	637f      	.short	0x637f
 80075c2:	70          	.byte	0x70
 80075c3:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f10d 0106 	add.w	r1, sp, #6
 80075ce:	7c00      	ldrb	r0, [r0, #16]
 80075d0:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80075d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80075d6:	b112      	cbz	r2, 80075de <USBD_GetDescriptor+0x3a>
 80075d8:	88eb      	ldrh	r3, [r5, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d171      	bne.n	80076c2 <USBD_GetDescriptor+0x11e>
}
 80075de:	b003      	add	sp, #12
 80075e0:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80075e2:	7c03      	ldrb	r3, [r0, #16]
 80075e4:	b943      	cbnz	r3, 80075f8 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80075e6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f10d 0006 	add.w	r0, sp, #6
 80075f0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075f2:	2302      	movs	r3, #2
 80075f4:	7043      	strb	r3, [r0, #1]
 80075f6:	e7ec      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80075f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	f10d 0006 	add.w	r0, sp, #6
 8007602:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007604:	2302      	movs	r3, #2
 8007606:	7043      	strb	r3, [r0, #1]
 8007608:	e7e3      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	2a05      	cmp	r2, #5
 800760e:	d834      	bhi.n	800767a <USBD_GetDescriptor+0xd6>
 8007610:	e8df f002 	tbb	[pc, r2]
 8007614:	1b130b03 	.word	0x1b130b03
 8007618:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800761a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f10d 0106 	add.w	r1, sp, #6
 8007624:	7c00      	ldrb	r0, [r0, #16]
 8007626:	4798      	blx	r3
      break;
 8007628:	e7d3      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800762a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f10d 0106 	add.w	r1, sp, #6
 8007634:	7c00      	ldrb	r0, [r0, #16]
 8007636:	4798      	blx	r3
      break;
 8007638:	e7cb      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800763a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f10d 0106 	add.w	r1, sp, #6
 8007644:	7c00      	ldrb	r0, [r0, #16]
 8007646:	4798      	blx	r3
      break;
 8007648:	e7c3      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800764a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f10d 0106 	add.w	r1, sp, #6
 8007654:	7c00      	ldrb	r0, [r0, #16]
 8007656:	4798      	blx	r3
      break;
 8007658:	e7bb      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800765a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f10d 0106 	add.w	r1, sp, #6
 8007664:	7c00      	ldrb	r0, [r0, #16]
 8007666:	4798      	blx	r3
      break;
 8007668:	e7b3      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800766a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f10d 0106 	add.w	r1, sp, #6
 8007674:	7c00      	ldrb	r0, [r0, #16]
 8007676:	4798      	blx	r3
      break;
 8007678:	e7ab      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 800767a:	4629      	mov	r1, r5
 800767c:	f7ff ff88 	bl	8007590 <USBD_CtlError>
      return;
 8007680:	e7ad      	b.n	80075de <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007682:	7c03      	ldrb	r3, [r0, #16]
 8007684:	b933      	cbnz	r3, 8007694 <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007686:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	f10d 0006 	add.w	r0, sp, #6
 8007690:	4798      	blx	r3
      break;
 8007692:	e79e      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8007694:	4629      	mov	r1, r5
 8007696:	f7ff ff7b 	bl	8007590 <USBD_CtlError>
      return;
 800769a:	e7a0      	b.n	80075de <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800769c:	7c03      	ldrb	r3, [r0, #16]
 800769e:	b943      	cbnz	r3, 80076b2 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f10d 0006 	add.w	r0, sp, #6
 80076aa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ac:	2307      	movs	r3, #7
 80076ae:	7043      	strb	r3, [r0, #1]
      break; 
 80076b0:	e78f      	b.n	80075d2 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7ff ff6c 	bl	8007590 <USBD_CtlError>
      return;
 80076b8:	e791      	b.n	80075de <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 80076ba:	4629      	mov	r1, r5
 80076bc:	f7ff ff68 	bl	8007590 <USBD_CtlError>
    return;
 80076c0:	e78d      	b.n	80075de <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 80076c2:	429a      	cmp	r2, r3
 80076c4:	bf28      	it	cs
 80076c6:	461a      	movcs	r2, r3
 80076c8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80076cc:	4601      	mov	r1, r0
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 f9ac 	bl	8007a2c <USBD_CtlSendData>
 80076d4:	e783      	b.n	80075de <USBD_GetDescriptor+0x3a>

080076d6 <USBD_SetAddress>:
{
 80076d6:	b538      	push	{r3, r4, r5, lr}
 80076d8:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80076da:	888b      	ldrh	r3, [r1, #4]
 80076dc:	b9e3      	cbnz	r3, 8007718 <USBD_SetAddress+0x42>
 80076de:	88cb      	ldrh	r3, [r1, #6]
 80076e0:	b9d3      	cbnz	r3, 8007718 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80076e2:	788d      	ldrb	r5, [r1, #2]
 80076e4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80076e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d00c      	beq.n	800770a <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 80076f0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80076f4:	4629      	mov	r1, r5
 80076f6:	f005 fef9 	bl	800d4ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 f9b3 	bl	8007a66 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8007700:	b135      	cbz	r5, 8007710 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007702:	2302      	movs	r3, #2
 8007704:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007708:	e009      	b.n	800771e <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 800770a:	f7ff ff41 	bl	8007590 <USBD_CtlError>
 800770e:	e006      	b.n	800771e <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007710:	2301      	movs	r3, #1
 8007712:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007716:	e002      	b.n	800771e <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 8007718:	4620      	mov	r0, r4
 800771a:	f7ff ff39 	bl	8007590 <USBD_CtlError>
}
 800771e:	bd38      	pop	{r3, r4, r5, pc}

08007720 <USBD_SetConfig>:
{
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4604      	mov	r4, r0
 8007724:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8007726:	7889      	ldrb	r1, [r1, #2]
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <USBD_SetConfig+0xa0>)
 800772a:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800772c:	2901      	cmp	r1, #1
 800772e:	d809      	bhi.n	8007744 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8007730:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007734:	2b02      	cmp	r3, #2
 8007736:	d009      	beq.n	800774c <USBD_SetConfig+0x2c>
 8007738:	2b03      	cmp	r3, #3
 800773a:	d01c      	beq.n	8007776 <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 800773c:	4629      	mov	r1, r5
 800773e:	f7ff ff27 	bl	8007590 <USBD_CtlError>
      break;
 8007742:	e002      	b.n	800774a <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8007744:	4629      	mov	r1, r5
 8007746:	f7ff ff23 	bl	8007590 <USBD_CtlError>
}
 800774a:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 800774c:	b181      	cbz	r1, 8007770 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 800774e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007750:	2303      	movs	r3, #3
 8007752:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007756:	f7ff fde0 	bl	800731a <USBD_SetClassConfig>
 800775a:	2802      	cmp	r0, #2
 800775c:	d003      	beq.n	8007766 <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f981 	bl	8007a66 <USBD_CtlSendStatus>
 8007764:	e7f1      	b.n	800774a <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8007766:	4629      	mov	r1, r5
 8007768:	4620      	mov	r0, r4
 800776a:	f7ff ff11 	bl	8007590 <USBD_CtlError>
          return;
 800776e:	e7ec      	b.n	800774a <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 8007770:	f000 f979 	bl	8007a66 <USBD_CtlSendStatus>
 8007774:	e7e9      	b.n	800774a <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 8007776:	b189      	cbz	r1, 800779c <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8007778:	6843      	ldr	r3, [r0, #4]
 800777a:	4299      	cmp	r1, r3
 800777c:	d01d      	beq.n	80077ba <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800777e:	b2d9      	uxtb	r1, r3
 8007780:	f7ff fdd8 	bl	8007334 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <USBD_SetConfig+0xa0>)
 8007786:	7819      	ldrb	r1, [r3, #0]
 8007788:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800778a:	4620      	mov	r0, r4
 800778c:	f7ff fdc5 	bl	800731a <USBD_SetClassConfig>
 8007790:	2802      	cmp	r0, #2
 8007792:	d00d      	beq.n	80077b0 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8007794:	4620      	mov	r0, r4
 8007796:	f000 f966 	bl	8007a66 <USBD_CtlSendStatus>
 800779a:	e7d6      	b.n	800774a <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800779c:	2302      	movs	r3, #2
 800779e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80077a2:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80077a4:	f7ff fdc6 	bl	8007334 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 f95c 	bl	8007a66 <USBD_CtlSendStatus>
 80077ae:	e7cc      	b.n	800774a <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 80077b0:	4629      	mov	r1, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff feec 	bl	8007590 <USBD_CtlError>
          return;
 80077b8:	e7c7      	b.n	800774a <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 80077ba:	f000 f954 	bl	8007a66 <USBD_CtlSendStatus>
 80077be:	e7c4      	b.n	800774a <USBD_SetConfig+0x2a>
 80077c0:	200012f1 	.word	0x200012f1

080077c4 <USBD_GetConfig>:
{
 80077c4:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 80077c6:	88cb      	ldrh	r3, [r1, #6]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d108      	bne.n	80077de <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 80077cc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d007      	beq.n	80077e4 <USBD_GetConfig+0x20>
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d00d      	beq.n	80077f4 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 80077d8:	f7ff feda 	bl	8007590 <USBD_CtlError>
}
 80077dc:	e001      	b.n	80077e2 <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 80077de:	f7ff fed7 	bl	8007590 <USBD_CtlError>
}
 80077e2:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 80077e4:	4601      	mov	r1, r0
 80077e6:	2300      	movs	r3, #0
 80077e8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80077ec:	2201      	movs	r2, #1
 80077ee:	f000 f91d 	bl	8007a2c <USBD_CtlSendData>
      break;
 80077f2:	e7f6      	b.n	80077e2 <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 80077f4:	2201      	movs	r2, #1
 80077f6:	1d01      	adds	r1, r0, #4
 80077f8:	f000 f918 	bl	8007a2c <USBD_CtlSendData>
      break;
 80077fc:	e7f1      	b.n	80077e2 <USBD_GetConfig+0x1e>

080077fe <USBD_GetStatus>:
{
 80077fe:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8007800:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007804:	3b02      	subs	r3, #2
 8007806:	2b01      	cmp	r3, #1
 8007808:	d80c      	bhi.n	8007824 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800780a:	2301      	movs	r3, #1
 800780c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800780e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007812:	b10b      	cbz	r3, 8007818 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007814:	2303      	movs	r3, #3
 8007816:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8007818:	2202      	movs	r2, #2
 800781a:	f100 010c 	add.w	r1, r0, #12
 800781e:	f000 f905 	bl	8007a2c <USBD_CtlSendData>
}
 8007822:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8007824:	f7ff feb4 	bl	8007590 <USBD_CtlError>
}
 8007828:	e7fb      	b.n	8007822 <USBD_GetStatus+0x24>

0800782a <USBD_ClrFeature>:
{
 800782a:	b510      	push	{r4, lr}
 800782c:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 800782e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007832:	3b02      	subs	r3, #2
 8007834:	2b01      	cmp	r3, #1
 8007836:	d80d      	bhi.n	8007854 <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007838:	884b      	ldrh	r3, [r1, #2]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d109      	bne.n	8007852 <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 800783e:	2300      	movs	r3, #0
 8007840:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007844:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800784c:	4620      	mov	r0, r4
 800784e:	f000 f90a 	bl	8007a66 <USBD_CtlSendStatus>
}
 8007852:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8007854:	f7ff fe9c 	bl	8007590 <USBD_CtlError>
}
 8007858:	e7fb      	b.n	8007852 <USBD_ClrFeature+0x28>

0800785a <USBD_StdDevReq>:
{
 800785a:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 800785c:	784b      	ldrb	r3, [r1, #1]
 800785e:	2b09      	cmp	r3, #9
 8007860:	d81c      	bhi.n	800789c <USBD_StdDevReq+0x42>
 8007862:	e8df f003 	tbb	[pc, r3]
 8007866:	1812      	.short	0x1812
 8007868:	091b151b 	.word	0x091b151b
 800786c:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 8007870:	f7ff fe98 	bl	80075a4 <USBD_GetDescriptor>
}
 8007874:	2000      	movs	r0, #0
 8007876:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8007878:	f7ff ff2d 	bl	80076d6 <USBD_SetAddress>
    break;
 800787c:	e7fa      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 800787e:	f7ff ff4f 	bl	8007720 <USBD_SetConfig>
    break;
 8007882:	e7f7      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8007884:	f7ff ff9e 	bl	80077c4 <USBD_GetConfig>
    break;
 8007888:	e7f4      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 800788a:	f7ff ffb8 	bl	80077fe <USBD_GetStatus>
    break;
 800788e:	e7f1      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8007890:	f7ff fe5a 	bl	8007548 <USBD_SetFeature>
    break;
 8007894:	e7ee      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8007896:	f7ff ffc8 	bl	800782a <USBD_ClrFeature>
    break;
 800789a:	e7eb      	b.n	8007874 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 800789c:	f7ff fe78 	bl	8007590 <USBD_CtlError>
    break;
 80078a0:	e7e8      	b.n	8007874 <USBD_StdDevReq+0x1a>

080078a2 <USBD_StdItfReq>:
{
 80078a2:	b538      	push	{r3, r4, r5, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80078a8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d111      	bne.n	80078d4 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80078b0:	790b      	ldrb	r3, [r1, #4]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d80b      	bhi.n	80078ce <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 80078b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80078be:	88eb      	ldrh	r3, [r5, #6]
 80078c0:	b10b      	cbz	r3, 80078c6 <USBD_StdItfReq+0x24>
}
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 f8cd 	bl	8007a66 <USBD_CtlSendStatus>
 80078cc:	e7f9      	b.n	80078c2 <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 80078ce:	f7ff fe5f 	bl	8007590 <USBD_CtlError>
 80078d2:	e7f6      	b.n	80078c2 <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 80078d4:	f7ff fe5c 	bl	8007590 <USBD_CtlError>
    break;
 80078d8:	e7f3      	b.n	80078c2 <USBD_StdItfReq+0x20>

080078da <USBD_StdEPReq>:
{
 80078da:	b538      	push	{r3, r4, r5, lr}
 80078dc:	4605      	mov	r5, r0
 80078de:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80078e0:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80078e2:	780b      	ldrb	r3, [r1, #0]
 80078e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d105      	bne.n	80078f8 <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 80078ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	4798      	blx	r3
}
 80078f4:	2000      	movs	r0, #0
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 80078fa:	7863      	ldrb	r3, [r4, #1]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d025      	beq.n	800794c <USBD_StdEPReq+0x72>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d047      	beq.n	8007994 <USBD_StdEPReq+0xba>
 8007904:	2b03      	cmp	r3, #3
 8007906:	d1f5      	bne.n	80078f4 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8007908:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800790c:	2b02      	cmp	r3, #2
 800790e:	d005      	beq.n	800791c <USBD_StdEPReq+0x42>
 8007910:	2b03      	cmp	r3, #3
 8007912:	d00a      	beq.n	800792a <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8007914:	4621      	mov	r1, r4
 8007916:	f7ff fe3b 	bl	8007590 <USBD_CtlError>
      break;    
 800791a:	e7eb      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800791c:	2900      	cmp	r1, #0
 800791e:	d0e9      	beq.n	80078f4 <USBD_StdEPReq+0x1a>
 8007920:	2980      	cmp	r1, #128	; 0x80
 8007922:	d0e7      	beq.n	80078f4 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007924:	f005 fdbf 	bl	800d4a6 <USBD_LL_StallEP>
 8007928:	e7e4      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800792a:	8863      	ldrh	r3, [r4, #2]
 800792c:	b923      	cbnz	r3, 8007938 <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800792e:	b119      	cbz	r1, 8007938 <USBD_StdEPReq+0x5e>
 8007930:	2980      	cmp	r1, #128	; 0x80
 8007932:	d001      	beq.n	8007938 <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8007934:	f005 fdb7 	bl	800d4a6 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8007938:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f88e 	bl	8007a66 <USBD_CtlSendStatus>
      break;
 800794a:	e7d3      	b.n	80078f4 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 800794c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007950:	2b02      	cmp	r3, #2
 8007952:	d005      	beq.n	8007960 <USBD_StdEPReq+0x86>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d00a      	beq.n	800796e <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8007958:	4621      	mov	r1, r4
 800795a:	f7ff fe19 	bl	8007590 <USBD_CtlError>
      break;    
 800795e:	e7c9      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007960:	2900      	cmp	r1, #0
 8007962:	d0c7      	beq.n	80078f4 <USBD_StdEPReq+0x1a>
 8007964:	2980      	cmp	r1, #128	; 0x80
 8007966:	d0c5      	beq.n	80078f4 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007968:	f005 fd9d 	bl	800d4a6 <USBD_LL_StallEP>
 800796c:	e7c2      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800796e:	8863      	ldrh	r3, [r4, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1bf      	bne.n	80078f4 <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 8007974:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007978:	d103      	bne.n	8007982 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f873 	bl	8007a66 <USBD_CtlSendStatus>
 8007980:	e7b8      	b.n	80078f4 <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007982:	f005 fd98 	bl	800d4b6 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007986:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	4798      	blx	r3
 8007992:	e7f2      	b.n	800797a <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8007994:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007998:	2b02      	cmp	r3, #2
 800799a:	d005      	beq.n	80079a8 <USBD_StdEPReq+0xce>
 800799c:	2b03      	cmp	r3, #3
 800799e:	d009      	beq.n	80079b4 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 80079a0:	4621      	mov	r1, r4
 80079a2:	f7ff fdf5 	bl	8007590 <USBD_CtlError>
      break;
 80079a6:	e7a5      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 80079a8:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80079ac:	d0a2      	beq.n	80078f4 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80079ae:	f005 fd7a 	bl	800d4a6 <USBD_LL_StallEP>
 80079b2:	e79f      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80079b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80079b8:	d111      	bne.n	80079de <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80079ba:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80079be:	3410      	adds	r4, #16
 80079c0:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80079c4:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80079c6:	4628      	mov	r0, r5
 80079c8:	f005 fd7d 	bl	800d4c6 <USBD_LL_IsStallEP>
 80079cc:	b170      	cbz	r0, 80079ec <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 80079ce:	2301      	movs	r3, #1
 80079d0:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80079d2:	2202      	movs	r2, #2
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f828 	bl	8007a2c <USBD_CtlSendData>
      break;
 80079dc:	e78a      	b.n	80078f4 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80079de:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80079e2:	3401      	adds	r4, #1
 80079e4:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80079e8:	3404      	adds	r4, #4
 80079ea:	e7ec      	b.n	80079c6 <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 80079ec:	2300      	movs	r3, #0
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	e7ef      	b.n	80079d2 <USBD_StdEPReq+0xf8>

080079f2 <USBD_GetString>:
  if (desc != NULL) 
 80079f2:	b1d0      	cbz	r0, 8007a2a <USBD_GetString+0x38>
{
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	460d      	mov	r5, r1
 80079f8:	4616      	mov	r6, r2
 80079fa:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80079fc:	f7ff fd9a 	bl	8007534 <USBD_GetLen>
 8007a00:	3001      	adds	r0, #1
 8007a02:	0040      	lsls	r0, r0, #1
 8007a04:	b280      	uxth	r0, r0
 8007a06:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8007a08:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	706b      	strb	r3, [r5, #1]
 8007a0e:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8007a10:	e007      	b.n	8007a22 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8007a12:	3401      	adds	r4, #1
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2100      	movs	r1, #0
 8007a20:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8007a22:	7821      	ldrb	r1, [r4, #0]
 8007a24:	2900      	cmp	r1, #0
 8007a26:	d1f4      	bne.n	8007a12 <USBD_GetString+0x20>
}
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	4770      	bx	lr

08007a2c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007a30:	2202      	movs	r2, #2
 8007a32:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8007a36:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8007a38:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f005 fd5d 	bl	800d4fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007a42:	2000      	movs	r0, #0
 8007a44:	bd10      	pop	{r4, pc}

08007a46 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007a46:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007a48:	4613      	mov	r3, r2
 8007a4a:	460a      	mov	r2, r1
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f005 fd55 	bl	800d4fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd08      	pop	{r3, pc}

08007a56 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007a56:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8007a58:	4613      	mov	r3, r2
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f005 fd55 	bl	800d50c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007a62:	2000      	movs	r0, #0
 8007a64:	bd08      	pop	{r3, pc}

08007a66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007a66:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007a6e:	2300      	movs	r3, #0
 8007a70:	461a      	mov	r2, r3
 8007a72:	4619      	mov	r1, r3
 8007a74:	f005 fd42 	bl	800d4fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007a78:	2000      	movs	r0, #0
 8007a7a:	bd08      	pop	{r3, pc}

08007a7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007a7c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007a7e:	2305      	movs	r3, #5
 8007a80:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007a84:	2300      	movs	r3, #0
 8007a86:	461a      	mov	r2, r3
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f005 fd3f 	bl	800d50c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8007a8e:	2000      	movs	r0, #0
 8007a90:	bd08      	pop	{r3, pc}
	...

08007a94 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8007a94:	4b11      	ldr	r3, [pc, #68]	; (8007adc <FATFS_LinkDriverEx+0x48>)
 8007a96:	7a5b      	ldrb	r3, [r3, #9]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d901      	bls.n	8007aa2 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 8007a9e:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 8007aa0:	4770      	bx	lr
{
 8007aa2:	b430      	push	{r4, r5}
    disk.is_initialized[disk.nbr] = 0;
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	; (8007adc <FATFS_LinkDriverEx+0x48>)
 8007aa6:	7a65      	ldrb	r5, [r4, #9]
 8007aa8:	b2ed      	uxtb	r5, r5
 8007aaa:	2300      	movs	r3, #0
 8007aac:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 8007aae:	7a65      	ldrb	r5, [r4, #9]
 8007ab0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ab4:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8007ab6:	7a60      	ldrb	r0, [r4, #9]
 8007ab8:	4420      	add	r0, r4
 8007aba:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007abc:	7a62      	ldrb	r2, [r4, #9]
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	1c50      	adds	r0, r2, #1
 8007ac2:	b2c0      	uxtb	r0, r0
 8007ac4:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 8007ac6:	3230      	adds	r2, #48	; 0x30
 8007ac8:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007aca:	223a      	movs	r2, #58	; 0x3a
 8007acc:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 8007ace:	222f      	movs	r2, #47	; 0x2f
 8007ad0:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 8007ad2:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 8007ad4:	4618      	mov	r0, r3
}
 8007ad6:	bc30      	pop	{r4, r5}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200012f4 	.word	0x200012f4

08007ae0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007ae0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f7ff ffd6 	bl	8007a94 <FATFS_LinkDriverEx>
}
 8007ae8:	bd08      	pop	{r3, pc}
	...

08007aec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007aec:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <SD_initialize+0x20>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8007af4:	f7fe fe76 	bl	80067e4 <BSP_SD_Init>
 8007af8:	b920      	cbnz	r0, 8007b04 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8007afa:	4a04      	ldr	r2, [pc, #16]	; (8007b0c <SD_initialize+0x20>)
 8007afc:	7813      	ldrb	r3, [r2, #0]
 8007afe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007b02:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8007b04:	4b01      	ldr	r3, [pc, #4]	; (8007b0c <SD_initialize+0x20>)
 8007b06:	7818      	ldrb	r0, [r3, #0]
}
 8007b08:	bd08      	pop	{r3, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200000ac 	.word	0x200000ac

08007b10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b10:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <SD_status+0x20>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007b18:	f7fe fe32 	bl	8006780 <BSP_SD_GetCardState>
 8007b1c:	b920      	cbnz	r0, 8007b28 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <SD_status+0x20>)
 8007b20:	7813      	ldrb	r3, [r2, #0]
 8007b22:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007b26:	7013      	strb	r3, [r2, #0]
  }
  
  return Stat;
 8007b28:	4b01      	ldr	r3, [pc, #4]	; (8007b30 <SD_status+0x20>)
 8007b2a:	7818      	ldrb	r0, [r3, #0]
}
 8007b2c:	bd08      	pop	{r3, pc}
 8007b2e:	bf00      	nop
 8007b30:	200000ac 	.word	0x200000ac

08007b34 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <SD_read+0x28>)
 8007b3e:	f7fe fdff 	bl	8006740 <BSP_SD_ReadBlocks>
 8007b42:	b938      	cbnz	r0, 8007b54 <SD_read+0x20>
  uint32_t timeout = 100000;
 8007b44:	4c06      	ldr	r4, [pc, #24]	; (8007b60 <SD_read+0x2c>)
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007b46:	f7fe fe1b 	bl	8006780 <BSP_SD_GetCardState>
 8007b4a:	b120      	cbz	r0, 8007b56 <SD_read+0x22>
    {
      if (timeout-- == 0)
 8007b4c:	1e63      	subs	r3, r4, #1
 8007b4e:	b11c      	cbz	r4, 8007b58 <SD_read+0x24>
 8007b50:	461c      	mov	r4, r3
 8007b52:	e7f8      	b.n	8007b46 <SD_read+0x12>
  DRESULT res = RES_ERROR;
 8007b54:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }
  
  return res;
}
 8007b56:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 8007b58:	2001      	movs	r0, #1
 8007b5a:	e7fc      	b.n	8007b56 <SD_read+0x22>
 8007b5c:	05f5e100 	.word	0x05f5e100
 8007b60:	000186a0 	.word	0x000186a0

08007b64 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007b64:	b510      	push	{r4, lr}
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8007b6c:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <SD_write+0x28>)
 8007b6e:	f7fe fdf7 	bl	8006760 <BSP_SD_WriteBlocks>
 8007b72:	b938      	cbnz	r0, 8007b84 <SD_write+0x20>
  uint32_t timeout = 100000;
 8007b74:	4c06      	ldr	r4, [pc, #24]	; (8007b90 <SD_write+0x2c>)
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007b76:	f7fe fe03 	bl	8006780 <BSP_SD_GetCardState>
 8007b7a:	b120      	cbz	r0, 8007b86 <SD_write+0x22>
    {
      if (timeout-- == 0)
 8007b7c:	1e63      	subs	r3, r4, #1
 8007b7e:	b11c      	cbz	r4, 8007b88 <SD_write+0x24>
 8007b80:	461c      	mov	r4, r3
 8007b82:	e7f8      	b.n	8007b76 <SD_write+0x12>
  DRESULT res = RES_ERROR;
 8007b84:	2001      	movs	r0, #1
    }    
    res = RES_OK;
  }
  
  return res;
}
 8007b86:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 8007b88:	2001      	movs	r0, #1
 8007b8a:	e7fc      	b.n	8007b86 <SD_write+0x22>
 8007b8c:	05f5e100 	.word	0x05f5e100
 8007b90:	000186a0 	.word	0x000186a0

08007b94 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <SD_ioctl+0x54>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f013 0f01 	tst.w	r3, #1
 8007b9c:	d120      	bne.n	8007be0 <SD_ioctl+0x4c>
{
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	b088      	sub	sp, #32
 8007ba2:	4614      	mov	r4, r2
  
  switch (cmd)
 8007ba4:	2903      	cmp	r1, #3
 8007ba6:	d81d      	bhi.n	8007be4 <SD_ioctl+0x50>
 8007ba8:	e8df f001 	tbb	[pc, r1]
 8007bac:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007bb0:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 8007bb2:	b008      	add	sp, #32
 8007bb4:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8007bb6:	4668      	mov	r0, sp
 8007bb8:	f7fe fdec 	bl	8006794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007bbc:	9b06      	ldr	r3, [sp, #24]
 8007bbe:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8007bc0:	2000      	movs	r0, #0
    break;
 8007bc2:	e7f6      	b.n	8007bb2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8007bc4:	4668      	mov	r0, sp
 8007bc6:	f7fe fde5 	bl	8006794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8007bce:	2000      	movs	r0, #0
    break;
 8007bd0:	e7ef      	b.n	8007bb2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8007bd2:	4668      	mov	r0, sp
 8007bd4:	f7fe fdde 	bl	8006794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8007bdc:	2000      	movs	r0, #0
    break;
 8007bde:	e7e8      	b.n	8007bb2 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007be0:	2003      	movs	r0, #3
}
 8007be2:	4770      	bx	lr
    res = RES_PARERR;
 8007be4:	2004      	movs	r0, #4
 8007be6:	e7e4      	b.n	8007bb2 <SD_ioctl+0x1e>
 8007be8:	200000ac 	.word	0x200000ac

08007bec <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007bec:	2884      	cmp	r0, #132	; 0x84
 8007bee:	d001      	beq.n	8007bf4 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007bf0:	3003      	adds	r0, #3
 8007bf2:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007bf4:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8007bf6:	4770      	bx	lr

08007bf8 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf8:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8007bfc:	3000      	adds	r0, #0
 8007bfe:	bf18      	it	ne
 8007c00:	2001      	movne	r0, #1
 8007c02:	4770      	bx	lr

08007c04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c04:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007c06:	f000 ffd5 	bl	8008bb4 <vTaskStartScheduler>
  
  return osOK;
}
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	bd08      	pop	{r3, pc}

08007c0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c12:	b087      	sub	sp, #28
 8007c14:	4604      	mov	r4, r0
 8007c16:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c18:	6945      	ldr	r5, [r0, #20]
 8007c1a:	b1a5      	cbz	r5, 8007c46 <osThreadCreate+0x38>
 8007c1c:	6986      	ldr	r6, [r0, #24]
 8007c1e:	b196      	cbz	r6, 8007c46 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c20:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007c24:	f8d0 9000 	ldr.w	r9, [r0]
 8007c28:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007c2c:	f7ff ffde 	bl	8007bec <makeFreeRtosPriority>
 8007c30:	6922      	ldr	r2, [r4, #16]
 8007c32:	9602      	str	r6, [sp, #8]
 8007c34:	9501      	str	r5, [sp, #4]
 8007c36:	9000      	str	r0, [sp, #0]
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	f000 ff5b 	bl	8008af8 <xTaskCreateStatic>
 8007c42:	9005      	str	r0, [sp, #20]
 8007c44:	e013      	b.n	8007c6e <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c46:	6865      	ldr	r5, [r4, #4]
 8007c48:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c4a:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c4e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8007c52:	f7ff ffcb 	bl	8007bec <makeFreeRtosPriority>
 8007c56:	ab05      	add	r3, sp, #20
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	9000      	str	r0, [sp, #0]
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	fa1f f288 	uxth.w	r2, r8
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 ff72 	bl	8008b4e <xTaskCreate>
 8007c6a:	2801      	cmp	r0, #1
 8007c6c:	d103      	bne.n	8007c76 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c6e:	9805      	ldr	r0, [sp, #20]
}
 8007c70:	b007      	add	sp, #28
 8007c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7fa      	b.n	8007c70 <osThreadCreate+0x62>

08007c7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c7a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	b900      	cbnz	r0, 8007c82 <osDelay+0x8>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f8f6 	bl	8008e74 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c88:	2000      	movs	r0, #0
 8007c8a:	bd08      	pop	{r3, pc}

08007c8c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007c92:	6844      	ldr	r4, [r0, #4]
 8007c94:	b16c      	cbz	r4, 8007cb2 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8007c96:	2901      	cmp	r1, #1
 8007c98:	d009      	beq.n	8007cae <osTimerCreate+0x22>
 8007c9a:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007c9c:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8007c9e:	9401      	str	r4, [sp, #4]
 8007ca0:	9100      	str	r1, [sp, #0]
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4809      	ldr	r0, [pc, #36]	; (8007ccc <osTimerCreate+0x40>)
 8007ca6:	f001 fc2b 	bl	8009500 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007caa:	b002      	add	sp, #8
 8007cac:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8007cae:	2201      	movs	r2, #1
 8007cb0:	e7f4      	b.n	8007c9c <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8007cb2:	2901      	cmp	r1, #1
 8007cb4:	d007      	beq.n	8007cc6 <osTimerCreate+0x3a>
 8007cb6:	2200      	movs	r2, #0
                      (TaskFunction_t)timer_def->ptimer);
 8007cb8:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8007cba:	9100      	str	r1, [sp, #0]
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	4803      	ldr	r0, [pc, #12]	; (8007ccc <osTimerCreate+0x40>)
 8007cc0:	f001 fc02 	bl	80094c8 <xTimerCreate>
 8007cc4:	e7f1      	b.n	8007caa <osTimerCreate+0x1e>
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	e7f6      	b.n	8007cb8 <osTimerCreate+0x2c>
 8007cca:	bf00      	nop
 8007ccc:	0800ef3c 	.word	0x0800ef3c

08007cd0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007cd0:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007cd2:	6841      	ldr	r1, [r0, #4]
 8007cd4:	b119      	cbz	r1, 8007cde <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	f000 fb81 	bl	80083de <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007cdc:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f000 fb72 	bl	80083c8 <xQueueCreateMutex>
 8007ce4:	e7fa      	b.n	8007cdc <osMutexCreate+0xc>

08007ce6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007cea:	6842      	ldr	r2, [r0, #4]
 8007cec:	b192      	cbz	r2, 8007d14 <osSemaphoreCreate+0x2e>
    if (count == 1) {
 8007cee:	2901      	cmp	r1, #1
 8007cf0:	d006      	beq.n	8007d00 <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8007cf2:	4608      	mov	r0, r1
 8007cf4:	f000 fa58 	bl	80081a8 <xQueueCreateCountingSemaphoreStatic>
 8007cf8:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007d00:	2303      	movs	r3, #3
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	4613      	mov	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	4611      	mov	r1, r2
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	f000 f9dd 	bl	80080ca <xQueueGenericCreateStatic>
 8007d10:	4604      	mov	r4, r0
 8007d12:	e7f2      	b.n	8007cfa <osSemaphoreCreate+0x14>
    if (count == 1) {
 8007d14:	2901      	cmp	r1, #1
 8007d16:	d004      	beq.n	8007d22 <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateCounting(count, count);
 8007d18:	4608      	mov	r0, r1
 8007d1a:	f000 fa6a 	bl	80081f2 <xQueueCreateCountingSemaphore>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	e7eb      	b.n	8007cfa <osSemaphoreCreate+0x14>
      vSemaphoreCreateBinary(sema);
 8007d22:	2203      	movs	r2, #3
 8007d24:	2100      	movs	r1, #0
 8007d26:	2001      	movs	r0, #1
 8007d28:	f000 fa17 	bl	800815a <xQueueGenericCreate>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d0e3      	beq.n	8007cfa <osSemaphoreCreate+0x14>
 8007d32:	2300      	movs	r3, #0
 8007d34:	461a      	mov	r2, r3
 8007d36:	4619      	mov	r1, r3
 8007d38:	f000 fa7c 	bl	8008234 <xQueueGenericSend>
 8007d3c:	e7dd      	b.n	8007cfa <osSemaphoreCreate+0x14>
	...

08007d40 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007d40:	b530      	push	{r4, r5, lr}
 8007d42:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007d44:	2300      	movs	r3, #0
 8007d46:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8007d48:	b360      	cbz	r0, 8007da4 <osSemaphoreWait+0x64>
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8007d4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007d52:	d002      	beq.n	8007d5a <osSemaphoreWait+0x1a>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8007d54:	b919      	cbnz	r1, 8007d5e <osSemaphoreWait+0x1e>
  ticks = 0;
 8007d56:	461c      	mov	r4, r3
 8007d58:	e001      	b.n	8007d5e <osSemaphoreWait+0x1e>
    ticks = portMAX_DELAY;
 8007d5a:	f04f 34ff 	mov.w	r4, #4294967295
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8007d5e:	f7ff ff4b 	bl	8007bf8 <inHandlerMode>
 8007d62:	b190      	cbz	r0, 8007d8a <osSemaphoreWait+0x4a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007d64:	aa01      	add	r2, sp, #4
 8007d66:	2100      	movs	r1, #0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f000 fcd9 	bl	8008720 <xQueueReceiveFromISR>
 8007d6e:	2801      	cmp	r0, #1
 8007d70:	d11a      	bne.n	8007da8 <osSemaphoreWait+0x68>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	b1d3      	cbz	r3, 8007dac <osSemaphoreWait+0x6c>
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <osSemaphoreWait+0x70>)
 8007d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8007d86:	2000      	movs	r0, #0
 8007d88:	e008      	b.n	8007d9c <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 fbf3 	bl	800857c <xQueueGenericReceive>
 8007d96:	2801      	cmp	r0, #1
 8007d98:	d102      	bne.n	8007da0 <osSemaphoreWait+0x60>
  return osOK;
 8007d9a:	2000      	movs	r0, #0
}
 8007d9c:	b003      	add	sp, #12
 8007d9e:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 8007da0:	20ff      	movs	r0, #255	; 0xff
 8007da2:	e7fb      	b.n	8007d9c <osSemaphoreWait+0x5c>
    return osErrorParameter;
 8007da4:	2080      	movs	r0, #128	; 0x80
 8007da6:	e7f9      	b.n	8007d9c <osSemaphoreWait+0x5c>
      return osErrorOS;
 8007da8:	20ff      	movs	r0, #255	; 0xff
 8007daa:	e7f7      	b.n	8007d9c <osSemaphoreWait+0x5c>
  return osOK;
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7f5      	b.n	8007d9c <osSemaphoreWait+0x5c>
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007db4:	b510      	push	{r4, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8007dbe:	f7ff ff1b 	bl	8007bf8 <inHandlerMode>
 8007dc2:	b188      	cbz	r0, 8007de8 <osSemaphoreRelease+0x34>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007dc4:	a901      	add	r1, sp, #4
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fb7e 	bl	80084c8 <xQueueGiveFromISR>
 8007dcc:	2801      	cmp	r0, #1
 8007dce:	d116      	bne.n	8007dfe <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	b1b3      	cbz	r3, 8007e02 <osSemaphoreRelease+0x4e>
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <osSemaphoreRelease+0x58>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8007de4:	2000      	movs	r0, #0
 8007de6:	e008      	b.n	8007dfa <osSemaphoreRelease+0x46>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007de8:	2300      	movs	r3, #0
 8007dea:	461a      	mov	r2, r3
 8007dec:	4619      	mov	r1, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fa20 	bl	8008234 <xQueueGenericSend>
 8007df4:	2801      	cmp	r0, #1
 8007df6:	d106      	bne.n	8007e06 <osSemaphoreRelease+0x52>
  osStatus result = osOK;
 8007df8:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8007dfa:	b002      	add	sp, #8
 8007dfc:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8007dfe:	20ff      	movs	r0, #255	; 0xff
 8007e00:	e7fb      	b.n	8007dfa <osSemaphoreRelease+0x46>
  osStatus result = osOK;
 8007e02:	2000      	movs	r0, #0
 8007e04:	e7f9      	b.n	8007dfa <osSemaphoreRelease+0x46>
      result = osErrorOS;
 8007e06:	20ff      	movs	r0, #255	; 0xff
 8007e08:	e7f7      	b.n	8007dfa <osSemaphoreRelease+0x46>
 8007e0a:	bf00      	nop
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007e10:	b510      	push	{r4, lr}
 8007e12:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007e14:	6882      	ldr	r2, [r0, #8]
 8007e16:	b10a      	cbz	r2, 8007e1c <osMessageCreate+0xc>
 8007e18:	68c3      	ldr	r3, [r0, #12]
 8007e1a:	b933      	cbnz	r3, 8007e2a <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	6841      	ldr	r1, [r0, #4]
 8007e20:	6800      	ldr	r0, [r0, #0]
 8007e22:	f000 f99a 	bl	800815a <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007e26:	b002      	add	sp, #8
 8007e28:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007e2a:	6841      	ldr	r1, [r0, #4]
 8007e2c:	6800      	ldr	r0, [r0, #0]
 8007e2e:	2400      	movs	r4, #0
 8007e30:	9400      	str	r4, [sp, #0]
 8007e32:	f000 f94a 	bl	80080ca <xQueueGenericCreateStatic>
 8007e36:	e7f6      	b.n	8007e26 <osMessageCreate+0x16>

08007e38 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 8007e38:	b508      	push	{r3, lr}
  vTaskSuspendAll();
 8007e3a:	f000 ff07 	bl	8008c4c <vTaskSuspendAll>
  
  return osOK;
}
 8007e3e:	2000      	movs	r0, #0
 8007e40:	bd08      	pop	{r3, pc}

08007e42 <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 8007e42:	b508      	push	{r3, lr}
  if (xTaskResumeAll() == pdTRUE)
 8007e44:	f000 ff9c 	bl	8008d80 <xTaskResumeAll>
 8007e48:	2801      	cmp	r0, #1
 8007e4a:	d101      	bne.n	8007e50 <osThreadResumeAll+0xe>
    return osOK;
 8007e4c:	2000      	movs	r0, #0
  else
    return osErrorOS;
  
}
 8007e4e:	bd08      	pop	{r3, pc}
    return osErrorOS;
 8007e50:	20ff      	movs	r0, #255	; 0xff
 8007e52:	e7fc      	b.n	8007e4e <osThreadResumeAll+0xc>

08007e54 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e54:	f100 0308 	add.w	r3, r0, #8
 8007e58:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e60:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e68:	4770      	bx	lr

08007e6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e6e:	4770      	bx	lr

08007e70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e70:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e72:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e78:	689a      	ldr	r2, [r3, #8]
 8007e7a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e7c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e7e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007e80:	6803      	ldr	r3, [r0, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	6003      	str	r3, [r0, #0]
}
 8007e86:	4770      	bx	lr

08007e88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e88:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e8a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e8c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007e90:	d002      	beq.n	8007e98 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e92:	f100 0208 	add.w	r2, r0, #8
 8007e96:	e002      	b.n	8007e9e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e98:	6902      	ldr	r2, [r0, #16]
 8007e9a:	e004      	b.n	8007ea6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	6853      	ldr	r3, [r2, #4]
 8007ea0:	681c      	ldr	r4, [r3, #0]
 8007ea2:	42ac      	cmp	r4, r5
 8007ea4:	d9fa      	bls.n	8007e9c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea6:	6853      	ldr	r3, [r2, #4]
 8007ea8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eaa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eac:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eae:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007eb0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007eb2:	6803      	ldr	r3, [r0, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6003      	str	r3, [r0, #0]
}
 8007eb8:	bc30      	pop	{r4, r5}
 8007eba:	4770      	bx	lr

08007ebc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ebc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ebe:	6842      	ldr	r2, [r0, #4]
 8007ec0:	6881      	ldr	r1, [r0, #8]
 8007ec2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ec4:	6882      	ldr	r2, [r0, #8]
 8007ec6:	6841      	ldr	r1, [r0, #4]
 8007ec8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4282      	cmp	r2, r0
 8007ece:	d005      	beq.n	8007edc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	3801      	subs	r0, #1
 8007ed8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8007eda:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007edc:	6882      	ldr	r2, [r0, #8]
 8007ede:	605a      	str	r2, [r3, #4]
 8007ee0:	e7f6      	b.n	8007ed0 <uxListRemove+0x14>

08007ee2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ee6:	f001 fcfd 	bl	80098e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d004      	beq.n	8007efc <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007ef2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007ef4:	f001 fd18 	bl	8009928 <vPortExitCritical>

	return xReturn;
}
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007efc:	2401      	movs	r4, #1
 8007efe:	e7f9      	b.n	8007ef4 <prvIsQueueFull+0x12>

08007f00 <prvIsQueueEmpty>:
{
 8007f00:	b510      	push	{r4, lr}
 8007f02:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007f04:	f001 fcee 	bl	80098e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f0a:	b123      	cbz	r3, 8007f16 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007f0c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007f0e:	f001 fd0b 	bl	8009928 <vPortExitCritical>
}
 8007f12:	4620      	mov	r0, r4
 8007f14:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007f16:	2401      	movs	r4, #1
 8007f18:	e7f9      	b.n	8007f0e <prvIsQueueEmpty+0xe>

08007f1a <prvCopyDataToQueue>:
{
 8007f1a:	b570      	push	{r4, r5, r6, lr}
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f20:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007f24:	b95a      	cbnz	r2, 8007f3e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f26:	6803      	ldr	r3, [r0, #0]
 8007f28:	b11b      	cbz	r3, 8007f32 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007f2a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007f30:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007f32:	6840      	ldr	r0, [r0, #4]
 8007f34:	f001 f9a4 	bl	8009280 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	e7f6      	b.n	8007f2c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007f3e:	b96e      	cbnz	r6, 8007f5c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007f40:	6880      	ldr	r0, [r0, #8]
 8007f42:	f005 fb6a 	bl	800d61a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007f46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f48:	68a3      	ldr	r3, [r4, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d319      	bcc.n	8007f88 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e7e7      	b.n	8007f2c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5c:	68c0      	ldr	r0, [r0, #12]
 8007f5e:	f005 fb5c 	bl	800d61a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007f62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f64:	4252      	negs	r2, r2
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	428b      	cmp	r3, r1
 8007f70:	d202      	bcs.n	8007f78 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	441a      	add	r2, r3
 8007f76:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007f78:	2e02      	cmp	r6, #2
 8007f7a:	d001      	beq.n	8007f80 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e7d5      	b.n	8007f2c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f80:	b125      	cbz	r5, 8007f8c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8007f82:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7d1      	b.n	8007f2c <prvCopyDataToQueue+0x12>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7cf      	b.n	8007f2c <prvCopyDataToQueue+0x12>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e7cd      	b.n	8007f2c <prvCopyDataToQueue+0x12>

08007f90 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f90:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007f92:	b172      	cbz	r2, 8007fb2 <prvCopyDataFromQueue+0x22>
{
 8007f94:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007f96:	68c3      	ldr	r3, [r0, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f9c:	6844      	ldr	r4, [r0, #4]
 8007f9e:	42a3      	cmp	r3, r4
 8007fa0:	d301      	bcc.n	8007fa6 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007fa2:	6803      	ldr	r3, [r0, #0]
 8007fa4:	60c3      	str	r3, [r0, #12]
 8007fa6:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007fa8:	68c1      	ldr	r1, [r0, #12]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f005 fb35 	bl	800d61a <memcpy>
}
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	4770      	bx	lr

08007fb4 <prvUnlockQueue>:
{
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007fb8:	f001 fc94 	bl	80098e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007fbc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8007fc0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fc2:	e003      	b.n	8007fcc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007fc4:	f001 f8f6 	bl	80091b4 <vTaskMissedYield>
			--cTxLock;
 8007fc8:	3c01      	subs	r4, #1
 8007fca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	dd08      	ble.n	8007fe2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fd2:	b133      	cbz	r3, 8007fe2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007fd8:	f001 f842 	bl	8009060 <xTaskRemoveFromEventList>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0f3      	beq.n	8007fc8 <prvUnlockQueue+0x14>
 8007fe0:	e7f0      	b.n	8007fc4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007fe2:	23ff      	movs	r3, #255	; 0xff
 8007fe4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007fe8:	f001 fc9e 	bl	8009928 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007fec:	f001 fc7a 	bl	80098e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007ff0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007ff4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ff6:	e003      	b.n	8008000 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8007ff8:	f001 f8dc 	bl	80091b4 <vTaskMissedYield>
				--cRxLock;
 8007ffc:	3c01      	subs	r4, #1
 8007ffe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008000:	2c00      	cmp	r4, #0
 8008002:	dd08      	ble.n	8008016 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008004:	692b      	ldr	r3, [r5, #16]
 8008006:	b133      	cbz	r3, 8008016 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008008:	f105 0010 	add.w	r0, r5, #16
 800800c:	f001 f828 	bl	8009060 <xTaskRemoveFromEventList>
 8008010:	2800      	cmp	r0, #0
 8008012:	d0f3      	beq.n	8007ffc <prvUnlockQueue+0x48>
 8008014:	e7f0      	b.n	8007ff8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008016:	23ff      	movs	r3, #255	; 0xff
 8008018:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800801c:	f001 fc84 	bl	8009928 <vPortExitCritical>
}
 8008020:	bd38      	pop	{r3, r4, r5, pc}
	...

08008024 <xQueueGenericReset>:
{
 8008024:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008026:	b940      	cbnz	r0, 800803a <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	e7fe      	b.n	8008038 <xQueueGenericReset+0x14>
 800803a:	4604      	mov	r4, r0
 800803c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800803e:	f001 fc51 	bl	80098e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008042:	6821      	ldr	r1, [r4, #0]
 8008044:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008048:	fb03 1002 	mla	r0, r3, r2, r1
 800804c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800804e:	2000      	movs	r0, #0
 8008050:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008052:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008054:	3a01      	subs	r2, #1
 8008056:	fb02 1303 	mla	r3, r2, r3, r1
 800805a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800805c:	23ff      	movs	r3, #255	; 0xff
 800805e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008066:	b9a5      	cbnz	r5, 8008092 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	b91b      	cbnz	r3, 8008074 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800806c:	f001 fc5c 	bl	8009928 <vPortExitCritical>
}
 8008070:	2001      	movs	r0, #1
 8008072:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008074:	f104 0010 	add.w	r0, r4, #16
 8008078:	f000 fff2 	bl	8009060 <xTaskRemoveFromEventList>
 800807c:	2800      	cmp	r0, #0
 800807e:	d0f5      	beq.n	800806c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <xQueueGenericReset+0x80>)
 8008082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	e7ec      	b.n	800806c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008092:	f104 0010 	add.w	r0, r4, #16
 8008096:	f7ff fedd 	bl	8007e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800809a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800809e:	f7ff fed9 	bl	8007e54 <vListInitialise>
 80080a2:	e7e3      	b.n	800806c <xQueueGenericReset+0x48>
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <prvInitialiseNewQueue>:
{
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	461d      	mov	r5, r3
 80080ac:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80080ae:	460b      	mov	r3, r1
 80080b0:	b149      	cbz	r1, 80080c6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080b2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80080b4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080b6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080b8:	2101      	movs	r1, #1
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff ffb2 	bl	8008024 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80080c0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080c6:	6024      	str	r4, [r4, #0]
 80080c8:	e7f4      	b.n	80080b4 <prvInitialiseNewQueue+0xc>

080080ca <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080ca:	b940      	cbnz	r0, 80080de <xQueueGenericCreateStatic+0x14>
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericCreateStatic+0x12>
	{
 80080de:	b510      	push	{r4, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80080e4:	b153      	cbz	r3, 80080fc <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080e6:	b192      	cbz	r2, 800810e <xQueueGenericCreateStatic+0x44>
 80080e8:	b989      	cbnz	r1, 800810e <xQueueGenericCreateStatic+0x44>
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	e7fe      	b.n	80080fa <xQueueGenericCreateStatic+0x30>
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	e7fe      	b.n	800810c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800810e:	b94a      	cbnz	r2, 8008124 <xQueueGenericCreateStatic+0x5a>
 8008110:	b141      	cbz	r1, 8008124 <xQueueGenericCreateStatic+0x5a>
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	e7fe      	b.n	8008122 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008124:	2050      	movs	r0, #80	; 0x50
 8008126:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008128:	9803      	ldr	r0, [sp, #12]
 800812a:	2850      	cmp	r0, #80	; 0x50
 800812c:	d008      	beq.n	8008140 <xQueueGenericCreateStatic+0x76>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	e7fe      	b.n	800813e <xQueueGenericCreateStatic+0x74>
 8008140:	4620      	mov	r0, r4
 8008142:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800814a:	9400      	str	r4, [sp, #0]
 800814c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008150:	f7ff ffaa 	bl	80080a8 <prvInitialiseNewQueue>
	}
 8008154:	4620      	mov	r0, r4
 8008156:	b004      	add	sp, #16
 8008158:	bd10      	pop	{r4, pc}

0800815a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800815a:	b940      	cbnz	r0, 800816e <xQueueGenericCreate+0x14>
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	e7fe      	b.n	800816c <xQueueGenericCreate+0x12>
	{
 800816e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008170:	b083      	sub	sp, #12
 8008172:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008174:	b111      	cbz	r1, 800817c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008176:	fb01 f000 	mul.w	r0, r1, r0
 800817a:	e000      	b.n	800817e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800817c:	2000      	movs	r0, #0
 800817e:	4617      	mov	r7, r2
 8008180:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008182:	3050      	adds	r0, #80	; 0x50
 8008184:	f001 fd10 	bl	8009ba8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008188:	4605      	mov	r5, r0
 800818a:	b150      	cbz	r0, 80081a2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800818c:	2300      	movs	r3, #0
 800818e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008192:	9000      	str	r0, [sp, #0]
 8008194:	463b      	mov	r3, r7
 8008196:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800819a:	4621      	mov	r1, r4
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff ff83 	bl	80080a8 <prvInitialiseNewQueue>
	}
 80081a2:	4628      	mov	r0, r5
 80081a4:	b003      	add	sp, #12
 80081a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081a8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80081a8:	b940      	cbnz	r0, 80081bc <xQueueCreateCountingSemaphoreStatic+0x14>
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	e7fe      	b.n	80081ba <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081bc:	4288      	cmp	r0, r1
 80081be:	d208      	bcs.n	80081d2 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	e7fe      	b.n	80081d0 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 80081d2:	b510      	push	{r4, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	4613      	mov	r3, r2
 80081d8:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081da:	2202      	movs	r2, #2
 80081dc:	9200      	str	r2, [sp, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	4611      	mov	r1, r2
 80081e2:	f7ff ff72 	bl	80080ca <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80081e6:	4603      	mov	r3, r0
 80081e8:	b100      	cbz	r0, 80081ec <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081ea:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80081ec:	4618      	mov	r0, r3
 80081ee:	b002      	add	sp, #8
 80081f0:	bd10      	pop	{r4, pc}

080081f2 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80081f2:	b940      	cbnz	r0, 8008206 <xQueueCreateCountingSemaphore+0x14>
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	e7fe      	b.n	8008204 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008206:	4288      	cmp	r0, r1
 8008208:	d208      	bcs.n	800821c <xQueueCreateCountingSemaphore+0x2a>
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	e7fe      	b.n	800821a <xQueueCreateCountingSemaphore+0x28>
	{
 800821c:	b510      	push	{r4, lr}
 800821e:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008220:	2202      	movs	r2, #2
 8008222:	2100      	movs	r1, #0
 8008224:	f7ff ff99 	bl	800815a <xQueueGenericCreate>
		if( xHandle != NULL )
 8008228:	4603      	mov	r3, r0
 800822a:	b100      	cbz	r0, 800822e <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800822c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800822e:	4618      	mov	r0, r3
 8008230:	bd10      	pop	{r4, pc}
	...

08008234 <xQueueGenericSend>:
{
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	b085      	sub	sp, #20
 8008238:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800823a:	b160      	cbz	r0, 8008256 <xQueueGenericSend+0x22>
 800823c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823e:	b999      	cbnz	r1, 8008268 <xQueueGenericSend+0x34>
 8008240:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008242:	b18a      	cbz	r2, 8008268 <xQueueGenericSend+0x34>
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	e7fe      	b.n	8008254 <xQueueGenericSend+0x20>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	e7fe      	b.n	8008266 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008268:	2b02      	cmp	r3, #2
 800826a:	d10b      	bne.n	8008284 <xQueueGenericSend+0x50>
 800826c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800826e:	2a01      	cmp	r2, #1
 8008270:	d008      	beq.n	8008284 <xQueueGenericSend+0x50>
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	e7fe      	b.n	8008282 <xQueueGenericSend+0x4e>
 8008284:	461e      	mov	r6, r3
 8008286:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008288:	f000 ff9a 	bl	80091c0 <xTaskGetSchedulerState>
 800828c:	b950      	cbnz	r0, 80082a4 <xQueueGenericSend+0x70>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	b153      	cbz	r3, 80082a8 <xQueueGenericSend+0x74>
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	e7fe      	b.n	80082a2 <xQueueGenericSend+0x6e>
 80082a4:	2500      	movs	r5, #0
 80082a6:	e03a      	b.n	800831e <xQueueGenericSend+0xea>
 80082a8:	2500      	movs	r5, #0
 80082aa:	e038      	b.n	800831e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082ac:	4632      	mov	r2, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fe32 	bl	8007f1a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082b8:	b94b      	cbnz	r3, 80082ce <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 80082ba:	b1a8      	cbz	r0, 80082e8 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80082bc:	4b3b      	ldr	r3, [pc, #236]	; (80083ac <xQueueGenericSend+0x178>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	e00c      	b.n	80082e8 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082d2:	f000 fec5 	bl	8009060 <xTaskRemoveFromEventList>
 80082d6:	b138      	cbz	r0, 80082e8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b34      	ldr	r3, [pc, #208]	; (80083ac <xQueueGenericSend+0x178>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80082e8:	f001 fb1e 	bl	8009928 <vPortExitCritical>
				return pdPASS;
 80082ec:	2001      	movs	r0, #1
}
 80082ee:	b005      	add	sp, #20
 80082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80082f2:	f001 fb19 	bl	8009928 <vPortExitCritical>
					return errQUEUE_FULL;
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7f9      	b.n	80082ee <xQueueGenericSend+0xba>
					vTaskSetTimeOutState( &xTimeOut );
 80082fa:	a802      	add	r0, sp, #8
 80082fc:	f000 fef6 	bl	80090ec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008300:	2501      	movs	r5, #1
 8008302:	e019      	b.n	8008338 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008304:	2300      	movs	r3, #0
 8008306:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800830a:	e021      	b.n	8008350 <xQueueGenericSend+0x11c>
 800830c:	2300      	movs	r3, #0
 800830e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008312:	e023      	b.n	800835c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff fe4d 	bl	8007fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800831a:	f000 fd31 	bl	8008d80 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800831e:	f001 fae1 	bl	80098e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008322:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008324:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008326:	429a      	cmp	r2, r3
 8008328:	d3c0      	bcc.n	80082ac <xQueueGenericSend+0x78>
 800832a:	2e02      	cmp	r6, #2
 800832c:	d0be      	beq.n	80082ac <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0de      	beq.n	80082f2 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008334:	2d00      	cmp	r5, #0
 8008336:	d0e0      	beq.n	80082fa <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008338:	f001 faf6 	bl	8009928 <vPortExitCritical>
		vTaskSuspendAll();
 800833c:	f000 fc86 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008340:	f001 fad0 	bl	80098e4 <vPortEnterCritical>
 8008344:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008348:	b25b      	sxtb	r3, r3
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d0d9      	beq.n	8008304 <xQueueGenericSend+0xd0>
 8008350:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008354:	b25b      	sxtb	r3, r3
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d0d7      	beq.n	800830c <xQueueGenericSend+0xd8>
 800835c:	f001 fae4 	bl	8009928 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008360:	a901      	add	r1, sp, #4
 8008362:	a802      	add	r0, sp, #8
 8008364:	f000 fed8 	bl	8009118 <xTaskCheckForTimeOut>
 8008368:	b9c8      	cbnz	r0, 800839e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff fdb9 	bl	8007ee2 <prvIsQueueFull>
 8008370:	2800      	cmp	r0, #0
 8008372:	d0cf      	beq.n	8008314 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008374:	9901      	ldr	r1, [sp, #4]
 8008376:	f104 0010 	add.w	r0, r4, #16
 800837a:	f000 fe3d 	bl	8008ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fe18 	bl	8007fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008384:	f000 fcfc 	bl	8008d80 <xTaskResumeAll>
 8008388:	2800      	cmp	r0, #0
 800838a:	d1c8      	bne.n	800831e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <xQueueGenericSend+0x178>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	e7bf      	b.n	800831e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fe08 	bl	8007fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a4:	f000 fcec 	bl	8008d80 <xTaskResumeAll>
			return errQUEUE_FULL;
 80083a8:	2000      	movs	r0, #0
 80083aa:	e7a0      	b.n	80082ee <xQueueGenericSend+0xba>
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80083b0:	b148      	cbz	r0, 80083c6 <prvInitialiseMutex+0x16>
	{
 80083b2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80083b4:	2100      	movs	r1, #0
 80083b6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80083b8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80083ba:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083bc:	460b      	mov	r3, r1
 80083be:	460a      	mov	r2, r1
 80083c0:	f7ff ff38 	bl	8008234 <xQueueGenericSend>
	}
 80083c4:	bd08      	pop	{r3, pc}
 80083c6:	4770      	bx	lr

080083c8 <xQueueCreateMutex>:
	{
 80083c8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80083ca:	4602      	mov	r2, r0
 80083cc:	2100      	movs	r1, #0
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7ff fec3 	bl	800815a <xQueueGenericCreate>
 80083d4:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80083d6:	f7ff ffeb 	bl	80083b0 <prvInitialiseMutex>
	}
 80083da:	4620      	mov	r0, r4
 80083dc:	bd10      	pop	{r4, pc}

080083de <xQueueCreateMutexStatic>:
	{
 80083de:	b510      	push	{r4, lr}
 80083e0:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80083e2:	9000      	str	r0, [sp, #0]
 80083e4:	460b      	mov	r3, r1
 80083e6:	2200      	movs	r2, #0
 80083e8:	4611      	mov	r1, r2
 80083ea:	2001      	movs	r0, #1
 80083ec:	f7ff fe6d 	bl	80080ca <xQueueGenericCreateStatic>
 80083f0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80083f2:	f7ff ffdd 	bl	80083b0 <prvInitialiseMutex>
	}
 80083f6:	4620      	mov	r0, r4
 80083f8:	b002      	add	sp, #8
 80083fa:	bd10      	pop	{r4, pc}

080083fc <xQueueGenericSendFromISR>:
{
 80083fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008400:	b160      	cbz	r0, 800841c <xQueueGenericSendFromISR+0x20>
 8008402:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008404:	b999      	cbnz	r1, 800842e <xQueueGenericSendFromISR+0x32>
 8008406:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008408:	b188      	cbz	r0, 800842e <xQueueGenericSendFromISR+0x32>
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	e7fe      	b.n	800841a <xQueueGenericSendFromISR+0x1e>
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	e7fe      	b.n	800842c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800842e:	2b02      	cmp	r3, #2
 8008430:	d10b      	bne.n	800844a <xQueueGenericSendFromISR+0x4e>
 8008432:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008434:	2801      	cmp	r0, #1
 8008436:	d008      	beq.n	800844a <xQueueGenericSendFromISR+0x4e>
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	e7fe      	b.n	8008448 <xQueueGenericSendFromISR+0x4c>
 800844a:	461f      	mov	r7, r3
 800844c:	4690      	mov	r8, r2
 800844e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008450:	f001 fb20 	bl	8009a94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008454:	f3ef 8611 	mrs	r6, BASEPRI
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008468:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800846a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800846c:	429a      	cmp	r2, r3
 800846e:	d303      	bcc.n	8008478 <xQueueGenericSendFromISR+0x7c>
 8008470:	2f02      	cmp	r7, #2
 8008472:	d001      	beq.n	8008478 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8008474:	2000      	movs	r0, #0
 8008476:	e00f      	b.n	8008498 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008478:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800847c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800847e:	463a      	mov	r2, r7
 8008480:	4649      	mov	r1, r9
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff fd49 	bl	8007f1a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008488:	f1b5 3fff 	cmp.w	r5, #4294967295
 800848c:	d008      	beq.n	80084a0 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800848e:	1c6b      	adds	r3, r5, #1
 8008490:	b25b      	sxtb	r3, r3
 8008492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008496:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008498:	f386 8811 	msr	BASEPRI, r6
}
 800849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a2:	b15b      	cbz	r3, 80084bc <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084a8:	f000 fdda 	bl	8009060 <xTaskRemoveFromEventList>
 80084ac:	b140      	cbz	r0, 80084c0 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80084ae:	f1b8 0f00 	cmp.w	r8, #0
 80084b2:	d007      	beq.n	80084c4 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084b4:	2001      	movs	r0, #1
 80084b6:	f8c8 0000 	str.w	r0, [r8]
 80084ba:	e7ed      	b.n	8008498 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80084bc:	2001      	movs	r0, #1
 80084be:	e7eb      	b.n	8008498 <xQueueGenericSendFromISR+0x9c>
 80084c0:	2001      	movs	r0, #1
 80084c2:	e7e9      	b.n	8008498 <xQueueGenericSendFromISR+0x9c>
 80084c4:	2001      	movs	r0, #1
 80084c6:	e7e7      	b.n	8008498 <xQueueGenericSendFromISR+0x9c>

080084c8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80084c8:	b160      	cbz	r0, 80084e4 <xQueueGiveFromISR+0x1c>
{
 80084ca:	b570      	push	{r4, r5, r6, lr}
 80084cc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80084ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084d0:	b18b      	cbz	r3, 80084f6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	e7fe      	b.n	80084e2 <xQueueGiveFromISR+0x1a>
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	e7fe      	b.n	80084f4 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80084f6:	6803      	ldr	r3, [r0, #0]
 80084f8:	b32b      	cbz	r3, 8008546 <xQueueGiveFromISR+0x7e>
 80084fa:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084fc:	f001 faca 	bl	8009a94 <vPortValidateInterruptPriority>
	__asm volatile
 8008500:	f3ef 8511 	mrs	r5, BASEPRI
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008518:	4293      	cmp	r3, r2
 800851a:	d926      	bls.n	800856a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800851c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008520:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8008522:	3201      	adds	r2, #1
 8008524:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d118      	bne.n	800855e <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800852c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800852e:	b1f3      	cbz	r3, 800856e <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008530:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008534:	f000 fd94 	bl	8009060 <xTaskRemoveFromEventList>
 8008538:	b1d8      	cbz	r0, 8008572 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800853a:	b1e6      	cbz	r6, 8008576 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800853c:	2001      	movs	r0, #1
 800853e:	6030      	str	r0, [r6, #0]
	__asm volatile
 8008540:	f385 8811 	msr	BASEPRI, r5
}
 8008544:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008546:	6843      	ldr	r3, [r0, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0d6      	beq.n	80084fa <xQueueGiveFromISR+0x32>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	e7fe      	b.n	800855c <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800855e:	3301      	adds	r3, #1
 8008560:	b25b      	sxtb	r3, r3
 8008562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008566:	2001      	movs	r0, #1
 8008568:	e7ea      	b.n	8008540 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 800856a:	2000      	movs	r0, #0
 800856c:	e7e8      	b.n	8008540 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 800856e:	2001      	movs	r0, #1
 8008570:	e7e6      	b.n	8008540 <xQueueGiveFromISR+0x78>
 8008572:	2001      	movs	r0, #1
 8008574:	e7e4      	b.n	8008540 <xQueueGiveFromISR+0x78>
 8008576:	2001      	movs	r0, #1
 8008578:	e7e2      	b.n	8008540 <xQueueGiveFromISR+0x78>
	...

0800857c <xQueueGenericReceive>:
{
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008584:	b160      	cbz	r0, 80085a0 <xQueueGenericReceive+0x24>
 8008586:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008588:	b999      	cbnz	r1, 80085b2 <xQueueGenericReceive+0x36>
 800858a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800858c:	b18a      	cbz	r2, 80085b2 <xQueueGenericReceive+0x36>
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	e7fe      	b.n	800859e <xQueueGenericReceive+0x22>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	e7fe      	b.n	80085b0 <xQueueGenericReceive+0x34>
 80085b2:	461f      	mov	r7, r3
 80085b4:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085b6:	f000 fe03 	bl	80091c0 <xTaskGetSchedulerState>
 80085ba:	b950      	cbnz	r0, 80085d2 <xQueueGenericReceive+0x56>
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	b153      	cbz	r3, 80085d6 <xQueueGenericReceive+0x5a>
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	e7fe      	b.n	80085d0 <xQueueGenericReceive+0x54>
 80085d2:	2600      	movs	r6, #0
 80085d4:	e05f      	b.n	8008696 <xQueueGenericReceive+0x11a>
 80085d6:	2600      	movs	r6, #0
 80085d8:	e05d      	b.n	8008696 <xQueueGenericReceive+0x11a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80085da:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085dc:	4641      	mov	r1, r8
 80085de:	4620      	mov	r0, r4
 80085e0:	f7ff fcd6 	bl	8007f90 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80085e4:	b9df      	cbnz	r7, 800861e <xQueueGenericReceive+0xa2>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80085e6:	3d01      	subs	r5, #1
 80085e8:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	b913      	cbnz	r3, 80085f4 <xQueueGenericReceive+0x78>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80085ee:	f000 fe9f 	bl	8009330 <pvTaskIncrementMutexHeldCount>
 80085f2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	b163      	cbz	r3, 8008612 <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085f8:	f104 0010 	add.w	r0, r4, #16
 80085fc:	f000 fd30 	bl	8009060 <xTaskRemoveFromEventList>
 8008600:	b138      	cbz	r0, 8008612 <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8008602:	4b46      	ldr	r3, [pc, #280]	; (800871c <xQueueGenericReceive+0x1a0>)
 8008604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008612:	f001 f989 	bl	8009928 <vPortExitCritical>
				return pdPASS;
 8008616:	2001      	movs	r0, #1
}
 8008618:	b004      	add	sp, #16
 800861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800861e:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0f5      	beq.n	8008612 <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008626:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800862a:	f000 fd19 	bl	8009060 <xTaskRemoveFromEventList>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ef      	beq.n	8008612 <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8008632:	4b3a      	ldr	r3, [pc, #232]	; (800871c <xQueueGenericReceive+0x1a0>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	e7e6      	b.n	8008612 <xQueueGenericReceive+0x96>
					taskEXIT_CRITICAL();
 8008644:	f001 f970 	bl	8009928 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008648:	2000      	movs	r0, #0
 800864a:	e7e5      	b.n	8008618 <xQueueGenericReceive+0x9c>
					vTaskSetTimeOutState( &xTimeOut );
 800864c:	a802      	add	r0, sp, #8
 800864e:	f000 fd4d 	bl	80090ec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008652:	2601      	movs	r6, #1
 8008654:	e029      	b.n	80086aa <xQueueGenericReceive+0x12e>
		prvLockQueue( pxQueue );
 8008656:	2300      	movs	r3, #0
 8008658:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800865c:	e031      	b.n	80086c2 <xQueueGenericReceive+0x146>
 800865e:	2300      	movs	r3, #0
 8008660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008664:	e033      	b.n	80086ce <xQueueGenericReceive+0x152>
						taskENTER_CRITICAL();
 8008666:	f001 f93d 	bl	80098e4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800866a:	6860      	ldr	r0, [r4, #4]
 800866c:	f000 fdb8 	bl	80091e0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8008670:	f001 f95a 	bl	8009928 <vPortExitCritical>
 8008674:	e03b      	b.n	80086ee <xQueueGenericReceive+0x172>
				prvUnlockQueue( pxQueue );
 8008676:	4620      	mov	r0, r4
 8008678:	f7ff fc9c 	bl	8007fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800867c:	f000 fb80 	bl	8008d80 <xTaskResumeAll>
 8008680:	e009      	b.n	8008696 <xQueueGenericReceive+0x11a>
			prvUnlockQueue( pxQueue );
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff fc96 	bl	8007fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008688:	f000 fb7a 	bl	8008d80 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff fc37 	bl	8007f00 <prvIsQueueEmpty>
 8008692:	2800      	cmp	r0, #0
 8008694:	d140      	bne.n	8008718 <xQueueGenericReceive+0x19c>
		taskENTER_CRITICAL();
 8008696:	f001 f925 	bl	80098e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800869a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869c:	2d00      	cmp	r5, #0
 800869e:	d19c      	bne.n	80085da <xQueueGenericReceive+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0ce      	beq.n	8008644 <xQueueGenericReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d0d0      	beq.n	800864c <xQueueGenericReceive+0xd0>
		taskEXIT_CRITICAL();
 80086aa:	f001 f93d 	bl	8009928 <vPortExitCritical>
		vTaskSuspendAll();
 80086ae:	f000 facd 	bl	8008c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b2:	f001 f917 	bl	80098e4 <vPortEnterCritical>
 80086b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80086ba:	b25b      	sxtb	r3, r3
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d0c9      	beq.n	8008656 <xQueueGenericReceive+0xda>
 80086c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d0c7      	beq.n	800865e <xQueueGenericReceive+0xe2>
 80086ce:	f001 f92b 	bl	8009928 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d2:	a901      	add	r1, sp, #4
 80086d4:	a802      	add	r0, sp, #8
 80086d6:	f000 fd1f 	bl	8009118 <xTaskCheckForTimeOut>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1d1      	bne.n	8008682 <xQueueGenericReceive+0x106>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086de:	4620      	mov	r0, r4
 80086e0:	f7ff fc0e 	bl	8007f00 <prvIsQueueEmpty>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d0c6      	beq.n	8008676 <xQueueGenericReceive+0xfa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0bb      	beq.n	8008666 <xQueueGenericReceive+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086ee:	9901      	ldr	r1, [sp, #4]
 80086f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086f4:	f000 fc80 	bl	8008ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff fc5b 	bl	8007fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fe:	f000 fb3f 	bl	8008d80 <xTaskResumeAll>
 8008702:	2800      	cmp	r0, #0
 8008704:	d1c7      	bne.n	8008696 <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 8008706:	4b05      	ldr	r3, [pc, #20]	; (800871c <xQueueGenericReceive+0x1a0>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	e7be      	b.n	8008696 <xQueueGenericReceive+0x11a>
				return errQUEUE_EMPTY;
 8008718:	2000      	movs	r0, #0
 800871a:	e77d      	b.n	8008618 <xQueueGenericReceive+0x9c>
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <xQueueReceiveFromISR>:
{
 8008720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008724:	b160      	cbz	r0, 8008740 <xQueueReceiveFromISR+0x20>
 8008726:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008728:	b999      	cbnz	r1, 8008752 <xQueueReceiveFromISR+0x32>
 800872a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800872c:	b18b      	cbz	r3, 8008752 <xQueueReceiveFromISR+0x32>
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	e7fe      	b.n	800873e <xQueueReceiveFromISR+0x1e>
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	e7fe      	b.n	8008750 <xQueueReceiveFromISR+0x30>
 8008752:	4617      	mov	r7, r2
 8008754:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008756:	f001 f99d 	bl	8009a94 <vPortValidateInterruptPriority>
	__asm volatile
 800875a:	f3ef 8611 	mrs	r6, BASEPRI
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008772:	f1b8 0f00 	cmp.w	r8, #0
 8008776:	d01d      	beq.n	80087b4 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008778:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800877c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800877e:	4649      	mov	r1, r9
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff fc05 	bl	8007f90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8008786:	f108 33ff 	add.w	r3, r8, #4294967295
 800878a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800878c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008790:	d005      	beq.n	800879e <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008792:	1c6b      	adds	r3, r5, #1
 8008794:	b25b      	sxtb	r3, r3
 8008796:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800879a:	2001      	movs	r0, #1
 800879c:	e00b      	b.n	80087b6 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879e:	6923      	ldr	r3, [r4, #16]
 80087a0:	b16b      	cbz	r3, 80087be <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a2:	f104 0010 	add.w	r0, r4, #16
 80087a6:	f000 fc5b 	bl	8009060 <xTaskRemoveFromEventList>
 80087aa:	b150      	cbz	r0, 80087c2 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 80087ac:	b15f      	cbz	r7, 80087c6 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087ae:	2001      	movs	r0, #1
 80087b0:	6038      	str	r0, [r7, #0]
 80087b2:	e000      	b.n	80087b6 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 80087b4:	2000      	movs	r0, #0
	__asm volatile
 80087b6:	f386 8811 	msr	BASEPRI, r6
}
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 80087be:	2001      	movs	r0, #1
 80087c0:	e7f9      	b.n	80087b6 <xQueueReceiveFromISR+0x96>
 80087c2:	2001      	movs	r0, #1
 80087c4:	e7f7      	b.n	80087b6 <xQueueReceiveFromISR+0x96>
 80087c6:	2001      	movs	r0, #1
 80087c8:	e7f5      	b.n	80087b6 <xQueueReceiveFromISR+0x96>
	...

080087cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087cc:	2300      	movs	r3, #0
 80087ce:	2b07      	cmp	r3, #7
 80087d0:	d80c      	bhi.n	80087ec <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087d2:	4a07      	ldr	r2, [pc, #28]	; (80087f0 <vQueueAddToRegistry+0x24>)
 80087d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80087d8:	b10a      	cbz	r2, 80087de <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087da:	3301      	adds	r3, #1
 80087dc:	e7f7      	b.n	80087ce <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087de:	4a04      	ldr	r2, [pc, #16]	; (80087f0 <vQueueAddToRegistry+0x24>)
 80087e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087e8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087ea:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	200069e4 	.word	0x200069e4

080087f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4604      	mov	r4, r0
 80087f8:	460d      	mov	r5, r1
 80087fa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087fc:	f001 f872 	bl	80098e4 <vPortEnterCritical>
 8008800:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008804:	b25b      	sxtb	r3, r3
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d00d      	beq.n	8008828 <vQueueWaitForMessageRestricted+0x34>
 800880c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008810:	b25b      	sxtb	r3, r3
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008816:	d00b      	beq.n	8008830 <vQueueWaitForMessageRestricted+0x3c>
 8008818:	f001 f886 	bl	8009928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800881c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800881e:	b15b      	cbz	r3, 8008838 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008820:	4620      	mov	r0, r4
 8008822:	f7ff fbc7 	bl	8007fb4 <prvUnlockQueue>
	}
 8008826:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008828:	2300      	movs	r3, #0
 800882a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800882e:	e7ed      	b.n	800880c <vQueueWaitForMessageRestricted+0x18>
 8008830:	2300      	movs	r3, #0
 8008832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008836:	e7ef      	b.n	8008818 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008838:	4632      	mov	r2, r6
 800883a:	4629      	mov	r1, r5
 800883c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008840:	f000 fbf2 	bl	8009028 <vTaskPlaceOnEventListRestricted>
 8008844:	e7ec      	b.n	8008820 <vQueueWaitForMessageRestricted+0x2c>
	...

08008848 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <prvResetNextTaskUnblockTime+0x24>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	b13b      	cbz	r3, 8008860 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <prvResetNextTaskUnblockTime+0x24>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <prvResetNextTaskUnblockTime+0x28>)
 800885c:	601a      	str	r2, [r3, #0]
	}
}
 800885e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008860:	4b03      	ldr	r3, [pc, #12]	; (8008870 <prvResetNextTaskUnblockTime+0x28>)
 8008862:	f04f 32ff 	mov.w	r2, #4294967295
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	20001304 	.word	0x20001304
 8008870:	200013dc 	.word	0x200013dc

08008874 <prvInitialiseNewTask>:
{
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4681      	mov	r9, r0
 800887a:	460d      	mov	r5, r1
 800887c:	4617      	mov	r7, r2
 800887e:	469a      	mov	sl, r3
 8008880:	9e08      	ldr	r6, [sp, #32]
 8008882:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008886:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008888:	0092      	lsls	r2, r2, #2
 800888a:	21a5      	movs	r1, #165	; 0xa5
 800888c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800888e:	f004 fecf 	bl	800d630 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008894:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008898:	3a01      	subs	r2, #1
 800889a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800889e:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b0f      	cmp	r3, #15
 80088a6:	d807      	bhi.n	80088b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088a8:	5ce9      	ldrb	r1, [r5, r3]
 80088aa:	18e2      	adds	r2, r4, r3
 80088ac:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80088b0:	5cea      	ldrb	r2, [r5, r3]
 80088b2:	b10a      	cbz	r2, 80088b8 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b4:	3301      	adds	r3, #1
 80088b6:	e7f5      	b.n	80088a4 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088b8:	2300      	movs	r3, #0
 80088ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088be:	2e06      	cmp	r6, #6
 80088c0:	d900      	bls.n	80088c4 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088c2:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80088c4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80088c6:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088c8:	2500      	movs	r5, #0
 80088ca:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088cc:	1d20      	adds	r0, r4, #4
 80088ce:	f7ff facc 	bl	8007e6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088d2:	f104 0018 	add.w	r0, r4, #24
 80088d6:	f7ff fac8 	bl	8007e6a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088dc:	f1c6 0607 	rsb	r6, r6, #7
 80088e0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088e2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80088e4:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulRunTimeCounter = 0UL;
 80088e6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 80088e8:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ea:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->ucDelayAborted = pdFALSE;
 80088ee:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f2:	4652      	mov	r2, sl
 80088f4:	4649      	mov	r1, r9
 80088f6:	4638      	mov	r0, r7
 80088f8:	f000 ffce 	bl	8009898 <pxPortInitialiseStack>
 80088fc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80088fe:	f1b8 0f00 	cmp.w	r8, #0
 8008902:	d001      	beq.n	8008908 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008904:	f8c8 4000 	str.w	r4, [r8]
}
 8008908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800890c <prvInitialiseTaskLists>:
{
 800890c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800890e:	2400      	movs	r4, #0
 8008910:	e007      	b.n	8008922 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008912:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008916:	0093      	lsls	r3, r2, #2
 8008918:	480e      	ldr	r0, [pc, #56]	; (8008954 <prvInitialiseTaskLists+0x48>)
 800891a:	4418      	add	r0, r3
 800891c:	f7ff fa9a 	bl	8007e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008920:	3401      	adds	r4, #1
 8008922:	2c06      	cmp	r4, #6
 8008924:	d9f5      	bls.n	8008912 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008926:	4d0c      	ldr	r5, [pc, #48]	; (8008958 <prvInitialiseTaskLists+0x4c>)
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff fa93 	bl	8007e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800892e:	4c0b      	ldr	r4, [pc, #44]	; (800895c <prvInitialiseTaskLists+0x50>)
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff fa8f 	bl	8007e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008936:	480a      	ldr	r0, [pc, #40]	; (8008960 <prvInitialiseTaskLists+0x54>)
 8008938:	f7ff fa8c 	bl	8007e54 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800893c:	4809      	ldr	r0, [pc, #36]	; (8008964 <prvInitialiseTaskLists+0x58>)
 800893e:	f7ff fa89 	bl	8007e54 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008942:	4809      	ldr	r0, [pc, #36]	; (8008968 <prvInitialiseTaskLists+0x5c>)
 8008944:	f7ff fa86 	bl	8007e54 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008948:	4b08      	ldr	r3, [pc, #32]	; (800896c <prvInitialiseTaskLists+0x60>)
 800894a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800894c:	4b08      	ldr	r3, [pc, #32]	; (8008970 <prvInitialiseTaskLists+0x64>)
 800894e:	601c      	str	r4, [r3, #0]
}
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	2000130c 	.word	0x2000130c
 8008958:	200013b4 	.word	0x200013b4
 800895c:	200013c8 	.word	0x200013c8
 8008960:	200013e4 	.word	0x200013e4
 8008964:	20001410 	.word	0x20001410
 8008968:	200013fc 	.word	0x200013fc
 800896c:	20001304 	.word	0x20001304
 8008970:	20001308 	.word	0x20001308

08008974 <prvAddNewTaskToReadyList>:
{
 8008974:	b510      	push	{r4, lr}
 8008976:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008978:	f000 ffb4 	bl	80098e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800897c:	4a21      	ldr	r2, [pc, #132]	; (8008a04 <prvAddNewTaskToReadyList+0x90>)
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008984:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <prvAddNewTaskToReadyList+0x94>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	b15b      	cbz	r3, 80089a2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800898a:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <prvAddNewTaskToReadyList+0x98>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	b96b      	cbnz	r3, 80089ac <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008990:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <prvAddNewTaskToReadyList+0x94>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008998:	429a      	cmp	r2, r3
 800899a:	d807      	bhi.n	80089ac <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <prvAddNewTaskToReadyList+0x94>)
 800899e:	601c      	str	r4, [r3, #0]
 80089a0:	e004      	b.n	80089ac <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80089a2:	4b19      	ldr	r3, [pc, #100]	; (8008a08 <prvAddNewTaskToReadyList+0x94>)
 80089a4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d027      	beq.n	80089fc <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80089ac:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <prvAddNewTaskToReadyList+0x9c>)
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089b4:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80089b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089b8:	2201      	movs	r2, #1
 80089ba:	409a      	lsls	r2, r3
 80089bc:	4915      	ldr	r1, [pc, #84]	; (8008a14 <prvAddNewTaskToReadyList+0xa0>)
 80089be:	6808      	ldr	r0, [r1, #0]
 80089c0:	4302      	orrs	r2, r0
 80089c2:	600a      	str	r2, [r1, #0]
 80089c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80089c8:	009a      	lsls	r2, r3, #2
 80089ca:	1d21      	adds	r1, r4, #4
 80089cc:	4812      	ldr	r0, [pc, #72]	; (8008a18 <prvAddNewTaskToReadyList+0xa4>)
 80089ce:	4410      	add	r0, r2
 80089d0:	f7ff fa4e 	bl	8007e70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80089d4:	f000 ffa8 	bl	8009928 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <prvAddNewTaskToReadyList+0x98>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	b16b      	cbz	r3, 80089fa <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089de:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <prvAddNewTaskToReadyList+0x94>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d207      	bcs.n	80089fa <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <prvAddNewTaskToReadyList+0xa8>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
}
 80089fa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80089fc:	f7ff ff86 	bl	800890c <prvInitialiseTaskLists>
 8008a00:	e7d4      	b.n	80089ac <prvAddNewTaskToReadyList+0x38>
 8008a02:	bf00      	nop
 8008a04:	2000139c 	.word	0x2000139c
 8008a08:	20001300 	.word	0x20001300
 8008a0c:	200013f8 	.word	0x200013f8
 8008a10:	200013ac 	.word	0x200013ac
 8008a14:	200013b0 	.word	0x200013b0
 8008a18:	2000130c 	.word	0x2000130c
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <prvDeleteTCB>:
	{
 8008a20:	b510      	push	{r4, lr}
 8008a22:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a24:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8008a28:	b933      	cbnz	r3, 8008a38 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8008a2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008a2c:	f001 f94a 	bl	8009cc4 <vPortFree>
				vPortFree( pxTCB );
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 f947 	bl	8009cc4 <vPortFree>
	}
 8008a36:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d00a      	beq.n	8008a52 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d0fa      	beq.n	8008a36 <prvDeleteTCB+0x16>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	e7fe      	b.n	8008a50 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8008a52:	f001 f937 	bl	8009cc4 <vPortFree>
 8008a56:	e7ee      	b.n	8008a36 <prvDeleteTCB+0x16>

08008a58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <prvAddCurrentTaskToDelayedList+0x84>)
 8008a60:	681d      	ldr	r5, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	2100      	movs	r1, #0
 8008a68:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	3004      	adds	r0, #4
 8008a70:	f7ff fa24 	bl	8007ebc <uxListRemove>
 8008a74:	b950      	cbnz	r0, 8008a8c <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008a76:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	fa03 f202 	lsl.w	r2, r3, r2
 8008a82:	4918      	ldr	r1, [pc, #96]	; (8008ae4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8008a84:	680b      	ldr	r3, [r1, #0]
 8008a86:	ea23 0302 	bic.w	r3, r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a90:	d013      	beq.n	8008aba <prvAddCurrentTaskToDelayedList+0x62>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a92:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a94:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008a9a:	42a5      	cmp	r5, r4
 8008a9c:	d816      	bhi.n	8008acc <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008aa4:	6819      	ldr	r1, [r3, #0]
 8008aa6:	3104      	adds	r1, #4
 8008aa8:	f7ff f9ee 	bl	8007e88 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <prvAddCurrentTaskToDelayedList+0x94>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d912      	bls.n	8008ada <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008ab4:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ab8:	e00f      	b.n	8008ada <prvAddCurrentTaskToDelayedList+0x82>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d0e9      	beq.n	8008a92 <prvAddCurrentTaskToDelayedList+0x3a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008abe:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	3104      	adds	r1, #4
 8008ac4:	480a      	ldr	r0, [pc, #40]	; (8008af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ac6:	f7ff f9d3 	bl	8007e70 <vListInsertEnd>
 8008aca:	e006      	b.n	8008ada <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008acc:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0x88>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	3104      	adds	r1, #4
 8008ad6:	f7ff f9d7 	bl	8007e88 <vListInsert>
}
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	20001424 	.word	0x20001424
 8008ae0:	20001300 	.word	0x20001300
 8008ae4:	200013b0 	.word	0x200013b0
 8008ae8:	20001304 	.word	0x20001304
 8008aec:	200013dc 	.word	0x200013dc
 8008af0:	200013fc 	.word	0x200013fc
 8008af4:	20001308 	.word	0x20001308

08008af8 <xTaskCreateStatic>:
	{
 8008af8:	b530      	push	{r4, r5, lr}
 8008afa:	b087      	sub	sp, #28
 8008afc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008afe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8008b00:	b14d      	cbz	r5, 8008b16 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008b02:	b98c      	cbnz	r4, 8008b28 <xTaskCreateStatic+0x30>
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	e7fe      	b.n	8008b14 <xTaskCreateStatic+0x1c>
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	e7fe      	b.n	8008b26 <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b28:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b2a:	2502      	movs	r5, #2
 8008b2c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b30:	2500      	movs	r5, #0
 8008b32:	9503      	str	r5, [sp, #12]
 8008b34:	9402      	str	r4, [sp, #8]
 8008b36:	ad05      	add	r5, sp, #20
 8008b38:	9501      	str	r5, [sp, #4]
 8008b3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b3c:	9500      	str	r5, [sp, #0]
 8008b3e:	f7ff fe99 	bl	8008874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff ff16 	bl	8008974 <prvAddNewTaskToReadyList>
	}
 8008b48:	9805      	ldr	r0, [sp, #20]
 8008b4a:	b007      	add	sp, #28
 8008b4c:	bd30      	pop	{r4, r5, pc}

08008b4e <xTaskCreate>:
	{
 8008b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b52:	b085      	sub	sp, #20
 8008b54:	4607      	mov	r7, r0
 8008b56:	4688      	mov	r8, r1
 8008b58:	4615      	mov	r5, r2
 8008b5a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b5c:	0090      	lsls	r0, r2, #2
 8008b5e:	f001 f823 	bl	8009ba8 <pvPortMalloc>
			if( pxStack != NULL )
 8008b62:	b308      	cbz	r0, 8008ba8 <xTaskCreate+0x5a>
 8008b64:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b66:	2064      	movs	r0, #100	; 0x64
 8008b68:	f001 f81e 	bl	8009ba8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	b1b8      	cbz	r0, 8008ba0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8008b70:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008b72:	b1e4      	cbz	r4, 8008bae <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	9402      	str	r4, [sp, #8]
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	464b      	mov	r3, r9
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff fe71 	bl	8008874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff feee 	bl	8008974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b98:	2001      	movs	r0, #1
	}
 8008b9a:	b005      	add	sp, #20
 8008b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	f001 f88f 	bl	8009cc4 <vPortFree>
 8008ba6:	e7e4      	b.n	8008b72 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e7f5      	b.n	8008b9a <xTaskCreate+0x4c>
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008bb2:	e7f2      	b.n	8008b9a <xTaskCreate+0x4c>

08008bb4 <vTaskStartScheduler>:
{
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bb8:	2400      	movs	r4, #0
 8008bba:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bbc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bbe:	aa07      	add	r2, sp, #28
 8008bc0:	a906      	add	r1, sp, #24
 8008bc2:	a805      	add	r0, sp, #20
 8008bc4:	f7f7 fe12 	bl	80007ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bc8:	9b05      	ldr	r3, [sp, #20]
 8008bca:	9302      	str	r3, [sp, #8]
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	9400      	str	r4, [sp, #0]
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	9a07      	ldr	r2, [sp, #28]
 8008bd6:	4918      	ldr	r1, [pc, #96]	; (8008c38 <vTaskStartScheduler+0x84>)
 8008bd8:	4818      	ldr	r0, [pc, #96]	; (8008c3c <vTaskStartScheduler+0x88>)
 8008bda:	f7ff ff8d 	bl	8008af8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008bde:	b140      	cbz	r0, 8008bf2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8008be0:	f000 fc40 	bl	8009464 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008be4:	2801      	cmp	r0, #1
 8008be6:	d006      	beq.n	8008bf6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bec:	d01a      	beq.n	8008c24 <vTaskStartScheduler+0x70>
}
 8008bee:	b008      	add	sp, #32
 8008bf0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e7f6      	b.n	8008be4 <vTaskStartScheduler+0x30>
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c06:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <vTaskStartScheduler+0x8c>)
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <vTaskStartScheduler+0x90>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <vTaskStartScheduler+0x94>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008c1a:	f7f7 fde2 	bl	80007e2 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8008c1e:	f000 feed 	bl	80099fc <xPortStartScheduler>
 8008c22:	e7e4      	b.n	8008bee <vTaskStartScheduler+0x3a>
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	e7fe      	b.n	8008c34 <vTaskStartScheduler+0x80>
 8008c36:	bf00      	nop
 8008c38:	0800ee80 	.word	0x0800ee80
 8008c3c:	08008f1d 	.word	0x08008f1d
 8008c40:	200013dc 	.word	0x200013dc
 8008c44:	200013f8 	.word	0x200013f8
 8008c48:	20001424 	.word	0x20001424

08008c4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008c4c:	4a02      	ldr	r2, [pc, #8]	; (8008c58 <vTaskSuspendAll+0xc>)
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	6013      	str	r3, [r2, #0]
}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	200013a8 	.word	0x200013a8

08008c5c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008c5c:	4b01      	ldr	r3, [pc, #4]	; (8008c64 <xTaskGetTickCount+0x8>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20001424 	.word	0x20001424

08008c68 <xTaskIncrementTick>:
{
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6a:	4b3a      	ldr	r3, [pc, #232]	; (8008d54 <xTaskIncrementTick+0xec>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d164      	bne.n	8008d3c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8008c72:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <xTaskIncrementTick+0xf0>)
 8008c74:	681d      	ldr	r5, [r3, #0]
 8008c76:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008c78:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8008c7a:	b9c5      	cbnz	r5, 8008cae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008c7c:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <xTaskIncrementTick+0xf4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	b143      	cbz	r3, 8008c96 <xTaskIncrementTick+0x2e>
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	e7fe      	b.n	8008c94 <xTaskIncrementTick+0x2c>
 8008c96:	4a31      	ldr	r2, [pc, #196]	; (8008d5c <xTaskIncrementTick+0xf4>)
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	4b31      	ldr	r3, [pc, #196]	; (8008d60 <xTaskIncrementTick+0xf8>)
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	6010      	str	r0, [r2, #0]
 8008ca0:	6019      	str	r1, [r3, #0]
 8008ca2:	4a30      	ldr	r2, [pc, #192]	; (8008d64 <xTaskIncrementTick+0xfc>)
 8008ca4:	6813      	ldr	r3, [r2, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	f7ff fdcd 	bl	8008848 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cae:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <xTaskIncrementTick+0x100>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	d938      	bls.n	8008d28 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8008cb6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cb8:	4b2c      	ldr	r3, [pc, #176]	; (8008d6c <xTaskIncrementTick+0x104>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008cc2:	009a      	lsls	r2, r3, #2
 8008cc4:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <xTaskIncrementTick+0x108>)
 8008cc6:	589b      	ldr	r3, [r3, r2]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d93c      	bls.n	8008d46 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8008ccc:	2401      	movs	r4, #1
 8008cce:	e03a      	b.n	8008d46 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8008cd0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cd2:	4b22      	ldr	r3, [pc, #136]	; (8008d5c <xTaskIncrementTick+0xf4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	b343      	cbz	r3, 8008d2c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cda:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <xTaskIncrementTick+0xf4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ce2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008ce4:	429d      	cmp	r5, r3
 8008ce6:	d326      	bcc.n	8008d36 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce8:	1d37      	adds	r7, r6, #4
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff f8e6 	bl	8007ebc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008cf2:	b11b      	cbz	r3, 8008cfc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf4:	f106 0018 	add.w	r0, r6, #24
 8008cf8:	f7ff f8e0 	bl	8007ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cfc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008cfe:	2201      	movs	r2, #1
 8008d00:	409a      	lsls	r2, r3
 8008d02:	491c      	ldr	r1, [pc, #112]	; (8008d74 <xTaskIncrementTick+0x10c>)
 8008d04:	6808      	ldr	r0, [r1, #0]
 8008d06:	4302      	orrs	r2, r0
 8008d08:	600a      	str	r2, [r1, #0]
 8008d0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d0e:	009a      	lsls	r2, r3, #2
 8008d10:	4639      	mov	r1, r7
 8008d12:	4817      	ldr	r0, [pc, #92]	; (8008d70 <xTaskIncrementTick+0x108>)
 8008d14:	4410      	add	r0, r2
 8008d16:	f7ff f8ab 	bl	8007e70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d1a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8008d1c:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <xTaskIncrementTick+0x104>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d2d4      	bcs.n	8008cd0 <xTaskIncrementTick+0x68>
 8008d26:	e7d4      	b.n	8008cd2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8008d28:	2400      	movs	r4, #0
 8008d2a:	e7d2      	b.n	8008cd2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <xTaskIncrementTick+0x100>)
 8008d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d32:	601a      	str	r2, [r3, #0]
					break;
 8008d34:	e7c0      	b.n	8008cb8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <xTaskIncrementTick+0x100>)
 8008d38:	6013      	str	r3, [r2, #0]
						break;
 8008d3a:	e7bd      	b.n	8008cb8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8008d3c:	4a0e      	ldr	r2, [pc, #56]	; (8008d78 <xTaskIncrementTick+0x110>)
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008d44:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8008d46:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <xTaskIncrementTick+0x114>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8008d4c:	2401      	movs	r4, #1
}
 8008d4e:	4620      	mov	r0, r4
 8008d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200013a8 	.word	0x200013a8
 8008d58:	20001424 	.word	0x20001424
 8008d5c:	20001304 	.word	0x20001304
 8008d60:	20001308 	.word	0x20001308
 8008d64:	200013e0 	.word	0x200013e0
 8008d68:	200013dc 	.word	0x200013dc
 8008d6c:	20001300 	.word	0x20001300
 8008d70:	2000130c 	.word	0x2000130c
 8008d74:	200013b0 	.word	0x200013b0
 8008d78:	200013a4 	.word	0x200013a4
 8008d7c:	20001428 	.word	0x20001428

08008d80 <xTaskResumeAll>:
{
 8008d80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <xTaskResumeAll+0xd0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	b943      	cbnz	r3, 8008d9a <xTaskResumeAll+0x1a>
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	e7fe      	b.n	8008d98 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8008d9a:	f000 fda3 	bl	80098e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008d9e:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <xTaskResumeAll+0xd0>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	3a01      	subs	r2, #1
 8008da4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d14d      	bne.n	8008e48 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dac:	4b29      	ldr	r3, [pc, #164]	; (8008e54 <xTaskResumeAll+0xd4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	b923      	cbnz	r3, 8008dbc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8008db2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008db4:	f000 fdb8 	bl	8009928 <vPortExitCritical>
}
 8008db8:	4620      	mov	r0, r4
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8008dbc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dbe:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <xTaskResumeAll+0xd8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	b31b      	cbz	r3, 8008e0c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <xTaskResumeAll+0xd8>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dca:	f104 0018 	add.w	r0, r4, #24
 8008dce:	f7ff f875 	bl	8007ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd2:	1d25      	adds	r5, r4, #4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7ff f871 	bl	8007ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ddc:	2201      	movs	r2, #1
 8008dde:	409a      	lsls	r2, r3
 8008de0:	491e      	ldr	r1, [pc, #120]	; (8008e5c <xTaskResumeAll+0xdc>)
 8008de2:	6808      	ldr	r0, [r1, #0]
 8008de4:	4302      	orrs	r2, r0
 8008de6:	600a      	str	r2, [r1, #0]
 8008de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dec:	009a      	lsls	r2, r3, #2
 8008dee:	4629      	mov	r1, r5
 8008df0:	481b      	ldr	r0, [pc, #108]	; (8008e60 <xTaskResumeAll+0xe0>)
 8008df2:	4410      	add	r0, r2
 8008df4:	f7ff f83c 	bl	8007e70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008dfa:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <xTaskResumeAll+0xe4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3dc      	bcc.n	8008dbe <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8008e04:	4b18      	ldr	r3, [pc, #96]	; (8008e68 <xTaskResumeAll+0xe8>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e7d8      	b.n	8008dbe <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8008e0c:	b10c      	cbz	r4, 8008e12 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8008e0e:	f7ff fd1b 	bl	8008848 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008e12:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <xTaskResumeAll+0xec>)
 8008e14:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e16:	b154      	cbz	r4, 8008e2e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8008e18:	f7ff ff26 	bl	8008c68 <xTaskIncrementTick>
 8008e1c:	b110      	cbz	r0, 8008e24 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008e1e:	4b12      	ldr	r3, [pc, #72]	; (8008e68 <xTaskResumeAll+0xe8>)
 8008e20:	2201      	movs	r2, #1
 8008e22:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e24:	3c01      	subs	r4, #1
 8008e26:	d1f7      	bne.n	8008e18 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <xTaskResumeAll+0xec>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <xTaskResumeAll+0xe8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	b15b      	cbz	r3, 8008e4c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <xTaskResumeAll+0xf0>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008e44:	2401      	movs	r4, #1
 8008e46:	e7b5      	b.n	8008db4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8008e48:	2400      	movs	r4, #0
 8008e4a:	e7b3      	b.n	8008db4 <xTaskResumeAll+0x34>
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	e7b1      	b.n	8008db4 <xTaskResumeAll+0x34>
 8008e50:	200013a8 	.word	0x200013a8
 8008e54:	2000139c 	.word	0x2000139c
 8008e58:	200013e4 	.word	0x200013e4
 8008e5c:	200013b0 	.word	0x200013b0
 8008e60:	2000130c 	.word	0x2000130c
 8008e64:	20001300 	.word	0x20001300
 8008e68:	20001428 	.word	0x20001428
 8008e6c:	200013a4 	.word	0x200013a4
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <vTaskDelay>:
	{
 8008e74:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e76:	b1a8      	cbz	r0, 8008ea4 <vTaskDelay+0x30>
 8008e78:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <vTaskDelay+0x44>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	b143      	cbz	r3, 8008e92 <vTaskDelay+0x1e>
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	e7fe      	b.n	8008e90 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008e92:	f7ff fedb 	bl	8008c4c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e96:	2100      	movs	r1, #0
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7ff fddd 	bl	8008a58 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008e9e:	f7ff ff6f 	bl	8008d80 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008ea2:	b938      	cbnz	r0, 8008eb4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <vTaskDelay+0x48>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
	}
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200013a8 	.word	0x200013a8
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec0:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	b313      	cbz	r3, 8008f0c <prvCheckTasksWaitingTermination+0x4c>
{
 8008ec6:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8008ec8:	f7ff fec0 	bl	8008c4c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8008ecc:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ece:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8008ed0:	f7ff ff56 	bl	8008d80 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8008ed4:	b924      	cbnz	r4, 8008ee0 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f4      	bne.n	8008ec8 <prvCheckTasksWaitingTermination+0x8>
}
 8008ede:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8008ee0:	f000 fd00 	bl	80098e4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eea:	1d20      	adds	r0, r4, #4
 8008eec:	f7fe ffe6 	bl	8007ebc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8008ef0:	4a09      	ldr	r2, [pc, #36]	; (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008ef2:	6813      	ldr	r3, [r2, #0]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8008ef8:	4a05      	ldr	r2, [pc, #20]	; (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008efa:	6813      	ldr	r3, [r2, #0]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8008f00:	f000 fd12 	bl	8009928 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7ff fd8b 	bl	8008a20 <prvDeleteTCB>
 8008f0a:	e7e4      	b.n	8008ed6 <prvCheckTasksWaitingTermination+0x16>
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200013a0 	.word	0x200013a0
 8008f14:	20001410 	.word	0x20001410
 8008f18:	2000139c 	.word	0x2000139c

08008f1c <prvIdleTask>:
{
 8008f1c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8008f1e:	f7ff ffcf 	bl	8008ec0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <prvIdleTask+0x20>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d9f9      	bls.n	8008f1e <prvIdleTask+0x2>
				taskYIELD();
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <prvIdleTask+0x24>)
 8008f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	e7f0      	b.n	8008f1e <prvIdleTask+0x2>
 8008f3c:	2000130c 	.word	0x2000130c
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f44:	4b26      	ldr	r3, [pc, #152]	; (8008fe0 <vTaskSwitchContext+0x9c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	b11b      	cbz	r3, 8008f52 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008f4a:	4b26      	ldr	r3, [pc, #152]	; (8008fe4 <vTaskSwitchContext+0xa0>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	4770      	bx	lr
{
 8008f52:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8008f54:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <vTaskSwitchContext+0xa0>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008f5a:	f7f7 fc43 	bl	80007e4 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <vTaskSwitchContext+0xa4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4298      	cmp	r0, r3
 8008f64:	d905      	bls.n	8008f72 <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008f66:	4a21      	ldr	r2, [pc, #132]	; (8008fec <vTaskSwitchContext+0xa8>)
 8008f68:	6811      	ldr	r1, [r2, #0]
 8008f6a:	1ac3      	subs	r3, r0, r3
 8008f6c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008f6e:	4413      	add	r3, r2
 8008f70:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008f72:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <vTaskSwitchContext+0xa4>)
 8008f74:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f76:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <vTaskSwitchContext+0xac>)
 8008f78:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8008f7a:	fab3 f383 	clz	r3, r3
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f1c3 031f 	rsb	r3, r3, #31
 8008f84:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008f88:	008a      	lsls	r2, r1, #2
 8008f8a:	491a      	ldr	r1, [pc, #104]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008f8c:	588a      	ldr	r2, [r1, r2]
 8008f8e:	b942      	cbnz	r2, 8008fa2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	e7fe      	b.n	8008fa0 <vTaskSwitchContext+0x5c>
 8008fa2:	4814      	ldr	r0, [pc, #80]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008fa4:	009a      	lsls	r2, r3, #2
 8008fa6:	18d4      	adds	r4, r2, r3
 8008fa8:	00a1      	lsls	r1, r4, #2
 8008faa:	4401      	add	r1, r0
 8008fac:	684c      	ldr	r4, [r1, #4]
 8008fae:	6864      	ldr	r4, [r4, #4]
 8008fb0:	604c      	str	r4, [r1, #4]
 8008fb2:	441a      	add	r2, r3
 8008fb4:	0091      	lsls	r1, r2, #2
 8008fb6:	3108      	adds	r1, #8
 8008fb8:	4408      	add	r0, r1
 8008fba:	4284      	cmp	r4, r0
 8008fbc:	d009      	beq.n	8008fd2 <vTaskSwitchContext+0x8e>
 8008fbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008fc2:	009a      	lsls	r2, r3, #2
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008fc6:	4413      	add	r3, r2
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	4b07      	ldr	r3, [pc, #28]	; (8008fec <vTaskSwitchContext+0xa8>)
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008fd2:	6861      	ldr	r1, [r4, #4]
 8008fd4:	4807      	ldr	r0, [pc, #28]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008fd6:	2214      	movs	r2, #20
 8008fd8:	fb02 0203 	mla	r2, r2, r3, r0
 8008fdc:	6051      	str	r1, [r2, #4]
 8008fde:	e7ee      	b.n	8008fbe <vTaskSwitchContext+0x7a>
 8008fe0:	200013a8 	.word	0x200013a8
 8008fe4:	20001428 	.word	0x20001428
 8008fe8:	20001398 	.word	0x20001398
 8008fec:	20001300 	.word	0x20001300
 8008ff0:	200013b0 	.word	0x200013b0
 8008ff4:	2000130c 	.word	0x2000130c

08008ff8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008ff8:	b940      	cbnz	r0, 800900c <vTaskPlaceOnEventList+0x14>
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	e7fe      	b.n	800900a <vTaskPlaceOnEventList+0x12>
{
 800900c:	b510      	push	{r4, lr}
 800900e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <vTaskPlaceOnEventList+0x2c>)
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	3118      	adds	r1, #24
 8009016:	f7fe ff37 	bl	8007e88 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800901a:	2101      	movs	r1, #1
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fd1b 	bl	8008a58 <prvAddCurrentTaskToDelayedList>
}
 8009022:	bd10      	pop	{r4, pc}
 8009024:	20001300 	.word	0x20001300

08009028 <vTaskPlaceOnEventListRestricted>:
	{
 8009028:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800902a:	b940      	cbnz	r0, 800903e <vTaskPlaceOnEventListRestricted+0x16>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	e7fe      	b.n	800903c <vTaskPlaceOnEventListRestricted+0x14>
 800903e:	460c      	mov	r4, r1
 8009040:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009042:	4a06      	ldr	r2, [pc, #24]	; (800905c <vTaskPlaceOnEventListRestricted+0x34>)
 8009044:	6811      	ldr	r1, [r2, #0]
 8009046:	3118      	adds	r1, #24
 8009048:	f7fe ff12 	bl	8007e70 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800904c:	b10d      	cbz	r5, 8009052 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800904e:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009052:	4629      	mov	r1, r5
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff fcff 	bl	8008a58 <prvAddCurrentTaskToDelayedList>
	}
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20001300 	.word	0x20001300

08009060 <xTaskRemoveFromEventList>:
{
 8009060:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009062:	68c3      	ldr	r3, [r0, #12]
 8009064:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009066:	b944      	cbnz	r4, 800907a <xTaskRemoveFromEventList+0x1a>
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	e7fe      	b.n	8009078 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800907a:	f104 0518 	add.w	r5, r4, #24
 800907e:	4628      	mov	r0, r5
 8009080:	f7fe ff1c 	bl	8007ebc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009084:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <xTaskRemoveFromEventList+0x74>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	b9e3      	cbnz	r3, 80090c4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800908a:	1d25      	adds	r5, r4, #4
 800908c:	4628      	mov	r0, r5
 800908e:	f7fe ff15 	bl	8007ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009094:	2201      	movs	r2, #1
 8009096:	409a      	lsls	r2, r3
 8009098:	490f      	ldr	r1, [pc, #60]	; (80090d8 <xTaskRemoveFromEventList+0x78>)
 800909a:	6808      	ldr	r0, [r1, #0]
 800909c:	4302      	orrs	r2, r0
 800909e:	600a      	str	r2, [r1, #0]
 80090a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090a4:	009a      	lsls	r2, r3, #2
 80090a6:	4629      	mov	r1, r5
 80090a8:	480c      	ldr	r0, [pc, #48]	; (80090dc <xTaskRemoveFromEventList+0x7c>)
 80090aa:	4410      	add	r0, r2
 80090ac:	f7fe fee0 	bl	8007e70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80090b2:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <xTaskRemoveFromEventList+0x80>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d908      	bls.n	80090ce <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80090bc:	2001      	movs	r0, #1
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <xTaskRemoveFromEventList+0x84>)
 80090c0:	6018      	str	r0, [r3, #0]
}
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090c4:	4629      	mov	r1, r5
 80090c6:	4808      	ldr	r0, [pc, #32]	; (80090e8 <xTaskRemoveFromEventList+0x88>)
 80090c8:	f7fe fed2 	bl	8007e70 <vListInsertEnd>
 80090cc:	e7f0      	b.n	80090b0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 80090ce:	2000      	movs	r0, #0
	return xReturn;
 80090d0:	e7f7      	b.n	80090c2 <xTaskRemoveFromEventList+0x62>
 80090d2:	bf00      	nop
 80090d4:	200013a8 	.word	0x200013a8
 80090d8:	200013b0 	.word	0x200013b0
 80090dc:	2000130c 	.word	0x2000130c
 80090e0:	20001300 	.word	0x20001300
 80090e4:	20001428 	.word	0x20001428
 80090e8:	200013e4 	.word	0x200013e4

080090ec <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80090ec:	b130      	cbz	r0, 80090fc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090ee:	4a08      	ldr	r2, [pc, #32]	; (8009110 <vTaskSetTimeOutState+0x24>)
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090f4:	4a07      	ldr	r2, [pc, #28]	; (8009114 <vTaskSetTimeOutState+0x28>)
 80090f6:	6812      	ldr	r2, [r2, #0]
 80090f8:	6042      	str	r2, [r0, #4]
}
 80090fa:	4770      	bx	lr
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	e7fe      	b.n	800910c <vTaskSetTimeOutState+0x20>
 800910e:	bf00      	nop
 8009110:	200013e0 	.word	0x200013e0
 8009114:	20001424 	.word	0x20001424

08009118 <xTaskCheckForTimeOut>:
{
 8009118:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 800911a:	b150      	cbz	r0, 8009132 <xTaskCheckForTimeOut+0x1a>
 800911c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 800911e:	b989      	cbnz	r1, 8009144 <xTaskCheckForTimeOut+0x2c>
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	e7fe      	b.n	8009130 <xTaskCheckForTimeOut+0x18>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	e7fe      	b.n	8009142 <xTaskCheckForTimeOut+0x2a>
 8009144:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8009146:	f000 fbcd 	bl	80098e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800914a:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <xTaskCheckForTimeOut+0x90>)
 800914c:	6819      	ldr	r1, [r3, #0]
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800914e:	4b17      	ldr	r3, [pc, #92]	; (80091ac <xTaskCheckForTimeOut+0x94>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009156:	b9bb      	cbnz	r3, 8009188 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d01d      	beq.n	800919c <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <xTaskCheckForTimeOut+0x98>)
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	4290      	cmp	r0, r2
 8009168:	d002      	beq.n	8009170 <xTaskCheckForTimeOut+0x58>
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	428a      	cmp	r2, r1
 800916e:	d917      	bls.n	80091a0 <xTaskCheckForTimeOut+0x88>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009170:	6862      	ldr	r2, [r4, #4]
 8009172:	1a88      	subs	r0, r1, r2
 8009174:	4283      	cmp	r3, r0
 8009176:	d915      	bls.n	80091a4 <xTaskCheckForTimeOut+0x8c>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009178:	1a52      	subs	r2, r2, r1
 800917a:	4413      	add	r3, r2
 800917c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff ffb4 	bl	80090ec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8009184:	2400      	movs	r4, #0
 8009186:	e005      	b.n	8009194 <xTaskCheckForTimeOut+0x7c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009188:	4b08      	ldr	r3, [pc, #32]	; (80091ac <xTaskCheckForTimeOut+0x94>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				xReturn = pdTRUE;
 8009192:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009194:	f000 fbc8 	bl	8009928 <vPortExitCritical>
}
 8009198:	4620      	mov	r0, r4
 800919a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 800919c:	2400      	movs	r4, #0
 800919e:	e7f9      	b.n	8009194 <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 80091a0:	2401      	movs	r4, #1
 80091a2:	e7f7      	b.n	8009194 <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 80091a4:	2401      	movs	r4, #1
 80091a6:	e7f5      	b.n	8009194 <xTaskCheckForTimeOut+0x7c>
 80091a8:	20001424 	.word	0x20001424
 80091ac:	20001300 	.word	0x20001300
 80091b0:	200013e0 	.word	0x200013e0

080091b4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80091b4:	4b01      	ldr	r3, [pc, #4]	; (80091bc <vTaskMissedYield+0x8>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
}
 80091ba:	4770      	bx	lr
 80091bc:	20001428 	.word	0x20001428

080091c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <xTaskGetSchedulerState+0x18>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	b133      	cbz	r3, 80091d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <xTaskGetSchedulerState+0x1c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	b10b      	cbz	r3, 80091d0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80091cc:	2000      	movs	r0, #0
	}
 80091ce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80091d0:	2002      	movs	r0, #2
 80091d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091d4:	2001      	movs	r0, #1
 80091d6:	4770      	bx	lr
 80091d8:	200013f8 	.word	0x200013f8
 80091dc:	200013a8 	.word	0x200013a8

080091e0 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d045      	beq.n	8009270 <vTaskPriorityInherit+0x90>
	{
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80091ea:	4922      	ldr	r1, [pc, #136]	; (8009274 <vTaskPriorityInherit+0x94>)
 80091ec:	6809      	ldr	r1, [r1, #0]
 80091ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80091f0:	428a      	cmp	r2, r1
 80091f2:	d214      	bcs.n	800921e <vTaskPriorityInherit+0x3e>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091f4:	6981      	ldr	r1, [r0, #24]
 80091f6:	2900      	cmp	r1, #0
 80091f8:	db05      	blt.n	8009206 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fa:	491e      	ldr	r1, [pc, #120]	; (8009274 <vTaskPriorityInherit+0x94>)
 80091fc:	6809      	ldr	r1, [r1, #0]
 80091fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009200:	f1c1 0107 	rsb	r1, r1, #7
 8009204:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009206:	6960      	ldr	r0, [r4, #20]
 8009208:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800920c:	0091      	lsls	r1, r2, #2
 800920e:	4a1a      	ldr	r2, [pc, #104]	; (8009278 <vTaskPriorityInherit+0x98>)
 8009210:	440a      	add	r2, r1
 8009212:	4290      	cmp	r0, r2
 8009214:	d004      	beq.n	8009220 <vTaskPriorityInherit+0x40>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009216:	4a17      	ldr	r2, [pc, #92]	; (8009274 <vTaskPriorityInherit+0x94>)
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800921c:	62e2      	str	r2, [r4, #44]	; 0x2c
	}
 800921e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009220:	1d25      	adds	r5, r4, #4
 8009222:	4628      	mov	r0, r5
 8009224:	f7fe fe4a 	bl	8007ebc <uxListRemove>
 8009228:	b190      	cbz	r0, 8009250 <vTaskPriorityInherit+0x70>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800922a:	4b12      	ldr	r3, [pc, #72]	; (8009274 <vTaskPriorityInherit+0x94>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8009232:	2201      	movs	r2, #1
 8009234:	409a      	lsls	r2, r3
 8009236:	4911      	ldr	r1, [pc, #68]	; (800927c <vTaskPriorityInherit+0x9c>)
 8009238:	6808      	ldr	r0, [r1, #0]
 800923a:	4302      	orrs	r2, r0
 800923c:	600a      	str	r2, [r1, #0]
 800923e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009242:	009a      	lsls	r2, r3, #2
 8009244:	4629      	mov	r1, r5
 8009246:	480c      	ldr	r0, [pc, #48]	; (8009278 <vTaskPriorityInherit+0x98>)
 8009248:	4410      	add	r0, r2
 800924a:	f7fe fe11 	bl	8007e70 <vListInsertEnd>
	}
 800924e:	e7e6      	b.n	800921e <vTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009252:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009256:	008a      	lsls	r2, r1, #2
 8009258:	4907      	ldr	r1, [pc, #28]	; (8009278 <vTaskPriorityInherit+0x98>)
 800925a:	588a      	ldr	r2, [r1, r2]
 800925c:	2a00      	cmp	r2, #0
 800925e:	d1e4      	bne.n	800922a <vTaskPriorityInherit+0x4a>
 8009260:	2201      	movs	r2, #1
 8009262:	409a      	lsls	r2, r3
 8009264:	4905      	ldr	r1, [pc, #20]	; (800927c <vTaskPriorityInherit+0x9c>)
 8009266:	680b      	ldr	r3, [r1, #0]
 8009268:	ea23 0302 	bic.w	r3, r3, r2
 800926c:	600b      	str	r3, [r1, #0]
 800926e:	e7dc      	b.n	800922a <vTaskPriorityInherit+0x4a>
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20001300 	.word	0x20001300
 8009278:	2000130c 	.word	0x2000130c
 800927c:	200013b0 	.word	0x200013b0

08009280 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009280:	2800      	cmp	r0, #0
 8009282:	d049      	beq.n	8009318 <xTaskPriorityDisinherit+0x98>
	{
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009288:	4a26      	ldr	r2, [pc, #152]	; (8009324 <xTaskPriorityDisinherit+0xa4>)
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	4282      	cmp	r2, r0
 800928e:	d008      	beq.n	80092a2 <xTaskPriorityDisinherit+0x22>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	e7fe      	b.n	80092a0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80092a2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80092a4:	b942      	cbnz	r2, 80092b8 <xTaskPriorityDisinherit+0x38>
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	e7fe      	b.n	80092b6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80092b8:	3a01      	subs	r2, #1
 80092ba:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80092be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80092c0:	4288      	cmp	r0, r1
 80092c2:	d02b      	beq.n	800931c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092c4:	bb62      	cbnz	r2, 8009320 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092c6:	1d25      	adds	r5, r4, #4
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7fe fdf7 	bl	8007ebc <uxListRemove>
 80092ce:	b970      	cbnz	r0, 80092ee <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80092d2:	2314      	movs	r3, #20
 80092d4:	fb03 f302 	mul.w	r3, r3, r2
 80092d8:	4913      	ldr	r1, [pc, #76]	; (8009328 <xTaskPriorityDisinherit+0xa8>)
 80092da:	58cb      	ldr	r3, [r1, r3]
 80092dc:	b93b      	cbnz	r3, 80092ee <xTaskPriorityDisinherit+0x6e>
 80092de:	2301      	movs	r3, #1
 80092e0:	fa03 f202 	lsl.w	r2, r3, r2
 80092e4:	4911      	ldr	r1, [pc, #68]	; (800932c <xTaskPriorityDisinherit+0xac>)
 80092e6:	680b      	ldr	r3, [r1, #0]
 80092e8:	ea23 0302 	bic.w	r3, r3, r2
 80092ec:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80092f0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f2:	f1c3 0207 	rsb	r2, r3, #7
 80092f6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80092f8:	2401      	movs	r4, #1
 80092fa:	fa04 f203 	lsl.w	r2, r4, r3
 80092fe:	490b      	ldr	r1, [pc, #44]	; (800932c <xTaskPriorityDisinherit+0xac>)
 8009300:	6808      	ldr	r0, [r1, #0]
 8009302:	4302      	orrs	r2, r0
 8009304:	600a      	str	r2, [r1, #0]
 8009306:	4629      	mov	r1, r5
 8009308:	4a07      	ldr	r2, [pc, #28]	; (8009328 <xTaskPriorityDisinherit+0xa8>)
 800930a:	2014      	movs	r0, #20
 800930c:	fb00 2003 	mla	r0, r0, r3, r2
 8009310:	f7fe fdae 	bl	8007e70 <vListInsertEnd>
					xReturn = pdTRUE;
 8009314:	4620      	mov	r0, r4
	}
 8009316:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009318:	2000      	movs	r0, #0
	}
 800931a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800931c:	2000      	movs	r0, #0
 800931e:	e7fa      	b.n	8009316 <xTaskPriorityDisinherit+0x96>
 8009320:	2000      	movs	r0, #0
		return xReturn;
 8009322:	e7f8      	b.n	8009316 <xTaskPriorityDisinherit+0x96>
 8009324:	20001300 	.word	0x20001300
 8009328:	2000130c 	.word	0x2000130c
 800932c:	200013b0 	.word	0x200013b0

08009330 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009330:	4b05      	ldr	r3, [pc, #20]	; (8009348 <pvTaskIncrementMutexHeldCount+0x18>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b123      	cbz	r3, 8009340 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009336:	4b04      	ldr	r3, [pc, #16]	; (8009348 <pvTaskIncrementMutexHeldCount+0x18>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800933c:	3301      	adds	r3, #1
 800933e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8009340:	4b01      	ldr	r3, [pc, #4]	; (8009348 <pvTaskIncrementMutexHeldCount+0x18>)
 8009342:	6818      	ldr	r0, [r3, #0]
	}
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20001300 	.word	0x20001300

0800934c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <prvGetNextExpireTime+0x1c>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	6813      	ldr	r3, [r2, #0]
 8009352:	fab3 f383 	clz	r3, r3
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800935a:	b913      	cbnz	r3, 8009362 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800935c:	68d3      	ldr	r3, [r2, #12]
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009362:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	2000142c 	.word	0x2000142c

0800936c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800936c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800936e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009370:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009372:	4291      	cmp	r1, r2
 8009374:	d80c      	bhi.n	8009390 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009376:	1ad2      	subs	r2, r2, r3
 8009378:	6983      	ldr	r3, [r0, #24]
 800937a:	429a      	cmp	r2, r3
 800937c:	d301      	bcc.n	8009382 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800937e:	2001      	movs	r0, #1
 8009380:	e010      	b.n	80093a4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009382:	1d01      	adds	r1, r0, #4
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <prvInsertTimerInActiveList+0x40>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	f7fe fd7e 	bl	8007e88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800938c:	2000      	movs	r0, #0
 800938e:	e009      	b.n	80093a4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009390:	429a      	cmp	r2, r3
 8009392:	d201      	bcs.n	8009398 <prvInsertTimerInActiveList+0x2c>
 8009394:	4299      	cmp	r1, r3
 8009396:	d206      	bcs.n	80093a6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009398:	1d01      	adds	r1, r0, #4
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <prvInsertTimerInActiveList+0x44>)
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f7fe fd73 	bl	8007e88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80093a2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80093a4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 80093a6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80093a8:	e7fc      	b.n	80093a4 <prvInsertTimerInActiveList+0x38>
 80093aa:	bf00      	nop
 80093ac:	20001430 	.word	0x20001430
 80093b0:	2000142c 	.word	0x2000142c

080093b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093b4:	b530      	push	{r4, r5, lr}
 80093b6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093b8:	f000 fa94 	bl	80098e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <prvCheckForValidListAndQueue+0x50>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	b11b      	cbz	r3, 80093ca <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093c2:	f000 fab1 	bl	8009928 <vPortExitCritical>
}
 80093c6:	b003      	add	sp, #12
 80093c8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80093ca:	4d0f      	ldr	r5, [pc, #60]	; (8009408 <prvCheckForValidListAndQueue+0x54>)
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7fe fd41 	bl	8007e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093d2:	4c0e      	ldr	r4, [pc, #56]	; (800940c <prvCheckForValidListAndQueue+0x58>)
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7fe fd3d 	bl	8007e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <prvCheckForValidListAndQueue+0x5c>)
 80093dc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093de:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <prvCheckForValidListAndQueue+0x60>)
 80093e0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093e2:	2300      	movs	r3, #0
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <prvCheckForValidListAndQueue+0x64>)
 80093e8:	4a0c      	ldr	r2, [pc, #48]	; (800941c <prvCheckForValidListAndQueue+0x68>)
 80093ea:	2110      	movs	r1, #16
 80093ec:	200a      	movs	r0, #10
 80093ee:	f7fe fe6c 	bl	80080ca <xQueueGenericCreateStatic>
 80093f2:	4b04      	ldr	r3, [pc, #16]	; (8009404 <prvCheckForValidListAndQueue+0x50>)
 80093f4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0e3      	beq.n	80093c2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093fa:	4909      	ldr	r1, [pc, #36]	; (8009420 <prvCheckForValidListAndQueue+0x6c>)
 80093fc:	f7ff f9e6 	bl	80087cc <vQueueAddToRegistry>
 8009400:	e7df      	b.n	80093c2 <prvCheckForValidListAndQueue+0xe>
 8009402:	bf00      	nop
 8009404:	20001550 	.word	0x20001550
 8009408:	200014d4 	.word	0x200014d4
 800940c:	200014e8 	.word	0x200014e8
 8009410:	2000142c 	.word	0x2000142c
 8009414:	20001430 	.word	0x20001430
 8009418:	20001500 	.word	0x20001500
 800941c:	20001434 	.word	0x20001434
 8009420:	0800ee88 	.word	0x0800ee88

08009424 <prvInitialiseNewTimer>:
{
 8009424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009428:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800942a:	b941      	cbnz	r1, 800943e <prvInitialiseNewTimer+0x1a>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	e7fe      	b.n	800943c <prvInitialiseNewTimer+0x18>
 800943e:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 8009440:	b174      	cbz	r4, 8009460 <prvInitialiseNewTimer+0x3c>
 8009442:	461d      	mov	r5, r3
 8009444:	4616      	mov	r6, r2
 8009446:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 8009448:	f7ff ffb4 	bl	80093b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800944c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009450:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009452:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009454:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800945a:	1d20      	adds	r0, r4, #4
 800945c:	f7fe fd05 	bl	8007e6a <vListInitialiseItem>
}
 8009460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009464 <xTimerCreateTimerTask>:
{
 8009464:	b510      	push	{r4, lr}
 8009466:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009468:	f7ff ffa4 	bl	80093b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800946c:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <xTimerCreateTimerTask+0x54>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	b1cb      	cbz	r3, 80094a6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009472:	2400      	movs	r4, #0
 8009474:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009476:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009478:	aa07      	add	r2, sp, #28
 800947a:	a906      	add	r1, sp, #24
 800947c:	a805      	add	r0, sp, #20
 800947e:	f7f7 f9c1 	bl	8000804 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009482:	9b05      	ldr	r3, [sp, #20]
 8009484:	9302      	str	r3, [sp, #8]
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	2305      	movs	r3, #5
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	4623      	mov	r3, r4
 8009490:	9a07      	ldr	r2, [sp, #28]
 8009492:	490a      	ldr	r1, [pc, #40]	; (80094bc <xTimerCreateTimerTask+0x58>)
 8009494:	480a      	ldr	r0, [pc, #40]	; (80094c0 <xTimerCreateTimerTask+0x5c>)
 8009496:	f7ff fb2f 	bl	8008af8 <xTaskCreateStatic>
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <xTimerCreateTimerTask+0x60>)
 800949c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800949e:	b110      	cbz	r0, 80094a6 <xTimerCreateTimerTask+0x42>
}
 80094a0:	2001      	movs	r0, #1
 80094a2:	b008      	add	sp, #32
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	e7fe      	b.n	80094b6 <xTimerCreateTimerTask+0x52>
 80094b8:	20001550 	.word	0x20001550
 80094bc:	0800ee90 	.word	0x0800ee90
 80094c0:	0800982d 	.word	0x0800982d
 80094c4:	20001554 	.word	0x20001554

080094c8 <xTimerCreate>:
	{
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	4605      	mov	r5, r0
 80094d0:	460e      	mov	r6, r1
 80094d2:	4617      	mov	r7, r2
 80094d4:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80094d6:	2030      	movs	r0, #48	; 0x30
 80094d8:	f000 fb66 	bl	8009ba8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80094dc:	4604      	mov	r4, r0
 80094de:	b158      	cbz	r0, 80094f8 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80094e0:	9001      	str	r0, [sp, #4]
 80094e2:	9b08      	ldr	r3, [sp, #32]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	4643      	mov	r3, r8
 80094e8:	463a      	mov	r2, r7
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff ff99 	bl	8009424 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80094f2:	2300      	movs	r3, #0
 80094f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 80094f8:	4620      	mov	r0, r4
 80094fa:	b002      	add	sp, #8
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009500 <xTimerCreateStatic>:
	{
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	b085      	sub	sp, #20
 8009504:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009506:	2530      	movs	r5, #48	; 0x30
 8009508:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800950a:	9d03      	ldr	r5, [sp, #12]
 800950c:	2d30      	cmp	r5, #48	; 0x30
 800950e:	d008      	beq.n	8009522 <xTimerCreateStatic+0x22>
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	e7fe      	b.n	8009520 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
 8009522:	b944      	cbnz	r4, 8009536 <xTimerCreateStatic+0x36>
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	e7fe      	b.n	8009534 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009536:	9401      	str	r4, [sp, #4]
 8009538:	9d08      	ldr	r5, [sp, #32]
 800953a:	9500      	str	r5, [sp, #0]
 800953c:	f7ff ff72 	bl	8009424 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8009546:	4620      	mov	r0, r4
 8009548:	b005      	add	sp, #20
 800954a:	bd30      	pop	{r4, r5, pc}

0800954c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800954c:	b1c8      	cbz	r0, 8009582 <xTimerGenericCommand+0x36>
{
 800954e:	b530      	push	{r4, r5, lr}
 8009550:	b085      	sub	sp, #20
 8009552:	4615      	mov	r5, r2
 8009554:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8009556:	4a17      	ldr	r2, [pc, #92]	; (80095b4 <xTimerGenericCommand+0x68>)
 8009558:	6810      	ldr	r0, [r2, #0]
 800955a:	b340      	cbz	r0, 80095ae <xTimerGenericCommand+0x62>
 800955c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800955e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009560:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009562:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009564:	2905      	cmp	r1, #5
 8009566:	dc1d      	bgt.n	80095a4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009568:	f7ff fe2a 	bl	80091c0 <xTaskGetSchedulerState>
 800956c:	2802      	cmp	r0, #2
 800956e:	d011      	beq.n	8009594 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009570:	2300      	movs	r3, #0
 8009572:	461a      	mov	r2, r3
 8009574:	4669      	mov	r1, sp
 8009576:	480f      	ldr	r0, [pc, #60]	; (80095b4 <xTimerGenericCommand+0x68>)
 8009578:	6800      	ldr	r0, [r0, #0]
 800957a:	f7fe fe5b 	bl	8008234 <xQueueGenericSend>
}
 800957e:	b005      	add	sp, #20
 8009580:	bd30      	pop	{r4, r5, pc}
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	e7fe      	b.n	8009592 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009594:	2300      	movs	r3, #0
 8009596:	9a08      	ldr	r2, [sp, #32]
 8009598:	4669      	mov	r1, sp
 800959a:	4806      	ldr	r0, [pc, #24]	; (80095b4 <xTimerGenericCommand+0x68>)
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f7fe fe49 	bl	8008234 <xQueueGenericSend>
 80095a2:	e7ec      	b.n	800957e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095a4:	2300      	movs	r3, #0
 80095a6:	4669      	mov	r1, sp
 80095a8:	f7fe ff28 	bl	80083fc <xQueueGenericSendFromISR>
 80095ac:	e7e7      	b.n	800957e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 80095ae:	2000      	movs	r0, #0
	return xReturn;
 80095b0:	e7e5      	b.n	800957e <xTimerGenericCommand+0x32>
 80095b2:	bf00      	nop
 80095b4:	20001550 	.word	0x20001550

080095b8 <prvSwitchTimerLists>:
{
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <prvSwitchTimerLists+0x70>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	b352      	cbz	r2, 800961a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ca:	1d25      	adds	r5, r4, #4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7fe fc75 	bl	8007ebc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d4:	4620      	mov	r0, r4
 80095d6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80095d8:	69e3      	ldr	r3, [r4, #28]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d1ee      	bne.n	80095bc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095de:	69a3      	ldr	r3, [r4, #24]
 80095e0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80095e2:	429e      	cmp	r6, r3
 80095e4:	d207      	bcs.n	80095f6 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ea:	4629      	mov	r1, r5
 80095ec:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <prvSwitchTimerLists+0x70>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	f7fe fc4a 	bl	8007e88 <vListInsert>
 80095f4:	e7e2      	b.n	80095bc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f6:	2100      	movs	r1, #0
 80095f8:	9100      	str	r1, [sp, #0]
 80095fa:	460b      	mov	r3, r1
 80095fc:	4632      	mov	r2, r6
 80095fe:	4620      	mov	r0, r4
 8009600:	f7ff ffa4 	bl	800954c <xTimerGenericCommand>
				configASSERT( xResult );
 8009604:	2800      	cmp	r0, #0
 8009606:	d1d9      	bne.n	80095bc <prvSwitchTimerLists+0x4>
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	e7fe      	b.n	8009618 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800961a:	4a04      	ldr	r2, [pc, #16]	; (800962c <prvSwitchTimerLists+0x74>)
 800961c:	6810      	ldr	r0, [r2, #0]
 800961e:	4902      	ldr	r1, [pc, #8]	; (8009628 <prvSwitchTimerLists+0x70>)
 8009620:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009622:	6013      	str	r3, [r2, #0]
}
 8009624:	b002      	add	sp, #8
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	2000142c 	.word	0x2000142c
 800962c:	20001430 	.word	0x20001430

08009630 <prvSampleTimeNow>:
{
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009634:	f7ff fb12 	bl	8008c5c <xTaskGetTickCount>
 8009638:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800963a:	4b07      	ldr	r3, [pc, #28]	; (8009658 <prvSampleTimeNow+0x28>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4283      	cmp	r3, r0
 8009640:	d805      	bhi.n	800964e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009646:	4b04      	ldr	r3, [pc, #16]	; (8009658 <prvSampleTimeNow+0x28>)
 8009648:	601c      	str	r4, [r3, #0]
}
 800964a:	4620      	mov	r0, r4
 800964c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800964e:	f7ff ffb3 	bl	80095b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	e7f6      	b.n	8009646 <prvSampleTimeNow+0x16>
 8009658:	200014fc 	.word	0x200014fc

0800965c <prvProcessExpiredTimer>:
{
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	4605      	mov	r5, r0
 8009662:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009664:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <prvProcessExpiredTimer+0x5c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800966c:	1d20      	adds	r0, r4, #4
 800966e:	f7fe fc25 	bl	8007ebc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009672:	69e3      	ldr	r3, [r4, #28]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d004      	beq.n	8009682 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967a:	4620      	mov	r0, r4
 800967c:	4798      	blx	r3
}
 800967e:	b002      	add	sp, #8
 8009680:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009682:	69a1      	ldr	r1, [r4, #24]
 8009684:	462b      	mov	r3, r5
 8009686:	4632      	mov	r2, r6
 8009688:	4429      	add	r1, r5
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff fe6e 	bl	800936c <prvInsertTimerInActiveList>
 8009690:	2800      	cmp	r0, #0
 8009692:	d0f1      	beq.n	8009678 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009694:	2100      	movs	r1, #0
 8009696:	9100      	str	r1, [sp, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	462a      	mov	r2, r5
 800969c:	4620      	mov	r0, r4
 800969e:	f7ff ff55 	bl	800954c <xTimerGenericCommand>
			configASSERT( xResult );
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1e8      	bne.n	8009678 <prvProcessExpiredTimer+0x1c>
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	e7fe      	b.n	80096b6 <prvProcessExpiredTimer+0x5a>
 80096b8:	2000142c 	.word	0x2000142c

080096bc <prvProcessTimerOrBlockTask>:
{
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	4606      	mov	r6, r0
 80096c2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80096c4:	f7ff fac2 	bl	8008c4c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096c8:	a801      	add	r0, sp, #4
 80096ca:	f7ff ffb1 	bl	8009630 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	bb1b      	cbnz	r3, 800971a <prvProcessTimerOrBlockTask+0x5e>
 80096d2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096d4:	b90c      	cbnz	r4, 80096da <prvProcessTimerOrBlockTask+0x1e>
 80096d6:	42b0      	cmp	r0, r6
 80096d8:	d218      	bcs.n	800970c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 80096da:	b12c      	cbz	r4, 80096e8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096dc:	4b11      	ldr	r3, [pc, #68]	; (8009724 <prvProcessTimerOrBlockTask+0x68>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681c      	ldr	r4, [r3, #0]
 80096e2:	fab4 f484 	clz	r4, r4
 80096e6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096e8:	4622      	mov	r2, r4
 80096ea:	1b71      	subs	r1, r6, r5
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <prvProcessTimerOrBlockTask+0x6c>)
 80096ee:	6818      	ldr	r0, [r3, #0]
 80096f0:	f7ff f880 	bl	80087f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096f4:	f7ff fb44 	bl	8008d80 <xTaskResumeAll>
 80096f8:	b988      	cbnz	r0, 800971e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <prvProcessTimerOrBlockTask+0x70>)
 80096fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	e008      	b.n	800971e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800970c:	f7ff fb38 	bl	8008d80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ffa2 	bl	800965c <prvProcessExpiredTimer>
 8009718:	e001      	b.n	800971e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800971a:	f7ff fb31 	bl	8008d80 <xTaskResumeAll>
}
 800971e:	b002      	add	sp, #8
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	bf00      	nop
 8009724:	20001430 	.word	0x20001430
 8009728:	20001550 	.word	0x20001550
 800972c:	e000ed04 	.word	0xe000ed04

08009730 <prvProcessReceivedCommands>:
{
 8009730:	b530      	push	{r4, r5, lr}
 8009732:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009734:	e002      	b.n	800973c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	da10      	bge.n	800975e <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800973c:	2300      	movs	r3, #0
 800973e:	461a      	mov	r2, r3
 8009740:	a904      	add	r1, sp, #16
 8009742:	4839      	ldr	r0, [pc, #228]	; (8009828 <prvProcessReceivedCommands+0xf8>)
 8009744:	6800      	ldr	r0, [r0, #0]
 8009746:	f7fe ff19 	bl	800857c <xQueueGenericReceive>
 800974a:	2800      	cmp	r0, #0
 800974c:	d069      	beq.n	8009822 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	daf0      	bge.n	8009736 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009754:	9907      	ldr	r1, [sp, #28]
 8009756:	9806      	ldr	r0, [sp, #24]
 8009758:	9b05      	ldr	r3, [sp, #20]
 800975a:	4798      	blx	r3
 800975c:	e7eb      	b.n	8009736 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800975e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009760:	6963      	ldr	r3, [r4, #20]
 8009762:	b113      	cbz	r3, 800976a <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009764:	1d20      	adds	r0, r4, #4
 8009766:	f7fe fba9 	bl	8007ebc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800976a:	a803      	add	r0, sp, #12
 800976c:	f7ff ff60 	bl	8009630 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	2b09      	cmp	r3, #9
 8009774:	d8e2      	bhi.n	800973c <prvProcessReceivedCommands+0xc>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <prvProcessReceivedCommands+0x4c>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097a5 	.word	0x080097a5
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097a5 	.word	0x080097a5
 8009788:	0800973d 	.word	0x0800973d
 800978c:	080097ed 	.word	0x080097ed
 8009790:	08009813 	.word	0x08009813
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097a5 	.word	0x080097a5
 800979c:	0800973d 	.word	0x0800973d
 80097a0:	080097ed 	.word	0x080097ed
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097a4:	9905      	ldr	r1, [sp, #20]
 80097a6:	69a5      	ldr	r5, [r4, #24]
 80097a8:	460b      	mov	r3, r1
 80097aa:	4602      	mov	r2, r0
 80097ac:	4429      	add	r1, r5
 80097ae:	4620      	mov	r0, r4
 80097b0:	f7ff fddc 	bl	800936c <prvInsertTimerInActiveList>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d0c1      	beq.n	800973c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ba:	4620      	mov	r0, r4
 80097bc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80097be:	69e3      	ldr	r3, [r4, #28]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d1bb      	bne.n	800973c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097c4:	69a2      	ldr	r2, [r4, #24]
 80097c6:	2100      	movs	r1, #0
 80097c8:	9100      	str	r1, [sp, #0]
 80097ca:	460b      	mov	r3, r1
 80097cc:	9805      	ldr	r0, [sp, #20]
 80097ce:	4402      	add	r2, r0
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7ff febb 	bl	800954c <xTimerGenericCommand>
							configASSERT( xResult );
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d1b0      	bne.n	800973c <prvProcessReceivedCommands+0xc>
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	e7fe      	b.n	80097ea <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097ec:	9905      	ldr	r1, [sp, #20]
 80097ee:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097f0:	b131      	cbz	r1, 8009800 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097f2:	4603      	mov	r3, r0
 80097f4:	4602      	mov	r2, r0
 80097f6:	4401      	add	r1, r0
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fdb7 	bl	800936c <prvInsertTimerInActiveList>
					break;
 80097fe:	e79d      	b.n	800973c <prvProcessReceivedCommands+0xc>
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	e7fe      	b.n	8009810 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009812:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d190      	bne.n	800973c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fa52 	bl	8009cc4 <vPortFree>
 8009820:	e78c      	b.n	800973c <prvProcessReceivedCommands+0xc>
}
 8009822:	b009      	add	sp, #36	; 0x24
 8009824:	bd30      	pop	{r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20001550 	.word	0x20001550

0800982c <prvTimerTask>:
{
 800982c:	b500      	push	{lr}
 800982e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009830:	a801      	add	r0, sp, #4
 8009832:	f7ff fd8b 	bl	800934c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009836:	9901      	ldr	r1, [sp, #4]
 8009838:	f7ff ff40 	bl	80096bc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800983c:	f7ff ff78 	bl	8009730 <prvProcessReceivedCommands>
 8009840:	e7f6      	b.n	8009830 <prvTimerTask+0x4>
	...

08009844 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <prvTaskExitError+0x30>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d008      	beq.n	8009860 <prvTaskExitError+0x1c>
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	e7fe      	b.n	800985e <prvTaskExitError+0x1a>
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	e7fe      	b.n	8009870 <prvTaskExitError+0x2c>
 8009872:	bf00      	nop
 8009874:	200000b0 	.word	0x200000b0

08009878 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009878:	4806      	ldr	r0, [pc, #24]	; (8009894 <prvPortStartFirstTask+0x1c>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	b662      	cpsie	i
 8009884:	b661      	cpsie	f
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	df00      	svc	0
 8009890:	bf00      	nop
 8009892:	0000      	.short	0x0000
 8009894:	e000ed08 	.word	0xe000ed08

08009898 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800989c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098a0:	f021 0101 	bic.w	r1, r1, #1
 80098a4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098a8:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <pxPortInitialiseStack+0x20>)
 80098aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098ae:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80098b2:	3840      	subs	r0, #64	; 0x40
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	08009845 	.word	0x08009845
 80098bc:	00000000 	.word	0x00000000

080098c0 <SVC_Handler>:
	__asm volatile (
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <pxCurrentTCBConst2>)
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098ca:	f380 8809 	msr	PSP, r0
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f04f 0000 	mov.w	r0, #0
 80098d6:	f380 8811 	msr	BASEPRI, r0
 80098da:	f04e 0e0d 	orr.w	lr, lr, #13
 80098de:	4770      	bx	lr

080098e0 <pxCurrentTCBConst2>:
 80098e0:	20001300 	.word	0x20001300

080098e4 <vPortEnterCritical>:
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098f4:	4a0a      	ldr	r2, [pc, #40]	; (8009920 <vPortEnterCritical+0x3c>)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d000      	beq.n	8009902 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009900:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <vPortEnterCritical+0x40>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f013 0fff 	tst.w	r3, #255	; 0xff
 800990a:	d0f9      	beq.n	8009900 <vPortEnterCritical+0x1c>
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	e7fe      	b.n	800991c <vPortEnterCritical+0x38>
 800991e:	bf00      	nop
 8009920:	200000b0 	.word	0x200000b0
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <vPortExitCritical+0x28>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	b943      	cbnz	r3, 8009940 <vPortExitCritical+0x18>
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	e7fe      	b.n	800993e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009940:	3b01      	subs	r3, #1
 8009942:	4a03      	ldr	r2, [pc, #12]	; (8009950 <vPortExitCritical+0x28>)
 8009944:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009946:	b90b      	cbnz	r3, 800994c <vPortExitCritical+0x24>
	__asm volatile
 8009948:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	200000b0 	.word	0x200000b0
	...

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009970:	6010      	str	r0, [r2, #0]
 8009972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800997a:	f380 8811 	msr	BASEPRI, r0
 800997e:	f7ff fae1 	bl	8008f44 <vTaskSwitchContext>
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8811 	msr	BASEPRI, r0
 800998a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800998e:	6819      	ldr	r1, [r3, #0]
 8009990:	6808      	ldr	r0, [r1, #0]
 8009992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009996:	f380 8809 	msr	PSP, r0
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	4770      	bx	lr

080099a0 <pxCurrentTCBConst>:
 80099a0:	20001300 	.word	0x20001300

080099a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a4:	b508      	push	{r3, lr}
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099b6:	f7ff f957 	bl	8008c68 <xTaskIncrementTick>
 80099ba:	b118      	cbz	r0, 80099c4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099bc:	4b03      	ldr	r3, [pc, #12]	; (80099cc <SysTick_Handler+0x28>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80099c4:	2300      	movs	r3, #0
 80099c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80099ca:	bd08      	pop	{r3, pc}
 80099cc:	e000ed04 	.word	0xe000ed04

080099d0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099d0:	4b06      	ldr	r3, [pc, #24]	; (80099ec <vPortSetupTimerInterrupt+0x1c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortSetupTimerInterrupt+0x20>)
 80099d6:	fba2 2303 	umull	r2, r3, r2, r3
 80099da:	099b      	lsrs	r3, r3, #6
 80099dc:	3b01      	subs	r3, #1
 80099de:	4a05      	ldr	r2, [pc, #20]	; (80099f4 <vPortSetupTimerInterrupt+0x24>)
 80099e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <vPortSetupTimerInterrupt+0x28>)
 80099e4:	2207      	movs	r2, #7
 80099e6:	601a      	str	r2, [r3, #0]
}
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20000000 	.word	0x20000000
 80099f0:	10624dd3 	.word	0x10624dd3
 80099f4:	e000e014 	.word	0xe000e014
 80099f8:	e000e010 	.word	0xe000e010

080099fc <xPortStartScheduler>:
{
 80099fc:	b500      	push	{lr}
 80099fe:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a00:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <xPortStartScheduler+0x84>)
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a08:	22ff      	movs	r2, #255	; 0xff
 8009a0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a1c:	4a19      	ldr	r2, [pc, #100]	; (8009a84 <xPortStartScheduler+0x88>)
 8009a1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a20:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <xPortStartScheduler+0x8c>)
 8009a22:	2207      	movs	r2, #7
 8009a24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a26:	e009      	b.n	8009a3c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8009a28:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <xPortStartScheduler+0x8c>)
 8009a2a:	6813      	ldr	r3, [r2, #0]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a44:	d1f0      	bne.n	8009a28 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a46:	4a10      	ldr	r2, [pc, #64]	; (8009a88 <xPortStartScheduler+0x8c>)
 8009a48:	6813      	ldr	r3, [r2, #0]
 8009a4a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a50:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <xPortStartScheduler+0x84>)
 8009a58:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <xPortStartScheduler+0x90>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009a62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009a6a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009a6c:	f7ff ffb0 	bl	80099d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <xPortStartScheduler+0x94>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8009a76:	f7ff feff 	bl	8009878 <prvPortStartFirstTask>
	prvTaskExitError();
 8009a7a:	f7ff fee3 	bl	8009844 <prvTaskExitError>
 8009a7e:	bf00      	nop
 8009a80:	e000e400 	.word	0xe000e400
 8009a84:	20001558 	.word	0x20001558
 8009a88:	2000155c 	.word	0x2000155c
 8009a8c:	e000ed20 	.word	0xe000ed20
 8009a90:	200000b0 	.word	0x200000b0

08009a94 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8009a94:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d90f      	bls.n	8009abc <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a9c:	4a10      	ldr	r2, [pc, #64]	; (8009ae0 <vPortValidateInterruptPriority+0x4c>)
 8009a9e:	5c9b      	ldrb	r3, [r3, r2]
 8009aa0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009aa2:	4a10      	ldr	r2, [pc, #64]	; (8009ae4 <vPortValidateInterruptPriority+0x50>)
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d908      	bls.n	8009abc <vPortValidateInterruptPriority+0x28>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	e7fe      	b.n	8009aba <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <vPortValidateInterruptPriority+0x54>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ac4:	4a09      	ldr	r2, [pc, #36]	; (8009aec <vPortValidateInterruptPriority+0x58>)
 8009ac6:	6812      	ldr	r2, [r2, #0]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d908      	bls.n	8009ade <vPortValidateInterruptPriority+0x4a>
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	e7fe      	b.n	8009adc <vPortValidateInterruptPriority+0x48>
	}
 8009ade:	4770      	bx	lr
 8009ae0:	e000e3f0 	.word	0xe000e3f0
 8009ae4:	20001558 	.word	0x20001558
 8009ae8:	e000ed0c 	.word	0xe000ed0c
 8009aec:	2000155c 	.word	0x2000155c

08009af0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009af0:	4a12      	ldr	r2, [pc, #72]	; (8009b3c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009af2:	f012 0f07 	tst.w	r2, #7
 8009af6:	d01e      	beq.n	8009b36 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009af8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009afa:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009afe:	f5c1 5320 	rsb	r3, r1, #10240	; 0x2800
 8009b02:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b04:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <prvHeapInit+0x50>)
 8009b08:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b0e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009b10:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b12:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009b16:	480b      	ldr	r0, [pc, #44]	; (8009b44 <prvHeapInit+0x54>)
 8009b18:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009b1a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b1c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b1e:	1a99      	subs	r1, r3, r2
 8009b20:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b22:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b24:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <prvHeapInit+0x58>)
 8009b26:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <prvHeapInit+0x5c>)
 8009b2a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <prvHeapInit+0x60>)
 8009b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009b3a:	e7e4      	b.n	8009b06 <prvHeapInit+0x16>
 8009b3c:	20001564 	.word	0x20001564
 8009b40:	20003d70 	.word	0x20003d70
 8009b44:	20001560 	.word	0x20001560
 8009b48:	20003d6c 	.word	0x20003d6c
 8009b4c:	20003d68 	.word	0x20003d68
 8009b50:	20003d64 	.word	0x20003d64

08009b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b54:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b56:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <prvInsertBlockIntoFreeList+0x4c>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4282      	cmp	r2, r0
 8009b5c:	d31a      	bcc.n	8009b94 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b5e:	6859      	ldr	r1, [r3, #4]
 8009b60:	185c      	adds	r4, r3, r1
 8009b62:	4284      	cmp	r4, r0
 8009b64:	d103      	bne.n	8009b6e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b66:	6840      	ldr	r0, [r0, #4]
 8009b68:	4401      	add	r1, r0
 8009b6a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b6c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b6e:	6841      	ldr	r1, [r0, #4]
 8009b70:	1844      	adds	r4, r0, r1
 8009b72:	42a2      	cmp	r2, r4
 8009b74:	d112      	bne.n	8009b9c <prvInsertBlockIntoFreeList+0x48>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b76:	4c0b      	ldr	r4, [pc, #44]	; (8009ba4 <prvInsertBlockIntoFreeList+0x50>)
 8009b78:	6824      	ldr	r4, [r4, #0]
 8009b7a:	42a2      	cmp	r2, r4
 8009b7c:	d00c      	beq.n	8009b98 <prvInsertBlockIntoFreeList+0x44>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b7e:	6852      	ldr	r2, [r2, #4]
 8009b80:	4411      	add	r1, r2
 8009b82:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	d000      	beq.n	8009b90 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b8e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b90:	bc10      	pop	{r4}
 8009b92:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b94:	4613      	mov	r3, r2
 8009b96:	e7df      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b98:	6004      	str	r4, [r0, #0]
 8009b9a:	e7f6      	b.n	8009b8a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b9c:	6002      	str	r2, [r0, #0]
 8009b9e:	e7f4      	b.n	8009b8a <prvInsertBlockIntoFreeList+0x36>
 8009ba0:	20003d70 	.word	0x20003d70
 8009ba4:	20001560 	.word	0x20001560

08009ba8 <pvPortMalloc>:
{
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009bac:	f7ff f84e 	bl	8008c4c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009bb0:	4b3f      	ldr	r3, [pc, #252]	; (8009cb0 <pvPortMalloc+0x108>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	b1a3      	cbz	r3, 8009be0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bb6:	4b3f      	ldr	r3, [pc, #252]	; (8009cb4 <pvPortMalloc+0x10c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	421c      	tst	r4, r3
 8009bbc:	d013      	beq.n	8009be6 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 8009bbe:	f7ff f8df 	bl	8008d80 <xTaskResumeAll>
void *pvReturn = NULL;
 8009bc2:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8009bc4:	f7f6 fe10 	bl	80007e8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc8:	f016 0f07 	tst.w	r6, #7
 8009bcc:	d06e      	beq.n	8009cac <pvPortMalloc+0x104>
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	e7fe      	b.n	8009bde <pvPortMalloc+0x36>
			prvHeapInit();
 8009be0:	f7ff ff86 	bl	8009af0 <prvHeapInit>
 8009be4:	e7e7      	b.n	8009bb6 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 8009be6:	b194      	cbz	r4, 8009c0e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 8009be8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bea:	f014 0f07 	tst.w	r4, #7
 8009bee:	d00e      	beq.n	8009c0e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bf0:	f024 0407 	bic.w	r4, r4, #7
 8009bf4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf6:	f004 0307 	and.w	r3, r4, #7
 8009bfa:	b143      	cbz	r3, 8009c0e <pvPortMalloc+0x66>
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	e7fe      	b.n	8009c0c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c0e:	b134      	cbz	r4, 8009c1e <pvPortMalloc+0x76>
 8009c10:	4b29      	ldr	r3, [pc, #164]	; (8009cb8 <pvPortMalloc+0x110>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	d306      	bcc.n	8009c26 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 8009c18:	4b28      	ldr	r3, [pc, #160]	; (8009cbc <pvPortMalloc+0x114>)
 8009c1a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c1c:	e009      	b.n	8009c32 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8009c1e:	f7ff f8af 	bl	8008d80 <xTaskResumeAll>
void *pvReturn = NULL;
 8009c22:	2600      	movs	r6, #0
 8009c24:	e7ce      	b.n	8009bc4 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 8009c26:	f7ff f8ab 	bl	8008d80 <xTaskResumeAll>
void *pvReturn = NULL;
 8009c2a:	2600      	movs	r6, #0
 8009c2c:	e7ca      	b.n	8009bc4 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 8009c2e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c30:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c32:	686a      	ldr	r2, [r5, #4]
 8009c34:	42a2      	cmp	r2, r4
 8009c36:	d202      	bcs.n	8009c3e <pvPortMalloc+0x96>
 8009c38:	682a      	ldr	r2, [r5, #0]
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d1f7      	bne.n	8009c2e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 8009c3e:	4a1c      	ldr	r2, [pc, #112]	; (8009cb0 <pvPortMalloc+0x108>)
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	42aa      	cmp	r2, r5
 8009c44:	d014      	beq.n	8009c70 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c46:	681e      	ldr	r6, [r3, #0]
 8009c48:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c4a:	682a      	ldr	r2, [r5, #0]
 8009c4c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c4e:	686b      	ldr	r3, [r5, #4]
 8009c50:	1b1b      	subs	r3, r3, r4
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d914      	bls.n	8009c80 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c56:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c58:	f010 0f07 	tst.w	r0, #7
 8009c5c:	d00c      	beq.n	8009c78 <pvPortMalloc+0xd0>
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	e7fe      	b.n	8009c6e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 8009c70:	f7ff f886 	bl	8008d80 <xTaskResumeAll>
void *pvReturn = NULL;
 8009c74:	2600      	movs	r6, #0
 8009c76:	e7a5      	b.n	8009bc4 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c78:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c7a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c7c:	f7ff ff6a 	bl	8009b54 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c80:	686a      	ldr	r2, [r5, #4]
 8009c82:	490d      	ldr	r1, [pc, #52]	; (8009cb8 <pvPortMalloc+0x110>)
 8009c84:	680b      	ldr	r3, [r1, #0]
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c8a:	490d      	ldr	r1, [pc, #52]	; (8009cc0 <pvPortMalloc+0x118>)
 8009c8c:	6809      	ldr	r1, [r1, #0]
 8009c8e:	428b      	cmp	r3, r1
 8009c90:	d201      	bcs.n	8009c96 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c92:	490b      	ldr	r1, [pc, #44]	; (8009cc0 <pvPortMalloc+0x118>)
 8009c94:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c96:	4b07      	ldr	r3, [pc, #28]	; (8009cb4 <pvPortMalloc+0x10c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009ca2:	f7ff f86d 	bl	8008d80 <xTaskResumeAll>
		if( pvReturn == NULL )
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	d18e      	bne.n	8009bc8 <pvPortMalloc+0x20>
 8009caa:	e78b      	b.n	8009bc4 <pvPortMalloc+0x1c>
}
 8009cac:	4630      	mov	r0, r6
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	20001560 	.word	0x20001560
 8009cb4:	20003d64 	.word	0x20003d64
 8009cb8:	20003d68 	.word	0x20003d68
 8009cbc:	20003d70 	.word	0x20003d70
 8009cc0:	20003d6c 	.word	0x20003d6c

08009cc4 <vPortFree>:
	if( pv != NULL )
 8009cc4:	b380      	cbz	r0, 8009d28 <vPortFree+0x64>
{
 8009cc6:	b538      	push	{r3, r4, r5, lr}
 8009cc8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009cca:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009cd2:	4916      	ldr	r1, [pc, #88]	; (8009d2c <vPortFree+0x68>)
 8009cd4:	6809      	ldr	r1, [r1, #0]
 8009cd6:	420a      	tst	r2, r1
 8009cd8:	d108      	bne.n	8009cec <vPortFree+0x28>
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	e7fe      	b.n	8009cea <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cec:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8009cf0:	b140      	cbz	r0, 8009d04 <vPortFree+0x40>
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	e7fe      	b.n	8009d02 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d04:	ea22 0201 	bic.w	r2, r2, r1
 8009d08:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8009d0c:	f7fe ff9e 	bl	8008c4c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d10:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009d14:	4a06      	ldr	r2, [pc, #24]	; (8009d30 <vPortFree+0x6c>)
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	440b      	add	r3, r1
 8009d1a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f7ff ff19 	bl	8009b54 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8009d22:	f7ff f82d 	bl	8008d80 <xTaskResumeAll>
}
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20003d64 	.word	0x20003d64
 8009d30:	20003d68 	.word	0x20003d68

08009d34 <lfs_alloc_lookahead>:
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
 8009d34:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009d36:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8009d38:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009d3a:	6a1a      	ldr	r2, [r3, #32]
 8009d3c:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
 8009d3e:	fbb1 f3f2 	udiv	r3, r1, r2
 8009d42:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 8009d46:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	d90b      	bls.n	8009d64 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8009d4c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009d4e:	0948      	lsrs	r0, r1, #5
 8009d50:	f001 011f 	and.w	r1, r1, #31
 8009d54:	2301      	movs	r3, #1
 8009d56:	fa03 f101 	lsl.w	r1, r3, r1
 8009d5a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    }

    return 0;
}
 8009d64:	2000      	movs	r0, #0
 8009d66:	4770      	bx	lr

08009d68 <lfs_alloc_ack>:
        }
    }
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
 8009d68:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	6603      	str	r3, [r0, #96]	; 0x60
}
 8009d6e:	4770      	bx	lr

08009d70 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8009d70:	b410      	push	{r4}
    lfs_tag_t *filtertag = p;
    (void)buffer;

    // check for redundancy
    uint32_t mask = LFS_MKTAG(0x7ff, 0x3ff, 0);
    if ((mask & tag) == (mask & *filtertag) ||
 8009d72:	6802      	ldr	r2, [r0, #0]
 8009d74:	ea82 0401 	eor.w	r4, r2, r1
 8009d78:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <lfs_dir_traverse_filter+0x58>)
 8009d7a:	4023      	ands	r3, r4
 8009d7c:	b1eb      	cbz	r3, 8009dba <lfs_dir_traverse_filter+0x4a>
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8009d7e:	4c12      	ldr	r4, [pc, #72]	; (8009dc8 <lfs_dir_traverse_filter+0x58>)
 8009d80:	400c      	ands	r4, r1
            (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <lfs_dir_traverse_filter+0x5c>)
 8009d84:	4013      	ands	r3, r2
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8009d86:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009d8a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    if ((mask & tag) == (mask & *filtertag) ||
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d016      	beq.n	8009dc0 <lfs_dir_traverse_filter+0x50>
    return (tag & 0x70000000) >> 20;
 8009d92:	0d0b      	lsrs	r3, r1, #20
 8009d94:	f403 64e0 	and.w	r4, r3, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009d98:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009d9c:	d001      	beq.n	8009da2 <lfs_dir_traverse_filter+0x32>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 8009d9e:	2000      	movs	r0, #0
 8009da0:	e00c      	b.n	8009dbc <lfs_dir_traverse_filter+0x4c>
    return (tag & 0x000ffc00) >> 10;
 8009da2:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8009da6:	f3c2 2489 	ubfx	r4, r2, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009daa:	428c      	cmp	r4, r1
 8009dac:	d30a      	bcc.n	8009dc4 <lfs_dir_traverse_filter+0x54>
    return (int8_t)lfs_tag_chunk(tag);
 8009dae:	b25b      	sxtb	r3, r3
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8009db0:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 8009db4:	6002      	str	r2, [r0, #0]
    return false;
 8009db6:	2000      	movs	r0, #0
 8009db8:	e000      	b.n	8009dbc <lfs_dir_traverse_filter+0x4c>
        return true;
 8009dba:	2001      	movs	r0, #1
}
 8009dbc:	bc10      	pop	{r4}
 8009dbe:	4770      	bx	lr
        return true;
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	e7fb      	b.n	8009dbc <lfs_dir_traverse_filter+0x4c>
    return false;
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e7f9      	b.n	8009dbc <lfs_dir_traverse_filter+0x4c>
 8009dc8:	7ffffc00 	.word	0x7ffffc00
 8009dcc:	000ffc00 	.word	0x000ffc00

08009dd0 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 8009dd0:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	bf08      	it	eq
 8009dda:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 8009ddc:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8009de0:	3104      	adds	r1, #4

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8009de2:	6803      	ldr	r3, [r0, #0]
 8009de4:	4419      	add	r1, r3
 8009de6:	6001      	str	r1, [r0, #0]
    return 0;
}
 8009de8:	2000      	movs	r0, #0
 8009dea:	4770      	bx	lr

08009dec <lfs_fs_preporphans>:

    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    lfs->gpending.tag += orphans;
 8009dec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009dee:	4419      	add	r1, r3
    return tag & 0x000003ff;
 8009df0:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 8009df4:	3300      	adds	r3, #0
 8009df6:	bf18      	it	ne
 8009df8:	2301      	movne	r3, #1
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ (orphans << 31));
 8009dfa:	ea81 73c3 	eor.w	r3, r1, r3, lsl #31
 8009dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e02:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8009e04:	405a      	eors	r2, r3
 8009e06:	6482      	str	r2, [r0, #72]	; 0x48
 8009e08:	4059      	eors	r1, r3
 8009e0a:	63c1      	str	r1, [r0, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
}
 8009e0c:	4770      	bx	lr

08009e0e <lfs_fs_size_count>:
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 8009e0e:	6803      	ldr	r3, [r0, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	6003      	str	r3, [r0, #0]
    return 0;
}
 8009e14:	2000      	movs	r0, #0
 8009e16:	4770      	bx	lr

08009e18 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8009e18:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 8009e1a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009e1c:	6a03      	ldr	r3, [r0, #32]
 8009e1e:	428b      	cmp	r3, r1
 8009e20:	d902      	bls.n	8009e28 <lfs_bd_erase+0x10>
    return lfs->cfg->erase(lfs->cfg, block);
 8009e22:	68c3      	ldr	r3, [r0, #12]
 8009e24:	4798      	blx	r3
}
 8009e26:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->cfg->block_count);
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <lfs_bd_erase+0x1c>)
 8009e2a:	4a03      	ldr	r2, [pc, #12]	; (8009e38 <lfs_bd_erase+0x20>)
 8009e2c:	21dc      	movs	r1, #220	; 0xdc
 8009e2e:	4803      	ldr	r0, [pc, #12]	; (8009e3c <lfs_bd_erase+0x24>)
 8009e30:	f003 fb80 	bl	800d534 <__assert_func>
 8009e34:	0800ef78 	.word	0x0800ef78
 8009e38:	0800eec0 	.word	0x0800eec0
 8009e3c:	0800ef40 	.word	0x0800ef40

08009e40 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	b083      	sub	sp, #12
 8009e46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009e48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009e4a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 8009e4e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009e52:	d00c      	beq.n	8009e6e <lfs_bd_read+0x2e>
 8009e54:	4607      	mov	r7, r0
 8009e56:	468a      	mov	sl, r1
 8009e58:	4614      	mov	r4, r2
 8009e5a:	469b      	mov	fp, r3
    if (off+size > lfs->cfg->block_size) {
 8009e5c:	eb05 0309 	add.w	r3, r5, r9
 8009e60:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009e62:	69d2      	ldr	r2, [r2, #28]
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d95a      	bls.n	8009f1e <lfs_bd_read+0xde>
        return LFS_ERR_CORRUPT;
 8009e68:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009e6c:	e087      	b.n	8009f7e <lfs_bd_read+0x13e>
    LFS_ASSERT(block != 0xffffffff);
 8009e6e:	4b46      	ldr	r3, [pc, #280]	; (8009f88 <lfs_bd_read+0x148>)
 8009e70:	4a46      	ldr	r2, [pc, #280]	; (8009f8c <lfs_bd_read+0x14c>)
 8009e72:	2129      	movs	r1, #41	; 0x29
 8009e74:	4846      	ldr	r0, [pc, #280]	; (8009f90 <lfs_bd_read+0x150>)
 8009e76:	f003 fb5d 	bl	800d534 <__assert_func>
                off < pcache->off + pcache->size) {
 8009e7a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009e7e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009e82:	18ca      	adds	r2, r1, r3
        if (pcache && block == pcache->block &&
 8009e84:	42aa      	cmp	r2, r5
 8009e86:	d956      	bls.n	8009f36 <lfs_bd_read+0xf6>
            if (off >= pcache->off) {
 8009e88:	42a9      	cmp	r1, r5
 8009e8a:	d904      	bls.n	8009e96 <lfs_bd_read+0x56>
            diff = lfs_min(diff, pcache->off-off);
 8009e8c:	1b49      	subs	r1, r1, r5
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
 8009e8e:	4549      	cmp	r1, r9
 8009e90:	bf28      	it	cs
 8009e92:	4649      	movcs	r1, r9
 8009e94:	e015      	b.n	8009ec2 <lfs_bd_read+0x82>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8009e96:	eba1 0805 	sub.w	r8, r1, r5
 8009e9a:	4498      	add	r8, r3
 8009e9c:	45c8      	cmp	r8, r9
 8009e9e:	bf28      	it	cs
 8009ea0:	46c8      	movcs	r8, r9
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8009ea2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009ea6:	1a69      	subs	r1, r5, r1
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4419      	add	r1, r3
 8009eac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009eae:	f003 fbb4 	bl	800d61a <memcpy>
                data += diff;
 8009eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eb4:	4443      	add	r3, r8
 8009eb6:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 8009eb8:	4445      	add	r5, r8
                size -= diff;
 8009eba:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 8009ebe:	e02e      	b.n	8009f1e <lfs_bd_read+0xde>
        lfs_size_t diff = size;
 8009ec0:	4649      	mov	r1, r9
        if (block == rcache->block &&
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	42b3      	cmp	r3, r6
 8009ec6:	d038      	beq.n	8009f3a <lfs_bd_read+0xfa>
        LFS_ASSERT(block < lfs->cfg->block_count);
 8009ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	42b3      	cmp	r3, r6
 8009ece:	d94f      	bls.n	8009f70 <lfs_bd_read+0x130>
        rcache->block = block;
 8009ed0:	6026      	str	r6, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8009ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ed4:	695b      	ldr	r3, [r3, #20]
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
 8009ed6:	fbb5 f2f3 	udiv	r2, r5, r3
 8009eda:	fb03 5212 	mls	r2, r3, r2, r5
 8009ede:	1aaa      	subs	r2, r5, r2
 8009ee0:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8009ee2:	eb05 030b 	add.w	r3, r5, fp
 8009ee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ee8:	6948      	ldr	r0, [r1, #20]
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
 8009eea:	4403      	add	r3, r0
 8009eec:	3b01      	subs	r3, #1
    return a - (a % alignment);
 8009eee:	fbb3 fcf0 	udiv	ip, r3, r0
 8009ef2:	fb00 301c 	mls	r0, r0, ip, r3
 8009ef6:	1a1b      	subs	r3, r3, r0
                lfs_min(lfs->cfg->block_size - rcache->off,
 8009ef8:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8009efa:	1a80      	subs	r0, r0, r2
 8009efc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
 8009efe:	4288      	cmp	r0, r1
 8009f00:	bf28      	it	cs
 8009f02:	4608      	movcs	r0, r1
 8009f04:	4283      	cmp	r3, r0
 8009f06:	bf28      	it	cs
 8009f08:	4603      	movcs	r3, r0
 8009f0a:	60a3      	str	r3, [r4, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8009f0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009f0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	68e3      	ldr	r3, [r4, #12]
 8009f16:	4631      	mov	r1, r6
 8009f18:	47c0      	blx	r8
        if (err) {
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	bb78      	cbnz	r0, 8009f7e <lfs_bd_read+0x13e>
    while (size > 0) {
 8009f1e:	f1b9 0f00 	cmp.w	r9, #0
 8009f22:	d02b      	beq.n	8009f7c <lfs_bd_read+0x13c>
        if (pcache && block == pcache->block &&
 8009f24:	f1ba 0f00 	cmp.w	sl, #0
 8009f28:	d0ca      	beq.n	8009ec0 <lfs_bd_read+0x80>
 8009f2a:	f8da 3000 	ldr.w	r3, [sl]
 8009f2e:	42b3      	cmp	r3, r6
 8009f30:	d0a3      	beq.n	8009e7a <lfs_bd_read+0x3a>
        lfs_size_t diff = size;
 8009f32:	4649      	mov	r1, r9
 8009f34:	e7c5      	b.n	8009ec2 <lfs_bd_read+0x82>
 8009f36:	4649      	mov	r1, r9
 8009f38:	e7c3      	b.n	8009ec2 <lfs_bd_read+0x82>
                off < rcache->off + rcache->size) {
 8009f3a:	6863      	ldr	r3, [r4, #4]
 8009f3c:	68a2      	ldr	r2, [r4, #8]
 8009f3e:	1898      	adds	r0, r3, r2
        if (block == rcache->block &&
 8009f40:	42a8      	cmp	r0, r5
 8009f42:	d9c1      	bls.n	8009ec8 <lfs_bd_read+0x88>
            if (off >= rcache->off) {
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	d8bf      	bhi.n	8009ec8 <lfs_bd_read+0x88>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8009f48:	eba3 0805 	sub.w	r8, r3, r5
 8009f4c:	4490      	add	r8, r2
 8009f4e:	4588      	cmp	r8, r1
 8009f50:	bf28      	it	cs
 8009f52:	4688      	movcs	r8, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8009f54:	68e1      	ldr	r1, [r4, #12]
 8009f56:	1aeb      	subs	r3, r5, r3
 8009f58:	4642      	mov	r2, r8
 8009f5a:	4419      	add	r1, r3
 8009f5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f5e:	f003 fb5c 	bl	800d61a <memcpy>
                data += diff;
 8009f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f64:	4443      	add	r3, r8
 8009f66:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 8009f68:	4445      	add	r5, r8
                size -= diff;
 8009f6a:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 8009f6e:	e7d6      	b.n	8009f1e <lfs_bd_read+0xde>
        LFS_ASSERT(block < lfs->cfg->block_count);
 8009f70:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <lfs_bd_read+0x154>)
 8009f72:	4a06      	ldr	r2, [pc, #24]	; (8009f8c <lfs_bd_read+0x14c>)
 8009f74:	2154      	movs	r1, #84	; 0x54
 8009f76:	4806      	ldr	r0, [pc, #24]	; (8009f90 <lfs_bd_read+0x150>)
 8009f78:	f003 fadc 	bl	800d534 <__assert_func>
    return 0;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	b003      	add	sp, #12
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	bf00      	nop
 8009f88:	0800efd8 	.word	0x0800efd8
 8009f8c:	0800ee98 	.word	0x0800ee98
 8009f90:	0800ef40 	.word	0x0800ef40
 8009f94:	0800ef78 	.word	0x0800ef78

08009f98 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8009f98:	b530      	push	{r4, r5, lr}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 8009f9e:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009fa0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	6811      	ldr	r1, [r2, #0]
 8009fa6:	6852      	ldr	r2, [r2, #4]
 8009fa8:	2508      	movs	r5, #8
 8009faa:	9503      	str	r5, [sp, #12]
 8009fac:	ad04      	add	r5, sp, #16
 8009fae:	9502      	str	r5, [sp, #8]
 8009fb0:	9201      	str	r2, [sp, #4]
 8009fb2:	9100      	str	r1, [sp, #0]
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	f100 0110 	add.w	r1, r0, #16
 8009fba:	f7ff ff41 	bl	8009e40 <lfs_bd_read>
    if (err) {
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	b978      	cbnz	r0, 8009fe2 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009fc2:	9a04      	ldr	r2, [sp, #16]
 8009fc4:	6861      	ldr	r1, [r4, #4]
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	d008      	beq.n	8009fdc <lfs_fs_parent_match+0x44>
 8009fca:	9d05      	ldr	r5, [sp, #20]
 8009fcc:	68a0      	ldr	r0, [r4, #8]
 8009fce:	4285      	cmp	r5, r0
 8009fd0:	d004      	beq.n	8009fdc <lfs_fs_parent_match+0x44>
 8009fd2:	4282      	cmp	r2, r0
 8009fd4:	d002      	beq.n	8009fdc <lfs_fs_parent_match+0x44>
 8009fd6:	42a9      	cmp	r1, r5
 8009fd8:	d000      	beq.n	8009fdc <lfs_fs_parent_match+0x44>
 8009fda:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009fdc:	3300      	adds	r3, #0
 8009fde:	bf18      	it	ne
 8009fe0:	2301      	movne	r3, #1
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	b007      	add	sp, #28
 8009fe6:	bd30      	pop	{r4, r5, pc}

08009fe8 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	b089      	sub	sp, #36	; 0x24
 8009fee:	4682      	mov	sl, r0
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	9205      	str	r2, [sp, #20]
 8009ff4:	4698      	mov	r8, r3
 8009ff6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009ff8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009ffa:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8009ffe:	9d15      	ldr	r5, [sp, #84]	; 0x54
    for (lfs_off_t i = 0; i < size; i++) {
 800a000:	2400      	movs	r4, #0
 800a002:	42ac      	cmp	r4, r5
 800a004:	d21d      	bcs.n	800a042 <lfs_bd_cmp+0x5a>
        int err = lfs_bd_read(lfs,
 800a006:	19a3      	adds	r3, r4, r6
 800a008:	2201      	movs	r2, #1
 800a00a:	9203      	str	r2, [sp, #12]
 800a00c:	f10d 021f 	add.w	r2, sp, #31
 800a010:	9202      	str	r2, [sp, #8]
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	9700      	str	r7, [sp, #0]
 800a016:	eba8 0304 	sub.w	r3, r8, r4
 800a01a:	9a05      	ldr	r2, [sp, #20]
 800a01c:	4649      	mov	r1, r9
 800a01e:	4650      	mov	r0, sl
 800a020:	f7ff ff0e 	bl	8009e40 <lfs_bd_read>
        if (err) {
 800a024:	4603      	mov	r3, r0
 800a026:	b968      	cbnz	r0, 800a044 <lfs_bd_cmp+0x5c>
        if (dat != data[i]) {
 800a028:	f81b 2004 	ldrb.w	r2, [fp, r4]
 800a02c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a030:	429a      	cmp	r2, r3
 800a032:	d101      	bne.n	800a038 <lfs_bd_cmp+0x50>
    for (lfs_off_t i = 0; i < size; i++) {
 800a034:	3401      	adds	r4, #1
 800a036:	e7e4      	b.n	800a002 <lfs_bd_cmp+0x1a>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 800a038:	d801      	bhi.n	800a03e <lfs_bd_cmp+0x56>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e002      	b.n	800a044 <lfs_bd_cmp+0x5c>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <lfs_bd_cmp+0x5c>
    return LFS_CMP_EQ;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	b009      	add	sp, #36	; 0x24
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a04c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 800a04c:	b530      	push	{r4, r5, lr}
 800a04e:	b085      	sub	sp, #20
 800a050:	4604      	mov	r4, r0
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800a052:	6883      	ldr	r3, [r0, #8]
    return tag & 0x000003ff;
 800a054:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a058:	42ab      	cmp	r3, r5
 800a05a:	bf28      	it	cs
 800a05c:	462b      	movcs	r3, r5
    int res = lfs_bd_cmp(lfs,
 800a05e:	6811      	ldr	r1, [r2, #0]
 800a060:	6852      	ldr	r2, [r2, #4]
 800a062:	6840      	ldr	r0, [r0, #4]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	9002      	str	r0, [sp, #8]
 800a068:	9201      	str	r2, [sp, #4]
 800a06a:	9100      	str	r1, [sp, #0]
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	2100      	movs	r1, #0
 800a070:	4610      	mov	r0, r2
 800a072:	f7ff ffb9 	bl	8009fe8 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 800a076:	4603      	mov	r3, r0
 800a078:	b920      	cbnz	r0, 800a084 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 800a07a:	68a2      	ldr	r2, [r4, #8]
 800a07c:	42aa      	cmp	r2, r5
 800a07e:	d001      	beq.n	800a084 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a080:	d203      	bcs.n	800a08a <lfs_dir_find_match+0x3e>
 800a082:	2301      	movs	r3, #1
}
 800a084:	4618      	mov	r0, r3
 800a086:	b005      	add	sp, #20
 800a088:	bd30      	pop	{r4, r5, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a08a:	2302      	movs	r3, #2
 800a08c:	e7fa      	b.n	800a084 <lfs_dir_find_match+0x38>
	...

0800a090 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	b095      	sub	sp, #84	; 0x54
 800a096:	4683      	mov	fp, r0
 800a098:	4688      	mov	r8, r1
 800a09a:	4615      	mov	r5, r2
 800a09c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t revs[2] = {0, 0};
 800a09e:	2400      	movs	r4, #0
 800a0a0:	9410      	str	r4, [sp, #64]	; 0x40
 800a0a2:	9411      	str	r4, [sp, #68]	; 0x44
    for (int i = 0; i < 2; i++) {
 800a0a4:	4626      	mov	r6, r4
 800a0a6:	e000      	b.n	800a0aa <lfs_dir_fetchmatch+0x1a>
 800a0a8:	3601      	adds	r6, #1
 800a0aa:	2e01      	cmp	r6, #1
 800a0ac:	dc2a      	bgt.n	800a104 <lfs_dir_fetchmatch+0x74>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a0ae:	00b7      	lsls	r7, r6, #2
        int err = lfs_bd_read(lfs,
 800a0b0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a0b4:	ab10      	add	r3, sp, #64	; 0x40
 800a0b6:	19da      	adds	r2, r3, r7
        int err = lfs_bd_read(lfs,
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	9202      	str	r2, [sp, #8]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	9101      	str	r1, [sp, #4]
 800a0c2:	9000      	str	r0, [sp, #0]
 800a0c4:	465a      	mov	r2, fp
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f7ff feba 	bl	8009e40 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 800a0cc:	ab14      	add	r3, sp, #80	; 0x50
 800a0ce:	441f      	add	r7, r3
 800a0d0:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	b118      	cbz	r0, 800a0e0 <lfs_dir_fetchmatch+0x50>
 800a0d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a0dc:	f040 823d 	bne.w	800a55a <lfs_dir_fetchmatch+0x4ca>
        if (err != LFS_ERR_CORRUPT &&
 800a0e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a0e4:	d0e0      	beq.n	800a0a8 <lfs_dir_fetchmatch+0x18>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a0e6:	1c73      	adds	r3, r6, #1
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	bf48      	it	mi
 800a0ee:	425b      	negmi	r3, r3
 800a0f0:	a914      	add	r1, sp, #80	; 0x50
 800a0f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a0f6:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
 800a0fa:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	ddd3      	ble.n	800a0a8 <lfs_dir_fetchmatch+0x18>
            r = i;
 800a100:	4634      	mov	r4, r6
 800a102:	e7d1      	b.n	800a0a8 <lfs_dir_fetchmatch+0x18>
    dir->pair[0] = pair[(r+0)%2];
 800a104:	2c00      	cmp	r4, #0
 800a106:	f004 0301 	and.w	r3, r4, #1
 800a10a:	bfb8      	it	lt
 800a10c:	425b      	neglt	r3, r3
 800a10e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800a112:	f8c8 2000 	str.w	r2, [r8]
    dir->pair[1] = pair[(r+1)%2];
 800a116:	3401      	adds	r4, #1
 800a118:	f004 0401 	and.w	r4, r4, #1
 800a11c:	bf48      	it	mi
 800a11e:	4264      	negmi	r4, r4
 800a120:	940a      	str	r4, [sp, #40]	; 0x28
 800a122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a126:	f8c8 2004 	str.w	r2, [r8, #4]
    dir->rev = revs[(r+0)%2];
 800a12a:	aa14      	add	r2, sp, #80	; 0x50
 800a12c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a130:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a134:	f8c8 3008 	str.w	r3, [r8, #8]
    dir->off = 0; // nonzero = found some commits
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c8 300c 	str.w	r3, [r8, #12]
    for (int i = 0; i < 2; i++) {
 800a13e:	4699      	mov	r9, r3
    lfs_stag_t besttag = -1;
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	9308      	str	r3, [sp, #32]
    for (int i = 0; i < 2; i++) {
 800a146:	e04e      	b.n	800a1e6 <lfs_dir_fetchmatch+0x156>
                if (err == LFS_ERR_CORRUPT) {
 800a148:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a14c:	f040 819b 	bne.w	800a486 <lfs_dir_fetchmatch+0x3f6>
                    dir->erased = false;
 800a150:	2300      	movs	r3, #0
 800a152:	f888 3016 	strb.w	r3, [r8, #22]
                    break;
 800a156:	e02f      	b.n	800a1b8 <lfs_dir_fetchmatch+0x128>
    return (tag & 0x70000000) >> 20;
 800a158:	0d2b      	lsrs	r3, r5, #20
 800a15a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a15e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a162:	d005      	beq.n	800a170 <lfs_dir_fetchmatch+0xe0>
 800a164:	9b06      	ldr	r3, [sp, #24]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	f888 3016 	strb.w	r3, [r8, #22]
                break;
 800a16e:	e023      	b.n	800a1b8 <lfs_dir_fetchmatch+0x128>
                        dir->off % lfs->cfg->prog_size == 0);
 800a170:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a174:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a178:	699a      	ldr	r2, [r3, #24]
 800a17a:	fbb1 f3f2 	udiv	r3, r1, r2
 800a17e:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1ee      	bne.n	800a164 <lfs_dir_fetchmatch+0xd4>
 800a186:	2301      	movs	r3, #1
 800a188:	9306      	str	r3, [sp, #24]
 800a18a:	e7eb      	b.n	800a164 <lfs_dir_fetchmatch+0xd4>
                err = lfs_bd_read(lfs,
 800a18c:	f8d8 2000 	ldr.w	r2, [r8]
 800a190:	1d39      	adds	r1, r7, #4
 800a192:	2004      	movs	r0, #4
 800a194:	9003      	str	r0, [sp, #12]
 800a196:	a80d      	add	r0, sp, #52	; 0x34
 800a198:	9002      	str	r0, [sp, #8]
 800a19a:	9101      	str	r1, [sp, #4]
 800a19c:	9200      	str	r2, [sp, #0]
 800a19e:	465a      	mov	r2, fp
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4658      	mov	r0, fp
 800a1a4:	f7ff fe4c 	bl	8009e40 <lfs_bd_read>
                if (err) {
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d138      	bne.n	800a21e <lfs_dir_fetchmatch+0x18e>
                dcrc = lfs_fromle32(dcrc);
 800a1ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
 800a1ae:	42b3      	cmp	r3, r6
 800a1b0:	d03e      	beq.n	800a230 <lfs_dir_fetchmatch+0x1a0>
                    dir->erased = false;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f888 3016 	strb.w	r3, [r8, #22]
        if (dir->off > 0) {
 800a1b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f040 8167 	bne.w	800a490 <lfs_dir_fetchmatch+0x400>
    lfs_block_t t = pair[0];
 800a1c2:	f8d8 3000 	ldr.w	r3, [r8]
    pair[0] = pair[1];
 800a1c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a1ca:	f8c8 2000 	str.w	r2, [r8]
    pair[1] = t;
 800a1ce:	f8c8 3004 	str.w	r3, [r8, #4]
        dir->rev = revs[(r+1)%2];
 800a1d2:	aa14      	add	r2, sp, #80	; 0x50
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a1de:	f8c8 3008 	str.w	r3, [r8, #8]
    for (int i = 0; i < 2; i++) {
 800a1e2:	f109 0901 	add.w	r9, r9, #1
 800a1e6:	f1b9 0f01 	cmp.w	r9, #1
 800a1ea:	f300 81a6 	bgt.w	800a53a <lfs_dir_fetchmatch+0x4aa>
        lfs_block_t temptail[2] = {0xffffffff, 0xffffffff};
 800a1ee:	4ac1      	ldr	r2, [pc, #772]	; (800a4f4 <lfs_dir_fetchmatch+0x464>)
 800a1f0:	ab0e      	add	r3, sp, #56	; 0x38
 800a1f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1f6:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a1fa:	2204      	movs	r2, #4
 800a1fc:	f108 0108 	add.w	r1, r8, #8
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	f002 ff2a 	bl	800d05c <lfs_crc>
        lfs_stag_t tempbesttag = besttag;
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	9307      	str	r3, [sp, #28]
        bool tempsplit = false;
 800a20c:	2300      	movs	r3, #0
 800a20e:	930b      	str	r3, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
 800a210:	461f      	mov	r7, r3
        lfs_tag_t ptag = 0xffffffff;
 800a212:	f04f 3aff 	mov.w	sl, #4294967295
        lfs_off_t off = 0;
 800a216:	4655      	mov	r5, sl
 800a218:	469a      	mov	sl, r3
 800a21a:	4606      	mov	r6, r0
 800a21c:	e063      	b.n	800a2e6 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a21e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a222:	d103      	bne.n	800a22c <lfs_dir_fetchmatch+0x19c>
                        dir->erased = false;
 800a224:	2300      	movs	r3, #0
 800a226:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a22a:	e7c5      	b.n	800a1b8 <lfs_dir_fetchmatch+0x128>
                    return err;
 800a22c:	9008      	str	r0, [sp, #32]
 800a22e:	e190      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
 800a232:	0d1d      	lsrs	r5, r3, #20
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a234:	ea84 75c5 	eor.w	r5, r4, r5, lsl #31
                lfs->seed ^= crc;
 800a238:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a23c:	4072      	eors	r2, r6
 800a23e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a242:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a246:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a24a:	bf08      	it	eq
 800a24c:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a24e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a252:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 800a254:	443b      	add	r3, r7
 800a256:	f8c8 300c 	str.w	r3, [r8, #12]
                dir->etag = ptag;
 800a25a:	f8c8 5010 	str.w	r5, [r8, #16]
                dir->count = tempcount;
 800a25e:	f8a8 a014 	strh.w	sl, [r8, #20]
                dir->tail[0] = temptail[0];
 800a262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a264:	f8c8 3018 	str.w	r3, [r8, #24]
                dir->tail[1] = temptail[1];
 800a268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26a:	f8c8 301c 	str.w	r3, [r8, #28]
                dir->split = tempsplit;
 800a26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a270:	f888 3017 	strb.w	r3, [r8, #23]
                besttag = tempbesttag;
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	9308      	str	r3, [sp, #32]
                crc = 0xffffffff;
 800a278:	f04f 36ff 	mov.w	r6, #4294967295
 800a27c:	e033      	b.n	800a2e6 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a27e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a282:	d10e      	bne.n	800a2a2 <lfs_dir_fetchmatch+0x212>
                        dir->erased = false;
 800a284:	2300      	movs	r3, #0
 800a286:	f888 3016 	strb.w	r3, [r8, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a28c:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a28e:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 800a292:	d108      	bne.n	800a2a6 <lfs_dir_fetchmatch+0x216>
    return (tag & 0x000ffc00) >> 10;
 800a294:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 800a298:	459a      	cmp	sl, r3
 800a29a:	d80c      	bhi.n	800a2b6 <lfs_dir_fetchmatch+0x226>
                    tempcount = lfs_tag_id(tag) + 1;
 800a29c:	f103 0a01 	add.w	sl, r3, #1
 800a2a0:	e009      	b.n	800a2b6 <lfs_dir_fetchmatch+0x226>
                    return err;
 800a2a2:	9008      	str	r0, [sp, #32]
 800a2a4:	e155      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800a2a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2aa:	f000 808c 	beq.w	800a3c6 <lfs_dir_fetchmatch+0x336>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800a2ae:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800a2b2:	f000 80b1 	beq.w	800a418 <lfs_dir_fetchmatch+0x388>
            if ((fmask & tag) == (fmask & ftag)) {
 800a2b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2ba:	404b      	eors	r3, r1
 800a2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2be:	4213      	tst	r3, r2
 800a2c0:	d110      	bne.n	800a2e4 <lfs_dir_fetchmatch+0x254>
                        dir->pair[0], off+sizeof(tag)});
 800a2c2:	f8d8 3000 	ldr.w	r3, [r8]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a2c6:	9312      	str	r3, [sp, #72]	; 0x48
                        dir->pair[0], off+sizeof(tag)});
 800a2c8:	1d3b      	adds	r3, r7, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a2ca:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2cc:	aa12      	add	r2, sp, #72	; 0x48
 800a2ce:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a2d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2d2:	4798      	blx	r3
                if (res < 0) {
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f2c0 80bf 	blt.w	800a458 <lfs_dir_fetchmatch+0x3c8>
                if (res == LFS_CMP_EQ) {
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f040 80c3 	bne.w	800a466 <lfs_dir_fetchmatch+0x3d6>
                    tempbesttag = tag;
 800a2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e2:	9307      	str	r3, [sp, #28]
            ptag = tag;
 800a2e4:	4625      	mov	r5, r4
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a2e6:	f345 0309 	sbfx	r3, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	bf14      	ite	ne
 800a2f0:	462b      	movne	r3, r5
 800a2f2:	1c6b      	addeq	r3, r5, #1
    return tag & 0x000003ff;
 800a2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a2f8:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 800a2fa:	441f      	add	r7, r3
            int err = lfs_bd_read(lfs,
 800a2fc:	f8cd b014 	str.w	fp, [sp, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a300:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f8d8 2000 	ldr.w	r2, [r8]
 800a30a:	2104      	movs	r1, #4
 800a30c:	9103      	str	r1, [sp, #12]
 800a30e:	a90c      	add	r1, sp, #48	; 0x30
 800a310:	9102      	str	r1, [sp, #8]
 800a312:	9701      	str	r7, [sp, #4]
 800a314:	9200      	str	r2, [sp, #0]
 800a316:	465a      	mov	r2, fp
 800a318:	2100      	movs	r1, #0
 800a31a:	4658      	mov	r0, fp
 800a31c:	f7ff fd90 	bl	8009e40 <lfs_bd_read>
            if (err) {
 800a320:	9006      	str	r0, [sp, #24]
 800a322:	2800      	cmp	r0, #0
 800a324:	f47f af10 	bne.w	800a148 <lfs_dir_fetchmatch+0xb8>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a328:	2204      	movs	r2, #4
 800a32a:	a90c      	add	r1, sp, #48	; 0x30
 800a32c:	4630      	mov	r0, r6
 800a32e:	f002 fe95 	bl	800d05c <lfs_crc>
 800a332:	4606      	mov	r6, r0
            tag = lfs_frombe32(tag) ^ ptag;
 800a334:	9c0c      	ldr	r4, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800a336:	ba24      	rev	r4, r4
 800a338:	406c      	eors	r4, r5
 800a33a:	940c      	str	r4, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag) ||
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	f6ff af0b 	blt.w	800a158 <lfs_dir_fetchmatch+0xc8>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a342:	f344 0209 	sbfx	r2, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a346:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a34a:	bf14      	ite	ne
 800a34c:	4622      	movne	r2, r4
 800a34e:	1c62      	addeq	r2, r4, #1
    return tag & 0x000003ff;
 800a350:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a354:	3204      	adds	r2, #4
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a356:	443a      	add	r2, r7
 800a358:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a35c:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 800a35e:	429a      	cmp	r2, r3
 800a360:	f63f aefa 	bhi.w	800a158 <lfs_dir_fetchmatch+0xc8>
    return (tag & 0x70000000) >> 20;
 800a364:	0d22      	lsrs	r2, r4, #20
 800a366:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800a36a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a36e:	f43f af0d 	beq.w	800a18c <lfs_dir_fetchmatch+0xfc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a372:	2504      	movs	r5, #4
 800a374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a376:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a37a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a37e:	bf08      	it	eq
 800a380:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a382:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a386:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a388:	429d      	cmp	r5, r3
 800a38a:	f4bf af7e 	bcs.w	800a28a <lfs_dir_fetchmatch+0x1fa>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a38e:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f8d8 2000 	ldr.w	r2, [r8]
 800a398:	19e9      	adds	r1, r5, r7
 800a39a:	2001      	movs	r0, #1
 800a39c:	9003      	str	r0, [sp, #12]
 800a39e:	a80d      	add	r0, sp, #52	; 0x34
 800a3a0:	9002      	str	r0, [sp, #8]
 800a3a2:	9101      	str	r1, [sp, #4]
 800a3a4:	9200      	str	r2, [sp, #0]
 800a3a6:	9a05      	ldr	r2, [sp, #20]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f7ff fd48 	bl	8009e40 <lfs_bd_read>
                if (err) {
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f47f af64 	bne.w	800a27e <lfs_dir_fetchmatch+0x1ee>
                crc = lfs_crc(crc, &dat, 1);
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	a90d      	add	r1, sp, #52	; 0x34
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f002 fe4e 	bl	800d05c <lfs_crc>
 800a3c0:	4606      	mov	r6, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a3c2:	3501      	adds	r5, #1
 800a3c4:	e7d6      	b.n	800a374 <lfs_dir_fetchmatch+0x2e4>
    return (int8_t)lfs_tag_chunk(tag);
 800a3c6:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 800a3c8:	b291      	uxth	r1, r2
 800a3ca:	448a      	add	sl, r1
 800a3cc:	fa1f fa8a 	uxth.w	sl, sl
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800a3d0:	9907      	ldr	r1, [sp, #28]
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a3d8:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800a3dc:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
 800a3e0:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a3e4:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 800a3e8:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	d00f      	beq.n	800a410 <lfs_dir_fetchmatch+0x380>
                } else if (tempbesttag != -1 &&
 800a3f0:	9907      	ldr	r1, [sp, #28]
 800a3f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a3f6:	f43f af5e 	beq.w	800a2b6 <lfs_dir_fetchmatch+0x226>
    return (tag & 0x000ffc00) >> 10;
 800a3fa:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a3fe:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
 800a402:	4299      	cmp	r1, r3
 800a404:	f4ff af57 	bcc.w	800a2b6 <lfs_dir_fetchmatch+0x226>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a408:	eb00 2382 	add.w	r3, r0, r2, lsl #10
 800a40c:	9307      	str	r3, [sp, #28]
 800a40e:	e752      	b.n	800a2b6 <lfs_dir_fetchmatch+0x226>
                    tempbesttag |= 0x80000000;
 800a410:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
 800a414:	9307      	str	r3, [sp, #28]
 800a416:	e74e      	b.n	800a2b6 <lfs_dir_fetchmatch+0x226>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800a418:	f002 0201 	and.w	r2, r2, #1
 800a41c:	b2d3      	uxtb	r3, r2
 800a41e:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a420:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f8d8 2000 	ldr.w	r2, [r8]
 800a42a:	1d39      	adds	r1, r7, #4
 800a42c:	2008      	movs	r0, #8
 800a42e:	9003      	str	r0, [sp, #12]
 800a430:	a80e      	add	r0, sp, #56	; 0x38
 800a432:	9002      	str	r0, [sp, #8]
 800a434:	9101      	str	r1, [sp, #4]
 800a436:	9200      	str	r2, [sp, #0]
 800a438:	465a      	mov	r2, fp
 800a43a:	2100      	movs	r1, #0
 800a43c:	4658      	mov	r0, fp
 800a43e:	f7ff fcff 	bl	8009e40 <lfs_bd_read>
                if (err) {
 800a442:	2800      	cmp	r0, #0
 800a444:	f43f af37 	beq.w	800a2b6 <lfs_dir_fetchmatch+0x226>
                    if (err == LFS_ERR_CORRUPT) {
 800a448:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a44c:	f47f af33 	bne.w	800a2b6 <lfs_dir_fetchmatch+0x226>
                        dir->erased = false;
 800a450:	2300      	movs	r3, #0
 800a452:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a456:	e6af      	b.n	800a1b8 <lfs_dir_fetchmatch+0x128>
                    if (res == LFS_ERR_CORRUPT) {
 800a458:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a45c:	d116      	bne.n	800a48c <lfs_dir_fetchmatch+0x3fc>
                        dir->erased = false;
 800a45e:	2300      	movs	r3, #0
 800a460:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a464:	e6a8      	b.n	800a1b8 <lfs_dir_fetchmatch+0x128>
                } else if (res == LFS_CMP_GT &&
 800a466:	2802      	cmp	r0, #2
 800a468:	f47f af3c 	bne.w	800a2e4 <lfs_dir_fetchmatch+0x254>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800a46c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 800a46e:	f3c3 2289 	ubfx	r2, r3, #10, #10
 800a472:	9907      	ldr	r1, [sp, #28]
 800a474:	f3c1 2189 	ubfx	r1, r1, #10, #10
                } else if (res == LFS_CMP_GT &&
 800a478:	4291      	cmp	r1, r2
 800a47a:	f4ff af33 	bcc.w	800a2e4 <lfs_dir_fetchmatch+0x254>
                    tempbesttag = tag | 0x80000000;
 800a47e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a482:	9307      	str	r3, [sp, #28]
 800a484:	e72e      	b.n	800a2e4 <lfs_dir_fetchmatch+0x254>
                return err;
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	e062      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
                    return res;
 800a48c:	9008      	str	r0, [sp, #32]
 800a48e:	e060      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a490:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a494:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a496:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800a49a:	d013      	beq.n	800a4c4 <lfs_dir_fetchmatch+0x434>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a49c:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800a4a0:	f8d8 1000 	ldr.w	r1, [r8]
 800a4a4:	428c      	cmp	r4, r1
 800a4a6:	d021      	beq.n	800a4ec <lfs_dir_fetchmatch+0x45c>
 800a4a8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800a4ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a4b0:	4283      	cmp	r3, r0
 800a4b2:	d01d      	beq.n	800a4f0 <lfs_dir_fetchmatch+0x460>
 800a4b4:	4284      	cmp	r4, r0
 800a4b6:	d01f      	beq.n	800a4f8 <lfs_dir_fetchmatch+0x468>
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	d001      	beq.n	800a4c0 <lfs_dir_fetchmatch+0x430>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e002      	b.n	800a4c6 <lfs_dir_fetchmatch+0x436>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <lfs_dir_fetchmatch+0x436>
 800a4c4:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 800a4c6:	b1e3      	cbz	r3, 800a502 <lfs_dir_fetchmatch+0x472>
    return (tag & 0x000ffc00) >> 10;
 800a4c8:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a4cc:	9a08      	ldr	r2, [sp, #32]
 800a4ce:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
 800a4d0:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d011      	beq.n	800a4fc <lfs_dir_fetchmatch+0x46c>
                } else if (besttag != -1 &&
 800a4d8:	9808      	ldr	r0, [sp, #32]
 800a4da:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a4de:	d010      	beq.n	800a502 <lfs_dir_fetchmatch+0x472>
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d90e      	bls.n	800a502 <lfs_dir_fetchmatch+0x472>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800a4e4:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	e00a      	b.n	800a502 <lfs_dir_fetchmatch+0x472>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e7ea      	b.n	800a4c6 <lfs_dir_fetchmatch+0x436>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e7e8      	b.n	800a4c6 <lfs_dir_fetchmatch+0x436>
 800a4f4:	0800e9dc 	.word	0x0800e9dc
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7e4      	b.n	800a4c6 <lfs_dir_fetchmatch+0x436>
                    besttag |= 0x80000000;
 800a4fc:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
 800a500:	9308      	str	r3, [sp, #32]
            if (id) {
 800a502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a504:	b14b      	cbz	r3, 800a51a <lfs_dir_fetchmatch+0x48a>
    return (tag & 0x000ffc00) >> 10;
 800a506:	9b08      	ldr	r3, [sp, #32]
 800a508:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800a50c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    return (a < b) ? a : b;
 800a510:	4293      	cmp	r3, r2
 800a512:	bf28      	it	cs
 800a514:	4613      	movcs	r3, r2
 800a516:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a518:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da18      	bge.n	800a552 <lfs_dir_fetchmatch+0x4c2>
    return (tag & 0x000ffc00) >> 10;
 800a520:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
 800a524:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d802      	bhi.n	800a532 <lfs_dir_fetchmatch+0x4a2>
                return 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	9308      	str	r3, [sp, #32]
 800a530:	e00f      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
                return LFS_ERR_NOENT;
 800a532:	f06f 0301 	mvn.w	r3, #1
 800a536:	9308      	str	r3, [sp, #32]
 800a538:	e00b      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
    LFS_ERROR("Corrupted dir pair at %"PRIu32" %"PRIu32,
 800a53a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a53e:	f8d8 2000 	ldr.w	r2, [r8]
 800a542:	f240 31c6 	movw	r1, #966	; 0x3c6
 800a546:	4806      	ldr	r0, [pc, #24]	; (800a560 <lfs_dir_fetchmatch+0x4d0>)
 800a548:	f003 fbe6 	bl	800dd18 <iprintf>
    return LFS_ERR_CORRUPT;
 800a54c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a550:	9308      	str	r3, [sp, #32]
}
 800a552:	9808      	ldr	r0, [sp, #32]
 800a554:	b015      	add	sp, #84	; 0x54
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	9008      	str	r0, [sp, #32]
 800a55c:	e7f9      	b.n	800a552 <lfs_dir_fetchmatch+0x4c2>
 800a55e:	bf00      	nop
 800a560:	0800f0ec 	.word	0x0800f0ec

0800a564 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	4606      	mov	r6, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 800a572:	2301      	movs	r3, #1
 800a574:	61d3      	str	r3, [r2, #28]
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800a576:	69a3      	ldr	r3, [r4, #24]
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d022      	beq.n	800a5c4 <lfs_fs_parent+0x60>
 800a57e:	69e3      	ldr	r3, [r4, #28]
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a584:	d01c      	beq.n	800a5c0 <lfs_fs_parent+0x5c>
 800a586:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(parent->tail)) {
 800a588:	b9f3      	cbnz	r3, 800a5c8 <lfs_fs_parent+0x64>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a58a:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
 800a58c:	682b      	ldr	r3, [r5, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a58e:	9306      	str	r3, [sp, #24]
 800a590:	686b      	ldr	r3, [r5, #4]
 800a592:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a594:	ab05      	add	r3, sp, #20
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <lfs_fs_parent+0x70>)
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	2300      	movs	r3, #0
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <lfs_fs_parent+0x74>)
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <lfs_fs_parent+0x78>)
 800a5a6:	f104 0218 	add.w	r2, r4, #24
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7ff fd6f 	bl	800a090 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d0de      	beq.n	800a576 <lfs_fs_parent+0x12>
 800a5b8:	f110 0f02 	cmn.w	r0, #2
 800a5bc:	d0db      	beq.n	800a576 <lfs_fs_parent+0x12>
 800a5be:	e005      	b.n	800a5cc <lfs_fs_parent+0x68>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e7e1      	b.n	800a588 <lfs_fs_parent+0x24>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e7df      	b.n	800a588 <lfs_fs_parent+0x24>
    return LFS_ERR_NOENT;
 800a5c8:	f06f 0301 	mvn.w	r3, #1
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	b008      	add	sp, #32
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}
 800a5d2:	bf00      	nop
 800a5d4:	08009f99 	.word	0x08009f99
 800a5d8:	20000008 	.word	0x20000008
 800a5dc:	7ff003ff 	.word	0x7ff003ff

0800a5e0 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800a5e0:	b500      	push	{lr}
 800a5e2:	b085      	sub	sp, #20
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	9303      	str	r3, [sp, #12]
 800a5e8:	9302      	str	r3, [sp, #8]
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	f7ff fd4d 	bl	800a090 <lfs_dir_fetchmatch>
}
 800a5f6:	b005      	add	sp, #20
 800a5f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a5fc <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4606      	mov	r6, r0
 800a600:	460d      	mov	r5, r1
 800a602:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 800a608:	2301      	movs	r3, #1
 800a60a:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 800a60c:	e016      	b.n	800a63c <lfs_fs_pred+0x40>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800a60e:	2201      	movs	r2, #1
 800a610:	e000      	b.n	800a614 <lfs_fs_pred+0x18>
 800a612:	2201      	movs	r2, #1
    while (!lfs_pair_isnull(pdir->tail)) {
 800a614:	b9e2      	cbnz	r2, 800a650 <lfs_fs_pred+0x54>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a616:	682a      	ldr	r2, [r5, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d01d      	beq.n	800a658 <lfs_fs_pred+0x5c>
 800a61c:	69e0      	ldr	r0, [r4, #28]
 800a61e:	6869      	ldr	r1, [r5, #4]
 800a620:	4288      	cmp	r0, r1
 800a622:	d01b      	beq.n	800a65c <lfs_fs_pred+0x60>
 800a624:	4299      	cmp	r1, r3
 800a626:	d01b      	beq.n	800a660 <lfs_fs_pred+0x64>
 800a628:	4282      	cmp	r2, r0
 800a62a:	d01b      	beq.n	800a664 <lfs_fs_pred+0x68>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800a62c:	f104 0218 	add.w	r2, r4, #24
 800a630:	4621      	mov	r1, r4
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ffd4 	bl	800a5e0 <lfs_dir_fetch>
        if (err) {
 800a638:	4603      	mov	r3, r0
 800a63a:	b958      	cbnz	r0, 800a654 <lfs_fs_pred+0x58>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800a63c:	69a3      	ldr	r3, [r4, #24]
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a642:	d0e6      	beq.n	800a612 <lfs_fs_pred+0x16>
 800a644:	69e2      	ldr	r2, [r4, #28]
 800a646:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a64a:	d0e0      	beq.n	800a60e <lfs_fs_pred+0x12>
 800a64c:	2200      	movs	r2, #0
 800a64e:	e7e1      	b.n	800a614 <lfs_fs_pred+0x18>
    return LFS_ERR_NOENT;
 800a650:	f06f 0301 	mvn.w	r3, #1
}
 800a654:	4618      	mov	r0, r3
 800a656:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	e7fb      	b.n	800a654 <lfs_fs_pred+0x58>
 800a65c:	2300      	movs	r3, #0
 800a65e:	e7f9      	b.n	800a654 <lfs_fs_pred+0x58>
 800a660:	2300      	movs	r3, #0
 800a662:	e7f7      	b.n	800a654 <lfs_fs_pred+0x58>
 800a664:	2300      	movs	r3, #0
 800a666:	e7f5      	b.n	800a654 <lfs_fs_pred+0x58>

0800a668 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	b097      	sub	sp, #92	; 0x5c
 800a66e:	900a      	str	r0, [sp, #40]	; 0x28
 800a670:	460d      	mov	r5, r1
 800a672:	4691      	mov	r9, r2
 800a674:	461c      	mov	r4, r3
 800a676:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a678:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a67a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 800a67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a680:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800a684:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800a688:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800a68c:	930d      	str	r3, [sp, #52]	; 0x34
 800a68e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a692:	930e      	str	r3, [sp, #56]	; 0x38
 800a694:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 800a698:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a69a:	f344 0a09 	sbfx	sl, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a69e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a6a2:	bf14      	ite	ne
 800a6a4:	46a2      	movne	sl, r4
 800a6a6:	f104 0a01 	addeq.w	sl, r4, #1
    return tag & 0x000003ff;
 800a6aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a6ae:	f10a 0a04 	add.w	sl, sl, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800a6b2:	44ca      	add	sl, r9
 800a6b4:	68eb      	ldr	r3, [r5, #12]
 800a6b6:	459a      	cmp	sl, r3
 800a6b8:	d32f      	bcc.n	800a71a <lfs_dir_traverse+0xb2>
        } else if (attrcount > 0) {
 800a6ba:	2f00      	cmp	r7, #0
 800a6bc:	dd4c      	ble.n	800a758 <lfs_dir_traverse+0xf0>
            tag = attrs[0].tag;
 800a6be:	6833      	ldr	r3, [r6, #0]
 800a6c0:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
 800a6c2:	f8d6 a004 	ldr.w	sl, [r6, #4]
            attrs += 1;
 800a6c6:	3608      	adds	r6, #8
            attrcount -= 1;
 800a6c8:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800a6ca:	4b78      	ldr	r3, [pc, #480]	; (800a8ac <lfs_dir_traverse+0x244>)
 800a6cc:	ea08 0303 	and.w	r3, r8, r3
 800a6d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6d2:	ea8b 0202 	eor.w	r2, fp, r2
 800a6d6:	421a      	tst	r2, r3
 800a6d8:	d1df      	bne.n	800a69a <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800a6da:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(tmask) != 0) {
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d166      	bne.n	800a7b0 <lfs_dir_traverse+0x148>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a6e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
 800a6e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0d6      	beq.n	800a69a <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800a6ec:	f240 1201 	movw	r2, #257	; 0x101
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	f000 8082 	beq.w	800a7fa <lfs_dir_traverse+0x192>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800a6f6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a6fa:	f000 80a4 	beq.w	800a846 <lfs_dir_traverse+0x1de>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800a6fe:	4652      	mov	r2, sl
 800a700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a702:	eb01 2183 	add.w	r1, r1, r3, lsl #10
 800a706:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a70a:	4798      	blx	r3
            if (err) {
 800a70c:	4603      	mov	r3, r0
 800a70e:	2800      	cmp	r0, #0
 800a710:	d0c3      	beq.n	800a69a <lfs_dir_traverse+0x32>
}
 800a712:	4618      	mov	r0, r3
 800a714:	b017      	add	sp, #92	; 0x5c
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int err = lfs_bd_read(lfs,
 800a71a:	682a      	ldr	r2, [r5, #0]
 800a71c:	2304      	movs	r3, #4
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	a913      	add	r1, sp, #76	; 0x4c
 800a722:	9102      	str	r1, [sp, #8]
 800a724:	f8cd a004 	str.w	sl, [sp, #4]
 800a728:	9200      	str	r2, [sp, #0]
 800a72a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a72c:	4602      	mov	r2, r0
 800a72e:	2100      	movs	r1, #0
 800a730:	f7ff fb86 	bl	8009e40 <lfs_bd_read>
            if (err) {
 800a734:	4603      	mov	r3, r0
 800a736:	2800      	cmp	r0, #0
 800a738:	d1eb      	bne.n	800a712 <lfs_dir_traverse+0xaa>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800a73a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
 800a73c:	ba1b      	rev	r3, r3
 800a73e:	405c      	eors	r4, r3
 800a740:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800a744:	9413      	str	r4, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
 800a74a:	f10a 0304 	add.w	r3, sl, #4
 800a74e:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
 800a750:	46d1      	mov	r9, sl
            buffer = &disk;
 800a752:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a756:	e7b8      	b.n	800a6ca <lfs_dir_traverse+0x62>
        } else if (!hasseenmove &&
 800a758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f040 80a1 	bne.w	800a8a2 <lfs_dir_traverse+0x23a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a760:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a762:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800a764:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a766:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800a76a:	d010      	beq.n	800a78e <lfs_dir_traverse+0x126>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a76c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a76e:	6829      	ldr	r1, [r5, #0]
 800a770:	428b      	cmp	r3, r1
 800a772:	d017      	beq.n	800a7a4 <lfs_dir_traverse+0x13c>
 800a774:	f8d0 c044 	ldr.w	ip, [r0, #68]	; 0x44
 800a778:	6868      	ldr	r0, [r5, #4]
 800a77a:	4584      	cmp	ip, r0
 800a77c:	d014      	beq.n	800a7a8 <lfs_dir_traverse+0x140>
 800a77e:	4283      	cmp	r3, r0
 800a780:	d014      	beq.n	800a7ac <lfs_dir_traverse+0x144>
 800a782:	4561      	cmp	r1, ip
 800a784:	d001      	beq.n	800a78a <lfs_dir_traverse+0x122>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a786:	2300      	movs	r3, #0
 800a788:	e002      	b.n	800a790 <lfs_dir_traverse+0x128>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <lfs_dir_traverse+0x128>
 800a78e:	2300      	movs	r3, #0
        } else if (!hasseenmove &&
 800a790:	930b      	str	r3, [sp, #44]	; 0x2c
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 8087 	beq.w	800a8a6 <lfs_dir_traverse+0x23e>
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800a798:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <lfs_dir_traverse+0x248>)
 800a79a:	4013      	ands	r3, r2
 800a79c:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = NULL;
 800a79e:	f04f 0a00 	mov.w	sl, #0
            hasseenmove = true;
 800a7a2:	e792      	b.n	800a6ca <lfs_dir_traverse+0x62>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f3      	b.n	800a790 <lfs_dir_traverse+0x128>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e7f1      	b.n	800a790 <lfs_dir_traverse+0x128>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e7ef      	b.n	800a790 <lfs_dir_traverse+0x128>
            int filter = lfs_dir_traverse(lfs,
 800a7b0:	ab13      	add	r3, sp, #76	; 0x4c
 800a7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b4:	4b3f      	ldr	r3, [pc, #252]	; (800a8b4 <lfs_dir_traverse+0x24c>)
 800a7b6:	9308      	str	r3, [sp, #32]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	9306      	str	r3, [sp, #24]
 800a7be:	9305      	str	r3, [sp, #20]
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	9701      	str	r7, [sp, #4]
 800a7ca:	9600      	str	r6, [sp, #0]
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	464a      	mov	r2, r9
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7d4:	f7ff ff48 	bl	800a668 <lfs_dir_traverse>
            if (filter < 0) {
 800a7d8:	1e03      	subs	r3, r0, #0
 800a7da:	db9a      	blt.n	800a712 <lfs_dir_traverse+0xaa>
            if (filter) {
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f47f af5c 	bne.w	800a69a <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800a7e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7e4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	f63f af55 	bhi.w	800a69a <lfs_dir_traverse+0x32>
 800a7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	f63f af75 	bhi.w	800a6e2 <lfs_dir_traverse+0x7a>
 800a7f8:	e74f      	b.n	800a69a <lfs_dir_traverse+0x32>
            uint16_t fromid = lfs_tag_size(tag);
 800a7fa:	f3c1 0209 	ubfx	r2, r1, #0, #10
    return (tag & 0x000ffc00) >> 10;
 800a7fe:	f3c1 2389 	ubfx	r3, r1, #10, #10
            int err = lfs_dir_traverse(lfs,
 800a802:	1c50      	adds	r0, r2, #1
                    fromid, fromid+1, toid-fromid+diff,
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	b29b      	uxth	r3, r3
 800a808:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a80a:	440b      	add	r3, r1
            int err = lfs_dir_traverse(lfs,
 800a80c:	b21b      	sxth	r3, r3
 800a80e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a810:	9109      	str	r1, [sp, #36]	; 0x24
 800a812:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800a814:	9108      	str	r1, [sp, #32]
 800a816:	9307      	str	r3, [sp, #28]
 800a818:	9006      	str	r0, [sp, #24]
 800a81a:	9205      	str	r2, [sp, #20]
 800a81c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <lfs_dir_traverse+0x250>)
 800a824:	9303      	str	r3, [sp, #12]
 800a826:	2301      	movs	r3, #1
 800a828:	9302      	str	r3, [sp, #8]
 800a82a:	2200      	movs	r2, #0
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	9200      	str	r2, [sp, #0]
 800a830:	f04f 33ff 	mov.w	r3, #4294967295
 800a834:	4651      	mov	r1, sl
 800a836:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a838:	f7ff ff16 	bl	800a668 <lfs_dir_traverse>
            if (err) {
 800a83c:	4603      	mov	r3, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f af2b 	beq.w	800a69a <lfs_dir_traverse+0x32>
 800a844:	e765      	b.n	800a712 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a846:	2300      	movs	r3, #0
 800a848:	950f      	str	r5, [sp, #60]	; 0x3c
 800a84a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800a84e:	9411      	str	r4, [sp, #68]	; 0x44
 800a850:	461c      	mov	r4, r3
 800a852:	46b1      	mov	r9, r6
 800a854:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a856:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800a858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
 800a85a:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a85e:	4294      	cmp	r4, r2
 800a860:	d219      	bcs.n	800a896 <lfs_dir_traverse+0x22e>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a862:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a866:	0091      	lsls	r1, r2, #2
 800a868:	eb0a 0201 	add.w	r2, sl, r1
 800a86c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 800a870:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
 800a874:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a878:	442b      	add	r3, r5
 800a87a:	029b      	lsls	r3, r3, #10
 800a87c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a880:	6891      	ldr	r1, [r2, #8]
 800a882:	6852      	ldr	r2, [r2, #4]
 800a884:	4319      	orrs	r1, r3
 800a886:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a888:	47b0      	blx	r6
                if (err) {
 800a88a:	4603      	mov	r3, r0
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f47f af40 	bne.w	800a712 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a892:	3401      	adds	r4, #1
 800a894:	e7e0      	b.n	800a858 <lfs_dir_traverse+0x1f0>
 800a896:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a898:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a89a:	464e      	mov	r6, r9
 800a89c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800a8a0:	e6fb      	b.n	800a69a <lfs_dir_traverse+0x32>
            return 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e735      	b.n	800a712 <lfs_dir_traverse+0xaa>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e733      	b.n	800a712 <lfs_dir_traverse+0xaa>
 800a8aa:	bf00      	nop
 800a8ac:	7ff00000 	.word	0x7ff00000
 800a8b0:	7ffffc00 	.word	0x7ffffc00
 800a8b4:	08009d71 	.word	0x08009d71
 800a8b8:	600ffc00 	.word	0x600ffc00

0800a8bc <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b089      	sub	sp, #36	; 0x24
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	468a      	mov	sl, r1
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 800a8ca:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 800a8cc:	690b      	ldr	r3, [r1, #16]
 800a8ce:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a8d2:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8d4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800a8d8:	d010      	beq.n	800a8fc <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a8da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a8dc:	6809      	ldr	r1, [r1, #0]
 800a8de:	4291      	cmp	r1, r2
 800a8e0:	d019      	beq.n	800a916 <lfs_dir_getslice+0x5a>
 800a8e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a8e4:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a8e8:	42a0      	cmp	r0, r4
 800a8ea:	d016      	beq.n	800a91a <lfs_dir_getslice+0x5e>
 800a8ec:	4290      	cmp	r0, r2
 800a8ee:	d016      	beq.n	800a91e <lfs_dir_getslice+0x62>
 800a8f0:	428c      	cmp	r4, r1
 800a8f2:	d001      	beq.n	800a8f8 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	e002      	b.n	800a8fe <lfs_dir_getslice+0x42>
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	e000      	b.n	800a8fe <lfs_dir_getslice+0x42>
 800a8fc:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	f000 8088 	beq.w	800aa14 <lfs_dir_getslice+0x158>
    return (tag & 0x000ffc00) >> 10;
 800a904:	f3cb 2289 	ubfx	r2, fp, #10, #10
 800a908:	f3c3 2389 	ubfx	r3, r3, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800a90c:	4293      	cmp	r3, r2
 800a90e:	f080 8083 	bcs.w	800aa18 <lfs_dir_getslice+0x15c>
    lfs_stag_t gdiff = 0;
 800a912:	2600      	movs	r6, #0
 800a914:	e00e      	b.n	800a934 <lfs_dir_getslice+0x78>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a916:	2201      	movs	r2, #1
 800a918:	e7f1      	b.n	800a8fe <lfs_dir_getslice+0x42>
 800a91a:	2201      	movs	r2, #1
 800a91c:	e7ef      	b.n	800a8fe <lfs_dir_getslice+0x42>
 800a91e:	2201      	movs	r2, #1
 800a920:	e7ed      	b.n	800a8fe <lfs_dir_getslice+0x42>
    return (int8_t)lfs_tag_chunk(tag);
 800a922:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a924:	eb01 2686 	add.w	r6, r1, r6, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800a928:	ebab 0306 	sub.w	r3, fp, r6
 800a92c:	4063      	eors	r3, r4
 800a92e:	ea13 0f09 	tst.w	r3, r9
 800a932:	d049      	beq.n	800a9c8 <lfs_dir_getslice+0x10c>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a934:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a936:	f344 0809 	sbfx	r8, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a93a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a93e:	bf14      	ite	ne
 800a940:	4623      	movne	r3, r4
 800a942:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 800a944:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a948:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a94a:	3308      	adds	r3, #8
 800a94c:	42ab      	cmp	r3, r5
 800a94e:	d865      	bhi.n	800aa1c <lfs_dir_getslice+0x160>
        off -= lfs_tag_dsize(ntag);
 800a950:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
 800a952:	9705      	str	r7, [sp, #20]
 800a954:	f8da 2000 	ldr.w	r2, [sl]
 800a958:	2304      	movs	r3, #4
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	a907      	add	r1, sp, #28
 800a95e:	9102      	str	r1, [sp, #8]
 800a960:	9501      	str	r5, [sp, #4]
 800a962:	9200      	str	r2, [sp, #0]
 800a964:	463a      	mov	r2, r7
 800a966:	2100      	movs	r1, #0
 800a968:	4638      	mov	r0, r7
 800a96a:	f7ff fa69 	bl	8009e40 <lfs_bd_read>
        if (err) {
 800a96e:	4603      	mov	r3, r0
 800a970:	2800      	cmp	r0, #0
 800a972:	d155      	bne.n	800aa20 <lfs_dir_getslice+0x164>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	ba1b      	rev	r3, r3
 800a978:	4063      	eors	r3, r4
 800a97a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a97e:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 800a980:	f3c9 2389 	ubfx	r3, r9, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0cf      	beq.n	800a928 <lfs_dir_getslice+0x6c>
    return (tag & 0x70000000) >> 20;
 800a988:	0d23      	lsrs	r3, r4, #20
 800a98a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
 800a98e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a992:	d1c9      	bne.n	800a928 <lfs_dir_getslice+0x6c>
    return (tag & 0x000ffc00) >> 10;
 800a994:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800a998:	4631      	mov	r1, r6
 800a99a:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 800a99e:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a9a2:	4584      	cmp	ip, r0
 800a9a4:	d3c0      	bcc.n	800a928 <lfs_dir_getslice+0x6c>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800a9a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a9aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a9ae:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800a9b2:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800a9b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a9ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a9be:	42a2      	cmp	r2, r4
 800a9c0:	d1af      	bne.n	800a922 <lfs_dir_getslice+0x66>
                return LFS_ERR_NOENT;
 800a9c2:	f06f 0301 	mvn.w	r3, #1
 800a9c6:	e02b      	b.n	800aa20 <lfs_dir_getslice+0x164>
 800a9c8:	46b1      	mov	r9, r6
            if (lfs_tag_isdelete(tag)) {
 800a9ca:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a9ce:	d02b      	beq.n	800aa28 <lfs_dir_getslice+0x16c>
    return tag & 0x000003ff;
 800a9d0:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 800a9d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9d6:	429e      	cmp	r6, r3
 800a9d8:	bf28      	it	cs
 800a9da:	461e      	movcs	r6, r3
            err = lfs_bd_read(lfs,
 800a9dc:	f8da 2000 	ldr.w	r2, [sl]
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800a9e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9e2:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	9603      	str	r6, [sp, #12]
 800a9e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a9ea:	9102      	str	r1, [sp, #8]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	9200      	str	r2, [sp, #0]
 800a9f0:	4633      	mov	r3, r6
 800a9f2:	9a05      	ldr	r2, [sp, #20]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f7ff fa22 	bl	8009e40 <lfs_bd_read>
            if (err) {
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	b978      	cbnz	r0, 800aa20 <lfs_dir_getslice+0x164>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800aa00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa02:	1b9a      	subs	r2, r3, r6
 800aa04:	2100      	movs	r1, #0
 800aa06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa08:	1998      	adds	r0, r3, r6
 800aa0a:	f002 fe11 	bl	800d630 <memset>
            return tag + gdiff;
 800aa0e:	464b      	mov	r3, r9
 800aa10:	4423      	add	r3, r4
 800aa12:	e005      	b.n	800aa20 <lfs_dir_getslice+0x164>
    lfs_stag_t gdiff = 0;
 800aa14:	2600      	movs	r6, #0
 800aa16:	e78d      	b.n	800a934 <lfs_dir_getslice+0x78>
        gdiff -= LFS_MKTAG(0, 1, 0);
 800aa18:	4e05      	ldr	r6, [pc, #20]	; (800aa30 <lfs_dir_getslice+0x174>)
 800aa1a:	e78b      	b.n	800a934 <lfs_dir_getslice+0x78>
    return LFS_ERR_NOENT;
 800aa1c:	f06f 0301 	mvn.w	r3, #1
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	b009      	add	sp, #36	; 0x24
 800aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
 800aa28:	f06f 0301 	mvn.w	r3, #1
 800aa2c:	e7f8      	b.n	800aa20 <lfs_dir_getslice+0x164>
 800aa2e:	bf00      	nop
 800aa30:	fffffc00 	.word	0xfffffc00

0800aa34 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800aa34:	b510      	push	{r4, lr}
 800aa36:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 800aa38:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 800aa3c:	9402      	str	r4, [sp, #8]
 800aa3e:	9c06      	ldr	r4, [sp, #24]
 800aa40:	9401      	str	r4, [sp, #4]
 800aa42:	2400      	movs	r4, #0
 800aa44:	9400      	str	r4, [sp, #0]
 800aa46:	f7ff ff39 	bl	800a8bc <lfs_dir_getslice>
}
 800aa4a:	b004      	add	sp, #16
 800aa4c:	bd10      	pop	{r4, pc}
	...

0800aa50 <lfs_dir_getgstate>:
        struct lfs_gstate *gstate) {
 800aa50:	b510      	push	{r4, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <lfs_dir_getgstate+0x4c>)
 800aa5c:	4a10      	ldr	r2, [pc, #64]	; (800aaa0 <lfs_dir_getgstate+0x50>)
 800aa5e:	f7ff ffe9 	bl	800aa34 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aa62:	2800      	cmp	r0, #0
 800aa64:	db04      	blt.n	800aa70 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
 800aa66:	f110 0f02 	cmn.w	r0, #2
 800aa6a:	d005      	beq.n	800aa78 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e010      	b.n	800aa92 <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aa70:	f110 0f02 	cmn.w	r0, #2
 800aa74:	d110      	bne.n	800aa98 <lfs_dir_getgstate+0x48>
 800aa76:	e7f6      	b.n	800aa66 <lfs_dir_getgstate+0x16>
    return 0;
 800aa78:	2000      	movs	r0, #0
 800aa7a:	e00d      	b.n	800aa98 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800aa7c:	aa06      	add	r2, sp, #24
 800aa7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aa82:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 800aa86:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800aa8a:	404a      	eors	r2, r1
 800aa8c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 800aa90:	3301      	adds	r3, #1
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	ddf2      	ble.n	800aa7c <lfs_dir_getgstate+0x2c>
    return 0;
 800aa96:	2000      	movs	r0, #0
}
 800aa98:	b006      	add	sp, #24
 800aa9a:	bd10      	pop	{r4, pc}
 800aa9c:	7ff0000c 	.word	0x7ff0000c
 800aaa0:	7ff00000 	.word	0x7ff00000

0800aaa4 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	4606      	mov	r6, r0
 800aaac:	468a      	mov	sl, r1
 800aaae:	4690      	mov	r8, r2
 800aab0:	461c      	mov	r4, r3
 800aab2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800aab6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aab8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
 800aaba:	19ea      	adds	r2, r5, r7
 800aabc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d951      	bls.n	800ab68 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 800aac4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800aac8:	e078      	b.n	800abbc <lfs_dir_getread+0x118>
                off < pcache->off + pcache->size) {
 800aaca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aad2:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == 0xfffffffe &&
 800aad4:	42aa      	cmp	r2, r5
 800aad6:	d91d      	bls.n	800ab14 <lfs_dir_getread+0x70>
            if (off >= pcache->off) {
 800aad8:	42a9      	cmp	r1, r5
 800aada:	d904      	bls.n	800aae6 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
 800aadc:	1b49      	subs	r1, r1, r5
 800aade:	42b9      	cmp	r1, r7
 800aae0:	bf28      	it	cs
 800aae2:	4639      	movcs	r1, r7
 800aae4:	e04a      	b.n	800ab7c <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800aae6:	eba1 0b05 	sub.w	fp, r1, r5
 800aaea:	449b      	add	fp, r3
 800aaec:	45bb      	cmp	fp, r7
 800aaee:	bf28      	it	cs
 800aaf0:	46bb      	movcs	fp, r7
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800aaf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaf6:	1a69      	subs	r1, r5, r1
 800aaf8:	465a      	mov	r2, fp
 800aafa:	4419      	add	r1, r3
 800aafc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aafe:	f002 fd8c 	bl	800d61a <memcpy>
                data += diff;
 800ab02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab04:	445b      	add	r3, fp
 800ab06:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800ab08:	445d      	add	r5, fp
                size -= diff;
 800ab0a:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800ab0e:	e02b      	b.n	800ab68 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 800ab10:	4639      	mov	r1, r7
 800ab12:	e033      	b.n	800ab7c <lfs_dir_getread+0xd8>
 800ab14:	4639      	mov	r1, r7
 800ab16:	e031      	b.n	800ab7c <lfs_dir_getread+0xd8>
        rcache->block = 0xfffffffe;
 800ab18:	f06f 0301 	mvn.w	r3, #1
 800ab1c:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800ab1e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800ab20:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
 800ab22:	fbb5 f2f3 	udiv	r2, r5, r3
 800ab26:	fb03 5212 	mls	r2, r3, r2, r5
 800ab2a:	1aaa      	subs	r2, r5, r2
 800ab2c:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800ab2e:	eb05 0309 	add.w	r3, r5, r9
 800ab32:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800ab34:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 800ab38:	4463      	add	r3, ip
 800ab3a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800ab3c:	fbb3 f1fc 	udiv	r1, r3, ip
 800ab40:	fb0c 3111 	mls	r1, ip, r1, r3
 800ab44:	1a5b      	subs	r3, r3, r1
 800ab46:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf28      	it	cs
 800ab4c:	460b      	movcs	r3, r1
 800ab4e:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 800ab50:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	9101      	str	r1, [sp, #4]
 800ab56:	9200      	str	r2, [sp, #0]
 800ab58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab5c:	4651      	mov	r1, sl
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff feac 	bl	800a8bc <lfs_dir_getslice>
        if (err) {
 800ab64:	4603      	mov	r3, r0
 800ab66:	bb48      	cbnz	r0, 800abbc <lfs_dir_getread+0x118>
    while (size > 0) {
 800ab68:	b33f      	cbz	r7, 800abba <lfs_dir_getread+0x116>
        if (pcache && pcache->block == 0xfffffffe &&
 800ab6a:	f1b8 0f00 	cmp.w	r8, #0
 800ab6e:	d0cf      	beq.n	800ab10 <lfs_dir_getread+0x6c>
 800ab70:	f8d8 3000 	ldr.w	r3, [r8]
 800ab74:	f113 0f02 	cmn.w	r3, #2
 800ab78:	d0a7      	beq.n	800aaca <lfs_dir_getread+0x26>
        lfs_size_t diff = size;
 800ab7a:	4639      	mov	r1, r7
        if (rcache->block == 0xfffffffe &&
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	f113 0f02 	cmn.w	r3, #2
 800ab82:	d1c9      	bne.n	800ab18 <lfs_dir_getread+0x74>
                off < rcache->off + rcache->size) {
 800ab84:	6863      	ldr	r3, [r4, #4]
 800ab86:	68a2      	ldr	r2, [r4, #8]
 800ab88:	1898      	adds	r0, r3, r2
        if (rcache->block == 0xfffffffe &&
 800ab8a:	42a8      	cmp	r0, r5
 800ab8c:	d9c4      	bls.n	800ab18 <lfs_dir_getread+0x74>
            if (off >= rcache->off) {
 800ab8e:	42ab      	cmp	r3, r5
 800ab90:	d8c2      	bhi.n	800ab18 <lfs_dir_getread+0x74>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800ab92:	eba3 0b05 	sub.w	fp, r3, r5
 800ab96:	4493      	add	fp, r2
 800ab98:	458b      	cmp	fp, r1
 800ab9a:	bf28      	it	cs
 800ab9c:	468b      	movcs	fp, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800ab9e:	68e1      	ldr	r1, [r4, #12]
 800aba0:	1aeb      	subs	r3, r5, r3
 800aba2:	465a      	mov	r2, fp
 800aba4:	4419      	add	r1, r3
 800aba6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aba8:	f002 fd37 	bl	800d61a <memcpy>
                data += diff;
 800abac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abae:	445b      	add	r3, fp
 800abb0:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800abb2:	445d      	add	r5, fp
                size -= diff;
 800abb4:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800abb8:	e7d6      	b.n	800ab68 <lfs_dir_getread+0xc4>
    return 0;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	b005      	add	sp, #20
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abc4 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	460d      	mov	r5, r1
    if (pcache->block != 0xffffffff && pcache->block != 0xfffffffe) {
 800abcc:	6809      	ldr	r1, [r1, #0]
 800abce:	1c8c      	adds	r4, r1, #2
 800abd0:	2c01      	cmp	r4, #1
 800abd2:	d93d      	bls.n	800ac50 <lfs_bd_flush+0x8c>
 800abd4:	4698      	mov	r8, r3
 800abd6:	4692      	mov	sl, r2
 800abd8:	4606      	mov	r6, r0
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800abda:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800abdc:	6a03      	ldr	r3, [r0, #32]
 800abde:	4299      	cmp	r1, r3
 800abe0:	d230      	bcs.n	800ac44 <lfs_bd_flush+0x80>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800abe2:	68ac      	ldr	r4, [r5, #8]
 800abe4:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800abe6:	4414      	add	r4, r2
 800abe8:	3c01      	subs	r4, #1
    return a - (a % alignment);
 800abea:	fbb4 f3f2 	udiv	r3, r4, r2
 800abee:	fb02 4313 	mls	r3, r2, r3, r4
 800abf2:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800abf4:	6887      	ldr	r7, [r0, #8]
 800abf6:	9400      	str	r4, [sp, #0]
 800abf8:	68eb      	ldr	r3, [r5, #12]
 800abfa:	686a      	ldr	r2, [r5, #4]
 800abfc:	47b8      	blx	r7
        if (err) {
 800abfe:	4681      	mov	r9, r0
 800ac00:	bb40      	cbnz	r0, 800ac54 <lfs_bd_flush+0x90>
        if (validate) {
 800ac02:	f1b8 0f00 	cmp.w	r8, #0
 800ac06:	d013      	beq.n	800ac30 <lfs_bd_flush+0x6c>
    rcache->block = 0xffffffff;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	f8ca 3000 	str.w	r3, [sl]
            int res = lfs_bd_cmp(lfs,
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	686a      	ldr	r2, [r5, #4]
                    pcache->block, pcache->off, pcache->buffer, diff);
 800ac14:	68e9      	ldr	r1, [r5, #12]
            int res = lfs_bd_cmp(lfs,
 800ac16:	9403      	str	r4, [sp, #12]
 800ac18:	9102      	str	r1, [sp, #8]
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4623      	mov	r3, r4
 800ac20:	4652      	mov	r2, sl
 800ac22:	2100      	movs	r1, #0
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff f9df 	bl	8009fe8 <lfs_bd_cmp>
            if (res < 0) {
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	db16      	blt.n	800ac5c <lfs_bd_flush+0x98>
            if (res != LFS_CMP_EQ) {
 800ac2e:	b9b8      	cbnz	r0, 800ac60 <lfs_bd_flush+0x9c>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800ac30:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800ac32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac34:	21ff      	movs	r1, #255	; 0xff
 800ac36:	68e8      	ldr	r0, [r5, #12]
 800ac38:	f002 fcfa 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800ac3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac40:	602b      	str	r3, [r5, #0]
 800ac42:	e007      	b.n	800ac54 <lfs_bd_flush+0x90>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800ac44:	4b08      	ldr	r3, [pc, #32]	; (800ac68 <lfs_bd_flush+0xa4>)
 800ac46:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <lfs_bd_flush+0xa8>)
 800ac48:	2184      	movs	r1, #132	; 0x84
 800ac4a:	4809      	ldr	r0, [pc, #36]	; (800ac70 <lfs_bd_flush+0xac>)
 800ac4c:	f002 fc72 	bl	800d534 <__assert_func>
    return 0;
 800ac50:	f04f 0900 	mov.w	r9, #0
}
 800ac54:	4648      	mov	r0, r9
 800ac56:	b004      	add	sp, #16
 800ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return res;
 800ac5c:	4681      	mov	r9, r0
 800ac5e:	e7f9      	b.n	800ac54 <lfs_bd_flush+0x90>
                return LFS_ERR_CORRUPT;
 800ac60:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800ac64:	e7f6      	b.n	800ac54 <lfs_bd_flush+0x90>
 800ac66:	bf00      	nop
 800ac68:	0800ef70 	.word	0x0800ef70
 800ac6c:	0800eea4 	.word	0x0800eea4
 800ac70:	0800ef40 	.word	0x0800ef40

0800ac74 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	9201      	str	r2, [sp, #4]
 800ac7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ac80:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800ac84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 800ac86:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ac8a:	d00d      	beq.n	800aca8 <lfs_bd_prog+0x34>
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	469b      	mov	fp, r3
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800ac92:	19eb      	adds	r3, r5, r7
 800ac94:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800ac96:	69d2      	ldr	r2, [r2, #28]
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d91a      	bls.n	800acd2 <lfs_bd_prog+0x5e>
 800ac9c:	4b2a      	ldr	r3, [pc, #168]	; (800ad48 <lfs_bd_prog+0xd4>)
 800ac9e:	4a2b      	ldr	r2, [pc, #172]	; (800ad4c <lfs_bd_prog+0xd8>)
 800aca0:	21b3      	movs	r1, #179	; 0xb3
 800aca2:	482b      	ldr	r0, [pc, #172]	; (800ad50 <lfs_bd_prog+0xdc>)
 800aca4:	f002 fc46 	bl	800d534 <__assert_func>
    LFS_ASSERT(block != 0xffffffff);
 800aca8:	4b2a      	ldr	r3, [pc, #168]	; (800ad54 <lfs_bd_prog+0xe0>)
 800acaa:	4a28      	ldr	r2, [pc, #160]	; (800ad4c <lfs_bd_prog+0xd8>)
 800acac:	21b2      	movs	r1, #178	; 0xb2
 800acae:	4828      	ldr	r0, [pc, #160]	; (800ad50 <lfs_bd_prog+0xdc>)
 800acb0:	f002 fc40 	bl	800d534 <__assert_func>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d13a      	bne.n	800ad30 <lfs_bd_prog+0xbc>
        pcache->block = block;
 800acba:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800acbc:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	fbb5 f3f2 	udiv	r3, r5, r2
 800acc6:	fb02 5313 	mls	r3, r2, r3, r5
 800acca:	1aeb      	subs	r3, r5, r3
 800accc:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 800acd2:	b39f      	cbz	r7, 800ad3c <lfs_bd_prog+0xc8>
        if (block == pcache->block &&
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	42b3      	cmp	r3, r6
 800acd8:	d1ec      	bne.n	800acb4 <lfs_bd_prog+0x40>
                off >= pcache->off &&
 800acda:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 800acdc:	42aa      	cmp	r2, r5
 800acde:	d8e9      	bhi.n	800acb4 <lfs_bd_prog+0x40>
                off < pcache->off + lfs->cfg->cache_size) {
 800ace0:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 800ace4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800ace6:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 800ace8:	42a8      	cmp	r0, r5
 800acea:	d9e3      	bls.n	800acb4 <lfs_bd_prog+0x40>
                    lfs->cfg->cache_size - (off-pcache->off));
 800acec:	eba2 0905 	sub.w	r9, r2, r5
            lfs_size_t diff = lfs_min(size,
 800acf0:	4489      	add	r9, r1
    return (a < b) ? a : b;
 800acf2:	45b9      	cmp	r9, r7
 800acf4:	bf28      	it	cs
 800acf6:	46b9      	movcs	r9, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800acf8:	68e3      	ldr	r3, [r4, #12]
 800acfa:	1aa8      	subs	r0, r5, r2
 800acfc:	464a      	mov	r2, r9
 800acfe:	4651      	mov	r1, sl
 800ad00:	4418      	add	r0, r3
 800ad02:	f002 fc8a 	bl	800d61a <memcpy>
            data += diff;
 800ad06:	44ca      	add	sl, r9
            off += diff;
 800ad08:	444d      	add	r5, r9
            size -= diff;
 800ad0a:	eba7 0709 	sub.w	r7, r7, r9
            pcache->size = off - pcache->off;
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	1aeb      	subs	r3, r5, r3
 800ad12:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800ad14:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800ad18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d1d9      	bne.n	800acd2 <lfs_bd_prog+0x5e>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800ad1e:	465b      	mov	r3, fp
 800ad20:	9a01      	ldr	r2, [sp, #4]
 800ad22:	4621      	mov	r1, r4
 800ad24:	4640      	mov	r0, r8
 800ad26:	f7ff ff4d 	bl	800abc4 <lfs_bd_flush>
                if (err) {
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	b938      	cbnz	r0, 800ad3e <lfs_bd_prog+0xca>
 800ad2e:	e7d0      	b.n	800acd2 <lfs_bd_prog+0x5e>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800ad30:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <lfs_bd_prog+0xe4>)
 800ad32:	4a06      	ldr	r2, [pc, #24]	; (800ad4c <lfs_bd_prog+0xd8>)
 800ad34:	21d0      	movs	r1, #208	; 0xd0
 800ad36:	4806      	ldr	r0, [pc, #24]	; (800ad50 <lfs_bd_prog+0xdc>)
 800ad38:	f002 fbfc 	bl	800d534 <__assert_func>
    return 0;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	b003      	add	sp, #12
 800ad42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad46:	bf00      	nop
 800ad48:	0800ef98 	.word	0x0800ef98
 800ad4c:	0800eeb4 	.word	0x0800eeb4
 800ad50:	0800ef40 	.word	0x0800ef40
 800ad54:	0800efd8 	.word	0x0800efd8
 800ad58:	0800efbc 	.word	0x0800efbc

0800ad5c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 800ad5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	460c      	mov	r4, r1
 800ad62:	4617      	mov	r7, r2
 800ad64:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
 800ad66:	680b      	ldr	r3, [r1, #0]
 800ad68:	684a      	ldr	r2, [r1, #4]
 800ad6a:	9603      	str	r6, [sp, #12]
 800ad6c:	9702      	str	r7, [sp, #8]
 800ad6e:	9201      	str	r2, [sp, #4]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2300      	movs	r3, #0
 800ad74:	4602      	mov	r2, r0
 800ad76:	f100 0110 	add.w	r1, r0, #16
 800ad7a:	f7ff ff7b 	bl	800ac74 <lfs_bd_prog>
    if (err) {
 800ad7e:	4605      	mov	r5, r0
 800ad80:	b110      	cbz	r0, 800ad88 <lfs_dir_commitprog+0x2c>
}
 800ad82:	4628      	mov	r0, r5
 800ad84:	b005      	add	sp, #20
 800ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 800ad88:	4632      	mov	r2, r6
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	68e0      	ldr	r0, [r4, #12]
 800ad8e:	f002 f965 	bl	800d05c <lfs_crc>
 800ad92:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	441e      	add	r6, r3
 800ad98:	6066      	str	r6, [r4, #4]
    return 0;
 800ad9a:	e7f2      	b.n	800ad82 <lfs_dir_commitprog+0x26>

0800ad9c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	b087      	sub	sp, #28
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ada2:	f342 0709 	sbfx	r7, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ada6:	f1b7 3fff 	cmp.w	r7, #4294967295
 800adaa:	bf14      	ite	ne
 800adac:	4617      	movne	r7, r2
 800adae:	1c57      	addeq	r7, r2, #1
    return tag & 0x000003ff;
 800adb0:	f3c7 0709 	ubfx	r7, r7, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800adb4:	f107 0904 	add.w	r9, r7, #4
    if (commit->off + dsize > commit->end) {
 800adb8:	684c      	ldr	r4, [r1, #4]
 800adba:	eb04 0c09 	add.w	ip, r4, r9
 800adbe:	694c      	ldr	r4, [r1, #20]
 800adc0:	45a4      	cmp	ip, r4
 800adc2:	d846      	bhi.n	800ae52 <lfs_dir_commitattr+0xb6>
 800adc4:	4698      	mov	r8, r3
 800adc6:	4615      	mov	r5, r2
 800adc8:	460e      	mov	r6, r1
 800adca:	4604      	mov	r4, r0
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800adcc:	f022 4b00 	bic.w	fp, r2, #2147483648	; 0x80000000
 800add0:	688b      	ldr	r3, [r1, #8]
 800add2:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 800add6:	ba1b      	rev	r3, r3
 800add8:	aa06      	add	r2, sp, #24
 800adda:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800adde:	2304      	movs	r3, #4
 800ade0:	f7ff ffbc 	bl	800ad5c <lfs_dir_commitprog>
    if (err) {
 800ade4:	4682      	mov	sl, r0
 800ade6:	bb70      	cbnz	r0, 800ae46 <lfs_dir_commitattr+0xaa>
    if (!(tag & 0x80000000)) {
 800ade8:	2d00      	cmp	r5, #0
 800adea:	da23      	bge.n	800ae34 <lfs_dir_commitattr+0x98>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800adec:	2500      	movs	r5, #0
 800adee:	42bd      	cmp	r5, r7
 800adf0:	d227      	bcs.n	800ae42 <lfs_dir_commitattr+0xa6>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800adf2:	eba9 0305 	sub.w	r3, r9, r5
            err = lfs_bd_read(lfs,
 800adf6:	f8d8 1000 	ldr.w	r1, [r8]
                    disk->block, disk->off+i, &dat, 1);
 800adfa:	f8d8 2004 	ldr.w	r2, [r8, #4]
            err = lfs_bd_read(lfs,
 800adfe:	442a      	add	r2, r5
 800ae00:	2001      	movs	r0, #1
 800ae02:	9003      	str	r0, [sp, #12]
 800ae04:	f10d 0013 	add.w	r0, sp, #19
 800ae08:	9002      	str	r0, [sp, #8]
 800ae0a:	9201      	str	r2, [sp, #4]
 800ae0c:	9100      	str	r1, [sp, #0]
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	4622      	mov	r2, r4
 800ae12:	2100      	movs	r1, #0
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7ff f813 	bl	8009e40 <lfs_bd_read>
            if (err) {
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	b9b8      	cbnz	r0, 800ae4e <lfs_dir_commitattr+0xb2>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f10d 0213 	add.w	r2, sp, #19
 800ae24:	4631      	mov	r1, r6
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff ff98 	bl	800ad5c <lfs_dir_commitprog>
            if (err) {
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b970      	cbnz	r0, 800ae4e <lfs_dir_commitattr+0xb2>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800ae30:	3501      	adds	r5, #1
 800ae32:	e7dc      	b.n	800adee <lfs_dir_commitattr+0x52>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800ae34:	463b      	mov	r3, r7
 800ae36:	4642      	mov	r2, r8
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7ff ff8e 	bl	800ad5c <lfs_dir_commitprog>
        if (err) {
 800ae40:	b950      	cbnz	r0, 800ae58 <lfs_dir_commitattr+0xbc>
    commit->ptag = tag & 0x7fffffff;
 800ae42:	f8c6 b008 	str.w	fp, [r6, #8]
}
 800ae46:	4650      	mov	r0, sl
 800ae48:	b007      	add	sp, #28
 800ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 800ae4e:	469a      	mov	sl, r3
 800ae50:	e7f9      	b.n	800ae46 <lfs_dir_commitattr+0xaa>
        return LFS_ERR_NOSPC;
 800ae52:	f06f 0a1b 	mvn.w	sl, #27
 800ae56:	e7f6      	b.n	800ae46 <lfs_dir_commitattr+0xaa>
            return err;
 800ae58:	4682      	mov	sl, r0
 800ae5a:	e7f4      	b.n	800ae46 <lfs_dir_commitattr+0xaa>

0800ae5c <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800ae5c:	b508      	push	{r3, lr}
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800ae5e:	4613      	mov	r3, r2
 800ae60:	460a      	mov	r2, r1
 800ae62:	6841      	ldr	r1, [r0, #4]
 800ae64:	6800      	ldr	r0, [r0, #0]
 800ae66:	f7ff ff99 	bl	800ad9c <lfs_dir_commitattr>
}
 800ae6a:	bd08      	pop	{r3, pc}

0800ae6c <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4605      	mov	r5, r0
    rcache->block = 0xffffffff;
 800ae70:	f04f 34ff 	mov.w	r4, #4294967295
 800ae74:	6014      	str	r4, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800ae76:	f7ff fea5 	bl	800abc4 <lfs_bd_flush>
    if (err) {
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	b918      	cbnz	r0, 800ae86 <lfs_bd_sync+0x1a>
    return lfs->cfg->sync(lfs->cfg);
 800ae7e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800ae80:	6903      	ldr	r3, [r0, #16]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	bd38      	pop	{r3, r4, r5, pc}

0800ae8a <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800ae8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8e:	b089      	sub	sp, #36	; 0x24
 800ae90:	4605      	mov	r5, r0
 800ae92:	460c      	mov	r4, r1
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800ae94:	684b      	ldr	r3, [r1, #4]
 800ae96:	3308      	adds	r3, #8
            lfs->cfg->prog_size);
 800ae98:	6e82      	ldr	r2, [r0, #104]	; 0x68
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800ae9a:	6992      	ldr	r2, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800aea0:	fbb3 f8f2 	udiv	r8, r3, r2
 800aea4:	fb02 3818 	mls	r8, r2, r8, r3
 800aea8:	eba3 0708 	sub.w	r7, r3, r8
    int err = lfs_bd_read(lfs,
 800aeac:	4683      	mov	fp, r0
 800aeae:	680a      	ldr	r2, [r1, #0]
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	9303      	str	r3, [sp, #12]
 800aeb4:	a907      	add	r1, sp, #28
 800aeb6:	9102      	str	r1, [sp, #8]
 800aeb8:	9701      	str	r7, [sp, #4]
 800aeba:	9200      	str	r2, [sp, #0]
 800aebc:	4602      	mov	r2, r0
 800aebe:	2100      	movs	r1, #0
 800aec0:	f7fe ffbe 	bl	8009e40 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
 800aec4:	b138      	cbz	r0, 800aed6 <lfs_dir_commitcrc+0x4c>
 800aec6:	4681      	mov	r9, r0
 800aec8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800aecc:	d003      	beq.n	800aed6 <lfs_dir_commitcrc+0x4c>
}
 800aece:	4648      	mov	r0, r9
 800aed0:	b009      	add	sp, #36	; 0x24
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool reset = ~lfs_frombe32(tag) >> 31;
 800aed6:	9e07      	ldr	r6, [sp, #28]
    return __builtin_bswap32(a);
 800aed8:	ba36      	rev	r6, r6
 800aeda:	43f6      	mvns	r6, r6
 800aedc:	0ff6      	lsrs	r6, r6, #31
 800aede:	b2f6      	uxtb	r6, r6
    tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff,
 800aee0:	f506 62a0 	add.w	r2, r6, #1280	; 0x500
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	1afb      	subs	r3, r7, r3
 800aee8:	3b04      	subs	r3, #4
 800aeea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800aeee:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800aef2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800aef6:	9307      	str	r3, [sp, #28]
    footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800aef8:	68a2      	ldr	r2, [r4, #8]
 800aefa:	4053      	eors	r3, r2
 800aefc:	ba1b      	rev	r3, r3
 800aefe:	f10d 0820 	add.w	r8, sp, #32
 800af02:	f848 3d0c 	str.w	r3, [r8, #-12]!
    commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800af06:	2204      	movs	r2, #4
 800af08:	4641      	mov	r1, r8
 800af0a:	68e0      	ldr	r0, [r4, #12]
 800af0c:	f002 f8a6 	bl	800d05c <lfs_crc>
 800af10:	60e0      	str	r0, [r4, #12]
    footer[1] = lfs_tole32(commit->crc);
 800af12:	9006      	str	r0, [sp, #24]
    err = lfs_bd_prog(lfs,
 800af14:	f105 0a10 	add.w	sl, r5, #16
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	6862      	ldr	r2, [r4, #4]
 800af1c:	2108      	movs	r1, #8
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	f8cd 8008 	str.w	r8, [sp, #8]
 800af24:	9201      	str	r2, [sp, #4]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	2300      	movs	r3, #0
 800af2a:	462a      	mov	r2, r5
 800af2c:	4651      	mov	r1, sl
 800af2e:	4628      	mov	r0, r5
 800af30:	f7ff fea0 	bl	800ac74 <lfs_bd_prog>
    if (err) {
 800af34:	4681      	mov	r9, r0
 800af36:	2800      	cmp	r0, #0
 800af38:	d1c9      	bne.n	800aece <lfs_dir_commitcrc+0x44>
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800af3a:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
 800af3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800af40:	1d11      	adds	r1, r2, #4
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	440a      	add	r2, r1
 800af46:	6062      	str	r2, [r4, #4]
    commit->ptag = tag ^ (reset << 31);
 800af48:	ea83 76c6 	eor.w	r6, r3, r6, lsl #31
 800af4c:	60a6      	str	r6, [r4, #8]
    err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800af4e:	2300      	movs	r3, #0
 800af50:	462a      	mov	r2, r5
 800af52:	4651      	mov	r1, sl
 800af54:	4628      	mov	r0, r5
 800af56:	f7ff ff89 	bl	800ae6c <lfs_bd_sync>
    if (err) {
 800af5a:	4681      	mov	r9, r0
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1b6      	bne.n	800aece <lfs_dir_commitcrc+0x44>
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	9a07      	ldr	r2, [sp, #28]
    return tag & 0x000003ff;
 800af64:	f3c2 0809 	ubfx	r8, r2, #0, #10
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800af68:	eba3 0308 	sub.w	r3, r3, r8
 800af6c:	6922      	ldr	r2, [r4, #16]
 800af6e:	eba3 0802 	sub.w	r8, r3, r2
    for (lfs_off_t i = 0; i < size; i++) {
 800af72:	2600      	movs	r6, #0
    uint32_t crc = 0xffffffff;
 800af74:	f04f 3aff 	mov.w	sl, #4294967295
    for (lfs_off_t i = 0; i < size; i++) {
 800af78:	e007      	b.n	800af8a <lfs_dir_commitcrc+0x100>
        crc = lfs_crc(crc, &dat, 1);
 800af7a:	2201      	movs	r2, #1
 800af7c:	f10d 0113 	add.w	r1, sp, #19
 800af80:	4650      	mov	r0, sl
 800af82:	f002 f86b 	bl	800d05c <lfs_crc>
 800af86:	4682      	mov	sl, r0
    for (lfs_off_t i = 0; i < size; i++) {
 800af88:	3601      	adds	r6, #1
 800af8a:	4546      	cmp	r6, r8
 800af8c:	d214      	bcs.n	800afb8 <lfs_dir_commitcrc+0x12e>
        err = lfs_bd_read(lfs,
 800af8e:	6822      	ldr	r2, [r4, #0]
                commit->block, commit->begin+i, &dat, 1);
 800af90:	6923      	ldr	r3, [r4, #16]
        err = lfs_bd_read(lfs,
 800af92:	4433      	add	r3, r6
 800af94:	2101      	movs	r1, #1
 800af96:	9103      	str	r1, [sp, #12]
 800af98:	f10d 0113 	add.w	r1, sp, #19
 800af9c:	9102      	str	r1, [sp, #8]
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	9200      	str	r2, [sp, #0]
 800afa2:	eba8 0306 	sub.w	r3, r8, r6
 800afa6:	465a      	mov	r2, fp
 800afa8:	2100      	movs	r1, #0
 800afaa:	4628      	mov	r0, r5
 800afac:	f7fe ff48 	bl	8009e40 <lfs_bd_read>
        if (err) {
 800afb0:	4681      	mov	r9, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d0e1      	beq.n	800af7a <lfs_dir_commitcrc+0xf0>
 800afb6:	e78a      	b.n	800aece <lfs_dir_commitcrc+0x44>
    if (err) {
 800afb8:	f1b9 0f00 	cmp.w	r9, #0
 800afbc:	d187      	bne.n	800aece <lfs_dir_commitcrc+0x44>
    if (crc != commit->crc) {
 800afbe:	68e3      	ldr	r3, [r4, #12]
 800afc0:	4553      	cmp	r3, sl
 800afc2:	d084      	beq.n	800aece <lfs_dir_commitcrc+0x44>
        return LFS_ERR_CORRUPT;
 800afc4:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800afc8:	e781      	b.n	800aece <lfs_dir_commitcrc+0x44>
	...

0800afcc <lfs_dir_find>:
        const char **path, uint16_t *id) {
 800afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	b08d      	sub	sp, #52	; 0x34
 800afd2:	4683      	mov	fp, r0
 800afd4:	460f      	mov	r7, r1
 800afd6:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	9205      	str	r2, [sp, #20]
    if (id) {
 800afdc:	9306      	str	r3, [sp, #24]
 800afde:	b11b      	cbz	r3, 800afe8 <lfs_dir_find+0x1c>
 800afe0:	461a      	mov	r2, r3
        *id = 0x3ff;
 800afe2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800afe6:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 800afe8:	f8db 3020 	ldr.w	r3, [fp, #32]
 800afec:	61bb      	str	r3, [r7, #24]
    dir->tail[1] = lfs->root[1];
 800afee:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800aff2:	61fb      	str	r3, [r7, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800aff4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800b140 <lfs_dir_find+0x174>
 800aff8:	46b8      	mov	r8, r7
        name += strspn(name, "/");
 800affa:	4c4d      	ldr	r4, [pc, #308]	; (800b130 <lfs_dir_find+0x164>)
 800affc:	4621      	mov	r1, r4
 800affe:	9e05      	ldr	r6, [sp, #20]
 800b000:	4630      	mov	r0, r6
 800b002:	f002 fef0 	bl	800dde6 <strspn>
 800b006:	4605      	mov	r5, r0
 800b008:	1837      	adds	r7, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
 800b00a:	4621      	mov	r1, r4
 800b00c:	4638      	mov	r0, r7
 800b00e:	f002 fed8 	bl	800ddc2 <strcspn>
 800b012:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b014:	2801      	cmp	r0, #1
 800b016:	d00b      	beq.n	800b030 <lfs_dir_find+0x64>
 800b018:	f1ba 0f02 	cmp.w	sl, #2
 800b01c:	d00d      	beq.n	800b03a <lfs_dir_find+0x6e>
        const char *suffix = name + namelen;
 800b01e:	eb07 030a 	add.w	r3, r7, sl
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	461c      	mov	r4, r3
        int depth = 1;
 800b026:	2601      	movs	r6, #1
 800b028:	e014      	b.n	800b054 <lfs_dir_find+0x88>
 800b02a:	4681      	mov	r9, r0
 800b02c:	46ab      	mov	fp, r5
 800b02e:	e7e4      	b.n	800affa <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b030:	9b05      	ldr	r3, [sp, #20]
 800b032:	5d5b      	ldrb	r3, [r3, r5]
 800b034:	2b2e      	cmp	r3, #46	; 0x2e
 800b036:	d1ef      	bne.n	800b018 <lfs_dir_find+0x4c>
 800b038:	e006      	b.n	800b048 <lfs_dir_find+0x7c>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800b03a:	2202      	movs	r2, #2
 800b03c:	493d      	ldr	r1, [pc, #244]	; (800b134 <lfs_dir_find+0x168>)
 800b03e:	4638      	mov	r0, r7
 800b040:	f002 fadc 	bl	800d5fc <memcmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	d1ea      	bne.n	800b01e <lfs_dir_find+0x52>
            name += namelen;
 800b048:	eb07 030a 	add.w	r3, r7, sl
 800b04c:	9305      	str	r3, [sp, #20]
            goto nextname;
 800b04e:	e7d4      	b.n	800affa <lfs_dir_find+0x2e>
                depth += 1;
 800b050:	3601      	adds	r6, #1
            suffix += sufflen;
 800b052:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
 800b054:	4d36      	ldr	r5, [pc, #216]	; (800b130 <lfs_dir_find+0x164>)
 800b056:	4629      	mov	r1, r5
 800b058:	4620      	mov	r0, r4
 800b05a:	f002 fec4 	bl	800dde6 <strspn>
 800b05e:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
 800b060:	4629      	mov	r1, r5
 800b062:	4620      	mov	r0, r4
 800b064:	f002 fead 	bl	800ddc2 <strcspn>
            if (sufflen == 0) {
 800b068:	4605      	mov	r5, r0
 800b06a:	b168      	cbz	r0, 800b088 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800b06c:	2802      	cmp	r0, #2
 800b06e:	d1ef      	bne.n	800b050 <lfs_dir_find+0x84>
 800b070:	2202      	movs	r2, #2
 800b072:	4930      	ldr	r1, [pc, #192]	; (800b134 <lfs_dir_find+0x168>)
 800b074:	4620      	mov	r0, r4
 800b076:	f002 fac1 	bl	800d5fc <memcmp>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d1e8      	bne.n	800b050 <lfs_dir_find+0x84>
                if (depth == 0) {
 800b07e:	3e01      	subs	r6, #1
 800b080:	d1e7      	bne.n	800b052 <lfs_dir_find+0x86>
                    name = suffix + sufflen;
 800b082:	1963      	adds	r3, r4, r5
 800b084:	9305      	str	r3, [sp, #20]
                    goto nextname;
 800b086:	e7b8      	b.n	800affa <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 800b088:	783b      	ldrb	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d04b      	beq.n	800b126 <lfs_dir_find+0x15a>
        *path = name;
 800b08e:	9b07      	ldr	r3, [sp, #28]
 800b090:	601f      	str	r7, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
 800b092:	f3c9 530a 	ubfx	r3, r9, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800b096:	2b02      	cmp	r3, #2
 800b098:	d141      	bne.n	800b11e <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 800b09a:	f3c9 2989 	ubfx	r9, r9, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 800b09e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b0a2:	4599      	cmp	r9, r3
 800b0a4:	d102      	bne.n	800b0ac <lfs_dir_find+0xe0>
 800b0a6:	4654      	mov	r4, sl
 800b0a8:	465d      	mov	r5, fp
 800b0aa:	e02b      	b.n	800b104 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b0ac:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b0b0:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	f049 5300 	orr.w	r3, r9, #536870912	; 0x20000000
 800b0ba:	f043 0308 	orr.w	r3, r3, #8
 800b0be:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <lfs_dir_find+0x16c>)
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f7ff fcb6 	bl	800aa34 <lfs_dir_get>
            if (res < 0) {
 800b0c8:	f1b0 0900 	subs.w	r9, r0, #0
 800b0cc:	db2b      	blt.n	800b126 <lfs_dir_find+0x15a>
 800b0ce:	4654      	mov	r4, sl
 800b0d0:	465d      	mov	r5, fp
 800b0d2:	e017      	b.n	800b104 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b0d4:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b0d6:	9509      	str	r5, [sp, #36]	; 0x24
 800b0d8:	970a      	str	r7, [sp, #40]	; 0x28
 800b0da:	940b      	str	r4, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b0dc:	aa09      	add	r2, sp, #36	; 0x24
 800b0de:	9203      	str	r2, [sp, #12]
 800b0e0:	4a16      	ldr	r2, [pc, #88]	; (800b13c <lfs_dir_find+0x170>)
 800b0e2:	9202      	str	r2, [sp, #8]
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	9400      	str	r4, [sp, #0]
 800b0e8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	4641      	mov	r1, r8
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f7fe ffcd 	bl	800a090 <lfs_dir_fetchmatch>
            if (tag < 0) {
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	db14      	blt.n	800b124 <lfs_dir_find+0x158>
            if (tag) {
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d195      	bne.n	800b02a <lfs_dir_find+0x5e>
            if (!dir->split) {
 800b0fe:	f898 3017 	ldrb.w	r3, [r8, #23]
 800b102:	b14b      	cbz	r3, 800b118 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b104:	f108 0618 	add.w	r6, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b108:	212f      	movs	r1, #47	; 0x2f
 800b10a:	4638      	mov	r0, r7
 800b10c:	f002 fe4c 	bl	800dda8 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b110:	2800      	cmp	r0, #0
 800b112:	d0df      	beq.n	800b0d4 <lfs_dir_find+0x108>
 800b114:	2300      	movs	r3, #0
 800b116:	e7de      	b.n	800b0d6 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 800b118:	f06f 0901 	mvn.w	r9, #1
 800b11c:	e003      	b.n	800b126 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 800b11e:	f06f 0913 	mvn.w	r9, #19
 800b122:	e000      	b.n	800b126 <lfs_dir_find+0x15a>
 800b124:	4681      	mov	r9, r0
}
 800b126:	4648      	mov	r0, r9
 800b128:	b00d      	add	sp, #52	; 0x34
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	bf00      	nop
 800b130:	0800f11c 	.word	0x0800f11c
 800b134:	0800f120 	.word	0x0800f120
 800b138:	700ffc00 	.word	0x700ffc00
 800b13c:	0800a04d 	.word	0x0800a04d
 800b140:	002ffc00 	.word	0x002ffc00

0800b144 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 800b144:	b510      	push	{r4, lr}
 800b146:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 800b148:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14c:	b13b      	cbz	r3, 800b15e <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 800b14e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	b143      	cbz	r3, 800b166 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 800b154:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b158:	b14b      	cbz	r3, 800b16e <lfs_deinit+0x2a>
}
 800b15a:	2000      	movs	r0, #0
 800b15c:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 800b15e:	68c0      	ldr	r0, [r0, #12]
 800b160:	f002 fa44 	bl	800d5ec <free>
 800b164:	e7f3      	b.n	800b14e <lfs_deinit+0xa>
 800b166:	69e0      	ldr	r0, [r4, #28]
 800b168:	f002 fa40 	bl	800d5ec <free>
 800b16c:	e7f2      	b.n	800b154 <lfs_deinit+0x10>
 800b16e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b170:	f002 fa3c 	bl	800d5ec <free>
 800b174:	e7f1      	b.n	800b15a <lfs_deinit+0x16>

0800b176 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 800b178:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800b17a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b17c:	69dc      	ldr	r4, [r3, #28]
 800b17e:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
 800b180:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
 800b184:	b190      	cbz	r0, 800b1ac <lfs_ctz_index+0x36>
 800b186:	460e      	mov	r6, r1
    return __builtin_popcount(a);
 800b188:	3801      	subs	r0, #1
 800b18a:	f7f5 f859 	bl	8000240 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800b18e:	1c85      	adds	r5, r0, #2
 800b190:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
 800b194:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
 800b198:	fb05 7414 	mls	r4, r5, r4, r7
 800b19c:	4628      	mov	r0, r5
 800b19e:	f7f5 f84f 	bl	8000240 <__popcountsi2>
 800b1a2:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
 800b1a6:	6034      	str	r4, [r6, #0]
    return i;
 800b1a8:	4628      	mov	r0, r5
}
 800b1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e7fc      	b.n	800b1aa <lfs_ctz_index+0x34>

0800b1b0 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	b089      	sub	sp, #36	; 0x24
 800b1b6:	461c      	mov	r4, r3
 800b1b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    if (size == 0) {
 800b1bc:	b923      	cbnz	r3, 800b1c8 <lfs_ctz_traverse+0x18>
        return 0;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	b009      	add	sp, #36	; 0x24
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	4681      	mov	r9, r0
 800b1ca:	468a      	mov	sl, r1
 800b1cc:	4693      	mov	fp, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	a908      	add	r1, sp, #32
 800b1d2:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b1d6:	f7ff ffce 	bl	800b176 <lfs_ctz_index>
 800b1da:	4680      	mov	r8, r0
        int err = cb(data, head);
 800b1dc:	4621      	mov	r1, r4
 800b1de:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b1e0:	47a8      	blx	r5
        if (err) {
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d1eb      	bne.n	800b1c0 <lfs_ctz_traverse+0x10>
        if (index == 0) {
 800b1e8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ec:	d0e8      	beq.n	800b1c0 <lfs_ctz_traverse+0x10>
        int count = 2 - (index & 1);
 800b1ee:	f008 0701 	and.w	r7, r8, #1
 800b1f2:	f1c7 0702 	rsb	r7, r7, #2
 800b1f6:	463e      	mov	r6, r7
                pcache, rcache, count*sizeof(head),
 800b1f8:	00bb      	lsls	r3, r7, #2
        err = lfs_bd_read(lfs,
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	aa05      	add	r2, sp, #20
 800b1fe:	9202      	str	r2, [sp, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	9201      	str	r2, [sp, #4]
 800b204:	9400      	str	r4, [sp, #0]
 800b206:	465a      	mov	r2, fp
 800b208:	4651      	mov	r1, sl
 800b20a:	4648      	mov	r0, r9
 800b20c:	f7fe fe18 	bl	8009e40 <lfs_bd_read>
        if (err) {
 800b210:	4604      	mov	r4, r0
 800b212:	b9b0      	cbnz	r0, 800b242 <lfs_ctz_traverse+0x92>
        for (int i = 0; i < count-1; i++) {
 800b214:	1e73      	subs	r3, r6, #1
 800b216:	42a3      	cmp	r3, r4
 800b218:	dd0b      	ble.n	800b232 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 800b21a:	ab08      	add	r3, sp, #32
 800b21c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b220:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800b224:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b226:	47a8      	blx	r5
            if (err) {
 800b228:	4603      	mov	r3, r0
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1c8      	bne.n	800b1c0 <lfs_ctz_traverse+0x10>
        for (int i = 0; i < count-1; i++) {
 800b22e:	3401      	adds	r4, #1
 800b230:	e7f0      	b.n	800b214 <lfs_ctz_traverse+0x64>
        head = heads[count-1];
 800b232:	aa08      	add	r2, sp, #32
 800b234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b238:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 800b23c:	eba8 0807 	sub.w	r8, r8, r7
    while (true) {
 800b240:	e7cc      	b.n	800b1dc <lfs_ctz_traverse+0x2c>
            return err;
 800b242:	4603      	mov	r3, r0
 800b244:	e7bc      	b.n	800b1c0 <lfs_ctz_traverse+0x10>
	...

0800b248 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4604      	mov	r4, r0
    lfs->cfg = cfg;
 800b24c:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b24e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800b250:	694a      	ldr	r2, [r1, #20]
 800b252:	fbb0 f3f2 	udiv	r3, r0, r2
 800b256:	fb02 0313 	mls	r3, r2, r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d172      	bne.n	800b344 <lfs_init+0xfc>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b25e:	698a      	ldr	r2, [r1, #24]
 800b260:	fbb0 f3f2 	udiv	r3, r0, r2
 800b264:	fb02 0313 	mls	r3, r2, r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d172      	bne.n	800b352 <lfs_init+0x10a>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b26c:	69ca      	ldr	r2, [r1, #28]
 800b26e:	fbb2 f3f0 	udiv	r3, r2, r0
 800b272:	fb00 2313 	mls	r3, r0, r3, r2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d172      	bne.n	800b360 <lfs_init+0x118>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b27a:	f1a2 0508 	sub.w	r5, r2, #8
 800b27e:	f04f 33ff 	mov.w	r3, #4294967295
 800b282:	fbb3 f3f5 	udiv	r3, r3, r5
    return 32 - __builtin_clz(a-1);
 800b286:	3b01      	subs	r3, #1
 800b288:	fab3 f383 	clz	r3, r3
 800b28c:	f1c3 0320 	rsb	r3, r3, #32
 800b290:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b294:	d36b      	bcc.n	800b36e <lfs_init+0x126>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b296:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29c:	d06e      	beq.n	800b37c <lfs_init+0x134>
    if (lfs->cfg->read_buffer) {
 800b29e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d072      	beq.n	800b38a <lfs_init+0x142>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800b2a4:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 800b2a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b2a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d078      	beq.n	800b3a0 <lfs_init+0x158>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800b2ae:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b2b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b2b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2b4:	21ff      	movs	r1, #255	; 0xff
 800b2b6:	68e0      	ldr	r0, [r4, #12]
 800b2b8:	f002 f9ba 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800b2bc:	f04f 35ff 	mov.w	r5, #4294967295
 800b2c0:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b2c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b2c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2c6:	21ff      	movs	r1, #255	; 0xff
 800b2c8:	69e0      	ldr	r0, [r4, #28]
 800b2ca:	f002 f9b1 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800b2ce:	6125      	str	r5, [r4, #16]
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b2d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b2d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d06a      	beq.n	800b3ae <lfs_init+0x166>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b2d8:	f010 0f07 	tst.w	r0, #7
 800b2dc:	d16e      	bne.n	800b3bc <lfs_init+0x174>
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	f013 0f07 	tst.w	r3, #7
 800b2e4:	d16a      	bne.n	800b3bc <lfs_init+0x174>
    if (lfs->cfg->lookahead_buffer) {
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d06f      	beq.n	800b3ca <lfs_init+0x182>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800b2ea:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b2ec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2f0:	2aff      	cmp	r2, #255	; 0xff
 800b2f2:	d870      	bhi.n	800b3d6 <lfs_init+0x18e>
    lfs->name_max = lfs->cfg->name_max;
 800b2f4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
 800b2f6:	b90a      	cbnz	r2, 800b2fc <lfs_init+0xb4>
        lfs->name_max = LFS_NAME_MAX;
 800b2f8:	22ff      	movs	r2, #255	; 0xff
 800b2fa:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b2fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2fe:	f1b2 6ff0 	cmp.w	r2, #125829120	; 0x7800000
 800b302:	d86f      	bhi.n	800b3e4 <lfs_init+0x19c>
    lfs->file_max = lfs->cfg->file_max;
 800b304:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
 800b306:	b912      	cbnz	r2, 800b30e <lfs_init+0xc6>
        lfs->file_max = LFS_FILE_MAX;
 800b308:	f04f 62f0 	mov.w	r2, #125829120	; 0x7800000
 800b30c:	6722      	str	r2, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b310:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b314:	4293      	cmp	r3, r2
 800b316:	d86c      	bhi.n	800b3f2 <lfs_init+0x1aa>
    lfs->attr_max = lfs->cfg->attr_max;
 800b318:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
 800b31a:	b913      	cbnz	r3, 800b322 <lfs_init+0xda>
        lfs->attr_max = LFS_ATTR_MAX;
 800b31c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800b320:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = 0xffffffff;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	6223      	str	r3, [r4, #32]
    lfs->root[1] = 0xffffffff;
 800b328:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
 800b32a:	2000      	movs	r0, #0
 800b32c:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
 800b32e:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 800b330:	6320      	str	r0, [r4, #48]	; 0x30
 800b332:	6360      	str	r0, [r4, #52]	; 0x34
 800b334:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gpending = (struct lfs_gstate){0};
 800b336:	63e0      	str	r0, [r4, #60]	; 0x3c
 800b338:	6420      	str	r0, [r4, #64]	; 0x40
 800b33a:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gdelta = (struct lfs_gstate){0};
 800b33c:	64a0      	str	r0, [r4, #72]	; 0x48
 800b33e:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b340:	6520      	str	r0, [r4, #80]	; 0x50
}
 800b342:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b344:	4b2e      	ldr	r3, [pc, #184]	; (800b400 <lfs_init+0x1b8>)
 800b346:	4a2f      	ldr	r2, [pc, #188]	; (800b404 <lfs_init+0x1bc>)
 800b348:	f640 4171 	movw	r1, #3185	; 0xc71
 800b34c:	482e      	ldr	r0, [pc, #184]	; (800b408 <lfs_init+0x1c0>)
 800b34e:	f002 f8f1 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b352:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <lfs_init+0x1c4>)
 800b354:	4a2b      	ldr	r2, [pc, #172]	; (800b404 <lfs_init+0x1bc>)
 800b356:	f640 4172 	movw	r1, #3186	; 0xc72
 800b35a:	482b      	ldr	r0, [pc, #172]	; (800b408 <lfs_init+0x1c0>)
 800b35c:	f002 f8ea 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b360:	4b2b      	ldr	r3, [pc, #172]	; (800b410 <lfs_init+0x1c8>)
 800b362:	4a28      	ldr	r2, [pc, #160]	; (800b404 <lfs_init+0x1bc>)
 800b364:	f640 4173 	movw	r1, #3187	; 0xc73
 800b368:	4827      	ldr	r0, [pc, #156]	; (800b408 <lfs_init+0x1c0>)
 800b36a:	f002 f8e3 	bl	800d534 <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b36e:	4b29      	ldr	r3, [pc, #164]	; (800b414 <lfs_init+0x1cc>)
 800b370:	4a24      	ldr	r2, [pc, #144]	; (800b404 <lfs_init+0x1bc>)
 800b372:	f640 4177 	movw	r1, #3191	; 0xc77
 800b376:	4824      	ldr	r0, [pc, #144]	; (800b408 <lfs_init+0x1c0>)
 800b378:	f002 f8dc 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b37c:	4b26      	ldr	r3, [pc, #152]	; (800b418 <lfs_init+0x1d0>)
 800b37e:	4a21      	ldr	r2, [pc, #132]	; (800b404 <lfs_init+0x1bc>)
 800b380:	f640 417a 	movw	r1, #3194	; 0xc7a
 800b384:	4820      	ldr	r0, [pc, #128]	; (800b408 <lfs_init+0x1c0>)
 800b386:	f002 f8d5 	bl	800d534 <__assert_func>
    return malloc(size);
 800b38a:	f002 f927 	bl	800d5dc <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b38e:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 800b390:	2800      	cmp	r0, #0
 800b392:	d188      	bne.n	800b2a6 <lfs_init+0x5e>
    lfs_deinit(lfs);
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff fed5 	bl	800b144 <lfs_deinit>
    return err;
 800b39a:	f06f 000b 	mvn.w	r0, #11
 800b39e:	e7d0      	b.n	800b342 <lfs_init+0xfa>
 800b3a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b3a2:	f002 f91b 	bl	800d5dc <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b3a6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d181      	bne.n	800b2b0 <lfs_init+0x68>
 800b3ac:	e7f2      	b.n	800b394 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b3ae:	4b1b      	ldr	r3, [pc, #108]	; (800b41c <lfs_init+0x1d4>)
 800b3b0:	4a14      	ldr	r2, [pc, #80]	; (800b404 <lfs_init+0x1bc>)
 800b3b2:	f640 4197 	movw	r1, #3223	; 0xc97
 800b3b6:	4814      	ldr	r0, [pc, #80]	; (800b408 <lfs_init+0x1c0>)
 800b3b8:	f002 f8bc 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b3bc:	4b18      	ldr	r3, [pc, #96]	; (800b420 <lfs_init+0x1d8>)
 800b3be:	4a11      	ldr	r2, [pc, #68]	; (800b404 <lfs_init+0x1bc>)
 800b3c0:	f640 4198 	movw	r1, #3224	; 0xc98
 800b3c4:	4810      	ldr	r0, [pc, #64]	; (800b408 <lfs_init+0x1c0>)
 800b3c6:	f002 f8b5 	bl	800d534 <__assert_func>
 800b3ca:	f002 f907 	bl	800d5dc <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800b3ce:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d18b      	bne.n	800b2ec <lfs_init+0xa4>
 800b3d4:	e7de      	b.n	800b394 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b3d6:	4b13      	ldr	r3, [pc, #76]	; (800b424 <lfs_init+0x1dc>)
 800b3d8:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <lfs_init+0x1bc>)
 800b3da:	f640 41a4 	movw	r1, #3236	; 0xca4
 800b3de:	480a      	ldr	r0, [pc, #40]	; (800b408 <lfs_init+0x1c0>)
 800b3e0:	f002 f8a8 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b3e4:	4b10      	ldr	r3, [pc, #64]	; (800b428 <lfs_init+0x1e0>)
 800b3e6:	4a07      	ldr	r2, [pc, #28]	; (800b404 <lfs_init+0x1bc>)
 800b3e8:	f640 41aa 	movw	r1, #3242	; 0xcaa
 800b3ec:	4806      	ldr	r0, [pc, #24]	; (800b408 <lfs_init+0x1c0>)
 800b3ee:	f002 f8a1 	bl	800d534 <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b3f2:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <lfs_init+0x1e4>)
 800b3f4:	4a03      	ldr	r2, [pc, #12]	; (800b404 <lfs_init+0x1bc>)
 800b3f6:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 800b3fa:	4803      	ldr	r0, [pc, #12]	; (800b408 <lfs_init+0x1c0>)
 800b3fc:	f002 f89a 	bl	800d534 <__assert_func>
 800b400:	0800f1e8 	.word	0x0800f1e8
 800b404:	0800ef00 	.word	0x0800ef00
 800b408:	0800ef40 	.word	0x0800ef40
 800b40c:	0800f218 	.word	0x0800f218
 800b410:	0800f248 	.word	0x0800f248
 800b414:	0800f27c 	.word	0x0800f27c
 800b418:	0800f2c8 	.word	0x0800f2c8
 800b41c:	0800f2ec 	.word	0x0800f2ec
 800b420:	0800f30c 	.word	0x0800f30c
 800b424:	0800f360 	.word	0x0800f360
 800b428:	0800f37c 	.word	0x0800f37c
 800b42c:	0800f39c 	.word	0x0800f39c

0800b430 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800b430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b434:	b089      	sub	sp, #36	; 0x24
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
 800b43a:	b953      	cbnz	r3, 800b452 <lfs_ctz_find+0x22>
        *block = 0xffffffff;
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b442:	6013      	str	r3, [r2, #0]
        *off = 0;
 800b444:	2200      	movs	r2, #0
 800b446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b448:	601a      	str	r2, [r3, #0]
}
 800b44a:	4610      	mov	r0, r2
 800b44c:	b009      	add	sp, #36	; 0x24
 800b44e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b452:	4691      	mov	r9, r2
 800b454:	4688      	mov	r8, r1
 800b456:	4606      	mov	r6, r0
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b458:	3b01      	subs	r3, #1
 800b45a:	a908      	add	r1, sp, #32
 800b45c:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b460:	f7ff fe89 	bl	800b176 <lfs_ctz_index>
 800b464:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800b466:	a911      	add	r1, sp, #68	; 0x44
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff fe84 	bl	800b176 <lfs_ctz_index>
 800b46e:	4607      	mov	r7, r0
    while (current > target) {
 800b470:	e003      	b.n	800b47a <lfs_ctz_find+0x4a>
        current -= 1 << skip;
 800b472:	2301      	movs	r3, #1
 800b474:	fa03 f404 	lsl.w	r4, r3, r4
 800b478:	1b2d      	subs	r5, r5, r4
    while (current > target) {
 800b47a:	42bd      	cmp	r5, r7
 800b47c:	d92a      	bls.n	800b4d4 <lfs_ctz_find+0xa4>
                lfs_npw2(current-target+1) - 1,
 800b47e:	1bec      	subs	r4, r5, r7
    return 32 - __builtin_clz(a-1);
 800b480:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 800b484:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 800b488:	fa95 f3a5 	rbit	r3, r5
 800b48c:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 800b490:	429c      	cmp	r4, r3
 800b492:	bf28      	it	cs
 800b494:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 800b496:	aa08      	add	r2, sp, #32
 800b498:	f852 1d0c 	ldr.w	r1, [r2, #-12]!
 800b49c:	00a0      	lsls	r0, r4, #2
 800b49e:	2304      	movs	r3, #4
 800b4a0:	9303      	str	r3, [sp, #12]
 800b4a2:	9202      	str	r2, [sp, #8]
 800b4a4:	9001      	str	r0, [sp, #4]
 800b4a6:	9100      	str	r1, [sp, #0]
 800b4a8:	464a      	mov	r2, r9
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7fe fcc7 	bl	8009e40 <lfs_bd_read>
        head = lfs_fromle32(head);
 800b4b2:	9b05      	ldr	r3, [sp, #20]
        if (err) {
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d1c7      	bne.n	800b44a <lfs_ctz_find+0x1a>
        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d903      	bls.n	800b4c6 <lfs_ctz_find+0x96>
 800b4be:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 800b4c0:	6a12      	ldr	r2, [r2, #32]
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d9d5      	bls.n	800b472 <lfs_ctz_find+0x42>
 800b4c6:	4b07      	ldr	r3, [pc, #28]	; (800b4e4 <lfs_ctz_find+0xb4>)
 800b4c8:	4a07      	ldr	r2, [pc, #28]	; (800b4e8 <lfs_ctz_find+0xb8>)
 800b4ca:	f640 012a 	movw	r1, #2090	; 0x82a
 800b4ce:	4807      	ldr	r0, [pc, #28]	; (800b4ec <lfs_ctz_find+0xbc>)
 800b4d0:	f002 f830 	bl	800d534 <__assert_func>
    *block = head;
 800b4d4:	9b05      	ldr	r3, [sp, #20]
 800b4d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4d8:	6013      	str	r3, [r2, #0]
    *off = pos;
 800b4da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4de:	6013      	str	r3, [r2, #0]
    return 0;
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	e7b2      	b.n	800b44a <lfs_ctz_find+0x1a>
 800b4e4:	0800f01c 	.word	0x0800f01c
 800b4e8:	0800eee0 	.word	0x0800eee0
 800b4ec:	0800ef40 	.word	0x0800ef40

0800b4f0 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
 800b4f0:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 800b4f2:	f7ff fe27 	bl	800b144 <lfs_deinit>
}
 800b4f6:	bd08      	pop	{r3, pc}

0800b4f8 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800b4f8:	b530      	push	{r4, r5, lr}
 800b4fa:	b097      	sub	sp, #92	; 0x5c
 800b4fc:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 800b4fe:	f7ff fea3 	bl	800b248 <lfs_init>
    if (err) {
 800b502:	4605      	mov	r5, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	f040 80ca 	bne.w	800b69e <lfs_mount+0x1a6>
    lfs_mdir_t dir = {.tail = {0, 1}};
 800b50a:	2300      	movs	r3, #0
 800b50c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50e:	930c      	str	r3, [sp, #48]	; 0x30
 800b510:	930d      	str	r3, [sp, #52]	; 0x34
 800b512:	930e      	str	r3, [sp, #56]	; 0x38
 800b514:	930f      	str	r3, [sp, #60]	; 0x3c
 800b516:	9310      	str	r3, [sp, #64]	; 0x40
 800b518:	9311      	str	r3, [sp, #68]	; 0x44
 800b51a:	2301      	movs	r3, #1
 800b51c:	9312      	str	r3, [sp, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 800b51e:	e02b      	b.n	800b578 <lfs_mount+0x80>
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 800b520:	b29b      	uxth	r3, r3
 800b522:	f640 513d 	movw	r1, #3389	; 0xd3d
 800b526:	4862      	ldr	r0, [pc, #392]	; (800b6b0 <lfs_mount+0x1b8>)
 800b528:	f002 fbf6 	bl	800dd18 <iprintf>
                err = LFS_ERR_INVAL;
 800b52c:	f06f 0515 	mvn.w	r5, #21
                goto cleanup;
 800b530:	e0b2      	b.n	800b698 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800b532:	f640 5146 	movw	r1, #3398	; 0xd46
 800b536:	485f      	ldr	r0, [pc, #380]	; (800b6b4 <lfs_mount+0x1bc>)
 800b538:	f002 fbee 	bl	800dd18 <iprintf>
                    err = LFS_ERR_INVAL;
 800b53c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b540:	e0aa      	b.n	800b698 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800b542:	f640 5151 	movw	r1, #3409	; 0xd51
 800b546:	485c      	ldr	r0, [pc, #368]	; (800b6b8 <lfs_mount+0x1c0>)
 800b548:	f002 fbe6 	bl	800dd18 <iprintf>
                    err = LFS_ERR_INVAL;
 800b54c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b550:	e0a2      	b.n	800b698 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800b552:	f640 515c 	movw	r1, #3420	; 0xd5c
 800b556:	4859      	ldr	r0, [pc, #356]	; (800b6bc <lfs_mount+0x1c4>)
 800b558:	f002 fbde 	bl	800dd18 <iprintf>
                    err = LFS_ERR_INVAL;
 800b55c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b560:	e09a      	b.n	800b698 <lfs_mount+0x1a0>
                err = tag;
 800b562:	4605      	mov	r5, r0
 800b564:	e098      	b.n	800b698 <lfs_mount+0x1a0>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 800b566:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800b56a:	a90b      	add	r1, sp, #44	; 0x2c
 800b56c:	4620      	mov	r0, r4
 800b56e:	f7ff fa6f 	bl	800aa50 <lfs_dir_getgstate>
        if (err) {
 800b572:	2800      	cmp	r0, #0
 800b574:	f040 8099 	bne.w	800b6aa <lfs_mount+0x1b2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57e:	d04f      	beq.n	800b620 <lfs_mount+0x128>
 800b580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b586:	d049      	beq.n	800b61c <lfs_mount+0x124>
 800b588:	462b      	mov	r3, r5
    while (!lfs_pair_isnull(dir.tail)) {
 800b58a:	f013 0f01 	tst.w	r3, #1
 800b58e:	d149      	bne.n	800b624 <lfs_mount+0x12c>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b590:	9413      	str	r4, [sp, #76]	; 0x4c
 800b592:	4b4b      	ldr	r3, [pc, #300]	; (800b6c0 <lfs_mount+0x1c8>)
 800b594:	9314      	str	r3, [sp, #80]	; 0x50
 800b596:	2308      	movs	r3, #8
 800b598:	9315      	str	r3, [sp, #84]	; 0x54
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800b59a:	ab13      	add	r3, sp, #76	; 0x4c
 800b59c:	9303      	str	r3, [sp, #12]
 800b59e:	4b49      	ldr	r3, [pc, #292]	; (800b6c4 <lfs_mount+0x1cc>)
 800b5a0:	9302      	str	r3, [sp, #8]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	4b48      	ldr	r3, [pc, #288]	; (800b6c8 <lfs_mount+0x1d0>)
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <lfs_mount+0x1d4>)
 800b5ac:	aa11      	add	r2, sp, #68	; 0x44
 800b5ae:	a90b      	add	r1, sp, #44	; 0x2c
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7fe fd6d 	bl	800a090 <lfs_dir_fetchmatch>
        if (tag < 0) {
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	db6d      	blt.n	800b696 <lfs_mount+0x19e>
        if (tag && !lfs_tag_isdelete(tag)) {
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d0d3      	beq.n	800b566 <lfs_mount+0x6e>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b5be:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 800b5c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5c6:	d0ce      	beq.n	800b566 <lfs_mount+0x6e>
            lfs->root[0] = dir.pair[0];
 800b5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ca:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 800b5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ce:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800b5d0:	ab05      	add	r3, sp, #20
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	4b3e      	ldr	r3, [pc, #248]	; (800b6d0 <lfs_mount+0x1d8>)
 800b5d6:	4a3d      	ldr	r2, [pc, #244]	; (800b6cc <lfs_mount+0x1d4>)
 800b5d8:	a90b      	add	r1, sp, #44	; 0x2c
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7ff fa2a 	bl	800aa34 <lfs_dir_get>
            if (tag < 0) {
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	dbbe      	blt.n	800b562 <lfs_mount+0x6a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800b5e4:	9b05      	ldr	r3, [sp, #20]
 800b5e6:	0c1a      	lsrs	r2, r3, #16
 800b5e8:	b291      	uxth	r1, r2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800b5ea:	b298      	uxth	r0, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800b5ec:	2902      	cmp	r1, #2
 800b5ee:	d197      	bne.n	800b520 <lfs_mount+0x28>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d195      	bne.n	800b520 <lfs_mount+0x28>
            if (superblock.name_max) {
 800b5f4:	9a08      	ldr	r2, [sp, #32]
 800b5f6:	b11a      	cbz	r2, 800b600 <lfs_mount+0x108>
                if (superblock.name_max > lfs->name_max) {
 800b5f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d899      	bhi.n	800b532 <lfs_mount+0x3a>
                lfs->name_max = superblock.name_max;
 800b5fe:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 800b600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b602:	b11a      	cbz	r2, 800b60c <lfs_mount+0x114>
                if (superblock.file_max > lfs->file_max) {
 800b604:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b606:	429a      	cmp	r2, r3
 800b608:	d89b      	bhi.n	800b542 <lfs_mount+0x4a>
                lfs->file_max = superblock.file_max;
 800b60a:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 800b60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60e:	2a00      	cmp	r2, #0
 800b610:	d0a9      	beq.n	800b566 <lfs_mount+0x6e>
                if (superblock.attr_max > lfs->attr_max) {
 800b612:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b614:	429a      	cmp	r2, r3
 800b616:	d89c      	bhi.n	800b552 <lfs_mount+0x5a>
                lfs->attr_max = superblock.attr_max;
 800b618:	6762      	str	r2, [r4, #116]	; 0x74
 800b61a:	e7a4      	b.n	800b566 <lfs_mount+0x6e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e7b4      	b.n	800b58a <lfs_mount+0x92>
 800b620:	2301      	movs	r3, #1
 800b622:	e7b2      	b.n	800b58a <lfs_mount+0x92>
 800b624:	6a23      	ldr	r3, [r4, #32]
 800b626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62a:	d027      	beq.n	800b67c <lfs_mount+0x184>
 800b62c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b632:	d021      	beq.n	800b678 <lfs_mount+0x180>
 800b634:	462b      	mov	r3, r5
    if (lfs_pair_isnull(lfs->root)) {
 800b636:	f013 0f01 	tst.w	r3, #1
 800b63a:	d133      	bne.n	800b6a4 <lfs_mount+0x1ac>
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 800b63c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b63e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b642:	63e3      	str	r3, [r4, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 800b644:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800b648:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800b64c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b64e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return (tag & 0x70000000) >> 20;
 800b652:	0d02      	lsrs	r2, r0, #20
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 800b654:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800b658:	d112      	bne.n	800b680 <lfs_mount+0x188>
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 800b65a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b65c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b65e:	69da      	ldr	r2, [r3, #28]
 800b660:	fbb1 f3f2 	udiv	r3, r1, r2
 800b664:	fb02 1313 	mls	r3, r2, r3, r1
 800b668:	6563      	str	r3, [r4, #84]	; 0x54
    lfs->free.size = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	65a3      	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
 800b66e:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800b670:	4620      	mov	r0, r4
 800b672:	f7fe fb79 	bl	8009d68 <lfs_alloc_ack>
    return 0;
 800b676:	e012      	b.n	800b69e <lfs_mount+0x1a6>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b678:	2301      	movs	r3, #1
 800b67a:	e7dc      	b.n	800b636 <lfs_mount+0x13e>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e7da      	b.n	800b636 <lfs_mount+0x13e>
    return (tag & 0x000ffc00) >> 10;
 800b680:	f3c0 2389 	ubfx	r3, r0, #10, #10
        LFS_DEBUG("Found move %"PRIu32" %"PRIu32" %"PRIu16,
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b688:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b68a:	f640 5179 	movw	r1, #3449	; 0xd79
 800b68e:	4811      	ldr	r0, [pc, #68]	; (800b6d4 <lfs_mount+0x1dc>)
 800b690:	f002 fb42 	bl	800dd18 <iprintf>
 800b694:	e7e1      	b.n	800b65a <lfs_mount+0x162>
            err = tag;
 800b696:	4605      	mov	r5, r0
    lfs_unmount(lfs);
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff ff29 	bl	800b4f0 <lfs_unmount>
}
 800b69e:	4628      	mov	r0, r5
 800b6a0:	b017      	add	sp, #92	; 0x5c
 800b6a2:	bd30      	pop	{r4, r5, pc}
        err = LFS_ERR_INVAL;
 800b6a4:	f06f 0515 	mvn.w	r5, #21
 800b6a8:	e7f6      	b.n	800b698 <lfs_mount+0x1a0>
            return err;
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	e7f7      	b.n	800b69e <lfs_mount+0x1a6>
 800b6ae:	bf00      	nop
 800b6b0:	0800f3c4 	.word	0x0800f3c4
 800b6b4:	0800f3ec 	.word	0x0800f3ec
 800b6b8:	0800f41c 	.word	0x0800f41c
 800b6bc:	0800f44c 	.word	0x0800f44c
 800b6c0:	0800f3b8 	.word	0x0800f3b8
 800b6c4:	0800a04d 	.word	0x0800a04d
 800b6c8:	0ff00008 	.word	0x0ff00008
 800b6cc:	7ffffc00 	.word	0x7ffffc00
 800b6d0:	20100018 	.word	0x20100018
 800b6d4:	0800f47c 	.word	0x0800f47c

0800b6d8 <lfs_fs_traverse>:
        int (*cb)(void *data, lfs_block_t block), void *data) {
 800b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6da:	b08f      	sub	sp, #60	; 0x3c
 800b6dc:	4605      	mov	r5, r0
 800b6de:	460e      	mov	r6, r1
 800b6e0:	4617      	mov	r7, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9306      	str	r3, [sp, #24]
 800b6e6:	9307      	str	r3, [sp, #28]
 800b6e8:	9308      	str	r3, [sp, #32]
 800b6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ec:	930a      	str	r3, [sp, #40]	; 0x28
 800b6ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6f0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fc:	d04e      	beq.n	800b79c <lfs_fs_traverse+0xc4>
 800b6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d048      	beq.n	800b798 <lfs_fs_traverse+0xc0>
 800b706:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d149      	bne.n	800b7a0 <lfs_fs_traverse+0xc8>
        for (int i = 0; i < 2; i++) {
 800b70c:	2400      	movs	r4, #0
 800b70e:	2c01      	cmp	r4, #1
 800b710:	dc0b      	bgt.n	800b72a <lfs_fs_traverse+0x52>
            int err = cb(data, dir.tail[i]);
 800b712:	1da3      	adds	r3, r4, #6
 800b714:	aa0e      	add	r2, sp, #56	; 0x38
 800b716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b71a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800b71e:	4638      	mov	r0, r7
 800b720:	47b0      	blx	r6
            if (err) {
 800b722:	4603      	mov	r3, r0
 800b724:	b968      	cbnz	r0, 800b742 <lfs_fs_traverse+0x6a>
        for (int i = 0; i < 2; i++) {
 800b726:	3401      	adds	r4, #1
 800b728:	e7f1      	b.n	800b70e <lfs_fs_traverse+0x36>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800b72a:	aa0c      	add	r2, sp, #48	; 0x30
 800b72c:	a906      	add	r1, sp, #24
 800b72e:	4628      	mov	r0, r5
 800b730:	f7fe ff56 	bl	800a5e0 <lfs_dir_fetch>
        if (err) {
 800b734:	4603      	mov	r3, r0
 800b736:	b920      	cbnz	r0, 800b742 <lfs_fs_traverse+0x6a>
        for (uint16_t id = 0; id < dir.count; id++) {
 800b738:	2400      	movs	r4, #0
 800b73a:	e007      	b.n	800b74c <lfs_fs_traverse+0x74>
                if (tag == LFS_ERR_NOENT) {
 800b73c:	f113 0f02 	cmn.w	r3, #2
 800b740:	d002      	beq.n	800b748 <lfs_fs_traverse+0x70>
}
 800b742:	4618      	mov	r0, r3
 800b744:	b00f      	add	sp, #60	; 0x3c
 800b746:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (uint16_t id = 0; id < dir.count; id++) {
 800b748:	3401      	adds	r4, #1
 800b74a:	b2a4      	uxth	r4, r4
 800b74c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b750:	42a3      	cmp	r3, r4
 800b752:	d9d0      	bls.n	800b6f6 <lfs_fs_traverse+0x1e>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800b754:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b756:	aa04      	add	r2, sp, #16
 800b758:	9200      	str	r2, [sp, #0]
 800b75a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b75e:	f043 0308 	orr.w	r3, r3, #8
 800b762:	4a28      	ldr	r2, [pc, #160]	; (800b804 <lfs_fs_traverse+0x12c>)
 800b764:	a906      	add	r1, sp, #24
 800b766:	4628      	mov	r0, r5
 800b768:	f7ff f964 	bl	800aa34 <lfs_dir_get>
            if (tag < 0) {
 800b76c:	1e03      	subs	r3, r0, #0
 800b76e:	dbe5      	blt.n	800b73c <lfs_fs_traverse+0x64>
    return (tag & 0x7ff00000) >> 20;
 800b770:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800b774:	f240 2202 	movw	r2, #514	; 0x202
 800b778:	4293      	cmp	r3, r2
 800b77a:	d1e5      	bne.n	800b748 <lfs_fs_traverse+0x70>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800b77c:	9702      	str	r7, [sp, #8]
 800b77e:	9601      	str	r6, [sp, #4]
 800b780:	9b05      	ldr	r3, [sp, #20]
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	462a      	mov	r2, r5
 800b788:	2100      	movs	r1, #0
 800b78a:	4628      	mov	r0, r5
 800b78c:	f7ff fd10 	bl	800b1b0 <lfs_ctz_traverse>
                if (err) {
 800b790:	4603      	mov	r3, r0
 800b792:	2800      	cmp	r0, #0
 800b794:	d0d8      	beq.n	800b748 <lfs_fs_traverse+0x70>
 800b796:	e7d4      	b.n	800b742 <lfs_fs_traverse+0x6a>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b798:	2301      	movs	r3, #1
 800b79a:	e7b5      	b.n	800b708 <lfs_fs_traverse+0x30>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e7b3      	b.n	800b708 <lfs_fs_traverse+0x30>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800b7a0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800b7a2:	e00e      	b.n	800b7c2 <lfs_fs_traverse+0xea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800b7a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7a8:	9702      	str	r7, [sp, #8]
 800b7aa:	9601      	str	r6, [sp, #4]
 800b7ac:	9200      	str	r2, [sp, #0]
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f7ff fcfb 	bl	800b1b0 <lfs_ctz_traverse>
            if (err) {
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b158      	cbz	r0, 800b7d6 <lfs_fs_traverse+0xfe>
 800b7be:	e7c0      	b.n	800b742 <lfs_fs_traverse+0x6a>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800b7c0:	6824      	ldr	r4, [r4, #0]
 800b7c2:	b1ec      	cbz	r4, 800b800 <lfs_fs_traverse+0x128>
        if (f->type != LFS_TYPE_REG) {
 800b7c4:	79a3      	ldrb	r3, [r4, #6]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d1fa      	bne.n	800b7c0 <lfs_fs_traverse+0xe8>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800b7ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b7cc:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	d0e6      	beq.n	800b7a4 <lfs_fs_traverse+0xcc>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800b7d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b7d8:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 800b7dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7e0:	d1ee      	bne.n	800b7c0 <lfs_fs_traverse+0xe8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800b7e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b7e6:	9702      	str	r7, [sp, #8]
 800b7e8:	9601      	str	r6, [sp, #4]
 800b7ea:	9200      	str	r2, [sp, #0]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f7ff fcdc 	bl	800b1b0 <lfs_ctz_traverse>
            if (err) {
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0e0      	beq.n	800b7c0 <lfs_fs_traverse+0xe8>
 800b7fe:	e7a0      	b.n	800b742 <lfs_fs_traverse+0x6a>
    return 0;
 800b800:	2300      	movs	r3, #0
 800b802:	e79e      	b.n	800b742 <lfs_fs_traverse+0x6a>
 800b804:	700ffc00 	.word	0x700ffc00

0800b808 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	4604      	mov	r4, r0
 800b80c:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
 800b80e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b810:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b812:	4293      	cmp	r3, r2
 800b814:	d02d      	beq.n	800b872 <lfs_alloc+0x6a>
            lfs->free.i += 1;
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
 800b81a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b81c:	3a01      	subs	r2, #1
 800b81e:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800b820:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b822:	0959      	lsrs	r1, r3, #5
 800b824:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800b828:	f003 001f 	and.w	r0, r3, #31
 800b82c:	2201      	movs	r2, #1
 800b82e:	4082      	lsls	r2, r0
 800b830:	4211      	tst	r1, r2
 800b832:	d1ec      	bne.n	800b80e <lfs_alloc+0x6>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800b834:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b836:	4413      	add	r3, r2
 800b838:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b83a:	6a11      	ldr	r1, [r2, #32]
 800b83c:	fbb3 f2f1 	udiv	r2, r3, r1
 800b840:	fb01 3312 	mls	r3, r1, r2, r3
 800b844:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
 800b846:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b848:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d03b      	beq.n	800b8c6 <lfs_alloc+0xbe>
                        (lfs->free.buffer[lfs->free.i / 32]
 800b84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b850:	0959      	lsrs	r1, r3, #5
 800b852:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
 800b856:	f003 001f 	and.w	r0, r3, #31
 800b85a:	2201      	movs	r2, #1
 800b85c:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
 800b85e:	4211      	tst	r1, r2
 800b860:	d005      	beq.n	800b86e <lfs_alloc+0x66>
                    lfs->free.i += 1;
 800b862:	3301      	adds	r3, #1
 800b864:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800b866:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b868:	3b01      	subs	r3, #1
 800b86a:	6623      	str	r3, [r4, #96]	; 0x60
 800b86c:	e7eb      	b.n	800b846 <lfs_alloc+0x3e>
                return 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	e02a      	b.n	800b8c8 <lfs_alloc+0xc0>
        if (lfs->free.ack == 0) {
 800b872:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b874:	b1e9      	cbz	r1, 800b8b2 <lfs_alloc+0xaa>
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b876:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b878:	441a      	add	r2, r3
                % lfs->cfg->block_count;
 800b87a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b87c:	6a1e      	ldr	r6, [r3, #32]
 800b87e:	fbb2 f0f6 	udiv	r0, r2, r6
 800b882:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b886:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800b888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88a:	00d2      	lsls	r2, r2, #3
 800b88c:	4291      	cmp	r1, r2
 800b88e:	bf28      	it	cs
 800b890:	4611      	movcs	r1, r2
 800b892:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800b894:	2100      	movs	r1, #0
 800b896:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b89c:	f001 fec8 	bl	800d630 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	490a      	ldr	r1, [pc, #40]	; (800b8cc <lfs_alloc+0xc4>)
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f7ff ff17 	bl	800b6d8 <lfs_fs_traverse>
        if (err) {
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d0ae      	beq.n	800b80e <lfs_alloc+0x6>
 800b8b0:	e00a      	b.n	800b8c8 <lfs_alloc+0xc0>
            LFS_WARN("No more free space %"PRIu32,
 800b8b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b8b4:	441a      	add	r2, r3
 800b8b6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800b8ba:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <lfs_alloc+0xc8>)
 800b8bc:	f002 fa2c 	bl	800dd18 <iprintf>
            return LFS_ERR_NOSPC;
 800b8c0:	f06f 031b 	mvn.w	r3, #27
 800b8c4:	e000      	b.n	800b8c8 <lfs_alloc+0xc0>
                return 0;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	08009d35 	.word	0x08009d35
 800b8d0:	0800ef18 	.word	0x0800ef18

0800b8d4 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	4606      	mov	r6, r0
 800b8da:	460d      	mov	r5, r1
    for (int i = 0; i < 2; i++) {
 800b8dc:	2400      	movs	r4, #0
 800b8de:	2c01      	cmp	r4, #1
 800b8e0:	dc0d      	bgt.n	800b8fe <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800b8e2:	3401      	adds	r4, #1
 800b8e4:	f004 0101 	and.w	r1, r4, #1
 800b8e8:	bf48      	it	mi
 800b8ea:	4249      	negmi	r1, r1
 800b8ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7ff ff89 	bl	800b808 <lfs_alloc>
        if (err) {
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d0f0      	beq.n	800b8de <lfs_dir_alloc+0xa>
 800b8fc:	e021      	b.n	800b942 <lfs_dir_alloc+0x6e>
    int err = lfs_bd_read(lfs,
 800b8fe:	462a      	mov	r2, r5
 800b900:	f852 0b08 	ldr.w	r0, [r2], #8
 800b904:	2304      	movs	r3, #4
 800b906:	9303      	str	r3, [sp, #12]
 800b908:	9202      	str	r2, [sp, #8]
 800b90a:	2100      	movs	r1, #0
 800b90c:	9101      	str	r1, [sp, #4]
 800b90e:	9000      	str	r0, [sp, #0]
 800b910:	4632      	mov	r2, r6
 800b912:	4630      	mov	r0, r6
 800b914:	f7fe fa94 	bl	8009e40 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 800b918:	68aa      	ldr	r2, [r5, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800b91a:	4603      	mov	r3, r0
 800b91c:	b110      	cbz	r0, 800b924 <lfs_dir_alloc+0x50>
 800b91e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800b922:	d10e      	bne.n	800b942 <lfs_dir_alloc+0x6e>
    dir->rev += dir->rev & 1;
 800b924:	3201      	adds	r2, #1
 800b926:	f022 0201 	bic.w	r2, r2, #1
 800b92a:	60aa      	str	r2, [r5, #8]
    dir->off = sizeof(dir->rev);
 800b92c:	2304      	movs	r3, #4
 800b92e:	60eb      	str	r3, [r5, #12]
    dir->etag = 0xffffffff;
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	612a      	str	r2, [r5, #16]
    dir->count = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	82ab      	strh	r3, [r5, #20]
    dir->tail[0] = 0xffffffff;
 800b93a:	61aa      	str	r2, [r5, #24]
    dir->tail[1] = 0xffffffff;
 800b93c:	61ea      	str	r2, [r5, #28]
    dir->erased = false;
 800b93e:	75ab      	strb	r3, [r5, #22]
    dir->split = false;
 800b940:	75eb      	strb	r3, [r5, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	b004      	add	sp, #16
 800b946:	bd70      	pop	{r4, r5, r6, pc}

0800b948 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800b948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b94a:	b089      	sub	sp, #36	; 0x24
 800b94c:	4605      	mov	r5, r0
 800b94e:	460e      	mov	r6, r1
 800b950:	e050      	b.n	800b9f4 <lfs_file_relocate+0xac>
                err = lfs_bd_read(lfs,
 800b952:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800b954:	2101      	movs	r1, #1
 800b956:	9103      	str	r1, [sp, #12]
 800b958:	f10d 011b 	add.w	r1, sp, #27
 800b95c:	9102      	str	r1, [sp, #8]
 800b95e:	9401      	str	r4, [sp, #4]
 800b960:	9200      	str	r2, [sp, #0]
 800b962:	1b1b      	subs	r3, r3, r4
 800b964:	462a      	mov	r2, r5
 800b966:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800b96a:	4628      	mov	r0, r5
 800b96c:	f7fe fa68 	bl	8009e40 <lfs_bd_read>
                if (err) {
 800b970:	2800      	cmp	r0, #0
 800b972:	d151      	bne.n	800ba18 <lfs_file_relocate+0xd0>
            err = lfs_bd_prog(lfs,
 800b974:	2301      	movs	r3, #1
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	f10d 021b 	add.w	r2, sp, #27
 800b97c:	9202      	str	r2, [sp, #8]
 800b97e:	9401      	str	r4, [sp, #4]
 800b980:	9a07      	ldr	r2, [sp, #28]
 800b982:	9200      	str	r2, [sp, #0]
 800b984:	462a      	mov	r2, r5
 800b986:	f105 0110 	add.w	r1, r5, #16
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7ff f972 	bl	800ac74 <lfs_bd_prog>
            if (err) {
 800b990:	bb20      	cbnz	r0, 800b9dc <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800b992:	3401      	adds	r4, #1
 800b994:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800b996:	42a3      	cmp	r3, r4
 800b998:	d942      	bls.n	800ba20 <lfs_file_relocate+0xd8>
            if (file->flags & LFS_F_INLINE) {
 800b99a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800b99c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800b9a0:	d0d7      	beq.n	800b952 <lfs_file_relocate+0xa>
                err = lfs_dir_getread(lfs, &file->m,
 800b9a2:	1b1b      	subs	r3, r3, r4
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800b9a4:	88b2      	ldrh	r2, [r6, #4]
 800b9a6:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 800b9a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b9ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	9105      	str	r1, [sp, #20]
 800b9b4:	f10d 011b 	add.w	r1, sp, #27
 800b9b8:	9104      	str	r1, [sp, #16]
 800b9ba:	9403      	str	r4, [sp, #12]
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	4a28      	ldr	r2, [pc, #160]	; (800ba60 <lfs_file_relocate+0x118>)
 800b9c0:	9201      	str	r2, [sp, #4]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	f106 0340 	add.w	r3, r6, #64	; 0x40
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f106 0108 	add.w	r1, r6, #8
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f7ff f868 	bl	800aaa4 <lfs_dir_getread>
                if (err) {
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d0cd      	beq.n	800b974 <lfs_file_relocate+0x2c>
                    return err;
 800b9d8:	4607      	mov	r7, r0
 800b9da:	e03e      	b.n	800ba5a <lfs_file_relocate+0x112>
                if (err == LFS_ERR_CORRUPT) {
 800b9dc:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800b9e0:	d118      	bne.n	800ba14 <lfs_file_relocate+0xcc>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800b9e2:	9a07      	ldr	r2, [sp, #28]
 800b9e4:	f44f 611b 	mov.w	r1, #2480	; 0x9b0
 800b9e8:	481e      	ldr	r0, [pc, #120]	; (800ba64 <lfs_file_relocate+0x11c>)
 800b9ea:	f002 f995 	bl	800dd18 <iprintf>
    rcache->block = 0xffffffff;
 800b9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f2:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 800b9f4:	a907      	add	r1, sp, #28
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f7ff ff06 	bl	800b808 <lfs_alloc>
        if (err) {
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	bb60      	cbnz	r0, 800ba5a <lfs_file_relocate+0x112>
        err = lfs_bd_erase(lfs, nblock);
 800ba00:	9907      	ldr	r1, [sp, #28]
 800ba02:	4628      	mov	r0, r5
 800ba04:	f7fe fa08 	bl	8009e18 <lfs_bd_erase>
        if (err) {
 800ba08:	4607      	mov	r7, r0
 800ba0a:	b138      	cbz	r0, 800ba1c <lfs_file_relocate+0xd4>
            if (err == LFS_ERR_CORRUPT) {
 800ba0c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800ba10:	d0e7      	beq.n	800b9e2 <lfs_file_relocate+0x9a>
 800ba12:	e022      	b.n	800ba5a <lfs_file_relocate+0x112>
                return err;
 800ba14:	4607      	mov	r7, r0
 800ba16:	e020      	b.n	800ba5a <lfs_file_relocate+0x112>
                    return err;
 800ba18:	4607      	mov	r7, r0
 800ba1a:	e01e      	b.n	800ba5a <lfs_file_relocate+0x112>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800ba1c:	2400      	movs	r4, #0
 800ba1e:	e7b9      	b.n	800b994 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800ba20:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ba22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba24:	69e9      	ldr	r1, [r5, #28]
 800ba26:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800ba28:	f001 fdf7 	bl	800d61a <memcpy>
        file->cache.block = lfs->pcache.block;
 800ba2c:	692b      	ldr	r3, [r5, #16]
 800ba2e:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800ba30:	696b      	ldr	r3, [r5, #20]
 800ba32:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800ba34:	69ab      	ldr	r3, [r5, #24]
 800ba36:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800ba38:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ba3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba3c:	21ff      	movs	r1, #255	; 0xff
 800ba3e:	69e8      	ldr	r0, [r5, #28]
 800ba40:	f001 fdf6 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
 800ba48:	612b      	str	r3, [r5, #16]
        file->block = nblock;
 800ba4a:	9b07      	ldr	r3, [sp, #28]
 800ba4c:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags &= ~LFS_F_INLINE;
 800ba4e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ba50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
        file->flags |= LFS_F_WRITING;
 800ba54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba58:	6333      	str	r3, [r6, #48]	; 0x30
}
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	b009      	add	sp, #36	; 0x24
 800ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba60:	fff7fc00 	.word	0xfff7fc00
 800ba64:	0800f124 	.word	0x0800f124

0800ba68 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	b089      	sub	sp, #36	; 0x24
 800ba6e:	4604      	mov	r4, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	4616      	mov	r6, r2
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	e04f      	b.n	800bb18 <lfs_ctz_extend+0xb0>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800ba78:	4b5f      	ldr	r3, [pc, #380]	; (800bbf8 <lfs_ctz_extend+0x190>)
 800ba7a:	4a60      	ldr	r2, [pc, #384]	; (800bbfc <lfs_ctz_extend+0x194>)
 800ba7c:	f640 013e 	movw	r1, #2110	; 0x83e
 800ba80:	485f      	ldr	r0, [pc, #380]	; (800bc00 <lfs_ctz_extend+0x198>)
 800ba82:	f001 fd57 	bl	800d534 <__assert_func>
            if (size == 0) {
 800ba86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d032      	beq.n	800baf2 <lfs_ctz_extend+0x8a>
            size -= 1;
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	9312      	str	r3, [sp, #72]	; 0x48
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 800ba90:	a912      	add	r1, sp, #72	; 0x48
 800ba92:	4620      	mov	r0, r4
 800ba94:	f7ff fb6f 	bl	800b176 <lfs_ctz_index>
            size += 1;
 800ba98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	9312      	str	r3, [sp, #72]	; 0x48
            if (size != lfs->cfg->block_size) {
 800ba9e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800baa0:	69d2      	ldr	r2, [r2, #28]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d05b      	beq.n	800bb5e <lfs_ctz_extend+0xf6>
                for (lfs_off_t i = 0; i < size; i++) {
 800baa6:	2500      	movs	r5, #0
 800baa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800baaa:	42ab      	cmp	r3, r5
 800baac:	d94d      	bls.n	800bb4a <lfs_ctz_extend+0xe2>
                    err = lfs_bd_read(lfs,
 800baae:	2201      	movs	r2, #1
 800bab0:	9203      	str	r2, [sp, #12]
 800bab2:	f10d 021b 	add.w	r2, sp, #27
 800bab6:	9202      	str	r2, [sp, #8]
 800bab8:	9501      	str	r5, [sp, #4]
 800baba:	9a05      	ldr	r2, [sp, #20]
 800babc:	9200      	str	r2, [sp, #0]
 800babe:	1b5b      	subs	r3, r3, r5
 800bac0:	4632      	mov	r2, r6
 800bac2:	2100      	movs	r1, #0
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7fe f9bb 	bl	8009e40 <lfs_bd_read>
                    if (err) {
 800baca:	4603      	mov	r3, r0
 800bacc:	2800      	cmp	r0, #0
 800bace:	d13a      	bne.n	800bb46 <lfs_ctz_extend+0xde>
                    err = lfs_bd_prog(lfs,
 800bad0:	2301      	movs	r3, #1
 800bad2:	9303      	str	r3, [sp, #12]
 800bad4:	f10d 021b 	add.w	r2, sp, #27
 800bad8:	9202      	str	r2, [sp, #8]
 800bada:	9501      	str	r5, [sp, #4]
 800badc:	9a07      	ldr	r2, [sp, #28]
 800bade:	9200      	str	r2, [sp, #0]
 800bae0:	4632      	mov	r2, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7ff f8c5 	bl	800ac74 <lfs_bd_prog>
                    if (err) {
 800baea:	4603      	mov	r3, r0
 800baec:	b940      	cbnz	r0, 800bb00 <lfs_ctz_extend+0x98>
                for (lfs_off_t i = 0; i < size; i++) {
 800baee:	3501      	adds	r5, #1
 800baf0:	e7da      	b.n	800baa8 <lfs_ctz_extend+0x40>
                *block = nblock;
 800baf2:	9b07      	ldr	r3, [sp, #28]
 800baf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baf6:	6013      	str	r3, [r2, #0]
                *off = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bafc:	6013      	str	r3, [r2, #0]
                return 0;
 800bafe:	e02a      	b.n	800bb56 <lfs_ctz_extend+0xee>
                        if (err == LFS_ERR_CORRUPT) {
 800bb00:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bb04:	d11f      	bne.n	800bb46 <lfs_ctz_extend+0xde>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800bb06:	9a07      	ldr	r2, [sp, #28]
 800bb08:	f640 0191 	movw	r1, #2193	; 0x891
 800bb0c:	483d      	ldr	r0, [pc, #244]	; (800bc04 <lfs_ctz_extend+0x19c>)
 800bb0e:	f002 f903 	bl	800dd18 <iprintf>
    rcache->block = 0xffffffff;
 800bb12:	f04f 33ff 	mov.w	r3, #4294967295
 800bb16:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 800bb18:	a907      	add	r1, sp, #28
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7ff fe74 	bl	800b808 <lfs_alloc>
        if (err) {
 800bb20:	4680      	mov	r8, r0
 800bb22:	b9c0      	cbnz	r0, 800bb56 <lfs_ctz_extend+0xee>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800bb24:	9907      	ldr	r1, [sp, #28]
 800bb26:	2901      	cmp	r1, #1
 800bb28:	d9a6      	bls.n	800ba78 <lfs_ctz_extend+0x10>
 800bb2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	4299      	cmp	r1, r3
 800bb30:	d8a2      	bhi.n	800ba78 <lfs_ctz_extend+0x10>
            err = lfs_bd_erase(lfs, nblock);
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7fe f970 	bl	8009e18 <lfs_bd_erase>
            if (err) {
 800bb38:	4680      	mov	r8, r0
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0a3      	beq.n	800ba86 <lfs_ctz_extend+0x1e>
                if (err == LFS_ERR_CORRUPT) {
 800bb3e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bb42:	d0e0      	beq.n	800bb06 <lfs_ctz_extend+0x9e>
 800bb44:	e007      	b.n	800bb56 <lfs_ctz_extend+0xee>
                        return err;
 800bb46:	4698      	mov	r8, r3
 800bb48:	e005      	b.n	800bb56 <lfs_ctz_extend+0xee>
                *block = nblock;
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb4e:	6013      	str	r3, [r2, #0]
                *off = size;
 800bb50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb54:	6013      	str	r3, [r2, #0]
}
 800bb56:	4640      	mov	r0, r8
 800bb58:	b009      	add	sp, #36	; 0x24
 800bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 800bb5e:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 800bb60:	fa90 faa0 	rbit	sl, r0
 800bb64:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
 800bb68:	f10a 0b01 	add.w	fp, sl, #1
            for (lfs_off_t i = 0; i < skips; i++) {
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	e00c      	b.n	800bb8a <lfs_ctz_extend+0x122>
                    if (err == LFS_ERR_CORRUPT) {
 800bb70:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bb74:	d0c7      	beq.n	800bb06 <lfs_ctz_extend+0x9e>
                    return err;
 800bb76:	4680      	mov	r8, r0
 800bb78:	e7ed      	b.n	800bb56 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800bb7a:	9b05      	ldr	r3, [sp, #20]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d92b      	bls.n	800bbd8 <lfs_ctz_extend+0x170>
 800bb80:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bb82:	6a12      	ldr	r2, [r2, #32]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d827      	bhi.n	800bbd8 <lfs_ctz_extend+0x170>
            for (lfs_off_t i = 0; i < skips; i++) {
 800bb88:	3501      	adds	r5, #1
 800bb8a:	455d      	cmp	r5, fp
 800bb8c:	d22b      	bcs.n	800bbe6 <lfs_ctz_extend+0x17e>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800bb8e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800bb92:	2304      	movs	r3, #4
 800bb94:	9303      	str	r3, [sp, #12]
 800bb96:	ab05      	add	r3, sp, #20
 800bb98:	9302      	str	r3, [sp, #8]
 800bb9a:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb9e:	9b07      	ldr	r3, [sp, #28]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	2301      	movs	r3, #1
 800bba4:	4632      	mov	r2, r6
 800bba6:	4639      	mov	r1, r7
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff f863 	bl	800ac74 <lfs_bd_prog>
                head = lfs_fromle32(head);
 800bbae:	9a05      	ldr	r2, [sp, #20]
                if (err) {
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1dd      	bne.n	800bb70 <lfs_ctz_extend+0x108>
                if (i != skips-1) {
 800bbb4:	4555      	cmp	r5, sl
 800bbb6:	d0e0      	beq.n	800bb7a <lfs_ctz_extend+0x112>
                    err = lfs_bd_read(lfs,
 800bbb8:	2304      	movs	r3, #4
 800bbba:	9303      	str	r3, [sp, #12]
 800bbbc:	a905      	add	r1, sp, #20
 800bbbe:	9102      	str	r1, [sp, #8]
 800bbc0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbc4:	9200      	str	r2, [sp, #0]
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f7fe f938 	bl	8009e40 <lfs_bd_read>
                    if (err) {
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d0d2      	beq.n	800bb7a <lfs_ctz_extend+0x112>
                        return err;
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	e7be      	b.n	800bb56 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <lfs_ctz_extend+0x1a0>)
 800bbda:	4a08      	ldr	r2, [pc, #32]	; (800bbfc <lfs_ctz_extend+0x194>)
 800bbdc:	f640 0188 	movw	r1, #2184	; 0x888
 800bbe0:	4807      	ldr	r0, [pc, #28]	; (800bc00 <lfs_ctz_extend+0x198>)
 800bbe2:	f001 fca7 	bl	800d534 <__assert_func>
            *block = nblock;
 800bbe6:	9b07      	ldr	r3, [sp, #28]
 800bbe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbea:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 800bbec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bbf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbf2:	6013      	str	r3, [r2, #0]
            return 0;
 800bbf4:	e7af      	b.n	800bb56 <lfs_ctz_extend+0xee>
 800bbf6:	bf00      	nop
 800bbf8:	0800efec 	.word	0x0800efec
 800bbfc:	0800eef0 	.word	0x0800eef0
 800bc00:	0800ef40 	.word	0x0800ef40
 800bc04:	0800f124 	.word	0x0800f124
 800bc08:	0800f01c 	.word	0x0800f01c

0800bc0c <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
 800bc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc10:	b087      	sub	sp, #28
 800bc12:	4617      	mov	r7, r2
 800bc14:	4699      	mov	r9, r3
    if ((file->flags & 3) == LFS_O_RDONLY) {
 800bc16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800bc18:	f003 0203 	and.w	r2, r3, #3
 800bc1c:	2a01      	cmp	r2, #1
 800bc1e:	f000 80f3 	beq.w	800be08 <lfs_file_write+0x1fc>
 800bc22:	4605      	mov	r5, r0
 800bc24:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 800bc26:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800bc2a:	d125      	bne.n	800bc78 <lfs_file_write+0x6c>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800bc2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc2e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800bc32:	d004      	beq.n	800bc3e <lfs_file_write+0x32>
 800bc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc38:	4291      	cmp	r1, r2
 800bc3a:	d200      	bcs.n	800bc3e <lfs_file_write+0x32>
        file->pos = file->ctz.size;
 800bc3c:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
 800bc3e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800bc40:	eb06 0109 	add.w	r1, r6, r9
 800bc44:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800bc46:	4291      	cmp	r1, r2
 800bc48:	f200 80e1 	bhi.w	800be0e <lfs_file_write+0x202>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800bc4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bc50:	d118      	bne.n	800bc84 <lfs_file_write+0x78>
 800bc52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc54:	429e      	cmp	r6, r3
 800bc56:	d915      	bls.n	800bc84 <lfs_file_write+0x78>
        file->pos = file->ctz.size;
 800bc58:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 800bc5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc5c:	429e      	cmp	r6, r3
 800bc5e:	d911      	bls.n	800bc84 <lfs_file_write+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 800bc60:	aa06      	add	r2, sp, #24
 800bc62:	2300      	movs	r3, #0
 800bc64:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f7ff ffcd 	bl	800bc0c <lfs_file_write>
            if (res < 0) {
 800bc72:	1e03      	subs	r3, r0, #0
 800bc74:	daf1      	bge.n	800bc5a <lfs_file_write+0x4e>
 800bc76:	e0b0      	b.n	800bdda <lfs_file_write+0x1ce>
        int err = lfs_file_flush(lfs, file);
 800bc78:	f000 f8cc 	bl	800be14 <lfs_file_flush>
        if (err) {
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d0d4      	beq.n	800bc2c <lfs_file_write+0x20>
 800bc82:	e0aa      	b.n	800bdda <lfs_file_write+0x1ce>
    if ((file->flags & LFS_F_INLINE) &&
 800bc84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc86:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bc8a:	d014      	beq.n	800bcb6 <lfs_file_write+0xaa>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800bc8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bc8e:	eb00 0209 	add.w	r2, r0, r9
 800bc92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
 800bc94:	429a      	cmp	r2, r3
 800bc96:	bf38      	it	cc
 800bc98:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800bc9a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800bc9c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800bc9e:	69c9      	ldr	r1, [r1, #28]
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800bca0:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
 800bca2:	428b      	cmp	r3, r1
 800bca4:	bf28      	it	cs
 800bca6:	460b      	movcs	r3, r1
 800bca8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800bcac:	428b      	cmp	r3, r1
 800bcae:	bf28      	it	cs
 800bcb0:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d82d      	bhi.n	800bd12 <lfs_file_write+0x106>
        const void *buffer, lfs_size_t size) {
 800bcb6:	46c8      	mov	r8, r9
    while (nsize > 0) {
 800bcb8:	f1b8 0f00 	cmp.w	r8, #0
 800bcbc:	f000 809e 	beq.w	800bdfc <lfs_file_write+0x1f0>
        if (!(file->flags & LFS_F_WRITING) ||
 800bcc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcc2:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
 800bcc6:	d004      	beq.n	800bcd2 <lfs_file_write+0xc6>
                file->off == lfs->cfg->block_size) {
 800bcc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bcca:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800bccc:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800bcce:	4288      	cmp	r0, r1
 800bcd0:	d15a      	bne.n	800bd88 <lfs_file_write+0x17c>
            if (!(file->flags & LFS_F_INLINE)) {
 800bcd2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bcd6:	d14e      	bne.n	800bd76 <lfs_file_write+0x16a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800bcd8:	b90a      	cbnz	r2, 800bcde <lfs_file_write+0xd2>
 800bcda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcdc:	bb4b      	cbnz	r3, 800bd32 <lfs_file_write+0x126>
                lfs_alloc_ack(lfs);
 800bcde:	4628      	mov	r0, r5
 800bce0:	f7fe f842 	bl	8009d68 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800bce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bce6:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800bcea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bcee:	9102      	str	r1, [sp, #8]
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7ff feb3 	bl	800ba68 <lfs_ctz_extend>
                if (err) {
 800bd02:	4603      	mov	r3, r0
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d03b      	beq.n	800bd80 <lfs_file_write+0x174>
                    file->flags |= LFS_F_ERRED;
 800bd08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bd0e:	6322      	str	r2, [r4, #48]	; 0x30
                    return err;
 800bd10:	e063      	b.n	800bdda <lfs_file_write+0x1ce>
        file->off = file->pos;
 800bd12:	63e0      	str	r0, [r4, #60]	; 0x3c
        lfs_alloc_ack(lfs);
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7fe f827 	bl	8009d68 <lfs_alloc_ack>
        int err = lfs_file_relocate(lfs, file);
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff fe13 	bl	800b948 <lfs_file_relocate>
        if (err) {
 800bd22:	4603      	mov	r3, r0
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d0c6      	beq.n	800bcb6 <lfs_file_write+0xaa>
            file->flags |= LFS_F_ERRED;
 800bd28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd2a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bd2e:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800bd30:	e053      	b.n	800bdda <lfs_file_write+0x1ce>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800bd32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bd34:	3b01      	subs	r3, #1
 800bd36:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800bd3a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800bd3e:	9003      	str	r0, [sp, #12]
 800bd40:	9102      	str	r1, [sp, #8]
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	9200      	str	r2, [sp, #0]
 800bd46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd48:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7ff fb6e 	bl	800b430 <lfs_ctz_find>
                    if (err) {
 800bd54:	4603      	mov	r3, r0
 800bd56:	b948      	cbnz	r0, 800bd6c <lfs_file_write+0x160>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800bd58:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800bd5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd5c:	21ff      	movs	r1, #255	; 0xff
 800bd5e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bd60:	f001 fc66 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	6423      	str	r3, [r4, #64]	; 0x40
 800bd6a:	e7b8      	b.n	800bcde <lfs_file_write+0xd2>
                        file->flags |= LFS_F_ERRED;
 800bd6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bd72:	6322      	str	r2, [r4, #48]	; 0x30
                        return err;
 800bd74:	e031      	b.n	800bdda <lfs_file_write+0x1ce>
                file->block = 0xfffffffe;
 800bd76:	f06f 0301 	mvn.w	r3, #1
 800bd7a:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800bd7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd7e:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 800bd80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd86:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800bd88:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800bd8a:	69de      	ldr	r6, [r3, #28]
 800bd8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd8e:	1af6      	subs	r6, r6, r3
 800bd90:	4546      	cmp	r6, r8
 800bd92:	bf28      	it	cs
 800bd94:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800bd96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bd9a:	9603      	str	r6, [sp, #12]
 800bd9c:	9702      	str	r7, [sp, #8]
 800bd9e:	9201      	str	r2, [sp, #4]
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	2301      	movs	r3, #1
 800bda4:	462a      	mov	r2, r5
 800bda6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f7fe ff62 	bl	800ac74 <lfs_bd_prog>
            if (err) {
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	b1b0      	cbz	r0, 800bde2 <lfs_file_write+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 800bdb4:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bdb8:	d10b      	bne.n	800bdd2 <lfs_file_write+0x1c6>
            err = lfs_file_relocate(lfs, file);
 800bdba:	4621      	mov	r1, r4
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f7ff fdc3 	bl	800b948 <lfs_file_relocate>
            if (err) {
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d0e6      	beq.n	800bd96 <lfs_file_write+0x18a>
                file->flags |= LFS_F_ERRED;
 800bdc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bdca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bdce:	6322      	str	r2, [r4, #48]	; 0x30
                return err;
 800bdd0:	e003      	b.n	800bdda <lfs_file_write+0x1ce>
                file->flags |= LFS_F_ERRED;
 800bdd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bdd4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800bdd8:	6322      	str	r2, [r4, #48]	; 0x30
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	b007      	add	sp, #28
 800bdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 800bde2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bde4:	4433      	add	r3, r6
 800bde6:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800bde8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdea:	4433      	add	r3, r6
 800bdec:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800bdee:	4437      	add	r7, r6
        nsize -= diff;
 800bdf0:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ack(lfs);
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f7fd ffb7 	bl	8009d68 <lfs_alloc_ack>
 800bdfa:	e75d      	b.n	800bcb8 <lfs_file_write+0xac>
    file->flags &= ~LFS_F_ERRED;
 800bdfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800be02:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
 800be04:	464b      	mov	r3, r9
 800be06:	e7e8      	b.n	800bdda <lfs_file_write+0x1ce>
        return LFS_ERR_BADF;
 800be08:	f06f 0308 	mvn.w	r3, #8
 800be0c:	e7e5      	b.n	800bdda <lfs_file_write+0x1ce>
        return LFS_ERR_FBIG;
 800be0e:	f06f 031a 	mvn.w	r3, #26
 800be12:	e7e2      	b.n	800bdda <lfs_file_write+0x1ce>

0800be14 <lfs_file_flush>:
    if (file->flags & LFS_F_READING) {
 800be14:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800be16:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800be1a:	d008      	beq.n	800be2e <lfs_file_flush+0x1a>
        if (!(file->flags & LFS_F_INLINE)) {
 800be1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800be20:	d102      	bne.n	800be28 <lfs_file_flush+0x14>
    rcache->block = 0xffffffff;
 800be22:	f04f 32ff 	mov.w	r2, #4294967295
 800be26:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 800be28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be2c:	630b      	str	r3, [r1, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 800be2e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800be30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800be34:	d064      	beq.n	800bf00 <lfs_file_flush+0xec>
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800be36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be38:	b097      	sub	sp, #92	; 0x5c
 800be3a:	460c      	mov	r4, r1
 800be3c:	4605      	mov	r5, r0
        lfs_off_t pos = file->pos;
 800be3e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 800be40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800be44:	d14d      	bne.n	800bee2 <lfs_file_flush+0xce>
            lfs_file_t orig = {
 800be46:	2254      	movs	r2, #84	; 0x54
 800be48:	2100      	movs	r1, #0
 800be4a:	a801      	add	r0, sp, #4
 800be4c:	f001 fbf0 	bl	800d630 <memset>
                .ctz.head = file->ctz.head,
 800be50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
 800be52:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
 800be54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
 800be56:	930c      	str	r3, [sp, #48]	; 0x30
 800be58:	2301      	movs	r3, #1
 800be5a:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
 800be5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
 800be5e:	930e      	str	r3, [sp, #56]	; 0x38
 800be60:	af11      	add	r7, sp, #68	; 0x44
 800be62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800be66:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = 0xffffffff;
 800be6a:	f04f 33ff 	mov.w	r3, #4294967295
 800be6e:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 800be70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800be72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be74:	429a      	cmp	r2, r3
 800be76:	d21a      	bcs.n	800beae <lfs_file_flush+0x9a>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 800be78:	2301      	movs	r3, #1
 800be7a:	f10d 0203 	add.w	r2, sp, #3
 800be7e:	a901      	add	r1, sp, #4
 800be80:	4628      	mov	r0, r5
 800be82:	f000 f843 	bl	800bf0c <lfs_file_read>
                if (res < 0) {
 800be86:	1e03      	subs	r3, r0, #0
 800be88:	db37      	blt.n	800befa <lfs_file_flush+0xe6>
                res = lfs_file_write(lfs, file, &data, 1);
 800be8a:	2301      	movs	r3, #1
 800be8c:	f10d 0203 	add.w	r2, sp, #3
 800be90:	4621      	mov	r1, r4
 800be92:	4628      	mov	r0, r5
 800be94:	f7ff feba 	bl	800bc0c <lfs_file_write>
                if (res < 0) {
 800be98:	1e03      	subs	r3, r0, #0
 800be9a:	db2e      	blt.n	800befa <lfs_file_flush+0xe6>
                if (lfs->rcache.block != 0xffffffff) {
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea2:	d0e5      	beq.n	800be70 <lfs_file_flush+0x5c>
    rcache->block = 0xffffffff;
 800bea4:	f04f 33ff 	mov.w	r3, #4294967295
 800bea8:	9311      	str	r3, [sp, #68]	; 0x44
 800beaa:	602b      	str	r3, [r5, #0]
 800beac:	e7e0      	b.n	800be70 <lfs_file_flush+0x5c>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800beae:	2301      	movs	r3, #1
 800beb0:	462a      	mov	r2, r5
 800beb2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800beb6:	4628      	mov	r0, r5
 800beb8:	f7fe fe84 	bl	800abc4 <lfs_bd_flush>
                if (err) {
 800bebc:	4603      	mov	r3, r0
 800bebe:	b180      	cbz	r0, 800bee2 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
 800bec0:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bec4:	d119      	bne.n	800befa <lfs_file_flush+0xe6>
                LFS_DEBUG("Bad block at %"PRIu32, file->block);
 800bec6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bec8:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800becc:	480e      	ldr	r0, [pc, #56]	; (800bf08 <lfs_file_flush+0xf4>)
 800bece:	f001 ff23 	bl	800dd18 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800bed2:	4621      	mov	r1, r4
 800bed4:	4628      	mov	r0, r5
 800bed6:	f7ff fd37 	bl	800b948 <lfs_file_relocate>
                if (err) {
 800beda:	4603      	mov	r3, r0
 800bedc:	2800      	cmp	r0, #0
 800bede:	d0e6      	beq.n	800beae <lfs_file_flush+0x9a>
 800bee0:	e00b      	b.n	800befa <lfs_file_flush+0xe6>
        file->ctz.head = file->block;
 800bee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bee4:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 800bee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bee8:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800beea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800beec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 800bef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bef4:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
 800bef6:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	b017      	add	sp, #92	; 0x5c
 800befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	0800f124 	.word	0x0800f124

0800bf0c <lfs_file_read>:
        void *buffer, lfs_size_t size) {
 800bf0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf10:	b087      	sub	sp, #28
 800bf12:	4617      	mov	r7, r2
 800bf14:	461d      	mov	r5, r3
    if ((file->flags & 3) == LFS_O_WRONLY) {
 800bf16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800bf18:	f003 0203 	and.w	r2, r3, #3
 800bf1c:	2a02      	cmp	r2, #2
 800bf1e:	f000 8081 	beq.w	800c024 <lfs_file_read+0x118>
 800bf22:	4680      	mov	r8, r0
 800bf24:	460c      	mov	r4, r1
    if (file->flags & LFS_F_WRITING) {
 800bf26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bf2a:	d10a      	bne.n	800bf42 <lfs_file_read+0x36>
    if (file->pos >= file->ctz.size) {
 800bf2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bf2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d27a      	bcs.n	800c02a <lfs_file_read+0x11e>
    size = lfs_min(size, file->ctz.size - file->pos);
 800bf34:	eba3 0902 	sub.w	r9, r3, r2
 800bf38:	45a9      	cmp	r9, r5
 800bf3a:	bf28      	it	cs
 800bf3c:	46a9      	movcs	r9, r5
    nsize = size;
 800bf3e:	464e      	mov	r6, r9
    while (nsize > 0) {
 800bf40:	e03d      	b.n	800bfbe <lfs_file_read+0xb2>
        int err = lfs_file_flush(lfs, file);
 800bf42:	f7ff ff67 	bl	800be14 <lfs_file_flush>
        if (err) {
 800bf46:	4603      	mov	r3, r0
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d0ef      	beq.n	800bf2c <lfs_file_read+0x20>
 800bf4c:	e06e      	b.n	800c02c <lfs_file_read+0x120>
            if (!(file->flags & LFS_F_INLINE)) {
 800bf4e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bf52:	d041      	beq.n	800bfd8 <lfs_file_read+0xcc>
                file->block = 0xfffffffe;
 800bf54:	f06f 0301 	mvn.w	r3, #1
 800bf58:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800bf5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf5c:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
 800bf5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf64:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800bf66:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf6e:	1a5d      	subs	r5, r3, r1
 800bf70:	42b5      	cmp	r5, r6
 800bf72:	bf28      	it	cs
 800bf74:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 800bf76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bf78:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800bf7c:	d041      	beq.n	800c002 <lfs_file_read+0xf6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800bf7e:	88a2      	ldrh	r2, [r4, #4]
 800bf80:	0292      	lsls	r2, r2, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800bf82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bf86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf8a:	9505      	str	r5, [sp, #20]
 800bf8c:	9704      	str	r7, [sp, #16]
 800bf8e:	9103      	str	r1, [sp, #12]
 800bf90:	9202      	str	r2, [sp, #8]
 800bf92:	4a28      	ldr	r2, [pc, #160]	; (800c034 <lfs_file_read+0x128>)
 800bf94:	9201      	str	r2, [sp, #4]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f104 0108 	add.w	r1, r4, #8
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7fe fd7e 	bl	800aaa4 <lfs_dir_getread>
            if (err) {
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d13e      	bne.n	800c02c <lfs_file_read+0x120>
        file->pos += diff;
 800bfae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfb0:	442b      	add	r3, r5
 800bfb2:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800bfb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfb6:	442b      	add	r3, r5
 800bfb8:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800bfba:	442f      	add	r7, r5
        nsize -= diff;
 800bfbc:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 800bfbe:	2e00      	cmp	r6, #0
 800bfc0:	d02e      	beq.n	800c020 <lfs_file_read+0x114>
        if (!(file->flags & LFS_F_READING) ||
 800bfc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bfc4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800bfc8:	d0c1      	beq.n	800bf4e <lfs_file_read+0x42>
                file->off == lfs->cfg->block_size) {
 800bfca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bfcc:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800bfd0:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
 800bfd2:	4291      	cmp	r1, r2
 800bfd4:	d1c7      	bne.n	800bf66 <lfs_file_read+0x5a>
 800bfd6:	e7ba      	b.n	800bf4e <lfs_file_read+0x42>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800bfd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bfdc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800bfe0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800bfe4:	9003      	str	r0, [sp, #12]
 800bfe6:	9102      	str	r1, [sp, #8]
 800bfe8:	9201      	str	r2, [sp, #4]
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bfee:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800bff2:	2100      	movs	r1, #0
 800bff4:	4640      	mov	r0, r8
 800bff6:	f7ff fa1b 	bl	800b430 <lfs_ctz_find>
                if (err) {
 800bffa:	4603      	mov	r3, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d0ae      	beq.n	800bf5e <lfs_file_read+0x52>
 800c000:	e014      	b.n	800c02c <lfs_file_read+0x120>
            int err = lfs_bd_read(lfs,
 800c002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c004:	9503      	str	r5, [sp, #12]
 800c006:	9702      	str	r7, [sp, #8]
 800c008:	9101      	str	r1, [sp, #4]
 800c00a:	9200      	str	r2, [sp, #0]
 800c00c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c010:	2100      	movs	r1, #0
 800c012:	4640      	mov	r0, r8
 800c014:	f7fd ff14 	bl	8009e40 <lfs_bd_read>
            if (err) {
 800c018:	4603      	mov	r3, r0
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d0c7      	beq.n	800bfae <lfs_file_read+0xa2>
 800c01e:	e005      	b.n	800c02c <lfs_file_read+0x120>
    return size;
 800c020:	464b      	mov	r3, r9
 800c022:	e003      	b.n	800c02c <lfs_file_read+0x120>
        return LFS_ERR_BADF;
 800c024:	f06f 0308 	mvn.w	r3, #8
 800c028:	e000      	b.n	800c02c <lfs_file_read+0x120>
        return 0;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	b007      	add	sp, #28
 800c030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c034:	fff7fc00 	.word	0xfff7fc00

0800c038 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	4606      	mov	r6, r0
 800c03c:	460c      	mov	r4, r1
 800c03e:	4617      	mov	r7, r2
 800c040:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
 800c042:	f7ff fee7 	bl	800be14 <lfs_file_flush>
    if (err) {
 800c046:	4603      	mov	r3, r0
 800c048:	b938      	cbnz	r0, 800c05a <lfs_file_seek+0x22>
    lfs_off_t npos = file->pos;
 800c04a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 800c04c:	b93d      	cbnz	r5, 800c05e <lfs_file_seek+0x26>
        npos = off;
 800c04e:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
 800c050:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c052:	4283      	cmp	r3, r0
 800c054:	d30c      	bcc.n	800c070 <lfs_file_seek+0x38>
    file->pos = npos;
 800c056:	6360      	str	r0, [r4, #52]	; 0x34
    return npos;
 800c058:	4603      	mov	r3, r0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
 800c05e:	2d01      	cmp	r5, #1
 800c060:	d004      	beq.n	800c06c <lfs_file_seek+0x34>
    } else if (whence == LFS_SEEK_END) {
 800c062:	2d02      	cmp	r5, #2
 800c064:	d1f4      	bne.n	800c050 <lfs_file_seek+0x18>
        npos = file->ctz.size + off;
 800c066:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c068:	4438      	add	r0, r7
 800c06a:	e7f1      	b.n	800c050 <lfs_file_seek+0x18>
        npos = file->pos + off;
 800c06c:	4438      	add	r0, r7
 800c06e:	e7ef      	b.n	800c050 <lfs_file_seek+0x18>
        return LFS_ERR_INVAL;
 800c070:	f06f 0315 	mvn.w	r3, #21
 800c074:	e7f1      	b.n	800c05a <lfs_file_seek+0x22>

0800c076 <lfs_file_rewind>:
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800c076:	b508      	push	{r3, lr}
    lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_SET);
 800c078:	2300      	movs	r3, #0
 800c07a:	461a      	mov	r2, r3
 800c07c:	f7ff ffdc 	bl	800c038 <lfs_file_seek>
    if (res < 0) {
 800c080:	2800      	cmp	r0, #0
 800c082:	db00      	blt.n	800c086 <lfs_file_rewind+0x10>
    return 0;
 800c084:	2000      	movs	r0, #0
}
 800c086:	bd08      	pop	{r3, pc}

0800c088 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 800c088:	b500      	push	{lr}
 800c08a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 800c08c:	aa02      	add	r2, sp, #8
 800c08e:	2300      	movs	r3, #0
 800c090:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 800c094:	4904      	ldr	r1, [pc, #16]	; (800c0a8 <lfs_fs_size+0x20>)
 800c096:	f7ff fb1f 	bl	800b6d8 <lfs_fs_traverse>
    if (err) {
 800c09a:	4603      	mov	r3, r0
 800c09c:	b900      	cbnz	r0, 800c0a0 <lfs_fs_size+0x18>
        return err;
    }

  return size;
 800c09e:	9b01      	ldr	r3, [sp, #4]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	b003      	add	sp, #12
 800c0a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0a8:	08009e0f 	.word	0x08009e0f

0800c0ac <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	b099      	sub	sp, #100	; 0x64
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	468b      	mov	fp, r1
 800c0b6:	4691      	mov	r9, r2
 800c0b8:	469a      	mov	sl, r3
 800c0ba:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800c0be:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800c0c2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 800c0c6:	684b      	ldr	r3, [r1, #4]
 800c0c8:	9314      	str	r3, [sp, #80]	; 0x50
 800c0ca:	680b      	ldr	r3, [r1, #0]
 800c0cc:	9315      	str	r3, [sp, #84]	; 0x54
    while (end - begin > 1) {
 800c0ce:	e012      	b.n	800c0f6 <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
 800c0d0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800c0d4:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c0d8:	442c      	add	r4, r5
 800c0da:	b2a4      	uxth	r4, r4
 800c0dc:	9602      	str	r6, [sp, #8]
 800c0de:	9401      	str	r4, [sp, #4]
 800c0e0:	f8cd 8000 	str.w	r8, [sp]
 800c0e4:	4653      	mov	r3, sl
 800c0e6:	464a      	mov	r2, r9
 800c0e8:	4659      	mov	r1, fp
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f000 ff76 	bl	800cfdc <lfs_dir_split>
        if (err) {
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d160      	bne.n	800c1b6 <lfs_dir_compact+0x10a>
        end = begin + split;
 800c0f4:	4626      	mov	r6, r4
    while (end - begin > 1) {
 800c0f6:	1b74      	subs	r4, r6, r5
 800c0f8:	2c01      	cmp	r4, #1
 800c0fa:	dd31      	ble.n	800c160 <lfs_dir_compact+0xb4>
        lfs_size_t size = 0;
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	a918      	add	r1, sp, #96	; 0x60
 800c100:	f841 2d28 	str.w	r2, [r1, #-40]!
        int err = lfs_dir_traverse(lfs,
 800c104:	426b      	negs	r3, r5
 800c106:	b21b      	sxth	r3, r3
 800c108:	9109      	str	r1, [sp, #36]	; 0x24
 800c10a:	49a3      	ldr	r1, [pc, #652]	; (800c398 <lfs_dir_compact+0x2ec>)
 800c10c:	9108      	str	r1, [sp, #32]
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	9606      	str	r6, [sp, #24]
 800c112:	9505      	str	r5, [sp, #20]
 800c114:	9204      	str	r2, [sp, #16]
 800c116:	4ba1      	ldr	r3, [pc, #644]	; (800c39c <lfs_dir_compact+0x2f0>)
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	9202      	str	r2, [sp, #8]
 800c11c:	f8cd a004 	str.w	sl, [sp, #4]
 800c120:	f8cd 9000 	str.w	r9, [sp]
 800c124:	f04f 33ff 	mov.w	r3, #4294967295
 800c128:	4641      	mov	r1, r8
 800c12a:	4638      	mov	r0, r7
 800c12c:	f7fe fa9c 	bl	800a668 <lfs_dir_traverse>
        if (err) {
 800c130:	2800      	cmp	r0, #0
 800c132:	f040 81c1 	bne.w	800c4b8 <lfs_dir_compact+0x40c>
        if (end - begin < 0xff &&
 800c136:	2cfe      	cmp	r4, #254	; 0xfe
 800c138:	dcca      	bgt.n	800c0d0 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800c13a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c13c:	69da      	ldr	r2, [r3, #28]
 800c13e:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
 800c142:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800c144:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800c148:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
 800c14a:	fbb3 f2f0 	udiv	r2, r3, r0
 800c14e:	fb00 3212 	mls	r2, r0, r2, r3
 800c152:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 800c154:	428b      	cmp	r3, r1
 800c156:	bf28      	it	cs
 800c158:	460b      	movcs	r3, r1
 800c15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if (end - begin < 0xff &&
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d8b7      	bhi.n	800c0d0 <lfs_dir_compact+0x24>
    dir->rev += 1;
 800c160:	f8db 3008 	ldr.w	r3, [fp, #8]
 800c164:	3301      	adds	r3, #1
 800c166:	f8cb 3008 	str.w	r3, [fp, #8]
    if (lfs->cfg->block_cycles &&
 800c16a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c16c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d048      	beq.n	800c204 <lfs_dir_compact+0x158>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 800c172:	3201      	adds	r2, #1
 800c174:	fbb3 f1f2 	udiv	r1, r3, r2
 800c178:	fb02 3211 	mls	r2, r2, r1, r3
    if (lfs->cfg->block_cycles &&
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	d145      	bne.n	800c20c <lfs_dir_compact+0x160>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c180:	f8db 3000 	ldr.w	r3, [fp]
 800c184:	b143      	cbz	r3, 800c198 <lfs_dir_compact+0xec>
 800c186:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c18a:	2a01      	cmp	r2, #1
 800c18c:	d004      	beq.n	800c198 <lfs_dir_compact+0xec>
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d002      	beq.n	800c198 <lfs_dir_compact+0xec>
 800c192:	2a00      	cmp	r2, #0
 800c194:	f040 8165 	bne.w	800c462 <lfs_dir_compact+0x3b6>
            lfs_ssize_t res = lfs_fs_size(lfs);
 800c198:	4638      	mov	r0, r7
 800c19a:	f7ff ff75 	bl	800c088 <lfs_fs_size>
            if (res < 0) {
 800c19e:	1e02      	subs	r2, r0, #0
 800c1a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1a2:	db3f      	blt.n	800c224 <lfs_dir_compact+0x178>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800c1a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 800c1ac:	d30e      	bcc.n	800c1cc <lfs_dir_compact+0x120>
    bool exhausted = false;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c1b4:	e02d      	b.n	800c212 <lfs_dir_compact+0x166>
 800c1b6:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800c1b8:	f110 0f1c 	cmn.w	r0, #28
 800c1bc:	d132      	bne.n	800c224 <lfs_dir_compact+0x178>
 800c1be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	3b24      	subs	r3, #36	; 0x24
 800c1c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d2ca      	bcs.n	800c160 <lfs_dir_compact+0xb4>
 800c1ca:	e02b      	b.n	800c224 <lfs_dir_compact+0x178>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800c1cc:	f8db 2008 	ldr.w	r2, [fp, #8]
 800c1d0:	f240 51ba 	movw	r1, #1466	; 0x5ba
 800c1d4:	4872      	ldr	r0, [pc, #456]	; (800c3a0 <lfs_dir_compact+0x2f4>)
 800c1d6:	f001 fd9f 	bl	800dd18 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c1da:	9602      	str	r6, [sp, #8]
 800c1dc:	9501      	str	r5, [sp, #4]
 800c1de:	f8cd 8000 	str.w	r8, [sp]
 800c1e2:	4653      	mov	r3, sl
 800c1e4:	464a      	mov	r2, r9
 800c1e6:	4659      	mov	r1, fp
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f000 fef7 	bl	800cfdc <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
 800c1ee:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1f0:	b110      	cbz	r0, 800c1f8 <lfs_dir_compact+0x14c>
 800c1f2:	f110 0f1c 	cmn.w	r0, #28
 800c1f6:	d115      	bne.n	800c224 <lfs_dir_compact+0x178>
                if (!err) {
 800c1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fa:	b1bb      	cbz	r3, 800c22c <lfs_dir_compact+0x180>
    bool exhausted = false;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c200:	930d      	str	r3, [sp, #52]	; 0x34
 800c202:	e006      	b.n	800c212 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c204:	2300      	movs	r3, #0
 800c206:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c208:	930d      	str	r3, [sp, #52]	; 0x34
 800c20a:	e002      	b.n	800c212 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c20c:	2300      	movs	r3, #0
 800c20e:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c210:	930d      	str	r3, [sp, #52]	; 0x34
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800c212:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800c216:	4622      	mov	r2, r4
 800c218:	4659      	mov	r1, fp
 800c21a:	4638      	mov	r0, r7
 800c21c:	f7fe fc18 	bl	800aa50 <lfs_dir_getgstate>
            if (err) {
 800c220:	900b      	str	r0, [sp, #44]	; 0x2c
 800c222:	b170      	cbz	r0, 800c242 <lfs_dir_compact+0x196>
}
 800c224:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c226:	b019      	add	sp, #100	; 0x64
 800c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    end = begin;
 800c22c:	462e      	mov	r6, r5
    bool exhausted = false;
 800c22e:	2300      	movs	r3, #0
 800c230:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c232:	930d      	str	r3, [sp, #52]	; 0x34
 800c234:	e7ed      	b.n	800c212 <lfs_dir_compact+0x166>
        relocated = true;
 800c236:	2301      	movs	r3, #1
 800c238:	930d      	str	r3, [sp, #52]	; 0x34
 800c23a:	e7ea      	b.n	800c212 <lfs_dir_compact+0x166>
 800c23c:	2301      	movs	r3, #1
 800c23e:	930d      	str	r3, [sp, #52]	; 0x34
 800c240:	e7e7      	b.n	800c212 <lfs_dir_compact+0x166>
                .block = dir->pair[1],
 800c242:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
 800c246:	910e      	str	r1, [sp, #56]	; 0x38
 800c248:	2300      	movs	r3, #0
 800c24a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	9210      	str	r2, [sp, #64]	; 0x40
 800c252:	9211      	str	r2, [sp, #68]	; 0x44
 800c254:	9312      	str	r3, [sp, #72]	; 0x48
                .end = lfs->cfg->block_size - 8,
 800c256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800c25c:	9313      	str	r3, [sp, #76]	; 0x4c
            err = lfs_bd_erase(lfs, dir->pair[1]);
 800c25e:	4638      	mov	r0, r7
 800c260:	f7fd fdda 	bl	8009e18 <lfs_bd_erase>
            if (err) {
 800c264:	900b      	str	r0, [sp, #44]	; 0x2c
 800c266:	b340      	cbz	r0, 800c2ba <lfs_dir_compact+0x20e>
                if (err == LFS_ERR_CORRUPT) {
 800c268:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c26c:	d1da      	bne.n	800c224 <lfs_dir_compact+0x178>
    rcache->block = 0xffffffff;
 800c26e:	f04f 33ff 	mov.w	r3, #4294967295
 800c272:	613b      	str	r3, [r7, #16]
        if (!exhausted) {
 800c274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80f6 	beq.w	800c468 <lfs_dir_compact+0x3bc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c27c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c27e:	2a00      	cmp	r2, #0
 800c280:	f000 80fa 	beq.w	800c478 <lfs_dir_compact+0x3cc>
 800c284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c286:	2b01      	cmp	r3, #1
 800c288:	f000 80f6 	beq.w	800c478 <lfs_dir_compact+0x3cc>
 800c28c:	2a01      	cmp	r2, #1
 800c28e:	f000 80f3 	beq.w	800c478 <lfs_dir_compact+0x3cc>
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80f0 	beq.w	800c478 <lfs_dir_compact+0x3cc>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800c298:	f10b 0104 	add.w	r1, fp, #4
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff fab3 	bl	800b808 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 800c2a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d0c6      	beq.n	800c236 <lfs_dir_compact+0x18a>
 800c2a8:	f110 0f1c 	cmn.w	r0, #28
 800c2ac:	d0c6      	beq.n	800c23c <lfs_dir_compact+0x190>
 800c2ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0b7      	beq.n	800c224 <lfs_dir_compact+0x178>
        relocated = true;
 800c2b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2b8:	e7ab      	b.n	800c212 <lfs_dir_compact+0x166>
            err = lfs_dir_commitprog(lfs, &commit,
 800c2ba:	2304      	movs	r3, #4
 800c2bc:	f10b 0208 	add.w	r2, fp, #8
 800c2c0:	a90e      	add	r1, sp, #56	; 0x38
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f7fe fd4a 	bl	800ad5c <lfs_dir_commitprog>
            if (err) {
 800c2c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2ca:	b118      	cbz	r0, 800c2d4 <lfs_dir_compact+0x228>
                if (err == LFS_ERR_CORRUPT) {
 800c2cc:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c2d0:	d1a8      	bne.n	800c224 <lfs_dir_compact+0x178>
 800c2d2:	e7cc      	b.n	800c26e <lfs_dir_compact+0x1c2>
            err = lfs_dir_traverse(lfs,
 800c2d4:	426b      	negs	r3, r5
 800c2d6:	b21b      	sxth	r3, r3
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c2d8:	9716      	str	r7, [sp, #88]	; 0x58
 800c2da:	aa0e      	add	r2, sp, #56	; 0x38
 800c2dc:	9217      	str	r2, [sp, #92]	; 0x5c
            err = lfs_dir_traverse(lfs,
 800c2de:	aa16      	add	r2, sp, #88	; 0x58
 800c2e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e2:	4a30      	ldr	r2, [pc, #192]	; (800c3a4 <lfs_dir_compact+0x2f8>)
 800c2e4:	9208      	str	r2, [sp, #32]
 800c2e6:	9307      	str	r3, [sp, #28]
 800c2e8:	9606      	str	r6, [sp, #24]
 800c2ea:	9505      	str	r5, [sp, #20]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	9204      	str	r2, [sp, #16]
 800c2f0:	4b2a      	ldr	r3, [pc, #168]	; (800c39c <lfs_dir_compact+0x2f0>)
 800c2f2:	9303      	str	r3, [sp, #12]
 800c2f4:	9202      	str	r2, [sp, #8]
 800c2f6:	f8cd a004 	str.w	sl, [sp, #4]
 800c2fa:	f8cd 9000 	str.w	r9, [sp]
 800c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c302:	4641      	mov	r1, r8
 800c304:	4638      	mov	r0, r7
 800c306:	f7fe f9af 	bl	800a668 <lfs_dir_traverse>
            if (err) {
 800c30a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c30c:	b118      	cbz	r0, 800c316 <lfs_dir_compact+0x26a>
                if (err == LFS_ERR_CORRUPT) {
 800c30e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c312:	d187      	bne.n	800c224 <lfs_dir_compact+0x178>
 800c314:	e7ab      	b.n	800c26e <lfs_dir_compact+0x1c2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c316:	f8db 3018 	ldr.w	r3, [fp, #24]
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	d014      	beq.n	800c34a <lfs_dir_compact+0x29e>
 800c320:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c328:	d00d      	beq.n	800c346 <lfs_dir_compact+0x29a>
 800c32a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
 800c32c:	f013 0f01 	tst.w	r3, #1
 800c330:	d00d      	beq.n	800c34e <lfs_dir_compact+0x2a2>
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c334:	bb13      	cbnz	r3, 800c37c <lfs_dir_compact+0x2d0>
 800c336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 800c338:	2b02      	cmp	r3, #2
 800c33a:	dc1d      	bgt.n	800c378 <lfs_dir_compact+0x2cc>
        if (((uint32_t*)a)[i] != 0) {
 800c33c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800c340:	bb3a      	cbnz	r2, 800c392 <lfs_dir_compact+0x2e6>
    for (int i = 0; i < 3; i++) {
 800c342:	3301      	adds	r3, #1
 800c344:	e7f8      	b.n	800c338 <lfs_dir_compact+0x28c>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c346:	2301      	movs	r3, #1
 800c348:	e7f0      	b.n	800c32c <lfs_dir_compact+0x280>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e7ee      	b.n	800c32c <lfs_dir_compact+0x280>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800c34e:	f89b 2017 	ldrb.w	r2, [fp, #23]
 800c352:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 800c356:	f10b 0318 	add.w	r3, fp, #24
 800c35a:	4913      	ldr	r1, [pc, #76]	; (800c3a8 <lfs_dir_compact+0x2fc>)
 800c35c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800c360:	a90e      	add	r1, sp, #56	; 0x38
 800c362:	4638      	mov	r0, r7
 800c364:	f7fe fd1a 	bl	800ad9c <lfs_dir_commitattr>
                if (err) {
 800c368:	2800      	cmp	r0, #0
 800c36a:	d0e2      	beq.n	800c332 <lfs_dir_compact+0x286>
                    if (err == LFS_ERR_CORRUPT) {
 800c36c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c370:	f43f af7d 	beq.w	800c26e <lfs_dir_compact+0x1c2>
                    return err;
 800c374:	900b      	str	r0, [sp, #44]	; 0x2c
 800c376:	e755      	b.n	800c224 <lfs_dir_compact+0x178>
    return true;
 800c378:	2301      	movs	r3, #1
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c37a:	b1bb      	cbz	r3, 800c3ac <lfs_dir_compact+0x300>
            err = lfs_dir_commitcrc(lfs, &commit);
 800c37c:	a90e      	add	r1, sp, #56	; 0x38
 800c37e:	4638      	mov	r0, r7
 800c380:	f7fe fd83 	bl	800ae8a <lfs_dir_commitcrc>
            if (err) {
 800c384:	900b      	str	r0, [sp, #44]	; 0x2c
 800c386:	b1f8      	cbz	r0, 800c3c8 <lfs_dir_compact+0x31c>
                if (err == LFS_ERR_CORRUPT) {
 800c388:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c38c:	f47f af4a 	bne.w	800c224 <lfs_dir_compact+0x178>
 800c390:	e76d      	b.n	800c26e <lfs_dir_compact+0x1c2>
            return false;
 800c392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c394:	e7f1      	b.n	800c37a <lfs_dir_compact+0x2ce>
 800c396:	bf00      	nop
 800c398:	08009dd1 	.word	0x08009dd1
 800c39c:	400ffc00 	.word	0x400ffc00
 800c3a0:	0800f058 	.word	0x0800f058
 800c3a4:	0800ae5d 	.word	0x0800ae5d
 800c3a8:	000ffc08 	.word	0x000ffc08
                err = lfs_dir_commitattr(lfs, &commit,
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	4a43      	ldr	r2, [pc, #268]	; (800c4bc <lfs_dir_compact+0x410>)
 800c3b0:	a90e      	add	r1, sp, #56	; 0x38
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7fe fcf2 	bl	800ad9c <lfs_dir_commitattr>
                if (err) {
 800c3b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d0de      	beq.n	800c37c <lfs_dir_compact+0x2d0>
                    if (err == LFS_ERR_CORRUPT) {
 800c3be:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c3c2:	f47f af2f 	bne.w	800c224 <lfs_dir_compact+0x178>
 800c3c6:	e752      	b.n	800c26e <lfs_dir_compact+0x1c2>
    lfs_block_t t = pair[0];
 800c3c8:	f8db 1000 	ldr.w	r1, [fp]
    pair[0] = pair[1];
 800c3cc:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c3d0:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
 800c3d4:	f8cb 1004 	str.w	r1, [fp, #4]
            dir->count = end - begin;
 800c3d8:	1b75      	subs	r5, r6, r5
 800c3da:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
 800c3de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c3e0:	f8cb 000c 	str.w	r0, [fp, #12]
            dir->etag = commit.ptag;
 800c3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3e6:	f8cb 3010 	str.w	r3, [fp, #16]
            dir->erased = (dir->off % lfs->cfg->prog_size == 0);
 800c3ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ec:	699c      	ldr	r4, [r3, #24]
 800c3ee:	fbb0 f3f4 	udiv	r3, r0, r4
 800c3f2:	fb04 0313 	mls	r3, r4, r3, r0
 800c3f6:	fab3 f383 	clz	r3, r3
 800c3fa:	095b      	lsrs	r3, r3, #5
 800c3fc:	f88b 3016 	strb.w	r3, [fp, #22]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c400:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800c402:	0d03      	lsrs	r3, r0, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c404:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800c408:	d00d      	beq.n	800c426 <lfs_dir_compact+0x37a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c40a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c40c:	4294      	cmp	r4, r2
 800c40e:	d022      	beq.n	800c456 <lfs_dir_compact+0x3aa>
 800c410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c412:	428b      	cmp	r3, r1
 800c414:	d021      	beq.n	800c45a <lfs_dir_compact+0x3ae>
 800c416:	428c      	cmp	r4, r1
 800c418:	d021      	beq.n	800c45e <lfs_dir_compact+0x3b2>
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d001      	beq.n	800c422 <lfs_dir_compact+0x376>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c420:	e002      	b.n	800c428 <lfs_dir_compact+0x37c>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <lfs_dir_compact+0x37c>
 800c426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800c428:	f013 0f01 	tst.w	r3, #1
 800c42c:	d005      	beq.n	800c43a <lfs_dir_compact+0x38e>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800c42e:	4b24      	ldr	r3, [pc, #144]	; (800c4c0 <lfs_dir_compact+0x414>)
 800c430:	4003      	ands	r3, r0
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800c434:	2300      	movs	r3, #0
 800c436:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
    if (!relocated) {
 800c43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c43c:	bb33      	cbnz	r3, 800c48c <lfs_dir_compact+0x3e0>
        lfs->gstate = lfs->gpending;
 800c43e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c442:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c446:	ca07      	ldmia	r2, {r0, r1, r2}
 800c448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800c44c:	2300      	movs	r3, #0
 800c44e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c450:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c452:	653b      	str	r3, [r7, #80]	; 0x50
 800c454:	e6e6      	b.n	800c224 <lfs_dir_compact+0x178>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c456:	2301      	movs	r3, #1
 800c458:	e7e6      	b.n	800c428 <lfs_dir_compact+0x37c>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7e4      	b.n	800c428 <lfs_dir_compact+0x37c>
 800c45e:	2301      	movs	r3, #1
 800c460:	e7e2      	b.n	800c428 <lfs_dir_compact+0x37c>
            exhausted = true;
 800c462:	2301      	movs	r3, #1
 800c464:	930c      	str	r3, [sp, #48]	; 0x30
 800c466:	e702      	b.n	800c26e <lfs_dir_compact+0x1c2>
            LFS_DEBUG("Bad block at %"PRIu32, dir->pair[1]);
 800c468:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c46c:	f240 6141 	movw	r1, #1601	; 0x641
 800c470:	4814      	ldr	r0, [pc, #80]	; (800c4c4 <lfs_dir_compact+0x418>)
 800c472:	f001 fc51 	bl	800dd18 <iprintf>
 800c476:	e701      	b.n	800c27c <lfs_dir_compact+0x1d0>
            LFS_WARN("Superblock %"PRIu32" has become unwritable", oldpair[1]);
 800c478:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c47a:	f240 6146 	movw	r1, #1606	; 0x646
 800c47e:	4812      	ldr	r0, [pc, #72]	; (800c4c8 <lfs_dir_compact+0x41c>)
 800c480:	f001 fc4a 	bl	800dd18 <iprintf>
            return LFS_ERR_NOSPC;
 800c484:	f06f 031b 	mvn.w	r3, #27
 800c488:	930b      	str	r3, [sp, #44]	; 0x2c
 800c48a:	e6cb      	b.n	800c224 <lfs_dir_compact+0x178>
        LFS_DEBUG("Relocating %"PRIu32" %"PRIu32" to %"PRIu32" %"PRIu32,
 800c48c:	ac18      	add	r4, sp, #96	; 0x60
 800c48e:	f854 2d10 	ldr.w	r2, [r4, #-16]!
 800c492:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	f8db 3000 	ldr.w	r3, [fp]
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4a0:	f240 6159 	movw	r1, #1625	; 0x659
 800c4a4:	4809      	ldr	r0, [pc, #36]	; (800c4cc <lfs_dir_compact+0x420>)
 800c4a6:	f001 fc37 	bl	800dd18 <iprintf>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800c4aa:	465a      	mov	r2, fp
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f000 fafe 	bl	800cab0 <lfs_fs_relocate>
 800c4b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4b6:	e6b5      	b.n	800c224 <lfs_dir_compact+0x178>
 800c4b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4ba:	e6b3      	b.n	800c224 <lfs_dir_compact+0x178>
 800c4bc:	7ffffc0c 	.word	0x7ffffc0c
 800c4c0:	800003ff 	.word	0x800003ff
 800c4c4:	0800f124 	.word	0x0800f124
 800c4c8:	0800f088 	.word	0x0800f088
 800c4cc:	0800f0bc 	.word	0x0800f0bc

0800c4d0 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	b09c      	sub	sp, #112	; 0x70
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	460d      	mov	r5, r1
 800c4da:	4616      	mov	r6, r2
 800c4dc:	4698      	mov	r8, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c4de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c4e0:	e003      	b.n	800c4ea <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c4e2:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d012      	beq.n	800c50e <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c4e8:	6824      	ldr	r4, [r4, #0]
 800c4ea:	b38c      	cbz	r4, 800c550 <lfs_dir_commit+0x80>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c4ec:	f104 0308 	add.w	r3, r4, #8
 800c4f0:	42ab      	cmp	r3, r5
 800c4f2:	d0f9      	beq.n	800c4e8 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c4f4:	68a3      	ldr	r3, [r4, #8]
 800c4f6:	682a      	ldr	r2, [r5, #0]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d0f2      	beq.n	800c4e2 <lfs_dir_commit+0x12>
 800c4fc:	68e0      	ldr	r0, [r4, #12]
 800c4fe:	6869      	ldr	r1, [r5, #4]
 800c500:	4281      	cmp	r1, r0
 800c502:	d0ee      	beq.n	800c4e2 <lfs_dir_commit+0x12>
 800c504:	4299      	cmp	r1, r3
 800c506:	d0ec      	beq.n	800c4e2 <lfs_dir_commit+0x12>
 800c508:	4290      	cmp	r0, r2
 800c50a:	d1ed      	bne.n	800c4e8 <lfs_dir_commit+0x18>
 800c50c:	e7e9      	b.n	800c4e2 <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c50e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c510:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c514:	d0e8      	beq.n	800c4e8 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 800c516:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c51a:	6a92      	ldr	r2, [r2, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c51c:	4291      	cmp	r1, r2
 800c51e:	d9e3      	bls.n	800c4e8 <lfs_dir_commit+0x18>
            f->flags &= ~LFS_F_READING;
 800c520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c524:	6323      	str	r3, [r4, #48]	; 0x30
            f->off = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	63e3      	str	r3, [r4, #60]	; 0x3c
            lfs_alloc_ack(lfs);
 800c52a:	4638      	mov	r0, r7
 800c52c:	f7fd fc1c 	bl	8009d68 <lfs_alloc_ack>
            int err = lfs_file_relocate(lfs, f);
 800c530:	4621      	mov	r1, r4
 800c532:	4638      	mov	r0, r7
 800c534:	f7ff fa08 	bl	800b948 <lfs_file_relocate>
            if (err) {
 800c538:	4603      	mov	r3, r0
 800c53a:	2800      	cmp	r0, #0
 800c53c:	f040 8163 	bne.w	800c806 <lfs_dir_commit+0x336>
            err = lfs_file_flush(lfs, f);
 800c540:	4621      	mov	r1, r4
 800c542:	4638      	mov	r0, r7
 800c544:	f7ff fc66 	bl	800be14 <lfs_file_flush>
            if (err) {
 800c548:	4603      	mov	r3, r0
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d0cc      	beq.n	800c4e8 <lfs_dir_commit+0x18>
 800c54e:	e15a      	b.n	800c806 <lfs_dir_commit+0x336>
    for (int i = 0; i < attrcount; i++) {
 800c550:	2300      	movs	r3, #0
    lfs_tag_t createtag = 0xffffffff;
 800c552:	f04f 3aff 	mov.w	sl, #4294967295
    lfs_tag_t deletetag = 0xffffffff;
 800c556:	46d1      	mov	r9, sl
 800c558:	e004      	b.n	800c564 <lfs_dir_commit+0x94>
            dir->count += 1;
 800c55a:	8aaa      	ldrh	r2, [r5, #20]
 800c55c:	3201      	adds	r2, #1
 800c55e:	82aa      	strh	r2, [r5, #20]
            createtag = attrs[i].tag;
 800c560:	4682      	mov	sl, r0
    for (int i = 0; i < attrcount; i++) {
 800c562:	3301      	adds	r3, #1
 800c564:	4543      	cmp	r3, r8
 800c566:	da2e      	bge.n	800c5c6 <lfs_dir_commit+0xf6>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800c568:	00dc      	lsls	r4, r3, #3
 800c56a:	eb06 0e04 	add.w	lr, r6, r4
 800c56e:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 800c572:	0d02      	lsrs	r2, r0, #20
 800c574:	f3c2 010a 	ubfx	r1, r2, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800c578:	f240 4c01 	movw	ip, #1025	; 0x401
 800c57c:	4561      	cmp	r1, ip
 800c57e:	d0ec      	beq.n	800c55a <lfs_dir_commit+0x8a>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800c580:	f240 4cff 	movw	ip, #1279	; 0x4ff
 800c584:	4561      	cmp	r1, ip
 800c586:	d011      	beq.n	800c5ac <lfs_dir_commit+0xdc>
    return (tag & 0x70000000) >> 20;
 800c588:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800c58c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800c590:	d1e7      	bne.n	800c562 <lfs_dir_commit+0x92>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800c592:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c596:	6812      	ldr	r2, [r2, #0]
 800c598:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800c59a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c59e:	6852      	ldr	r2, [r2, #4]
 800c5a0:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800c5a2:	5932      	ldr	r2, [r6, r4]
 800c5a4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800c5a8:	75ea      	strb	r2, [r5, #23]
 800c5aa:	e7da      	b.n	800c562 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800c5ac:	8aaa      	ldrh	r2, [r5, #20]
 800c5ae:	b11a      	cbz	r2, 800c5b8 <lfs_dir_commit+0xe8>
            dir->count -= 1;
 800c5b0:	3a01      	subs	r2, #1
 800c5b2:	82aa      	strh	r2, [r5, #20]
            deletetag = attrs[i].tag;
 800c5b4:	4681      	mov	r9, r0
 800c5b6:	e7d4      	b.n	800c562 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800c5b8:	4b9d      	ldr	r3, [pc, #628]	; (800c830 <lfs_dir_commit+0x360>)
 800c5ba:	4a9e      	ldr	r2, [pc, #632]	; (800c834 <lfs_dir_commit+0x364>)
 800c5bc:	f240 6184 	movw	r1, #1668	; 0x684
 800c5c0:	489d      	ldr	r0, [pc, #628]	; (800c838 <lfs_dir_commit+0x368>)
 800c5c2:	f000 ffb7 	bl	800d534 <__assert_func>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800c5c8:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c5ca:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800c5ce:	d00f      	beq.n	800c5f0 <lfs_dir_commit+0x120>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5d2:	6829      	ldr	r1, [r5, #0]
 800c5d4:	428a      	cmp	r2, r1
 800c5d6:	d078      	beq.n	800c6ca <lfs_dir_commit+0x1fa>
 800c5d8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c5da:	6868      	ldr	r0, [r5, #4]
 800c5dc:	4284      	cmp	r4, r0
 800c5de:	d076      	beq.n	800c6ce <lfs_dir_commit+0x1fe>
 800c5e0:	4282      	cmp	r2, r0
 800c5e2:	d076      	beq.n	800c6d2 <lfs_dir_commit+0x202>
 800c5e4:	42a1      	cmp	r1, r4
 800c5e6:	d001      	beq.n	800c5ec <lfs_dir_commit+0x11c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	e002      	b.n	800c5f2 <lfs_dir_commit+0x122>
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	e000      	b.n	800c5f2 <lfs_dir_commit+0x122>
 800c5f0:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800c5f2:	b1b2      	cbz	r2, 800c622 <lfs_dir_commit+0x152>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800c5f4:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800c83c <lfs_dir_commit+0x36c>
 800c5f8:	ea03 0909 	and.w	r9, r3, r9
        LFS_ASSERT(dir->count > 0);
 800c5fc:	8aab      	ldrh	r3, [r5, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d069      	beq.n	800c6d6 <lfs_dir_commit+0x206>
        dir->count -= 1;
 800c602:	3b01      	subs	r3, #1
 800c604:	82ab      	strh	r3, [r5, #20]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800c606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c608:	4a8c      	ldr	r2, [pc, #560]	; (800c83c <lfs_dir_commit+0x36c>)
 800c60a:	401a      	ands	r2, r3
 800c60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c60e:	4053      	eors	r3, r2
 800c610:	64bb      	str	r3, [r7, #72]	; 0x48
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800c612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c616:	4053      	eors	r3, r2
 800c618:	64fb      	str	r3, [r7, #76]	; 0x4c
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800c61a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c61e:	4053      	eors	r3, r2
 800c620:	653b      	str	r3, [r7, #80]	; 0x50
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 800c622:	f1b9 0f00 	cmp.w	r9, #0
 800c626:	db02      	blt.n	800c62e <lfs_dir_commit+0x15e>
 800c628:	8aab      	ldrh	r3, [r5, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d05a      	beq.n	800c6e4 <lfs_dir_commit+0x214>
    if (dir->erased || dir->count >= 0xff) {
 800c62e:	7dab      	ldrb	r3, [r5, #22]
 800c630:	b913      	cbnz	r3, 800c638 <lfs_dir_commit+0x168>
 800c632:	8aab      	ldrh	r3, [r5, #20]
 800c634:	2bfe      	cmp	r3, #254	; 0xfe
 800c636:	d92c      	bls.n	800c692 <lfs_dir_commit+0x1c2>
            .block = dir->pair[0],
 800c638:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
 800c63a:	930a      	str	r3, [sp, #40]	; 0x28
            .off = dir->off,
 800c63c:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
 800c63e:	920b      	str	r2, [sp, #44]	; 0x2c
            .ptag = dir->etag,
 800c640:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 800c642:	930c      	str	r3, [sp, #48]	; 0x30
 800c644:	f04f 31ff 	mov.w	r1, #4294967295
 800c648:	910d      	str	r1, [sp, #52]	; 0x34
 800c64a:	920e      	str	r2, [sp, #56]	; 0x38
            .end = lfs->cfg->block_size - 8,
 800c64c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c64e:	69c9      	ldr	r1, [r1, #28]
 800c650:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 800c652:	910f      	str	r1, [sp, #60]	; 0x3c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c654:	971a      	str	r7, [sp, #104]	; 0x68
 800c656:	a90a      	add	r1, sp, #40	; 0x28
 800c658:	911b      	str	r1, [sp, #108]	; 0x6c
        int err = lfs_dir_traverse(lfs,
 800c65a:	a91a      	add	r1, sp, #104	; 0x68
 800c65c:	9109      	str	r1, [sp, #36]	; 0x24
 800c65e:	4978      	ldr	r1, [pc, #480]	; (800c840 <lfs_dir_commit+0x370>)
 800c660:	9108      	str	r1, [sp, #32]
 800c662:	2100      	movs	r1, #0
 800c664:	9107      	str	r1, [sp, #28]
 800c666:	9106      	str	r1, [sp, #24]
 800c668:	9105      	str	r1, [sp, #20]
 800c66a:	9104      	str	r1, [sp, #16]
 800c66c:	9103      	str	r1, [sp, #12]
 800c66e:	9102      	str	r1, [sp, #8]
 800c670:	f8cd 8004 	str.w	r8, [sp, #4]
 800c674:	9600      	str	r6, [sp, #0]
 800c676:	4629      	mov	r1, r5
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fd fff5 	bl	800a668 <lfs_dir_traverse>
        if (err) {
 800c67e:	4603      	mov	r3, r0
 800c680:	2800      	cmp	r0, #0
 800c682:	d048      	beq.n	800c716 <lfs_dir_commit+0x246>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c684:	f110 0f1c 	cmn.w	r0, #28
 800c688:	d003      	beq.n	800c692 <lfs_dir_commit+0x1c2>
 800c68a:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c68e:	f040 80ba 	bne.w	800c806 <lfs_dir_commit+0x336>
    rcache->block = 0xffffffff;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	613b      	str	r3, [r7, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800c698:	8aab      	ldrh	r3, [r5, #20]
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	2300      	movs	r3, #0
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9500      	str	r5, [sp, #0]
 800c6a2:	4643      	mov	r3, r8
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff fcff 	bl	800c0ac <lfs_dir_compact>
        if (err) {
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	f040 80a8 	bne.w	800c806 <lfs_dir_commit+0x336>
    lfs_mdir_t copy = *dir;
 800c6b6:	ac12      	add	r4, sp, #72	; 0x48
 800c6b8:	462e      	mov	r6, r5
 800c6ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c6c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c6c6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c6c8:	e0c1      	b.n	800c84e <lfs_dir_commit+0x37e>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	e791      	b.n	800c5f2 <lfs_dir_commit+0x122>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	e78f      	b.n	800c5f2 <lfs_dir_commit+0x122>
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	e78d      	b.n	800c5f2 <lfs_dir_commit+0x122>
        LFS_ASSERT(dir->count > 0);
 800c6d6:	4b56      	ldr	r3, [pc, #344]	; (800c830 <lfs_dir_commit+0x360>)
 800c6d8:	4a56      	ldr	r2, [pc, #344]	; (800c834 <lfs_dir_commit+0x364>)
 800c6da:	f240 6191 	movw	r1, #1681	; 0x691
 800c6de:	4856      	ldr	r0, [pc, #344]	; (800c838 <lfs_dir_commit+0x368>)
 800c6e0:	f000 ff28 	bl	800d534 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800c6e4:	aa0a      	add	r2, sp, #40	; 0x28
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7fd ff87 	bl	800a5fc <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	b118      	cbz	r0, 800c6fa <lfs_dir_commit+0x22a>
 800c6f2:	f110 0f02 	cmn.w	r0, #2
 800c6f6:	f040 8086 	bne.w	800c806 <lfs_dir_commit+0x336>
        if (err != LFS_ERR_NOENT && pdir.split) {
 800c6fa:	f113 0f02 	cmn.w	r3, #2
 800c6fe:	d096      	beq.n	800c62e <lfs_dir_commit+0x15e>
 800c700:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 800c704:	2b00      	cmp	r3, #0
 800c706:	d092      	beq.n	800c62e <lfs_dir_commit+0x15e>
            return lfs_dir_drop(lfs, &pdir, dir);
 800c708:	462a      	mov	r2, r5
 800c70a:	a90a      	add	r1, sp, #40	; 0x28
 800c70c:	4638      	mov	r0, r7
 800c70e:	f000 f8f3 	bl	800c8f8 <lfs_dir_drop>
 800c712:	4603      	mov	r3, r0
 800c714:	e077      	b.n	800c806 <lfs_dir_commit+0x336>
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800c716:	f107 0448 	add.w	r4, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	dc04      	bgt.n	800c728 <lfs_dir_commit+0x258>
        if (((uint32_t*)a)[i] != 0) {
 800c71e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800c722:	b9d2      	cbnz	r2, 800c75a <lfs_dir_commit+0x28a>
    for (int i = 0; i < 3; i++) {
 800c724:	3301      	adds	r3, #1
 800c726:	e7f8      	b.n	800c71a <lfs_dir_commit+0x24a>
    return true;
 800c728:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800c72a:	b9c3      	cbnz	r3, 800c75e <lfs_dir_commit+0x28e>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800c72c:	4622      	mov	r2, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	4638      	mov	r0, r7
 800c732:	f7fe f98d 	bl	800aa50 <lfs_dir_getgstate>
            if (err) {
 800c736:	4603      	mov	r3, r0
 800c738:	2800      	cmp	r0, #0
 800c73a:	d164      	bne.n	800c806 <lfs_dir_commit+0x336>
            err = lfs_dir_commitattr(lfs, &commit,
 800c73c:	4623      	mov	r3, r4
 800c73e:	4a41      	ldr	r2, [pc, #260]	; (800c844 <lfs_dir_commit+0x374>)
 800c740:	a90a      	add	r1, sp, #40	; 0x28
 800c742:	4638      	mov	r0, r7
 800c744:	f7fe fb2a 	bl	800ad9c <lfs_dir_commitattr>
            if (err) {
 800c748:	4603      	mov	r3, r0
 800c74a:	b140      	cbz	r0, 800c75e <lfs_dir_commit+0x28e>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c74c:	f110 0f1c 	cmn.w	r0, #28
 800c750:	d09f      	beq.n	800c692 <lfs_dir_commit+0x1c2>
 800c752:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c756:	d156      	bne.n	800c806 <lfs_dir_commit+0x336>
 800c758:	e79b      	b.n	800c692 <lfs_dir_commit+0x1c2>
            return false;
 800c75a:	2300      	movs	r3, #0
 800c75c:	e7e5      	b.n	800c72a <lfs_dir_commit+0x25a>
        err = lfs_dir_commitcrc(lfs, &commit);
 800c75e:	a90a      	add	r1, sp, #40	; 0x28
 800c760:	4638      	mov	r0, r7
 800c762:	f7fe fb92 	bl	800ae8a <lfs_dir_commitcrc>
        if (err) {
 800c766:	4603      	mov	r3, r0
 800c768:	b130      	cbz	r0, 800c778 <lfs_dir_commit+0x2a8>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c76a:	f110 0f1c 	cmn.w	r0, #28
 800c76e:	d090      	beq.n	800c692 <lfs_dir_commit+0x1c2>
 800c770:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c774:	d147      	bne.n	800c806 <lfs_dir_commit+0x336>
 800c776:	e78c      	b.n	800c692 <lfs_dir_commit+0x1c2>
        dir->off = commit.off;
 800c778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c77a:	60ea      	str	r2, [r5, #12]
        dir->etag = commit.ptag;
 800c77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c77e:	612a      	str	r2, [r5, #16]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800c782:	0d11      	lsrs	r1, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c784:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 800c788:	d00e      	beq.n	800c7a8 <lfs_dir_commit+0x2d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c78a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c78c:	6829      	ldr	r1, [r5, #0]
 800c78e:	4288      	cmp	r0, r1
 800c790:	d009      	beq.n	800c7a6 <lfs_dir_commit+0x2d6>
 800c792:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c794:	686e      	ldr	r6, [r5, #4]
 800c796:	42b4      	cmp	r4, r6
 800c798:	d01b      	beq.n	800c7d2 <lfs_dir_commit+0x302>
 800c79a:	42b0      	cmp	r0, r6
 800c79c:	d01b      	beq.n	800c7d6 <lfs_dir_commit+0x306>
 800c79e:	42a1      	cmp	r1, r4
 800c7a0:	d102      	bne.n	800c7a8 <lfs_dir_commit+0x2d8>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <lfs_dir_commit+0x2d8>
 800c7a6:	2301      	movs	r3, #1
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800c7a8:	f013 0f01 	tst.w	r3, #1
 800c7ac:	d005      	beq.n	800c7ba <lfs_dir_commit+0x2ea>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <lfs_dir_commit+0x378>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800c7b8:	647b      	str	r3, [r7, #68]	; 0x44
        lfs->gstate = lfs->gpending;
 800c7ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c7c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800c7cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c7ce:	653a      	str	r2, [r7, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
 800c7d0:	e771      	b.n	800c6b6 <lfs_dir_commit+0x1e6>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e7e8      	b.n	800c7a8 <lfs_dir_commit+0x2d8>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e7e6      	b.n	800c7a8 <lfs_dir_commit+0x2d8>
                d->m.pair[0] = 0xffffffff;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	60a3      	str	r3, [r4, #8]
                d->m.pair[1] = 0xffffffff;
 800c7e0:	60e3      	str	r3, [r4, #12]
            while (d->id >= d->m.count && d->m.split) {
 800c7e2:	88a3      	ldrh	r3, [r4, #4]
 800c7e4:	8ba2      	ldrh	r2, [r4, #28]
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d330      	bcc.n	800c84c <lfs_dir_commit+0x37c>
 800c7ea:	7fe1      	ldrb	r1, [r4, #31]
 800c7ec:	b371      	cbz	r1, 800c84c <lfs_dir_commit+0x37c>
                d->id -= d->m.count;
 800c7ee:	1a9b      	subs	r3, r3, r2
 800c7f0:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800c7f2:	f104 0220 	add.w	r2, r4, #32
 800c7f6:	f104 0108 	add.w	r1, r4, #8
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f7fd fef0 	bl	800a5e0 <lfs_dir_fetch>
                if (err) {
 800c800:	4603      	mov	r3, r0
 800c802:	2800      	cmp	r0, #0
 800c804:	d0ed      	beq.n	800c7e2 <lfs_dir_commit+0x312>
}
 800c806:	4618      	mov	r0, r3
 800c808:	b01c      	add	sp, #112	; 0x70
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800c80e:	f104 0208 	add.w	r2, r4, #8
 800c812:	42aa      	cmp	r2, r5
 800c814:	d0e5      	beq.n	800c7e2 <lfs_dir_commit+0x312>
    return (tag & 0x000ffc00) >> 10;
 800c816:	f3ca 2289 	ubfx	r2, sl, #10, #10
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d3e1      	bcc.n	800c7e2 <lfs_dir_commit+0x312>
                d->id += 1;
 800c81e:	3301      	adds	r3, #1
 800c820:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800c822:	79a3      	ldrb	r3, [r4, #6]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d1dc      	bne.n	800c7e2 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos += 1;
 800c828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c82a:	3301      	adds	r3, #1
 800c82c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c82e:	e7d8      	b.n	800c7e2 <lfs_dir_commit+0x312>
 800c830:	0800f048 	.word	0x0800f048
 800c834:	0800eed0 	.word	0x0800eed0
 800c838:	0800ef40 	.word	0x0800ef40
 800c83c:	7ffffc00 	.word	0x7ffffc00
 800c840:	0800ae5d 	.word	0x0800ae5d
 800c844:	7ffffc0c 	.word	0x7ffffc0c
 800c848:	800003ff 	.word	0x800003ff
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c84c:	6824      	ldr	r4, [r4, #0]
 800c84e:	b32c      	cbz	r4, 800c89c <lfs_dir_commit+0x3cc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c854:	4293      	cmp	r3, r2
 800c856:	d007      	beq.n	800c868 <lfs_dir_commit+0x398>
 800c858:	68e0      	ldr	r0, [r4, #12]
 800c85a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c85c:	4288      	cmp	r0, r1
 800c85e:	d003      	beq.n	800c868 <lfs_dir_commit+0x398>
 800c860:	428b      	cmp	r3, r1
 800c862:	d001      	beq.n	800c868 <lfs_dir_commit+0x398>
 800c864:	4282      	cmp	r2, r0
 800c866:	d1f1      	bne.n	800c84c <lfs_dir_commit+0x37c>
            d->m = *dir;
 800c868:	f104 0608 	add.w	r6, r4, #8
 800c86c:	46ac      	mov	ip, r5
 800c86e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c872:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c874:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800c878:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 800c87c:	88a3      	ldrh	r3, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 800c87e:	f3c9 2289 	ubfx	r2, r9, #10, #10
            if (d->id == lfs_tag_id(deletetag)) {
 800c882:	4293      	cmp	r3, r2
 800c884:	d0a9      	beq.n	800c7da <lfs_dir_commit+0x30a>
            } else if (d->id > lfs_tag_id(deletetag)) {
 800c886:	4293      	cmp	r3, r2
 800c888:	d9c1      	bls.n	800c80e <lfs_dir_commit+0x33e>
                d->id -= 1;
 800c88a:	3b01      	subs	r3, #1
 800c88c:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800c88e:	79a3      	ldrb	r3, [r4, #6]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d1a6      	bne.n	800c7e2 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos -= 1;
 800c894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c896:	3b01      	subs	r3, #1
 800c898:	62a3      	str	r3, [r4, #40]	; 0x28
 800c89a:	e7a2      	b.n	800c7e2 <lfs_dir_commit+0x312>
    return 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	e7b2      	b.n	800c806 <lfs_dir_commit+0x336>

0800c8a0 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 800c8a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800c8a2:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gstate)) {
 800c8a4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800c8a8:	d102      	bne.n	800c8b0 <lfs_fs_demove+0x10>
        return 0;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 800c8b0:	b530      	push	{r4, r5, lr}
 800c8b2:	b08b      	sub	sp, #44	; 0x2c
 800c8b4:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 800c8b6:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move %"PRIu32" %"PRIu32" %"PRIu16,
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	f855 2f34 	ldr.w	r2, [r5, #52]!
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8c4:	f640 6173 	movw	r1, #3699	; 0xe73
 800c8c8:	480a      	ldr	r0, [pc, #40]	; (800c8f4 <lfs_fs_demove+0x54>)
 800c8ca:	f001 fa25 	bl	800dd18 <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gstate.pair);
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	a902      	add	r1, sp, #8
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7fd fe84 	bl	800a5e0 <lfs_dir_fetch>
    if (err) {
 800c8d8:	4603      	mov	r3, r0
 800c8da:	b110      	cbz	r0, 800c8e2 <lfs_fs_demove+0x42>
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	b00b      	add	sp, #44	; 0x2c
 800c8e0:	bd30      	pop	{r4, r5, pc}
    err = lfs_dir_commit(lfs, &movedir, NULL, 0);
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	a902      	add	r1, sp, #8
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7ff fdf1 	bl	800c4d0 <lfs_dir_commit>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	e7f4      	b.n	800c8dc <lfs_fs_demove+0x3c>
 800c8f2:	bf00      	nop
 800c8f4:	0800f144 	.word	0x0800f144

0800c8f8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	460e      	mov	r6, r1
 800c900:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800c902:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800c906:	4621      	mov	r1, r4
 800c908:	f7fe f8a2 	bl	800aa50 <lfs_dir_getgstate>
    if (err) {
 800c90c:	4603      	mov	r3, r0
 800c90e:	b110      	cbz	r0, 800c916 <lfs_dir_drop+0x1e>
}
 800c910:	4618      	mov	r0, r3
 800c912:	b002      	add	sp, #8
 800c914:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 800c916:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800c91a:	7de3      	ldrb	r3, [r4, #23]
 800c91c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <lfs_dir_drop+0x44>)
 800c922:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	9101      	str	r1, [sp, #4]
 800c92a:	2301      	movs	r3, #1
 800c92c:	466a      	mov	r2, sp
 800c92e:	4631      	mov	r1, r6
 800c930:	4628      	mov	r0, r5
 800c932:	f7ff fdcd 	bl	800c4d0 <lfs_dir_commit>
 800c936:	4603      	mov	r3, r0
 800c938:	e7ea      	b.n	800c910 <lfs_dir_drop+0x18>
 800c93a:	bf00      	nop
 800c93c:	000ffc08 	.word	0x000ffc08

0800c940 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
 800c944:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
 800c946:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f000 8096 	beq.w	800ca7c <lfs_fs_deorphan+0x13c>
 800c950:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true};
 800c952:	2220      	movs	r2, #32
 800c954:	2100      	movs	r1, #0
 800c956:	a814      	add	r0, sp, #80	; 0x50
 800c958:	f000 fe6a 	bl	800d630 <memset>
 800c95c:	2201      	movs	r2, #1
 800c95e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
    lfs_mdir_t dir = {.tail = {0, 1}};
 800c962:	2300      	movs	r3, #0
 800c964:	930c      	str	r3, [sp, #48]	; 0x30
 800c966:	930d      	str	r3, [sp, #52]	; 0x34
 800c968:	930e      	str	r3, [sp, #56]	; 0x38
 800c96a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c96c:	9310      	str	r3, [sp, #64]	; 0x40
 800c96e:	9311      	str	r3, [sp, #68]	; 0x44
 800c970:	9312      	str	r3, [sp, #72]	; 0x48
 800c972:	9213      	str	r2, [sp, #76]	; 0x4c
    while (!lfs_pair_isnull(dir.tail)) {
 800c974:	e078      	b.n	800ca68 <lfs_fs_deorphan+0x128>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800c976:	aa04      	add	r2, sp, #16
 800c978:	a91a      	add	r1, sp, #104	; 0x68
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7fd fdf2 	bl	800a564 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800c980:	1e03      	subs	r3, r0, #0
 800c982:	db28      	blt.n	800c9d6 <lfs_fs_deorphan+0x96>
            if (tag == LFS_ERR_NOENT) {
 800c984:	f113 0f02 	cmn.w	r3, #2
 800c988:	d02a      	beq.n	800c9e0 <lfs_fs_deorphan+0xa0>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800c98a:	aa02      	add	r2, sp, #8
 800c98c:	9200      	str	r2, [sp, #0]
 800c98e:	4a3d      	ldr	r2, [pc, #244]	; (800ca84 <lfs_fs_deorphan+0x144>)
 800c990:	a904      	add	r1, sp, #16
 800c992:	4630      	mov	r0, r6
 800c994:	f7fe f84e 	bl	800aa34 <lfs_dir_get>
            if (res < 0) {
 800c998:	2800      	cmp	r0, #0
 800c99a:	db4b      	blt.n	800ca34 <lfs_fs_deorphan+0xf4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800c99c:	9a02      	ldr	r2, [sp, #8]
 800c99e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d03c      	beq.n	800ca1e <lfs_fs_deorphan+0xde>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800c9a4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800c9a6:	428a      	cmp	r2, r1
 800c9a8:	d03f      	beq.n	800ca2a <lfs_fs_deorphan+0xea>
            if (!lfs_pair_sync(pair, pdir.tail)) {
 800c9aa:	f014 0f01 	tst.w	r4, #1
 800c9ae:	d153      	bne.n	800ca58 <lfs_fs_deorphan+0x118>
                LFS_DEBUG("Fixing half-orphan %"PRIu32" %"PRIu32,
 800c9b0:	9b03      	ldr	r3, [sp, #12]
 800c9b2:	f640 61b6 	movw	r1, #3766	; 0xeb6
 800c9b6:	4834      	ldr	r0, [pc, #208]	; (800ca88 <lfs_fs_deorphan+0x148>)
 800c9b8:	f001 f9ae 	bl	800dd18 <iprintf>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800c9bc:	4b33      	ldr	r3, [pc, #204]	; (800ca8c <lfs_fs_deorphan+0x14c>)
 800c9be:	931c      	str	r3, [sp, #112]	; 0x70
 800c9c0:	ab02      	add	r3, sp, #8
 800c9c2:	931d      	str	r3, [sp, #116]	; 0x74
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	aa1c      	add	r2, sp, #112	; 0x70
 800c9c8:	a914      	add	r1, sp, #80	; 0x50
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff fd80 	bl	800c4d0 <lfs_dir_commit>
                if (err) {
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	b1a0      	cbz	r0, 800c9fe <lfs_fs_deorphan+0xbe>
 800c9d4:	e053      	b.n	800ca7e <lfs_fs_deorphan+0x13e>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800c9d6:	f113 0f02 	cmn.w	r3, #2
 800c9da:	d0d3      	beq.n	800c984 <lfs_fs_deorphan+0x44>
                return tag;
 800c9dc:	461c      	mov	r4, r3
 800c9de:	e04e      	b.n	800ca7e <lfs_fs_deorphan+0x13e>
                LFS_DEBUG("Fixing orphan %"PRIu32" %"PRIu32,
 800c9e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c9e4:	f640 61a1 	movw	r1, #3745	; 0xea1
 800c9e8:	4829      	ldr	r0, [pc, #164]	; (800ca90 <lfs_fs_deorphan+0x150>)
 800c9ea:	f001 f995 	bl	800dd18 <iprintf>
                err = lfs_dir_drop(lfs, &pdir, &dir);
 800c9ee:	aa0c      	add	r2, sp, #48	; 0x30
 800c9f0:	a914      	add	r1, sp, #80	; 0x50
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7ff ff80 	bl	800c8f8 <lfs_dir_drop>
                if (err) {
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d13f      	bne.n	800ca7e <lfs_fs_deorphan+0x13e>
    return lfs_tag_size(a->tag);
 800c9fe:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800ca02:	4249      	negs	r1, r1
 800ca04:	b249      	sxtb	r1, r1
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7fd f9f0 	bl	8009dec <lfs_fs_preporphans>
    lfs->gstate = lfs->gpending;
 800ca0c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800ca10:	363c      	adds	r6, #60	; 0x3c
 800ca12:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ca16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return 0;
 800ca1a:	2400      	movs	r4, #0
 800ca1c:	e02f      	b.n	800ca7e <lfs_fs_deorphan+0x13e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ca1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ca20:	9903      	ldr	r1, [sp, #12]
 800ca22:	4288      	cmp	r0, r1
 800ca24:	d1be      	bne.n	800c9a4 <lfs_fs_deorphan+0x64>
 800ca26:	2401      	movs	r4, #1
 800ca28:	e7bf      	b.n	800c9aa <lfs_fs_deorphan+0x6a>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ca2a:	9903      	ldr	r1, [sp, #12]
 800ca2c:	428b      	cmp	r3, r1
 800ca2e:	d1bc      	bne.n	800c9aa <lfs_fs_deorphan+0x6a>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ca30:	2401      	movs	r4, #1
 800ca32:	e7ba      	b.n	800c9aa <lfs_fs_deorphan+0x6a>
                return res;
 800ca34:	4604      	mov	r4, r0
 800ca36:	e022      	b.n	800ca7e <lfs_fs_deorphan+0x13e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e000      	b.n	800ca3e <lfs_fs_deorphan+0xfe>
 800ca3c:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(dir.tail)) {
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1dd      	bne.n	800c9fe <lfs_fs_deorphan+0xbe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800ca42:	aa12      	add	r2, sp, #72	; 0x48
 800ca44:	a90c      	add	r1, sp, #48	; 0x30
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7fd fdca 	bl	800a5e0 <lfs_dir_fetch>
        if (err) {
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	b9b0      	cbnz	r0, 800ca7e <lfs_fs_deorphan+0x13e>
        if (!pdir.split) {
 800ca50:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d08e      	beq.n	800c976 <lfs_fs_deorphan+0x36>
        memcpy(&pdir, &dir, sizeof(pdir));
 800ca58:	ac14      	add	r4, sp, #80	; 0x50
 800ca5a:	ad0c      	add	r5, sp, #48	; 0x30
 800ca5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800ca68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6e:	d0e5      	beq.n	800ca3c <lfs_fs_deorphan+0xfc>
 800ca70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca76:	d0df      	beq.n	800ca38 <lfs_fs_deorphan+0xf8>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e7e0      	b.n	800ca3e <lfs_fs_deorphan+0xfe>
        return 0;
 800ca7c:	2400      	movs	r4, #0
}
 800ca7e:	4620      	mov	r0, r4
 800ca80:	b01e      	add	sp, #120	; 0x78
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	7ffffc00 	.word	0x7ffffc00
 800ca88:	0800f194 	.word	0x0800f194
 800ca8c:	600ffc08 	.word	0x600ffc08
 800ca90:	0800f16c 	.word	0x0800f16c

0800ca94 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800ca94:	b510      	push	{r4, lr}
 800ca96:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
 800ca98:	f7ff ff02 	bl	800c8a0 <lfs_fs_demove>
    if (err) {
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	b108      	cbz	r0, 800caa4 <lfs_fs_forceconsistency+0x10>
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7ff ff4b 	bl	800c940 <lfs_fs_deorphan>
 800caaa:	4603      	mov	r3, r0
 800caac:	e7f8      	b.n	800caa0 <lfs_fs_forceconsistency+0xc>
	...

0800cab0 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b08d      	sub	sp, #52	; 0x34
 800cab4:	4606      	mov	r6, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	4614      	mov	r4, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800caba:	680b      	ldr	r3, [r1, #0]
 800cabc:	6a02      	ldr	r2, [r0, #32]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d007      	beq.n	800cad2 <lfs_fs_relocate+0x22>
 800cac2:	6848      	ldr	r0, [r1, #4]
 800cac4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800cac6:	4281      	cmp	r1, r0
 800cac8:	d003      	beq.n	800cad2 <lfs_fs_relocate+0x22>
 800caca:	4299      	cmp	r1, r3
 800cacc:	d001      	beq.n	800cad2 <lfs_fs_relocate+0x22>
 800cace:	4290      	cmp	r0, r2
 800cad0:	d10a      	bne.n	800cae8 <lfs_fs_relocate+0x38>
        LFS_DEBUG("Relocating root %"PRIu32" %"PRIu32,
 800cad2:	6863      	ldr	r3, [r4, #4]
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	f640 6123 	movw	r1, #3619	; 0xe23
 800cada:	4830      	ldr	r0, [pc, #192]	; (800cb9c <lfs_fs_relocate+0xec>)
 800cadc:	f001 f91c 	bl	800dd18 <iprintf>
        lfs->root[0] = newpair[0];
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	6233      	str	r3, [r6, #32]
        lfs->root[1] = newpair[1];
 800cae4:	6863      	ldr	r3, [r4, #4]
 800cae6:	6273      	str	r3, [r6, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cae8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800caea:	e004      	b.n	800caf6 <lfs_fs_relocate+0x46>
            d->m.pair[0] = newpair[0];
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800caf0:	6862      	ldr	r2, [r4, #4]
 800caf2:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	b163      	cbz	r3, 800cb12 <lfs_fs_relocate+0x62>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800caf8:	682a      	ldr	r2, [r5, #0]
 800cafa:	6899      	ldr	r1, [r3, #8]
 800cafc:	428a      	cmp	r2, r1
 800cafe:	d0f5      	beq.n	800caec <lfs_fs_relocate+0x3c>
 800cb00:	686f      	ldr	r7, [r5, #4]
 800cb02:	68d8      	ldr	r0, [r3, #12]
 800cb04:	4287      	cmp	r7, r0
 800cb06:	d0f1      	beq.n	800caec <lfs_fs_relocate+0x3c>
 800cb08:	4282      	cmp	r2, r0
 800cb0a:	d0ef      	beq.n	800caec <lfs_fs_relocate+0x3c>
 800cb0c:	42b9      	cmp	r1, r7
 800cb0e:	d1f1      	bne.n	800caf4 <lfs_fs_relocate+0x44>
 800cb10:	e7ec      	b.n	800caec <lfs_fs_relocate+0x3c>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800cb12:	466a      	mov	r2, sp
 800cb14:	4629      	mov	r1, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	f7fd fd24 	bl	800a564 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cb1c:	1e07      	subs	r7, r0, #0
 800cb1e:	db13      	blt.n	800cb48 <lfs_fs_relocate+0x98>
    if (tag != LFS_ERR_NOENT) {
 800cb20:	f117 0f02 	cmn.w	r7, #2
 800cb24:	d019      	beq.n	800cb5a <lfs_fs_relocate+0xaa>
        lfs_fs_preporphans(lfs, +1);
 800cb26:	2101      	movs	r1, #1
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7fd f95f 	bl	8009dec <lfs_fs_preporphans>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 800cb2e:	9708      	str	r7, [sp, #32]
 800cb30:	9409      	str	r4, [sp, #36]	; 0x24
 800cb32:	2301      	movs	r3, #1
 800cb34:	aa08      	add	r2, sp, #32
 800cb36:	4669      	mov	r1, sp
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff fcc9 	bl	800c4d0 <lfs_dir_commit>
        if (err) {
 800cb3e:	4607      	mov	r7, r0
 800cb40:	b130      	cbz	r0, 800cb50 <lfs_fs_relocate+0xa0>
}
 800cb42:	4638      	mov	r0, r7
 800cb44:	b00d      	add	sp, #52	; 0x34
 800cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cb48:	f117 0f02 	cmn.w	r7, #2
 800cb4c:	d1f9      	bne.n	800cb42 <lfs_fs_relocate+0x92>
 800cb4e:	e7e7      	b.n	800cb20 <lfs_fs_relocate+0x70>
        lfs_fs_preporphans(lfs, -1);
 800cb50:	f04f 31ff 	mov.w	r1, #4294967295
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7fd f949 	bl	8009dec <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800cb5a:	466a      	mov	r2, sp
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7fd fd4c 	bl	800a5fc <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
 800cb64:	4607      	mov	r7, r0
 800cb66:	b110      	cbz	r0, 800cb6e <lfs_fs_relocate+0xbe>
 800cb68:	f110 0f02 	cmn.w	r0, #2
 800cb6c:	d1e9      	bne.n	800cb42 <lfs_fs_relocate+0x92>
    if (err != LFS_ERR_NOENT) {
 800cb6e:	f117 0f02 	cmn.w	r7, #2
 800cb72:	d010      	beq.n	800cb96 <lfs_fs_relocate+0xe6>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800cb74:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800cb78:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800cb7c:	4b08      	ldr	r3, [pc, #32]	; (800cba0 <lfs_fs_relocate+0xf0>)
 800cb7e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cb82:	930a      	str	r3, [sp, #40]	; 0x28
 800cb84:	940b      	str	r4, [sp, #44]	; 0x2c
 800cb86:	2301      	movs	r3, #1
 800cb88:	aa0a      	add	r2, sp, #40	; 0x28
 800cb8a:	4669      	mov	r1, sp
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff fc9f 	bl	800c4d0 <lfs_dir_commit>
 800cb92:	4607      	mov	r7, r0
 800cb94:	e7d5      	b.n	800cb42 <lfs_fs_relocate+0x92>
    return 0;
 800cb96:	2700      	movs	r7, #0
 800cb98:	e7d3      	b.n	800cb42 <lfs_fs_relocate+0x92>
 800cb9a:	bf00      	nop
 800cb9c:	0800f1c0 	.word	0x0800f1c0
 800cba0:	000ffc08 	.word	0x000ffc08

0800cba4 <lfs_file_sync>:
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 800cba4:	b530      	push	{r4, r5, lr}
 800cba6:	b087      	sub	sp, #28
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	e039      	b.n	800cc22 <lfs_file_sync+0x7e>
            file->flags |= LFS_F_ERRED;
 800cbae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cbb0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800cbb4:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800cbb6:	e05b      	b.n	800cc70 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cbb8:	2101      	movs	r1, #1
 800cbba:	e000      	b.n	800cbbe <lfs_file_sync+0x1a>
 800cbbc:	2101      	movs	r1, #1
                !(file->flags & LFS_F_ERRED) &&
 800cbbe:	f011 0f01 	tst.w	r1, #1
 800cbc2:	d155      	bne.n	800cc70 <lfs_file_sync+0xcc>
            if (file->flags & LFS_F_INLINE) {
 800cbc4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800cbc8:	d042      	beq.n	800cc50 <lfs_file_sync+0xac>
                buffer = file->cache.buffer;
 800cbca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                size = file->ctz.size;
 800cbcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                type = LFS_TYPE_INLINESTRUCT;
 800cbce:	f240 2201 	movw	r2, #513	; 0x201
            err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800cbd2:	88a3      	ldrh	r3, [r4, #4]
 800cbd4:	029b      	lsls	r3, r3, #10
 800cbd6:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 800cbda:	4302      	orrs	r2, r0
 800cbdc:	9202      	str	r2, [sp, #8]
 800cbde:	9103      	str	r1, [sp, #12]
 800cbe0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cbe2:	6891      	ldr	r1, [r2, #8]
 800cbe4:	430b      	orrs	r3, r1
 800cbe6:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	6853      	ldr	r3, [r2, #4]
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	aa02      	add	r2, sp, #8
 800cbf4:	f104 0108 	add.w	r1, r4, #8
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	f7ff fc69 	bl	800c4d0 <lfs_dir_commit>
            if (err) {
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d038      	beq.n	800cc76 <lfs_file_sync+0xd2>
                if (err == LFS_ERR_NOSPC && (file->flags & LFS_F_INLINE)) {
 800cc04:	f110 0f1c 	cmn.w	r0, #28
 800cc08:	d12e      	bne.n	800cc68 <lfs_file_sync+0xc4>
 800cc0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc0c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800cc10:	d02a      	beq.n	800cc68 <lfs_file_sync+0xc4>
        file->off = file->pos;
 800cc12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc14:	63e3      	str	r3, [r4, #60]	; 0x3c
        err = lfs_file_relocate(lfs, file);
 800cc16:	4621      	mov	r1, r4
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f7fe fe95 	bl	800b948 <lfs_file_relocate>
        if (err) {
 800cc1e:	4603      	mov	r3, r0
 800cc20:	bb70      	cbnz	r0, 800cc80 <lfs_file_sync+0xdc>
        int err = lfs_file_flush(lfs, file);
 800cc22:	4621      	mov	r1, r4
 800cc24:	4628      	mov	r0, r5
 800cc26:	f7ff f8f5 	bl	800be14 <lfs_file_flush>
        if (err) {
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d1be      	bne.n	800cbae <lfs_file_sync+0xa>
        if ((file->flags & LFS_F_DIRTY) &&
 800cc30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc32:	f402 2110 	and.w	r1, r2, #589824	; 0x90000
 800cc36:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800cc3a:	d119      	bne.n	800cc70 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cc3c:	68a1      	ldr	r1, [r4, #8]
 800cc3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc42:	d0bb      	beq.n	800cbbc <lfs_file_sync+0x18>
 800cc44:	68e1      	ldr	r1, [r4, #12]
 800cc46:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc4a:	d0b5      	beq.n	800cbb8 <lfs_file_sync+0x14>
 800cc4c:	4601      	mov	r1, r0
 800cc4e:	e7b6      	b.n	800cbbe <lfs_file_sync+0x1a>
                ctz = file->ctz;
 800cc50:	466b      	mov	r3, sp
 800cc52:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800cc56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc5a:	e883 0003 	stmia.w	r3, {r0, r1}
                size = sizeof(ctz);
 800cc5e:	2008      	movs	r0, #8
                buffer = &ctz;
 800cc60:	4619      	mov	r1, r3
                type = LFS_TYPE_CTZSTRUCT;
 800cc62:	f240 2202 	movw	r2, #514	; 0x202
 800cc66:	e7b4      	b.n	800cbd2 <lfs_file_sync+0x2e>
                file->flags |= LFS_F_ERRED;
 800cc68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800cc6e:	6322      	str	r2, [r4, #48]	; 0x30
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	b007      	add	sp, #28
 800cc74:	bd30      	pop	{r4, r5, pc}
            file->flags &= ~LFS_F_DIRTY;
 800cc76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cc7c:	6322      	str	r2, [r4, #48]	; 0x30
 800cc7e:	e7f7      	b.n	800cc70 <lfs_file_sync+0xcc>
            file->flags |= LFS_F_ERRED;
 800cc80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cc82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800cc86:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800cc88:	e7f2      	b.n	800cc70 <lfs_file_sync+0xcc>

0800cc8a <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800cc8a:	b570      	push	{r4, r5, r6, lr}
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
 800cc90:	f7ff ff88 	bl	800cba4 <lfs_file_sync>
 800cc94:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800cc96:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cc9a:	6803      	ldr	r3, [r0, #0]
 800cc9c:	b12b      	cbz	r3, 800ccaa <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
 800cc9e:	42ab      	cmp	r3, r5
 800cca0:	d001      	beq.n	800cca6 <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800cca2:	4618      	mov	r0, r3
 800cca4:	e7f9      	b.n	800cc9a <lfs_file_close+0x10>
            *p = (*p)->next;
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6003      	str	r3, [r0, #0]
    if (!file->cfg->buffer) {
 800ccaa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	b10b      	cbz	r3, 800ccb4 <lfs_file_close+0x2a>
}
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 800ccb4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800ccb6:	f000 fc99 	bl	800d5ec <free>
    return err;
 800ccba:	e7f9      	b.n	800ccb0 <lfs_file_close+0x26>

0800ccbc <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
 800ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc0:	b08a      	sub	sp, #40	; 0x28
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	9203      	str	r2, [sp, #12]
 800ccc8:	461f      	mov	r7, r3
    if ((flags & 3) != LFS_O_RDONLY) {
 800ccca:	f003 0303 	and.w	r3, r3, #3
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d005      	beq.n	800ccde <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
 800ccd2:	f7ff fedf 	bl	800ca94 <lfs_fs_forceconsistency>
        if (err) {
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	f040 8109 	bne.w	800cef0 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
 800ccde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cce0:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags;
 800cce2:	6327      	str	r7, [r4, #48]	; 0x30
    file->pos = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	6363      	str	r3, [r4, #52]	; 0x34
    file->cache.buffer = NULL;
 800cce8:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800ccea:	f104 0808 	add.w	r8, r4, #8
 800ccee:	1d23      	adds	r3, r4, #4
 800ccf0:	aa03      	add	r2, sp, #12
 800ccf2:	4641      	mov	r1, r8
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f7fe f969 	bl	800afcc <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800ccfa:	1e06      	subs	r6, r0, #0
 800ccfc:	db12      	blt.n	800cd24 <lfs_file_opencfg+0x68>
    file->type = LFS_TYPE_REG;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
 800cd02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cd04:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
 800cd06:	62ac      	str	r4, [r5, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 800cd08:	f116 0f02 	cmn.w	r6, #2
 800cd0c:	d014      	beq.n	800cd38 <lfs_file_opencfg+0x7c>
    } else if (flags & LFS_O_EXCL) {
 800cd0e:	f417 7f00 	tst.w	r7, #512	; 0x200
 800cd12:	f040 80e3 	bne.w	800cedc <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
 800cd16:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800cd1a:	2e01      	cmp	r6, #1
 800cd1c:	d039      	beq.n	800cd92 <lfs_file_opencfg+0xd6>
        err = LFS_ERR_ISDIR;
 800cd1e:	f06f 0614 	mvn.w	r6, #20
 800cd22:	e0dd      	b.n	800cee0 <lfs_file_opencfg+0x224>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800cd24:	f116 0f02 	cmn.w	r6, #2
 800cd28:	f040 80da 	bne.w	800cee0 <lfs_file_opencfg+0x224>
 800cd2c:	88a2      	ldrh	r2, [r4, #4]
 800cd2e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d1e3      	bne.n	800ccfe <lfs_file_opencfg+0x42>
 800cd36:	e0d3      	b.n	800cee0 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
 800cd38:	f417 7f80 	tst.w	r7, #256	; 0x100
 800cd3c:	f000 80c8 	beq.w	800ced0 <lfs_file_opencfg+0x214>
        lfs_size_t nlen = strlen(path);
 800cd40:	9e03      	ldr	r6, [sp, #12]
 800cd42:	4630      	mov	r0, r6
 800cd44:	f7f3 fa74 	bl	8000230 <strlen>
        if (nlen > lfs->name_max) {
 800cd48:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800cd4a:	4283      	cmp	r3, r0
 800cd4c:	d202      	bcs.n	800cd54 <lfs_file_opencfg+0x98>
            err = LFS_ERR_NAMETOOLONG;
 800cd4e:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800cd52:	e0c5      	b.n	800cee0 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800cd54:	88a3      	ldrh	r3, [r4, #4]
 800cd56:	029b      	lsls	r3, r3, #10
 800cd58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd60:	9204      	str	r2, [sp, #16]
 800cd62:	2200      	movs	r2, #0
 800cd64:	9205      	str	r2, [sp, #20]
 800cd66:	4318      	orrs	r0, r3
 800cd68:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800cd6c:	9006      	str	r0, [sp, #24]
 800cd6e:	9607      	str	r6, [sp, #28]
 800cd70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd78:	9308      	str	r3, [sp, #32]
 800cd7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	aa04      	add	r2, sp, #16
 800cd80:	4641      	mov	r1, r8
 800cd82:	4628      	mov	r0, r5
 800cd84:	f7ff fba4 	bl	800c4d0 <lfs_dir_commit>
        if (err) {
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	f040 80a4 	bne.w	800ced6 <lfs_file_opencfg+0x21a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800cd8e:	4e5c      	ldr	r6, [pc, #368]	; (800cf00 <lfs_file_opencfg+0x244>)
 800cd90:	e00c      	b.n	800cdac <lfs_file_opencfg+0xf0>
    } else if (flags & LFS_O_TRUNC) {
 800cd92:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800cd96:	d00b      	beq.n	800cdb0 <lfs_file_opencfg+0xf4>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800cd98:	88a6      	ldrh	r6, [r4, #4]
 800cd9a:	02b6      	lsls	r6, r6, #10
 800cd9c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800cda0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 800cda4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cda6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdaa:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800cdac:	2700      	movs	r7, #0
 800cdae:	e024      	b.n	800cdfa <lfs_file_opencfg+0x13e>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800cdb0:	88a3      	ldrh	r3, [r4, #4]
 800cdb2:	029b      	lsls	r3, r3, #10
 800cdb4:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cdbe:	f043 0308 	orr.w	r3, r3, #8
 800cdc2:	4a50      	ldr	r2, [pc, #320]	; (800cf04 <lfs_file_opencfg+0x248>)
 800cdc4:	4641      	mov	r1, r8
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f7fd fe34 	bl	800aa34 <lfs_dir_get>
        if (tag < 0) {
 800cdcc:	1e06      	subs	r6, r0, #0
 800cdce:	daed      	bge.n	800cdac <lfs_file_opencfg+0xf0>
 800cdd0:	e086      	b.n	800cee0 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
 800cdd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cdd4:	f003 0203 	and.w	r2, r3, #3
 800cdd8:	2a01      	cmp	r2, #1
 800cdda:	d00d      	beq.n	800cdf8 <lfs_file_opencfg+0x13c>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800cddc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cdde:	6852      	ldr	r2, [r2, #4]
 800cde0:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800cde4:	0081      	lsls	r1, r0, #2
 800cde6:	440a      	add	r2, r1
 800cde8:	6891      	ldr	r1, [r2, #8]
 800cdea:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800cdec:	4291      	cmp	r1, r2
 800cdee:	f200 8083 	bhi.w	800cef8 <lfs_file_opencfg+0x23c>
            file->flags |= LFS_F_DIRTY;
 800cdf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdf6:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800cdf8:	3701      	adds	r7, #1
 800cdfa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cdfc:	6893      	ldr	r3, [r2, #8]
 800cdfe:	42bb      	cmp	r3, r7
 800ce00:	d920      	bls.n	800ce44 <lfs_file_opencfg+0x188>
        if ((file->flags & 3) != LFS_O_WRONLY) {
 800ce02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ce04:	f003 0303 	and.w	r3, r3, #3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d0e2      	beq.n	800cdd2 <lfs_file_opencfg+0x116>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800ce0c:	6852      	ldr	r2, [r2, #4]
 800ce0e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 800ce12:	008b      	lsls	r3, r1, #2
 800ce14:	18d1      	adds	r1, r2, r3
 800ce16:	5cd3      	ldrb	r3, [r2, r3]
 800ce18:	f503 7240 	add.w	r2, r3, #768	; 0x300
 800ce1c:	88a3      	ldrh	r3, [r4, #4]
 800ce1e:	029b      	lsls	r3, r3, #10
 800ce20:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ce24:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ce26:	6849      	ldr	r1, [r1, #4]
 800ce28:	9100      	str	r1, [sp, #0]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	4a36      	ldr	r2, [pc, #216]	; (800cf08 <lfs_file_opencfg+0x24c>)
 800ce2e:	4641      	mov	r1, r8
 800ce30:	4628      	mov	r0, r5
 800ce32:	f7fd fdff 	bl	800aa34 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 800ce36:	2800      	cmp	r0, #0
 800ce38:	dacb      	bge.n	800cdd2 <lfs_file_opencfg+0x116>
 800ce3a:	f110 0f02 	cmn.w	r0, #2
 800ce3e:	d0c8      	beq.n	800cdd2 <lfs_file_opencfg+0x116>
                err = res;
 800ce40:	4606      	mov	r6, r0
 800ce42:	e04d      	b.n	800cee0 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
 800ce44:	6813      	ldr	r3, [r2, #0]
 800ce46:	b18b      	cbz	r3, 800ce6c <lfs_file_opencfg+0x1b0>
        file->cache.buffer = file->cfg->buffer;
 800ce48:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800ce4a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ce4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce4e:	21ff      	movs	r1, #255	; 0xff
 800ce50:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ce52:	f000 fbed 	bl	800d630 <memset>
    pcache->block = 0xffffffff;
 800ce56:	f04f 33ff 	mov.w	r3, #4294967295
 800ce5a:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
 800ce5c:	f3c6 520a 	ubfx	r2, r6, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800ce60:	f240 2301 	movw	r3, #513	; 0x201
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d00b      	beq.n	800ce80 <lfs_file_opencfg+0x1c4>
    return 0;
 800ce68:	2600      	movs	r6, #0
 800ce6a:	e041      	b.n	800cef0 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800ce6c:	6eab      	ldr	r3, [r5, #104]	; 0x68
    return malloc(size);
 800ce6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ce70:	f000 fbb4 	bl	800d5dc <malloc>
 800ce74:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d1e7      	bne.n	800ce4a <lfs_file_opencfg+0x18e>
            err = LFS_ERR_NOMEM;
 800ce7a:	f06f 060b 	mvn.w	r6, #11
 800ce7e:	e02f      	b.n	800cee0 <lfs_file_opencfg+0x224>
        file->ctz.head = 0xfffffffe;
 800ce80:	f06f 0201 	mvn.w	r2, #1
 800ce84:	62a2      	str	r2, [r4, #40]	; 0x28
    return tag & 0x000003ff;
 800ce86:	f3c6 0609 	ubfx	r6, r6, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 800ce8a:	62e6      	str	r6, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800ce8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ce8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce92:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800ce94:	6422      	str	r2, [r4, #64]	; 0x40
        file->cache.off = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800ce9a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 800cea0:	b90e      	cbnz	r6, 800cea6 <lfs_file_opencfg+0x1ea>
    return 0;
 800cea2:	2600      	movs	r6, #0
 800cea4:	e024      	b.n	800cef0 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800cea6:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
 800cea8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800ceac:	428b      	cmp	r3, r1
 800ceae:	bf28      	it	cs
 800ceb0:	460b      	movcs	r3, r1
 800ceb2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
 800ceb6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800ceb8:	9200      	str	r2, [sp, #0]
 800ceba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cebe:	4a11      	ldr	r2, [pc, #68]	; (800cf04 <lfs_file_opencfg+0x248>)
 800cec0:	4641      	mov	r1, r8
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7fd fdb6 	bl	800aa34 <lfs_dir_get>
            if (res < 0) {
 800cec8:	1e06      	subs	r6, r0, #0
 800ceca:	db09      	blt.n	800cee0 <lfs_file_opencfg+0x224>
    return 0;
 800cecc:	2600      	movs	r6, #0
 800cece:	e00f      	b.n	800cef0 <lfs_file_opencfg+0x234>
            err = LFS_ERR_NOENT;
 800ced0:	f06f 0601 	mvn.w	r6, #1
 800ced4:	e004      	b.n	800cee0 <lfs_file_opencfg+0x224>
            err = LFS_ERR_NAMETOOLONG;
 800ced6:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800ceda:	e001      	b.n	800cee0 <lfs_file_opencfg+0x224>
        err = LFS_ERR_EXIST;
 800cedc:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 800cee0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cee6:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
 800cee8:	4621      	mov	r1, r4
 800ceea:	4628      	mov	r0, r5
 800ceec:	f7ff fecd 	bl	800cc8a <lfs_file_close>
}
 800cef0:	4630      	mov	r0, r6
 800cef2:	b00a      	add	sp, #40	; 0x28
 800cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                err = LFS_ERR_NOSPC;
 800cef8:	f06f 061b 	mvn.w	r6, #27
 800cefc:	e7f0      	b.n	800cee0 <lfs_file_opencfg+0x224>
 800cefe:	bf00      	nop
 800cf00:	20100000 	.word	0x20100000
 800cf04:	700ffc00 	.word	0x700ffc00
 800cf08:	7ffffc00 	.word	0x7ffffc00

0800cf0c <lfs_file_open>:
        const char *path, int flags) {
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	b082      	sub	sp, #8
    return lfs_file_opencfg(lfs, file, path, flags, &defaults);
 800cf10:	4c02      	ldr	r4, [pc, #8]	; (800cf1c <lfs_file_open+0x10>)
 800cf12:	9400      	str	r4, [sp, #0]
 800cf14:	f7ff fed2 	bl	800ccbc <lfs_file_opencfg>
}
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd10      	pop	{r4, pc}
 800cf1c:	0800ef0c 	.word	0x0800ef0c

0800cf20 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800cf20:	b530      	push	{r4, r5, lr}
 800cf22:	b097      	sub	sp, #92	; 0x5c
 800cf24:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
 800cf26:	f7fe f98f 	bl	800b248 <lfs_init>
        if (err) {
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	b110      	cbz	r0, 800cf34 <lfs_format+0x14>
}
 800cf2e:	4628      	mov	r0, r5
 800cf30:	b017      	add	sp, #92	; 0x5c
 800cf32:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800cf34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf38:	2100      	movs	r1, #0
 800cf3a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800cf3c:	f000 fb78 	bl	800d630 <memset>
        lfs->free.off = 0;
 800cf40:	2200      	movs	r2, #0
 800cf42:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800cf44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800cf46:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	6a09      	ldr	r1, [r1, #32]
 800cf4c:	428b      	cmp	r3, r1
 800cf4e:	bf28      	it	cs
 800cf50:	460b      	movcs	r3, r1
 800cf52:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800cf54:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7fc ff06 	bl	8009d68 <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
 800cf5c:	a906      	add	r1, sp, #24
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f7fe fcb8 	bl	800b8d4 <lfs_dir_alloc>
        if (err) {
 800cf64:	4605      	mov	r5, r0
 800cf66:	b118      	cbz	r0, 800cf70 <lfs_format+0x50>
    lfs_deinit(lfs);
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7fe f8eb 	bl	800b144 <lfs_deinit>
    return err;
 800cf6e:	e7de      	b.n	800cf2e <lfs_format+0xe>
        lfs_superblock_t superblock = {
 800cf70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf74:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 800cf76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cf78:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 800cf7a:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800cf7e:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 800cf80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800cf82:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 800cf84:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
 800cf86:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 800cf88:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
 800cf8a:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800cf8c:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <lfs_format+0xac>)
 800cf8e:	930e      	str	r3, [sp, #56]	; 0x38
 800cf90:	2300      	movs	r3, #0
 800cf92:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf94:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <lfs_format+0xb0>)
 800cf96:	9310      	str	r3, [sp, #64]	; 0x40
 800cf98:	4b0e      	ldr	r3, [pc, #56]	; (800cfd4 <lfs_format+0xb4>)
 800cf9a:	9311      	str	r3, [sp, #68]	; 0x44
 800cf9c:	4b0e      	ldr	r3, [pc, #56]	; (800cfd8 <lfs_format+0xb8>)
 800cf9e:	9312      	str	r3, [sp, #72]	; 0x48
 800cfa0:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	aa0e      	add	r2, sp, #56	; 0x38
 800cfa8:	a906      	add	r1, sp, #24
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f7ff fa90 	bl	800c4d0 <lfs_dir_commit>
        if (err) {
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1d8      	bne.n	800cf68 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	9314      	str	r3, [sp, #80]	; 0x50
 800cfba:	2301      	movs	r3, #1
 800cfbc:	9315      	str	r3, [sp, #84]	; 0x54
 800cfbe:	aa14      	add	r2, sp, #80	; 0x50
 800cfc0:	a906      	add	r1, sp, #24
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7fd fb0c 	bl	800a5e0 <lfs_dir_fetch>
 800cfc8:	4605      	mov	r5, r0
 800cfca:	e7cd      	b.n	800cf68 <lfs_format+0x48>
 800cfcc:	40100000 	.word	0x40100000
 800cfd0:	0ff00008 	.word	0x0ff00008
 800cfd4:	0800f3b8 	.word	0x0800f3b8
 800cfd8:	20100018 	.word	0x20100018

0800cfdc <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe0:	b08c      	sub	sp, #48	; 0x30
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	4617      	mov	r7, r2
 800cfe8:	4698      	mov	r8, r3
 800cfea:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    int err = lfs_dir_alloc(lfs, &tail);
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	f7fe fc70 	bl	800b8d4 <lfs_dir_alloc>
    if (err) {
 800cff4:	4603      	mov	r3, r0
 800cff6:	b118      	cbz	r0, 800d000 <lfs_dir_split+0x24>
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	b00c      	add	sp, #48	; 0x30
 800cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
 800d000:	7de3      	ldrb	r3, [r4, #23]
 800d002:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800d006:	69a3      	ldr	r3, [r4, #24]
 800d008:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800d00a:	69e3      	ldr	r3, [r4, #28]
 800d00c:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800d00e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d012:	9302      	str	r3, [sp, #8]
 800d014:	9601      	str	r6, [sp, #4]
 800d016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	4643      	mov	r3, r8
 800d01c:	463a      	mov	r2, r7
 800d01e:	a904      	add	r1, sp, #16
 800d020:	4628      	mov	r0, r5
 800d022:	f7ff f843 	bl	800c0ac <lfs_dir_compact>
    if (err) {
 800d026:	4603      	mov	r3, r0
 800d028:	2800      	cmp	r0, #0
 800d02a:	d1e5      	bne.n	800cff8 <lfs_dir_split+0x1c>
    dir->tail[0] = tail.pair[0];
 800d02c:	9904      	ldr	r1, [sp, #16]
 800d02e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 800d030:	9a05      	ldr	r2, [sp, #20]
 800d032:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 800d034:	2001      	movs	r0, #1
 800d036:	75e0      	strb	r0, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	6a2f      	ldr	r7, [r5, #32]
 800d03c:	42b8      	cmp	r0, r7
 800d03e:	d008      	beq.n	800d052 <lfs_dir_split+0x76>
 800d040:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d044:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d046:	45a4      	cmp	ip, r4
 800d048:	d003      	beq.n	800d052 <lfs_dir_split+0x76>
 800d04a:	42a0      	cmp	r0, r4
 800d04c:	d001      	beq.n	800d052 <lfs_dir_split+0x76>
 800d04e:	4567      	cmp	r7, ip
 800d050:	d1d2      	bne.n	800cff8 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800d052:	2e00      	cmp	r6, #0
 800d054:	d1d0      	bne.n	800cff8 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 800d056:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 800d058:	626a      	str	r2, [r5, #36]	; 0x24
 800d05a:	e7cd      	b.n	800cff8 <lfs_dir_split+0x1c>

0800d05c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800d05c:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 800d05e:	2400      	movs	r4, #0
 800d060:	e012      	b.n	800d088 <lfs_crc+0x2c>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800d062:	5d0b      	ldrb	r3, [r1, r4]
 800d064:	ea83 0500 	eor.w	r5, r3, r0
 800d068:	f005 050f 	and.w	r5, r5, #15
 800d06c:	4e08      	ldr	r6, [pc, #32]	; (800d090 <lfs_crc+0x34>)
 800d06e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800d072:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800d076:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 800d07a:	f003 030f 	and.w	r3, r3, #15
 800d07e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d082:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 800d086:	3401      	adds	r4, #1
 800d088:	4294      	cmp	r4, r2
 800d08a:	d3ea      	bcc.n	800d062 <lfs_crc+0x6>
    }

    return crc;
}
 800d08c:	bc70      	pop	{r4, r5, r6}
 800d08e:	4770      	bx	lr
 800d090:	0800f4a4 	.word	0x0800f4a4

0800d094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d094:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d096:	e003      	b.n	800d0a0 <LoopCopyDataInit>

0800d098 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d098:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800d09a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d09c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d09e:	3104      	adds	r1, #4

0800d0a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d0a0:	480a      	ldr	r0, [pc, #40]	; (800d0cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800d0a2:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800d0a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d0a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d0a8:	d3f6      	bcc.n	800d098 <CopyDataInit>
  ldr r2, =_sbss
 800d0aa:	4a0a      	ldr	r2, [pc, #40]	; (800d0d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800d0ac:	e002      	b.n	800d0b4 <LoopFillZerobss>

0800d0ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d0ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 800d0b0:	f842 3b04 	str.w	r3, [r2], #4

0800d0b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800d0b4:	4b08      	ldr	r3, [pc, #32]	; (800d0d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800d0b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d0b8:	d3f9      	bcc.n	800d0ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d0ba:	f7f4 f8ff 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d0be:	f000 fa69 	bl	800d594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d0c2:	f7f3 fe59 	bl	8000d78 <main>
  bx lr
 800d0c6:	4770      	bx	lr
  ldr r3, =_sidata
 800d0c8:	0800f628 	.word	0x0800f628
  ldr r0, =_sdata
 800d0cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d0d0:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 800d0d4:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 800d0d8:	200072ac 	.word	0x200072ac

0800d0dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d0dc:	e7fe      	b.n	800d0dc <ADC1_2_IRQHandler>
	...

0800d0e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	490f      	ldr	r1, [pc, #60]	; (800d124 <MX_USB_DEVICE_Init+0x44>)
 800d0e6:	4810      	ldr	r0, [pc, #64]	; (800d128 <MX_USB_DEVICE_Init+0x48>)
 800d0e8:	f7fa f8f4 	bl	80072d4 <USBD_Init>
 800d0ec:	b970      	cbnz	r0, 800d10c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d0ee:	490f      	ldr	r1, [pc, #60]	; (800d12c <MX_USB_DEVICE_Init+0x4c>)
 800d0f0:	480d      	ldr	r0, [pc, #52]	; (800d128 <MX_USB_DEVICE_Init+0x48>)
 800d0f2:	f7fa f906 	bl	8007302 <USBD_RegisterClass>
 800d0f6:	b960      	cbnz	r0, 800d112 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d0f8:	490d      	ldr	r1, [pc, #52]	; (800d130 <MX_USB_DEVICE_Init+0x50>)
 800d0fa:	480b      	ldr	r0, [pc, #44]	; (800d128 <MX_USB_DEVICE_Init+0x48>)
 800d0fc:	f7f9 fc83 	bl	8006a06 <USBD_MSC_RegisterStorage>
 800d100:	b950      	cbnz	r0, 800d118 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d102:	4809      	ldr	r0, [pc, #36]	; (800d128 <MX_USB_DEVICE_Init+0x48>)
 800d104:	f7fa f904 	bl	8007310 <USBD_Start>
 800d108:	b948      	cbnz	r0, 800d11e <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d10a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800d10c:	f7f3 fe66 	bl	8000ddc <Error_Handler>
 800d110:	e7ed      	b.n	800d0ee <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800d112:	f7f3 fe63 	bl	8000ddc <Error_Handler>
 800d116:	e7ef      	b.n	800d0f8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800d118:	f7f3 fe60 	bl	8000ddc <Error_Handler>
 800d11c:	e7f1      	b.n	800d102 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800d11e:	f7f3 fe5d 	bl	8000ddc <Error_Handler>
}
 800d122:	e7f2      	b.n	800d10a <MX_USB_DEVICE_Init+0x2a>
 800d124:	200000b4 	.word	0x200000b4
 800d128:	20006a24 	.word	0x20006a24
 800d12c:	20000008 	.word	0x20000008
 800d130:	20000104 	.word	0x20000104

0800d134 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800d134:	2312      	movs	r3, #18
 800d136:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800d138:	4800      	ldr	r0, [pc, #0]	; (800d13c <USBD_FS_DeviceDescriptor+0x8>)
 800d13a:	4770      	bx	lr
 800d13c:	200000d0 	.word	0x200000d0

0800d140 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800d140:	2304      	movs	r3, #4
 800d142:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d144:	4800      	ldr	r0, [pc, #0]	; (800d148 <USBD_FS_LangIDStrDescriptor+0x8>)
 800d146:	4770      	bx	lr
 800d148:	200000e4 	.word	0x200000e4

0800d14c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800d14c:	2300      	movs	r3, #0
 800d14e:	4293      	cmp	r3, r2
 800d150:	d216      	bcs.n	800d180 <IntToUnicode+0x34>
{
 800d152:	b430      	push	{r4, r5}
 800d154:	e00b      	b.n	800d16e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d156:	3437      	adds	r4, #55	; 0x37
 800d158:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800d15c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800d15e:	005c      	lsls	r4, r3, #1
 800d160:	3401      	adds	r4, #1
 800d162:	2500      	movs	r5, #0
 800d164:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800d166:	3301      	adds	r3, #1
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d206      	bcs.n	800d17c <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800d16e:	0f04      	lsrs	r4, r0, #28
 800d170:	2c09      	cmp	r4, #9
 800d172:	d8f0      	bhi.n	800d156 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800d174:	3430      	adds	r4, #48	; 0x30
 800d176:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800d17a:	e7ef      	b.n	800d15c <IntToUnicode+0x10>
  }
}
 800d17c:	bc30      	pop	{r4, r5}
 800d17e:	4770      	bx	lr
 800d180:	4770      	bx	lr
	...

0800d184 <Get_SerialNum>:
{
 800d184:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d186:	4b0a      	ldr	r3, [pc, #40]	; (800d1b0 <Get_SerialNum+0x2c>)
 800d188:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d18a:	3304      	adds	r3, #4
 800d18c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d18e:	3304      	adds	r3, #4
 800d190:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800d192:	18c0      	adds	r0, r0, r3
 800d194:	d100      	bne.n	800d198 <Get_SerialNum+0x14>
}
 800d196:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d198:	4d06      	ldr	r5, [pc, #24]	; (800d1b4 <Get_SerialNum+0x30>)
 800d19a:	2208      	movs	r2, #8
 800d19c:	1ca9      	adds	r1, r5, #2
 800d19e:	f7ff ffd5 	bl	800d14c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1a2:	2204      	movs	r2, #4
 800d1a4:	f105 0112 	add.w	r1, r5, #18
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7ff ffcf 	bl	800d14c <IntToUnicode>
}
 800d1ae:	e7f2      	b.n	800d196 <Get_SerialNum+0x12>
 800d1b0:	1ffff7e8 	.word	0x1ffff7e8
 800d1b4:	200000e8 	.word	0x200000e8

0800d1b8 <USBD_FS_SerialStrDescriptor>:
{
 800d1b8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d1ba:	231a      	movs	r3, #26
 800d1bc:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800d1be:	f7ff ffe1 	bl	800d184 <Get_SerialNum>
}
 800d1c2:	4801      	ldr	r0, [pc, #4]	; (800d1c8 <USBD_FS_SerialStrDescriptor+0x10>)
 800d1c4:	bd08      	pop	{r3, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200000e8 	.word	0x200000e8

0800d1cc <USBD_FS_ProductStrDescriptor>:
{
 800d1cc:	b508      	push	{r3, lr}
 800d1ce:	460a      	mov	r2, r1
  if(speed == 0)
 800d1d0:	b128      	cbz	r0, 800d1de <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1d2:	4905      	ldr	r1, [pc, #20]	; (800d1e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d1d4:	4805      	ldr	r0, [pc, #20]	; (800d1ec <USBD_FS_ProductStrDescriptor+0x20>)
 800d1d6:	f7fa fc0c 	bl	80079f2 <USBD_GetString>
}
 800d1da:	4803      	ldr	r0, [pc, #12]	; (800d1e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d1dc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1de:	4902      	ldr	r1, [pc, #8]	; (800d1e8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d1e0:	4802      	ldr	r0, [pc, #8]	; (800d1ec <USBD_FS_ProductStrDescriptor+0x20>)
 800d1e2:	f7fa fc06 	bl	80079f2 <USBD_GetString>
 800d1e6:	e7f8      	b.n	800d1da <USBD_FS_ProductStrDescriptor+0xe>
 800d1e8:	20006c48 	.word	0x20006c48
 800d1ec:	0800f514 	.word	0x0800f514

0800d1f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 800d1f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1f2:	4c04      	ldr	r4, [pc, #16]	; (800d204 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800d1f4:	460a      	mov	r2, r1
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4803      	ldr	r0, [pc, #12]	; (800d208 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d1fa:	f7fa fbfa 	bl	80079f2 <USBD_GetString>
}
 800d1fe:	4620      	mov	r0, r4
 800d200:	bd10      	pop	{r4, pc}
 800d202:	bf00      	nop
 800d204:	20006c48 	.word	0x20006c48
 800d208:	0800f500 	.word	0x0800f500

0800d20c <USBD_FS_ConfigStrDescriptor>:
{
 800d20c:	b508      	push	{r3, lr}
 800d20e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d210:	b128      	cbz	r0, 800d21e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d212:	4905      	ldr	r1, [pc, #20]	; (800d228 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d214:	4805      	ldr	r0, [pc, #20]	; (800d22c <USBD_FS_ConfigStrDescriptor+0x20>)
 800d216:	f7fa fbec 	bl	80079f2 <USBD_GetString>
}
 800d21a:	4803      	ldr	r0, [pc, #12]	; (800d228 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d21c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d21e:	4902      	ldr	r1, [pc, #8]	; (800d228 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d220:	4802      	ldr	r0, [pc, #8]	; (800d22c <USBD_FS_ConfigStrDescriptor+0x20>)
 800d222:	f7fa fbe6 	bl	80079f2 <USBD_GetString>
 800d226:	e7f8      	b.n	800d21a <USBD_FS_ConfigStrDescriptor+0xe>
 800d228:	20006c48 	.word	0x20006c48
 800d22c:	0800f4e4 	.word	0x0800f4e4

0800d230 <USBD_FS_InterfaceStrDescriptor>:
{
 800d230:	b508      	push	{r3, lr}
 800d232:	460a      	mov	r2, r1
  if(speed == 0)
 800d234:	b128      	cbz	r0, 800d242 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d236:	4905      	ldr	r1, [pc, #20]	; (800d24c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d238:	4805      	ldr	r0, [pc, #20]	; (800d250 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d23a:	f7fa fbda 	bl	80079f2 <USBD_GetString>
}
 800d23e:	4803      	ldr	r0, [pc, #12]	; (800d24c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d240:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d242:	4902      	ldr	r1, [pc, #8]	; (800d24c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d244:	4802      	ldr	r0, [pc, #8]	; (800d250 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d246:	f7fa fbd4 	bl	80079f2 <USBD_GetString>
 800d24a:	e7f8      	b.n	800d23e <USBD_FS_InterfaceStrDescriptor+0xe>
 800d24c:	20006c48 	.word	0x20006c48
 800d250:	0800f4f0 	.word	0x0800f4f0

0800d254 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d254:	b510      	push	{r4, lr}
 800d256:	4604      	mov	r4, r0

  /* USER CODE BEGIN 2 */
if (SD_Driver.disk_status(lun) == STA_NOINIT) {
 800d258:	4b07      	ldr	r3, [pc, #28]	; (800d278 <STORAGE_Init_FS+0x24>)
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4798      	blx	r3
 800d25e:	2801      	cmp	r0, #1
 800d260:	d108      	bne.n	800d274 <STORAGE_Init_FS+0x20>
    if (SD_Driver.disk_initialize(lun) != 0) {return USBD_FAIL;}
 800d262:	4b05      	ldr	r3, [pc, #20]	; (800d278 <STORAGE_Init_FS+0x24>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4620      	mov	r0, r4
 800d268:	4798      	blx	r3
 800d26a:	b908      	cbnz	r0, 800d270 <STORAGE_Init_FS+0x1c>
    }
 return (USBD_OK);
 800d26c:	2000      	movs	r0, #0
  /* USER CODE END 2 */
}
 800d26e:	bd10      	pop	{r4, pc}
    if (SD_Driver.disk_initialize(lun) != 0) {return USBD_FAIL;}
 800d270:	2002      	movs	r0, #2
 800d272:	e7fc      	b.n	800d26e <STORAGE_Init_FS+0x1a>
 return (USBD_OK);
 800d274:	2000      	movs	r0, #0
 800d276:	e7fa      	b.n	800d26e <STORAGE_Init_FS+0x1a>
 800d278:	0800ee6c 	.word	0x0800ee6c

0800d27c <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	4606      	mov	r6, r0
 800d284:	4688      	mov	r8, r1
 800d286:	4617      	mov	r7, r2
  /* USER CODE BEGIN 3 */
uint32_t sect_cnt = {0};
 800d288:	2300      	movs	r3, #0
 800d28a:	9301      	str	r3, [sp, #4]
uint32_t sect_sz  = {0};
 800d28c:	9300      	str	r3, [sp, #0]
uint8_t res = 0;

res |= SD_Driver.disk_ioctl(lun, GET_SECTOR_COUNT, &sect_cnt );
 800d28e:	4d0d      	ldr	r5, [pc, #52]	; (800d2c4 <STORAGE_GetCapacity_FS+0x48>)
 800d290:	692b      	ldr	r3, [r5, #16]
 800d292:	aa01      	add	r2, sp, #4
 800d294:	2101      	movs	r1, #1
 800d296:	4798      	blx	r3
 800d298:	4604      	mov	r4, r0
res |= SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, &sect_sz);
 800d29a:	692b      	ldr	r3, [r5, #16]
 800d29c:	466a      	mov	r2, sp
 800d29e:	2102      	movs	r1, #2
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4798      	blx	r3
 800d2a4:	4320      	orrs	r0, r4
if (res != 0) {return (USBD_FAIL);}
 800d2a6:	f010 0fff 	tst.w	r0, #255	; 0xff
 800d2aa:	d108      	bne.n	800d2be <STORAGE_GetCapacity_FS+0x42>
*block_num  = sect_cnt; //STORAGE_BLK_NBR;
 800d2ac:	9b01      	ldr	r3, [sp, #4]
 800d2ae:	f8c8 3000 	str.w	r3, [r8]
  *block_size = sect_sz;
 800d2b2:	9b00      	ldr	r3, [sp, #0]
 800d2b4:	803b      	strh	r3, [r7, #0]
  return (USBD_OK);
 800d2b6:	2000      	movs	r0, #0
  /* USER CODE END 3 */
}
 800d2b8:	b002      	add	sp, #8
 800d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (res != 0) {return (USBD_FAIL);}
 800d2be:	2002      	movs	r0, #2
 800d2c0:	e7fa      	b.n	800d2b8 <STORAGE_GetCapacity_FS+0x3c>
 800d2c2:	bf00      	nop
 800d2c4:	0800ee6c 	.word	0x0800ee6c

0800d2c8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800d2c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 4 */
  //if (BSP_SD_IsDetected() != SD_PRESENT) {return USBD_FAIL;}
  if (SD_Driver.disk_status(lun) == STA_NOINIT) {return (USBD_FAIL);}
 800d2ca:	4b04      	ldr	r3, [pc, #16]	; (800d2dc <STORAGE_IsReady_FS+0x14>)
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	4798      	blx	r3
 800d2d0:	2801      	cmp	r0, #1
 800d2d2:	d001      	beq.n	800d2d8 <STORAGE_IsReady_FS+0x10>
  return (USBD_OK);
 800d2d4:	2000      	movs	r0, #0
  /* USER CODE END 4 */
}
 800d2d6:	bd08      	pop	{r3, pc}
  if (SD_Driver.disk_status(lun) == STA_NOINIT) {return (USBD_FAIL);}
 800d2d8:	2002      	movs	r0, #2
 800d2da:	e7fc      	b.n	800d2d6 <STORAGE_IsReady_FS+0xe>
 800d2dc:	0800ee6c 	.word	0x0800ee6c

0800d2e0 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	4770      	bx	lr

0800d2e4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d2e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */

return SD_Driver.disk_read(lun, buf, blk_addr, blk_len);
 800d2e6:	4c02      	ldr	r4, [pc, #8]	; (800d2f0 <STORAGE_Read_FS+0xc>)
 800d2e8:	68a4      	ldr	r4, [r4, #8]
 800d2ea:	47a0      	blx	r4

  /* USER CODE END 6 */
}
 800d2ec:	b240      	sxtb	r0, r0
 800d2ee:	bd10      	pop	{r4, pc}
 800d2f0:	0800ee6c 	.word	0x0800ee6c

0800d2f4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d2f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 7 */

return SD_Driver.disk_write(lun, buf, blk_addr, blk_len);
 800d2f6:	4c02      	ldr	r4, [pc, #8]	; (800d300 <STORAGE_Write_FS+0xc>)
 800d2f8:	68e4      	ldr	r4, [r4, #12]
 800d2fa:	47a0      	blx	r4

  /* USER CODE END 7 */
}
 800d2fc:	b240      	sxtb	r0, r0
 800d2fe:	bd10      	pop	{r4, pc}
 800d300:	0800ee6c 	.word	0x0800ee6c

0800d304 <STORAGE_GetMaxLun_FS>:
{
  /* USER CODE BEGIN 8 */
 int8_t res = STORAGE_LUN_NBR - 1;
  return res;
  /* USER CODE END 8 */
}
 800d304:	2000      	movs	r0, #0
 800d306:	4770      	bx	lr

0800d308 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d308:	b118      	cbz	r0, 800d312 <USBD_Get_USB_Status+0xa>
 800d30a:	2802      	cmp	r0, #2
 800d30c:	d003      	beq.n	800d316 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d30e:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d310:	4770      	bx	lr
      usb_status = USBD_OK;
 800d312:	2000      	movs	r0, #0
 800d314:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800d316:	2001      	movs	r0, #1
    break;
 800d318:	4770      	bx	lr
	...

0800d31c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800d31c:	6802      	ldr	r2, [r0, #0]
 800d31e:	4b0e      	ldr	r3, [pc, #56]	; (800d358 <HAL_PCD_MspInit+0x3c>)
 800d320:	429a      	cmp	r2, r3
 800d322:	d000      	beq.n	800d326 <HAL_PCD_MspInit+0xa>
 800d324:	4770      	bx	lr
{
 800d326:	b500      	push	{lr}
 800d328:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d32a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800d32e:	69da      	ldr	r2, [r3, #28]
 800d330:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d334:	61da      	str	r2, [r3, #28]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d340:	2200      	movs	r2, #0
 800d342:	2105      	movs	r1, #5
 800d344:	2014      	movs	r0, #20
 800d346:	f7f5 f96b 	bl	8002620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d34a:	2014      	movs	r0, #20
 800d34c:	f7f5 f9ae 	bl	80026ac <HAL_NVIC_EnableIRQ>
}
 800d350:	b003      	add	sp, #12
 800d352:	f85d fb04 	ldr.w	pc, [sp], #4
 800d356:	bf00      	nop
 800d358:	40005c00 	.word	0x40005c00

0800d35c <HAL_PCD_SetupStageCallback>:
{
 800d35c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d35e:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800d362:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d366:	f7f9 ffec 	bl	8007342 <USBD_LL_SetupStage>
}
 800d36a:	bd08      	pop	{r3, pc}

0800d36c <HAL_PCD_DataOutStageCallback>:
{
 800d36c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d36e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d372:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800d376:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d37a:	f7fa f80f 	bl	800739c <USBD_LL_DataOutStage>
}
 800d37e:	bd08      	pop	{r3, pc}

0800d380 <HAL_PCD_DataInStageCallback>:
{
 800d380:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d382:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d388:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d38c:	f7fa f83b 	bl	8007406 <USBD_LL_DataInStage>
}
 800d390:	bd08      	pop	{r3, pc}

0800d392 <HAL_PCD_SOFCallback>:
{
 800d392:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d394:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d398:	f7fa f8be 	bl	8007518 <USBD_LL_SOF>
}
 800d39c:	bd08      	pop	{r3, pc}

0800d39e <HAL_PCD_ResetCallback>:
{ 
 800d39e:	b510      	push	{r4, lr}
 800d3a0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d3a2:	6883      	ldr	r3, [r0, #8]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d001      	beq.n	800d3ac <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800d3a8:	f7f3 fd18 	bl	8000ddc <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d3b2:	f7fa f89f 	bl	80074f4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3b6:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d3ba:	f7fa f87c 	bl	80074b6 <USBD_LL_Reset>
}
 800d3be:	bd10      	pop	{r4, pc}

0800d3c0 <HAL_PCD_SuspendCallback>:
{
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3c4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d3c8:	f7fa f897 	bl	80074fa <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800d3cc:	69a3      	ldr	r3, [r4, #24]
 800d3ce:	b123      	cbz	r3, 800d3da <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3d0:	4a02      	ldr	r2, [pc, #8]	; (800d3dc <HAL_PCD_SuspendCallback+0x1c>)
 800d3d2:	6913      	ldr	r3, [r2, #16]
 800d3d4:	f043 0306 	orr.w	r3, r3, #6
 800d3d8:	6113      	str	r3, [r2, #16]
}
 800d3da:	bd10      	pop	{r4, pc}
 800d3dc:	e000ed00 	.word	0xe000ed00

0800d3e0 <HAL_PCD_ResumeCallback>:
{
 800d3e0:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3e2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d3e6:	f7fa f891 	bl	800750c <USBD_LL_Resume>
}
 800d3ea:	bd08      	pop	{r3, pc}

0800d3ec <USBD_LL_Init>:
{
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800d3f0:	4819      	ldr	r0, [pc, #100]	; (800d458 <USBD_LL_Init+0x6c>)
 800d3f2:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800d3f6:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Instance = USB;
 800d3fa:	4b18      	ldr	r3, [pc, #96]	; (800d45c <USBD_LL_Init+0x70>)
 800d3fc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d3fe:	2308      	movs	r3, #8
 800d400:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d402:	2302      	movs	r3, #2
 800d404:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d406:	2300      	movs	r3, #0
 800d408:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d40a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d40c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d40e:	f7f5 fbd7 	bl	8002bc0 <HAL_PCD_Init>
 800d412:	b9e8      	cbnz	r0, 800d450 <USBD_LL_Init+0x64>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d414:	2318      	movs	r3, #24
 800d416:	2200      	movs	r2, #0
 800d418:	4611      	mov	r1, r2
 800d41a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d41e:	f7f6 f848 	bl	80034b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d422:	2358      	movs	r3, #88	; 0x58
 800d424:	2200      	movs	r2, #0
 800d426:	2180      	movs	r1, #128	; 0x80
 800d428:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d42c:	f7f6 f841 	bl	80034b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800d430:	2398      	movs	r3, #152	; 0x98
 800d432:	2200      	movs	r2, #0
 800d434:	2181      	movs	r1, #129	; 0x81
 800d436:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d43a:	f7f6 f83a 	bl	80034b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800d43e:	23d8      	movs	r3, #216	; 0xd8
 800d440:	2200      	movs	r2, #0
 800d442:	2101      	movs	r1, #1
 800d444:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d448:	f7f6 f833 	bl	80034b2 <HAL_PCDEx_PMAConfig>
}
 800d44c:	2000      	movs	r0, #0
 800d44e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d450:	f7f3 fcc4 	bl	8000ddc <Error_Handler>
 800d454:	e7de      	b.n	800d414 <USBD_LL_Init+0x28>
 800d456:	bf00      	nop
 800d458:	20006e48 	.word	0x20006e48
 800d45c:	40005c00 	.word	0x40005c00

0800d460 <USBD_LL_Start>:
{
 800d460:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d462:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d466:	f7f5 fc23 	bl	8002cb0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d46a:	f7ff ff4d 	bl	800d308 <USBD_Get_USB_Status>
}
 800d46e:	bd08      	pop	{r3, pc}

0800d470 <USBD_LL_OpenEP>:
{
 800d470:	b510      	push	{r4, lr}
 800d472:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d474:	4613      	mov	r3, r2
 800d476:	4622      	mov	r2, r4
 800d478:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d47c:	f7f5 fc43 	bl	8002d06 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d480:	f7ff ff42 	bl	800d308 <USBD_Get_USB_Status>
}
 800d484:	bd10      	pop	{r4, pc}

0800d486 <USBD_LL_CloseEP>:
{
 800d486:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d488:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d48c:	f7f5 fc64 	bl	8002d58 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d490:	f7ff ff3a 	bl	800d308 <USBD_Get_USB_Status>
}
 800d494:	bd08      	pop	{r3, pc}

0800d496 <USBD_LL_FlushEP>:
{
 800d496:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d498:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d49c:	f7f5 ffee 	bl	800347c <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a0:	f7ff ff32 	bl	800d308 <USBD_Get_USB_Status>
}
 800d4a4:	bd08      	pop	{r3, pc}

0800d4a6 <USBD_LL_StallEP>:
{
 800d4a6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4a8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d4ac:	f7f5 ff91 	bl	80033d2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4b0:	f7ff ff2a 	bl	800d308 <USBD_Get_USB_Status>
}
 800d4b4:	bd08      	pop	{r3, pc}

0800d4b6 <USBD_LL_ClearStallEP>:
{
 800d4b6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d4b8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d4bc:	f7f5 ffb7 	bl	800342e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4c0:	f7ff ff22 	bl	800d308 <USBD_Get_USB_Status>
}
 800d4c4:	bd08      	pop	{r3, pc}

0800d4c6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4c6:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800d4ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d4ce:	d106      	bne.n	800d4de <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d4d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d4d4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d4d8:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
}
 800d4dc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d4de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d4e2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d4e6:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 800d4ea:	4770      	bx	lr

0800d4ec <USBD_LL_SetUSBAddress>:
{
 800d4ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d4f2:	f7f5 fbf4 	bl	8002cde <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4f6:	f7ff ff07 	bl	800d308 <USBD_Get_USB_Status>
}
 800d4fa:	bd08      	pop	{r3, pc}

0800d4fc <USBD_LL_Transmit>:
{
 800d4fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d502:	f7f5 fc76 	bl	8002df2 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d506:	f7ff feff 	bl	800d308 <USBD_Get_USB_Status>
}
 800d50a:	bd08      	pop	{r3, pc}

0800d50c <USBD_LL_PrepareReceive>:
{
 800d50c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d50e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d512:	f7f5 fc48 	bl	8002da6 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d516:	f7ff fef7 	bl	800d308 <USBD_Get_USB_Status>
}
 800d51a:	bd08      	pop	{r3, pc}

0800d51c <USBD_LL_GetRxDataSize>:
{
 800d51c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d51e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d522:	f7f5 fc5f 	bl	8002de4 <HAL_PCD_EP_GetRxCount>
}
 800d526:	bd08      	pop	{r3, pc}

0800d528 <USBD_static_malloc>:
}
 800d528:	4800      	ldr	r0, [pc, #0]	; (800d52c <USBD_static_malloc+0x4>)
 800d52a:	4770      	bx	lr
 800d52c:	20003d78 	.word	0x20003d78

0800d530 <USBD_static_free>:
}
 800d530:	4770      	bx	lr

0800d532 <HAL_PCDEx_SetConnectionState>:
}
 800d532:	4770      	bx	lr

0800d534 <__assert_func>:
 800d534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d536:	461c      	mov	r4, r3
 800d538:	4b09      	ldr	r3, [pc, #36]	; (800d560 <__assert_func+0x2c>)
 800d53a:	4605      	mov	r5, r0
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68d8      	ldr	r0, [r3, #12]
 800d540:	b152      	cbz	r2, 800d558 <__assert_func+0x24>
 800d542:	4b08      	ldr	r3, [pc, #32]	; (800d564 <__assert_func+0x30>)
 800d544:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d548:	9100      	str	r1, [sp, #0]
 800d54a:	462b      	mov	r3, r5
 800d54c:	4622      	mov	r2, r4
 800d54e:	4906      	ldr	r1, [pc, #24]	; (800d568 <__assert_func+0x34>)
 800d550:	f000 f80e 	bl	800d570 <fiprintf>
 800d554:	f000 fd1a 	bl	800df8c <abort>
 800d558:	4b04      	ldr	r3, [pc, #16]	; (800d56c <__assert_func+0x38>)
 800d55a:	461a      	mov	r2, r3
 800d55c:	e7f2      	b.n	800d544 <__assert_func+0x10>
 800d55e:	bf00      	nop
 800d560:	20000124 	.word	0x20000124
 800d564:	0800f54c 	.word	0x0800f54c
 800d568:	0800f559 	.word	0x0800f559
 800d56c:	0800f587 	.word	0x0800f587

0800d570 <fiprintf>:
 800d570:	b40e      	push	{r1, r2, r3}
 800d572:	b503      	push	{r0, r1, lr}
 800d574:	4601      	mov	r1, r0
 800d576:	ab03      	add	r3, sp, #12
 800d578:	4805      	ldr	r0, [pc, #20]	; (800d590 <fiprintf+0x20>)
 800d57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d57e:	6800      	ldr	r0, [r0, #0]
 800d580:	9301      	str	r3, [sp, #4]
 800d582:	f000 f92b 	bl	800d7dc <_vfiprintf_r>
 800d586:	b002      	add	sp, #8
 800d588:	f85d eb04 	ldr.w	lr, [sp], #4
 800d58c:	b003      	add	sp, #12
 800d58e:	4770      	bx	lr
 800d590:	20000124 	.word	0x20000124

0800d594 <__libc_init_array>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	2500      	movs	r5, #0
 800d598:	4e0c      	ldr	r6, [pc, #48]	; (800d5cc <__libc_init_array+0x38>)
 800d59a:	4c0d      	ldr	r4, [pc, #52]	; (800d5d0 <__libc_init_array+0x3c>)
 800d59c:	1ba4      	subs	r4, r4, r6
 800d59e:	10a4      	asrs	r4, r4, #2
 800d5a0:	42a5      	cmp	r5, r4
 800d5a2:	d109      	bne.n	800d5b8 <__libc_init_array+0x24>
 800d5a4:	f001 f9c2 	bl	800e92c <_init>
 800d5a8:	2500      	movs	r5, #0
 800d5aa:	4e0a      	ldr	r6, [pc, #40]	; (800d5d4 <__libc_init_array+0x40>)
 800d5ac:	4c0a      	ldr	r4, [pc, #40]	; (800d5d8 <__libc_init_array+0x44>)
 800d5ae:	1ba4      	subs	r4, r4, r6
 800d5b0:	10a4      	asrs	r4, r4, #2
 800d5b2:	42a5      	cmp	r5, r4
 800d5b4:	d105      	bne.n	800d5c2 <__libc_init_array+0x2e>
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5bc:	4798      	blx	r3
 800d5be:	3501      	adds	r5, #1
 800d5c0:	e7ee      	b.n	800d5a0 <__libc_init_array+0xc>
 800d5c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5c6:	4798      	blx	r3
 800d5c8:	3501      	adds	r5, #1
 800d5ca:	e7f2      	b.n	800d5b2 <__libc_init_array+0x1e>
 800d5cc:	0800f620 	.word	0x0800f620
 800d5d0:	0800f620 	.word	0x0800f620
 800d5d4:	0800f620 	.word	0x0800f620
 800d5d8:	0800f624 	.word	0x0800f624

0800d5dc <malloc>:
 800d5dc:	4b02      	ldr	r3, [pc, #8]	; (800d5e8 <malloc+0xc>)
 800d5de:	4601      	mov	r1, r0
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	f000 b879 	b.w	800d6d8 <_malloc_r>
 800d5e6:	bf00      	nop
 800d5e8:	20000124 	.word	0x20000124

0800d5ec <free>:
 800d5ec:	4b02      	ldr	r3, [pc, #8]	; (800d5f8 <free+0xc>)
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	f000 b825 	b.w	800d640 <_free_r>
 800d5f6:	bf00      	nop
 800d5f8:	20000124 	.word	0x20000124

0800d5fc <memcmp>:
 800d5fc:	b530      	push	{r4, r5, lr}
 800d5fe:	2400      	movs	r4, #0
 800d600:	42a2      	cmp	r2, r4
 800d602:	d101      	bne.n	800d608 <memcmp+0xc>
 800d604:	2000      	movs	r0, #0
 800d606:	e007      	b.n	800d618 <memcmp+0x1c>
 800d608:	5d03      	ldrb	r3, [r0, r4]
 800d60a:	3401      	adds	r4, #1
 800d60c:	190d      	adds	r5, r1, r4
 800d60e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d612:	42ab      	cmp	r3, r5
 800d614:	d0f4      	beq.n	800d600 <memcmp+0x4>
 800d616:	1b58      	subs	r0, r3, r5
 800d618:	bd30      	pop	{r4, r5, pc}

0800d61a <memcpy>:
 800d61a:	b510      	push	{r4, lr}
 800d61c:	1e43      	subs	r3, r0, #1
 800d61e:	440a      	add	r2, r1
 800d620:	4291      	cmp	r1, r2
 800d622:	d100      	bne.n	800d626 <memcpy+0xc>
 800d624:	bd10      	pop	{r4, pc}
 800d626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d62e:	e7f7      	b.n	800d620 <memcpy+0x6>

0800d630 <memset>:
 800d630:	4603      	mov	r3, r0
 800d632:	4402      	add	r2, r0
 800d634:	4293      	cmp	r3, r2
 800d636:	d100      	bne.n	800d63a <memset+0xa>
 800d638:	4770      	bx	lr
 800d63a:	f803 1b01 	strb.w	r1, [r3], #1
 800d63e:	e7f9      	b.n	800d634 <memset+0x4>

0800d640 <_free_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4605      	mov	r5, r0
 800d644:	2900      	cmp	r1, #0
 800d646:	d043      	beq.n	800d6d0 <_free_r+0x90>
 800d648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64c:	1f0c      	subs	r4, r1, #4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bfb8      	it	lt
 800d652:	18e4      	addlt	r4, r4, r3
 800d654:	f000 fea7 	bl	800e3a6 <__malloc_lock>
 800d658:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <_free_r+0x94>)
 800d65a:	6813      	ldr	r3, [r2, #0]
 800d65c:	4610      	mov	r0, r2
 800d65e:	b933      	cbnz	r3, 800d66e <_free_r+0x2e>
 800d660:	6063      	str	r3, [r4, #4]
 800d662:	6014      	str	r4, [r2, #0]
 800d664:	4628      	mov	r0, r5
 800d666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d66a:	f000 be9d 	b.w	800e3a8 <__malloc_unlock>
 800d66e:	42a3      	cmp	r3, r4
 800d670:	d90b      	bls.n	800d68a <_free_r+0x4a>
 800d672:	6821      	ldr	r1, [r4, #0]
 800d674:	1862      	adds	r2, r4, r1
 800d676:	4293      	cmp	r3, r2
 800d678:	bf01      	itttt	eq
 800d67a:	681a      	ldreq	r2, [r3, #0]
 800d67c:	685b      	ldreq	r3, [r3, #4]
 800d67e:	1852      	addeq	r2, r2, r1
 800d680:	6022      	streq	r2, [r4, #0]
 800d682:	6063      	str	r3, [r4, #4]
 800d684:	6004      	str	r4, [r0, #0]
 800d686:	e7ed      	b.n	800d664 <_free_r+0x24>
 800d688:	4613      	mov	r3, r2
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	b10a      	cbz	r2, 800d692 <_free_r+0x52>
 800d68e:	42a2      	cmp	r2, r4
 800d690:	d9fa      	bls.n	800d688 <_free_r+0x48>
 800d692:	6819      	ldr	r1, [r3, #0]
 800d694:	1858      	adds	r0, r3, r1
 800d696:	42a0      	cmp	r0, r4
 800d698:	d10b      	bne.n	800d6b2 <_free_r+0x72>
 800d69a:	6820      	ldr	r0, [r4, #0]
 800d69c:	4401      	add	r1, r0
 800d69e:	1858      	adds	r0, r3, r1
 800d6a0:	4282      	cmp	r2, r0
 800d6a2:	6019      	str	r1, [r3, #0]
 800d6a4:	d1de      	bne.n	800d664 <_free_r+0x24>
 800d6a6:	6810      	ldr	r0, [r2, #0]
 800d6a8:	6852      	ldr	r2, [r2, #4]
 800d6aa:	4401      	add	r1, r0
 800d6ac:	6019      	str	r1, [r3, #0]
 800d6ae:	605a      	str	r2, [r3, #4]
 800d6b0:	e7d8      	b.n	800d664 <_free_r+0x24>
 800d6b2:	d902      	bls.n	800d6ba <_free_r+0x7a>
 800d6b4:	230c      	movs	r3, #12
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	e7d4      	b.n	800d664 <_free_r+0x24>
 800d6ba:	6820      	ldr	r0, [r4, #0]
 800d6bc:	1821      	adds	r1, r4, r0
 800d6be:	428a      	cmp	r2, r1
 800d6c0:	bf01      	itttt	eq
 800d6c2:	6811      	ldreq	r1, [r2, #0]
 800d6c4:	6852      	ldreq	r2, [r2, #4]
 800d6c6:	1809      	addeq	r1, r1, r0
 800d6c8:	6021      	streq	r1, [r4, #0]
 800d6ca:	6062      	str	r2, [r4, #4]
 800d6cc:	605c      	str	r4, [r3, #4]
 800d6ce:	e7c9      	b.n	800d664 <_free_r+0x24>
 800d6d0:	bd38      	pop	{r3, r4, r5, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20003fe8 	.word	0x20003fe8

0800d6d8 <_malloc_r>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	1ccd      	adds	r5, r1, #3
 800d6dc:	f025 0503 	bic.w	r5, r5, #3
 800d6e0:	3508      	adds	r5, #8
 800d6e2:	2d0c      	cmp	r5, #12
 800d6e4:	bf38      	it	cc
 800d6e6:	250c      	movcc	r5, #12
 800d6e8:	2d00      	cmp	r5, #0
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	db01      	blt.n	800d6f2 <_malloc_r+0x1a>
 800d6ee:	42a9      	cmp	r1, r5
 800d6f0:	d903      	bls.n	800d6fa <_malloc_r+0x22>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	6033      	str	r3, [r6, #0]
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	f000 fe54 	bl	800e3a6 <__malloc_lock>
 800d6fe:	4a21      	ldr	r2, [pc, #132]	; (800d784 <_malloc_r+0xac>)
 800d700:	6814      	ldr	r4, [r2, #0]
 800d702:	4621      	mov	r1, r4
 800d704:	b991      	cbnz	r1, 800d72c <_malloc_r+0x54>
 800d706:	4c20      	ldr	r4, [pc, #128]	; (800d788 <_malloc_r+0xb0>)
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	b91b      	cbnz	r3, 800d714 <_malloc_r+0x3c>
 800d70c:	4630      	mov	r0, r6
 800d70e:	f000 fb1b 	bl	800dd48 <_sbrk_r>
 800d712:	6020      	str	r0, [r4, #0]
 800d714:	4629      	mov	r1, r5
 800d716:	4630      	mov	r0, r6
 800d718:	f000 fb16 	bl	800dd48 <_sbrk_r>
 800d71c:	1c43      	adds	r3, r0, #1
 800d71e:	d124      	bne.n	800d76a <_malloc_r+0x92>
 800d720:	230c      	movs	r3, #12
 800d722:	4630      	mov	r0, r6
 800d724:	6033      	str	r3, [r6, #0]
 800d726:	f000 fe3f 	bl	800e3a8 <__malloc_unlock>
 800d72a:	e7e4      	b.n	800d6f6 <_malloc_r+0x1e>
 800d72c:	680b      	ldr	r3, [r1, #0]
 800d72e:	1b5b      	subs	r3, r3, r5
 800d730:	d418      	bmi.n	800d764 <_malloc_r+0x8c>
 800d732:	2b0b      	cmp	r3, #11
 800d734:	d90f      	bls.n	800d756 <_malloc_r+0x7e>
 800d736:	600b      	str	r3, [r1, #0]
 800d738:	18cc      	adds	r4, r1, r3
 800d73a:	50cd      	str	r5, [r1, r3]
 800d73c:	4630      	mov	r0, r6
 800d73e:	f000 fe33 	bl	800e3a8 <__malloc_unlock>
 800d742:	f104 000b 	add.w	r0, r4, #11
 800d746:	1d23      	adds	r3, r4, #4
 800d748:	f020 0007 	bic.w	r0, r0, #7
 800d74c:	1ac3      	subs	r3, r0, r3
 800d74e:	d0d3      	beq.n	800d6f8 <_malloc_r+0x20>
 800d750:	425a      	negs	r2, r3
 800d752:	50e2      	str	r2, [r4, r3]
 800d754:	e7d0      	b.n	800d6f8 <_malloc_r+0x20>
 800d756:	684b      	ldr	r3, [r1, #4]
 800d758:	428c      	cmp	r4, r1
 800d75a:	bf16      	itet	ne
 800d75c:	6063      	strne	r3, [r4, #4]
 800d75e:	6013      	streq	r3, [r2, #0]
 800d760:	460c      	movne	r4, r1
 800d762:	e7eb      	b.n	800d73c <_malloc_r+0x64>
 800d764:	460c      	mov	r4, r1
 800d766:	6849      	ldr	r1, [r1, #4]
 800d768:	e7cc      	b.n	800d704 <_malloc_r+0x2c>
 800d76a:	1cc4      	adds	r4, r0, #3
 800d76c:	f024 0403 	bic.w	r4, r4, #3
 800d770:	42a0      	cmp	r0, r4
 800d772:	d005      	beq.n	800d780 <_malloc_r+0xa8>
 800d774:	1a21      	subs	r1, r4, r0
 800d776:	4630      	mov	r0, r6
 800d778:	f000 fae6 	bl	800dd48 <_sbrk_r>
 800d77c:	3001      	adds	r0, #1
 800d77e:	d0cf      	beq.n	800d720 <_malloc_r+0x48>
 800d780:	6025      	str	r5, [r4, #0]
 800d782:	e7db      	b.n	800d73c <_malloc_r+0x64>
 800d784:	20003fe8 	.word	0x20003fe8
 800d788:	20003fec 	.word	0x20003fec

0800d78c <__sfputc_r>:
 800d78c:	6893      	ldr	r3, [r2, #8]
 800d78e:	b410      	push	{r4}
 800d790:	3b01      	subs	r3, #1
 800d792:	2b00      	cmp	r3, #0
 800d794:	6093      	str	r3, [r2, #8]
 800d796:	da07      	bge.n	800d7a8 <__sfputc_r+0x1c>
 800d798:	6994      	ldr	r4, [r2, #24]
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	db01      	blt.n	800d7a2 <__sfputc_r+0x16>
 800d79e:	290a      	cmp	r1, #10
 800d7a0:	d102      	bne.n	800d7a8 <__sfputc_r+0x1c>
 800d7a2:	bc10      	pop	{r4}
 800d7a4:	f000 bb32 	b.w	800de0c <__swbuf_r>
 800d7a8:	6813      	ldr	r3, [r2, #0]
 800d7aa:	1c58      	adds	r0, r3, #1
 800d7ac:	6010      	str	r0, [r2, #0]
 800d7ae:	7019      	strb	r1, [r3, #0]
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	bc10      	pop	{r4}
 800d7b4:	4770      	bx	lr

0800d7b6 <__sfputs_r>:
 800d7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	460f      	mov	r7, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	18d5      	adds	r5, r2, r3
 800d7c0:	42ac      	cmp	r4, r5
 800d7c2:	d101      	bne.n	800d7c8 <__sfputs_r+0x12>
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e007      	b.n	800d7d8 <__sfputs_r+0x22>
 800d7c8:	463a      	mov	r2, r7
 800d7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f7ff ffdc 	bl	800d78c <__sfputc_r>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d1f3      	bne.n	800d7c0 <__sfputs_r+0xa>
 800d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7dc <_vfiprintf_r>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	b09d      	sub	sp, #116	; 0x74
 800d7e4:	4617      	mov	r7, r2
 800d7e6:	461d      	mov	r5, r3
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	b118      	cbz	r0, 800d7f4 <_vfiprintf_r+0x18>
 800d7ec:	6983      	ldr	r3, [r0, #24]
 800d7ee:	b90b      	cbnz	r3, 800d7f4 <_vfiprintf_r+0x18>
 800d7f0:	f000 fcc4 	bl	800e17c <__sinit>
 800d7f4:	4b7c      	ldr	r3, [pc, #496]	; (800d9e8 <_vfiprintf_r+0x20c>)
 800d7f6:	429c      	cmp	r4, r3
 800d7f8:	d158      	bne.n	800d8ac <_vfiprintf_r+0xd0>
 800d7fa:	6874      	ldr	r4, [r6, #4]
 800d7fc:	89a3      	ldrh	r3, [r4, #12]
 800d7fe:	0718      	lsls	r0, r3, #28
 800d800:	d55e      	bpl.n	800d8c0 <_vfiprintf_r+0xe4>
 800d802:	6923      	ldr	r3, [r4, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d05b      	beq.n	800d8c0 <_vfiprintf_r+0xe4>
 800d808:	2300      	movs	r3, #0
 800d80a:	9309      	str	r3, [sp, #36]	; 0x24
 800d80c:	2320      	movs	r3, #32
 800d80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d812:	2330      	movs	r3, #48	; 0x30
 800d814:	f04f 0b01 	mov.w	fp, #1
 800d818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d81c:	9503      	str	r5, [sp, #12]
 800d81e:	46b8      	mov	r8, r7
 800d820:	4645      	mov	r5, r8
 800d822:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d826:	b10b      	cbz	r3, 800d82c <_vfiprintf_r+0x50>
 800d828:	2b25      	cmp	r3, #37	; 0x25
 800d82a:	d154      	bne.n	800d8d6 <_vfiprintf_r+0xfa>
 800d82c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d830:	d00b      	beq.n	800d84a <_vfiprintf_r+0x6e>
 800d832:	4653      	mov	r3, sl
 800d834:	463a      	mov	r2, r7
 800d836:	4621      	mov	r1, r4
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff ffbc 	bl	800d7b6 <__sfputs_r>
 800d83e:	3001      	adds	r0, #1
 800d840:	f000 80c2 	beq.w	800d9c8 <_vfiprintf_r+0x1ec>
 800d844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d846:	4453      	add	r3, sl
 800d848:	9309      	str	r3, [sp, #36]	; 0x24
 800d84a:	f898 3000 	ldrb.w	r3, [r8]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 80ba 	beq.w	800d9c8 <_vfiprintf_r+0x1ec>
 800d854:	2300      	movs	r3, #0
 800d856:	f04f 32ff 	mov.w	r2, #4294967295
 800d85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	9307      	str	r3, [sp, #28]
 800d862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d866:	931a      	str	r3, [sp, #104]	; 0x68
 800d868:	46a8      	mov	r8, r5
 800d86a:	2205      	movs	r2, #5
 800d86c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d870:	485e      	ldr	r0, [pc, #376]	; (800d9ec <_vfiprintf_r+0x210>)
 800d872:	f000 fd71 	bl	800e358 <memchr>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	bb78      	cbnz	r0, 800d8da <_vfiprintf_r+0xfe>
 800d87a:	06d9      	lsls	r1, r3, #27
 800d87c:	bf44      	itt	mi
 800d87e:	2220      	movmi	r2, #32
 800d880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d884:	071a      	lsls	r2, r3, #28
 800d886:	bf44      	itt	mi
 800d888:	222b      	movmi	r2, #43	; 0x2b
 800d88a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d88e:	782a      	ldrb	r2, [r5, #0]
 800d890:	2a2a      	cmp	r2, #42	; 0x2a
 800d892:	d02a      	beq.n	800d8ea <_vfiprintf_r+0x10e>
 800d894:	46a8      	mov	r8, r5
 800d896:	2000      	movs	r0, #0
 800d898:	250a      	movs	r5, #10
 800d89a:	9a07      	ldr	r2, [sp, #28]
 800d89c:	4641      	mov	r1, r8
 800d89e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a2:	3b30      	subs	r3, #48	; 0x30
 800d8a4:	2b09      	cmp	r3, #9
 800d8a6:	d969      	bls.n	800d97c <_vfiprintf_r+0x1a0>
 800d8a8:	b360      	cbz	r0, 800d904 <_vfiprintf_r+0x128>
 800d8aa:	e024      	b.n	800d8f6 <_vfiprintf_r+0x11a>
 800d8ac:	4b50      	ldr	r3, [pc, #320]	; (800d9f0 <_vfiprintf_r+0x214>)
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	d101      	bne.n	800d8b6 <_vfiprintf_r+0xda>
 800d8b2:	68b4      	ldr	r4, [r6, #8]
 800d8b4:	e7a2      	b.n	800d7fc <_vfiprintf_r+0x20>
 800d8b6:	4b4f      	ldr	r3, [pc, #316]	; (800d9f4 <_vfiprintf_r+0x218>)
 800d8b8:	429c      	cmp	r4, r3
 800d8ba:	bf08      	it	eq
 800d8bc:	68f4      	ldreq	r4, [r6, #12]
 800d8be:	e79d      	b.n	800d7fc <_vfiprintf_r+0x20>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f000 faf4 	bl	800deb0 <__swsetup_r>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d09d      	beq.n	800d808 <_vfiprintf_r+0x2c>
 800d8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d0:	b01d      	add	sp, #116	; 0x74
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	46a8      	mov	r8, r5
 800d8d8:	e7a2      	b.n	800d820 <_vfiprintf_r+0x44>
 800d8da:	4a44      	ldr	r2, [pc, #272]	; (800d9ec <_vfiprintf_r+0x210>)
 800d8dc:	4645      	mov	r5, r8
 800d8de:	1a80      	subs	r0, r0, r2
 800d8e0:	fa0b f000 	lsl.w	r0, fp, r0
 800d8e4:	4318      	orrs	r0, r3
 800d8e6:	9004      	str	r0, [sp, #16]
 800d8e8:	e7be      	b.n	800d868 <_vfiprintf_r+0x8c>
 800d8ea:	9a03      	ldr	r2, [sp, #12]
 800d8ec:	1d11      	adds	r1, r2, #4
 800d8ee:	6812      	ldr	r2, [r2, #0]
 800d8f0:	9103      	str	r1, [sp, #12]
 800d8f2:	2a00      	cmp	r2, #0
 800d8f4:	db01      	blt.n	800d8fa <_vfiprintf_r+0x11e>
 800d8f6:	9207      	str	r2, [sp, #28]
 800d8f8:	e004      	b.n	800d904 <_vfiprintf_r+0x128>
 800d8fa:	4252      	negs	r2, r2
 800d8fc:	f043 0302 	orr.w	r3, r3, #2
 800d900:	9207      	str	r2, [sp, #28]
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	f898 3000 	ldrb.w	r3, [r8]
 800d908:	2b2e      	cmp	r3, #46	; 0x2e
 800d90a:	d10e      	bne.n	800d92a <_vfiprintf_r+0x14e>
 800d90c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d910:	2b2a      	cmp	r3, #42	; 0x2a
 800d912:	d138      	bne.n	800d986 <_vfiprintf_r+0x1aa>
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	f108 0802 	add.w	r8, r8, #2
 800d91a:	1d1a      	adds	r2, r3, #4
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	9203      	str	r2, [sp, #12]
 800d920:	2b00      	cmp	r3, #0
 800d922:	bfb8      	it	lt
 800d924:	f04f 33ff 	movlt.w	r3, #4294967295
 800d928:	9305      	str	r3, [sp, #20]
 800d92a:	4d33      	ldr	r5, [pc, #204]	; (800d9f8 <_vfiprintf_r+0x21c>)
 800d92c:	2203      	movs	r2, #3
 800d92e:	f898 1000 	ldrb.w	r1, [r8]
 800d932:	4628      	mov	r0, r5
 800d934:	f000 fd10 	bl	800e358 <memchr>
 800d938:	b140      	cbz	r0, 800d94c <_vfiprintf_r+0x170>
 800d93a:	2340      	movs	r3, #64	; 0x40
 800d93c:	1b40      	subs	r0, r0, r5
 800d93e:	fa03 f000 	lsl.w	r0, r3, r0
 800d942:	9b04      	ldr	r3, [sp, #16]
 800d944:	f108 0801 	add.w	r8, r8, #1
 800d948:	4303      	orrs	r3, r0
 800d94a:	9304      	str	r3, [sp, #16]
 800d94c:	f898 1000 	ldrb.w	r1, [r8]
 800d950:	2206      	movs	r2, #6
 800d952:	482a      	ldr	r0, [pc, #168]	; (800d9fc <_vfiprintf_r+0x220>)
 800d954:	f108 0701 	add.w	r7, r8, #1
 800d958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d95c:	f000 fcfc 	bl	800e358 <memchr>
 800d960:	2800      	cmp	r0, #0
 800d962:	d037      	beq.n	800d9d4 <_vfiprintf_r+0x1f8>
 800d964:	4b26      	ldr	r3, [pc, #152]	; (800da00 <_vfiprintf_r+0x224>)
 800d966:	bb1b      	cbnz	r3, 800d9b0 <_vfiprintf_r+0x1d4>
 800d968:	9b03      	ldr	r3, [sp, #12]
 800d96a:	3307      	adds	r3, #7
 800d96c:	f023 0307 	bic.w	r3, r3, #7
 800d970:	3308      	adds	r3, #8
 800d972:	9303      	str	r3, [sp, #12]
 800d974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d976:	444b      	add	r3, r9
 800d978:	9309      	str	r3, [sp, #36]	; 0x24
 800d97a:	e750      	b.n	800d81e <_vfiprintf_r+0x42>
 800d97c:	fb05 3202 	mla	r2, r5, r2, r3
 800d980:	2001      	movs	r0, #1
 800d982:	4688      	mov	r8, r1
 800d984:	e78a      	b.n	800d89c <_vfiprintf_r+0xc0>
 800d986:	2300      	movs	r3, #0
 800d988:	250a      	movs	r5, #10
 800d98a:	4619      	mov	r1, r3
 800d98c:	f108 0801 	add.w	r8, r8, #1
 800d990:	9305      	str	r3, [sp, #20]
 800d992:	4640      	mov	r0, r8
 800d994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d998:	3a30      	subs	r2, #48	; 0x30
 800d99a:	2a09      	cmp	r2, #9
 800d99c:	d903      	bls.n	800d9a6 <_vfiprintf_r+0x1ca>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d0c3      	beq.n	800d92a <_vfiprintf_r+0x14e>
 800d9a2:	9105      	str	r1, [sp, #20]
 800d9a4:	e7c1      	b.n	800d92a <_vfiprintf_r+0x14e>
 800d9a6:	fb05 2101 	mla	r1, r5, r1, r2
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4680      	mov	r8, r0
 800d9ae:	e7f0      	b.n	800d992 <_vfiprintf_r+0x1b6>
 800d9b0:	ab03      	add	r3, sp, #12
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4b13      	ldr	r3, [pc, #76]	; (800da04 <_vfiprintf_r+0x228>)
 800d9b8:	a904      	add	r1, sp, #16
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d9c4:	4681      	mov	r9, r0
 800d9c6:	d1d5      	bne.n	800d974 <_vfiprintf_r+0x198>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	065b      	lsls	r3, r3, #25
 800d9cc:	f53f af7e 	bmi.w	800d8cc <_vfiprintf_r+0xf0>
 800d9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9d2:	e77d      	b.n	800d8d0 <_vfiprintf_r+0xf4>
 800d9d4:	ab03      	add	r3, sp, #12
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4b0a      	ldr	r3, [pc, #40]	; (800da04 <_vfiprintf_r+0x228>)
 800d9dc:	a904      	add	r1, sp, #16
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f000 f888 	bl	800daf4 <_printf_i>
 800d9e4:	e7ec      	b.n	800d9c0 <_vfiprintf_r+0x1e4>
 800d9e6:	bf00      	nop
 800d9e8:	0800f5e0 	.word	0x0800f5e0
 800d9ec:	0800f58c 	.word	0x0800f58c
 800d9f0:	0800f600 	.word	0x0800f600
 800d9f4:	0800f5c0 	.word	0x0800f5c0
 800d9f8:	0800f592 	.word	0x0800f592
 800d9fc:	0800f596 	.word	0x0800f596
 800da00:	00000000 	.word	0x00000000
 800da04:	0800d7b7 	.word	0x0800d7b7

0800da08 <_printf_common>:
 800da08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da0c:	4691      	mov	r9, r2
 800da0e:	461f      	mov	r7, r3
 800da10:	688a      	ldr	r2, [r1, #8]
 800da12:	690b      	ldr	r3, [r1, #16]
 800da14:	4606      	mov	r6, r0
 800da16:	4293      	cmp	r3, r2
 800da18:	bfb8      	it	lt
 800da1a:	4613      	movlt	r3, r2
 800da1c:	f8c9 3000 	str.w	r3, [r9]
 800da20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da24:	460c      	mov	r4, r1
 800da26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da2a:	b112      	cbz	r2, 800da32 <_printf_common+0x2a>
 800da2c:	3301      	adds	r3, #1
 800da2e:	f8c9 3000 	str.w	r3, [r9]
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	0699      	lsls	r1, r3, #26
 800da36:	bf42      	ittt	mi
 800da38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800da3c:	3302      	addmi	r3, #2
 800da3e:	f8c9 3000 	strmi.w	r3, [r9]
 800da42:	6825      	ldr	r5, [r4, #0]
 800da44:	f015 0506 	ands.w	r5, r5, #6
 800da48:	d107      	bne.n	800da5a <_printf_common+0x52>
 800da4a:	f104 0a19 	add.w	sl, r4, #25
 800da4e:	68e3      	ldr	r3, [r4, #12]
 800da50:	f8d9 2000 	ldr.w	r2, [r9]
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	42ab      	cmp	r3, r5
 800da58:	dc29      	bgt.n	800daae <_printf_common+0xa6>
 800da5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800da5e:	6822      	ldr	r2, [r4, #0]
 800da60:	3300      	adds	r3, #0
 800da62:	bf18      	it	ne
 800da64:	2301      	movne	r3, #1
 800da66:	0692      	lsls	r2, r2, #26
 800da68:	d42e      	bmi.n	800dac8 <_printf_common+0xc0>
 800da6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da6e:	4639      	mov	r1, r7
 800da70:	4630      	mov	r0, r6
 800da72:	47c0      	blx	r8
 800da74:	3001      	adds	r0, #1
 800da76:	d021      	beq.n	800dabc <_printf_common+0xb4>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	68e5      	ldr	r5, [r4, #12]
 800da7c:	f003 0306 	and.w	r3, r3, #6
 800da80:	2b04      	cmp	r3, #4
 800da82:	bf18      	it	ne
 800da84:	2500      	movne	r5, #0
 800da86:	f8d9 2000 	ldr.w	r2, [r9]
 800da8a:	f04f 0900 	mov.w	r9, #0
 800da8e:	bf08      	it	eq
 800da90:	1aad      	subeq	r5, r5, r2
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	6922      	ldr	r2, [r4, #16]
 800da96:	bf08      	it	eq
 800da98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da9c:	4293      	cmp	r3, r2
 800da9e:	bfc4      	itt	gt
 800daa0:	1a9b      	subgt	r3, r3, r2
 800daa2:	18ed      	addgt	r5, r5, r3
 800daa4:	341a      	adds	r4, #26
 800daa6:	454d      	cmp	r5, r9
 800daa8:	d11a      	bne.n	800dae0 <_printf_common+0xd8>
 800daaa:	2000      	movs	r0, #0
 800daac:	e008      	b.n	800dac0 <_printf_common+0xb8>
 800daae:	2301      	movs	r3, #1
 800dab0:	4652      	mov	r2, sl
 800dab2:	4639      	mov	r1, r7
 800dab4:	4630      	mov	r0, r6
 800dab6:	47c0      	blx	r8
 800dab8:	3001      	adds	r0, #1
 800daba:	d103      	bne.n	800dac4 <_printf_common+0xbc>
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac4:	3501      	adds	r5, #1
 800dac6:	e7c2      	b.n	800da4e <_printf_common+0x46>
 800dac8:	2030      	movs	r0, #48	; 0x30
 800daca:	18e1      	adds	r1, r4, r3
 800dacc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dad6:	4422      	add	r2, r4
 800dad8:	3302      	adds	r3, #2
 800dada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dade:	e7c4      	b.n	800da6a <_printf_common+0x62>
 800dae0:	2301      	movs	r3, #1
 800dae2:	4622      	mov	r2, r4
 800dae4:	4639      	mov	r1, r7
 800dae6:	4630      	mov	r0, r6
 800dae8:	47c0      	blx	r8
 800daea:	3001      	adds	r0, #1
 800daec:	d0e6      	beq.n	800dabc <_printf_common+0xb4>
 800daee:	f109 0901 	add.w	r9, r9, #1
 800daf2:	e7d8      	b.n	800daa6 <_printf_common+0x9e>

0800daf4 <_printf_i>:
 800daf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dafc:	460c      	mov	r4, r1
 800dafe:	7e09      	ldrb	r1, [r1, #24]
 800db00:	b085      	sub	sp, #20
 800db02:	296e      	cmp	r1, #110	; 0x6e
 800db04:	4617      	mov	r7, r2
 800db06:	4606      	mov	r6, r0
 800db08:	4698      	mov	r8, r3
 800db0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db0c:	f000 80b3 	beq.w	800dc76 <_printf_i+0x182>
 800db10:	d822      	bhi.n	800db58 <_printf_i+0x64>
 800db12:	2963      	cmp	r1, #99	; 0x63
 800db14:	d036      	beq.n	800db84 <_printf_i+0x90>
 800db16:	d80a      	bhi.n	800db2e <_printf_i+0x3a>
 800db18:	2900      	cmp	r1, #0
 800db1a:	f000 80b9 	beq.w	800dc90 <_printf_i+0x19c>
 800db1e:	2958      	cmp	r1, #88	; 0x58
 800db20:	f000 8083 	beq.w	800dc2a <_printf_i+0x136>
 800db24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800db2c:	e032      	b.n	800db94 <_printf_i+0xa0>
 800db2e:	2964      	cmp	r1, #100	; 0x64
 800db30:	d001      	beq.n	800db36 <_printf_i+0x42>
 800db32:	2969      	cmp	r1, #105	; 0x69
 800db34:	d1f6      	bne.n	800db24 <_printf_i+0x30>
 800db36:	6820      	ldr	r0, [r4, #0]
 800db38:	6813      	ldr	r3, [r2, #0]
 800db3a:	0605      	lsls	r5, r0, #24
 800db3c:	f103 0104 	add.w	r1, r3, #4
 800db40:	d52a      	bpl.n	800db98 <_printf_i+0xa4>
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6011      	str	r1, [r2, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	da03      	bge.n	800db52 <_printf_i+0x5e>
 800db4a:	222d      	movs	r2, #45	; 0x2d
 800db4c:	425b      	negs	r3, r3
 800db4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800db52:	486f      	ldr	r0, [pc, #444]	; (800dd10 <_printf_i+0x21c>)
 800db54:	220a      	movs	r2, #10
 800db56:	e039      	b.n	800dbcc <_printf_i+0xd8>
 800db58:	2973      	cmp	r1, #115	; 0x73
 800db5a:	f000 809d 	beq.w	800dc98 <_printf_i+0x1a4>
 800db5e:	d808      	bhi.n	800db72 <_printf_i+0x7e>
 800db60:	296f      	cmp	r1, #111	; 0x6f
 800db62:	d020      	beq.n	800dba6 <_printf_i+0xb2>
 800db64:	2970      	cmp	r1, #112	; 0x70
 800db66:	d1dd      	bne.n	800db24 <_printf_i+0x30>
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	f043 0320 	orr.w	r3, r3, #32
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	e003      	b.n	800db7a <_printf_i+0x86>
 800db72:	2975      	cmp	r1, #117	; 0x75
 800db74:	d017      	beq.n	800dba6 <_printf_i+0xb2>
 800db76:	2978      	cmp	r1, #120	; 0x78
 800db78:	d1d4      	bne.n	800db24 <_printf_i+0x30>
 800db7a:	2378      	movs	r3, #120	; 0x78
 800db7c:	4865      	ldr	r0, [pc, #404]	; (800dd14 <_printf_i+0x220>)
 800db7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db82:	e055      	b.n	800dc30 <_printf_i+0x13c>
 800db84:	6813      	ldr	r3, [r2, #0]
 800db86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db8a:	1d19      	adds	r1, r3, #4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6011      	str	r1, [r2, #0]
 800db90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db94:	2301      	movs	r3, #1
 800db96:	e08c      	b.n	800dcb2 <_printf_i+0x1be>
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db9e:	6011      	str	r1, [r2, #0]
 800dba0:	bf18      	it	ne
 800dba2:	b21b      	sxthne	r3, r3
 800dba4:	e7cf      	b.n	800db46 <_printf_i+0x52>
 800dba6:	6813      	ldr	r3, [r2, #0]
 800dba8:	6825      	ldr	r5, [r4, #0]
 800dbaa:	1d18      	adds	r0, r3, #4
 800dbac:	6010      	str	r0, [r2, #0]
 800dbae:	0628      	lsls	r0, r5, #24
 800dbb0:	d501      	bpl.n	800dbb6 <_printf_i+0xc2>
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	e002      	b.n	800dbbc <_printf_i+0xc8>
 800dbb6:	0668      	lsls	r0, r5, #25
 800dbb8:	d5fb      	bpl.n	800dbb2 <_printf_i+0xbe>
 800dbba:	881b      	ldrh	r3, [r3, #0]
 800dbbc:	296f      	cmp	r1, #111	; 0x6f
 800dbbe:	bf14      	ite	ne
 800dbc0:	220a      	movne	r2, #10
 800dbc2:	2208      	moveq	r2, #8
 800dbc4:	4852      	ldr	r0, [pc, #328]	; (800dd10 <_printf_i+0x21c>)
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbcc:	6865      	ldr	r5, [r4, #4]
 800dbce:	2d00      	cmp	r5, #0
 800dbd0:	60a5      	str	r5, [r4, #8]
 800dbd2:	f2c0 8095 	blt.w	800dd00 <_printf_i+0x20c>
 800dbd6:	6821      	ldr	r1, [r4, #0]
 800dbd8:	f021 0104 	bic.w	r1, r1, #4
 800dbdc:	6021      	str	r1, [r4, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d13d      	bne.n	800dc5e <_printf_i+0x16a>
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	f040 808e 	bne.w	800dd04 <_printf_i+0x210>
 800dbe8:	4665      	mov	r5, ip
 800dbea:	2a08      	cmp	r2, #8
 800dbec:	d10b      	bne.n	800dc06 <_printf_i+0x112>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	07db      	lsls	r3, r3, #31
 800dbf2:	d508      	bpl.n	800dc06 <_printf_i+0x112>
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	6862      	ldr	r2, [r4, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	bfde      	ittt	le
 800dbfc:	2330      	movle	r3, #48	; 0x30
 800dbfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc02:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc06:	ebac 0305 	sub.w	r3, ip, r5
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	f8cd 8000 	str.w	r8, [sp]
 800dc10:	463b      	mov	r3, r7
 800dc12:	aa03      	add	r2, sp, #12
 800dc14:	4621      	mov	r1, r4
 800dc16:	4630      	mov	r0, r6
 800dc18:	f7ff fef6 	bl	800da08 <_printf_common>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d14d      	bne.n	800dcbc <_printf_i+0x1c8>
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	b005      	add	sp, #20
 800dc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc2a:	4839      	ldr	r0, [pc, #228]	; (800dd10 <_printf_i+0x21c>)
 800dc2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dc30:	6813      	ldr	r3, [r2, #0]
 800dc32:	6821      	ldr	r1, [r4, #0]
 800dc34:	1d1d      	adds	r5, r3, #4
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6015      	str	r5, [r2, #0]
 800dc3a:	060a      	lsls	r2, r1, #24
 800dc3c:	d50b      	bpl.n	800dc56 <_printf_i+0x162>
 800dc3e:	07ca      	lsls	r2, r1, #31
 800dc40:	bf44      	itt	mi
 800dc42:	f041 0120 	orrmi.w	r1, r1, #32
 800dc46:	6021      	strmi	r1, [r4, #0]
 800dc48:	b91b      	cbnz	r3, 800dc52 <_printf_i+0x15e>
 800dc4a:	6822      	ldr	r2, [r4, #0]
 800dc4c:	f022 0220 	bic.w	r2, r2, #32
 800dc50:	6022      	str	r2, [r4, #0]
 800dc52:	2210      	movs	r2, #16
 800dc54:	e7b7      	b.n	800dbc6 <_printf_i+0xd2>
 800dc56:	064d      	lsls	r5, r1, #25
 800dc58:	bf48      	it	mi
 800dc5a:	b29b      	uxthmi	r3, r3
 800dc5c:	e7ef      	b.n	800dc3e <_printf_i+0x14a>
 800dc5e:	4665      	mov	r5, ip
 800dc60:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc64:	fb02 3311 	mls	r3, r2, r1, r3
 800dc68:	5cc3      	ldrb	r3, [r0, r3]
 800dc6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dc6e:	460b      	mov	r3, r1
 800dc70:	2900      	cmp	r1, #0
 800dc72:	d1f5      	bne.n	800dc60 <_printf_i+0x16c>
 800dc74:	e7b9      	b.n	800dbea <_printf_i+0xf6>
 800dc76:	6813      	ldr	r3, [r2, #0]
 800dc78:	6825      	ldr	r5, [r4, #0]
 800dc7a:	1d18      	adds	r0, r3, #4
 800dc7c:	6961      	ldr	r1, [r4, #20]
 800dc7e:	6010      	str	r0, [r2, #0]
 800dc80:	0628      	lsls	r0, r5, #24
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	d501      	bpl.n	800dc8a <_printf_i+0x196>
 800dc86:	6019      	str	r1, [r3, #0]
 800dc88:	e002      	b.n	800dc90 <_printf_i+0x19c>
 800dc8a:	066a      	lsls	r2, r5, #25
 800dc8c:	d5fb      	bpl.n	800dc86 <_printf_i+0x192>
 800dc8e:	8019      	strh	r1, [r3, #0]
 800dc90:	2300      	movs	r3, #0
 800dc92:	4665      	mov	r5, ip
 800dc94:	6123      	str	r3, [r4, #16]
 800dc96:	e7b9      	b.n	800dc0c <_printf_i+0x118>
 800dc98:	6813      	ldr	r3, [r2, #0]
 800dc9a:	1d19      	adds	r1, r3, #4
 800dc9c:	6011      	str	r1, [r2, #0]
 800dc9e:	681d      	ldr	r5, [r3, #0]
 800dca0:	6862      	ldr	r2, [r4, #4]
 800dca2:	2100      	movs	r1, #0
 800dca4:	4628      	mov	r0, r5
 800dca6:	f000 fb57 	bl	800e358 <memchr>
 800dcaa:	b108      	cbz	r0, 800dcb0 <_printf_i+0x1bc>
 800dcac:	1b40      	subs	r0, r0, r5
 800dcae:	6060      	str	r0, [r4, #4]
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcba:	e7a7      	b.n	800dc0c <_printf_i+0x118>
 800dcbc:	6923      	ldr	r3, [r4, #16]
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	4639      	mov	r1, r7
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	47c0      	blx	r8
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	d0aa      	beq.n	800dc20 <_printf_i+0x12c>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	079b      	lsls	r3, r3, #30
 800dcce:	d413      	bmi.n	800dcf8 <_printf_i+0x204>
 800dcd0:	68e0      	ldr	r0, [r4, #12]
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	4298      	cmp	r0, r3
 800dcd6:	bfb8      	it	lt
 800dcd8:	4618      	movlt	r0, r3
 800dcda:	e7a3      	b.n	800dc24 <_printf_i+0x130>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	464a      	mov	r2, r9
 800dce0:	4639      	mov	r1, r7
 800dce2:	4630      	mov	r0, r6
 800dce4:	47c0      	blx	r8
 800dce6:	3001      	adds	r0, #1
 800dce8:	d09a      	beq.n	800dc20 <_printf_i+0x12c>
 800dcea:	3501      	adds	r5, #1
 800dcec:	68e3      	ldr	r3, [r4, #12]
 800dcee:	9a03      	ldr	r2, [sp, #12]
 800dcf0:	1a9b      	subs	r3, r3, r2
 800dcf2:	42ab      	cmp	r3, r5
 800dcf4:	dcf2      	bgt.n	800dcdc <_printf_i+0x1e8>
 800dcf6:	e7eb      	b.n	800dcd0 <_printf_i+0x1dc>
 800dcf8:	2500      	movs	r5, #0
 800dcfa:	f104 0919 	add.w	r9, r4, #25
 800dcfe:	e7f5      	b.n	800dcec <_printf_i+0x1f8>
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1ac      	bne.n	800dc5e <_printf_i+0x16a>
 800dd04:	7803      	ldrb	r3, [r0, #0]
 800dd06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd0e:	e76c      	b.n	800dbea <_printf_i+0xf6>
 800dd10:	0800f59d 	.word	0x0800f59d
 800dd14:	0800f5ae 	.word	0x0800f5ae

0800dd18 <iprintf>:
 800dd18:	b40f      	push	{r0, r1, r2, r3}
 800dd1a:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <iprintf+0x2c>)
 800dd1c:	b513      	push	{r0, r1, r4, lr}
 800dd1e:	681c      	ldr	r4, [r3, #0]
 800dd20:	b124      	cbz	r4, 800dd2c <iprintf+0x14>
 800dd22:	69a3      	ldr	r3, [r4, #24]
 800dd24:	b913      	cbnz	r3, 800dd2c <iprintf+0x14>
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fa28 	bl	800e17c <__sinit>
 800dd2c:	ab05      	add	r3, sp, #20
 800dd2e:	9a04      	ldr	r2, [sp, #16]
 800dd30:	68a1      	ldr	r1, [r4, #8]
 800dd32:	4620      	mov	r0, r4
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	f7ff fd51 	bl	800d7dc <_vfiprintf_r>
 800dd3a:	b002      	add	sp, #8
 800dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd40:	b004      	add	sp, #16
 800dd42:	4770      	bx	lr
 800dd44:	20000124 	.word	0x20000124

0800dd48 <_sbrk_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	4c05      	ldr	r4, [pc, #20]	; (800dd64 <_sbrk_r+0x1c>)
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	f000 fdd2 	bl	800e8fc <_sbrk>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_sbrk_r+0x1a>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_sbrk_r+0x1a>
 800dd60:	602b      	str	r3, [r5, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	200072a8 	.word	0x200072a8

0800dd68 <siprintf>:
 800dd68:	b40e      	push	{r1, r2, r3}
 800dd6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd6e:	b500      	push	{lr}
 800dd70:	b09c      	sub	sp, #112	; 0x70
 800dd72:	ab1d      	add	r3, sp, #116	; 0x74
 800dd74:	9002      	str	r0, [sp, #8]
 800dd76:	9006      	str	r0, [sp, #24]
 800dd78:	9107      	str	r1, [sp, #28]
 800dd7a:	9104      	str	r1, [sp, #16]
 800dd7c:	4808      	ldr	r0, [pc, #32]	; (800dda0 <siprintf+0x38>)
 800dd7e:	4909      	ldr	r1, [pc, #36]	; (800dda4 <siprintf+0x3c>)
 800dd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd84:	9105      	str	r1, [sp, #20]
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	a902      	add	r1, sp, #8
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	f000 fb8e 	bl	800e4ac <_svfiprintf_r>
 800dd90:	2200      	movs	r2, #0
 800dd92:	9b02      	ldr	r3, [sp, #8]
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	b01c      	add	sp, #112	; 0x70
 800dd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd9c:	b003      	add	sp, #12
 800dd9e:	4770      	bx	lr
 800dda0:	20000124 	.word	0x20000124
 800dda4:	ffff0208 	.word	0xffff0208

0800dda8 <strchr>:
 800dda8:	b2c9      	uxtb	r1, r1
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb0:	b11a      	cbz	r2, 800ddba <strchr+0x12>
 800ddb2:	428a      	cmp	r2, r1
 800ddb4:	d1f9      	bne.n	800ddaa <strchr+0x2>
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	4770      	bx	lr
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	bf18      	it	ne
 800ddbe:	2300      	movne	r3, #0
 800ddc0:	e7f9      	b.n	800ddb6 <strchr+0xe>

0800ddc2 <strcspn>:
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ddcc:	b14d      	cbz	r5, 800dde2 <strcspn+0x20>
 800ddce:	1e4c      	subs	r4, r1, #1
 800ddd0:	e001      	b.n	800ddd6 <strcspn+0x14>
 800ddd2:	42ae      	cmp	r6, r5
 800ddd4:	d005      	beq.n	800dde2 <strcspn+0x20>
 800ddd6:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d1f9      	bne.n	800ddd2 <strcspn+0x10>
 800ddde:	4613      	mov	r3, r2
 800dde0:	e7f1      	b.n	800ddc6 <strcspn+0x4>
 800dde2:	1a18      	subs	r0, r3, r0
 800dde4:	bd70      	pop	{r4, r5, r6, pc}

0800dde6 <strspn>:
 800dde6:	4603      	mov	r3, r0
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	461a      	mov	r2, r3
 800ddec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ddf0:	b13d      	cbz	r5, 800de02 <strspn+0x1c>
 800ddf2:	1e4c      	subs	r4, r1, #1
 800ddf4:	e001      	b.n	800ddfa <strspn+0x14>
 800ddf6:	42ae      	cmp	r6, r5
 800ddf8:	d005      	beq.n	800de06 <strspn+0x20>
 800ddfa:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d1f9      	bne.n	800ddf6 <strspn+0x10>
 800de02:	1a18      	subs	r0, r3, r0
 800de04:	bd70      	pop	{r4, r5, r6, pc}
 800de06:	4613      	mov	r3, r2
 800de08:	e7ef      	b.n	800ddea <strspn+0x4>
	...

0800de0c <__swbuf_r>:
 800de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0e:	460e      	mov	r6, r1
 800de10:	4614      	mov	r4, r2
 800de12:	4605      	mov	r5, r0
 800de14:	b118      	cbz	r0, 800de1e <__swbuf_r+0x12>
 800de16:	6983      	ldr	r3, [r0, #24]
 800de18:	b90b      	cbnz	r3, 800de1e <__swbuf_r+0x12>
 800de1a:	f000 f9af 	bl	800e17c <__sinit>
 800de1e:	4b21      	ldr	r3, [pc, #132]	; (800dea4 <__swbuf_r+0x98>)
 800de20:	429c      	cmp	r4, r3
 800de22:	d12a      	bne.n	800de7a <__swbuf_r+0x6e>
 800de24:	686c      	ldr	r4, [r5, #4]
 800de26:	69a3      	ldr	r3, [r4, #24]
 800de28:	60a3      	str	r3, [r4, #8]
 800de2a:	89a3      	ldrh	r3, [r4, #12]
 800de2c:	071a      	lsls	r2, r3, #28
 800de2e:	d52e      	bpl.n	800de8e <__swbuf_r+0x82>
 800de30:	6923      	ldr	r3, [r4, #16]
 800de32:	b363      	cbz	r3, 800de8e <__swbuf_r+0x82>
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	6820      	ldr	r0, [r4, #0]
 800de38:	b2f6      	uxtb	r6, r6
 800de3a:	1ac0      	subs	r0, r0, r3
 800de3c:	6963      	ldr	r3, [r4, #20]
 800de3e:	4637      	mov	r7, r6
 800de40:	4283      	cmp	r3, r0
 800de42:	dc04      	bgt.n	800de4e <__swbuf_r+0x42>
 800de44:	4621      	mov	r1, r4
 800de46:	4628      	mov	r0, r5
 800de48:	f000 f92e 	bl	800e0a8 <_fflush_r>
 800de4c:	bb28      	cbnz	r0, 800de9a <__swbuf_r+0x8e>
 800de4e:	68a3      	ldr	r3, [r4, #8]
 800de50:	3001      	adds	r0, #1
 800de52:	3b01      	subs	r3, #1
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	1c5a      	adds	r2, r3, #1
 800de5a:	6022      	str	r2, [r4, #0]
 800de5c:	701e      	strb	r6, [r3, #0]
 800de5e:	6963      	ldr	r3, [r4, #20]
 800de60:	4283      	cmp	r3, r0
 800de62:	d004      	beq.n	800de6e <__swbuf_r+0x62>
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	07db      	lsls	r3, r3, #31
 800de68:	d519      	bpl.n	800de9e <__swbuf_r+0x92>
 800de6a:	2e0a      	cmp	r6, #10
 800de6c:	d117      	bne.n	800de9e <__swbuf_r+0x92>
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	f000 f919 	bl	800e0a8 <_fflush_r>
 800de76:	b190      	cbz	r0, 800de9e <__swbuf_r+0x92>
 800de78:	e00f      	b.n	800de9a <__swbuf_r+0x8e>
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <__swbuf_r+0x9c>)
 800de7c:	429c      	cmp	r4, r3
 800de7e:	d101      	bne.n	800de84 <__swbuf_r+0x78>
 800de80:	68ac      	ldr	r4, [r5, #8]
 800de82:	e7d0      	b.n	800de26 <__swbuf_r+0x1a>
 800de84:	4b09      	ldr	r3, [pc, #36]	; (800deac <__swbuf_r+0xa0>)
 800de86:	429c      	cmp	r4, r3
 800de88:	bf08      	it	eq
 800de8a:	68ec      	ldreq	r4, [r5, #12]
 800de8c:	e7cb      	b.n	800de26 <__swbuf_r+0x1a>
 800de8e:	4621      	mov	r1, r4
 800de90:	4628      	mov	r0, r5
 800de92:	f000 f80d 	bl	800deb0 <__swsetup_r>
 800de96:	2800      	cmp	r0, #0
 800de98:	d0cc      	beq.n	800de34 <__swbuf_r+0x28>
 800de9a:	f04f 37ff 	mov.w	r7, #4294967295
 800de9e:	4638      	mov	r0, r7
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea2:	bf00      	nop
 800dea4:	0800f5e0 	.word	0x0800f5e0
 800dea8:	0800f600 	.word	0x0800f600
 800deac:	0800f5c0 	.word	0x0800f5c0

0800deb0 <__swsetup_r>:
 800deb0:	4b32      	ldr	r3, [pc, #200]	; (800df7c <__swsetup_r+0xcc>)
 800deb2:	b570      	push	{r4, r5, r6, lr}
 800deb4:	681d      	ldr	r5, [r3, #0]
 800deb6:	4606      	mov	r6, r0
 800deb8:	460c      	mov	r4, r1
 800deba:	b125      	cbz	r5, 800dec6 <__swsetup_r+0x16>
 800debc:	69ab      	ldr	r3, [r5, #24]
 800debe:	b913      	cbnz	r3, 800dec6 <__swsetup_r+0x16>
 800dec0:	4628      	mov	r0, r5
 800dec2:	f000 f95b 	bl	800e17c <__sinit>
 800dec6:	4b2e      	ldr	r3, [pc, #184]	; (800df80 <__swsetup_r+0xd0>)
 800dec8:	429c      	cmp	r4, r3
 800deca:	d10f      	bne.n	800deec <__swsetup_r+0x3c>
 800decc:	686c      	ldr	r4, [r5, #4]
 800dece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	0715      	lsls	r5, r2, #28
 800ded6:	d42c      	bmi.n	800df32 <__swsetup_r+0x82>
 800ded8:	06d0      	lsls	r0, r2, #27
 800deda:	d411      	bmi.n	800df00 <__swsetup_r+0x50>
 800dedc:	2209      	movs	r2, #9
 800dede:	6032      	str	r2, [r6, #0]
 800dee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dee4:	81a3      	strh	r3, [r4, #12]
 800dee6:	f04f 30ff 	mov.w	r0, #4294967295
 800deea:	e03e      	b.n	800df6a <__swsetup_r+0xba>
 800deec:	4b25      	ldr	r3, [pc, #148]	; (800df84 <__swsetup_r+0xd4>)
 800deee:	429c      	cmp	r4, r3
 800def0:	d101      	bne.n	800def6 <__swsetup_r+0x46>
 800def2:	68ac      	ldr	r4, [r5, #8]
 800def4:	e7eb      	b.n	800dece <__swsetup_r+0x1e>
 800def6:	4b24      	ldr	r3, [pc, #144]	; (800df88 <__swsetup_r+0xd8>)
 800def8:	429c      	cmp	r4, r3
 800defa:	bf08      	it	eq
 800defc:	68ec      	ldreq	r4, [r5, #12]
 800defe:	e7e6      	b.n	800dece <__swsetup_r+0x1e>
 800df00:	0751      	lsls	r1, r2, #29
 800df02:	d512      	bpl.n	800df2a <__swsetup_r+0x7a>
 800df04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df06:	b141      	cbz	r1, 800df1a <__swsetup_r+0x6a>
 800df08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df0c:	4299      	cmp	r1, r3
 800df0e:	d002      	beq.n	800df16 <__swsetup_r+0x66>
 800df10:	4630      	mov	r0, r6
 800df12:	f7ff fb95 	bl	800d640 <_free_r>
 800df16:	2300      	movs	r3, #0
 800df18:	6363      	str	r3, [r4, #52]	; 0x34
 800df1a:	89a3      	ldrh	r3, [r4, #12]
 800df1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df20:	81a3      	strh	r3, [r4, #12]
 800df22:	2300      	movs	r3, #0
 800df24:	6063      	str	r3, [r4, #4]
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0308 	orr.w	r3, r3, #8
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	b94b      	cbnz	r3, 800df4a <__swsetup_r+0x9a>
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df40:	d003      	beq.n	800df4a <__swsetup_r+0x9a>
 800df42:	4621      	mov	r1, r4
 800df44:	4630      	mov	r0, r6
 800df46:	f000 f9c7 	bl	800e2d8 <__smakebuf_r>
 800df4a:	89a2      	ldrh	r2, [r4, #12]
 800df4c:	f012 0301 	ands.w	r3, r2, #1
 800df50:	d00c      	beq.n	800df6c <__swsetup_r+0xbc>
 800df52:	2300      	movs	r3, #0
 800df54:	60a3      	str	r3, [r4, #8]
 800df56:	6963      	ldr	r3, [r4, #20]
 800df58:	425b      	negs	r3, r3
 800df5a:	61a3      	str	r3, [r4, #24]
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	b953      	cbnz	r3, 800df76 <__swsetup_r+0xc6>
 800df60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800df68:	d1ba      	bne.n	800dee0 <__swsetup_r+0x30>
 800df6a:	bd70      	pop	{r4, r5, r6, pc}
 800df6c:	0792      	lsls	r2, r2, #30
 800df6e:	bf58      	it	pl
 800df70:	6963      	ldrpl	r3, [r4, #20]
 800df72:	60a3      	str	r3, [r4, #8]
 800df74:	e7f2      	b.n	800df5c <__swsetup_r+0xac>
 800df76:	2000      	movs	r0, #0
 800df78:	e7f7      	b.n	800df6a <__swsetup_r+0xba>
 800df7a:	bf00      	nop
 800df7c:	20000124 	.word	0x20000124
 800df80:	0800f5e0 	.word	0x0800f5e0
 800df84:	0800f600 	.word	0x0800f600
 800df88:	0800f5c0 	.word	0x0800f5c0

0800df8c <abort>:
 800df8c:	b508      	push	{r3, lr}
 800df8e:	2006      	movs	r0, #6
 800df90:	f000 fbac 	bl	800e6ec <raise>
 800df94:	2001      	movs	r0, #1
 800df96:	f000 fcc7 	bl	800e928 <_exit>
	...

0800df9c <__sflush_r>:
 800df9c:	898a      	ldrh	r2, [r1, #12]
 800df9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	0710      	lsls	r0, r2, #28
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	d458      	bmi.n	800e05c <__sflush_r+0xc0>
 800dfaa:	684b      	ldr	r3, [r1, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dc05      	bgt.n	800dfbc <__sflush_r+0x20>
 800dfb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	dc02      	bgt.n	800dfbc <__sflush_r+0x20>
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfbe:	2e00      	cmp	r6, #0
 800dfc0:	d0f9      	beq.n	800dfb6 <__sflush_r+0x1a>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfc8:	682f      	ldr	r7, [r5, #0]
 800dfca:	6a21      	ldr	r1, [r4, #32]
 800dfcc:	602b      	str	r3, [r5, #0]
 800dfce:	d032      	beq.n	800e036 <__sflush_r+0x9a>
 800dfd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	075a      	lsls	r2, r3, #29
 800dfd6:	d505      	bpl.n	800dfe4 <__sflush_r+0x48>
 800dfd8:	6863      	ldr	r3, [r4, #4]
 800dfda:	1ac0      	subs	r0, r0, r3
 800dfdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfde:	b10b      	cbz	r3, 800dfe4 <__sflush_r+0x48>
 800dfe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfe2:	1ac0      	subs	r0, r0, r3
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfea:	6a21      	ldr	r1, [r4, #32]
 800dfec:	4628      	mov	r0, r5
 800dfee:	47b0      	blx	r6
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	d106      	bne.n	800e004 <__sflush_r+0x68>
 800dff6:	6829      	ldr	r1, [r5, #0]
 800dff8:	291d      	cmp	r1, #29
 800dffa:	d848      	bhi.n	800e08e <__sflush_r+0xf2>
 800dffc:	4a29      	ldr	r2, [pc, #164]	; (800e0a4 <__sflush_r+0x108>)
 800dffe:	40ca      	lsrs	r2, r1
 800e000:	07d6      	lsls	r6, r2, #31
 800e002:	d544      	bpl.n	800e08e <__sflush_r+0xf2>
 800e004:	2200      	movs	r2, #0
 800e006:	6062      	str	r2, [r4, #4]
 800e008:	6922      	ldr	r2, [r4, #16]
 800e00a:	04d9      	lsls	r1, r3, #19
 800e00c:	6022      	str	r2, [r4, #0]
 800e00e:	d504      	bpl.n	800e01a <__sflush_r+0x7e>
 800e010:	1c42      	adds	r2, r0, #1
 800e012:	d101      	bne.n	800e018 <__sflush_r+0x7c>
 800e014:	682b      	ldr	r3, [r5, #0]
 800e016:	b903      	cbnz	r3, 800e01a <__sflush_r+0x7e>
 800e018:	6560      	str	r0, [r4, #84]	; 0x54
 800e01a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e01c:	602f      	str	r7, [r5, #0]
 800e01e:	2900      	cmp	r1, #0
 800e020:	d0c9      	beq.n	800dfb6 <__sflush_r+0x1a>
 800e022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e026:	4299      	cmp	r1, r3
 800e028:	d002      	beq.n	800e030 <__sflush_r+0x94>
 800e02a:	4628      	mov	r0, r5
 800e02c:	f7ff fb08 	bl	800d640 <_free_r>
 800e030:	2000      	movs	r0, #0
 800e032:	6360      	str	r0, [r4, #52]	; 0x34
 800e034:	e7c0      	b.n	800dfb8 <__sflush_r+0x1c>
 800e036:	2301      	movs	r3, #1
 800e038:	4628      	mov	r0, r5
 800e03a:	47b0      	blx	r6
 800e03c:	1c41      	adds	r1, r0, #1
 800e03e:	d1c8      	bne.n	800dfd2 <__sflush_r+0x36>
 800e040:	682b      	ldr	r3, [r5, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0c5      	beq.n	800dfd2 <__sflush_r+0x36>
 800e046:	2b1d      	cmp	r3, #29
 800e048:	d001      	beq.n	800e04e <__sflush_r+0xb2>
 800e04a:	2b16      	cmp	r3, #22
 800e04c:	d101      	bne.n	800e052 <__sflush_r+0xb6>
 800e04e:	602f      	str	r7, [r5, #0]
 800e050:	e7b1      	b.n	800dfb6 <__sflush_r+0x1a>
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e058:	81a3      	strh	r3, [r4, #12]
 800e05a:	e7ad      	b.n	800dfb8 <__sflush_r+0x1c>
 800e05c:	690f      	ldr	r7, [r1, #16]
 800e05e:	2f00      	cmp	r7, #0
 800e060:	d0a9      	beq.n	800dfb6 <__sflush_r+0x1a>
 800e062:	0793      	lsls	r3, r2, #30
 800e064:	bf18      	it	ne
 800e066:	2300      	movne	r3, #0
 800e068:	680e      	ldr	r6, [r1, #0]
 800e06a:	bf08      	it	eq
 800e06c:	694b      	ldreq	r3, [r1, #20]
 800e06e:	eba6 0807 	sub.w	r8, r6, r7
 800e072:	600f      	str	r7, [r1, #0]
 800e074:	608b      	str	r3, [r1, #8]
 800e076:	f1b8 0f00 	cmp.w	r8, #0
 800e07a:	dd9c      	ble.n	800dfb6 <__sflush_r+0x1a>
 800e07c:	4643      	mov	r3, r8
 800e07e:	463a      	mov	r2, r7
 800e080:	6a21      	ldr	r1, [r4, #32]
 800e082:	4628      	mov	r0, r5
 800e084:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e086:	47b0      	blx	r6
 800e088:	2800      	cmp	r0, #0
 800e08a:	dc06      	bgt.n	800e09a <__sflush_r+0xfe>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	e78e      	b.n	800dfb8 <__sflush_r+0x1c>
 800e09a:	4407      	add	r7, r0
 800e09c:	eba8 0800 	sub.w	r8, r8, r0
 800e0a0:	e7e9      	b.n	800e076 <__sflush_r+0xda>
 800e0a2:	bf00      	nop
 800e0a4:	20400001 	.word	0x20400001

0800e0a8 <_fflush_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	690b      	ldr	r3, [r1, #16]
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	b1db      	cbz	r3, 800e0ea <_fflush_r+0x42>
 800e0b2:	b118      	cbz	r0, 800e0bc <_fflush_r+0x14>
 800e0b4:	6983      	ldr	r3, [r0, #24]
 800e0b6:	b90b      	cbnz	r3, 800e0bc <_fflush_r+0x14>
 800e0b8:	f000 f860 	bl	800e17c <__sinit>
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <_fflush_r+0x48>)
 800e0be:	429c      	cmp	r4, r3
 800e0c0:	d109      	bne.n	800e0d6 <_fflush_r+0x2e>
 800e0c2:	686c      	ldr	r4, [r5, #4]
 800e0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0c8:	b17b      	cbz	r3, 800e0ea <_fflush_r+0x42>
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0d2:	f7ff bf63 	b.w	800df9c <__sflush_r>
 800e0d6:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <_fflush_r+0x4c>)
 800e0d8:	429c      	cmp	r4, r3
 800e0da:	d101      	bne.n	800e0e0 <_fflush_r+0x38>
 800e0dc:	68ac      	ldr	r4, [r5, #8]
 800e0de:	e7f1      	b.n	800e0c4 <_fflush_r+0x1c>
 800e0e0:	4b05      	ldr	r3, [pc, #20]	; (800e0f8 <_fflush_r+0x50>)
 800e0e2:	429c      	cmp	r4, r3
 800e0e4:	bf08      	it	eq
 800e0e6:	68ec      	ldreq	r4, [r5, #12]
 800e0e8:	e7ec      	b.n	800e0c4 <_fflush_r+0x1c>
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	bd38      	pop	{r3, r4, r5, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0800f5e0 	.word	0x0800f5e0
 800e0f4:	0800f600 	.word	0x0800f600
 800e0f8:	0800f5c0 	.word	0x0800f5c0

0800e0fc <std>:
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	b510      	push	{r4, lr}
 800e100:	4604      	mov	r4, r0
 800e102:	e9c0 3300 	strd	r3, r3, [r0]
 800e106:	6083      	str	r3, [r0, #8]
 800e108:	8181      	strh	r1, [r0, #12]
 800e10a:	6643      	str	r3, [r0, #100]	; 0x64
 800e10c:	81c2      	strh	r2, [r0, #14]
 800e10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e112:	6183      	str	r3, [r0, #24]
 800e114:	4619      	mov	r1, r3
 800e116:	2208      	movs	r2, #8
 800e118:	305c      	adds	r0, #92	; 0x5c
 800e11a:	f7ff fa89 	bl	800d630 <memset>
 800e11e:	4b05      	ldr	r3, [pc, #20]	; (800e134 <std+0x38>)
 800e120:	6224      	str	r4, [r4, #32]
 800e122:	6263      	str	r3, [r4, #36]	; 0x24
 800e124:	4b04      	ldr	r3, [pc, #16]	; (800e138 <std+0x3c>)
 800e126:	62a3      	str	r3, [r4, #40]	; 0x28
 800e128:	4b04      	ldr	r3, [pc, #16]	; (800e13c <std+0x40>)
 800e12a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e12c:	4b04      	ldr	r3, [pc, #16]	; (800e140 <std+0x44>)
 800e12e:	6323      	str	r3, [r4, #48]	; 0x30
 800e130:	bd10      	pop	{r4, pc}
 800e132:	bf00      	nop
 800e134:	0800e725 	.word	0x0800e725
 800e138:	0800e747 	.word	0x0800e747
 800e13c:	0800e77f 	.word	0x0800e77f
 800e140:	0800e7a3 	.word	0x0800e7a3

0800e144 <_cleanup_r>:
 800e144:	4901      	ldr	r1, [pc, #4]	; (800e14c <_cleanup_r+0x8>)
 800e146:	f000 b885 	b.w	800e254 <_fwalk_reent>
 800e14a:	bf00      	nop
 800e14c:	0800e0a9 	.word	0x0800e0a9

0800e150 <__sfmoreglue>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	2568      	movs	r5, #104	; 0x68
 800e154:	1e4a      	subs	r2, r1, #1
 800e156:	4355      	muls	r5, r2
 800e158:	460e      	mov	r6, r1
 800e15a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e15e:	f7ff fabb 	bl	800d6d8 <_malloc_r>
 800e162:	4604      	mov	r4, r0
 800e164:	b140      	cbz	r0, 800e178 <__sfmoreglue+0x28>
 800e166:	2100      	movs	r1, #0
 800e168:	e9c0 1600 	strd	r1, r6, [r0]
 800e16c:	300c      	adds	r0, #12
 800e16e:	60a0      	str	r0, [r4, #8]
 800e170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e174:	f7ff fa5c 	bl	800d630 <memset>
 800e178:	4620      	mov	r0, r4
 800e17a:	bd70      	pop	{r4, r5, r6, pc}

0800e17c <__sinit>:
 800e17c:	6983      	ldr	r3, [r0, #24]
 800e17e:	b510      	push	{r4, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	bb33      	cbnz	r3, 800e1d2 <__sinit+0x56>
 800e184:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e188:	6503      	str	r3, [r0, #80]	; 0x50
 800e18a:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <__sinit+0x58>)
 800e18c:	4a12      	ldr	r2, [pc, #72]	; (800e1d8 <__sinit+0x5c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6282      	str	r2, [r0, #40]	; 0x28
 800e192:	4298      	cmp	r0, r3
 800e194:	bf04      	itt	eq
 800e196:	2301      	moveq	r3, #1
 800e198:	6183      	streq	r3, [r0, #24]
 800e19a:	f000 f81f 	bl	800e1dc <__sfp>
 800e19e:	6060      	str	r0, [r4, #4]
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f000 f81b 	bl	800e1dc <__sfp>
 800e1a6:	60a0      	str	r0, [r4, #8]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 f817 	bl	800e1dc <__sfp>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	60e0      	str	r0, [r4, #12]
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	6860      	ldr	r0, [r4, #4]
 800e1b6:	f7ff ffa1 	bl	800e0fc <std>
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	2109      	movs	r1, #9
 800e1be:	68a0      	ldr	r0, [r4, #8]
 800e1c0:	f7ff ff9c 	bl	800e0fc <std>
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	2112      	movs	r1, #18
 800e1c8:	68e0      	ldr	r0, [r4, #12]
 800e1ca:	f7ff ff97 	bl	800e0fc <std>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	61a3      	str	r3, [r4, #24]
 800e1d2:	bd10      	pop	{r4, pc}
 800e1d4:	0800f588 	.word	0x0800f588
 800e1d8:	0800e145 	.word	0x0800e145

0800e1dc <__sfp>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	4b1b      	ldr	r3, [pc, #108]	; (800e24c <__sfp+0x70>)
 800e1e0:	4607      	mov	r7, r0
 800e1e2:	681e      	ldr	r6, [r3, #0]
 800e1e4:	69b3      	ldr	r3, [r6, #24]
 800e1e6:	b913      	cbnz	r3, 800e1ee <__sfp+0x12>
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f7ff ffc7 	bl	800e17c <__sinit>
 800e1ee:	3648      	adds	r6, #72	; 0x48
 800e1f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	d503      	bpl.n	800e200 <__sfp+0x24>
 800e1f8:	6833      	ldr	r3, [r6, #0]
 800e1fa:	b133      	cbz	r3, 800e20a <__sfp+0x2e>
 800e1fc:	6836      	ldr	r6, [r6, #0]
 800e1fe:	e7f7      	b.n	800e1f0 <__sfp+0x14>
 800e200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e204:	b16d      	cbz	r5, 800e222 <__sfp+0x46>
 800e206:	3468      	adds	r4, #104	; 0x68
 800e208:	e7f4      	b.n	800e1f4 <__sfp+0x18>
 800e20a:	2104      	movs	r1, #4
 800e20c:	4638      	mov	r0, r7
 800e20e:	f7ff ff9f 	bl	800e150 <__sfmoreglue>
 800e212:	6030      	str	r0, [r6, #0]
 800e214:	2800      	cmp	r0, #0
 800e216:	d1f1      	bne.n	800e1fc <__sfp+0x20>
 800e218:	230c      	movs	r3, #12
 800e21a:	4604      	mov	r4, r0
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	4620      	mov	r0, r4
 800e220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e222:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <__sfp+0x74>)
 800e224:	6665      	str	r5, [r4, #100]	; 0x64
 800e226:	e9c4 5500 	strd	r5, r5, [r4]
 800e22a:	60a5      	str	r5, [r4, #8]
 800e22c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e230:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e234:	2208      	movs	r2, #8
 800e236:	4629      	mov	r1, r5
 800e238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e23c:	f7ff f9f8 	bl	800d630 <memset>
 800e240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e248:	e7e9      	b.n	800e21e <__sfp+0x42>
 800e24a:	bf00      	nop
 800e24c:	0800f588 	.word	0x0800f588
 800e250:	ffff0001 	.word	0xffff0001

0800e254 <_fwalk_reent>:
 800e254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e258:	4680      	mov	r8, r0
 800e25a:	4689      	mov	r9, r1
 800e25c:	2600      	movs	r6, #0
 800e25e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e262:	b914      	cbnz	r4, 800e26a <_fwalk_reent+0x16>
 800e264:	4630      	mov	r0, r6
 800e266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e26a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e26e:	3f01      	subs	r7, #1
 800e270:	d501      	bpl.n	800e276 <_fwalk_reent+0x22>
 800e272:	6824      	ldr	r4, [r4, #0]
 800e274:	e7f5      	b.n	800e262 <_fwalk_reent+0xe>
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d907      	bls.n	800e28c <_fwalk_reent+0x38>
 800e27c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e280:	3301      	adds	r3, #1
 800e282:	d003      	beq.n	800e28c <_fwalk_reent+0x38>
 800e284:	4629      	mov	r1, r5
 800e286:	4640      	mov	r0, r8
 800e288:	47c8      	blx	r9
 800e28a:	4306      	orrs	r6, r0
 800e28c:	3568      	adds	r5, #104	; 0x68
 800e28e:	e7ee      	b.n	800e26e <_fwalk_reent+0x1a>

0800e290 <__swhatbuf_r>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	460e      	mov	r6, r1
 800e294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e298:	b096      	sub	sp, #88	; 0x58
 800e29a:	2900      	cmp	r1, #0
 800e29c:	4614      	mov	r4, r2
 800e29e:	461d      	mov	r5, r3
 800e2a0:	da07      	bge.n	800e2b2 <__swhatbuf_r+0x22>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	89b3      	ldrh	r3, [r6, #12]
 800e2a8:	061a      	lsls	r2, r3, #24
 800e2aa:	d410      	bmi.n	800e2ce <__swhatbuf_r+0x3e>
 800e2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b0:	e00e      	b.n	800e2d0 <__swhatbuf_r+0x40>
 800e2b2:	466a      	mov	r2, sp
 800e2b4:	f000 fa9c 	bl	800e7f0 <_fstat_r>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	dbf2      	blt.n	800e2a2 <__swhatbuf_r+0x12>
 800e2bc:	9a01      	ldr	r2, [sp, #4]
 800e2be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2c6:	425a      	negs	r2, r3
 800e2c8:	415a      	adcs	r2, r3
 800e2ca:	602a      	str	r2, [r5, #0]
 800e2cc:	e7ee      	b.n	800e2ac <__swhatbuf_r+0x1c>
 800e2ce:	2340      	movs	r3, #64	; 0x40
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	b016      	add	sp, #88	; 0x58
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}

0800e2d8 <__smakebuf_r>:
 800e2d8:	898b      	ldrh	r3, [r1, #12]
 800e2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2dc:	079d      	lsls	r5, r3, #30
 800e2de:	4606      	mov	r6, r0
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	d507      	bpl.n	800e2f4 <__smakebuf_r+0x1c>
 800e2e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	6123      	str	r3, [r4, #16]
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	6163      	str	r3, [r4, #20]
 800e2f0:	b002      	add	sp, #8
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}
 800e2f4:	ab01      	add	r3, sp, #4
 800e2f6:	466a      	mov	r2, sp
 800e2f8:	f7ff ffca 	bl	800e290 <__swhatbuf_r>
 800e2fc:	9900      	ldr	r1, [sp, #0]
 800e2fe:	4605      	mov	r5, r0
 800e300:	4630      	mov	r0, r6
 800e302:	f7ff f9e9 	bl	800d6d8 <_malloc_r>
 800e306:	b948      	cbnz	r0, 800e31c <__smakebuf_r+0x44>
 800e308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30c:	059a      	lsls	r2, r3, #22
 800e30e:	d4ef      	bmi.n	800e2f0 <__smakebuf_r+0x18>
 800e310:	f023 0303 	bic.w	r3, r3, #3
 800e314:	f043 0302 	orr.w	r3, r3, #2
 800e318:	81a3      	strh	r3, [r4, #12]
 800e31a:	e7e3      	b.n	800e2e4 <__smakebuf_r+0xc>
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <__smakebuf_r+0x7c>)
 800e31e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e320:	89a3      	ldrh	r3, [r4, #12]
 800e322:	6020      	str	r0, [r4, #0]
 800e324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e328:	81a3      	strh	r3, [r4, #12]
 800e32a:	9b00      	ldr	r3, [sp, #0]
 800e32c:	6120      	str	r0, [r4, #16]
 800e32e:	6163      	str	r3, [r4, #20]
 800e330:	9b01      	ldr	r3, [sp, #4]
 800e332:	b15b      	cbz	r3, 800e34c <__smakebuf_r+0x74>
 800e334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e338:	4630      	mov	r0, r6
 800e33a:	f000 fa6b 	bl	800e814 <_isatty_r>
 800e33e:	b128      	cbz	r0, 800e34c <__smakebuf_r+0x74>
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	f023 0303 	bic.w	r3, r3, #3
 800e346:	f043 0301 	orr.w	r3, r3, #1
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	89a3      	ldrh	r3, [r4, #12]
 800e34e:	431d      	orrs	r5, r3
 800e350:	81a5      	strh	r5, [r4, #12]
 800e352:	e7cd      	b.n	800e2f0 <__smakebuf_r+0x18>
 800e354:	0800e145 	.word	0x0800e145

0800e358 <memchr>:
 800e358:	b510      	push	{r4, lr}
 800e35a:	b2c9      	uxtb	r1, r1
 800e35c:	4402      	add	r2, r0
 800e35e:	4290      	cmp	r0, r2
 800e360:	4603      	mov	r3, r0
 800e362:	d101      	bne.n	800e368 <memchr+0x10>
 800e364:	2300      	movs	r3, #0
 800e366:	e003      	b.n	800e370 <memchr+0x18>
 800e368:	781c      	ldrb	r4, [r3, #0]
 800e36a:	3001      	adds	r0, #1
 800e36c:	428c      	cmp	r4, r1
 800e36e:	d1f6      	bne.n	800e35e <memchr+0x6>
 800e370:	4618      	mov	r0, r3
 800e372:	bd10      	pop	{r4, pc}

0800e374 <memmove>:
 800e374:	4288      	cmp	r0, r1
 800e376:	b510      	push	{r4, lr}
 800e378:	eb01 0302 	add.w	r3, r1, r2
 800e37c:	d807      	bhi.n	800e38e <memmove+0x1a>
 800e37e:	1e42      	subs	r2, r0, #1
 800e380:	4299      	cmp	r1, r3
 800e382:	d00a      	beq.n	800e39a <memmove+0x26>
 800e384:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e388:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e38c:	e7f8      	b.n	800e380 <memmove+0xc>
 800e38e:	4283      	cmp	r3, r0
 800e390:	d9f5      	bls.n	800e37e <memmove+0xa>
 800e392:	1881      	adds	r1, r0, r2
 800e394:	1ad2      	subs	r2, r2, r3
 800e396:	42d3      	cmn	r3, r2
 800e398:	d100      	bne.n	800e39c <memmove+0x28>
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e3a4:	e7f7      	b.n	800e396 <memmove+0x22>

0800e3a6 <__malloc_lock>:
 800e3a6:	4770      	bx	lr

0800e3a8 <__malloc_unlock>:
 800e3a8:	4770      	bx	lr

0800e3aa <_realloc_r>:
 800e3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	4614      	mov	r4, r2
 800e3b0:	460e      	mov	r6, r1
 800e3b2:	b921      	cbnz	r1, 800e3be <_realloc_r+0x14>
 800e3b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	f7ff b98d 	b.w	800d6d8 <_malloc_r>
 800e3be:	b922      	cbnz	r2, 800e3ca <_realloc_r+0x20>
 800e3c0:	f7ff f93e 	bl	800d640 <_free_r>
 800e3c4:	4625      	mov	r5, r4
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ca:	f000 fa45 	bl	800e858 <_malloc_usable_size_r>
 800e3ce:	42a0      	cmp	r0, r4
 800e3d0:	d20f      	bcs.n	800e3f2 <_realloc_r+0x48>
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f7ff f97f 	bl	800d6d8 <_malloc_r>
 800e3da:	4605      	mov	r5, r0
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d0f2      	beq.n	800e3c6 <_realloc_r+0x1c>
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	f7ff f919 	bl	800d61a <memcpy>
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	f7ff f928 	bl	800d640 <_free_r>
 800e3f0:	e7e9      	b.n	800e3c6 <_realloc_r+0x1c>
 800e3f2:	4635      	mov	r5, r6
 800e3f4:	e7e7      	b.n	800e3c6 <_realloc_r+0x1c>

0800e3f6 <__ssputs_r>:
 800e3f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fa:	688e      	ldr	r6, [r1, #8]
 800e3fc:	4682      	mov	sl, r0
 800e3fe:	429e      	cmp	r6, r3
 800e400:	460c      	mov	r4, r1
 800e402:	4690      	mov	r8, r2
 800e404:	4699      	mov	r9, r3
 800e406:	d837      	bhi.n	800e478 <__ssputs_r+0x82>
 800e408:	898a      	ldrh	r2, [r1, #12]
 800e40a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e40e:	d031      	beq.n	800e474 <__ssputs_r+0x7e>
 800e410:	2302      	movs	r3, #2
 800e412:	6825      	ldr	r5, [r4, #0]
 800e414:	6909      	ldr	r1, [r1, #16]
 800e416:	1a6f      	subs	r7, r5, r1
 800e418:	6965      	ldr	r5, [r4, #20]
 800e41a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e41e:	fb95 f5f3 	sdiv	r5, r5, r3
 800e422:	f109 0301 	add.w	r3, r9, #1
 800e426:	443b      	add	r3, r7
 800e428:	429d      	cmp	r5, r3
 800e42a:	bf38      	it	cc
 800e42c:	461d      	movcc	r5, r3
 800e42e:	0553      	lsls	r3, r2, #21
 800e430:	d530      	bpl.n	800e494 <__ssputs_r+0x9e>
 800e432:	4629      	mov	r1, r5
 800e434:	f7ff f950 	bl	800d6d8 <_malloc_r>
 800e438:	4606      	mov	r6, r0
 800e43a:	b950      	cbnz	r0, 800e452 <__ssputs_r+0x5c>
 800e43c:	230c      	movs	r3, #12
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295
 800e442:	f8ca 3000 	str.w	r3, [sl]
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e452:	463a      	mov	r2, r7
 800e454:	6921      	ldr	r1, [r4, #16]
 800e456:	f7ff f8e0 	bl	800d61a <memcpy>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	6126      	str	r6, [r4, #16]
 800e468:	443e      	add	r6, r7
 800e46a:	6026      	str	r6, [r4, #0]
 800e46c:	464e      	mov	r6, r9
 800e46e:	6165      	str	r5, [r4, #20]
 800e470:	1bed      	subs	r5, r5, r7
 800e472:	60a5      	str	r5, [r4, #8]
 800e474:	454e      	cmp	r6, r9
 800e476:	d900      	bls.n	800e47a <__ssputs_r+0x84>
 800e478:	464e      	mov	r6, r9
 800e47a:	4632      	mov	r2, r6
 800e47c:	4641      	mov	r1, r8
 800e47e:	6820      	ldr	r0, [r4, #0]
 800e480:	f7ff ff78 	bl	800e374 <memmove>
 800e484:	68a3      	ldr	r3, [r4, #8]
 800e486:	2000      	movs	r0, #0
 800e488:	1b9b      	subs	r3, r3, r6
 800e48a:	60a3      	str	r3, [r4, #8]
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	441e      	add	r6, r3
 800e490:	6026      	str	r6, [r4, #0]
 800e492:	e7dc      	b.n	800e44e <__ssputs_r+0x58>
 800e494:	462a      	mov	r2, r5
 800e496:	f7ff ff88 	bl	800e3aa <_realloc_r>
 800e49a:	4606      	mov	r6, r0
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d1e2      	bne.n	800e466 <__ssputs_r+0x70>
 800e4a0:	6921      	ldr	r1, [r4, #16]
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	f7ff f8cc 	bl	800d640 <_free_r>
 800e4a8:	e7c8      	b.n	800e43c <__ssputs_r+0x46>
	...

0800e4ac <_svfiprintf_r>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	461d      	mov	r5, r3
 800e4b2:	898b      	ldrh	r3, [r1, #12]
 800e4b4:	b09d      	sub	sp, #116	; 0x74
 800e4b6:	061f      	lsls	r7, r3, #24
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	4616      	mov	r6, r2
 800e4be:	d50f      	bpl.n	800e4e0 <_svfiprintf_r+0x34>
 800e4c0:	690b      	ldr	r3, [r1, #16]
 800e4c2:	b96b      	cbnz	r3, 800e4e0 <_svfiprintf_r+0x34>
 800e4c4:	2140      	movs	r1, #64	; 0x40
 800e4c6:	f7ff f907 	bl	800d6d8 <_malloc_r>
 800e4ca:	6020      	str	r0, [r4, #0]
 800e4cc:	6120      	str	r0, [r4, #16]
 800e4ce:	b928      	cbnz	r0, 800e4dc <_svfiprintf_r+0x30>
 800e4d0:	230c      	movs	r3, #12
 800e4d2:	f8c8 3000 	str.w	r3, [r8]
 800e4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4da:	e0c8      	b.n	800e66e <_svfiprintf_r+0x1c2>
 800e4dc:	2340      	movs	r3, #64	; 0x40
 800e4de:	6163      	str	r3, [r4, #20]
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4ea:	2330      	movs	r3, #48	; 0x30
 800e4ec:	f04f 0b01 	mov.w	fp, #1
 800e4f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4f4:	9503      	str	r5, [sp, #12]
 800e4f6:	4637      	mov	r7, r6
 800e4f8:	463d      	mov	r5, r7
 800e4fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4fe:	b10b      	cbz	r3, 800e504 <_svfiprintf_r+0x58>
 800e500:	2b25      	cmp	r3, #37	; 0x25
 800e502:	d13e      	bne.n	800e582 <_svfiprintf_r+0xd6>
 800e504:	ebb7 0a06 	subs.w	sl, r7, r6
 800e508:	d00b      	beq.n	800e522 <_svfiprintf_r+0x76>
 800e50a:	4653      	mov	r3, sl
 800e50c:	4632      	mov	r2, r6
 800e50e:	4621      	mov	r1, r4
 800e510:	4640      	mov	r0, r8
 800e512:	f7ff ff70 	bl	800e3f6 <__ssputs_r>
 800e516:	3001      	adds	r0, #1
 800e518:	f000 80a4 	beq.w	800e664 <_svfiprintf_r+0x1b8>
 800e51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e51e:	4453      	add	r3, sl
 800e520:	9309      	str	r3, [sp, #36]	; 0x24
 800e522:	783b      	ldrb	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	f000 809d 	beq.w	800e664 <_svfiprintf_r+0x1b8>
 800e52a:	2300      	movs	r3, #0
 800e52c:	f04f 32ff 	mov.w	r2, #4294967295
 800e530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	9307      	str	r3, [sp, #28]
 800e538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e53c:	931a      	str	r3, [sp, #104]	; 0x68
 800e53e:	462f      	mov	r7, r5
 800e540:	2205      	movs	r2, #5
 800e542:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e546:	4850      	ldr	r0, [pc, #320]	; (800e688 <_svfiprintf_r+0x1dc>)
 800e548:	f7ff ff06 	bl	800e358 <memchr>
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	b9d0      	cbnz	r0, 800e586 <_svfiprintf_r+0xda>
 800e550:	06d9      	lsls	r1, r3, #27
 800e552:	bf44      	itt	mi
 800e554:	2220      	movmi	r2, #32
 800e556:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e55a:	071a      	lsls	r2, r3, #28
 800e55c:	bf44      	itt	mi
 800e55e:	222b      	movmi	r2, #43	; 0x2b
 800e560:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e564:	782a      	ldrb	r2, [r5, #0]
 800e566:	2a2a      	cmp	r2, #42	; 0x2a
 800e568:	d015      	beq.n	800e596 <_svfiprintf_r+0xea>
 800e56a:	462f      	mov	r7, r5
 800e56c:	2000      	movs	r0, #0
 800e56e:	250a      	movs	r5, #10
 800e570:	9a07      	ldr	r2, [sp, #28]
 800e572:	4639      	mov	r1, r7
 800e574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e578:	3b30      	subs	r3, #48	; 0x30
 800e57a:	2b09      	cmp	r3, #9
 800e57c:	d94d      	bls.n	800e61a <_svfiprintf_r+0x16e>
 800e57e:	b1b8      	cbz	r0, 800e5b0 <_svfiprintf_r+0x104>
 800e580:	e00f      	b.n	800e5a2 <_svfiprintf_r+0xf6>
 800e582:	462f      	mov	r7, r5
 800e584:	e7b8      	b.n	800e4f8 <_svfiprintf_r+0x4c>
 800e586:	4a40      	ldr	r2, [pc, #256]	; (800e688 <_svfiprintf_r+0x1dc>)
 800e588:	463d      	mov	r5, r7
 800e58a:	1a80      	subs	r0, r0, r2
 800e58c:	fa0b f000 	lsl.w	r0, fp, r0
 800e590:	4318      	orrs	r0, r3
 800e592:	9004      	str	r0, [sp, #16]
 800e594:	e7d3      	b.n	800e53e <_svfiprintf_r+0x92>
 800e596:	9a03      	ldr	r2, [sp, #12]
 800e598:	1d11      	adds	r1, r2, #4
 800e59a:	6812      	ldr	r2, [r2, #0]
 800e59c:	9103      	str	r1, [sp, #12]
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	db01      	blt.n	800e5a6 <_svfiprintf_r+0xfa>
 800e5a2:	9207      	str	r2, [sp, #28]
 800e5a4:	e004      	b.n	800e5b0 <_svfiprintf_r+0x104>
 800e5a6:	4252      	negs	r2, r2
 800e5a8:	f043 0302 	orr.w	r3, r3, #2
 800e5ac:	9207      	str	r2, [sp, #28]
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	783b      	ldrb	r3, [r7, #0]
 800e5b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e5b4:	d10c      	bne.n	800e5d0 <_svfiprintf_r+0x124>
 800e5b6:	787b      	ldrb	r3, [r7, #1]
 800e5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ba:	d133      	bne.n	800e624 <_svfiprintf_r+0x178>
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	3702      	adds	r7, #2
 800e5c0:	1d1a      	adds	r2, r3, #4
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	9203      	str	r2, [sp, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bfb8      	it	lt
 800e5ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5ce:	9305      	str	r3, [sp, #20]
 800e5d0:	4d2e      	ldr	r5, [pc, #184]	; (800e68c <_svfiprintf_r+0x1e0>)
 800e5d2:	2203      	movs	r2, #3
 800e5d4:	7839      	ldrb	r1, [r7, #0]
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	f7ff febe 	bl	800e358 <memchr>
 800e5dc:	b138      	cbz	r0, 800e5ee <_svfiprintf_r+0x142>
 800e5de:	2340      	movs	r3, #64	; 0x40
 800e5e0:	1b40      	subs	r0, r0, r5
 800e5e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	3701      	adds	r7, #1
 800e5ea:	4303      	orrs	r3, r0
 800e5ec:	9304      	str	r3, [sp, #16]
 800e5ee:	7839      	ldrb	r1, [r7, #0]
 800e5f0:	2206      	movs	r2, #6
 800e5f2:	4827      	ldr	r0, [pc, #156]	; (800e690 <_svfiprintf_r+0x1e4>)
 800e5f4:	1c7e      	adds	r6, r7, #1
 800e5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5fa:	f7ff fead 	bl	800e358 <memchr>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d038      	beq.n	800e674 <_svfiprintf_r+0x1c8>
 800e602:	4b24      	ldr	r3, [pc, #144]	; (800e694 <_svfiprintf_r+0x1e8>)
 800e604:	bb13      	cbnz	r3, 800e64c <_svfiprintf_r+0x1a0>
 800e606:	9b03      	ldr	r3, [sp, #12]
 800e608:	3307      	adds	r3, #7
 800e60a:	f023 0307 	bic.w	r3, r3, #7
 800e60e:	3308      	adds	r3, #8
 800e610:	9303      	str	r3, [sp, #12]
 800e612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e614:	444b      	add	r3, r9
 800e616:	9309      	str	r3, [sp, #36]	; 0x24
 800e618:	e76d      	b.n	800e4f6 <_svfiprintf_r+0x4a>
 800e61a:	fb05 3202 	mla	r2, r5, r2, r3
 800e61e:	2001      	movs	r0, #1
 800e620:	460f      	mov	r7, r1
 800e622:	e7a6      	b.n	800e572 <_svfiprintf_r+0xc6>
 800e624:	2300      	movs	r3, #0
 800e626:	250a      	movs	r5, #10
 800e628:	4619      	mov	r1, r3
 800e62a:	3701      	adds	r7, #1
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	4638      	mov	r0, r7
 800e630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e634:	3a30      	subs	r2, #48	; 0x30
 800e636:	2a09      	cmp	r2, #9
 800e638:	d903      	bls.n	800e642 <_svfiprintf_r+0x196>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0c8      	beq.n	800e5d0 <_svfiprintf_r+0x124>
 800e63e:	9105      	str	r1, [sp, #20]
 800e640:	e7c6      	b.n	800e5d0 <_svfiprintf_r+0x124>
 800e642:	fb05 2101 	mla	r1, r5, r1, r2
 800e646:	2301      	movs	r3, #1
 800e648:	4607      	mov	r7, r0
 800e64a:	e7f0      	b.n	800e62e <_svfiprintf_r+0x182>
 800e64c:	ab03      	add	r3, sp, #12
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	4622      	mov	r2, r4
 800e652:	4b11      	ldr	r3, [pc, #68]	; (800e698 <_svfiprintf_r+0x1ec>)
 800e654:	a904      	add	r1, sp, #16
 800e656:	4640      	mov	r0, r8
 800e658:	f3af 8000 	nop.w
 800e65c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e660:	4681      	mov	r9, r0
 800e662:	d1d6      	bne.n	800e612 <_svfiprintf_r+0x166>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	065b      	lsls	r3, r3, #25
 800e668:	f53f af35 	bmi.w	800e4d6 <_svfiprintf_r+0x2a>
 800e66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e66e:	b01d      	add	sp, #116	; 0x74
 800e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e674:	ab03      	add	r3, sp, #12
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	4622      	mov	r2, r4
 800e67a:	4b07      	ldr	r3, [pc, #28]	; (800e698 <_svfiprintf_r+0x1ec>)
 800e67c:	a904      	add	r1, sp, #16
 800e67e:	4640      	mov	r0, r8
 800e680:	f7ff fa38 	bl	800daf4 <_printf_i>
 800e684:	e7ea      	b.n	800e65c <_svfiprintf_r+0x1b0>
 800e686:	bf00      	nop
 800e688:	0800f58c 	.word	0x0800f58c
 800e68c:	0800f592 	.word	0x0800f592
 800e690:	0800f596 	.word	0x0800f596
 800e694:	00000000 	.word	0x00000000
 800e698:	0800e3f7 	.word	0x0800e3f7

0800e69c <_raise_r>:
 800e69c:	291f      	cmp	r1, #31
 800e69e:	b538      	push	{r3, r4, r5, lr}
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	460d      	mov	r5, r1
 800e6a4:	d904      	bls.n	800e6b0 <_raise_r+0x14>
 800e6a6:	2316      	movs	r3, #22
 800e6a8:	6003      	str	r3, [r0, #0]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6b2:	b112      	cbz	r2, 800e6ba <_raise_r+0x1e>
 800e6b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6b8:	b94b      	cbnz	r3, 800e6ce <_raise_r+0x32>
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 f830 	bl	800e720 <_getpid_r>
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ca:	f000 b817 	b.w	800e6fc <_kill_r>
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d00a      	beq.n	800e6e8 <_raise_r+0x4c>
 800e6d2:	1c59      	adds	r1, r3, #1
 800e6d4:	d103      	bne.n	800e6de <_raise_r+0x42>
 800e6d6:	2316      	movs	r3, #22
 800e6d8:	6003      	str	r3, [r0, #0]
 800e6da:	2001      	movs	r0, #1
 800e6dc:	e7e7      	b.n	800e6ae <_raise_r+0x12>
 800e6de:	2400      	movs	r4, #0
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6e6:	4798      	blx	r3
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	e7e0      	b.n	800e6ae <_raise_r+0x12>

0800e6ec <raise>:
 800e6ec:	4b02      	ldr	r3, [pc, #8]	; (800e6f8 <raise+0xc>)
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	6818      	ldr	r0, [r3, #0]
 800e6f2:	f7ff bfd3 	b.w	800e69c <_raise_r>
 800e6f6:	bf00      	nop
 800e6f8:	20000124 	.word	0x20000124

0800e6fc <_kill_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	2300      	movs	r3, #0
 800e700:	4c06      	ldr	r4, [pc, #24]	; (800e71c <_kill_r+0x20>)
 800e702:	4605      	mov	r5, r0
 800e704:	4608      	mov	r0, r1
 800e706:	4611      	mov	r1, r2
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	f000 f8df 	bl	800e8cc <_kill>
 800e70e:	1c43      	adds	r3, r0, #1
 800e710:	d102      	bne.n	800e718 <_kill_r+0x1c>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	b103      	cbz	r3, 800e718 <_kill_r+0x1c>
 800e716:	602b      	str	r3, [r5, #0]
 800e718:	bd38      	pop	{r3, r4, r5, pc}
 800e71a:	bf00      	nop
 800e71c:	200072a8 	.word	0x200072a8

0800e720 <_getpid_r>:
 800e720:	f000 b8c4 	b.w	800e8ac <_getpid>

0800e724 <__sread>:
 800e724:	b510      	push	{r4, lr}
 800e726:	460c      	mov	r4, r1
 800e728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72c:	f000 f89c 	bl	800e868 <_read_r>
 800e730:	2800      	cmp	r0, #0
 800e732:	bfab      	itete	ge
 800e734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e736:	89a3      	ldrhlt	r3, [r4, #12]
 800e738:	181b      	addge	r3, r3, r0
 800e73a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e73e:	bfac      	ite	ge
 800e740:	6563      	strge	r3, [r4, #84]	; 0x54
 800e742:	81a3      	strhlt	r3, [r4, #12]
 800e744:	bd10      	pop	{r4, pc}

0800e746 <__swrite>:
 800e746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74a:	461f      	mov	r7, r3
 800e74c:	898b      	ldrh	r3, [r1, #12]
 800e74e:	4605      	mov	r5, r0
 800e750:	05db      	lsls	r3, r3, #23
 800e752:	460c      	mov	r4, r1
 800e754:	4616      	mov	r6, r2
 800e756:	d505      	bpl.n	800e764 <__swrite+0x1e>
 800e758:	2302      	movs	r3, #2
 800e75a:	2200      	movs	r2, #0
 800e75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e760:	f000 f868 	bl	800e834 <_lseek_r>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	4632      	mov	r2, r6
 800e768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e772:	463b      	mov	r3, r7
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77a:	f000 b817 	b.w	800e7ac <_write_r>

0800e77e <__sseek>:
 800e77e:	b510      	push	{r4, lr}
 800e780:	460c      	mov	r4, r1
 800e782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e786:	f000 f855 	bl	800e834 <_lseek_r>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	bf15      	itete	ne
 800e790:	6560      	strne	r0, [r4, #84]	; 0x54
 800e792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e79a:	81a3      	strheq	r3, [r4, #12]
 800e79c:	bf18      	it	ne
 800e79e:	81a3      	strhne	r3, [r4, #12]
 800e7a0:	bd10      	pop	{r4, pc}

0800e7a2 <__sclose>:
 800e7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a6:	f000 b813 	b.w	800e7d0 <_close_r>
	...

0800e7ac <_write_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	4c05      	ldr	r4, [pc, #20]	; (800e7cc <_write_r+0x20>)
 800e7b8:	6022      	str	r2, [r4, #0]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	f000 f8ac 	bl	800e918 <_write>
 800e7c0:	1c43      	adds	r3, r0, #1
 800e7c2:	d102      	bne.n	800e7ca <_write_r+0x1e>
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	b103      	cbz	r3, 800e7ca <_write_r+0x1e>
 800e7c8:	602b      	str	r3, [r5, #0]
 800e7ca:	bd38      	pop	{r3, r4, r5, pc}
 800e7cc:	200072a8 	.word	0x200072a8

0800e7d0 <_close_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	4c05      	ldr	r4, [pc, #20]	; (800e7ec <_close_r+0x1c>)
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	4608      	mov	r0, r1
 800e7da:	6023      	str	r3, [r4, #0]
 800e7dc:	f000 f856 	bl	800e88c <_close>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_close_r+0x1a>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_close_r+0x1a>
 800e7e8:	602b      	str	r3, [r5, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	200072a8 	.word	0x200072a8

0800e7f0 <_fstat_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	4c06      	ldr	r4, [pc, #24]	; (800e810 <_fstat_r+0x20>)
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	f000 f84d 	bl	800e89c <_fstat>
 800e802:	1c43      	adds	r3, r0, #1
 800e804:	d102      	bne.n	800e80c <_fstat_r+0x1c>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	b103      	cbz	r3, 800e80c <_fstat_r+0x1c>
 800e80a:	602b      	str	r3, [r5, #0]
 800e80c:	bd38      	pop	{r3, r4, r5, pc}
 800e80e:	bf00      	nop
 800e810:	200072a8 	.word	0x200072a8

0800e814 <_isatty_r>:
 800e814:	b538      	push	{r3, r4, r5, lr}
 800e816:	2300      	movs	r3, #0
 800e818:	4c05      	ldr	r4, [pc, #20]	; (800e830 <_isatty_r+0x1c>)
 800e81a:	4605      	mov	r5, r0
 800e81c:	4608      	mov	r0, r1
 800e81e:	6023      	str	r3, [r4, #0]
 800e820:	f000 f84c 	bl	800e8bc <_isatty>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_isatty_r+0x1a>
 800e828:	6823      	ldr	r3, [r4, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_isatty_r+0x1a>
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	200072a8 	.word	0x200072a8

0800e834 <_lseek_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4605      	mov	r5, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	4611      	mov	r1, r2
 800e83c:	2200      	movs	r2, #0
 800e83e:	4c05      	ldr	r4, [pc, #20]	; (800e854 <_lseek_r+0x20>)
 800e840:	6022      	str	r2, [r4, #0]
 800e842:	461a      	mov	r2, r3
 800e844:	f000 f84a 	bl	800e8dc <_lseek>
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	d102      	bne.n	800e852 <_lseek_r+0x1e>
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	b103      	cbz	r3, 800e852 <_lseek_r+0x1e>
 800e850:	602b      	str	r3, [r5, #0]
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	200072a8 	.word	0x200072a8

0800e858 <_malloc_usable_size_r>:
 800e858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85c:	1f18      	subs	r0, r3, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bfbc      	itt	lt
 800e862:	580b      	ldrlt	r3, [r1, r0]
 800e864:	18c0      	addlt	r0, r0, r3
 800e866:	4770      	bx	lr

0800e868 <_read_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4605      	mov	r5, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	2200      	movs	r2, #0
 800e872:	4c05      	ldr	r4, [pc, #20]	; (800e888 <_read_r+0x20>)
 800e874:	6022      	str	r2, [r4, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	f000 f838 	bl	800e8ec <_read>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_read_r+0x1e>
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	b103      	cbz	r3, 800e886 <_read_r+0x1e>
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	200072a8 	.word	0x200072a8

0800e88c <_close>:
 800e88c:	2258      	movs	r2, #88	; 0x58
 800e88e:	4b02      	ldr	r3, [pc, #8]	; (800e898 <_close+0xc>)
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	4770      	bx	lr
 800e898:	200072a8 	.word	0x200072a8

0800e89c <_fstat>:
 800e89c:	2258      	movs	r2, #88	; 0x58
 800e89e:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <_fstat+0xc>)
 800e8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	4770      	bx	lr
 800e8a8:	200072a8 	.word	0x200072a8

0800e8ac <_getpid>:
 800e8ac:	2258      	movs	r2, #88	; 0x58
 800e8ae:	4b02      	ldr	r3, [pc, #8]	; (800e8b8 <_getpid+0xc>)
 800e8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	4770      	bx	lr
 800e8b8:	200072a8 	.word	0x200072a8

0800e8bc <_isatty>:
 800e8bc:	2258      	movs	r2, #88	; 0x58
 800e8be:	4b02      	ldr	r3, [pc, #8]	; (800e8c8 <_isatty+0xc>)
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	200072a8 	.word	0x200072a8

0800e8cc <_kill>:
 800e8cc:	2258      	movs	r2, #88	; 0x58
 800e8ce:	4b02      	ldr	r3, [pc, #8]	; (800e8d8 <_kill+0xc>)
 800e8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d4:	601a      	str	r2, [r3, #0]
 800e8d6:	4770      	bx	lr
 800e8d8:	200072a8 	.word	0x200072a8

0800e8dc <_lseek>:
 800e8dc:	2258      	movs	r2, #88	; 0x58
 800e8de:	4b02      	ldr	r3, [pc, #8]	; (800e8e8 <_lseek+0xc>)
 800e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	4770      	bx	lr
 800e8e8:	200072a8 	.word	0x200072a8

0800e8ec <_read>:
 800e8ec:	2258      	movs	r2, #88	; 0x58
 800e8ee:	4b02      	ldr	r3, [pc, #8]	; (800e8f8 <_read+0xc>)
 800e8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	4770      	bx	lr
 800e8f8:	200072a8 	.word	0x200072a8

0800e8fc <_sbrk>:
 800e8fc:	4b04      	ldr	r3, [pc, #16]	; (800e910 <_sbrk+0x14>)
 800e8fe:	4602      	mov	r2, r0
 800e900:	6819      	ldr	r1, [r3, #0]
 800e902:	b909      	cbnz	r1, 800e908 <_sbrk+0xc>
 800e904:	4903      	ldr	r1, [pc, #12]	; (800e914 <_sbrk+0x18>)
 800e906:	6019      	str	r1, [r3, #0]
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	4402      	add	r2, r0
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	4770      	bx	lr
 800e910:	20003ff0 	.word	0x20003ff0
 800e914:	200072b0 	.word	0x200072b0

0800e918 <_write>:
 800e918:	2258      	movs	r2, #88	; 0x58
 800e91a:	4b02      	ldr	r3, [pc, #8]	; (800e924 <_write+0xc>)
 800e91c:	f04f 30ff 	mov.w	r0, #4294967295
 800e920:	601a      	str	r2, [r3, #0]
 800e922:	4770      	bx	lr
 800e924:	200072a8 	.word	0x200072a8

0800e928 <_exit>:
 800e928:	e7fe      	b.n	800e928 <_exit>
	...

0800e92c <_init>:
 800e92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92e:	bf00      	nop
 800e930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e932:	bc08      	pop	{r3}
 800e934:	469e      	mov	lr, r3
 800e936:	4770      	bx	lr

0800e938 <_fini>:
 800e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93a:	bf00      	nop
 800e93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e93e:	bc08      	pop	{r3}
 800e940:	469e      	mov	lr, r3
 800e942:	4770      	bx	lr

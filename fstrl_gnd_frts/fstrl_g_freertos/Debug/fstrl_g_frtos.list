
fstrl_g_frtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d3c  0800edc8  0800edc8  0001edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb04  0800fb04  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  0800fb04  0800fb04  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fb04  0800fb04  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb04  0800fb04  0001fb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb08  0800fb08  0001fb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800fb0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007688  20000190  0800fc98  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00003000  20007818  0800fc98  00027818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000665b3  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b7fe  00000000  00000000  00086768  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002148c  00000000  00000000  00091f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002530  00000000  00000000  000b33f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ed8  00000000  00000000  000b5928  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000298e9  00000000  00000000  000b8800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00036083  00000000  00000000  000e20e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a2f79  00000000  00000000  0011816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001bb0e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007328  00000000  00000000  001bb160  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         000000cc  00000000  00000000  001c2488  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001c2554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000190 	.word	0x20000190
 800020c:	00000000 	.word	0x00000000
 8000210:	0800edb0 	.word	0x0800edb0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000194 	.word	0x20000194
 800022c:	0800edb0 	.word	0x0800edb0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__popcountsi2>:
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	0883      	lsrs	r3, r0, #2
 800024a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800024e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000252:	4418      	add	r0, r3
 8000254:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000258:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800025c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000260:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000264:	0e00      	lsrs	r0, r0, #24
 8000266:	4770      	bx	lr

08000268 <vStart_tsk_INIT_Periph>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vStart_tsk_INIT_Periph */
void vStart_tsk_INIT_Periph(const void * argument)
{
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	b0bb      	sub	sp, #236	; 0xec
  osThreadSuspendAll();
 800026c:	f008 f861 	bl	8008332 <osThreadSuspendAll>

/* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000270:	f00d f956 	bl	800d520 <MX_USB_DEVICE_Init>

  /* init code for FATFS */
  MX_FATFS_Init();
 8000274:	f006 fd68 	bl	8006d48 <MX_FATFS_Init>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000278:	4b58      	ldr	r3, [pc, #352]	; (80003dc <vStart_tsk_INIT_Periph+0x174>)
 800027a:	2210      	movs	r2, #16
 800027c:	615a      	str	r2, [r3, #20]
  USB_PIN_CONNECT()


  /* USER CODE BEGIN StartDefaultTask */
  //инициализация функции микросекунных задержек
   DWT_Delay_Init();
 800027e:	f006 fd41 	bl	8006d04 <DWT_Delay_Init>
  //инициализация дисплея
  LCD1602A_Init();
 8000282:	f002 fa1b 	bl	80026bc <LCD1602A_Init>
  LCD1602A_DisplayControl(ON, OFF, OFF);
 8000286:	2200      	movs	r2, #0
 8000288:	4611      	mov	r1, r2
 800028a:	2001      	movs	r0, #1
 800028c:	f002 f934 	bl	80024f8 <LCD1602A_DisplayControl>


   //инициализация spi-nand
   gd5f_init(&spi_nand_gd5f);
 8000290:	4c53      	ldr	r4, [pc, #332]	; (80003e0 <vStart_tsk_INIT_Periph+0x178>)
 8000292:	4620      	mov	r0, r4
 8000294:	f001 ff72 	bl	800217c <gd5f_init>
   gd5f_reset(&spi_nand_gd5f);
 8000298:	4620      	mov	r0, r4
 800029a:	f001 fe25 	bl	8001ee8 <gd5f_reset>
   gd5f_get_features(&spi_nand_gd5f);
 800029e:	4620      	mov	r0, r4
 80002a0:	f001 fd3c 	bl	8001d1c <gd5f_get_features>



   char outbuff[20] = {};
 80002a4:	2300      	movs	r3, #0
 80002a6:	9335      	str	r3, [sp, #212]	; 0xd4
 80002a8:	9336      	str	r3, [sp, #216]	; 0xd8
 80002aa:	9337      	str	r3, [sp, #220]	; 0xdc
 80002ac:	9338      	str	r3, [sp, #224]	; 0xe0
 80002ae:	9339      	str	r3, [sp, #228]	; 0xe4

extern const struct lfs_config cfg;
lfs_t      lfs;
lfs_file_t file;

   volatile int32_t err = lfs_mount(&lfs, &cfg);
 80002b0:	494c      	ldr	r1, [pc, #304]	; (80003e4 <vStart_tsk_INIT_Periph+0x17c>)
 80002b2:	a817      	add	r0, sp, #92	; 0x5c
 80002b4:	f00b fb40 	bl	800b938 <lfs_mount>
 80002b8:	9001      	str	r0, [sp, #4]
         if (err < 0) // если есть ошибка монтирования
 80002ba:	9b01      	ldr	r3, [sp, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db60      	blt.n	8000382 <vStart_tsk_INIT_Periph+0x11a>
             LCD1602A_SetCursorPos(1, 1);
             LCD1602A_PrintStr("Formatting...");
             err = lfs_format(&lfs, &cfg);
             err = lfs_mount(&lfs, &cfg);
         }
         LL_mDelay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f006 fd02 	bl	8006ccc <LL_mDelay>
         LCD1602A_SetCursorPos(0, 1);
 80002c8:	2101      	movs	r1, #1
 80002ca:	2000      	movs	r0, #0
 80002cc:	f002 f8ea 	bl	80024a4 <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 80002d0:	4d45      	ldr	r5, [pc, #276]	; (80003e8 <vStart_tsk_INIT_Periph+0x180>)
 80002d2:	4628      	mov	r0, r5
 80002d4:	f002 fa0c 	bl	80026f0 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(0, 1);
 80002d8:	2101      	movs	r1, #1
 80002da:	2000      	movs	r0, #0
 80002dc:	f002 f8e2 	bl	80024a4 <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("LFS Mount OK...");
 80002e0:	4842      	ldr	r0, [pc, #264]	; (80003ec <vStart_tsk_INIT_Periph+0x184>)
 80002e2:	f002 fa05 	bl	80026f0 <LCD1602A_PrintStr>
         // прочитать текущее значение кол-ва загрузок
         uint32_t boot_count = 0;
 80002e6:	2400      	movs	r4, #0
 80002e8:	9400      	str	r4, [sp, #0]
         err = lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80002ea:	f240 1303 	movw	r3, #259	; 0x103
 80002ee:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <vStart_tsk_INIT_Periph+0x188>)
 80002f0:	a902      	add	r1, sp, #8
 80002f2:	a817      	add	r0, sp, #92	; 0x5c
 80002f4:	f00d f82a 	bl	800d34c <lfs_file_open>
 80002f8:	9001      	str	r0, [sp, #4]
         err = lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 80002fa:	2304      	movs	r3, #4
 80002fc:	466a      	mov	r2, sp
 80002fe:	a902      	add	r1, sp, #8
 8000300:	a817      	add	r0, sp, #92	; 0x5c
 8000302:	f00c f823 	bl	800c34c <lfs_file_read>
 8000306:	9001      	str	r0, [sp, #4]

         // обновить счетчик загрузок
         boot_count += 1;
 8000308:	9b00      	ldr	r3, [sp, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	9300      	str	r3, [sp, #0]
         // перейти в начало файла
         err = lfs_file_rewind(&lfs, &file);
 800030e:	a902      	add	r1, sp, #8
 8000310:	a817      	add	r0, sp, #92	; 0x5c
 8000312:	f00c f8d0 	bl	800c4b6 <lfs_file_rewind>
 8000316:	9001      	str	r0, [sp, #4]
         // произвести запись
         err = lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000318:	2304      	movs	r3, #4
 800031a:	466a      	mov	r2, sp
 800031c:	a902      	add	r1, sp, #8
 800031e:	a817      	add	r0, sp, #92	; 0x5c
 8000320:	f00b fe94 	bl	800c04c <lfs_file_write>
 8000324:	9001      	str	r0, [sp, #4]

         // закрыть файл, окончательно производится дозапись на носитель
         err = lfs_file_close(&lfs, &file);
 8000326:	a902      	add	r1, sp, #8
 8000328:	a817      	add	r0, sp, #92	; 0x5c
 800032a:	f00c fece 	bl	800d0ca <lfs_file_close>
 800032e:	9001      	str	r0, [sp, #4]

         // размонтировать файловую систему
         err = lfs_unmount(&lfs);
 8000330:	a817      	add	r0, sp, #92	; 0x5c
 8000332:	f00b fafd 	bl	800b930 <lfs_unmount>
 8000336:	9001      	str	r0, [sp, #4]

         // печать значения счетчика включений
         sprintf(outbuff, "boot_count: %ld", boot_count);
 8000338:	9a00      	ldr	r2, [sp, #0]
 800033a:	492e      	ldr	r1, [pc, #184]	; (80003f4 <vStart_tsk_INIT_Periph+0x18c>)
 800033c:	a835      	add	r0, sp, #212	; 0xd4
 800033e:	f00d ff55 	bl	800e1ec <siprintf>
         LCD1602A_SetCursorPos(1, 1);
 8000342:	2101      	movs	r1, #1
 8000344:	4608      	mov	r0, r1
 8000346:	f002 f8ad 	bl	80024a4 <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 800034a:	4628      	mov	r0, r5
 800034c:	f002 f9d0 	bl	80026f0 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 1);
 8000350:	2101      	movs	r1, #1
 8000352:	4608      	mov	r0, r1
 8000354:	f002 f8a6 	bl	80024a4 <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr(outbuff);
 8000358:	a835      	add	r0, sp, #212	; 0xd4
 800035a:	f002 f9c9 	bl	80026f0 <LCD1602A_PrintStr>

         LL_mDelay(1000);
 800035e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000362:	f006 fcb3 	bl	8006ccc <LL_mDelay>
         LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000366:	f002 f8aa 	bl	80024be <LCD1602A_ClearScreen>
         LCD1602A_SetCursorPos(0, 1); //Установка курсора
 800036a:	2101      	movs	r1, #1
 800036c:	4620      	mov	r0, r4
 800036e:	f002 f899 	bl	80024a4 <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("Starting OS");
 8000372:	4821      	ldr	r0, [pc, #132]	; (80003f8 <vStart_tsk_INIT_Periph+0x190>)
 8000374:	f002 f9bc 	bl	80026f0 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 0);
 8000378:	4621      	mov	r1, r4
 800037a:	2001      	movs	r0, #1
 800037c:	f002 f892 	bl	80024a4 <LCD1602A_SetCursorPos>
         for (uint8_t i = 0; i < 16; i++) {
 8000380:	e021      	b.n	80003c6 <vStart_tsk_INIT_Periph+0x15e>
             LCD1602A_SetCursorPos(0, 1);
 8000382:	2101      	movs	r1, #1
 8000384:	2000      	movs	r0, #0
 8000386:	f002 f88d 	bl	80024a4 <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Mount FAIL...");
 800038a:	481c      	ldr	r0, [pc, #112]	; (80003fc <vStart_tsk_INIT_Periph+0x194>)
 800038c:	f002 f9b0 	bl	80026f0 <LCD1602A_PrintStr>
             LCD1602A_SetCursorPos(1, 1);
 8000390:	2101      	movs	r1, #1
 8000392:	4608      	mov	r0, r1
 8000394:	f002 f886 	bl	80024a4 <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Formatting...");
 8000398:	4819      	ldr	r0, [pc, #100]	; (8000400 <vStart_tsk_INIT_Periph+0x198>)
 800039a:	f002 f9a9 	bl	80026f0 <LCD1602A_PrintStr>
             err = lfs_format(&lfs, &cfg);
 800039e:	4c11      	ldr	r4, [pc, #68]	; (80003e4 <vStart_tsk_INIT_Periph+0x17c>)
 80003a0:	4621      	mov	r1, r4
 80003a2:	a817      	add	r0, sp, #92	; 0x5c
 80003a4:	f00c ffdc 	bl	800d360 <lfs_format>
 80003a8:	9001      	str	r0, [sp, #4]
             err = lfs_mount(&lfs, &cfg);
 80003aa:	4621      	mov	r1, r4
 80003ac:	a817      	add	r0, sp, #92	; 0x5c
 80003ae:	f00b fac3 	bl	800b938 <lfs_mount>
 80003b2:	9001      	str	r0, [sp, #4]
 80003b4:	e784      	b.n	80002c0 <vStart_tsk_INIT_Periph+0x58>
             LCD1602A_PrintStr("*");
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <vStart_tsk_INIT_Periph+0x19c>)
 80003b8:	f002 f99a 	bl	80026f0 <LCD1602A_PrintStr>
             LL_mDelay(40);
 80003bc:	2028      	movs	r0, #40	; 0x28
 80003be:	f006 fc85 	bl	8006ccc <LL_mDelay>
         for (uint8_t i = 0; i < 16; i++) {
 80003c2:	3401      	adds	r4, #1
 80003c4:	b2e4      	uxtb	r4, r4
 80003c6:	2c0f      	cmp	r4, #15
 80003c8:	d9f5      	bls.n	80003b6 <vStart_tsk_INIT_Periph+0x14e>
         }

         LCD1602A_ClearScreen();
 80003ca:	f002 f878 	bl	80024be <LCD1602A_ClearScreen>
         osThreadResumeAll();
 80003ce:	f007 ffb5 	bl	800833c <osThreadResumeAll>


  /* Infinite loop */
  for(;;)
  {
    osThreadTerminate(NULL);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f007 ff5d 	bl	8008292 <osThreadTerminate>
 80003d8:	e7fb      	b.n	80003d2 <vStart_tsk_INIT_Periph+0x16a>
 80003da:	bf00      	nop
 80003dc:	40010800 	.word	0x40010800
 80003e0:	200062d0 	.word	0x200062d0
 80003e4:	0800ef8c 	.word	0x0800ef8c
 80003e8:	0800eea4 	.word	0x0800eea4
 80003ec:	0800eeb8 	.word	0x0800eeb8
 80003f0:	0800eec8 	.word	0x0800eec8
 80003f4:	0800eed4 	.word	0x0800eed4
 80003f8:	0800eee4 	.word	0x0800eee4
 80003fc:	0800ee84 	.word	0x0800ee84
 8000400:	0800ee94 	.word	0x0800ee94
 8000404:	0800eef0 	.word	0x0800eef0

08000408 <vStart_tsk_LEDx_blink>:
* @param argument: Not used
* @retval None
*/
/* Header_vStart_tsk_LEDx_blink */
void vStart_tsk_LEDx_blink(const void * argument)
{
 8000408:	b510      	push	{r4, lr}
 800040a:	b08c      	sub	sp, #48	; 0x30
 800040c:	4604      	mov	r4, r0
 800040e:	e08d      	b.n	800052c <vStart_tsk_LEDx_blink+0x124>
      if (arg == 0)
          {
         // if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
          //LCD1602A_ClearScreen(); //Очистка дисплея от мусора
          //LCD1602A_SetCursorPos(0, 1); //Установка курсора
              lcd_msg_buf.is_data = 1;
 8000410:	2301      	movs	r3, #1
 8000412:	f88d 3006 	strb.w	r3, [sp, #6]
              lcd_msg_buf.pos_x = 0;
 8000416:	2200      	movs	r2, #0
 8000418:	f88d 2004 	strb.w	r2, [sp, #4]
              lcd_msg_buf.pos_y = 1;
 800041c:	f88d 3005 	strb.w	r3, [sp, #5]
              sprintf(lcd_msg_buf.msg, "LED1Task_enter" + '\0');
 8000420:	4b6b      	ldr	r3, [pc, #428]	; (80005d0 <vStart_tsk_LEDx_blink+0x1c8>)
 8000422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000424:	f8cd 0007 	str.w	r0, [sp, #7]
 8000428:	f8cd 100b 	str.w	r1, [sp, #11]
 800042c:	f8cd 200f 	str.w	r2, [sp, #15]
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	789b      	ldrb	r3, [r3, #2]
 8000434:	f8ad 2013 	strh.w	r2, [sp, #19]
 8000438:	f88d 3015 	strb.w	r3, [sp, #21]
              msgcnt = uxQueueSpacesAvailable(msgto_gkt_LCDHandle);
 800043c:	4b65      	ldr	r3, [pc, #404]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	f008 fb5d 	bl	8008afe <uxQueueSpacesAvailable>
 8000444:	b2c0      	uxtb	r0, r0
              if ( msgcnt)
 8000446:	2800      	cmp	r0, #0
 8000448:	d039      	beq.n	80004be <vStart_tsk_LEDx_blink+0xb6>
                  {
                  xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
 800044a:	2300      	movs	r3, #0
 800044c:	f04f 32ff 	mov.w	r2, #4294967295
 8000450:	a901      	add	r1, sp, #4
 8000452:	4860      	ldr	r0, [pc, #384]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 8000454:	6800      	ldr	r0, [r0, #0]
 8000456:	f008 f923 	bl	80086a0 <xQueueGenericSend>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800045a:	4a5f      	ldr	r2, [pc, #380]	; (80005d8 <vStart_tsk_LEDx_blink+0x1d0>)
 800045c:	68d3      	ldr	r3, [r2, #12]
 800045e:	f083 0302 	eor.w	r3, r3, #2
 8000462:	60d3      	str	r3, [r2, #12]
          //LCD1602A_PrintStr("LED1Task_enter" + '\0');
          //osSemaphoreRelease(mt_LCD_freeHandle);}
          //uint8_t flag1 = 1;
          LED1_TOGGLE();
          //flag1 = 0;
          osDelay(100);
 8000464:	2064      	movs	r0, #100	; 0x64
 8000466:	f007 ff19 	bl	800829c <osDelay>
          //if(osSemaphoreWait(mt_LCD_freeHandle, 0) == osOK) {
          //LCD1602A_ClearScreen(); //Очистка дисплея от мусора
          //LCD1602A_SetCursorPos(0, 1); //Установка курсора
         // LCD1602A_PrintStr("LED1Task_exit" + '\0');
          lcd_msg_buf.is_data = 1;
 800046a:	2301      	movs	r3, #1
 800046c:	f88d 3006 	strb.w	r3, [sp, #6]
          lcd_msg_buf.pos_x = 0;
 8000470:	2200      	movs	r2, #0
 8000472:	f88d 2004 	strb.w	r2, [sp, #4]
          lcd_msg_buf.pos_y = 1;
 8000476:	f88d 3005 	strb.w	r3, [sp, #5]
          sprintf(lcd_msg_buf.msg, "LED1Task_exit" + '\0');
 800047a:	4b58      	ldr	r3, [pc, #352]	; (80005dc <vStart_tsk_LEDx_blink+0x1d4>)
 800047c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800047e:	f8cd 0007 	str.w	r0, [sp, #7]
 8000482:	f8cd 100b 	str.w	r1, [sp, #11]
 8000486:	f8cd 200f 	str.w	r2, [sp, #15]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	f8ad 3013 	strh.w	r3, [sp, #19]
          msgcnt = uxQueueSpacesAvailable(msgto_gkt_LCDHandle);
 8000490:	4b50      	ldr	r3, [pc, #320]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	f008 fb33 	bl	8008afe <uxQueueSpacesAvailable>
 8000498:	b2c0      	uxtb	r0, r0
          if ( msgcnt)
 800049a:	b1e0      	cbz	r0, 80004d6 <vStart_tsk_LEDx_blink+0xce>
              {
              xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
 800049c:	2300      	movs	r3, #0
 800049e:	f04f 32ff 	mov.w	r2, #4294967295
 80004a2:	a901      	add	r1, sp, #4
 80004a4:	484b      	ldr	r0, [pc, #300]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 80004a6:	6800      	ldr	r0, [r0, #0]
 80004a8:	f008 f8fa 	bl	80086a0 <xQueueGenericSend>
              LCD1602A_PrintStr("LCD QUEUE FULL");
              osDelay(2000);
              }
          //lcd_msg_buf.msg = "LED1Task_exit" + '\0';
          //osSemaphoreRelease(mt_LCD_freeHandle);}
          taskYIELD();
 80004ac:	4b4c      	ldr	r3, [pc, #304]	; (80005e0 <vStart_tsk_LEDx_blink+0x1d8>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
 80004bc:	e036      	b.n	800052c <vStart_tsk_LEDx_blink+0x124>
                  LCD1602A_SetCursorPos(0, 1);
 80004be:	2101      	movs	r1, #1
 80004c0:	2000      	movs	r0, #0
 80004c2:	f001 ffef 	bl	80024a4 <LCD1602A_SetCursorPos>
                  LCD1602A_PrintStr("LCD QUEUE FULL");
 80004c6:	4847      	ldr	r0, [pc, #284]	; (80005e4 <vStart_tsk_LEDx_blink+0x1dc>)
 80004c8:	f002 f912 	bl	80026f0 <LCD1602A_PrintStr>
                  osDelay(2000);
 80004cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d0:	f007 fee4 	bl	800829c <osDelay>
 80004d4:	e7c1      	b.n	800045a <vStart_tsk_LEDx_blink+0x52>
              LCD1602A_SetCursorPos(0, 1);
 80004d6:	2101      	movs	r1, #1
 80004d8:	2000      	movs	r0, #0
 80004da:	f001 ffe3 	bl	80024a4 <LCD1602A_SetCursorPos>
              LCD1602A_PrintStr("LCD QUEUE FULL");
 80004de:	4841      	ldr	r0, [pc, #260]	; (80005e4 <vStart_tsk_LEDx_blink+0x1dc>)
 80004e0:	f002 f906 	bl	80026f0 <LCD1602A_PrintStr>
              osDelay(2000);
 80004e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004e8:	f007 fed8 	bl	800829c <osDelay>
 80004ec:	e7de      	b.n	80004ac <vStart_tsk_LEDx_blink+0xa4>
                  {
                  xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
                  }
              else
                  {
                  LCD1602A_SetCursorPos(0, 1);
 80004ee:	2101      	movs	r1, #1
 80004f0:	2000      	movs	r0, #0
 80004f2:	f001 ffd7 	bl	80024a4 <LCD1602A_SetCursorPos>
                  LCD1602A_PrintStr("LCD QUEUE FULL");
 80004f6:	483b      	ldr	r0, [pc, #236]	; (80005e4 <vStart_tsk_LEDx_blink+0x1dc>)
 80004f8:	f002 f8fa 	bl	80026f0 <LCD1602A_PrintStr>
                  osDelay(2000);
 80004fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000500:	f007 fecc 	bl	800829c <osDelay>
 8000504:	e039      	b.n	800057a <vStart_tsk_LEDx_blink+0x172>
                     {
                     xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
                     }
                 else
                     {
                     LCD1602A_SetCursorPos(0, 1);
 8000506:	2101      	movs	r1, #1
 8000508:	2000      	movs	r0, #0
 800050a:	f001 ffcb 	bl	80024a4 <LCD1602A_SetCursorPos>
                     LCD1602A_PrintStr("LCD QUEUE FULL");
 800050e:	4835      	ldr	r0, [pc, #212]	; (80005e4 <vStart_tsk_LEDx_blink+0x1dc>)
 8000510:	f002 f8ee 	bl	80026f0 <LCD1602A_PrintStr>
                     osDelay(2000);
 8000514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000518:	f007 fec0 	bl	800829c <osDelay>
                     }
                // osSemaphoreRelease(mt_LCD_freeHandle);}
                taskYIELD();
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <vStart_tsk_LEDx_blink+0x1d8>)
 800051e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	f3bf 8f4f 	dsb	sy
 8000528:	f3bf 8f6f 	isb	sy
      if (arg == 0)
 800052c:	2c00      	cmp	r4, #0
 800052e:	f43f af6f 	beq.w	8000410 <vStart_tsk_LEDx_blink+0x8>
              lcd_msg_buf.is_data = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	f88d 3006 	strb.w	r3, [sp, #6]
              lcd_msg_buf.pos_x = 1;
 8000538:	f88d 3004 	strb.w	r3, [sp, #4]
              lcd_msg_buf.pos_y = 1;
 800053c:	f88d 3005 	strb.w	r3, [sp, #5]
              sprintf(lcd_msg_buf.msg, "LED2Task_enter" + '\0');
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <vStart_tsk_LEDx_blink+0x1e0>)
 8000542:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000544:	f8cd 0007 	str.w	r0, [sp, #7]
 8000548:	f8cd 100b 	str.w	r1, [sp, #11]
 800054c:	f8cd 200f 	str.w	r2, [sp, #15]
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	f8ad 2013 	strh.w	r2, [sp, #19]
 8000558:	f88d 3015 	strb.w	r3, [sp, #21]
              msgcnt = uxQueueSpacesAvailable(msgto_gkt_LCDHandle);
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	f008 facd 	bl	8008afe <uxQueueSpacesAvailable>
 8000564:	b2c0      	uxtb	r0, r0
              if ( msgcnt)
 8000566:	2800      	cmp	r0, #0
 8000568:	d0c1      	beq.n	80004ee <vStart_tsk_LEDx_blink+0xe6>
                  xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
 800056a:	2300      	movs	r3, #0
 800056c:	f04f 32ff 	mov.w	r2, #4294967295
 8000570:	a901      	add	r1, sp, #4
 8000572:	4818      	ldr	r0, [pc, #96]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 8000574:	6800      	ldr	r0, [r0, #0]
 8000576:	f008 f893 	bl	80086a0 <xQueueGenericSend>
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <vStart_tsk_LEDx_blink+0x1d0>)
 800057c:	68d3      	ldr	r3, [r2, #12]
 800057e:	f083 0304 	eor.w	r3, r3, #4
 8000582:	60d3      	str	r3, [r2, #12]
                 osDelay(230);
 8000584:	20e6      	movs	r0, #230	; 0xe6
 8000586:	f007 fe89 	bl	800829c <osDelay>
                 lcd_msg_buf.is_data = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	f88d 3006 	strb.w	r3, [sp, #6]
                 lcd_msg_buf.pos_x = 1;
 8000590:	f88d 3004 	strb.w	r3, [sp, #4]
                 lcd_msg_buf.pos_y = 1;
 8000594:	f88d 3005 	strb.w	r3, [sp, #5]
                 sprintf(lcd_msg_buf.msg, "LED2Task_exit" + '\0');
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <vStart_tsk_LEDx_blink+0x1e4>)
 800059a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800059c:	f8cd 0007 	str.w	r0, [sp, #7]
 80005a0:	f8cd 100b 	str.w	r1, [sp, #11]
 80005a4:	f8cd 200f 	str.w	r2, [sp, #15]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	f8ad 3013 	strh.w	r3, [sp, #19]
                 msgcnt = uxQueueSpacesAvailable(msgto_gkt_LCDHandle);
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f008 faa4 	bl	8008afe <uxQueueSpacesAvailable>
 80005b6:	b2c0      	uxtb	r0, r0
                 if ( msgcnt)
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d0a4      	beq.n	8000506 <vStart_tsk_LEDx_blink+0xfe>
                     xQueueSend(msgto_gkt_LCDHandle, &lcd_msg_buf, portMAX_DELAY);
 80005bc:	2300      	movs	r3, #0
 80005be:	f04f 32ff 	mov.w	r2, #4294967295
 80005c2:	a901      	add	r1, sp, #4
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <vStart_tsk_LEDx_blink+0x1cc>)
 80005c6:	6800      	ldr	r0, [r0, #0]
 80005c8:	f008 f86a 	bl	80086a0 <xQueueGenericSend>
 80005cc:	e7a6      	b.n	800051c <vStart_tsk_LEDx_blink+0x114>
 80005ce:	bf00      	nop
 80005d0:	0800eef4 	.word	0x0800eef4
 80005d4:	20004748 	.word	0x20004748
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	0800ef14 	.word	0x0800ef14
 80005e0:	e000ed04 	.word	0xe000ed04
 80005e4:	0800ef04 	.word	0x0800ef04
 80005e8:	0800ef24 	.word	0x0800ef24
 80005ec:	0800ef34 	.word	0x0800ef34

080005f0 <vStart_gkt_LCD>:
* @param argument: Not used
* @retval None
*/
/* Header_vStart_gkt_LCD */
void vStart_gkt_LCD(const void * argument)
{
 80005f0:	b500      	push	{lr}
 80005f2:	b08d      	sub	sp, #52	; 0x34
 80005f4:	e007      	b.n	8000606 <vStart_gkt_LCD+0x16>
               {
               LCD1602A_SetCursorPos(msgbuf.pos_x, msgbuf.pos_y);
               LCD1602A_PrintStr(msgbuf.msg);
               }
          }
      taskYIELD();
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <vStart_gkt_LCD+0x50>)
 80005f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	f3bf 8f6f 	isb	sy
      if (uxQueueMessagesWaiting(msgto_gkt_LCDHandle))
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <vStart_gkt_LCD+0x54>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	f008 fa65 	bl	8008ad8 <uxQueueMessagesWaiting>
 800060e:	2800      	cmp	r0, #0
 8000610:	d0f1      	beq.n	80005f6 <vStart_gkt_LCD+0x6>
            xQueueReceive(msgto_gkt_LCDHandle, &msgbuf, portMAX_DELAY);
 8000612:	2300      	movs	r3, #0
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	a901      	add	r1, sp, #4
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <vStart_gkt_LCD+0x54>)
 800061c:	6800      	ldr	r0, [r0, #0]
 800061e:	f008 f989 	bl	8008934 <xQueueGenericReceive>
            if (msgbuf.is_data)
 8000622:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0e5      	beq.n	80005f6 <vStart_gkt_LCD+0x6>
               LCD1602A_SetCursorPos(msgbuf.pos_x, msgbuf.pos_y);
 800062a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800062e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000632:	f001 ff37 	bl	80024a4 <LCD1602A_SetCursorPos>
               LCD1602A_PrintStr(msgbuf.msg);
 8000636:	f10d 0007 	add.w	r0, sp, #7
 800063a:	f002 f859 	bl	80026f0 <LCD1602A_PrintStr>
 800063e:	e7da      	b.n	80005f6 <vStart_gkt_LCD+0x6>
 8000640:	e000ed04 	.word	0xe000ed04
 8000644:	20004748 	.word	0x20004748

08000648 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 8000648:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_CRC_Init+0x1c>)
 800064c:	695a      	ldr	r2, [r3, #20]
 800064e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000652:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800065c:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);

}
 800065e:	b002      	add	sp, #8
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000668:	b500      	push	{lr}
 800066a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHBENR, Periphs);
 800066c:	4bb2      	ldr	r3, [pc, #712]	; (8000938 <MX_DMA_Init+0x2d0>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	f042 0201 	orr.w	r2, r2, #1
 8000674:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	f002 0201 	and.w	r2, r2, #1
 800067c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800067e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	f042 0202 	orr.w	r2, r2, #2
 8000686:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000690:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000692:	4baa      	ldr	r3, [pc, #680]	; (800093c <MX_DMA_Init+0x2d4>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800069a:	f022 0210 	bic.w	r2, r2, #16
 800069e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006a2:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80006aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f022 0220 	bic.w	r2, r2, #32
 80006b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80006da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80006e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80006ea:	f022 0210 	bic.w	r2, r2, #16
 80006ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80006fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	f022 0220 	bic.w	r2, r2, #32
 8000706:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800070e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000716:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800071e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000726:	601a      	str	r2, [r3, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b85      	ldr	r3, [pc, #532]	; (8000940 <MX_DMA_Init+0x2d8>)
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	f1c2 0307 	rsb	r3, r2, #7
 8000734:	2b04      	cmp	r3, #4
 8000736:	bf28      	it	cs
 8000738:	2304      	movcs	r3, #4
 800073a:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073c:	1d13      	adds	r3, r2, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	f240 80e9 	bls.w	8000916 <MX_DMA_Init+0x2ae>
 8000744:	3a03      	subs	r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	408b      	lsls	r3, r1
 800074c:	43db      	mvns	r3, r3
 800074e:	f003 0305 	and.w	r3, r3, #5
 8000752:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4a7a      	ldr	r2, [pc, #488]	; (8000944 <MX_DMA_Init+0x2dc>)
 800075a:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800075e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000762:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b76      	ldr	r3, [pc, #472]	; (8000940 <MX_DMA_Init+0x2d8>)
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	f1c2 0307 	rsb	r3, r2, #7
 8000770:	2b04      	cmp	r3, #4
 8000772:	bf28      	it	cs
 8000774:	2304      	movcs	r3, #4
 8000776:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000778:	1d13      	adds	r3, r2, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	f240 80cd 	bls.w	800091a <MX_DMA_Init+0x2b2>
 8000780:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	408b      	lsls	r3, r1
 8000788:	43db      	mvns	r3, r3
 800078a:	f003 0305 	and.w	r3, r3, #5
 800078e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4a6b      	ldr	r2, [pc, #428]	; (8000944 <MX_DMA_Init+0x2dc>)
 8000796:	f882 330c 	strb.w	r3, [r2, #780]	; 0x30c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b67      	ldr	r3, [pc, #412]	; (8000940 <MX_DMA_Init+0x2d8>)
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	f1c2 0307 	rsb	r3, r2, #7
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	bf28      	it	cs
 80007b0:	2304      	movcs	r3, #4
 80007b2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b4:	1d13      	adds	r3, r2, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	f240 80b1 	bls.w	800091e <MX_DMA_Init+0x2b6>
 80007bc:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	408b      	lsls	r3, r1
 80007c4:	43db      	mvns	r3, r3
 80007c6:	f003 0305 	and.w	r3, r3, #5
 80007ca:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4a5c      	ldr	r2, [pc, #368]	; (8000944 <MX_DMA_Init+0x2dc>)
 80007d2:	f882 330d 	strb.w	r3, [r2, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b58      	ldr	r3, [pc, #352]	; (8000940 <MX_DMA_Init+0x2d8>)
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	f1c2 0307 	rsb	r3, r2, #7
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	bf28      	it	cs
 80007ec:	2304      	movcs	r3, #4
 80007ee:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f0:	1d13      	adds	r3, r2, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	f240 8095 	bls.w	8000922 <MX_DMA_Init+0x2ba>
 80007f8:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	408b      	lsls	r3, r1
 8000800:	43db      	mvns	r3, r3
 8000802:	f003 0305 	and.w	r3, r3, #5
 8000806:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4a4d      	ldr	r2, [pc, #308]	; (8000944 <MX_DMA_Init+0x2dc>)
 800080e:	f882 330e 	strb.w	r3, [r2, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000816:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b49      	ldr	r3, [pc, #292]	; (8000940 <MX_DMA_Init+0x2d8>)
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	f1c2 0307 	rsb	r3, r2, #7
 8000824:	2b04      	cmp	r3, #4
 8000826:	bf28      	it	cs
 8000828:	2304      	movcs	r3, #4
 800082a:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082c:	1d13      	adds	r3, r2, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d979      	bls.n	8000926 <MX_DMA_Init+0x2be>
 8000832:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	408b      	lsls	r3, r1
 800083a:	43db      	mvns	r3, r3
 800083c:	f003 0305 	and.w	r3, r3, #5
 8000840:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4a3f      	ldr	r2, [pc, #252]	; (8000944 <MX_DMA_Init+0x2dc>)
 8000848:	f882 330f 	strb.w	r3, [r2, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800084c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000850:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_DMA_Init+0x2d8>)
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085a:	f1c2 0307 	rsb	r3, r2, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	1d13      	adds	r3, r2, #4
 8000868:	2b06      	cmp	r3, #6
 800086a:	d95e      	bls.n	800092a <MX_DMA_Init+0x2c2>
 800086c:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	408b      	lsls	r3, r1
 8000874:	43db      	mvns	r3, r3
 8000876:	f003 0305 	and.w	r3, r3, #5
 800087a:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4a30      	ldr	r2, [pc, #192]	; (8000944 <MX_DMA_Init+0x2dc>)
 8000882:	f882 3310 	strb.w	r3, [r2, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_DMA_Init+0x2d8>)
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000894:	f1c2 0307 	rsb	r3, r2, #7
 8000898:	2b04      	cmp	r3, #4
 800089a:	bf28      	it	cs
 800089c:	2304      	movcs	r3, #4
 800089e:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a0:	1d13      	adds	r3, r2, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d943      	bls.n	800092e <MX_DMA_Init+0x2c6>
 80008a6:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	408b      	lsls	r3, r1
 80008ae:	43db      	mvns	r3, r3
 80008b0:	f003 0305 	and.w	r3, r3, #5
 80008b4:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <MX_DMA_Init+0x2dc>)
 80008bc:	f882 3311 	strb.w	r3, [r2, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c4:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_DMA_Init+0x2d8>)
 80008c8:	68da      	ldr	r2, [r3, #12]
 80008ca:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ce:	f1c2 0307 	rsb	r3, r2, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	1d13      	adds	r3, r2, #4
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d928      	bls.n	8000932 <MX_DMA_Init+0x2ca>
 80008e0:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	408b      	lsls	r3, r1
 80008e8:	43db      	mvns	r3, r3
 80008ea:	f003 0305 	and.w	r3, r3, #5
 80008ee:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_DMA_Init+0x2dc>)
 80008f6:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008fe:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2105      	movs	r1, #5
 8000904:	203b      	movs	r0, #59	; 0x3b
 8000906:	f001 ff59 	bl	80027bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800090a:	203b      	movs	r0, #59	; 0x3b
 800090c:	f001 ff9c 	bl	8002848 <HAL_NVIC_EnableIRQ>

}
 8000910:	b003      	add	sp, #12
 8000912:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	2200      	movs	r2, #0
 8000918:	e715      	b.n	8000746 <MX_DMA_Init+0xde>
 800091a:	2200      	movs	r2, #0
 800091c:	e731      	b.n	8000782 <MX_DMA_Init+0x11a>
 800091e:	2200      	movs	r2, #0
 8000920:	e74d      	b.n	80007be <MX_DMA_Init+0x156>
 8000922:	2200      	movs	r2, #0
 8000924:	e769      	b.n	80007fa <MX_DMA_Init+0x192>
 8000926:	2200      	movs	r2, #0
 8000928:	e784      	b.n	8000834 <MX_DMA_Init+0x1cc>
 800092a:	2200      	movs	r2, #0
 800092c:	e79f      	b.n	800086e <MX_DMA_Init+0x206>
 800092e:	2200      	movs	r2, #0
 8000930:	e7ba      	b.n	80008a8 <MX_DMA_Init+0x240>
 8000932:	2200      	movs	r2, #0
 8000934:	e7d5      	b.n	80008e2 <MX_DMA_Init+0x27a>
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40020008 	.word	0x40020008
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	e000e100 	.word	0xe000e100

08000948 <tmTestTimer_clbck>:
void tmTestTimer_clbck(const void * argument)
{
  /* USER CODE BEGIN tmTestTimer_clbck */

  /* USER CODE END tmTestTimer_clbck */
}
 8000948:	4770      	bx	lr

0800094a <vStart_tsk_SPINand_io>:
{
 800094a:	b508      	push	{r3, lr}
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f007 fca5 	bl	800829c <osDelay>
 8000952:	e7fb      	b.n	800094c <vStart_tsk_SPINand_io+0x2>

08000954 <configureTimerForRunTimeStats>:
}
 8000954:	4770      	bx	lr

08000956 <getRunTimeCounterValue>:
}
 8000956:	2000      	movs	r0, #0
 8000958:	4770      	bx	lr

0800095a <vApplicationMallocFailedHook>:
}
 800095a:	4770      	bx	lr

0800095c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer   = &xIdleTaskTCBBuffer;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <vApplicationGetIdleTaskMemory+0x10>)
 800095e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <vApplicationGetIdleTaskMemory+0x14>)
 8000962:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200003ac 	.word	0x200003ac
 8000970:	200001ac 	.word	0x200001ac

08000974 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <vApplicationGetTimerTaskMemory+0x10>)
 8000976:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <vApplicationGetTimerTaskMemory+0x14>)
 800097a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800097c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000980:	6013      	str	r3, [r2, #0]
}
 8000982:	4770      	bx	lr
 8000984:	20000820 	.word	0x20000820
 8000988:	20000420 	.word	0x20000420

0800098c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b0bb      	sub	sp, #236	; 0xec
  osMutexStaticDef(mt_SPI1_free, &mt_SPI1_freeControlBlock);
 8000990:	2500      	movs	r5, #0
 8000992:	9538      	str	r5, [sp, #224]	; 0xe0
 8000994:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <MX_FREERTOS_Init+0x148>)
 8000996:	9339      	str	r3, [sp, #228]	; 0xe4
  mt_SPI1_freeHandle = osMutexCreate(osMutex(mt_SPI1_free));
 8000998:	a838      	add	r0, sp, #224	; 0xe0
 800099a:	f007 fcab 	bl	80082f4 <osMutexCreate>
 800099e:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <MX_FREERTOS_Init+0x14c>)
 80009a0:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_SPI2_free, &mt_SPI2_freeControlBlock);
 80009a2:	9536      	str	r5, [sp, #216]	; 0xd8
 80009a4:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <MX_FREERTOS_Init+0x150>)
 80009a6:	9337      	str	r3, [sp, #220]	; 0xdc
  mt_SPI2_freeHandle = osMutexCreate(osMutex(mt_SPI2_free));
 80009a8:	a836      	add	r0, sp, #216	; 0xd8
 80009aa:	f007 fca3 	bl	80082f4 <osMutexCreate>
 80009ae:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <MX_FREERTOS_Init+0x154>)
 80009b0:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_LCD_free, &mt_LCD_freeControlBlock);
 80009b2:	9534      	str	r5, [sp, #208]	; 0xd0
 80009b4:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <MX_FREERTOS_Init+0x158>)
 80009b6:	9335      	str	r3, [sp, #212]	; 0xd4
  mt_LCD_freeHandle = osMutexCreate(osMutex(mt_LCD_free));
 80009b8:	a834      	add	r0, sp, #208	; 0xd0
 80009ba:	f007 fc9b 	bl	80082f4 <osMutexCreate>
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <MX_FREERTOS_Init+0x15c>)
 80009c0:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART1_free, &mt_UART1_freeControlBlock);
 80009c2:	9532      	str	r5, [sp, #200]	; 0xc8
 80009c4:	4b49      	ldr	r3, [pc, #292]	; (8000aec <MX_FREERTOS_Init+0x160>)
 80009c6:	9333      	str	r3, [sp, #204]	; 0xcc
  mt_UART1_freeHandle = osMutexCreate(osMutex(mt_UART1_free));
 80009c8:	a832      	add	r0, sp, #200	; 0xc8
 80009ca:	f007 fc93 	bl	80082f4 <osMutexCreate>
 80009ce:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <MX_FREERTOS_Init+0x164>)
 80009d0:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART2_free, &mt_UART2_freeControlBlock);
 80009d2:	9530      	str	r5, [sp, #192]	; 0xc0
 80009d4:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <MX_FREERTOS_Init+0x168>)
 80009d6:	9331      	str	r3, [sp, #196]	; 0xc4
  mt_UART2_freeHandle = osMutexCreate(osMutex(mt_UART2_free));
 80009d8:	a830      	add	r0, sp, #192	; 0xc0
 80009da:	f007 fc8b 	bl	80082f4 <osMutexCreate>
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <MX_FREERTOS_Init+0x16c>)
 80009e0:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_NAND_FLASH, &mt_NAND_FLASHControlBlock);
 80009e2:	952e      	str	r5, [sp, #184]	; 0xb8
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <MX_FREERTOS_Init+0x170>)
 80009e6:	932f      	str	r3, [sp, #188]	; 0xbc
  mt_NAND_FLASHHandle = osMutexCreate(osMutex(mt_NAND_FLASH));
 80009e8:	a82e      	add	r0, sp, #184	; 0xb8
 80009ea:	f007 fc83 	bl	80082f4 <osMutexCreate>
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <MX_FREERTOS_Init+0x174>)
 80009f0:	6018      	str	r0, [r3, #0]
  osTimerStaticDef(tmTestTimer, tmTestTimer_clbck, &tmTestTimerControlBlock);
 80009f2:	4c44      	ldr	r4, [pc, #272]	; (8000b04 <MX_FREERTOS_Init+0x178>)
 80009f4:	ab2c      	add	r3, sp, #176	; 0xb0
 80009f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009fa:	e883 0003 	stmia.w	r3, {r0, r1}
  tmTestTimerHandle = osTimerCreate(osTimer(tmTestTimer), osTimerPeriodic, NULL);
 80009fe:	462a      	mov	r2, r5
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f007 fc54 	bl	80082b0 <osTimerCreate>
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <MX_FREERTOS_Init+0x17c>)
 8000a0a:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(msgto_tsk_SpiNand_io, 16, uint8_t, msgto_SpiNand_wrkrBuffer, &msgto_SpiNand_wrkrControlBlock);
 8000a0c:	ae28      	add	r6, sp, #160	; 0xa0
 8000a0e:	f104 0308 	add.w	r3, r4, #8
 8000a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a14:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  msgto_tsk_SpiNand_ioHandle = osMessageCreate(osMessageQ(msgto_tsk_SpiNand_io), NULL);
 8000a18:	4629      	mov	r1, r5
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f007 fc75 	bl	800830a <osMessageCreate>
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_FREERTOS_Init+0x180>)
 8000a22:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(msgto_gkt_LCD, 16, lcd_msg, msgto_gkt_LCDBuffer, &msgto_gkt_LCDControlBlock);
 8000a24:	ae24      	add	r6, sp, #144	; 0x90
 8000a26:	f104 0318 	add.w	r3, r4, #24
 8000a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a2c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  msgto_gkt_LCDHandle = osMessageCreate(osMessageQ(msgto_gkt_LCD), NULL);
 8000a30:	4629      	mov	r1, r5
 8000a32:	4630      	mov	r0, r6
 8000a34:	f007 fc69 	bl	800830a <osMessageCreate>
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_FREERTOS_Init+0x184>)
 8000a3a:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_INIT_Periph, vStart_tsk_INIT_Periph, osPriorityAboveNormal, 0, 256, tsk_INIT_PeriphBuffer, &tsk_INIT_PeriphControlBlock);
 8000a3c:	ae1d      	add	r6, sp, #116	; 0x74
 8000a3e:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8000a42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a46:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000a4a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_INIT_PeriphHandle = osThreadCreate(osThread(tsk_INIT_Periph), NULL);
 8000a4e:	4629      	mov	r1, r5
 8000a50:	a81d      	add	r0, sp, #116	; 0x74
 8000a52:	f007 fbe8 	bl	8008226 <osThreadCreate>
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_FREERTOS_Init+0x188>)
 8000a58:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_SPINand_io, vStart_tsk_SPINand_io, osPriorityNormal, 0, 1024, tsk_SPINand_ioBuffer, &tsk_SPINand_ioControlBlock);
 8000a5a:	ae16      	add	r6, sp, #88	; 0x58
 8000a5c:	f104 0744 	add.w	r7, r4, #68	; 0x44
 8000a60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a64:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000a68:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_SPINand_ioHandle = osThreadCreate(osThread(tsk_SPINand_io), NULL);
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	a816      	add	r0, sp, #88	; 0x58
 8000a70:	f007 fbd9 	bl	8008226 <osThreadCreate>
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_FREERTOS_Init+0x18c>)
 8000a76:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED1_blink, vStart_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED1_blinkBuffer, &tsk_LED1_blinkControlBlock);
 8000a78:	ae0f      	add	r6, sp, #60	; 0x3c
 8000a7a:	f104 0760 	add.w	r7, r4, #96	; 0x60
 8000a7e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a82:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000a86:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_LED1_blinkHandle = osThreadCreate(osThread(tsk_LED1_blink), NULL);
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	a80f      	add	r0, sp, #60	; 0x3c
 8000a8e:	f007 fbca 	bl	8008226 <osThreadCreate>
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_FREERTOS_Init+0x190>)
 8000a94:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED2_blink, vStart_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED2_blinkBuffer, &tsk_LED2_blinkControlBlock);
 8000a96:	ae08      	add	r6, sp, #32
 8000a98:	f104 077c 	add.w	r7, r4, #124	; 0x7c
 8000a9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aa0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000aa4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_LED2_blinkHandle = osThreadCreate(osThread(tsk_LED2_blink), (void*) 1);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	a808      	add	r0, sp, #32
 8000aac:	f007 fbbb 	bl	8008226 <osThreadCreate>
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_FREERTOS_Init+0x194>)
 8000ab2:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(gkt_LCD, vStart_gkt_LCD, osPriorityNormal, 0, 256, gkt_LCDBuffer, &gkt_LCDControlBlock);
 8000ab4:	ae01      	add	r6, sp, #4
 8000ab6:	3498      	adds	r4, #152	; 0x98
 8000ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000abc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ac0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  gkt_LCDHandle = osThreadCreate(osThread(gkt_LCD), NULL);
 8000ac4:	4629      	mov	r1, r5
 8000ac6:	a801      	add	r0, sp, #4
 8000ac8:	f007 fbad 	bl	8008226 <osThreadCreate>
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_FREERTOS_Init+0x198>)
 8000ace:	6018      	str	r0, [r3, #0]
}
 8000ad0:	b03b      	add	sp, #236	; 0xec
 8000ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad4:	20004174 	.word	0x20004174
 8000ad8:	20003ccc 	.word	0x20003ccc
 8000adc:	20004690 	.word	0x20004690
 8000ae0:	20004c68 	.word	0x20004c68
 8000ae4:	20003cd0 	.word	0x20003cd0
 8000ae8:	20004c70 	.word	0x20004c70
 8000aec:	200046f8 	.word	0x200046f8
 8000af0:	2000513c 	.word	0x2000513c
 8000af4:	20004124 	.word	0x20004124
 8000af8:	200046f4 	.word	0x200046f4
 8000afc:	20005140 	.word	0x20005140
 8000b00:	200046f0 	.word	0x200046f0
 8000b04:	0800edc8 	.word	0x0800edc8
 8000b08:	200045c4 	.word	0x200045c4
 8000b0c:	20005190 	.word	0x20005190
 8000b10:	20004748 	.word	0x20004748
 8000b14:	20004c6c 	.word	0x20004c6c
 8000b18:	200045c8 	.word	0x200045c8
 8000b1c:	200050c4 	.word	0x200050c4
 8000b20:	2000474c 	.word	0x2000474c
 8000b24:	20004120 	.word	0x20004120

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b2c:	b08d      	sub	sp, #52	; 0x34

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000b2e:	2500      	movs	r5, #0
 8000b30:	950b      	str	r5, [sp, #44]	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	9505      	str	r5, [sp, #20]
 8000b34:	9506      	str	r5, [sp, #24]
 8000b36:	9507      	str	r5, [sp, #28]
 8000b38:	9508      	str	r5, [sp, #32]
 8000b3a:	9509      	str	r5, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b3c:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <MX_GPIO_Init+0x204>)
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	f042 0210 	orr.w	r2, r2, #16
 8000b44:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	f002 0210 	and.w	r2, r2, #16
 8000b4c:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000b4e:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	f042 0220 	orr.w	r2, r2, #32
 8000b56:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	f002 0220 	and.w	r2, r2, #32
 8000b5e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000b60:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b62:	699a      	ldr	r2, [r3, #24]
 8000b64:	f042 0204 	orr.w	r2, r2, #4
 8000b68:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6a:	699a      	ldr	r2, [r3, #24]
 8000b6c:	f002 0204 	and.w	r2, r2, #4
 8000b70:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000b72:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	f042 0208 	orr.w	r2, r2, #8
 8000b7a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b84:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000b86:	4f6a      	ldr	r7, [pc, #424]	; (8000d30 <MX_GPIO_Init+0x208>)
 8000b88:	f248 0303 	movw	r3, #32771	; 0x8003
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000d4c <MX_GPIO_Init+0x224>
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	f8c8 3014 	str.w	r3, [r8, #20]
 8000b98:	4e66      	ldr	r6, [pc, #408]	; (8000d34 <MX_GPIO_Init+0x20c>)
 8000b9a:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8000b9e:	6173      	str	r3, [r6, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	2350      	movs	r3, #80	; 0x50
 8000ba6:	f8c8 3010 	str.w	r3, [r8, #16]
 8000baa:	f04f 0a02 	mov.w	sl, #2
 8000bae:	f8c6 a010 	str.w	sl, [r6, #16]
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000bb2:	4a61      	ldr	r2, [pc, #388]	; (8000d38 <MX_GPIO_Init+0x210>)
 8000bb4:	6891      	ldr	r1, [r2, #8]
 8000bb6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	fab3 f383 	clz	r3, r3
 8000bc6:	fa0a f303 	lsl.w	r3, sl, r3
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6093      	str	r3, [r2, #8]
 8000bce:	6953      	ldr	r3, [r2, #20]
 8000bd0:	f023 030f 	bic.w	r3, r3, #15
 8000bd4:	f04f 090f 	mov.w	r9, #15
 8000bd8:	fa99 f1a9 	rbit	r1, r9
 8000bdc:	fab1 f181 	clz	r1, r1
 8000be0:	2401      	movs	r4, #1
 8000be2:	fa04 f101 	lsl.w	r1, r4, r1
 8000be6:	430b      	orrs	r3, r1
 8000be8:	6153      	str	r3, [r2, #20]

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000bea:	2308      	movs	r3, #8
 8000bec:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bee:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf2:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bf6:	a80a      	add	r0, sp, #40	; 0x28
 8000bf8:	f004 f8d0 	bl	8004d9c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c02:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c06:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c0a:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c0e:	a80a      	add	r0, sp, #40	; 0x28
 8000c10:	f004 f8c4 	bl	8004d9c <LL_EXTI_Init>
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000c14:	f8d8 1000 	ldr.w	r1, [r8]
 8000c18:	f640 0308 	movw	r3, #2056	; 0x808
 8000c1c:	fa93 f2a3 	rbit	r2, r3
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	fa02 f20a 	lsl.w	r2, r2, sl
 8000c28:	fa09 f202 	lsl.w	r2, r9, r2
 8000c2c:	ea21 0202 	bic.w	r2, r1, r2
 8000c30:	fa93 f3a3 	rbit	r3, r3
 8000c34:	fab3 f383 	clz	r3, r3
 8000c38:	fa03 f30a 	lsl.w	r3, r3, sl
 8000c3c:	f04f 0b04 	mov.w	fp, #4
 8000c40:	fa0b f303 	lsl.w	r3, fp, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	f8c8 3000 	str.w	r3, [r8]
 8000c4a:	6872      	ldr	r2, [r6, #4]
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <MX_GPIO_Init+0x214>)
 8000c4e:	fa93 f1a3 	rbit	r1, r3
 8000c52:	fab1 f181 	clz	r1, r1
 8000c56:	fa01 f10a 	lsl.w	r1, r1, sl
 8000c5a:	fa09 f901 	lsl.w	r9, r9, r1
 8000c5e:	ea22 0209 	bic.w	r2, r2, r9
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	fa03 f30a 	lsl.w	r3, r3, sl
 8000c6e:	fa0b f303 	lsl.w	r3, fp, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	6073      	str	r3, [r6, #4]

  /**/
  LL_GPIO_SetPinMode(NRF24_IRQ_GPIO_Port, NRF24_IRQ_Pin, LL_GPIO_MODE_FLOATING);

  /**/
  GPIO_InitStruct.Pin = E32_M0_Pin|E32_M1_Pin;
 8000c76:	f240 3303 	movw	r3, #771	; 0x303
 8000c7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c7c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7e:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c82:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	a905      	add	r1, sp, #20
 8000c86:	4638      	mov	r0, r7
 8000c88:	f004 f916 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_DISCONNECT_Pin;
 8000c8c:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c94:	f04f 0903 	mov.w	r9, #3
 8000c98:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c9c:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ca0:	9409      	str	r4, [sp, #36]	; 0x24
  LL_GPIO_Init(USB_DISCONNECT_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	a905      	add	r1, sp, #20
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f004 f907 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FLASH_CSN_Pin;
 8000caa:	f241 0310 	movw	r3, #4112	; 0x1010
 8000cae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cb0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000cb2:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cb6:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(FLASH_CSN_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	a905      	add	r1, sp, #20
 8000cba:	4640      	mov	r0, r8
 8000cbc:	f004 f8fc 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRF24_PWR_EN_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8000cc0:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
 8000cc4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cc6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000cc8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cca:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	a905      	add	r1, sp, #20
 8000cce:	4640      	mov	r0, r8
 8000cd0:	f004 f8f2 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = E32_PWR_EN_Pin|LED1_Pin|LED2_Pin;
 8000cd4:	f240 7307 	movw	r3, #1799	; 0x707
 8000cd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cdc:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ce0:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	a905      	add	r1, sp, #20
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f004 f8e7 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDIO_SW_IN_Pin;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_GPIO_Init+0x218>)
 8000cec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000cf2:	9409      	str	r4, [sp, #36]	; 0x24
  LL_GPIO_Init(SDIO_SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	a905      	add	r1, sp, #20
 8000cf6:	4638      	mov	r0, r7
 8000cf8:	f004 f8de 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RW_Pin;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_GPIO_Init+0x21c>)
 8000cfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d00:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d02:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d06:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8000d08:	a905      	add	r1, sp, #20
 8000d0a:	4638      	mov	r0, r7
 8000d0c:	f004 f8d4 	bl	8004eb8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x220>)
 8000d12:	9305      	str	r3, [sp, #20]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d14:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d16:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d1a:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	a905      	add	r1, sp, #20
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f004 f8ca 	bl	8004eb8 <LL_GPIO_Init>

}
 8000d24:	b00d      	add	sp, #52	; 0x34
 8000d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	04100010 	.word	0x04100010
 8000d40:	04010001 	.word	0x04010001
 8000d44:	04800080 	.word	0x04800080
 8000d48:	0403f0f3 	.word	0x0403f0f3
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d50:	b530      	push	{r4, r5, lr}
 8000d52:	b08f      	sub	sp, #60	; 0x3c
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000d54:	2400      	movs	r4, #0
 8000d56:	9408      	str	r4, [sp, #32]
 8000d58:	9409      	str	r4, [sp, #36]	; 0x24
 8000d5a:	940a      	str	r4, [sp, #40]	; 0x28
 8000d5c:	940b      	str	r4, [sp, #44]	; 0x2c
 8000d5e:	940c      	str	r4, [sp, #48]	; 0x30
 8000d60:	940d      	str	r4, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d64:	4d20      	ldr	r5, [pc, #128]	; (8000de8 <MX_I2C2_Init+0x98>)
 8000d66:	69ab      	ldr	r3, [r5, #24]
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d6e:	69ab      	ldr	r3, [r5, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000d76:	9b02      	ldr	r3, [sp, #8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
  /**I2C2 GPIO Configuration  
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_I2C2_Init+0x9c>)
 8000d7a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d7c:	2309      	movs	r3, #9
 8000d7e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000d84:	2304      	movs	r3, #4
 8000d86:	9306      	str	r3, [sp, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	a903      	add	r1, sp, #12
 8000d8a:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_I2C2_Init+0xa0>)
 8000d8c:	f004 f894 	bl	8004eb8 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d90:	69eb      	ldr	r3, [r5, #28]
 8000d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d96:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d98:	69eb      	ldr	r3, [r5, #28]
 8000d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000da0:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000da2:	f5a5 35dc 	sub.w	r5, r5, #112640	; 0x1b800
 8000da6:	68eb      	ldr	r3, [r5, #12]
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000dae:	682b      	ldr	r3, [r5, #0]
 8000db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000db4:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000db6:	682b      	ldr	r3, [r5, #0]
 8000db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dbc:	602b      	str	r3, [r5, #0]
  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
  LL_I2C_DisableGeneralCall(I2C2);
  LL_I2C_EnableClockStretching(I2C2);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000dbe:	9408      	str	r4, [sp, #32]
  I2C_InitStruct.ClockSpeed = 400000;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_I2C2_Init+0xa4>)
 8000dc2:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000dc4:	940a      	str	r4, [sp, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000dc6:	940b      	str	r4, [sp, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dcc:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000dce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dd2:	930d      	str	r3, [sp, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000dd4:	a908      	add	r1, sp, #32
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f004 f942 	bl	8005060 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000ddc:	68eb      	ldr	r3, [r5, #12]
 8000dde:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000de2:	60eb      	str	r3, [r5, #12]
  LL_I2C_SetOwnAddress2(I2C2, 0);

}
 8000de4:	b00f      	add	sp, #60	; 0x3c
 8000de6:	bd30      	pop	{r4, r5, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	040c000c 	.word	0x040c000c
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	00061a80 	.word	0x00061a80

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dfa:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <SystemClock_Config+0xec>)
 8000dfc:	6813      	ldr	r3, [r2, #0]
 8000dfe:	f023 0307 	bic.w	r3, r3, #7
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e08:	6813      	ldr	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e0a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
    Error_Handler();  
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000e1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e1e:	d0fa      	beq.n	8000e16 <SystemClock_Config+0x1e>
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <SystemClock_Config+0xf4>)
 8000e22:	6813      	ldr	r3, [r2, #0]
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e2c:	6a1a      	ldr	r2, [r3, #32]
 8000e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e32:	621a      	str	r2, [r3, #32]
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e3a:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000e3c:	6a1a      	ldr	r2, [r3, #32]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	621a      	str	r2, [r3, #32]
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
  LL_RCC_ForceBackupDomainReset();
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000e48:	f013 0f02 	tst.w	r3, #2
 8000e4c:	d0fa      	beq.n	8000e44 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e50:	6a1a      	ldr	r2, [r3, #32]
 8000e52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e5a:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e5c:	6a1a      	ldr	r2, [r3, #32]
 8000e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e62:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e6a:	601a      	str	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000e72:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8000e76:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e7e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e88:	d0fa      	beq.n	8000e80 <SystemClock_Config+0x88>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e92:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e9e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000ea6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	f022 0203 	bic.w	r2, r2, #3
 8000eae:	f042 0202 	orr.w	r2, r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d1f9      	bne.n	8000eb4 <SystemClock_Config+0xbc>
  {
  
  }
  LL_Init1msTick(72000000);
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <SystemClock_Config+0xf8>)
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f005 fef2 	bl	8006cac <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SystemClock_Config+0xfc>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6013      	str	r3, [r2, #0]
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(72000000);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f005 ff10 	bl	8006cf8 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <SystemClock_Config+0xf0>)
 8000eda:	6853      	ldr	r3, [r2, #4]
 8000edc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ee0:	6053      	str	r3, [r2, #4]
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 8000ee2:	bd10      	pop	{r4, pc}
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	044aa200 	.word	0x044aa200
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <main>:
{
 8000ef8:	b508      	push	{r3, lr}
  HAL_Init();
 8000efa:	f001 fc09 	bl	8002710 <HAL_Init>
  SystemClock_Config();
 8000efe:	f7ff ff7b 	bl	8000df8 <SystemClock_Config>
  MX_GPIO_Init();
 8000f02:	f7ff fe11 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f06:	f7ff fbaf 	bl	8000668 <MX_DMA_Init>
  MX_SPI2_Init();
 8000f0a:	f000 f97d 	bl	8001208 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000f0e:	f000 f86d 	bl	8000fec <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000f12:	f000 fb45 	bl	80015a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f16:	f000 fc01 	bl	800171c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f1a:	f000 f8e5 	bl	80010e8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f1e:	f7ff ff17 	bl	8000d50 <MX_I2C2_Init>
  MX_CRC_Init();
 8000f22:	f7ff fb91 	bl	8000648 <MX_CRC_Init>
  MX_TIM7_Init();
 8000f26:	f000 fad3 	bl	80014d0 <MX_TIM7_Init>
  MX_RTC_Init();
 8000f2a:	f000 f81b 	bl	8000f64 <MX_RTC_Init>
  DWT_Delay_Init();
 8000f2e:	f005 fee9 	bl	8006d04 <DWT_Delay_Init>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <main+0x4c>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	611a      	str	r2, [r3, #16]
  MX_FREERTOS_Init();
 8000f38:	f7ff fd28 	bl	800098c <MX_FREERTOS_Init>
  osKernelStart();
 8000f3c:	f007 f96e 	bl	800821c <osKernelStart>
 8000f40:	e7fe      	b.n	8000f40 <main+0x48>
 8000f42:	bf00      	nop
 8000f44:	40010800 	.word	0x40010800

08000f48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f4a:	6802      	ldr	r2, [r0, #0]
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d000      	beq.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f52:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000f54:	f001 fbee 	bl	8002734 <HAL_IncTick>
}
 8000f58:	e7fb      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000f5a:	bf00      	nop
 8000f5c:	40001000 	.word	0x40001000

08000f60 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	4770      	bx	lr

08000f62 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f62:	4770      	bx	lr

08000f64 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f64:	b530      	push	{r4, r5, lr}
 8000f66:	b085      	sub	sp, #20
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000f68:	2400      	movs	r4, #0
 8000f6a:	9402      	str	r4, [sp, #8]
 8000f6c:	9403      	str	r4, [sp, #12]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000f6e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8000f72:	f88d 4006 	strb.w	r4, [sp, #6]
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <MX_RTC_Init+0x7c>)
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_RTC_Init+0x80>)
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000f88:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000f90:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000f92:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f9a:	621a      	str	r2, [r3, #32]
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();

  /** Initialize RTC and set the Time and Date 
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	9302      	str	r3, [sp, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000fa2:	4d11      	ldr	r5, [pc, #68]	; (8000fe8 <MX_RTC_Init+0x84>)
 8000fa4:	a902      	add	r1, sp, #8
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f004 fad0 	bl	800554c <LL_RTC_Init>
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8000fac:	68aa      	ldr	r2, [r5, #8]
 8000fae:	f022 020f 	bic.w	r2, r2, #15
 8000fb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8000fba:	68eb      	ldr	r3, [r5, #12]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	60eb      	str	r3, [r5, #12]
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
  /** Initialize RTC and set the Time and Date 
  */
  RTC_TimeStruct.Hours = 0;
 8000fc4:	f88d 4004 	strb.w	r4, [sp, #4]
  RTC_TimeStruct.Minutes = 0;
 8000fc8:	f88d 4005 	strb.w	r4, [sp, #5]
  RTC_TimeStruct.Seconds = 0;
 8000fcc:	f88d 4006 	strb.w	r4, [sp, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8000fd0:	aa01      	add	r2, sp, #4
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f004 f9e1 	bl	800539c <LL_RTC_TIME_Init>

}
 8000fda:	b005      	add	sp, #20
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40002800 	.word	0x40002800

08000fec <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <MX_SDIO_SD_Init+0x18>)
 8000fee:	4a06      	ldr	r2, [pc, #24]	; (8001008 <MX_SDIO_SD_Init+0x1c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ff6:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ff8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ffa:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ffc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000ffe:	2204      	movs	r2, #4
 8001000:	619a      	str	r2, [r3, #24]

}
 8001002:	4770      	bx	lr
 8001004:	2000624c 	.word	0x2000624c
 8001008:	40018000 	.word	0x40018000

0800100c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	2300      	movs	r3, #0
 8001012:	9304      	str	r3, [sp, #16]
 8001014:	9305      	str	r3, [sp, #20]
 8001016:	9306      	str	r3, [sp, #24]
 8001018:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDIO)
 800101a:	6802      	ldr	r2, [r0, #0]
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_SD_MspInit+0xc8>)
 800101e:	429a      	cmp	r2, r3
 8001020:	d001      	beq.n	8001026 <HAL_SD_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001022:	b008      	add	sp, #32
 8001024:	bd70      	pop	{r4, r5, r6, pc}
 8001026:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001028:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	f042 0210 	orr.w	r2, r2, #16
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	f002 0210 	and.w	r2, r2, #16
 800104c:	9202      	str	r2, [sp, #8]
 800104e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	699a      	ldr	r2, [r3, #24]
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	619a      	str	r2, [r3, #24]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	9303      	str	r3, [sp, #12]
 8001060:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001062:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001066:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2602      	movs	r6, #2
 800106a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2503      	movs	r5, #3
 800106e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	a904      	add	r1, sp, #16
 8001072:	4819      	ldr	r0, [pc, #100]	; (80010d8 <HAL_SD_MspInit+0xcc>)
 8001074:	f001 fef6 	bl	8002e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001078:	2304      	movs	r3, #4
 800107a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	a904      	add	r1, sp, #16
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <HAL_SD_MspInit+0xd0>)
 8001084:	f001 feee 	bl	8002e64 <HAL_GPIO_Init>
    hdma_sdio.Instance = DMA2_Channel4;
 8001088:	4815      	ldr	r0, [pc, #84]	; (80010e0 <HAL_SD_MspInit+0xd4>)
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_SD_MspInit+0xd8>)
 800108c:	6003      	str	r3, [r0, #0]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	2300      	movs	r3, #0
 8001090:	6043      	str	r3, [r0, #4]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	6083      	str	r3, [r0, #8]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	60c2      	str	r2, [r0, #12]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109c:	6102      	str	r2, [r0, #16]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800109e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a2:	6142      	str	r2, [r0, #20]
    hdma_sdio.Init.Mode = DMA_NORMAL;
 80010a4:	6183      	str	r3, [r0, #24]
    hdma_sdio.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80010ac:	f001 fbe2 	bl	8002874 <HAL_DMA_Init>
 80010b0:	b960      	cbnz	r0, 80010cc <HAL_SD_MspInit+0xc0>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_SD_MspInit+0xd4>)
 80010b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80010b6:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 80010b8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2031      	movs	r0, #49	; 0x31
 80010c0:	f001 fb7c 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80010c4:	2031      	movs	r0, #49	; 0x31
 80010c6:	f001 fbbf 	bl	8002848 <HAL_NVIC_EnableIRQ>
}
 80010ca:	e7aa      	b.n	8001022 <HAL_SD_MspInit+0x16>
      Error_Handler();
 80010cc:	f7ff ff48 	bl	8000f60 <Error_Handler>
 80010d0:	e7ef      	b.n	80010b2 <HAL_SD_MspInit+0xa6>
 80010d2:	bf00      	nop
 80010d4:	40018000 	.word	0x40018000
 80010d8:	40011000 	.word	0x40011000
 80010dc:	40011400 	.word	0x40011400
 80010e0:	20006208 	.word	0x20006208
 80010e4:	40020444 	.word	0x40020444

080010e8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010e8:	b530      	push	{r4, r5, lr}
 80010ea:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ec:	2228      	movs	r2, #40	; 0x28
 80010ee:	2100      	movs	r1, #0
 80010f0:	a808      	add	r0, sp, #32
 80010f2:	f00c fcdf 	bl	800dab4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	2400      	movs	r4, #0
 80010f8:	9406      	str	r4, [sp, #24]
 80010fa:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <MX_SPI1_Init+0x110>)
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001104:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800110c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800110e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001110:	699a      	ldr	r2, [r3, #24]
 8001112:	f042 0204 	orr.w	r2, r2, #4
 8001116:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001120:	9b01      	ldr	r3, [sp, #4]
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = FLASH_SPI1_SCK_Pin|FLASH_SPI1_MOSI_Pin;
 8001122:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8001126:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001128:	2309      	movs	r3, #9
 800112a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	4d32      	ldr	r5, [pc, #200]	; (80011fc <MX_SPI1_Init+0x114>)
 8001132:	a903      	add	r1, sp, #12
 8001134:	4628      	mov	r0, r5
 8001136:	f003 febf 	bl	8004eb8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FLASH_SPI1_MISO_Pin;
 800113a:	f244 0340 	movw	r3, #16448	; 0x4040
 800113e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001140:	2304      	movs	r3, #4
 8001142:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(FLASH_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001144:	a903      	add	r1, sp, #12
 8001146:	4628      	mov	r0, r5
 8001148:	f003 feb6 	bl	8004eb8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_SPI1_Init+0x118>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001154:	f022 0210 	bic.w	r2, r2, #16
 8001158:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001160:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f022 0220 	bic.w	r2, r2, #32
 8001168:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001170:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001178:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001180:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001188:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800118a:	3314      	adds	r3, #20
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001192:	f022 0210 	bic.w	r2, r2, #16
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f022 0220 	bic.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011b2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011ca:	601a      	str	r2, [r3, #0]

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011cc:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011d2:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011d4:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80011d6:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80011d8:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011de:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80011e0:	2308      	movs	r3, #8
 80011e2:	930e      	str	r3, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011e4:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011e6:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 80011e8:	230a      	movs	r3, #10
 80011ea:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80011ec:	a908      	add	r1, sp, #32
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_SPI1_Init+0x11c>)
 80011f0:	f004 fe76 	bl	8005ee0 <LL_SPI_Init>

}
 80011f4:	b013      	add	sp, #76	; 0x4c
 80011f6:	bd30      	pop	{r4, r5, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800
 8001200:	4002001c 	.word	0x4002001c
 8001204:	40013000 	.word	0x40013000

08001208 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001208:	b530      	push	{r4, r5, lr}
 800120a:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800120c:	2228      	movs	r2, #40	; 0x28
 800120e:	2100      	movs	r1, #0
 8001210:	a808      	add	r0, sp, #32
 8001212:	f00c fc4f 	bl	800dab4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	2400      	movs	r4, #0
 8001218:	9406      	str	r4, [sp, #24]
 800121a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_SPI2_Init+0x8c>)
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001224:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001226:	69da      	ldr	r2, [r3, #28]
 8001228:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800122c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800122e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	f042 0208 	orr.w	r2, r2, #8
 8001236:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001240:	9b01      	ldr	r3, [sp, #4]
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = NRF24_SPI2_SCK_Pin|NRF24_SPI2_MOSI_Pin;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_SPI2_Init+0x90>)
 8001244:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001246:	2309      	movs	r3, #9
 8001248:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	4d13      	ldr	r5, [pc, #76]	; (800129c <MX_SPI2_Init+0x94>)
 8001250:	a903      	add	r1, sp, #12
 8001252:	4628      	mov	r0, r5
 8001254:	f003 fe30 	bl	8004eb8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_SPI2_MISO_Pin;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI2_Init+0x98>)
 800125a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800125c:	2304      	movs	r3, #4
 800125e:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(NRF24_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 8001260:	a903      	add	r1, sp, #12
 8001262:	4628      	mov	r0, r5
 8001264:	f003 fe28 	bl	8004eb8 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001268:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800126a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800126e:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001270:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001272:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001274:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 800127c:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800127e:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001280:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 8001282:	230a      	movs	r3, #10
 8001284:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001286:	a908      	add	r1, sp, #32
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_SPI2_Init+0x9c>)
 800128a:	f004 fe29 	bl	8005ee0 <LL_SPI_Init>

}
 800128e:	b013      	add	sp, #76	; 0x4c
 8001290:	bd30      	pop	{r4, r5, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	04a000a0 	.word	0x04a000a0
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	04400040 	.word	0x04400040
 80012a4:	40003800 	.word	0x40003800

080012a8 <gd5f_block_device_sync>:
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
return LFS_ERR_OK;
}


static int gd5f_block_device_sync(const struct lfs_config *c){
 80012a8:	b508      	push	{r3, lr}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <gd5f_block_device_sync+0x14>)
 80012ac:	f000 fd36 	bl	8001d1c <gd5f_get_features>
 80012b0:	b908      	cbnz	r0, 80012b6 <gd5f_block_device_sync+0xe>
return LFS_ERR_OK;
 80012b2:	2000      	movs	r0, #0
}
 80012b4:	bd08      	pop	{r3, pc}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 80012b6:	f06f 0004 	mvn.w	r0, #4
 80012ba:	e7fb      	b.n	80012b4 <gd5f_block_device_sync+0xc>
 80012bc:	200062d0 	.word	0x200062d0

080012c0 <gd5f_block_device_erase>:
static int gd5f_block_device_erase(const struct lfs_config *c, lfs_block_t block){
 80012c0:	b508      	push	{r3, lr}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <gd5f_block_device_erase+0x14>)
 80012c4:	f000 fed3 	bl	800206e <gd5f_blockerase>
 80012c8:	b908      	cbnz	r0, 80012ce <gd5f_block_device_erase+0xe>
return LFS_ERR_OK;
 80012ca:	2000      	movs	r0, #0
}
 80012cc:	bd08      	pop	{r3, pc}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 80012ce:	f06f 0004 	mvn.w	r0, #4
 80012d2:	e7fb      	b.n	80012cc <gd5f_block_device_erase+0xc>
 80012d4:	200062d0 	.word	0x200062d0

080012d8 <gd5f_block_device_prog>:
static int gd5f_block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 80012d8:	b500      	push	{lr}
 80012da:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 80012dc:	0189      	lsls	r1, r1, #6
 80012de:	b289      	uxth	r1, r1
 80012e0:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 80012e4:	4401      	add	r1, r0
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 80012e6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80012ea:	9000      	str	r0, [sp, #0]
 80012ec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80012f0:	b289      	uxth	r1, r1
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <gd5f_block_device_prog+0x30>)
 80012f4:	f000 fe55 	bl	8001fa2 <gd5f_random_write_page>
 80012f8:	b918      	cbnz	r0, 8001302 <gd5f_block_device_prog+0x2a>
return LFS_ERR_OK;
 80012fa:	2000      	movs	r0, #0
}
 80012fc:	b003      	add	sp, #12
 80012fe:	f85d fb04 	ldr.w	pc, [sp], #4
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001302:	f06f 0004 	mvn.w	r0, #4
 8001306:	e7f9      	b.n	80012fc <gd5f_block_device_prog+0x24>
 8001308:	200062d0 	.word	0x200062d0

0800130c <gd5f_block_device_read>:
static int gd5f_block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800130c:	b500      	push	{lr}
 800130e:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 8001310:	0189      	lsls	r1, r1, #6
 8001312:	b289      	uxth	r1, r1
 8001314:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 8001318:	4401      	add	r1, r0
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 800131a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800131e:	9000      	str	r0, [sp, #0]
 8001320:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001324:	b289      	uxth	r1, r1
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <gd5f_block_device_read+0x30>)
 8001328:	f000 fe01 	bl	8001f2e <gd5f_random_read_page>
 800132c:	b918      	cbnz	r0, 8001336 <gd5f_block_device_read+0x2a>
return LFS_ERR_OK;
 800132e:	2000      	movs	r0, #0
}
 8001330:	b003      	add	sp, #12
 8001332:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001336:	f06f 0004 	mvn.w	r0, #4
 800133a:	e7f9      	b.n	8001330 <gd5f_block_device_read+0x24>
 800133c:	200062d0 	.word	0x200062d0

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b500      	push	{lr}
 8001342:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_MspInit+0x5c>)
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	619a      	str	r2, [r3, #24]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	f002 0201 	and.w	r2, r2, #1
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	69da      	ldr	r2, [r3, #28]
 800135a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800135e:	61da      	str	r2, [r3, #28]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	210f      	movs	r1, #15
 800136e:	f06f 0001 	mvn.w	r0, #1
 8001372:	f001 fa23 	bl	80027bc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	4608      	mov	r0, r1
 800137c:	f001 fa1e 	bl	80027bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001380:	2005      	movs	r0, #5
 8001382:	f001 fa61 	bl	8002848 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_MspInit+0x60>)
 8001388:	6853      	ldr	r3, [r2, #4]
 800138a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001392:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	b003      	add	sp, #12
 8001396:	f85d fb04 	ldr.w	pc, [sp], #4
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000

080013a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b500      	push	{lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 80013a8:	2200      	movs	r2, #0
 80013aa:	4601      	mov	r1, r0
 80013ac:	2036      	movs	r0, #54	; 0x36
 80013ae:	f001 fa05 	bl	80027bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 80013b2:	2036      	movs	r0, #54	; 0x36
 80013b4:	f001 fa48 	bl	8002848 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_InitTick+0x6c>)
 80013ba:	69da      	ldr	r2, [r3, #28]
 80013bc:	f042 0210 	orr.w	r2, r2, #16
 80013c0:	61da      	str	r2, [r3, #28]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013cc:	a902      	add	r1, sp, #8
 80013ce:	a803      	add	r0, sp, #12
 80013d0:	f002 fbb0 	bl	8003b34 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013d4:	f002 fb9e 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80013d8:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <HAL_InitTick+0x70>)
 80013dc:	fba0 2303 	umull	r2, r3, r0, r3
 80013e0:	0c9b      	lsrs	r3, r3, #18
 80013e2:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_InitTick+0x74>)
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_InitTick+0x78>)
 80013e8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013f0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013f8:	f003 fc66 	bl	8004cc8 <HAL_TIM_Base_Init>
 80013fc:	b118      	cbz	r0, 8001406 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
}
 8001400:	b009      	add	sp, #36	; 0x24
 8001402:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <HAL_InitTick+0x74>)
 8001408:	f003 fb1a 	bl	8004a40 <HAL_TIM_Base_Start_IT>
 800140c:	e7f8      	b.n	8001400 <HAL_InitTick+0x5c>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	431bde83 	.word	0x431bde83
 8001418:	200062e8 	.word	0x200062e8
 800141c:	40001000 	.word	0x40001000

08001420 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001420:	4770      	bx	lr

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler>

0800142a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	4770      	bx	lr

0800142c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800142c:	4770      	bx	lr

0800142e <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800142e:	4770      	bx	lr

08001430 <DMA1_Channel2_IRQHandler>:
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001430:	4770      	bx	lr

08001432 <DMA1_Channel3_IRQHandler>:
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001432:	4770      	bx	lr

08001434 <DMA1_Channel4_IRQHandler>:
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001434:	4770      	bx	lr

08001436 <DMA1_Channel5_IRQHandler>:
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001436:	4770      	bx	lr

08001438 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001438:	4770      	bx	lr

0800143a <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800143a:	4770      	bx	lr

0800143c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001440:	f002 fa29 	bl	8003896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001444:	bd08      	pop	{r3, pc}
 8001446:	bf00      	nop
 8001448:	200073b4 	.word	0x200073b4

0800144c <USART1_IRQHandler>:

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144c:	4770      	bx	lr

0800144e <USART2_IRQHandler>:

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144e:	4770      	bx	lr

08001450 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <SDIO_IRQHandler+0xc>)
 8001454:	f003 fa04 	bl	8004860 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	2000624c 	.word	0x2000624c

08001460 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM6_IRQHandler+0xc>)
 8001464:	f003 fb26 	bl	8004ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	200062e8 	.word	0x200062e8

08001470 <TIM7_IRQHandler>:
	//TIM_Delay_Callback();
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001470:	4770      	bx	lr

08001472 <DMA2_Channel1_IRQHandler>:
  /* USER CODE END DMA2_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001472:	4770      	bx	lr

08001474 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8001476:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA2_Channel4_5_IRQHandler+0xc>)
 8001478:	f001 fb7e 	bl	8002b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800147c:	bd08      	pop	{r3, pc}
 800147e:	bf00      	nop
 8001480:	20006208 	.word	0x20006208

08001484 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <SystemInit+0x40>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <SystemInit+0x44>)
 8001492:	400a      	ands	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800149c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80014b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SystemInit+0x48>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
#endif 
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	f8ff0000 	.word	0xf8ff0000
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014d0:	b510      	push	{r4, lr}
 80014d2:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014d4:	2300      	movs	r3, #0
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	9304      	str	r3, [sp, #16]
 80014de:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 80014e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80014f8:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fa:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_TIM7_Init+0xc0>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001502:	f1c2 0307 	rsb	r3, r2, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	1d13      	adds	r3, r2, #4
 8001510:	2b06      	cmp	r3, #6
 8001512:	d93b      	bls.n	800158c <MX_TIM7_Init+0xbc>
 8001514:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	408b      	lsls	r3, r1
 800151c:	43db      	mvns	r3, r3
 800151e:	f003 0305 	and.w	r3, r3, #5
 8001522:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <MX_TIM7_Init+0xc4>)
 800152a:	f882 3337 	strb.w	r3, [r2, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800152e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001532:	6053      	str	r3, [r2, #4]

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(TIM7_IRQn);

  TIM_InitStruct.Prescaler = ((SystemCoreClock/1000000) - 1);
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_TIM7_Init+0xc8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f102 42c8 	add.w	r2, r2, #1677721600	; 0x64000000
 800153c:	f5a2 0265 	sub.w	r2, r2, #15007744	; 0xe50000
 8001540:	f2a2 227d 	subw	r2, r2, #637	; 0x27d
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	3b01      	subs	r3, #1
 800154c:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001550:	2300      	movs	r3, #0
 8001552:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 0xFFFF;
 8001554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001558:	9303      	str	r3, [sp, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800155a:	4c10      	ldr	r4, [pc, #64]	; (800159c <MX_TIM7_Init+0xcc>)
 800155c:	a901      	add	r1, sp, #4
 800155e:	4620      	mov	r0, r4
 8001560:	f004 fd7a 	bl	8006058 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800156a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001580:	68a3      	ldr	r3, [r4, #8]
 8001582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001586:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM7);
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
  LL_TIM_DisableMasterSlaveMode(TIM7);

}
 8001588:	b006      	add	sp, #24
 800158a:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158c:	2200      	movs	r2, #0
 800158e:	e7c2      	b.n	8001516 <MX_TIM7_Init+0x46>
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	e000e100 	.word	0xe000e100
 8001598:	20000000 	.word	0x20000000
 800159c:	40001400 	.word	0x40001400

080015a0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015a4:	2300      	movs	r3, #0
 80015a6:	9308      	str	r3, [sp, #32]
 80015a8:	9309      	str	r3, [sp, #36]	; 0x24
 80015aa:	930a      	str	r3, [sp, #40]	; 0x28
 80015ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80015ae:	930c      	str	r3, [sp, #48]	; 0x30
 80015b0:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	9306      	str	r3, [sp, #24]
 80015b4:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015c4:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015cc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015ce:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015e0:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <MX_USART1_UART_Init+0x160>)
 80015e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015e6:	2309      	movs	r3, #9
 80015e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	4c45      	ldr	r4, [pc, #276]	; (8001704 <MX_USART1_UART_Init+0x164>)
 80015f0:	a903      	add	r1, sp, #12
 80015f2:	4620      	mov	r0, r4
 80015f4:	f003 fc60 	bl	8004eb8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <MX_USART1_UART_Init+0x168>)
 80015fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015fc:	2304      	movs	r3, #4
 80015fe:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	a903      	add	r1, sp, #12
 8001602:	4620      	mov	r0, r4
 8001604:	f003 fc58 	bl	8004eb8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <MX_USART1_UART_Init+0x16c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001610:	f022 0210 	bic.w	r2, r2, #16
 8001614:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800161c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f022 0220 	bic.w	r2, r2, #32
 8001624:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001634:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800163c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001644:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001646:	3b14      	subs	r3, #20
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800164e:	f022 0210 	bic.w	r2, r2, #16
 8001652:	f042 0210 	orr.w	r2, r2, #16
 8001656:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800165e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f022 0220 	bic.w	r2, r2, #32
 8001666:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001676:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800167e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001686:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_USART1_UART_Init+0x170>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	f1c2 0307 	rsb	r3, r2, #7
 8001694:	2b04      	cmp	r3, #4
 8001696:	bf28      	it	cs
 8001698:	2304      	movcs	r3, #4
 800169a:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169c:	1d13      	adds	r3, r2, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d92b      	bls.n	80016fa <MX_USART1_UART_Init+0x15a>
 80016a2:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	408b      	lsls	r3, r1
 80016aa:	43db      	mvns	r3, r3
 80016ac:	f003 0305 	and.w	r3, r3, #5
 80016b0:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_USART1_UART_Init+0x174>)
 80016b8:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016bc:	2320      	movs	r3, #32
 80016be:	6053      	str	r3, [r2, #4]

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART1_IRQn);

  USART_InitStruct.BaudRate = 115200;
 80016c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016c4:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80016c6:	2300      	movs	r3, #0
 80016c8:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80016ca:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80016cc:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016ce:	220c      	movs	r2, #12
 80016d0:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016d2:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80016d4:	4c10      	ldr	r4, [pc, #64]	; (8001718 <MX_USART1_UART_Init+0x178>)
 80016d6:	a908      	add	r1, sp, #32
 80016d8:	4620      	mov	r0, r4
 80016da:	f004 fd4f 	bl	800617c <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016e4:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80016e6:	6963      	ldr	r3, [r4, #20]
 80016e8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80016ec:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016ee:	68e3      	ldr	r3, [r4, #12]
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f4:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 80016f6:	b00e      	add	sp, #56	; 0x38
 80016f8:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	2200      	movs	r2, #0
 80016fc:	e7d2      	b.n	80016a4 <MX_USART1_UART_Init+0x104>
 80016fe:	bf00      	nop
 8001700:	04020002 	.word	0x04020002
 8001704:	40010800 	.word	0x40010800
 8001708:	04040004 	.word	0x04040004
 800170c:	40020058 	.word	0x40020058
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	e000e100 	.word	0xe000e100
 8001718:	40013800 	.word	0x40013800

0800171c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800171c:	b510      	push	{r4, lr}
 800171e:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001720:	2300      	movs	r3, #0
 8001722:	9308      	str	r3, [sp, #32]
 8001724:	9309      	str	r3, [sp, #36]	; 0x24
 8001726:	930a      	str	r3, [sp, #40]	; 0x28
 8001728:	930b      	str	r3, [sp, #44]	; 0x2c
 800172a:	930c      	str	r3, [sp, #48]	; 0x30
 800172c:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	9306      	str	r3, [sp, #24]
 8001730:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001736:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001740:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001742:	69da      	ldr	r2, [r3, #28]
 8001744:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001748:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800174a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	f042 0204 	orr.w	r2, r2, #4
 8001752:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800175c:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800175e:	f240 4304 	movw	r3, #1028	; 0x404
 8001762:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001764:	2309      	movs	r3, #9
 8001766:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	4c44      	ldr	r4, [pc, #272]	; (8001880 <MX_USART2_UART_Init+0x164>)
 800176e:	a903      	add	r1, sp, #12
 8001770:	4620      	mov	r0, r4
 8001772:	f003 fba1 	bl	8004eb8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001776:	f640 0308 	movw	r3, #2056	; 0x808
 800177a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800177c:	2304      	movs	r3, #4
 800177e:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	a903      	add	r1, sp, #12
 8001782:	4620      	mov	r0, r4
 8001784:	f003 fb98 	bl	8004eb8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <MX_USART2_UART_Init+0x168>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800179c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f022 0220 	bic.w	r2, r2, #32
 80017a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017bc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80017c6:	3314      	adds	r3, #20
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	f042 0210 	orr.w	r2, r2, #16
 80017d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f022 0220 	bic.w	r2, r2, #32
 80017e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001806:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_USART2_UART_Init+0x16c>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	f1c2 0307 	rsb	r3, r2, #7
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf28      	it	cs
 8001818:	2304      	movcs	r3, #4
 800181a:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181c:	1d13      	adds	r3, r2, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d92b      	bls.n	800187a <MX_USART2_UART_Init+0x15e>
 8001822:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	408b      	lsls	r3, r1
 800182a:	43db      	mvns	r3, r3
 800182c:	f003 0305 	and.w	r3, r3, #5
 8001830:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_USART2_UART_Init+0x170>)
 8001838:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	6053      	str	r3, [r2, #4]

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART2_IRQn);

  USART_InitStruct.BaudRate = 115200;
 8001840:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001844:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001846:	2300      	movs	r3, #0
 8001848:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800184a:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800184c:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800184e:	220c      	movs	r2, #12
 8001850:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001852:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001854:	4c0e      	ldr	r4, [pc, #56]	; (8001890 <MX_USART2_UART_Init+0x174>)
 8001856:	a908      	add	r1, sp, #32
 8001858:	4620      	mov	r0, r4
 800185a:	f004 fc8f 	bl	800617c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185e:	6923      	ldr	r3, [r4, #16]
 8001860:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001864:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001866:	6963      	ldr	r3, [r4, #20]
 8001868:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800186c:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800186e:	68e3      	ldr	r3, [r4, #12]
 8001870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001874:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART2);
  LL_USART_Enable(USART2);

}
 8001876:	b00e      	add	sp, #56	; 0x38
 8001878:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	2200      	movs	r2, #0
 800187c:	e7d2      	b.n	8001824 <MX_USART2_UART_Init+0x108>
 800187e:	bf00      	nop
 8001880:	40010800 	.word	0x40010800
 8001884:	4002006c 	.word	0x4002006c
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	e000e100 	.word	0xe000e100
 8001890:	40004400 	.word	0x40004400

08001894 <gd5f_spi_sendbyte>:



GD5F_RESULT gd5f_spi_sendbyte(gd5f* dev,           // device handler
                            uint8_t databyte)
{
 8001894:	b430      	push	{r4, r5}
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 8001896:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800189e:	d103      	bne.n	80018a8 <gd5f_spi_sendbyte+0x14>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80018a8:	6882      	ldr	r2, [r0, #8]
 80018aa:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80018ac:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80018b0:	6153      	str	r3, [r2, #20]
     gd5f_spi_start(dev);
     GD5F_WAIT_TX_EMPTY();
 80018b2:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 80018b4:	6804      	ldr	r4, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80018b6:	68a3      	ldr	r3, [r4, #8]
 80018b8:	f013 0f02 	tst.w	r3, #2
 80018bc:	d104      	bne.n	80018c8 <gd5f_spi_sendbyte+0x34>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018be:	1e53      	subs	r3, r2, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b1b2      	cbz	r2, 80018f2 <gd5f_spi_sendbyte+0x5e>
 80018c4:	461a      	mov	r2, r3
 80018c6:	e7f5      	b.n	80018b4 <gd5f_spi_sendbyte+0x20>
		return GD5F_OK;
 80018c8:	2500      	movs	r5, #0
     GD5F_WAIT_TX_EMPTY();
 80018ca:	b1ad      	cbz	r5, 80018f8 <gd5f_spi_sendbyte+0x64>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80018cc:	6882      	ldr	r2, [r0, #8]
 80018ce:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80018d0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80018d4:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80018d6:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80018de:	d076      	beq.n	80019ce <gd5f_spi_sendbyte+0x13a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 80018e8:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     databyte = LL_SPI_ReceiveData8(dev->hw_config.spi);
     GD5F_WAIT_TX_EMPTY();
     GD5F_WAIT_SPI_BUSY();
     gd5f_spi_stop(dev);
  return GD5F_OK;
}
 80018ec:	4628      	mov	r0, r5
 80018ee:	bc30      	pop	{r4, r5}
 80018f0:	4770      	bx	lr
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018f2:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80018f6:	e7e8      	b.n	80018ca <gd5f_spi_sendbyte+0x36>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  SPIx->DR = TxData;
 80018f8:	60e1      	str	r1, [r4, #12]
     GD5F_WAIT_RX_NOT_EMPTY();
 80018fa:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 80018fc:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 80018fe:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001900:	688b      	ldr	r3, [r1, #8]
 8001902:	f013 0f01 	tst.w	r3, #1
 8001906:	d106      	bne.n	8001916 <gd5f_spi_sendbyte+0x82>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001908:	1e53      	subs	r3, r2, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	b10a      	cbz	r2, 8001912 <gd5f_spi_sendbyte+0x7e>
 800190e:	461a      	mov	r2, r3
 8001910:	e7f5      	b.n	80018fe <gd5f_spi_sendbyte+0x6a>
 8001912:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_RX_NOT_EMPTY();
 8001916:	b185      	cbz	r5, 800193a <gd5f_spi_sendbyte+0xa6>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001918:	6882      	ldr	r2, [r0, #8]
 800191a:	68c3      	ldr	r3, [r0, #12]
 800191c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001920:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001922:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f012 0f40 	tst.w	r2, #64	; 0x40
 800192a:	d053      	beq.n	80019d4 <gd5f_spi_sendbyte+0x140>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001932:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_RX_NOT_EMPTY();
 8001934:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001938:	e7d8      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
  return (uint8_t)(READ_REG(SPIx->DR));
 800193a:	68cb      	ldr	r3, [r1, #12]
	uint16_t timeleft = timeout_us;
 800193c:	4622      	mov	r2, r4
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800193e:	688b      	ldr	r3, [r1, #8]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001940:	f013 0f02 	tst.w	r3, #2
 8001944:	d106      	bne.n	8001954 <gd5f_spi_sendbyte+0xc0>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001946:	1e53      	subs	r3, r2, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	b10a      	cbz	r2, 8001950 <gd5f_spi_sendbyte+0xbc>
 800194c:	461a      	mov	r2, r3
 800194e:	e7f6      	b.n	800193e <gd5f_spi_sendbyte+0xaa>
 8001950:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_TX_EMPTY();
 8001954:	b185      	cbz	r5, 8001978 <gd5f_spi_sendbyte+0xe4>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001956:	6882      	ldr	r2, [r0, #8]
 8001958:	68c3      	ldr	r3, [r0, #12]
 800195a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800195e:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001960:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001968:	d037      	beq.n	80019da <gd5f_spi_sendbyte+0x146>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001970:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 8001972:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001976:	e7b9      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8001978:	688b      	ldr	r3, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 800197a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800197e:	d004      	beq.n	800198a <gd5f_spi_sendbyte+0xf6>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	b29b      	uxth	r3, r3
 8001984:	b194      	cbz	r4, 80019ac <gd5f_spi_sendbyte+0x118>
 8001986:	461c      	mov	r4, r3
 8001988:	e7f6      	b.n	8001978 <gd5f_spi_sendbyte+0xe4>
        dev->gd5f_busy = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	75c3      	strb	r3, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 800198e:	6882      	ldr	r2, [r0, #8]
 8001990:	68c3      	ldr	r3, [r0, #12]
 8001992:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001996:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001998:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019a0:	d0a4      	beq.n	80018ec <gd5f_spi_sendbyte+0x58>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e79f      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80019ac:	6882      	ldr	r2, [r0, #8]
 80019ae:	68c3      	ldr	r3, [r0, #12]
 80019b0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80019b4:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80019b6:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019be:	d00f      	beq.n	80019e0 <gd5f_spi_sendbyte+0x14c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_SPI_BUSY();
 80019c8:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019cc:	e78e      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 80019ce:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019d2:	e78b      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_RX_NOT_EMPTY();
 80019d4:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019d8:	e788      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 80019da:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019de:	e785      	b.n	80018ec <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_SPI_BUSY();
 80019e0:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019e4:	e782      	b.n	80018ec <gd5f_spi_sendbyte+0x58>

080019e6 <gd5f_write_enable>:



GD5F_RESULT gd5f_write_enable(gd5f* dev)
{
 80019e6:	b508      	push	{r3, lr}
	return gd5f_spi_sendbyte(dev, GD5F_WRITE_ENABLE);
 80019e8:	2106      	movs	r1, #6
 80019ea:	f7ff ff53 	bl	8001894 <gd5f_spi_sendbyte>
}
 80019ee:	bd08      	pop	{r3, pc}

080019f0 <gd5f_cmd>:
                  uint32_t address,
                   uint8_t addrlen,
                   uint8_t *databuf,
                  uint16_t datalen,
                   uint8_t noreadback)
{
 80019f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80019fa:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
 80019fe:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
    uint8_t  cmd_len = (addrlen + 1);
 8001a02:	1c5c      	adds	r4, r3, #1
 8001a04:	b2e4      	uxtb	r4, r4
    uint8_t  cmdbuf[cmd_len];
 8001a06:	1de5      	adds	r5, r4, #7
 8001a08:	f405 75fc 	and.w	r5, r5, #504	; 0x1f8
 8001a0c:	ebad 0d05 	sub.w	sp, sp, r5
 8001a10:	466d      	mov	r5, sp
    cmdbuf[0] = cmd;
 8001a12:	f88d 1000 	strb.w	r1, [sp]
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a16:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a18:	f8d1 8000 	ldr.w	r8, [r1]
 8001a1c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001a20:	d105      	bne.n	8001a2e <gd5f_cmd+0x3e>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a22:	f8d1 8000 	ldr.w	r8, [r1]
 8001a26:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8001a2a:	f8c1 8000 	str.w	r8, [r1]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a2e:	68c1      	ldr	r1, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001a30:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8001a34:	6886      	ldr	r6, [r0, #8]
 8001a36:	6171      	str	r1, [r6, #20]

    gd5f_spi_start(dev);


     switch (addrlen) {
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	f200 8154 	bhi.w	8001ce6 <gd5f_cmd+0x2f6>
 8001a3e:	e8df f003 	tbb	[pc, r3]
 8001a42:	1009      	.short	0x1009
 8001a44:	020b      	.short	0x020b
        case 3: {
                cmdbuf[1] = (uint8_t)((address & BYTE_2_MASK32) >> 16);
 8001a46:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001a4a:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 8001a4c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001a50:	70ab      	strb	r3, [r5, #2]
                cmdbuf[3] = (uint8_t)((address) & BYTE_0_MASK32);
 8001a52:	70ea      	strb	r2, [r5, #3]
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a54:	2100      	movs	r1, #0
 8001a56:	e038      	b.n	8001aca <gd5f_cmd+0xda>
                break;}
        case 2: {
                cmdbuf[1] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 8001a58:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001a5c:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address) & BYTE_0_MASK32);
 8001a5e:	70aa      	strb	r2, [r5, #2]
                break;}
 8001a60:	e7f8      	b.n	8001a54 <gd5f_cmd+0x64>
        case 1: {
                cmdbuf[1] = (uint8_t)((address) & BYTE_0_MASK32);
 8001a62:	706a      	strb	r2, [r5, #1]
                break;}
 8001a64:	e7f6      	b.n	8001a54 <gd5f_cmd+0x64>
		return GD5F_OK;
 8001a66:	f04f 0900 	mov.w	r9, #0

     //uint8_t  spi_rsp = 0;
     //transmitting command opcode and address if needed
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
            {
               GD5F_WAIT_TX_EMPTY();
 8001a6a:	f1b9 0f00 	cmp.w	r9, #0
 8001a6e:	d10f      	bne.n	8001a90 <gd5f_cmd+0xa0>
               LL_SPI_TransmitData8(dev->hw_config.spi, cmdbuf[curr_byte_num]);
 8001a70:	5c6b      	ldrb	r3, [r5, r1]
  SPIx->DR = TxData;
 8001a72:	60f3      	str	r3, [r6, #12]
               GD5F_WAIT_RX_NOT_EMPTY();
 8001a74:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001a76:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001a78:	68b3      	ldr	r3, [r6, #8]
 8001a7a:	f013 0f01 	tst.w	r3, #1
 8001a7e:	d11e      	bne.n	8001abe <gd5f_cmd+0xce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a80:	1e53      	subs	r3, r2, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b1ca      	cbz	r2, 8001aba <gd5f_cmd+0xca>
 8001a86:	461a      	mov	r2, r3
 8001a88:	e7f5      	b.n	8001a76 <gd5f_cmd+0x86>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a8a:	f06f 095f 	mvn.w	r9, #95	; 0x5f
 8001a8e:	e7ec      	b.n	8001a6a <gd5f_cmd+0x7a>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a90:	6882      	ldr	r2, [r0, #8]
 8001a92:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001a94:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001a98:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a9a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001aa2:	f000 8123 	beq.w	8001cec <gd5f_cmd+0x2fc>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aac:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_TX_EMPTY();
 8001aae:	f06f 035f 	mvn.w	r3, #95	; 0x5f
GD5F_WAIT_TX_EMPTY();
GD5F_WAIT_SPI_BUSY();

gd5f_spi_stop(dev);
return GD5F_OK;
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001aba:	f06f 095f 	mvn.w	r9, #95	; 0x5f
               GD5F_WAIT_RX_NOT_EMPTY();
 8001abe:	f1b9 0f00 	cmp.w	r9, #0
 8001ac2:	d110      	bne.n	8001ae6 <gd5f_cmd+0xf6>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001ac4:	68f3      	ldr	r3, [r6, #12]
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
 8001ac6:	3101      	adds	r1, #1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	42a1      	cmp	r1, r4
 8001acc:	d21d      	bcs.n	8001b0a <gd5f_cmd+0x11a>
               GD5F_WAIT_TX_EMPTY();
 8001ace:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001ad0:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001ad2:	68b3      	ldr	r3, [r6, #8]
 8001ad4:	f013 0f02 	tst.w	r3, #2
 8001ad8:	d1c5      	bne.n	8001a66 <gd5f_cmd+0x76>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001ada:	1e53      	subs	r3, r2, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d0d3      	beq.n	8001a8a <gd5f_cmd+0x9a>
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	e7f4      	b.n	8001ad0 <gd5f_cmd+0xe0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001ae6:	6882      	ldr	r2, [r0, #8]
 8001ae8:	68c3      	ldr	r3, [r0, #12]
 8001aea:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001aee:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001af0:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001af8:	f000 80fb 	beq.w	8001cf2 <gd5f_cmd+0x302>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b02:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_RX_NOT_EMPTY();
 8001b04:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b08:	e7d3      	b.n	8001ab2 <gd5f_cmd+0xc2>
     if (noreadback) {
 8001b0a:	f1be 0f00 	cmp.w	lr, #0
 8001b0e:	d14c      	bne.n	8001baa <gd5f_cmd+0x1ba>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001b10:	2400      	movs	r4, #0
 8001b12:	e07b      	b.n	8001c0c <gd5f_cmd+0x21c>
		return GD5F_OK;
 8001b14:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 8001b16:	b985      	cbnz	r5, 8001b3a <gd5f_cmd+0x14a>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 8001b18:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 8001b1c:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b1e:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001b20:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001b22:	688b      	ldr	r3, [r1, #8]
 8001b24:	f013 0f01 	tst.w	r3, #1
 8001b28:	d11b      	bne.n	8001b62 <gd5f_cmd+0x172>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	b1b2      	cbz	r2, 8001b5e <gd5f_cmd+0x16e>
 8001b30:	461a      	mov	r2, r3
 8001b32:	e7f5      	b.n	8001b20 <gd5f_cmd+0x130>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001b34:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001b38:	e7ed      	b.n	8001b16 <gd5f_cmd+0x126>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001b3a:	6882      	ldr	r2, [r0, #8]
 8001b3c:	68c3      	ldr	r3, [r0, #12]
 8001b3e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001b42:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001b44:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b4c:	f000 80d4 	beq.w	8001cf8 <gd5f_cmd+0x308>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b56:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 8001b58:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b5c:	e7a9      	b.n	8001ab2 <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001b5e:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b62:	b985      	cbnz	r5, 8001b86 <gd5f_cmd+0x196>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001b64:	68cb      	ldr	r3, [r1, #12]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001b66:	3401      	adds	r4, #1
 8001b68:	b2a4      	uxth	r4, r4
 8001b6a:	4564      	cmp	r4, ip
 8001b6c:	d26d      	bcs.n	8001c4a <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 8001b6e:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001b70:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001b72:	688b      	ldr	r3, [r1, #8]
 8001b74:	f013 0f02 	tst.w	r3, #2
 8001b78:	d1cc      	bne.n	8001b14 <gd5f_cmd+0x124>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001b7a:	1e53      	subs	r3, r2, #1
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d0d8      	beq.n	8001b34 <gd5f_cmd+0x144>
 8001b82:	461a      	mov	r2, r3
 8001b84:	e7f4      	b.n	8001b70 <gd5f_cmd+0x180>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001b86:	6882      	ldr	r2, [r0, #8]
 8001b88:	68c3      	ldr	r3, [r0, #12]
 8001b8a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001b8e:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001b90:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b98:	f000 80b1 	beq.w	8001cfe <gd5f_cmd+0x30e>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001ba4:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001ba8:	e783      	b.n	8001ab2 <gd5f_cmd+0xc2>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001baa:	2400      	movs	r4, #0
 8001bac:	e7dd      	b.n	8001b6a <gd5f_cmd+0x17a>
		return GD5F_OK;
 8001bae:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 8001bb0:	b995      	cbnz	r5, 8001bd8 <gd5f_cmd+0x1e8>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 8001bb2:	eb0a 0e04 	add.w	lr, sl, r4
 8001bb6:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 8001bba:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001bbc:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001bbe:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001bc0:	688b      	ldr	r3, [r1, #8]
 8001bc2:	f013 0f01 	tst.w	r3, #1
 8001bc6:	d11b      	bne.n	8001c00 <gd5f_cmd+0x210>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001bc8:	1e53      	subs	r3, r2, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	b1b2      	cbz	r2, 8001bfc <gd5f_cmd+0x20c>
 8001bce:	461a      	mov	r2, r3
 8001bd0:	e7f5      	b.n	8001bbe <gd5f_cmd+0x1ce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001bd2:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001bd6:	e7eb      	b.n	8001bb0 <gd5f_cmd+0x1c0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001bd8:	6882      	ldr	r2, [r0, #8]
 8001bda:	68c3      	ldr	r3, [r0, #12]
 8001bdc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001be0:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001be2:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001bea:	f000 808b 	beq.w	8001d04 <gd5f_cmd+0x314>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bf4:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 8001bf6:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001bfa:	e75a      	b.n	8001ab2 <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001bfc:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 8001c00:	b995      	cbnz	r5, 8001c28 <gd5f_cmd+0x238>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c02:	68cb      	ldr	r3, [r1, #12]
                databuf[curr_byte_num] = LL_SPI_ReceiveData8(dev->hw_config.spi);
 8001c04:	f88e 3000 	strb.w	r3, [lr]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001c08:	3401      	adds	r4, #1
 8001c0a:	b2a4      	uxth	r4, r4
 8001c0c:	4564      	cmp	r4, ip
 8001c0e:	d21c      	bcs.n	8001c4a <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 8001c10:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001c12:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001c14:	688b      	ldr	r3, [r1, #8]
 8001c16:	f013 0f02 	tst.w	r3, #2
 8001c1a:	d1c8      	bne.n	8001bae <gd5f_cmd+0x1be>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001c1c:	1e53      	subs	r3, r2, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d0d6      	beq.n	8001bd2 <gd5f_cmd+0x1e2>
 8001c24:	461a      	mov	r2, r3
 8001c26:	e7f4      	b.n	8001c12 <gd5f_cmd+0x222>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001c28:	6882      	ldr	r2, [r0, #8]
 8001c2a:	68c3      	ldr	r3, [r0, #12]
 8001c2c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001c30:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001c32:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c3a:	d066      	beq.n	8001d0a <gd5f_cmd+0x31a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c42:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001c44:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001c48:	e733      	b.n	8001ab2 <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001c4a:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 8001c4c:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001c4e:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001c50:	688b      	ldr	r3, [r1, #8]
 8001c52:	f013 0f02 	tst.w	r3, #2
 8001c56:	d104      	bne.n	8001c62 <gd5f_cmd+0x272>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001c58:	1e53      	subs	r3, r2, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b1a2      	cbz	r2, 8001c88 <gd5f_cmd+0x298>
 8001c5e:	461a      	mov	r2, r3
 8001c60:	e7f5      	b.n	8001c4e <gd5f_cmd+0x25e>
		return GD5F_OK;
 8001c62:	2300      	movs	r3, #0
GD5F_WAIT_TX_EMPTY();
 8001c64:	b19b      	cbz	r3, 8001c8e <gd5f_cmd+0x29e>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001c66:	6882      	ldr	r2, [r0, #8]
 8001c68:	68c3      	ldr	r3, [r0, #12]
 8001c6a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001c6e:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001c70:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c78:	d04a      	beq.n	8001d10 <gd5f_cmd+0x320>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
GD5F_WAIT_TX_EMPTY();
 8001c82:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001c86:	e714      	b.n	8001ab2 <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001c88:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001c8c:	e7ea      	b.n	8001c64 <gd5f_cmd+0x274>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8001c8e:	688a      	ldr	r2, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 8001c90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c94:	d004      	beq.n	8001ca0 <gd5f_cmd+0x2b0>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001c96:	1e62      	subs	r2, r4, #1
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	b19c      	cbz	r4, 8001cc4 <gd5f_cmd+0x2d4>
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	e7f6      	b.n	8001c8e <gd5f_cmd+0x29e>
        dev->gd5f_busy = 0;
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	75c2      	strb	r2, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001ca4:	6881      	ldr	r1, [r0, #8]
 8001ca6:	68c2      	ldr	r2, [r0, #12]
 8001ca8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001cac:	610a      	str	r2, [r1, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001cae:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001cb0:	6811      	ldr	r1, [r2, #0]
 8001cb2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001cb6:	f43f aefc 	beq.w	8001ab2 <gd5f_cmd+0xc2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001cc0:	6011      	str	r1, [r2, #0]
 8001cc2:	e6f6      	b.n	8001ab2 <gd5f_cmd+0xc2>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001cc4:	6882      	ldr	r2, [r0, #8]
 8001cc6:	68c3      	ldr	r3, [r0, #12]
 8001cc8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001ccc:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001cce:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001cd6:	d01e      	beq.n	8001d16 <gd5f_cmd+0x326>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cde:	601a      	str	r2, [r3, #0]
GD5F_WAIT_SPI_BUSY();
 8001ce0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001ce4:	e6e5      	b.n	8001ab2 <gd5f_cmd+0xc2>
        return GD5F_INVALID_ARGUMENT;
 8001ce6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001cea:	e6e2      	b.n	8001ab2 <gd5f_cmd+0xc2>
               GD5F_WAIT_TX_EMPTY();
 8001cec:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001cf0:	e6df      	b.n	8001ab2 <gd5f_cmd+0xc2>
               GD5F_WAIT_RX_NOT_EMPTY();
 8001cf2:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001cf6:	e6dc      	b.n	8001ab2 <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001cf8:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001cfc:	e6d9      	b.n	8001ab2 <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001cfe:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001d02:	e6d6      	b.n	8001ab2 <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001d04:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001d08:	e6d3      	b.n	8001ab2 <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001d0a:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001d0e:	e6d0      	b.n	8001ab2 <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001d10:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001d14:	e6cd      	b.n	8001ab2 <gd5f_cmd+0xc2>
GD5F_WAIT_SPI_BUSY();
 8001d16:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001d1a:	e6ca      	b.n	8001ab2 <gd5f_cmd+0xc2>

08001d1c <gd5f_get_features>:




GD5F_RESULT gd5f_get_features(gd5f* dev)
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	4605      	mov	r5, r0
volatile GD5F_RESULT res = 0;
 8001d22:	2600      	movs	r6, #0
 8001d24:	f88d 6017 	strb.w	r6, [sp, #23]

 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_PROTECTION, 1, &dev->registers.protection,  1, 0);
 8001d28:	9602      	str	r6, [sp, #8]
 8001d2a:	2401      	movs	r4, #1
 8001d2c:	9401      	str	r4, [sp, #4]
 8001d2e:	f100 0310 	add.w	r3, r0, #16
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4623      	mov	r3, r4
 8001d36:	22a0      	movs	r2, #160	; 0xa0
 8001d38:	210f      	movs	r1, #15
 8001d3a:	f7ff fe59 	bl	80019f0 <gd5f_cmd>
 8001d3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	4318      	orrs	r0, r3
 8001d46:	b240      	sxtb	r0, r0
 8001d48:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_1,  1, &dev->registers.feature_1,   1, 0);
 8001d4c:	9602      	str	r6, [sp, #8]
 8001d4e:	9401      	str	r4, [sp, #4]
 8001d50:	f105 0313 	add.w	r3, r5, #19
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4623      	mov	r3, r4
 8001d58:	22b0      	movs	r2, #176	; 0xb0
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f7ff fe47 	bl	80019f0 <gd5f_cmd>
 8001d62:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	4318      	orrs	r0, r3
 8001d6a:	b240      	sxtb	r0, r0
 8001d6c:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_1,   1, &dev->registers.status_1,    1, 0);
 8001d70:	9602      	str	r6, [sp, #8]
 8001d72:	9401      	str	r4, [sp, #4]
 8001d74:	f105 0311 	add.w	r3, r5, #17
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	22c0      	movs	r2, #192	; 0xc0
 8001d7e:	210f      	movs	r1, #15
 8001d80:	4628      	mov	r0, r5
 8001d82:	f7ff fe35 	bl	80019f0 <gd5f_cmd>
 8001d86:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	4318      	orrs	r0, r3
 8001d8e:	b240      	sxtb	r0, r0
 8001d90:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_2,  1, &dev->registers.feature_2,   1, 0);
 8001d94:	9602      	str	r6, [sp, #8]
 8001d96:	9401      	str	r4, [sp, #4]
 8001d98:	f105 0314 	add.w	r3, r5, #20
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	4623      	mov	r3, r4
 8001da0:	22d0      	movs	r2, #208	; 0xd0
 8001da2:	210f      	movs	r1, #15
 8001da4:	4628      	mov	r0, r5
 8001da6:	f7ff fe23 	bl	80019f0 <gd5f_cmd>
 8001daa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	4318      	orrs	r0, r3
 8001db2:	b240      	sxtb	r0, r0
 8001db4:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_2,   1, &dev->registers.status_2,    1, 0);
 8001db8:	9602      	str	r6, [sp, #8]
 8001dba:	9401      	str	r4, [sp, #4]
 8001dbc:	f105 0312 	add.w	r3, r5, #18
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	22f0      	movs	r2, #240	; 0xf0
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f7ff fe11 	bl	80019f0 <gd5f_cmd>
 8001dce:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	4318      	orrs	r0, r3
 8001dd6:	b240      	sxtb	r0, r0
 8001dd8:	f88d 0017 	strb.w	r0, [sp, #23]
return res;
 8001ddc:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 8001de0:	b240      	sxtb	r0, r0
 8001de2:	b006      	add	sp, #24
 8001de4:	bd70      	pop	{r4, r5, r6, pc}

08001de6 <gd5f_get_feature>:

GD5F_RESULT gd5f_get_feature(gd5f* dev, GD5F_FEATURE_REGS feature_reg, uint8_t* feature_byte)
{
 8001de6:	b570      	push	{r4, r5, r6, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	4606      	mov	r6, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	4615      	mov	r5, r2
volatile GD5F_RESULT res = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f88d 3017 	strb.w	r3, [sp, #23]

res = gd5f_cmd(dev, GD5F_GET_FEATURES, feature_reg, 1, feature_byte, 1, 0);
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	9200      	str	r2, [sp, #0]
 8001dfe:	460a      	mov	r2, r1
 8001e00:	210f      	movs	r1, #15
 8001e02:	f7ff fdf5 	bl	80019f0 <gd5f_cmd>
 8001e06:	f88d 0017 	strb.w	r0, [sp, #23]
if (res != GD5F_OK) return res;
 8001e0a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	b94b      	cbnz	r3, 8001e26 <gd5f_get_feature+0x40>

    switch (feature_reg) {
 8001e12:	2cc0      	cmp	r4, #192	; 0xc0
 8001e14:	d019      	beq.n	8001e4a <gd5f_get_feature+0x64>
 8001e16:	d80b      	bhi.n	8001e30 <gd5f_get_feature+0x4a>
 8001e18:	2ca0      	cmp	r4, #160	; 0xa0
 8001e1a:	d010      	beq.n	8001e3e <gd5f_get_feature+0x58>
 8001e1c:	2cb0      	cmp	r4, #176	; 0xb0
 8001e1e:	d11a      	bne.n	8001e56 <gd5f_get_feature+0x70>
             dev->registers.protection = *feature_byte;
             break;
            }
        case GD5F_FEATURE_1:
            {
             dev->registers.feature_1 = *feature_byte;
 8001e20:	782b      	ldrb	r3, [r5, #0]
 8001e22:	74f3      	strb	r3, [r6, #19]
             break;
 8001e24:	e00d      	b.n	8001e42 <gd5f_get_feature+0x5c>
if (res != GD5F_OK) return res;
 8001e26:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001e2a:	b240      	sxtb	r0, r0
        default:{
        return GD5F_INVALID_ARGUMENT;
        break;}
    }
return res;
}
 8001e2c:	b006      	add	sp, #24
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
    switch (feature_reg) {
 8001e30:	2cd0      	cmp	r4, #208	; 0xd0
 8001e32:	d00d      	beq.n	8001e50 <gd5f_get_feature+0x6a>
 8001e34:	2cf0      	cmp	r4, #240	; 0xf0
 8001e36:	d10e      	bne.n	8001e56 <gd5f_get_feature+0x70>
            dev->registers.status_2 = *feature_byte;
 8001e38:	782b      	ldrb	r3, [r5, #0]
 8001e3a:	74b3      	strb	r3, [r6, #18]
            break;
 8001e3c:	e001      	b.n	8001e42 <gd5f_get_feature+0x5c>
             dev->registers.protection = *feature_byte;
 8001e3e:	782b      	ldrb	r3, [r5, #0]
 8001e40:	7433      	strb	r3, [r6, #16]
return res;
 8001e42:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001e46:	b240      	sxtb	r0, r0
 8001e48:	e7f0      	b.n	8001e2c <gd5f_get_feature+0x46>
            dev->registers.status_1 = *feature_byte;
 8001e4a:	782b      	ldrb	r3, [r5, #0]
 8001e4c:	7473      	strb	r3, [r6, #17]
            break;
 8001e4e:	e7f8      	b.n	8001e42 <gd5f_get_feature+0x5c>
            dev->registers.feature_2 = *feature_byte;
 8001e50:	782b      	ldrb	r3, [r5, #0]
 8001e52:	7533      	strb	r3, [r6, #20]
            break;
 8001e54:	e7f5      	b.n	8001e42 <gd5f_get_feature+0x5c>
        return GD5F_INVALID_ARGUMENT;
 8001e56:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001e5a:	e7e7      	b.n	8001e2c <gd5f_get_feature+0x46>

08001e5c <gd5f_is_busy>:
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
   return res;
}

uint8_t gd5f_is_busy(gd5f* dev)
{
 8001e5c:	b500      	push	{lr}
 8001e5e:	b083      	sub	sp, #12
uint8_t feature_byte = 0;
 8001e60:	aa02      	add	r2, sp, #8
 8001e62:	2300      	movs	r3, #0
 8001e64:	f802 3d01 	strb.w	r3, [r2, #-1]!
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001e68:	21c0      	movs	r1, #192	; 0xc0
 8001e6a:	f7ff ffbc 	bl	8001de6 <gd5f_get_feature>
 8001e6e:	b930      	cbnz	r0, 8001e7e <gd5f_is_busy+0x22>
return (feature_byte & GD5F_STATUS_1_OIP);
 8001e70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001e74:	f000 0001 	and.w	r0, r0, #1
}
 8001e78:	b003      	add	sp, #12
 8001e7a:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001e7e:	20ff      	movs	r0, #255	; 0xff
 8001e80:	e7fa      	b.n	8001e78 <gd5f_is_busy+0x1c>
	...

08001e84 <gd5f_wait_busy>:

GD5F_RESULT gd5f_wait_busy(gd5f* dev)
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	4605      	mov	r5, r0
uint8_t is_not_timeout = 1;
volatile uint32_t microseconds = GD5F_OP_TIMEOUT;
 8001e8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e8e:	9301      	str	r3, [sp, #4]
uint32_t clk_cycle_start = DWT->CYCCNT;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <gd5f_wait_busy+0x58>)
 8001e92:	685e      	ldr	r6, [r3, #4]
microseconds *= (SystemCoreClock / 1000000);
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <gd5f_wait_busy+0x5c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <gd5f_wait_busy+0x60>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	9a01      	ldr	r2, [sp, #4]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	9301      	str	r3, [sp, #4]
dev->gd5f_busy = 1;
 8001ea8:	2401      	movs	r4, #1
 8001eaa:	75c4      	strb	r4, [r0, #23]

while(gd5f_is_busy(dev) && is_not_timeout) {
 8001eac:	e007      	b.n	8001ebe <gd5f_wait_busy+0x3a>
    is_not_timeout = ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <gd5f_wait_busy+0x58>)
 8001eb0:	685c      	ldr	r4, [r3, #4]
 8001eb2:	1ba4      	subs	r4, r4, r6
 8001eb4:	9b01      	ldr	r3, [sp, #4]
 8001eb6:	429c      	cmp	r4, r3
 8001eb8:	bf2c      	ite	cs
 8001eba:	2400      	movcs	r4, #0
 8001ebc:	2401      	movcc	r4, #1
while(gd5f_is_busy(dev) && is_not_timeout) {
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7ff ffcc 	bl	8001e5c <gd5f_is_busy>
 8001ec4:	b108      	cbz	r0, 8001eca <gd5f_wait_busy+0x46>
 8001ec6:	2c00      	cmp	r4, #0
 8001ec8:	d1f1      	bne.n	8001eae <gd5f_wait_busy+0x2a>
    }

if (is_not_timeout) {
 8001eca:	b11c      	cbz	r4, 8001ed4 <gd5f_wait_busy+0x50>
    dev->gd5f_busy = 0;
 8001ecc:	2000      	movs	r0, #0
 8001ece:	75e8      	strb	r0, [r5, #23]
    return GD5F_OK;
    }
return GD5F_DEV_TIMEOUT;
}
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
return GD5F_DEV_TIMEOUT;
 8001ed4:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ed8:	e7fa      	b.n	8001ed0 <gd5f_wait_busy+0x4c>
 8001eda:	bf00      	nop
 8001edc:	e0001000 	.word	0xe0001000
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <gd5f_reset>:
GD5F_RESULT gd5f_reset(gd5f* dev){
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4604      	mov	r4, r0
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001eec:	21ff      	movs	r1, #255	; 0xff
 8001eee:	f7ff fcd1 	bl	8001894 <gd5f_spi_sendbyte>
 8001ef2:	b948      	cbnz	r0, 8001f08 <gd5f_reset+0x20>
    GD5F_WAIT_BUSY();
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff ffc5 	bl	8001e84 <gd5f_wait_busy>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b908      	cbnz	r0, 8001f02 <gd5f_reset+0x1a>
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd10      	pop	{r4, pc}
    GD5F_WAIT_BUSY();
 8001f02:	f06f 037b 	mvn.w	r3, #123	; 0x7b
 8001f06:	e7fa      	b.n	8001efe <gd5f_reset+0x16>
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001f08:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001f0c:	e7f7      	b.n	8001efe <gd5f_reset+0x16>

08001f0e <gd5f_get_id>:


GD5F_RESULT gd5f_get_id(gd5f* dev)
{
 8001f0e:	b500      	push	{lr}
 8001f10:	b085      	sub	sp, #20
return gd5f_cmd(dev, GD5F_READ_ID, GD5F_ID_ADDR_MID_DID, 1, (uint8_t*)&dev->devid, 2, 0);
 8001f12:	f100 0315 	add.w	r3, r0, #21
 8001f16:	2200      	movs	r2, #0
 8001f18:	9202      	str	r2, [sp, #8]
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	9101      	str	r1, [sp, #4]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	219f      	movs	r1, #159	; 0x9f
 8001f24:	f7ff fd64 	bl	80019f0 <gd5f_cmd>
}
 8001f28:	b005      	add	sp, #20
 8001f2a:	f85d fb04 	ldr.w	pc, [sp], #4

08001f2e <gd5f_random_read_page>:
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^
//       block number (0..1023)  | page num in block (0..63)
//

GD5F_RESULT gd5f_random_read_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *rxbuf, uint16_t datalen)
{
 8001f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	4604      	mov	r4, r0
 8001f36:	460f      	mov	r7, r1
 8001f38:	4615      	mov	r5, r2
 8001f3a:	4698      	mov	r8, r3
 8001f3c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 GD5F_WAIT_BUSY();
 8001f40:	f7ff ffa0 	bl	8001e84 <gd5f_wait_busy>
 8001f44:	bb08      	cbnz	r0, 8001f8a <gd5f_random_read_page+0x5c>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9302      	str	r3, [sp, #8]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2303      	movs	r3, #3
 8001f52:	463a      	mov	r2, r7
 8001f54:	2113      	movs	r1, #19
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fd4a 	bl	80019f0 <gd5f_cmd>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001f5c:	b9c0      	cbnz	r0, 8001f90 <gd5f_random_read_page+0x62>
 GD5F_WAIT_BUSY();
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ff90 	bl	8001e84 <gd5f_wait_busy>
 8001f64:	b9b8      	cbnz	r0, 8001f96 <gd5f_random_read_page+0x68>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001f66:	1973      	adds	r3, r6, r5
 8001f68:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001f6c:	da16      	bge.n	8001f9c <gd5f_random_read_page+0x6e>
return gd5f_cmd(dev, GD5F_PAGE_READ_FROM_CACHE, (byte_addr << 8), 3, rxbuf, datalen, 0);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	9601      	str	r6, [sp, #4]
 8001f74:	f8cd 8000 	str.w	r8, [sp]
 8001f78:	2303      	movs	r3, #3
 8001f7a:	022a      	lsls	r2, r5, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7ff fd36 	bl	80019f0 <gd5f_cmd>
 return gd5f_read_from_cache(dev, start_bytenum, rxbuf, datalen);
 gd5f_get_features(dev);
}
 8001f84:	b004      	add	sp, #16
 8001f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 GD5F_WAIT_BUSY();
 8001f8a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f8e:	e7f9      	b.n	8001f84 <gd5f_random_read_page+0x56>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001f90:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f94:	e7f6      	b.n	8001f84 <gd5f_random_read_page+0x56>
 GD5F_WAIT_BUSY();
 8001f96:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f9a:	e7f3      	b.n	8001f84 <gd5f_random_read_page+0x56>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001f9c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001fa0:	e7f0      	b.n	8001f84 <gd5f_random_read_page+0x56>

08001fa2 <gd5f_random_write_page>:

GD5F_RESULT gd5f_random_write_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *txbuf, uint16_t datalen)
{
 8001fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	4604      	mov	r4, r0
 8001faa:	460d      	mov	r5, r1
 8001fac:	4616      	mov	r6, r2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    GD5F_WAIT_BUSY();
 8001fb4:	f7ff ff66 	bl	8001e84 <gd5f_wait_busy>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d13d      	bne.n	8002038 <gd5f_random_write_page+0x96>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	462a      	mov	r2, r5
 8001fca:	2113      	movs	r1, #19
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff fd0f 	bl	80019f0 <gd5f_cmd>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001fd2:	bba0      	cbnz	r0, 800203e <gd5f_random_write_page+0x9c>
    GD5F_WAIT_BUSY();
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff55 	bl	8001e84 <gd5f_wait_busy>
 8001fda:	bb98      	cbnz	r0, 8002044 <gd5f_random_write_page+0xa2>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff fd02 	bl	80019e6 <gd5f_write_enable>
 8001fe2:	bb90      	cbnz	r0, 800204a <gd5f_random_write_page+0xa8>
    GD5F_WAIT_BUSY();
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff ff4d 	bl	8001e84 <gd5f_wait_busy>
 8001fea:	bb88      	cbnz	r0, 8002050 <gd5f_random_write_page+0xae>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001fec:	19bb      	adds	r3, r7, r6
 8001fee:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001ff2:	da30      	bge.n	8002056 <gd5f_random_write_page+0xb4>
return gd5f_cmd(dev, GD5F_PROGRAM_LOAD_RANDOM_DATA, byte_addr, 2, txbuf, datalen, 1);
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	9701      	str	r7, [sp, #4]
 8001ffa:	f8cd 8000 	str.w	r8, [sp]
 8001ffe:	2302      	movs	r3, #2
 8002000:	4632      	mov	r2, r6
 8002002:	2184      	movs	r1, #132	; 0x84
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff fcf3 	bl	80019f0 <gd5f_cmd>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 800200a:	bb38      	cbnz	r0, 800205c <gd5f_random_write_page+0xba>
return gd5f_cmd(dev, GD5F_PROGRAM_EXECUTE, pageaddress, 3, NULL, 0, 1);
 800200c:	2301      	movs	r3, #1
 800200e:	9302      	str	r3, [sp, #8]
 8002010:	2300      	movs	r3, #0
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2303      	movs	r3, #3
 8002018:	462a      	mov	r2, r5
 800201a:	2110      	movs	r1, #16
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fce7 	bl	80019f0 <gd5f_cmd>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8002022:	b9f0      	cbnz	r0, 8002062 <gd5f_random_write_page+0xc0>
    GD5F_WAIT_BUSY();
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff ff2d 	bl	8001e84 <gd5f_wait_busy>
 800202a:	b9e8      	cbnz	r0, 8002068 <gd5f_random_write_page+0xc6>
    return gd5f_wait_busy(dev);
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff29 	bl	8001e84 <gd5f_wait_busy>
    gd5f_get_features(dev);
}
 8002032:	b004      	add	sp, #16
 8002034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GD5F_WAIT_BUSY();
 8002038:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 800203c:	e7f9      	b.n	8002032 <gd5f_random_write_page+0x90>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 800203e:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002042:	e7f6      	b.n	8002032 <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8002044:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002048:	e7f3      	b.n	8002032 <gd5f_random_write_page+0x90>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 800204a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 800204e:	e7f0      	b.n	8002032 <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8002050:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002054:	e7ed      	b.n	8002032 <gd5f_random_write_page+0x90>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8002056:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 800205a:	e7ea      	b.n	8002032 <gd5f_random_write_page+0x90>
 800205c:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002060:	e7e7      	b.n	8002032 <gd5f_random_write_page+0x90>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8002062:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002066:	e7e4      	b.n	8002032 <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8002068:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 800206c:	e7e1      	b.n	8002032 <gd5f_random_write_page+0x90>

0800206e <gd5f_blockerase>:
    GD5F_WAIT_BUSY();
    return gd5f_get_features(dev);
}

GD5F_RESULT gd5f_blockerase(gd5f* dev, uint32_t block_num)
{
 800206e:	b530      	push	{r4, r5, lr}
 8002070:	b085      	sub	sp, #20
 8002072:	4605      	mov	r5, r0
 8002074:	460c      	mov	r4, r1
    GD5F_WAIT_BUSY();
 8002076:	f7ff ff05 	bl	8001e84 <gd5f_wait_busy>
 800207a:	b9c8      	cbnz	r0, 80020b0 <gd5f_blockerase+0x42>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 800207c:	4628      	mov	r0, r5
 800207e:	f7ff fcb2 	bl	80019e6 <gd5f_write_enable>
 8002082:	b9c0      	cbnz	r0, 80020b6 <gd5f_blockerase+0x48>
    GD5F_WAIT_BUSY();
 8002084:	4628      	mov	r0, r5
 8002086:	f7ff fefd 	bl	8001e84 <gd5f_wait_busy>
 800208a:	b9b8      	cbnz	r0, 80020bc <gd5f_blockerase+0x4e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 800208c:	01a2      	lsls	r2, r4, #6
 800208e:	b292      	uxth	r2, r2
 8002090:	2301      	movs	r3, #1
 8002092:	9302      	str	r3, [sp, #8]
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2303      	movs	r3, #3
 800209c:	21d8      	movs	r1, #216	; 0xd8
 800209e:	4628      	mov	r0, r5
 80020a0:	f7ff fca6 	bl	80019f0 <gd5f_cmd>
 80020a4:	b968      	cbnz	r0, 80020c2 <gd5f_blockerase+0x54>
    return gd5f_wait_busy(dev);
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7ff feec 	bl	8001e84 <gd5f_wait_busy>
}
 80020ac:	b005      	add	sp, #20
 80020ae:	bd30      	pop	{r4, r5, pc}
    GD5F_WAIT_BUSY();
 80020b0:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 80020b4:	e7fa      	b.n	80020ac <gd5f_blockerase+0x3e>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 80020b6:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 80020ba:	e7f7      	b.n	80020ac <gd5f_blockerase+0x3e>
    GD5F_WAIT_BUSY();
 80020bc:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 80020c0:	e7f4      	b.n	80020ac <gd5f_blockerase+0x3e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 80020c2:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 80020c6:	e7f1      	b.n	80020ac <gd5f_blockerase+0x3e>

080020c8 <gd5f_unblock>:

GD5F_RESULT gd5f_unblock(gd5f* dev)
{
 80020c8:	b510      	push	{r4, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 80020ce:	f7ff fed9 	bl	8001e84 <gd5f_wait_busy>
 80020d2:	b9f0      	cbnz	r0, 8002112 <gd5f_unblock+0x4a>
gd5f_get_features(dev);
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff fe21 	bl	8001d1c <gd5f_get_features>
uint8_t feature_byte = 0x00; //dev->registers.protection & ((~(GD5F_PROTECTION_BP0|GD5F_PROTECTION_BP1|GD5F_PROTECTION_BP2))&(~GD5F_PROTECTION_RESERVED));
 80020da:	2300      	movs	r3, #0
 80020dc:	f88d 3017 	strb.w	r3, [sp, #23]
   volatile GD5F_RESULT res = 0;
 80020e0:	f88d 3016 	strb.w	r3, [sp, #22]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 80020e4:	2301      	movs	r3, #1
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	f10d 0217 	add.w	r2, sp, #23
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	22a0      	movs	r2, #160	; 0xa0
 80020f2:	211f      	movs	r1, #31
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7ff fc7b 	bl	80019f0 <gd5f_cmd>
 80020fa:	f88d 0016 	strb.w	r0, [sp, #22]
   return res;
 80020fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
gd5f_set_feature(dev, GD5F_PROTECTION, &feature_byte);

gd5f_get_features(dev);
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff fe0a 	bl	8001d1c <gd5f_get_features>
return gd5f_wait_busy(dev);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff febb 	bl	8001e84 <gd5f_wait_busy>
}
 800210e:	b006      	add	sp, #24
 8002110:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 8002112:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002116:	e7fa      	b.n	800210e <gd5f_unblock+0x46>

08002118 <gd5f_ecc_on>:
gd5f_get_features(dev);
return gd5f_wait_busy(dev);
}

GD5F_RESULT gd5f_ecc_on(gd5f* dev)
{
 8002118:	b510      	push	{r4, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 800211e:	f7ff feb1 	bl	8001e84 <gd5f_wait_busy>
 8002122:	bb20      	cbnz	r0, 800216e <gd5f_ecc_on+0x56>
gd5f_get_features(dev);
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fdf9 	bl	8001d1c <gd5f_get_features>
dev->registers.feature_1 |= GD5F_FEATURE_1_ECC_EN;
 800212a:	7ce3      	ldrb	r3, [r4, #19]
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	4622      	mov	r2, r4
 8002132:	f802 3f13 	strb.w	r3, [r2, #19]!
   volatile GD5F_RESULT res = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	f88d 3017 	strb.w	r3, [sp, #23]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 800213c:	2301      	movs	r3, #1
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	22b0      	movs	r2, #176	; 0xb0
 8002146:	211f      	movs	r1, #31
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fc51 	bl	80019f0 <gd5f_cmd>
 800214e:	f88d 0017 	strb.w	r0, [sp, #23]
   return res;
 8002152:	f89d 3017 	ldrb.w	r3, [sp, #23]
gd5f_set_feature(dev, GD5F_FEATURE_1, &dev->registers.feature_1);
GD5F_WAIT_BUSY();
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff fe94 	bl	8001e84 <gd5f_wait_busy>
 800215c:	b950      	cbnz	r0, 8002174 <gd5f_ecc_on+0x5c>
gd5f_get_features(dev);
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fddc 	bl	8001d1c <gd5f_get_features>
return gd5f_wait_busy(dev);
 8002164:	4620      	mov	r0, r4
 8002166:	f7ff fe8d 	bl	8001e84 <gd5f_wait_busy>
}
 800216a:	b006      	add	sp, #24
 800216c:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 800216e:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002172:	e7fa      	b.n	800216a <gd5f_ecc_on+0x52>
GD5F_WAIT_BUSY();
 8002174:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8002178:	e7f7      	b.n	800216a <gd5f_ecc_on+0x52>
	...

0800217c <gd5f_init>:
{
 800217c:	b510      	push	{r4, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	4604      	mov	r4, r0
volatile GD5F_RESULT res = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f88d 3007 	strb.w	r3, [sp, #7]
    dev->hw_config.spi = SPI1;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <gd5f_init+0x60>)
 800218a:	6003      	str	r3, [r0, #0]
    dev->hw_config.csn_port = FLASH_CSN_GPIO_Port;
 800218c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002190:	6083      	str	r3, [r0, #8]
    dev->hw_config.csn_pin = FLASH_CSN_Pin;
 8002192:	f241 0310 	movw	r3, #4112	; 0x1010
 8002196:	60c3      	str	r3, [r0, #12]
    dev->hw_config.spi_retry_count = GD5F_OP_TIMEOUT;
 8002198:	f242 7310 	movw	r3, #10000	; 0x2710
 800219c:	6043      	str	r3, [r0, #4]
    res |= gd5f_get_id(dev);
 800219e:	f7ff feb6 	bl	8001f0e <gd5f_get_id>
 80021a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	4318      	orrs	r0, r3
 80021aa:	b240      	sxtb	r0, r0
 80021ac:	f88d 0007 	strb.w	r0, [sp, #7]
    res |= gd5f_get_features(dev);
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff fdb3 	bl	8001d1c <gd5f_get_features>
 80021b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4318      	orrs	r0, r3
 80021be:	b240      	sxtb	r0, r0
 80021c0:	f88d 0007 	strb.w	r0, [sp, #7]
    gd5f_unblock(dev);
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff ff7f 	bl	80020c8 <gd5f_unblock>
    gd5f_ecc_on(dev);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ffa4 	bl	8002118 <gd5f_ecc_on>
	return res;
 80021d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80021d4:	b240      	sxtb	r0, r0
 80021d6:	b002      	add	sp, #8
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	bf00      	nop
 80021dc:	40013000 	.word	0x40013000

080021e0 <LCD1602A_WaitReady>:
{
	LL_GPIO_ResetOutputPin(LCD_DATA_PORT, LCD_BUS_MASK);
}

void LCD1602A_WaitReady(void)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021e2:	4a59      	ldr	r2, [pc, #356]	; (8002348 <LCD1602A_WaitReady+0x168>)
 80021e4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80021e8:	6153      	str	r3, [r2, #20]
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	6151      	str	r1, [r2, #20]
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80021ee:	6810      	ldr	r0, [r2, #0]
 80021f0:	f248 0380 	movw	r3, #32896	; 0x8080
 80021f4:	fa93 f4a3 	rbit	r4, r3
 80021f8:	fab4 f484 	clz	r4, r4
 80021fc:	00a4      	lsls	r4, r4, #2
 80021fe:	250f      	movs	r5, #15
 8002200:	fa05 f404 	lsl.w	r4, r5, r4
 8002204:	ea20 0004 	bic.w	r0, r0, r4
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	2408      	movs	r4, #8
 8002214:	fa04 f303 	lsl.w	r3, r4, r3
 8002218:	4303      	orrs	r3, r0
 800221a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800221c:	68d0      	ldr	r0, [r2, #12]
 800221e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002222:	fa91 f3a1 	rbit	r3, r1
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4303      	orrs	r3, r0
 8002232:	60d3      	str	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002234:	4b45      	ldr	r3, [pc, #276]	; (800234c <LCD1602A_WaitReady+0x16c>)
 8002236:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800223a:	611a      	str	r2, [r3, #16]
	uint8_t Busy_Flag = 0xFF;
	uint16_t retrycount = 0xFFFF;
 800223c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002240:	4b41      	ldr	r3, [pc, #260]	; (8002348 <LCD1602A_WaitReady+0x168>)
 8002242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002246:	611a      	str	r2, [r3, #16]
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <LCD1602A_WaitReady+0x170>)
 800224a:	685d      	ldr	r5, [r3, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800224c:	f001 fc5c 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002250:	4a40      	ldr	r2, [pc, #256]	; (8002354 <LCD1602A_WaitReady+0x174>)
 8002252:	fba2 3200 	umull	r3, r2, r2, r0
 8002256:	0c92      	lsrs	r2, r2, #18
 8002258:	0052      	lsls	r2, r2, #1

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <LCD1602A_WaitReady+0x170>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	1b5b      	subs	r3, r3, r5
 8002260:	4293      	cmp	r3, r2
 8002262:	d3fa      	bcc.n	800225a <LCD1602A_WaitReady+0x7a>
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <LCD1602A_WaitReady+0x168>)
 8002266:	689d      	ldr	r5, [r3, #8]
 8002268:	43ed      	mvns	r5, r5
 800226a:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <LCD1602A_WaitReady+0x170>)
 8002276:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002278:	f001 fc46 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <LCD1602A_WaitReady+0x174>)
 800227e:	fba3 3000 	umull	r3, r0, r3, r0
 8002282:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <LCD1602A_WaitReady+0x170>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	1b9b      	subs	r3, r3, r6
 800228a:	4283      	cmp	r3, r0
 800228c:	d3fa      	bcc.n	8002284 <LCD1602A_WaitReady+0xa4>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <LCD1602A_WaitReady+0x168>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <LCD1602A_WaitReady+0x170>)
 8002298:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800229a:	f001 fc35 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800229e:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <LCD1602A_WaitReady+0x174>)
 80022a0:	fba2 3200 	umull	r3, r2, r2, r0
 80022a4:	0c92      	lsrs	r2, r2, #18
 80022a6:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <LCD1602A_WaitReady+0x170>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	1b9b      	subs	r3, r3, r6
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d3fa      	bcc.n	80022a8 <LCD1602A_WaitReady+0xc8>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <LCD1602A_WaitReady+0x168>)
 80022b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b8:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <LCD1602A_WaitReady+0x170>)
 80022bc:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80022be:	f001 fc23 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <LCD1602A_WaitReady+0x174>)
 80022c4:	fba3 3000 	umull	r3, r0, r3, r0
 80022c8:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <LCD1602A_WaitReady+0x170>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	1b9b      	subs	r3, r3, r6
 80022d0:	4283      	cmp	r3, r0
 80022d2:	d3fa      	bcc.n	80022ca <LCD1602A_WaitReady+0xea>
			LCD1602A_Delay_us(2);
			Busy_Flag = (LL_GPIO_IsInputPinSet(LCD_PORT_D7, LCD_PIN_D7) > 0);
			LCD1602A_ResetPins(LCD_PORT_E, LCD_PIN_E);
			LCD1602A_Delay_us(1);
			LCD1602A_E_Strobe();
			retrycount --;
 80022d4:	3c01      	subs	r4, #1
 80022d6:	b2a4      	uxth	r4, r4
		}
	while (Busy_Flag && retrycount);
 80022d8:	b90d      	cbnz	r5, 80022de <LCD1602A_WaitReady+0xfe>
 80022da:	2c00      	cmp	r4, #0
 80022dc:	d1b0      	bne.n	8002240 <LCD1602A_WaitReady+0x60>
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <LCD1602A_WaitReady+0x168>)
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	f248 0180 	movw	r1, #32896	; 0x8080
 80022e6:	fa91 f0a1 	rbit	r0, r1
 80022ea:	fab0 f080 	clz	r0, r0
 80022ee:	0080      	lsls	r0, r0, #2
 80022f0:	240f      	movs	r4, #15
 80022f2:	fa04 f000 	lsl.w	r0, r4, r0
 80022f6:	ea23 0300 	bic.w	r3, r3, r0
 80022fa:	fa91 f0a1 	rbit	r0, r1
 80022fe:	fab0 f080 	clz	r0, r0
 8002302:	0080      	lsls	r0, r0, #2
 8002304:	2401      	movs	r4, #1
 8002306:	fa04 f000 	lsl.w	r0, r4, r0
 800230a:	4303      	orrs	r3, r0
 800230c:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800230e:	2480      	movs	r4, #128	; 0x80
 8002310:	6154      	str	r4, [r2, #20]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002312:	68d0      	ldr	r0, [r2, #12]
 8002314:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002318:	fa94 f4a4 	rbit	r4, r4
 800231c:	60d0      	str	r0, [r2, #12]
 800231e:	fa91 f0a1 	rbit	r0, r1
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002322:	fab0 f080 	clz	r0, r0
 8002326:	0080      	lsls	r0, r0, #2
 8002328:	2404      	movs	r4, #4
 800232a:	fa04 f000 	lsl.w	r0, r4, r0
 800232e:	ea23 0300 	bic.w	r3, r3, r0
 8002332:	fa91 f1a1 	rbit	r1, r1
 8002336:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002338:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800233c:	6153      	str	r3, [r2, #20]
 800233e:	4b03      	ldr	r3, [pc, #12]	; (800234c <LCD1602A_WaitReady+0x16c>)
 8002340:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002344:	615a      	str	r2, [r3, #20]
	LCD1602A_SetPinDataOut(LCD_PORT_D7, LCD_PIN_D7);
	LCD1602A_ResetPins(LCD_DATA_PORT, LCD_PIN_MASK);
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
}
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40010800 	.word	0x40010800
 8002350:	e0001000 	.word	0xe0001000
 8002354:	431bde83 	.word	0x431bde83

08002358 <LCD1602A_SendByte>:


//---Отсылка байта в дисплей---//

void LCD1602A_SendByte(char databyte, uint8_t isData)
{
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <LCD1602A_SendByte+0xc4>)
 800235e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002368:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800236c:	615a      	str	r2, [r3, #20]

	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
	if (isData) LCD1602A_SetPins(LCD_PORT_RS, LCD_PIN_RS);
 800236e:	b111      	cbz	r1, 8002376 <LCD1602A_SendByte+0x1e>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <LCD1602A_SendByte+0xc8>)
 800237c:	6113      	str	r3, [r2, #16]
 800237e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002382:	6113      	str	r3, [r2, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <LCD1602A_SendByte+0xcc>)
 8002386:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002388:	f001 fbbe 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800238c:	4a26      	ldr	r2, [pc, #152]	; (8002428 <LCD1602A_SendByte+0xd0>)
 800238e:	fba2 3200 	umull	r3, r2, r2, r0
 8002392:	0c92      	lsrs	r2, r2, #18
 8002394:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <LCD1602A_SendByte+0xcc>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	1b5b      	subs	r3, r3, r5
 800239c:	4293      	cmp	r3, r2
 800239e:	d3fa      	bcc.n	8002396 <LCD1602A_SendByte+0x3e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <LCD1602A_SendByte+0xc8>)
 80023a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a6:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <LCD1602A_SendByte+0xcc>)
 80023aa:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023ac:	f001 fbac 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <LCD1602A_SendByte+0xd0>)
 80023b2:	fba3 3000 	umull	r3, r0, r3, r0
 80023b6:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <LCD1602A_SendByte+0xcc>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	1b5b      	subs	r3, r3, r5
 80023be:	4283      	cmp	r3, r0
 80023c0:	d3fa      	bcc.n	80023b8 <LCD1602A_SendByte+0x60>
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <LCD1602A_SendByte+0xc8>)
 80023c4:	22f0      	movs	r2, #240	; 0xf0
 80023c6:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80023c8:	0124      	lsls	r4, r4, #4
 80023ca:	b2e4      	uxtb	r4, r4
 80023cc:	611c      	str	r4, [r3, #16]
 80023ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d2:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <LCD1602A_SendByte+0xcc>)
 80023d6:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023d8:	f001 fb96 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <LCD1602A_SendByte+0xd0>)
 80023de:	fba2 3200 	umull	r3, r2, r2, r0
 80023e2:	0c92      	lsrs	r2, r2, #18
 80023e4:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <LCD1602A_SendByte+0xcc>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	1b1b      	subs	r3, r3, r4
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d3fa      	bcc.n	80023e6 <LCD1602A_SendByte+0x8e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <LCD1602A_SendByte+0xc8>)
 80023f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f6:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <LCD1602A_SendByte+0xcc>)
 80023fa:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023fc:	f001 fb84 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <LCD1602A_SendByte+0xd0>)
 8002402:	fba3 3000 	umull	r3, r0, r3, r0
 8002406:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <LCD1602A_SendByte+0xcc>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	1b1b      	subs	r3, r3, r4
 800240e:	4283      	cmp	r3, r0
 8002410:	d3fa      	bcc.n	8002408 <LCD1602A_SendByte+0xb0>
 8002412:	4b03      	ldr	r3, [pc, #12]	; (8002420 <LCD1602A_SendByte+0xc8>)
 8002414:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002418:	615a      	str	r2, [r3, #20]
	LCD1602A_ClearDataBus();
    //second halfbyte
	LCD1602A_SetPins(LCD_DATA_PORT, (((databyte & 0x0F) << 4U) << 8U));
	LCD1602A_E_Strobe();
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	40010800 	.word	0x40010800
 8002420:	40010c00 	.word	0x40010c00
 8002424:	e0001000 	.word	0xe0001000
 8002428:	431bde83 	.word	0x431bde83

0800242c <LCD1602A_SendCmdHalfByte>:

void LCD1602A_SendCmdHalfByte(char cmdbyte)
{
 800242c:	b510      	push	{r4, lr}
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <LCD1602A_SendCmdHalfByte+0x68>)
 8002430:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800243e:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002440:	0100      	lsls	r0, r0, #4
 8002442:	b2c0      	uxtb	r0, r0
 8002444:	6118      	str	r0, [r3, #16]
 8002446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244a:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <LCD1602A_SendCmdHalfByte+0x6c>)
 800244e:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002450:	f001 fb5a 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002454:	4a11      	ldr	r2, [pc, #68]	; (800249c <LCD1602A_SendCmdHalfByte+0x70>)
 8002456:	fba2 3200 	umull	r3, r2, r2, r0
 800245a:	0c92      	lsrs	r2, r2, #18
 800245c:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <LCD1602A_SendCmdHalfByte+0x6c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	1b1b      	subs	r3, r3, r4
 8002464:	4293      	cmp	r3, r2
 8002466:	d3fa      	bcc.n	800245e <LCD1602A_SendCmdHalfByte+0x32>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <LCD1602A_SendCmdHalfByte+0x74>)
 800246a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800246e:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <LCD1602A_SendCmdHalfByte+0x6c>)
 8002472:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002474:	f001 fb48 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <LCD1602A_SendCmdHalfByte+0x70>)
 800247a:	fba3 3000 	umull	r3, r0, r3, r0
 800247e:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <LCD1602A_SendCmdHalfByte+0x6c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	1b1b      	subs	r3, r3, r4
 8002486:	4283      	cmp	r3, r0
 8002488:	d3fa      	bcc.n	8002480 <LCD1602A_SendCmdHalfByte+0x54>
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <LCD1602A_SendCmdHalfByte+0x74>)
 800248c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002490:	615a      	str	r2, [r3, #20]

    //second halfbyte, lower half only 0b----XXXX
    LCD1602A_SetPins(LCD_DATA_PORT, (((cmdbyte & 0x0F) << 4U) << 8U));
    LCD1602A_E_Strobe();
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40010800 	.word	0x40010800
 8002498:	e0001000 	.word	0xe0001000
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	40010c00 	.word	0x40010c00

080024a4 <LCD1602A_SetCursorPos>:
{
	LCD1602A_SendByte(databyte, DATA);
}

void LCD1602A_SetCursorPos(char Row, char Col)
{
 80024a4:	b510      	push	{r4, lr}
	   char address;
	   if (Row == 0)
 80024a6:	4604      	mov	r4, r0
 80024a8:	b100      	cbz	r0, 80024ac <LCD1602A_SetCursorPos+0x8>
	   address = 0;
	   else
	   address = 0x40;
 80024aa:	2440      	movs	r4, #64	; 0x40
	   address |= Col;
 80024ac:	430c      	orrs	r4, r1
	   LCD1602A_WaitReady();
 80024ae:	f7ff fe97 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80024b2:	2100      	movs	r1, #0
 80024b4:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80024b8:	f7ff ff4e 	bl	8002358 <LCD1602A_SendByte>
	   LCD1602A_SendCmd((LCD_SET_DDRAM_ADDR | address));
}
 80024bc:	bd10      	pop	{r4, pc}

080024be <LCD1602A_ClearScreen>:


//---Очистка дисплея---//
void LCD1602A_ClearScreen(void)
{
 80024be:	b508      	push	{r3, lr}
	LCD1602A_WaitReady();
 80024c0:	f7ff fe8e 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff ff46 	bl	8002358 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_CLEAR_DISPLAY);
	LCD1602A_WaitReady();
 80024cc:	f7ff fe88 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80024d0:	2100      	movs	r1, #0
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7ff ff40 	bl	8002358 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_RETURN_HOME);
	LCD1602A_WaitReady();
 80024d8:	f7ff fe82 	bl	80021e0 <LCD1602A_WaitReady>
}
 80024dc:	bd08      	pop	{r3, pc}

080024de <LCD1602A_EntryModeSet>:


void LCD1602A_EntryModeSet(uint8_t left_to_right, uint8_t shift_all_display)
{
 80024de:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_ENTRY_MODE_SET|(left_to_right << LCD_SHIFT_RIGHT)|(shift_all_display));
 80024e0:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 80024e4:	b2e4      	uxtb	r4, r4
 80024e6:	f044 0404 	orr.w	r4, r4, #4
	LCD1602A_WaitReady();
 80024ea:	f7ff fe79 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 80024ee:	2100      	movs	r1, #0
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7ff ff31 	bl	8002358 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <LCD1602A_DisplayControl>:

void LCD1602A_DisplayControl(uint8_t display_state, uint8_t cursor_show, uint8_t cursor_blink)
{
 80024f8:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_DISPLAY_CONTROL|(display_state << LCD_DISPLAY_ON)|(cursor_show << LCD_CURSOR_SHOW)|(cursor_blink));
 80024fa:	0080      	lsls	r0, r0, #2
 80024fc:	f040 0008 	orr.w	r0, r0, #8
 8002500:	b240      	sxtb	r0, r0
 8002502:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8002506:	b249      	sxtb	r1, r1
 8002508:	430a      	orrs	r2, r1
 800250a:	b2d4      	uxtb	r4, r2
	LCD1602A_WaitReady();
 800250c:	f7ff fe68 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002510:	2100      	movs	r1, #0
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff20 	bl	8002358 <LCD1602A_SendByte>
	LCD1602A_SendCmd(lcd_cmd);
}
 8002518:	bd10      	pop	{r4, pc}

0800251a <LCD1602A_FunctionSet>:




void LCD1602A_FunctionSet(uint8_t display_8bit, uint8_t two_lines, uint8_t bigfont)
{
 800251a:	b508      	push	{r3, lr}
	uint8_t lcd_cmd = (LCD_FUNCTION_SET|(display_8bit << LCD_BIT_MODE)|(two_lines << LCD_2_LINES)|(bigfont << LCD_FONT_SIZE_BIG));
 800251c:	0100      	lsls	r0, r0, #4
 800251e:	f040 0020 	orr.w	r0, r0, #32
 8002522:	b240      	sxtb	r0, r0
 8002524:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 8002528:	b240      	sxtb	r0, r0
 800252a:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
	LCD1602A_SendByte(cmdbyte, CMD);
 800252e:	2100      	movs	r1, #0
 8002530:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8002534:	f7ff ff10 	bl	8002358 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 8002538:	bd08      	pop	{r3, pc}

0800253a <LCD1602A_DDRAM_Set>:
	uint8_t lcd_cmd = (LCD_SET_SGRAM_ADDR|(cgram_address & LCD_SGRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}

void LCD1602A_DDRAM_Set(uint8_t ddram_address)
{
 800253a:	b508      	push	{r3, lr}
	LCD1602A_SendByte(cmdbyte, CMD);
 800253c:	2100      	movs	r1, #0
 800253e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002542:	f7ff ff09 	bl	8002358 <LCD1602A_SendByte>
	uint8_t lcd_cmd = (LCD_SET_DDRAM_ADDR|(ddram_address & LCD_DDRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}
 8002546:	bd08      	pop	{r3, pc}

08002548 <LCD1602A_4BIT_Preinit>:




void LCD1602A_4BIT_Preinit(void)
{
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <LCD1602A_4BIT_Preinit+0x168>)
 800254c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800255a:	615a      	str	r2, [r3, #20]
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);

	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 800255c:	2003      	movs	r0, #3
 800255e:	f7ff ff65 	bl	800242c <LCD1602A_SendCmdHalfByte>
 8002562:	f241 0404 	movw	r4, #4100	; 0x1004
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002568:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800256a:	f001 facd 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800256e:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 8002570:	fba3 3000 	umull	r3, r0, r3, r0
 8002574:	0c80      	lsrs	r0, r0, #18
 8002576:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	1b5b      	subs	r3, r3, r5
 8002580:	42a3      	cmp	r3, r4
 8002582:	d3fa      	bcc.n	800257a <LCD1602A_4BIT_Preinit+0x32>
	LCD1602A_Delay_us(4100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 8002584:	2003      	movs	r0, #3
 8002586:	f7ff ff51 	bl	800242c <LCD1602A_SendCmdHalfByte>
 800258a:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800258c:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 800258e:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002590:	f001 faba 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 8002596:	fba3 3000 	umull	r3, r0, r3, r0
 800259a:	0c80      	lsrs	r0, r0, #18
 800259c:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80025a0:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	1b5b      	subs	r3, r3, r5
 80025a6:	42a3      	cmp	r3, r4
 80025a8:	d3fa      	bcc.n	80025a0 <LCD1602A_4BIT_Preinit+0x58>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 80025aa:	2003      	movs	r0, #3
 80025ac:	f7ff ff3e 	bl	800242c <LCD1602A_SendCmdHalfByte>
 80025b0:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 80025b4:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80025b6:	f001 faa7 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 80025bc:	fba3 3000 	umull	r3, r0, r3, r0
 80025c0:	0c80      	lsrs	r0, r0, #18
 80025c2:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	1b5b      	subs	r3, r3, r5
 80025cc:	42a3      	cmp	r3, r4
 80025ce:	d3fa      	bcc.n	80025c6 <LCD1602A_4BIT_Preinit+0x7e>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_4_BIT);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7ff ff2b 	bl	800242c <LCD1602A_SendCmdHalfByte>
 80025d6:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 80025da:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80025dc:	f001 fa94 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80025e0:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 80025e2:	fba3 3000 	umull	r3, r0, r3, r0
 80025e6:	0c80      	lsrs	r0, r0, #18
 80025e8:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	1b5b      	subs	r3, r3, r5
 80025f2:	42a3      	cmp	r3, r4
 80025f4:	d3fa      	bcc.n	80025ec <LCD1602A_4BIT_Preinit+0xa4>
	LCD1602A_Delay_us(100);
	LCD1602A_FunctionSet(OFF, ON, OFF);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2101      	movs	r1, #1
 80025fa:	4610      	mov	r0, r2
 80025fc:	f7ff ff8d 	bl	800251a <LCD1602A_FunctionSet>
 8002600:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002604:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002606:	f001 fa7f 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 800260c:	fba3 3000 	umull	r3, r0, r3, r0
 8002610:	0c80      	lsrs	r0, r0, #18
 8002612:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	1b5b      	subs	r3, r3, r5
 800261c:	42a3      	cmp	r3, r4
 800261e:	d3fa      	bcc.n	8002616 <LCD1602A_4BIT_Preinit+0xce>
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, OFF, OFF);
 8002620:	2200      	movs	r2, #0
 8002622:	4611      	mov	r1, r2
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff ff67 	bl	80024f8 <LCD1602A_DisplayControl>
 800262a:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 800262e:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002630:	f001 fa6a 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 8002636:	fba3 3000 	umull	r3, r0, r3, r0
 800263a:	0c80      	lsrs	r0, r0, #18
 800263c:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	1b5b      	subs	r3, r3, r5
 8002646:	42a3      	cmp	r3, r4
 8002648:	d3fa      	bcc.n	8002640 <LCD1602A_4BIT_Preinit+0xf8>
	LCD1602A_SendByte(cmdbyte, CMD);
 800264a:	2100      	movs	r1, #0
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff fe83 	bl	8002358 <LCD1602A_SendByte>
 8002652:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002656:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002658:	f001 fa56 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 800265e:	fba3 3000 	umull	r3, r0, r3, r0
 8002662:	0c80      	lsrs	r0, r0, #18
 8002664:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	1b5b      	subs	r3, r3, r5
 800266e:	42a3      	cmp	r3, r4
 8002670:	d3fa      	bcc.n	8002668 <LCD1602A_4BIT_Preinit+0x120>
	LCD1602A_Delay_us(80);
	LCD1602A_SendCmd(0x01);
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, ON, ON);
 8002672:	2201      	movs	r2, #1
 8002674:	4611      	mov	r1, r2
 8002676:	4610      	mov	r0, r2
 8002678:	f7ff ff3e 	bl	80024f8 <LCD1602A_DisplayControl>
 800267c:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002680:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002682:	f001 fa41 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <LCD1602A_4BIT_Preinit+0x170>)
 8002688:	fba3 3000 	umull	r3, r0, r3, r0
 800268c:	0c80      	lsrs	r0, r0, #18
 800268e:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <LCD1602A_4BIT_Preinit+0x16c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	1b5b      	subs	r3, r3, r5
 8002698:	42a3      	cmp	r3, r4
 800269a:	d3fa      	bcc.n	8002692 <LCD1602A_4BIT_Preinit+0x14a>
	LCD1602A_Delay_us(80);
	LCD1602A_EntryModeSet(ON, OFF);
 800269c:	2100      	movs	r1, #0
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff ff1d 	bl	80024de <LCD1602A_EntryModeSet>
	LCD1602A_DDRAM_Set(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff ff48 	bl	800253a <LCD1602A_DDRAM_Set>
	LCD1602A_WaitReady();
 80026aa:	f7ff fd99 	bl	80021e0 <LCD1602A_WaitReady>
}
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	40010800 	.word	0x40010800
 80026b4:	e0001000 	.word	0xe0001000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <LCD1602A_Init>:


void LCD1602A_Init(void)
{
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	f64e 2460 	movw	r4, #60000	; 0xea60
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <LCD1602A_Init+0x2c>)
 80026c4:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80026c6:	f001 fa1f 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <LCD1602A_Init+0x30>)
 80026cc:	fba3 3000 	umull	r3, r0, r3, r0
 80026d0:	0c80      	lsrs	r0, r0, #18
 80026d2:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <LCD1602A_Init+0x2c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	1b5b      	subs	r3, r3, r5
 80026dc:	42a3      	cmp	r3, r4
 80026de:	d3fa      	bcc.n	80026d6 <LCD1602A_Init+0x1a>
	LCD1602A_Delay_us(60000);
	LCD1602A_4BIT_Preinit();
 80026e0:	f7ff ff32 	bl	8002548 <LCD1602A_4BIT_Preinit>
}
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	bf00      	nop
 80026e8:	e0001000 	.word	0xe0001000
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <LCD1602A_PrintStr>:


//---Печать строки---//

void LCD1602A_PrintStr(char *Text)
{
 80026f0:	b510      	push	{r4, lr}
 80026f2:	4604      	mov	r4, r0
	 char *c;
	    c = Text;
	    while ((c != 0) && (*c != 0))
 80026f4:	e006      	b.n	8002704 <LCD1602A_PrintStr+0x14>
	    {
	    	LCD1602A_WaitReady();
 80026f6:	f7ff fd73 	bl	80021e0 <LCD1602A_WaitReady>
	LCD1602A_SendByte(databyte, DATA);
 80026fa:	2101      	movs	r1, #1
 80026fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002700:	f7ff fe2a 	bl	8002358 <LCD1602A_SendByte>
	    while ((c != 0) && (*c != 0))
 8002704:	b114      	cbz	r4, 800270c <LCD1602A_PrintStr+0x1c>
 8002706:	7823      	ldrb	r3, [r4, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f4      	bne.n	80026f6 <LCD1602A_PrintStr+0x6>
	    	LCD1602A_SendData(*c);
	        c++;
	    }
}
 800270c:	bd10      	pop	{r4, pc}
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x20>)
 8002714:	6813      	ldr	r3, [r2, #0]
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271c:	2003      	movs	r0, #3
 800271e:	f000 f82f 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fe3e 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7fe fe0a 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800272c:	2000      	movs	r0, #0
 800272e:	bd08      	pop	{r3, pc}
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_IncTick+0x10>)
 8002736:	6811      	ldr	r1, [r2, #0]
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_IncTick+0x14>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	440b      	add	r3, r1
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20006328 	.word	0x20006328
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800274c:	4b01      	ldr	r3, [pc, #4]	; (8002754 <HAL_GetTick+0x8>)
 800274e:	6818      	ldr	r0, [r3, #0]
}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20006328 	.word	0x20006328

08002758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff fff6 	bl	800274c <HAL_GetTick>
 8002760:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002766:	d002      	beq.n	800276e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_Delay+0x24>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	f7ff ffed 	bl	800274c <HAL_GetTick>
 8002772:	1b40      	subs	r0, r0, r5
 8002774:	42a0      	cmp	r0, r4
 8002776:	d3fa      	bcc.n	800276e <HAL_Delay+0x16>
  {
  }
}
 8002778:	bd38      	pop	{r3, r4, r5, pc}
 800277a:	bf00      	nop
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b510      	push	{r4, lr}
 8002782:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002784:	1ec3      	subs	r3, r0, #3
 8002786:	2b04      	cmp	r3, #4
 8002788:	d80f      	bhi.n	80027aa <HAL_NVIC_SetPriorityGrouping+0x2a>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800278c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002796:	0224      	lsls	r4, r4, #8
 8002798:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800279e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80027a6:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027a8:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80027aa:	21a2      	movs	r1, #162	; 0xa2
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80027ae:	f7fe fbd8 	bl	8000f62 <assert_failed>
 80027b2:	e7ea      	b.n	800278a <HAL_NVIC_SetPriorityGrouping+0xa>
 80027b4:	e000ed00 	.word	0xe000ed00
 80027b8:	0800efec 	.word	0x0800efec

080027bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4605      	mov	r5, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80027c4:	2a0f      	cmp	r2, #15
 80027c6:	d825      	bhi.n	8002814 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80027c8:	2c0f      	cmp	r4, #15
 80027ca:	d828      	bhi.n	800281e <HAL_NVIC_SetPriority+0x62>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_NVIC_SetPriority+0x80>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	f1c3 0207 	rsb	r2, r3, #7
 80027d8:	2a04      	cmp	r2, #4
 80027da:	bf28      	it	cs
 80027dc:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	1d19      	adds	r1, r3, #4
 80027e0:	2906      	cmp	r1, #6
 80027e2:	d921      	bls.n	8002828 <HAL_NVIC_SetPriority+0x6c>
 80027e4:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e6:	f04f 31ff 	mov.w	r1, #4294967295
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	ea24 0402 	bic.w	r4, r4, r2
 80027f2:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) < 0)
 80027fe:	2d00      	cmp	r5, #0
 8002800:	db14      	blt.n	800282c <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	0124      	lsls	r4, r4, #4
 8002804:	b2e4      	uxtb	r4, r4
 8002806:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800280a:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800280e:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002812:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002814:	21ba      	movs	r1, #186	; 0xba
 8002816:	480a      	ldr	r0, [pc, #40]	; (8002840 <HAL_NVIC_SetPriority+0x84>)
 8002818:	f7fe fba3 	bl	8000f62 <assert_failed>
 800281c:	e7d4      	b.n	80027c8 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800281e:	21bb      	movs	r1, #187	; 0xbb
 8002820:	4807      	ldr	r0, [pc, #28]	; (8002840 <HAL_NVIC_SetPriority+0x84>)
 8002822:	f7fe fb9e 	bl	8000f62 <assert_failed>
 8002826:	e7d1      	b.n	80027cc <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002828:	2300      	movs	r3, #0
 800282a:	e7dc      	b.n	80027e6 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	f005 050f 	and.w	r5, r5, #15
 8002830:	0124      	lsls	r4, r4, #4
 8002832:	b2e4      	uxtb	r4, r4
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_NVIC_SetPriority+0x88>)
 8002836:	555c      	strb	r4, [r3, r5]
 8002838:	e7eb      	b.n	8002812 <HAL_NVIC_SetPriority+0x56>
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00
 8002840:	0800efec 	.word	0x0800efec
 8002844:	e000ed14 	.word	0xe000ed14

08002848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800284a:	1e04      	subs	r4, r0, #0
 800284c:	db08      	blt.n	8002860 <HAL_NVIC_EnableIRQ+0x18>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800284e:	f004 021f 	and.w	r2, r4, #31
 8002852:	0964      	lsrs	r4, r4, #5
 8002854:	2301      	movs	r3, #1
 8002856:	4093      	lsls	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_NVIC_EnableIRQ+0x24>)
 800285a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800285e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002860:	21ce      	movs	r1, #206	; 0xce
 8002862:	4803      	ldr	r0, [pc, #12]	; (8002870 <HAL_NVIC_EnableIRQ+0x28>)
 8002864:	f7fe fb7d 	bl	8000f62 <assert_failed>
 8002868:	e7f1      	b.n	800284e <HAL_NVIC_EnableIRQ+0x6>
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100
 8002870:	0800efec 	.word	0x0800efec

08002874 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002874:	2800      	cmp	r0, #0
 8002876:	f000 80b8 	beq.w	80029ea <HAL_DMA_Init+0x176>
{
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800287e:	6803      	ldr	r3, [r0, #0]
 8002880:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <HAL_DMA_Init+0x17c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d025      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 8002886:	3214      	adds	r2, #20
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 800288c:	3214      	adds	r2, #20
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 8002892:	3214      	adds	r2, #20
 8002894:	4293      	cmp	r3, r2
 8002896:	d01c      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 8002898:	3214      	adds	r2, #20
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 800289e:	3214      	adds	r2, #20
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d016      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028a4:	3214      	adds	r2, #20
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028aa:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028b2:	3214      	adds	r2, #20
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00c      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028b8:	3214      	adds	r2, #20
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028be:	3214      	adds	r2, #20
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d006      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028c4:	3214      	adds	r2, #20
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <HAL_DMA_Init+0x5e>
 80028ca:	21aa      	movs	r1, #170	; 0xaa
 80028cc:	4849      	ldr	r0, [pc, #292]	; (80029f4 <HAL_DMA_Init+0x180>)
 80028ce:	f7fe fb48 	bl	8000f62 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	b123      	cbz	r3, 80028e0 <HAL_DMA_Init+0x6c>
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d002      	beq.n	80028e0 <HAL_DMA_Init+0x6c>
 80028da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028de:	d156      	bne.n	800298e <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80028e0:	68a3      	ldr	r3, [r4, #8]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d001      	beq.n	80028ea <HAL_DMA_Init+0x76>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d156      	bne.n	8002998 <HAL_DMA_Init+0x124>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	2b80      	cmp	r3, #128	; 0x80
 80028ee:	d001      	beq.n	80028f4 <HAL_DMA_Init+0x80>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d156      	bne.n	80029a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	b12b      	cbz	r3, 8002904 <HAL_DMA_Init+0x90>
 80028f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fc:	d002      	beq.n	8002904 <HAL_DMA_Init+0x90>
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d153      	bne.n	80029ac <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002904:	6963      	ldr	r3, [r4, #20]
 8002906:	b12b      	cbz	r3, 8002914 <HAL_DMA_Init+0xa0>
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290c:	d002      	beq.n	8002914 <HAL_DMA_Init+0xa0>
 800290e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002912:	d150      	bne.n	80029b6 <HAL_DMA_Init+0x142>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002914:	69a3      	ldr	r3, [r4, #24]
 8002916:	b10b      	cbz	r3, 800291c <HAL_DMA_Init+0xa8>
 8002918:	2b20      	cmp	r3, #32
 800291a:	d151      	bne.n	80029c0 <HAL_DMA_Init+0x14c>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800291c:	69e3      	ldr	r3, [r4, #28]
 800291e:	b143      	cbz	r3, 8002932 <HAL_DMA_Init+0xbe>
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d005      	beq.n	8002932 <HAL_DMA_Init+0xbe>
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	d002      	beq.n	8002932 <HAL_DMA_Init+0xbe>
 800292c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002930:	d14b      	bne.n	80029ca <HAL_DMA_Init+0x156>

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_DMA_Init+0x184>)
 8002936:	429a      	cmp	r2, r3
 8002938:	d84c      	bhi.n	80029d4 <HAL_DMA_Init+0x160>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <HAL_DMA_Init+0x188>)
 800293c:	4413      	add	r3, r2
 800293e:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <HAL_DMA_Init+0x18c>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	6423      	str	r3, [r4, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_DMA_Init+0x190>)
 800294c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002954:	6821      	ldr	r1, [r4, #0]
 8002956:	680a      	ldr	r2, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002958:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800295c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002960:	6863      	ldr	r3, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	68a0      	ldr	r0, [r4, #8]
  tmp |=  hdma->Init.Direction        |
 8002964:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	68e0      	ldr	r0, [r4, #12]
 8002968:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	6960      	ldr	r0, [r4, #20]
 8002970:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002972:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002976:	69e0      	ldr	r0, [r4, #28]
 8002978:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800297a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800297c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297e:	2000      	movs	r0, #0
 8002980:	63a0      	str	r0, [r4, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	2301      	movs	r3, #1
 8002984:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002988:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 800298c:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800298e:	21ab      	movs	r1, #171	; 0xab
 8002990:	4818      	ldr	r0, [pc, #96]	; (80029f4 <HAL_DMA_Init+0x180>)
 8002992:	f7fe fae6 	bl	8000f62 <assert_failed>
 8002996:	e7a3      	b.n	80028e0 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002998:	21ac      	movs	r1, #172	; 0xac
 800299a:	4816      	ldr	r0, [pc, #88]	; (80029f4 <HAL_DMA_Init+0x180>)
 800299c:	f7fe fae1 	bl	8000f62 <assert_failed>
 80029a0:	e7a3      	b.n	80028ea <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80029a2:	21ad      	movs	r1, #173	; 0xad
 80029a4:	4813      	ldr	r0, [pc, #76]	; (80029f4 <HAL_DMA_Init+0x180>)
 80029a6:	f7fe fadc 	bl	8000f62 <assert_failed>
 80029aa:	e7a3      	b.n	80028f4 <HAL_DMA_Init+0x80>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80029ac:	21ae      	movs	r1, #174	; 0xae
 80029ae:	4811      	ldr	r0, [pc, #68]	; (80029f4 <HAL_DMA_Init+0x180>)
 80029b0:	f7fe fad7 	bl	8000f62 <assert_failed>
 80029b4:	e7a6      	b.n	8002904 <HAL_DMA_Init+0x90>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80029b6:	21af      	movs	r1, #175	; 0xaf
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <HAL_DMA_Init+0x180>)
 80029ba:	f7fe fad2 	bl	8000f62 <assert_failed>
 80029be:	e7a9      	b.n	8002914 <HAL_DMA_Init+0xa0>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80029c0:	21b0      	movs	r1, #176	; 0xb0
 80029c2:	480c      	ldr	r0, [pc, #48]	; (80029f4 <HAL_DMA_Init+0x180>)
 80029c4:	f7fe facd 	bl	8000f62 <assert_failed>
 80029c8:	e7a8      	b.n	800291c <HAL_DMA_Init+0xa8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80029ca:	21b1      	movs	r1, #177	; 0xb1
 80029cc:	4809      	ldr	r0, [pc, #36]	; (80029f4 <HAL_DMA_Init+0x180>)
 80029ce:	f7fe fac8 	bl	8000f62 <assert_failed>
 80029d2:	e7ae      	b.n	8002932 <HAL_DMA_Init+0xbe>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_DMA_Init+0x194>)
 80029d6:	4413      	add	r3, r2
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_DMA_Init+0x18c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	6423      	str	r3, [r4, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_DMA_Init+0x198>)
 80029e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80029e8:	e7b1      	b.n	800294e <HAL_DMA_Init+0xda>
    return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40020008 	.word	0x40020008
 80029f4:	0800f028 	.word	0x0800f028
 80029f8:	40020407 	.word	0x40020407
 80029fc:	bffdfff8 	.word	0xbffdfff8
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020000 	.word	0x40020000
 8002a08:	bffdfbf8 	.word	0xbffdfbf8
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a12:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002a20:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	6802      	ldr	r2, [r0, #0]
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	f023 030e 	bic.w	r3, r3, #14
 8002a2a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a2c:	6802      	ldr	r2, [r0, #0]
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a36:	6803      	ldr	r3, [r0, #0]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	; (8002b68 <HAL_DMA_Abort_IT+0x158>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d94e      	bls.n	8002adc <HAL_DMA_Abort_IT+0xcc>
 8002a3e:	3a78      	subs	r2, #120	; 0x78
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d024      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x7e>
 8002a44:	3214      	adds	r2, #20
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d030      	beq.n	8002aac <HAL_DMA_Abort_IT+0x9c>
 8002a4a:	3214      	adds	r2, #20
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02f      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xa0>
 8002a50:	3214      	adds	r2, #20
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02f      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0xa6>
 8002a56:	3214      	adds	r2, #20
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d02f      	beq.n	8002abc <HAL_DMA_Abort_IT+0xac>
 8002a5c:	3214      	adds	r2, #20
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02f      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0xb2>
 8002a62:	3214      	adds	r2, #20
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02f      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xb8>
 8002a68:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02e      	beq.n	8002ace <HAL_DMA_Abort_IT+0xbe>
 8002a70:	3214      	adds	r2, #20
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02d      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0xc2>
 8002a76:	3214      	adds	r2, #20
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d02c      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0xc6>
 8002a7c:	3214      	adds	r2, #20
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d002      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x78>
 8002a82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a86:	e003      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a8c:	e000      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_DMA_Abort_IT+0x15c>)
 8002a92:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002aa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05e      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x154>
      hdma->XferAbortCallback(hdma);
 8002aa6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e7b9      	b.n	8002a20 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aac:	2210      	movs	r2, #16
 8002aae:	e7ef      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab4:	e7ec      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ab6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aba:	e7e9      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ac0:	e7e6      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ac6:	e7e3      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002acc:	e7e0      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ace:	2201      	movs	r2, #1
 8002ad0:	e7de      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	e7dc      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ada:	e7d9      	b.n	8002a90 <HAL_DMA_Abort_IT+0x80>
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_DMA_Abort_IT+0x160>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d024      	beq.n	8002b2c <HAL_DMA_Abort_IT+0x11c>
 8002ae2:	3214      	adds	r2, #20
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d025      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x124>
 8002ae8:	3214      	adds	r2, #20
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d024      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x128>
 8002aee:	3214      	adds	r2, #20
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d024      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x12e>
 8002af4:	3214      	adds	r2, #20
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d024      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x134>
 8002afa:	3214      	adds	r2, #20
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d024      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x13a>
 8002b00:	3214      	adds	r2, #20
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d024      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x140>
 8002b06:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d023      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x146>
 8002b0e:	3214      	adds	r2, #20
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x14a>
 8002b14:	3214      	adds	r2, #20
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d021      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x14e>
 8002b1a:	3214      	adds	r2, #20
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d002      	beq.n	8002b26 <HAL_DMA_Abort_IT+0x116>
 8002b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b24:	e003      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b2a:	e000      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_DMA_Abort_IT+0x164>)
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e7af      	b.n	8002a94 <HAL_DMA_Abort_IT+0x84>
 8002b34:	2210      	movs	r2, #16
 8002b36:	e7fa      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b3c:	e7f7      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b42:	e7f4      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b48:	e7f1      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b4e:	e7ee      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b54:	e7eb      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b56:	2201      	movs	r2, #1
 8002b58:	e7e9      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	e7e7      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
 8002b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b62:	e7e4      	b.n	8002b2e <HAL_DMA_Abort_IT+0x11e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2000      	movs	r0, #0
 8002b66:	e75b      	b.n	8002a20 <HAL_DMA_Abort_IT+0x10>
 8002b68:	40020080 	.word	0x40020080
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40020008 	.word	0x40020008
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b7a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002b7c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b7e:	6804      	ldr	r4, [r0, #0]
 8002b80:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b82:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b84:	2304      	movs	r3, #4
 8002b86:	408b      	lsls	r3, r1
 8002b88:	4213      	tst	r3, r2
 8002b8a:	f000 809b 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0x14c>
 8002b8e:	f015 0f04 	tst.w	r5, #4
 8002b92:	f000 8097 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0x14c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	f013 0f20 	tst.w	r3, #32
 8002b9c:	d103      	bne.n	8002ba6 <HAL_DMA_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	4aaa      	ldr	r2, [pc, #680]	; (8002e54 <HAL_DMA_IRQHandler+0x2dc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d946      	bls.n	8002c3c <HAL_DMA_IRQHandler+0xc4>
 8002bae:	3a78      	subs	r2, #120	; 0x78
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d024      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x86>
 8002bb4:	3214      	adds	r2, #20
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d028      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x94>
 8002bba:	3214      	adds	r2, #20
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d027      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x98>
 8002bc0:	3214      	adds	r2, #20
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d027      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x9e>
 8002bc6:	3214      	adds	r2, #20
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d027      	beq.n	8002c1c <HAL_DMA_IRQHandler+0xa4>
 8002bcc:	3214      	adds	r2, #20
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xaa>
 8002bd2:	3214      	adds	r2, #20
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d027      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xb0>
 8002bd8:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d026      	beq.n	8002c2e <HAL_DMA_IRQHandler+0xb6>
 8002be0:	3214      	adds	r2, #20
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xba>
 8002be6:	3214      	adds	r2, #20
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d024      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xbe>
 8002bec:	3214      	adds	r2, #20
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d002      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x80>
 8002bf2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bf6:	e003      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002bfe:	2204      	movs	r2, #4
 8002c00:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <HAL_DMA_IRQHandler+0x2e0>)
 8002c02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c06:	b103      	cbz	r3, 8002c0a <HAL_DMA_IRQHandler+0x92>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c08:	4798      	blx	r3
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	e7f7      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c14:	e7f4      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c1a:	e7f1      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c20:	e7ee      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c22:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c26:	e7eb      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c2c:	e7e8      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c2e:	2204      	movs	r2, #4
 8002c30:	e7e6      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	e7e4      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3a:	e7e1      	b.n	8002c00 <HAL_DMA_IRQHandler+0x88>
 8002c3c:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <HAL_DMA_IRQHandler+0x2e4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d024      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x114>
 8002c42:	3214      	adds	r2, #20
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d025      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x11c>
 8002c48:	3214      	adds	r2, #20
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d024      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x120>
 8002c4e:	3214      	adds	r2, #20
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d024      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x126>
 8002c54:	3214      	adds	r2, #20
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d024      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x12c>
 8002c5a:	3214      	adds	r2, #20
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d024      	beq.n	8002caa <HAL_DMA_IRQHandler+0x132>
 8002c60:	3214      	adds	r2, #20
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d024      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x138>
 8002c66:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d023      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x13e>
 8002c6e:	3214      	adds	r2, #20
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_IRQHandler+0x142>
 8002c74:	3214      	adds	r2, #20
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d021      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x146>
 8002c7a:	3214      	adds	r2, #20
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d002      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x10e>
 8002c80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c84:	e003      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_DMA_IRQHandler+0x2e8>)
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e7b7      	b.n	8002c04 <HAL_DMA_IRQHandler+0x8c>
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	e7fa      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9c:	e7f7      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ca2:	e7f4      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002ca4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ca8:	e7f1      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002caa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cae:	e7ee      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cb4:	e7eb      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	e7e9      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	e7e7      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
 8002cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc2:	e7e4      	b.n	8002c8e <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	408b      	lsls	r3, r1
 8002cc8:	4213      	tst	r3, r2
 8002cca:	f000 80a3 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x29c>
 8002cce:	f015 0f02 	tst.w	r5, #2
 8002cd2:	f000 809f 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x29c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f013 0f20 	tst.w	r3, #32
 8002cdc:	d106      	bne.n	8002cec <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f023 030a 	bic.w	r3, r3, #10
 8002ce4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cec:	6803      	ldr	r3, [r0, #0]
 8002cee:	4a59      	ldr	r2, [pc, #356]	; (8002e54 <HAL_DMA_IRQHandler+0x2dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d94b      	bls.n	8002d8c <HAL_DMA_IRQHandler+0x214>
 8002cf4:	3a78      	subs	r2, #120	; 0x78
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d024      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x1cc>
 8002cfa:	3214      	adds	r2, #20
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02d      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x1e4>
 8002d00:	3214      	adds	r2, #20
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x1e8>
 8002d06:	3214      	adds	r2, #20
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d02c      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x1ee>
 8002d0c:	3214      	adds	r2, #20
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1f4>
 8002d12:	3214      	adds	r2, #20
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02c      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x1fa>
 8002d18:	3214      	adds	r2, #20
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02c      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x200>
 8002d1e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x206>
 8002d26:	3214      	adds	r2, #20
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02a      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x20a>
 8002d2c:	3214      	adds	r2, #20
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d029      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x20e>
 8002d32:	3214      	adds	r2, #20
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d002      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x1c6>
 8002d38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d3c:	e003      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d42:	e000      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d44:	2202      	movs	r2, #2
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_DMA_IRQHandler+0x2e0>)
 8002d48:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002d50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f43f af59 	beq.w	8002c0a <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 8002d58:	4798      	blx	r3
 8002d5a:	e756      	b.n	8002c0a <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	e7f2      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d64:	e7ef      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6a:	e7ec      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d70:	e7e9      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d76:	e7e6      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7c:	e7e3      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d7e:	2202      	movs	r2, #2
 8002d80:	e7e1      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d82:	2220      	movs	r2, #32
 8002d84:	e7df      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8a:	e7dc      	b.n	8002d46 <HAL_DMA_IRQHandler+0x1ce>
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_DMA_IRQHandler+0x2e4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d024      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x264>
 8002d92:	3214      	adds	r2, #20
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d025      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x26c>
 8002d98:	3214      	adds	r2, #20
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d024      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x270>
 8002d9e:	3214      	adds	r2, #20
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d024      	beq.n	8002dee <HAL_DMA_IRQHandler+0x276>
 8002da4:	3214      	adds	r2, #20
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d024      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x27c>
 8002daa:	3214      	adds	r2, #20
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d024      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x282>
 8002db0:	3214      	adds	r2, #20
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d024      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x288>
 8002db6:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d023      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x28e>
 8002dbe:	3214      	adds	r2, #20
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x292>
 8002dc4:	3214      	adds	r2, #20
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d021      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x296>
 8002dca:	3214      	adds	r2, #20
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d002      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x25e>
 8002dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd4:	e003      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dda:	e000      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002ddc:	2202      	movs	r2, #2
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_DMA_IRQHandler+0x2e8>)
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	e7b2      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1d2>
 8002de4:	2220      	movs	r2, #32
 8002de6:	e7fa      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	e7f7      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df2:	e7f4      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002df8:	e7f1      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002dfa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002dfe:	e7ee      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e04:	e7eb      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002e06:	2202      	movs	r2, #2
 8002e08:	e7e9      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	e7e7      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
 8002e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e12:	e7e4      	b.n	8002dde <HAL_DMA_IRQHandler+0x266>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e14:	2308      	movs	r3, #8
 8002e16:	fa03 f101 	lsl.w	r1, r3, r1
 8002e1a:	4211      	tst	r1, r2
 8002e1c:	f43f aef5 	beq.w	8002c0a <HAL_DMA_IRQHandler+0x92>
 8002e20:	f015 0f08 	tst.w	r5, #8
 8002e24:	f43f aef1 	beq.w	8002c0a <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	f023 030e 	bic.w	r3, r3, #14
 8002e2e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e30:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e32:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002e34:	2301      	movs	r3, #1
 8002e36:	fa03 f202 	lsl.w	r2, r3, r2
 8002e3a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e3c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002e48:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f43f aedd 	beq.w	8002c0a <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 8002e50:	4798      	blx	r3
  return;
 8002e52:	e6da      	b.n	8002c0a <HAL_DMA_IRQHandler+0x92>
 8002e54:	40020080 	.word	0x40020080
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020008 	.word	0x40020008
 8002e60:	40020000 	.word	0x40020000

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	4680      	mov	r8, r0
 8002e6c:	460f      	mov	r7, r1
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e6e:	4bba      	ldr	r3, [pc, #744]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8002e70:	4298      	cmp	r0, r3
 8002e72:	d01b      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e78:	4298      	cmp	r0, r3
 8002e7a:	d017      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e80:	4298      	cmp	r0, r3
 8002e82:	d013      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e88:	4298      	cmp	r0, r3
 8002e8a:	d00f      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e90:	4298      	cmp	r0, r3
 8002e92:	d00b      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d007      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ea0:	4298      	cmp	r0, r3
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x48>
 8002ea4:	21cd      	movs	r1, #205	; 0xcd
 8002ea6:	48ad      	ldr	r0, [pc, #692]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8002ea8:	f7fe f85b 	bl	8000f62 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	b112      	cbz	r2, 8002eb8 <HAL_GPIO_Init+0x54>
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	b11b      	cbz	r3, 8002ec0 <HAL_GPIO_Init+0x5c>
 8002eb8:	21ce      	movs	r1, #206	; 0xce
 8002eba:	48a8      	ldr	r0, [pc, #672]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8002ebc:	f7fe f851 	bl	8000f62 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d91e      	bls.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ec6:	2b11      	cmp	r3, #17
 8002ec8:	d01c      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d01a      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d018      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ed2:	4aa3      	ldr	r2, [pc, #652]	; (8003160 <HAL_GPIO_Init+0x2fc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d015      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ed8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d011      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ee0:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00d      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ee8:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ef0:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d005      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002ef8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d001      	beq.n	8002f04 <HAL_GPIO_Init+0xa0>
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d103      	bne.n	8002f0c <HAL_GPIO_Init+0xa8>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f04:	f04f 0900 	mov.w	r9, #0
 8002f08:	464e      	mov	r6, r9
 8002f0a:	e0e2      	b.n	80030d2 <HAL_GPIO_Init+0x26e>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f0c:	21cf      	movs	r1, #207	; 0xcf
 8002f0e:	4893      	ldr	r0, [pc, #588]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8002f10:	f7fe f827 	bl	8000f62 <assert_failed>
 8002f14:	e7f6      	b.n	8002f04 <HAL_GPIO_Init+0xa0>
      switch (GPIO_Init->Mode)
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d068      	beq.n	8002fec <HAL_GPIO_Init+0x188>
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d86f      	bhi.n	8003006 <HAL_GPIO_Init+0x1a2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f26:	f8d7 900c 	ldr.w	r9, [r7, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f2a:	2cff      	cmp	r4, #255	; 0xff
 8002f2c:	f200 80a0 	bhi.w	8003070 <HAL_GPIO_Init+0x20c>
 8002f30:	4640      	mov	r0, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002f32:	2cff      	cmp	r4, #255	; 0xff
 8002f34:	f200 809f 	bhi.w	8003076 <HAL_GPIO_Init+0x212>
 8002f38:	00b2      	lsls	r2, r6, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f3a:	6803      	ldr	r3, [r0, #0]
 8002f3c:	210f      	movs	r1, #15
 8002f3e:	4091      	lsls	r1, r2
 8002f40:	ea23 0301 	bic.w	r3, r3, r1
 8002f44:	fa09 f202 	lsl.w	r2, r9, r2
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f52:	f000 80bd 	beq.w	80030d0 <HAL_GPIO_Init+0x26c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <HAL_GPIO_Init+0x300>)
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	619a      	str	r2, [r3, #24]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8002f6a:	08b2      	lsrs	r2, r6, #2
 8002f6c:	1c91      	adds	r1, r2, #2
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_GPIO_Init+0x304>)
 8002f70:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002f74:	f006 0303 	and.w	r3, r6, #3
 8002f78:	0099      	lsls	r1, r3, #2
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	408b      	lsls	r3, r1
 8002f7e:	ea20 0003 	bic.w	r0, r0, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f82:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8002f84:	4598      	cmp	r8, r3
 8002f86:	d07c      	beq.n	8003082 <HAL_GPIO_Init+0x21e>
 8002f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8c:	4598      	cmp	r8, r3
 8002f8e:	f000 80df 	beq.w	8003150 <HAL_GPIO_Init+0x2ec>
 8002f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f96:	4598      	cmp	r8, r3
 8002f98:	f000 80dc 	beq.w	8003154 <HAL_GPIO_Init+0x2f0>
 8002f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa0:	4598      	cmp	r8, r3
 8002fa2:	f000 80e9 	beq.w	8003178 <HAL_GPIO_Init+0x314>
 8002fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002faa:	4598      	cmp	r8, r3
 8002fac:	f000 80e6 	beq.w	800317c <HAL_GPIO_Init+0x318>
 8002fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fb4:	4598      	cmp	r8, r3
 8002fb6:	d062      	beq.n	800307e <HAL_GPIO_Init+0x21a>
 8002fb8:	2306      	movs	r3, #6
 8002fba:	e063      	b.n	8003084 <HAL_GPIO_Init+0x220>
      switch (GPIO_Init->Mode)
 8002fbc:	4a6b      	ldr	r2, [pc, #428]	; (800316c <HAL_GPIO_Init+0x308>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d014      	beq.n	8002fec <HAL_GPIO_Init+0x188>
 8002fc2:	d90b      	bls.n	8002fdc <HAL_GPIO_Init+0x178>
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_GPIO_Init+0x30c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d010      	beq.n	8002fec <HAL_GPIO_Init+0x188>
 8002fca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00c      	beq.n	8002fec <HAL_GPIO_Init+0x188>
 8002fd2:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d1a7      	bne.n	8002f2a <HAL_GPIO_Init+0xc6>
 8002fda:	e007      	b.n	8002fec <HAL_GPIO_Init+0x188>
 8002fdc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x188>
 8002fe4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d19e      	bne.n	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d82d      	bhi.n	800304e <HAL_GPIO_Init+0x1ea>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_GPIO_Init+0x206>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d02e      	beq.n	800305a <HAL_GPIO_Init+0x1f6>
            GPIOx->BRR = ioposition;
 8002ffc:	f8c8 5014 	str.w	r5, [r8, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003000:	f04f 0908 	mov.w	r9, #8
 8003004:	e791      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003006:	21e5      	movs	r1, #229	; 0xe5
 8003008:	4854      	ldr	r0, [pc, #336]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800300a:	f7fd ffaa 	bl	8000f62 <assert_failed>
 800300e:	e78a      	b.n	8002f26 <HAL_GPIO_Init+0xc2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003010:	21ec      	movs	r1, #236	; 0xec
 8003012:	4852      	ldr	r0, [pc, #328]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8003014:	f7fd ffa5 	bl	8000f62 <assert_failed>
 8003018:	e096      	b.n	8003148 <HAL_GPIO_Init+0x2e4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b01      	subs	r3, #1
 800301e:	2b02      	cmp	r3, #2
 8003020:	d803      	bhi.n	800302a <HAL_GPIO_Init+0x1c6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f103 0908 	add.w	r9, r3, #8
          break;
 8003028:	e77f      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800302a:	21f3      	movs	r1, #243	; 0xf3
 800302c:	484b      	ldr	r0, [pc, #300]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800302e:	f7fd ff98 	bl	8000f62 <assert_failed>
 8003032:	e7f6      	b.n	8003022 <HAL_GPIO_Init+0x1be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	2b02      	cmp	r3, #2
 800303a:	d803      	bhi.n	8003044 <HAL_GPIO_Init+0x1e0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f103 090c 	add.w	r9, r3, #12
          break;
 8003042:	e772      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003044:	21fa      	movs	r1, #250	; 0xfa
 8003046:	4845      	ldr	r0, [pc, #276]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8003048:	f7fd ff8b 	bl	8000f62 <assert_failed>
 800304c:	e7f6      	b.n	800303c <HAL_GPIO_Init+0x1d8>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800304e:	f240 1107 	movw	r1, #263	; 0x107
 8003052:	4842      	ldr	r0, [pc, #264]	; (800315c <HAL_GPIO_Init+0x2f8>)
 8003054:	f7fd ff85 	bl	8000f62 <assert_failed>
 8003058:	e7cb      	b.n	8002ff2 <HAL_GPIO_Init+0x18e>
            GPIOx->BSRR = ioposition;
 800305a:	f8c8 5010 	str.w	r5, [r8, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800305e:	f04f 0908 	mov.w	r9, #8
 8003062:	e762      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003064:	f04f 0900 	mov.w	r9, #0
 8003068:	e75f      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306a:	f04f 0904 	mov.w	r9, #4
 800306e:	e75c      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003070:	f108 0004 	add.w	r0, r8, #4
 8003074:	e75d      	b.n	8002f32 <HAL_GPIO_Init+0xce>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003076:	f1a6 0208 	sub.w	r2, r6, #8
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	e75d      	b.n	8002f3a <HAL_GPIO_Init+0xd6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800307e:	2305      	movs	r3, #5
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x220>
 8003082:	2300      	movs	r3, #0
 8003084:	408b      	lsls	r3, r1
 8003086:	4303      	orrs	r3, r0
        AFIO->EXTICR[position >> 2U] = temp;
 8003088:	3202      	adds	r2, #2
 800308a:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_GPIO_Init+0x304>)
 800308c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003096:	d073      	beq.n	8003180 <HAL_GPIO_Init+0x31c>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_GPIO_Init+0x310>)
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	4323      	orrs	r3, r4
 800309e:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030a6:	d071      	beq.n	800318c <HAL_GPIO_Init+0x328>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030a8:	4a32      	ldr	r2, [pc, #200]	; (8003174 <HAL_GPIO_Init+0x310>)
 80030aa:	6853      	ldr	r3, [r2, #4]
 80030ac:	4323      	orrs	r3, r4
 80030ae:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80030b6:	d06f      	beq.n	8003198 <HAL_GPIO_Init+0x334>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030b8:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_GPIO_Init+0x310>)
 80030ba:	6893      	ldr	r3, [r2, #8]
 80030bc:	4323      	orrs	r3, r4
 80030be:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80030c6:	d06d      	beq.n	80031a4 <HAL_GPIO_Init+0x340>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_GPIO_Init+0x310>)
 80030ca:	68d3      	ldr	r3, [r2, #12]
 80030cc:	431c      	orrs	r4, r3
 80030ce:	60d4      	str	r4, [r2, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80030d0:	3601      	adds	r6, #1
 80030d2:	2e0f      	cmp	r6, #15
 80030d4:	d86c      	bhi.n	80031b0 <HAL_GPIO_Init+0x34c>
    ioposition = (0x01U << position);
 80030d6:	2501      	movs	r5, #1
 80030d8:	40b5      	lsls	r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683c      	ldr	r4, [r7, #0]
 80030dc:	402c      	ands	r4, r5
    if (iocurrent == ioposition)
 80030de:	42a5      	cmp	r5, r4
 80030e0:	d1f6      	bne.n	80030d0 <HAL_GPIO_Init+0x26c>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 80030e4:	4598      	cmp	r8, r3
 80030e6:	d01b      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 80030e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ec:	4598      	cmp	r8, r3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 80030f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f4:	4598      	cmp	r8, r3
 80030f6:	d013      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 80030f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fc:	4598      	cmp	r8, r3
 80030fe:	d00f      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 8003100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003104:	4598      	cmp	r8, r3
 8003106:	d00b      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 8003108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800310c:	4598      	cmp	r8, r3
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	4598      	cmp	r8, r3
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x2bc>
 8003118:	21dd      	movs	r1, #221	; 0xdd
 800311a:	4810      	ldr	r0, [pc, #64]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800311c:	f7fd ff21 	bl	8000f62 <assert_failed>
      switch (GPIO_Init->Mode)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b12      	cmp	r3, #18
 8003124:	d086      	beq.n	8003034 <HAL_GPIO_Init+0x1d0>
 8003126:	f63f af49 	bhi.w	8002fbc <HAL_GPIO_Init+0x158>
 800312a:	2b02      	cmp	r3, #2
 800312c:	f43f af75 	beq.w	800301a <HAL_GPIO_Init+0x1b6>
 8003130:	f67f aef1 	bls.w	8002f16 <HAL_GPIO_Init+0xb2>
 8003134:	2b03      	cmp	r3, #3
 8003136:	d095      	beq.n	8003064 <HAL_GPIO_Init+0x200>
 8003138:	2b11      	cmp	r3, #17
 800313a:	f47f aef6 	bne.w	8002f2a <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	2b02      	cmp	r3, #2
 8003144:	f63f af64 	bhi.w	8003010 <HAL_GPIO_Init+0x1ac>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f103 0904 	add.w	r9, r3, #4
          break;
 800314e:	e6ec      	b.n	8002f2a <HAL_GPIO_Init+0xc6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003150:	2301      	movs	r3, #1
 8003152:	e797      	b.n	8003084 <HAL_GPIO_Init+0x220>
 8003154:	2302      	movs	r3, #2
 8003156:	e795      	b.n	8003084 <HAL_GPIO_Init+0x220>
 8003158:	40010800 	.word	0x40010800
 800315c:	0800f060 	.word	0x0800f060
 8003160:	10110000 	.word	0x10110000
 8003164:	40021000 	.word	0x40021000
 8003168:	40010000 	.word	0x40010000
 800316c:	10210000 	.word	0x10210000
 8003170:	10310000 	.word	0x10310000
 8003174:	40010400 	.word	0x40010400
 8003178:	2303      	movs	r3, #3
 800317a:	e783      	b.n	8003084 <HAL_GPIO_Init+0x220>
 800317c:	2304      	movs	r3, #4
 800317e:	e781      	b.n	8003084 <HAL_GPIO_Init+0x220>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_GPIO_Init+0x354>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	ea23 0304 	bic.w	r3, r3, r4
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e789      	b.n	80030a0 <HAL_GPIO_Init+0x23c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_GPIO_Init+0x354>)
 800318e:	6853      	ldr	r3, [r2, #4]
 8003190:	ea23 0304 	bic.w	r3, r3, r4
 8003194:	6053      	str	r3, [r2, #4]
 8003196:	e78b      	b.n	80030b0 <HAL_GPIO_Init+0x24c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003198:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <HAL_GPIO_Init+0x354>)
 800319a:	6893      	ldr	r3, [r2, #8]
 800319c:	ea23 0304 	bic.w	r3, r3, r4
 80031a0:	6093      	str	r3, [r2, #8]
 80031a2:	e78d      	b.n	80030c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_GPIO_Init+0x354>)
 80031a6:	68d3      	ldr	r3, [r2, #12]
 80031a8:	ea23 0404 	bic.w	r4, r3, r4
 80031ac:	60d4      	str	r4, [r2, #12]
 80031ae:	e78f      	b.n	80030d0 <HAL_GPIO_Init+0x26c>
        }
      }
    }
  }
}
 80031b0:	b003      	add	sp, #12
 80031b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031b6:	bf00      	nop
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031c0:	460c      	mov	r4, r1
 80031c2:	b121      	cbz	r1, 80031ce <HAL_GPIO_ReadPin+0x12>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	68ab      	ldr	r3, [r5, #8]
 80031c6:	421c      	tst	r4, r3
 80031c8:	d107      	bne.n	80031da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80031cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031ce:	f240 11c3 	movw	r1, #451	; 0x1c3
 80031d2:	4803      	ldr	r0, [pc, #12]	; (80031e0 <HAL_GPIO_ReadPin+0x24>)
 80031d4:	f7fd fec5 	bl	8000f62 <assert_failed>
 80031d8:	e7f4      	b.n	80031c4 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_SET;
 80031da:	2001      	movs	r0, #1
 80031dc:	e7f6      	b.n	80031cc <HAL_GPIO_ReadPin+0x10>
 80031de:	bf00      	nop
 80031e0:	0800f060 	.word	0x0800f060

080031e4 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d06f      	beq.n	80032c8 <HAL_PCD_Init+0xe4>
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	b087      	sub	sp, #28
 80031ec:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80031ee:	6802      	ldr	r2, [r0, #0]
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_PCD_Init+0xe8>)
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d003      	beq.n	80031fe <HAL_PCD_Init+0x1a>
 80031f6:	219f      	movs	r1, #159	; 0x9f
 80031f8:	4835      	ldr	r0, [pc, #212]	; (80032d0 <HAL_PCD_Init+0xec>)
 80031fa:	f7fd feb2 	bl	8000f62 <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80031fe:	f894 3429 	ldrb.w	r3, [r4, #1065]	; 0x429
 8003202:	b1c3      	cbz	r3, 8003236 <HAL_PCD_Init+0x52>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003204:	2303      	movs	r3, #3
 8003206:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	f003 f8a1 	bl	8006352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003210:	4625      	mov	r5, r4
 8003212:	f855 7b10 	ldr.w	r7, [r5], #16
 8003216:	466e      	mov	r6, sp
 8003218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800321a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	6033      	str	r3, [r6, #0]
 8003220:	1d23      	adds	r3, r4, #4
 8003222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003224:	4638      	mov	r0, r7
 8003226:	f003 f885 	bl	8006334 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800322a:	2100      	movs	r1, #0
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	f003 f89a 	bl	8006366 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8003232:	2300      	movs	r3, #0
 8003234:	e016      	b.n	8003264 <HAL_PCD_Init+0x80>
    hpcd->Lock = HAL_UNLOCKED;
 8003236:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 800323a:	4620      	mov	r0, r4
 800323c:	f00a fab0 	bl	800d7a0 <HAL_PCD_MspInit>
 8003240:	e7e0      	b.n	8003204 <HAL_PCD_Init+0x20>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8003242:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003246:	2101      	movs	r1, #1
 8003248:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 800324c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8003250:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8003252:	2100      	movs	r1, #0
 8003254:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8003258:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800325a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	0152      	lsls	r2, r2, #5
 8003260:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8003262:	3301      	adds	r3, #1
 8003264:	2b0e      	cmp	r3, #14
 8003266:	d9ec      	bls.n	8003242 <HAL_PCD_Init+0x5e>
  }
 
  for (index = 0U; index < 15U ; index++)
 8003268:	2300      	movs	r3, #0
 800326a:	e012      	b.n	8003292 <HAL_PCD_Init+0xae>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800326c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003270:	2100      	movs	r1, #0
 8003272:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 8003276:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800327a:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800327c:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8003280:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8003284:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8003288:	f103 0212 	add.w	r2, r3, #18
 800328c:	0152      	lsls	r2, r2, #5
 800328e:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8003290:	3301      	adds	r3, #1
 8003292:	2b0e      	cmp	r3, #14
 8003294:	d9ea      	bls.n	800326c <HAL_PCD_Init+0x88>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8003296:	4625      	mov	r5, r4
 8003298:	f855 7b10 	ldr.w	r7, [r5], #16
 800329c:	466e      	mov	r6, sp
 800329e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	6033      	str	r3, [r6, #0]
 80032a6:	1d23      	adds	r3, r4, #4
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	4638      	mov	r0, r7
 80032ac:	f003 f85d 	bl	800636a <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 80032b0:	2500      	movs	r5, #0
 80032b2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	f003 fb6c 	bl	800699a <USB_DevDisconnect>
  return HAL_OK;
 80032c2:	4628      	mov	r0, r5
}
 80032c4:	b007      	add	sp, #28
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
}
 80032ca:	4770      	bx	lr
 80032cc:	40005c00 	.word	0x40005c00
 80032d0:	0800f09c 	.word	0x0800f09c

080032d4 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80032d4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d010      	beq.n	80032fe <HAL_PCD_Start+0x2a>
{
 80032dc:	b510      	push	{r4, lr}
 80032de:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80032e0:	2101      	movs	r1, #1
 80032e2:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80032e6:	f00a fb66 	bl	800d9b6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	f003 fb53 	bl	8006996 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	f003 f826 	bl	8006342 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80032fc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80032fe:	2002      	movs	r0, #2
}
 8003300:	4770      	bx	lr

08003302 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8003302:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8003306:	2b01      	cmp	r3, #1
 8003308:	d00d      	beq.n	8003326 <HAL_PCD_SetAddress+0x24>
{
 800330a:	b510      	push	{r4, lr}
 800330c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800330e:	2301      	movs	r3, #1
 8003310:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8003314:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8003318:	6800      	ldr	r0, [r0, #0]
 800331a:	f003 fb36 	bl	800698a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800331e:	2000      	movs	r0, #0
 8003320:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8003324:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003326:	2002      	movs	r0, #2
}
 8003328:	4770      	bx	lr

0800332a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800332a:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800332c:	b24d      	sxtb	r5, r1
 800332e:	2d00      	cmp	r5, #0
 8003330:	db1c      	blt.n	800336c <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003332:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003336:	0164      	lsls	r4, r4, #5
 8003338:	f504 740a 	add.w	r4, r4, #552	; 0x228
 800333c:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 800333e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003342:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003344:	0fed      	lsrs	r5, r5, #31
 8003346:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8003348:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 800334a:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 800334c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8003350:	2b01      	cmp	r3, #1
 8003352:	d011      	beq.n	8003378 <HAL_PCD_EP_Open+0x4e>
 8003354:	4605      	mov	r5, r0
 8003356:	2301      	movs	r3, #1
 8003358:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800335c:	4621      	mov	r1, r4
 800335e:	6800      	ldr	r0, [r0, #0]
 8003360:	f003 f81d 	bl	800639e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003364:	2000      	movs	r0, #0
 8003366:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 800336a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800336c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003370:	0164      	lsls	r4, r4, #5
 8003372:	3428      	adds	r4, #40	; 0x28
 8003374:	4404      	add	r4, r0
 8003376:	e7e2      	b.n	800333e <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 8003378:	2002      	movs	r0, #2
 800337a:	e7f6      	b.n	800336a <HAL_PCD_EP_Open+0x40>

0800337c <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800337c:	b24a      	sxtb	r2, r1
 800337e:	2a00      	cmp	r2, #0
 8003380:	db1b      	blt.n	80033ba <HAL_PCD_EP_Close+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003382:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003386:	015b      	lsls	r3, r3, #5
 8003388:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800338c:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 800338e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003392:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003394:	0fd2      	lsrs	r2, r2, #31
 8003396:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8003398:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 800339c:	2a01      	cmp	r2, #1
 800339e:	d012      	beq.n	80033c6 <HAL_PCD_EP_Close+0x4a>
{  
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80033a4:	2201      	movs	r2, #1
 80033a6:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80033aa:	4619      	mov	r1, r3
 80033ac:	6800      	ldr	r0, [r0, #0]
 80033ae:	f003 f98a 	bl	80066c6 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80033b8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80033ba:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80033be:	015b      	lsls	r3, r3, #5
 80033c0:	3328      	adds	r3, #40	; 0x28
 80033c2:	4403      	add	r3, r0
 80033c4:	e7e3      	b.n	800338e <HAL_PCD_EP_Close+0x12>
  __HAL_LOCK(hpcd);
 80033c6:	2002      	movs	r0, #2
}
 80033c8:	4770      	bx	lr

080033ca <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80033d0:	016c      	lsls	r4, r5, #5
 80033d2:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80033d6:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80033d8:	4404      	add	r4, r0
 80033da:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80033de:	f105 0212 	add.w	r2, r5, #18
 80033e2:	0152      	lsls	r2, r2, #5
 80033e4:	1886      	adds	r6, r0, r2
 80033e6:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80033ec:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 80033f0:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 80033f4:	b125      	cbz	r5, 8003400 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80033f6:	6800      	ldr	r0, [r0, #0]
 80033f8:	f003 faeb 	bl	80069d2 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80033fc:	2000      	movs	r0, #0
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8003400:	6800      	ldr	r0, [r0, #0]
 8003402:	f003 fae6 	bl	80069d2 <USB_EPStartXfer>
 8003406:	e7f9      	b.n	80033fc <HAL_PCD_EP_Receive+0x32>

08003408 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8003408:	f001 010f 	and.w	r1, r1, #15
 800340c:	3112      	adds	r1, #18
 800340e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8003412:	8888      	ldrh	r0, [r1, #4]
 8003414:	4770      	bx	lr

08003416 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003416:	b570      	push	{r4, r5, r6, lr}
 8003418:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800341c:	016c      	lsls	r4, r5, #5
 800341e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003422:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003424:	4404      	add	r4, r0
 8003426:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8003428:	1caa      	adds	r2, r5, #2
 800342a:	0152      	lsls	r2, r2, #5
 800342c:	1886      	adds	r6, r0, r2
 800342e:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 8003434:	2301      	movs	r3, #1
 8003436:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 800343a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 800343e:	b125      	cbz	r5, 800344a <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8003440:	6800      	ldr	r0, [r0, #0]
 8003442:	f003 fac6 	bl	80069d2 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003446:	2000      	movs	r0, #0
 8003448:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	f003 fac1 	bl	80069d2 <USB_EPStartXfer>
 8003450:	e7f9      	b.n	8003446 <HAL_PCD_EP_Transmit+0x30>

08003452 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003452:	b570      	push	{r4, r5, r6, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8003458:	2300      	movs	r3, #0
 800345a:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 800345e:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003468:	b29b      	uxth	r3, r3
 800346a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800346e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003472:	f000 820d 	beq.w	8003890 <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003476:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 800347a:	f015 050f 	ands.w	r5, r5, #15
 800347e:	f040 80c2 	bne.w	8003606 <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8003482:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003486:	f013 0f10 	tst.w	r3, #16
 800348a:	d050      	beq.n	800352e <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800348c:	8803      	ldrh	r3, [r0, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003494:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003498:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800349c:	d179      	bne.n	8003592 <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800349e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80034a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80034a6:	d0dc      	beq.n	8003462 <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034a8:	8803      	ldrh	r3, [r0, #0]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	051b      	lsls	r3, r3, #20
 80034b0:	0d1b      	lsrs	r3, r3, #20
 80034b2:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034ba:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80034be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034c2:	3306      	adds	r3, #6
 80034c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80034cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d0:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d17c      	bne.n	80035d2 <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034d8:	2100      	movs	r1, #0
 80034da:	4620      	mov	r0, r4
 80034dc:	f00a f988 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80034e6:	3206      	adds	r2, #6
 80034e8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80034ec:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 80034f0:	293e      	cmp	r1, #62	; 0x3e
 80034f2:	d97c      	bls.n	80035ee <PCD_EP_ISR_Handler+0x19c>
 80034f4:	f3c1 124f 	ubfx	r2, r1, #5, #16
 80034f8:	f011 0f1f 	tst.w	r1, #31
 80034fc:	d101      	bne.n	8003502 <PCD_EP_ISR_Handler+0xb0>
 80034fe:	3a01      	subs	r2, #1
 8003500:	b292      	uxth	r2, r2
 8003502:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003506:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800350a:	b292      	uxth	r2, r2
 800350c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	8813      	ldrh	r3, [r2, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352a:	8013      	strh	r3, [r2, #0]
 800352c:	e799      	b.n	8003462 <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800352e:	8803      	ldrh	r3, [r0, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	b29b      	uxth	r3, r3
 800353c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003544:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8003548:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800354c:	3302      	adds	r3, #2
 800354e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003552:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800355c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800355e:	4413      	add	r3, r2
 8003560:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003562:	2100      	movs	r1, #0
 8003564:	4620      	mov	r0, r4
 8003566:	f00a f94d 	bl	800d804 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800356a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	f43f af77 	beq.w	8003462 <PCD_EP_ISR_Handler+0x10>
 8003574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	f47f af73 	bne.w	8003462 <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800357c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003586:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003590:	e767      	b.n	8003462 <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003592:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003596:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800359a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800359e:	3306      	adds	r3, #6
 80035a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80035a4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80035a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ac:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80035b0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80035b4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80035b8:	f003 fb68 	bl	8006c8c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	8813      	ldrh	r3, [r2, #0]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	051b      	lsls	r3, r3, #20
 80035c6:	0d1b      	lsrs	r3, r3, #20
 80035c8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80035ca:	4620      	mov	r0, r4
 80035cc:	f00a f908 	bl	800d7e0 <HAL_PCD_SetupStageCallback>
 80035d0:	e747      	b.n	8003462 <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80035d2:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80035d6:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80035da:	f003 fb57 	bl	8006c8c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80035de:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 80035e2:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80035e6:	4413      	add	r3, r2
 80035e8:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 80035ec:	e774      	b.n	80034d8 <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035ee:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80035f2:	f011 0f01 	tst.w	r1, #1
 80035f6:	d001      	beq.n	80035fc <PCD_EP_ISR_Handler+0x1aa>
 80035f8:	3201      	adds	r2, #1
 80035fa:	b292      	uxth	r2, r2
 80035fc:	0292      	lsls	r2, r2, #10
 80035fe:	b292      	uxth	r2, r2
 8003600:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003604:	e784      	b.n	8003510 <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003606:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003610:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003614:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003618:	d135      	bne.n	8003686 <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800361a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800361e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003622:	f43f af1e 	beq.w	8003462 <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	b29b      	uxth	r3, r3
 8003638:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800363c:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003640:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003644:	2b00      	cmp	r3, #0
 8003646:	f040 80b2 	bne.w	80037ae <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003650:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003654:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800365c:	3302      	adds	r3, #2
 800365e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003662:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366a:	1caa      	adds	r2, r5, #2
 800366c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8003670:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80c6 	beq.w	8003804 <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003678:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800367c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800367e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003680:	f003 f992 	bl	80069a8 <USB_WritePMA>
 8003684:	e0be      	b.n	8003804 <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003686:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	051b      	lsls	r3, r3, #20
 8003690:	0d1b      	lsrs	r3, r3, #20
 8003692:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8003696:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800369a:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 800369e:	b9d3      	cbnz	r3, 80036d6 <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80036a6:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80036aa:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 80036ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036b2:	3306      	adds	r3, #6
 80036b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036b8:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80036bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80036c0:	b386      	cbz	r6, 8003724 <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036c2:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80036c6:	4633      	mov	r3, r6
 80036c8:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80036cc:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80036d0:	f003 fadc 	bl	8006c8c <USB_ReadPMA>
 80036d4:	e026      	b.n	8003724 <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80036dc:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 80036e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80036e8:	d042      	beq.n	8003770 <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80036ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036f2:	3302      	adds	r3, #2
 80036f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036f8:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80036fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8003700:	bb66      	cbnz	r6, 800375c <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003708:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 800370c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003714:	051b      	lsls	r3, r3, #20
 8003716:	0d1b      	lsrs	r3, r3, #20
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003720:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 8003724:	f105 0312 	add.w	r3, r5, #18
 8003728:	015b      	lsls	r3, r3, #5
 800372a:	18e1      	adds	r1, r4, r3
 800372c:	684a      	ldr	r2, [r1, #4]
 800372e:	4432      	add	r2, r6
 8003730:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 8003732:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003736:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 800373a:	4432      	add	r2, r6
 800373c:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003740:	58e3      	ldr	r3, [r4, r3]
 8003742:	b11b      	cbz	r3, 800374c <PCD_EP_ISR_Handler+0x2fa>
 8003744:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8003748:	428e      	cmp	r6, r1
 800374a:	d228      	bcs.n	800379e <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800374c:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003750:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8003754:	4620      	mov	r0, r4
 8003756:	f00a f84b 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
 800375a:	e75e      	b.n	800361a <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800375c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003760:	4633      	mov	r3, r6
 8003762:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8003766:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800376a:	f003 fa8f 	bl	8006c8c <USB_ReadPMA>
 800376e:	e7c8      	b.n	8003702 <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003770:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003778:	3306      	adds	r3, #6
 800377a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800377e:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8003782:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8003786:	2e00      	cmp	r6, #0
 8003788:	d0bb      	beq.n	8003702 <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800378a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800378e:	4633      	mov	r3, r6
 8003790:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8003794:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8003798:	f003 fa78 	bl	8006c8c <USB_ReadPMA>
 800379c:	e7b1      	b.n	8003702 <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800379e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80037a2:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff fe0f 	bl	80033ca <HAL_PCD_EP_Receive>
 80037ac:	e735      	b.n	800361a <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80037b4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80037b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037c0:	d046      	beq.n	8003850 <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037ca:	3302      	adds	r3, #2
 80037cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80037d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	1caa      	adds	r2, r5, #2
 80037da:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 80037de:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 80037e0:	bb7b      	cbnz	r3, 8003842 <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80037e8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80037ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80037f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f4:	051b      	lsls	r3, r3, #20
 80037f6:	0d1b      	lsrs	r3, r3, #20
 80037f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800380a:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800380e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8003812:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003816:	3302      	adds	r3, #2
 8003818:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800381c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003820:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003824:	1cab      	adds	r3, r5, #2
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	18e1      	adds	r1, r4, r3
 800382a:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 800382c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800382e:	440a      	add	r2, r1
 8003830:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003832:	58e3      	ldr	r3, [r4, r3]
 8003834:	bb23      	cbnz	r3, 8003880 <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003836:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800383a:	4620      	mov	r0, r4
 800383c:	f009 ffe2 	bl	800d804 <HAL_PCD_DataInStageCallback>
 8003840:	e60f      	b.n	8003462 <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003842:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003846:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8003848:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800384a:	f003 f8ad 	bl	80069a8 <USB_WritePMA>
 800384e:	e7c8      	b.n	80037e2 <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003850:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003858:	3306      	adds	r3, #6
 800385a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800385e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003866:	1caa      	adds	r2, r5, #2
 8003868:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800386c:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0b7      	beq.n	80037e2 <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003872:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003876:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8003878:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800387a:	f003 f895 	bl	80069a8 <USB_WritePMA>
 800387e:	e7b0      	b.n	80037e2 <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003880:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8003884:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff fdc4 	bl	8003416 <HAL_PCD_EP_Transmit>
 800388e:	e5e8      	b.n	8003462 <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 8003890:	2000      	movs	r0, #0
 8003892:	b002      	add	sp, #8
 8003894:	bd70      	pop	{r4, r5, r6, pc}

08003896 <HAL_PCD_IRQHandler>:
{ 
 8003896:	b510      	push	{r4, lr}
 8003898:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	f003 f87f 	bl	800699e <USB_ReadInterrupts>
 80038a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80038a4:	d145      	bne.n	8003932 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	f003 f879 	bl	800699e <USB_ReadInterrupts>
 80038ac:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80038b0:	d143      	bne.n	800393a <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f003 f873 	bl	800699e <USB_ReadInterrupts>
 80038b8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80038bc:	d008      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80038d0:	6820      	ldr	r0, [r4, #0]
 80038d2:	f003 f864 	bl	800699e <USB_ReadInterrupts>
 80038d6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80038da:	d008      	beq.n	80038ee <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	f003 f855 	bl	800699e <USB_ReadInterrupts>
 80038f4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80038f8:	d130      	bne.n	800395c <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	f003 f84f 	bl	800699e <USB_ReadInterrupts>
 8003900:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003904:	d149      	bne.n	800399a <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	f003 f849 	bl	800699e <USB_ReadInterrupts>
 800390c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003910:	d164      	bne.n	80039dc <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	f003 f843 	bl	800699e <USB_ReadInterrupts>
 8003918:	f410 7f80 	tst.w	r0, #256	; 0x100
 800391c:	d008      	beq.n	8003930 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003924:	b29b      	uxth	r3, r3
 8003926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392a:	b29b      	uxth	r3, r3
 800392c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003930:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff fd8d 	bl	8003452 <PCD_EP_ISR_Handler>
 8003938:	e7b5      	b.n	80038a6 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003940:	b29b      	uxth	r3, r3
 8003942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003946:	b29b      	uxth	r3, r3
 8003948:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800394c:	4620      	mov	r0, r4
 800394e:	f009 ff68 	bl	800d822 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8003952:	2100      	movs	r1, #0
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fcd4 	bl	8003302 <HAL_PCD_SetAddress>
 800395a:	e7aa      	b.n	80038b2 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003962:	b29b      	uxth	r3, r3
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	b29b      	uxth	r3, r3
 800396a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003974:	b29b      	uxth	r3, r3
 8003976:	f023 0308 	bic.w	r3, r3, #8
 800397a:	b29b      	uxth	r3, r3
 800397c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003980:	4620      	mov	r0, r4
 8003982:	f009 ff6f 	bl	800d864 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003992:	b29b      	uxth	r3, r3
 8003994:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003998:	e7af      	b.n	80038fa <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80039a0:	f043 0308 	orr.w	r3, r3, #8
 80039a4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	f002 ffe8 	bl	800699e <USB_ReadInterrupts>
 80039ce:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80039d2:	d198      	bne.n	8003906 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f009 ff35 	bl	800d844 <HAL_PCD_SuspendCallback>
 80039da:	e794      	b.n	8003906 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f009 ff11 	bl	800d816 <HAL_PCD_SOFCallback>
 80039f4:	e78d      	b.n	8003912 <HAL_PCD_IRQHandler+0x7c>

080039f6 <HAL_PCD_EP_SetStall>:
{
 80039f6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80039f8:	b24a      	sxtb	r2, r1
 80039fa:	2a00      	cmp	r2, #0
 80039fc:	db1b      	blt.n	8003a36 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 80039fe:	014b      	lsls	r3, r1, #5
 8003a00:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003a04:	4403      	add	r3, r0
  ep->is_stall = 1U;
 8003a06:	2401      	movs	r4, #1
 8003a08:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003a0a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003a0e:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003a10:	0fd2      	lsrs	r2, r2, #31
 8003a12:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8003a14:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8003a18:	42a2      	cmp	r2, r4
 8003a1a:	d018      	beq.n	8003a4e <HAL_PCD_EP_SetStall+0x58>
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8003a24:	4619      	mov	r1, r3
 8003a26:	6800      	ldr	r0, [r0, #0]
 8003a28:	f002 ff2f 	bl	800688a <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8003a2c:	b14d      	cbz	r5, 8003a42 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003a34:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003a36:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003a3a:	015b      	lsls	r3, r3, #5
 8003a3c:	3328      	adds	r3, #40	; 0x28
 8003a3e:	4403      	add	r3, r0
 8003a40:	e7e1      	b.n	8003a06 <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a42:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	f002 ffac 	bl	80069a4 <USB_EP0_OutStart>
 8003a4c:	e7ef      	b.n	8003a2e <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 8003a4e:	2002      	movs	r0, #2
 8003a50:	e7f0      	b.n	8003a34 <HAL_PCD_EP_SetStall+0x3e>

08003a52 <HAL_PCD_EP_ClrStall>:
{
 8003a52:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8003a54:	b24a      	sxtb	r2, r1
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	db1a      	blt.n	8003a90 <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 8003a5a:	014b      	lsls	r3, r1, #5
 8003a5c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003a60:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8003a62:	2400      	movs	r4, #0
 8003a64:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003a66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003a6a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003a6c:	0fd2      	lsrs	r2, r2, #31
 8003a6e:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8003a70:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8003a74:	2a01      	cmp	r2, #1
 8003a76:	d011      	beq.n	8003a9c <HAL_PCD_EP_ClrStall+0x4a>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8003a80:	4619      	mov	r1, r3
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	f002 ff38 	bl	80068f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003a8e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003a90:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003a94:	015b      	lsls	r3, r3, #5
 8003a96:	3328      	adds	r3, #40	; 0x28
 8003a98:	4403      	add	r3, r0
 8003a9a:	e7e2      	b.n	8003a62 <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	e7f6      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0x3c>

08003aa0 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8003aa0:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d014      	beq.n	8003ad2 <HAL_PCD_EP_Flush+0x32>
{
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003aac:	2301      	movs	r3, #1
 8003aae:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  if ((ep_addr & 0x80U) == 0x80U)
 8003ab2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ab6:	d106      	bne.n	8003ac6 <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 8003ab8:	6800      	ldr	r0, [r0, #0]
 8003aba:	f002 fc6e 	bl	800639a <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd); 
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003ac4:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8003ac6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	f002 fc63 	bl	8006396 <USB_FlushTxFifo>
 8003ad0:	e7f5      	b.n	8003abe <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8003ad2:	2002      	movs	r0, #2
}
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8003ad6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ada:	d00c      	beq.n	8003af6 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003adc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003ae0:	0149      	lsls	r1, r1, #5
 8003ae2:	3128      	adds	r1, #40	; 0x28
 8003ae4:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ae6:	b15a      	cbz	r2, 8003b00 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8003ae8:	2201      	movs	r2, #1
 8003aea:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8003aec:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8003af2:	2000      	movs	r0, #0
 8003af4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003af6:	0149      	lsls	r1, r1, #5
 8003af8:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8003afc:	4401      	add	r1, r0
 8003afe:	e7f2      	b.n	8003ae6 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8003b00:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8003b02:	808b      	strh	r3, [r1, #4]
 8003b04:	e7f5      	b.n	8003af2 <HAL_PCDEx_PMAConfig+0x1c>
	...

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003b08:	4b01      	ldr	r3, [pc, #4]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x8>)
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b16:	f7ff fff7 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b22:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b24:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003b26:	40d8      	lsrs	r0, r3
 8003b28:	bd08      	pop	{r3, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	0800efe4 	.word	0x0800efe4

08003b34 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003b38:	4604      	mov	r4, r0
 8003b3a:	b1d0      	cbz	r0, 8003b72 <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != NULL);
 8003b3c:	b1fd      	cbz	r5, 8003b7e <HAL_RCC_GetClockConfig+0x4a>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b3e:	230f      	movs	r3, #15
 8003b40:	6023      	str	r3, [r4, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_GetClockConfig+0x58>)
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	f002 0203 	and.w	r2, r2, #3
 8003b4a:	6062      	str	r2, [r4, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003b52:	60a2      	str	r2, [r4, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003b5a:	60e2      	str	r2, [r4, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	08db      	lsrs	r3, r3, #3
 8003b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b64:	6123      	str	r3, [r4, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	602b      	str	r3, [r5, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8003b70:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != NULL);
 8003b72:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8003b76:	4807      	ldr	r0, [pc, #28]	; (8003b94 <HAL_RCC_GetClockConfig+0x60>)
 8003b78:	f7fd f9f3 	bl	8000f62 <assert_failed>
 8003b7c:	e7de      	b.n	8003b3c <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != NULL);
 8003b7e:	f240 5131 	movw	r1, #1329	; 0x531
 8003b82:	4804      	ldr	r0, [pc, #16]	; (8003b94 <HAL_RCC_GetClockConfig+0x60>)
 8003b84:	f7fd f9ed 	bl	8000f62 <assert_failed>
 8003b88:	e7d9      	b.n	8003b3e <HAL_RCC_GetClockConfig+0xa>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40022000 	.word	0x40022000
 8003b94:	0800f0d4 	.word	0x0800f0d4

08003b98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ba2:	6800      	ldr	r0, [r0, #0]
 8003ba4:	f002 f8b6 	bl	8005d14 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ba8:	4605      	mov	r5, r0
 8003baa:	b110      	cbz	r0, 8003bb2 <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8003bac:	4628      	mov	r0, r5
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	f002 f8c1 	bl	8005d3a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bb8:	4606      	mov	r6, r0
 8003bba:	b310      	cbz	r0, 8003c02 <SD_PowerON+0x6a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 8003bc0:	462e      	mov	r6, r5
    while(validvoltage == 0U)
 8003bc2:	b9de      	cbnz	r6, 8003bfc <SD_PowerON+0x64>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	9201      	str	r2, [sp, #4]
 8003bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d044      	beq.n	8003c5c <SD_PowerON+0xc4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	f002 f8c7 	bl	8005d68 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d141      	bne.n	8003c62 <SD_PowerON+0xca>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003bde:	2100      	movs	r1, #0
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	f002 f8d9 	bl	8005d98 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003be6:	4606      	mov	r6, r0
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d13d      	bne.n	8003c68 <SD_PowerON+0xd0>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bec:	2100      	movs	r1, #0
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	f001 fe6e 	bl	80058d0 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bf4:	0fc0      	lsrs	r0, r0, #31
 8003bf6:	d0e4      	beq.n	8003bc2 <SD_PowerON+0x2a>
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	e7e2      	b.n	8003bc2 <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6463      	str	r3, [r4, #68]	; 0x44
 8003c00:	e7d4      	b.n	8003bac <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003c02:	2301      	movs	r3, #1
 8003c04:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 8003c06:	4605      	mov	r5, r0
    while(validvoltage == 0U)
 8003c08:	b9ed      	cbnz	r5, 8003c46 <SD_PowerON+0xae>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	9201      	str	r2, [sp, #4]
 8003c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d02a      	beq.n	8003c6e <SD_PowerON+0xd6>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6820      	ldr	r0, [r4, #0]
 8003c1c:	f002 f8a4 	bl	8005d68 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003c20:	4605      	mov	r5, r0
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1c2      	bne.n	8003bac <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003c26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	f002 f8b4 	bl	8005d98 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003c30:	4605      	mov	r5, r0
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d1ba      	bne.n	8003bac <SD_PowerON+0x14>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c36:	2100      	movs	r1, #0
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	f001 fe49 	bl	80058d0 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003c3e:	0fc3      	lsrs	r3, r0, #31
 8003c40:	d0e2      	beq.n	8003c08 <SD_PowerON+0x70>
 8003c42:	461d      	mov	r5, r3
 8003c44:	e7e0      	b.n	8003c08 <SD_PowerON+0x70>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003c46:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003c4a:	d103      	bne.n	8003c54 <SD_PowerON+0xbc>
      hsd->SdCard.CardType = CARD_SDSC;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003c50:	4635      	mov	r5, r6
 8003c52:	e7ab      	b.n	8003bac <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c54:	2301      	movs	r3, #1
 8003c56:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003c58:	4635      	mov	r5, r6
 8003c5a:	e7a7      	b.n	8003bac <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003c5c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003c60:	e7a4      	b.n	8003bac <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c62:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003c66:	e7a1      	b.n	8003bac <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003c6c:	e79e      	b.n	8003bac <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003c6e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003c72:	e79b      	b.n	8003bac <SD_PowerON+0x14>

08003c74 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003c78:	6a86      	ldr	r6, [r0, #40]	; 0x28
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003c7a:	2400      	movs	r4, #0
 8003c7c:	e005      	b.n	8003c8a <SD_Read_IT+0x16>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003c7e:	6828      	ldr	r0, [r5, #0]
 8003c80:	f001 fdce 	bl	8005820 <SDIO_ReadFIFO>
 8003c84:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for(count = 0U; count < 8U; count++)
 8003c88:	3401      	adds	r4, #1
 8003c8a:	2c07      	cmp	r4, #7
 8003c8c:	d9f7      	bls.n	8003c7e <SD_Read_IT+0xa>
  }
  
  hsd->pRxBuffPtr += 8U;
 8003c8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c90:	3320      	adds	r3, #32
 8003c92:	62ab      	str	r3, [r5, #40]	; 0x28
  
  return HAL_OK;
}
 8003c94:	2000      	movs	r0, #0
 8003c96:	bd70      	pop	{r4, r5, r6, pc}

08003c98 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003c9c:	6a06      	ldr	r6, [r0, #32]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	e005      	b.n	8003cae <SD_Write_IT+0x16>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003ca2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8003ca6:	6828      	ldr	r0, [r5, #0]
 8003ca8:	f001 fdbd 	bl	8005826 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003cac:	3401      	adds	r4, #1
 8003cae:	2c07      	cmp	r4, #7
 8003cb0:	d9f7      	bls.n	8003ca2 <SD_Write_IT+0xa>
  }
  
  hsd->pTxBuffPtr += 8U;
 8003cb2:	6a2b      	ldr	r3, [r5, #32]
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	622b      	str	r3, [r5, #32]
  
  return HAL_OK;
}
 8003cb8:	2000      	movs	r0, #0
 8003cba:	bd70      	pop	{r4, r5, r6, pc}

08003cbc <SD_FindSCR>:
{
 8003cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc0:	b088      	sub	sp, #32
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8003cc6:	f7fe fd41 	bl	800274c <HAL_GetTick>
 8003cca:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	f001 ff73 	bl	8005bc0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8003cda:	4605      	mov	r5, r0
 8003cdc:	b118      	cbz	r0, 8003ce6 <SD_FindSCR+0x2a>
}
 8003cde:	4628      	mov	r0, r5
 8003ce0:	b008      	add	sp, #32
 8003ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ce6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ce8:	0409      	lsls	r1, r1, #16
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	f002 f83c 	bl	8005d68 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d1f3      	bne.n	8003cde <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003d00:	2330      	movs	r3, #48	; 0x30
 8003d02:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d04:	2302      	movs	r3, #2
 8003d06:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8003d10:	a902      	add	r1, sp, #8
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	f001 fef2 	bl	8005afc <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	f002 f86e 	bl	8005dfa <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8003d1e:	4605      	mov	r5, r0
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d1dc      	bne.n	8003cde <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8003d24:	4680      	mov	r8, r0
 8003d26:	e005      	b.n	8003d34 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003d28:	f7fe fd10 	bl	800274c <HAL_GetTick>
 8003d2c:	1b80      	subs	r0, r0, r6
 8003d2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d32:	d043      	beq.n	8003dbc <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003d38:	f240 432a 	movw	r3, #1066	; 0x42a
 8003d3c:	421a      	tst	r2, r3
 8003d3e:	d10a      	bne.n	8003d56 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003d40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d42:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003d46:	d0ef      	beq.n	8003d28 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003d48:	f001 fd6a 	bl	8005820 <SDIO_ReadFIFO>
 8003d4c:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8003d50:	f108 0801 	add.w	r8, r8, #1
 8003d54:	e7e8      	b.n	8003d28 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d58:	f013 0f08 	tst.w	r3, #8
 8003d5c:	d125      	bne.n	8003daa <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003d5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d60:	f013 0f02 	tst.w	r3, #2
 8003d64:	d124      	bne.n	8003db0 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003d66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d68:	f013 0f20 	tst.w	r3, #32
 8003d6c:	d123      	bne.n	8003db6 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d6e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003d72:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003d74:	9a00      	ldr	r2, [sp, #0]
 8003d76:	0213      	lsls	r3, r2, #8
 8003d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003d80:	0a11      	lsrs	r1, r2, #8
 8003d82:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003d86:	430b      	orrs	r3, r1
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003d88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003d8c:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003d8e:	9a01      	ldr	r2, [sp, #4]
 8003d90:	0213      	lsls	r3, r2, #8
 8003d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003d9a:	0a11      	lsrs	r1, r2, #8
 8003d9c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003da0:	430b      	orrs	r3, r1
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003da2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003da6:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 8003da8:	e799      	b.n	8003cde <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003daa:	2508      	movs	r5, #8
 8003dac:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003dae:	e796      	b.n	8003cde <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003db0:	2502      	movs	r5, #2
 8003db2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003db4:	e793      	b.n	8003cde <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003db6:	2520      	movs	r5, #32
 8003db8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003dba:	e790      	b.n	8003cde <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8003dbc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003dc0:	e78d      	b.n	8003cde <SD_FindSCR+0x22>

08003dc2 <SD_WideBus_Enable>:
{
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003dc8:	2100      	movs	r1, #0
 8003dca:	9100      	str	r1, [sp, #0]
 8003dcc:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003dce:	6800      	ldr	r0, [r0, #0]
 8003dd0:	f001 fd7e 	bl	80058d0 <SDIO_GetResponse>
 8003dd4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003dd8:	d116      	bne.n	8003e08 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003dda:	4669      	mov	r1, sp
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ff6d 	bl	8003cbc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003de2:	4603      	mov	r3, r0
 8003de4:	b990      	cbnz	r0, 8003e0c <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003dec:	d011      	beq.n	8003e12 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003df0:	0409      	lsls	r1, r1, #16
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	f001 ffb8 	bl	8005d68 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8003df8:	4603      	mov	r3, r0
 8003dfa:	b938      	cbnz	r0, 8003e0c <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	6820      	ldr	r0, [r4, #0]
 8003e00:	f001 ffe3 	bl	8005dca <SDMMC_CmdBusWidth>
 8003e04:	4603      	mov	r3, r0
 8003e06:	e001      	b.n	8003e0c <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e16:	e7f9      	b.n	8003e0c <SD_WideBus_Enable+0x4a>

08003e18 <SD_WideBus_Disable>:
{
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003e1e:	2100      	movs	r1, #0
 8003e20:	9100      	str	r1, [sp, #0]
 8003e22:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	f001 fd53 	bl	80058d0 <SDIO_GetResponse>
 8003e2a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003e2e:	d116      	bne.n	8003e5e <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003e30:	4669      	mov	r1, sp
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff ff42 	bl	8003cbc <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b990      	cbnz	r0, 8003e62 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e3c:	9b01      	ldr	r3, [sp, #4]
 8003e3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e42:	d011      	beq.n	8003e68 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e44:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e46:	0409      	lsls	r1, r1, #16
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	f001 ff8d 	bl	8005d68 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8003e4e:	4603      	mov	r3, r0
 8003e50:	b938      	cbnz	r0, 8003e62 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003e52:	2100      	movs	r1, #0
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	f001 ffb8 	bl	8005dca <SDMMC_CmdBusWidth>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	e001      	b.n	8003e62 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	b002      	add	sp, #8
 8003e66:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e6c:	e7f9      	b.n	8003e62 <SD_WideBus_Disable+0x4a>

08003e6e <SD_SendStatus>:
{
 8003e6e:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8003e70:	b181      	cbz	r1, 8003e94 <SD_SendStatus+0x26>
 8003e72:	460d      	mov	r5, r1
 8003e74:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e76:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003e78:	0409      	lsls	r1, r1, #16
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	f002 f817 	bl	8005eae <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8003e80:	4606      	mov	r6, r0
 8003e82:	b108      	cbz	r0, 8003e88 <SD_SendStatus+0x1a>
}
 8003e84:	4630      	mov	r0, r6
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	f001 fd20 	bl	80058d0 <SDIO_GetResponse>
 8003e90:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8003e92:	e7f7      	b.n	8003e84 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8003e94:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8003e98:	e7f4      	b.n	8003e84 <SD_SendStatus+0x16>

08003e9a <HAL_SD_ReadBlocks>:
{
 8003e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4616      	mov	r6, r2
 8003ea6:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7fe fc50 	bl	800274c <HAL_GetTick>
  if(NULL == pData)
 8003eac:	b16d      	cbz	r5, 8003eca <HAL_SD_ReadBlocks+0x30>
 8003eae:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8003eb0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ec0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ec2:	2001      	movs	r0, #1
}
 8003ec4:	b007      	add	sp, #28
 8003ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	e7f6      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003eda:	19f3      	adds	r3, r6, r7
 8003edc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d81b      	bhi.n	8003f1a <HAL_SD_ReadBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d000      	beq.n	8003ef6 <HAL_SD_ReadBlocks+0x5c>
      BlockAdd *= 512U;
 8003ef4:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003efa:	6820      	ldr	r0, [r4, #0]
 8003efc:	f001 fe60 	bl	8005bc0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f00:	4603      	mov	r3, r0
 8003f02:	b180      	cbz	r0, 8003f26 <HAL_SD_ReadBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8003f04:	6822      	ldr	r2, [r4, #0]
 8003f06:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003f0a:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003f0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f0e:	4318      	orrs	r0, r3
 8003f10:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f12:	2001      	movs	r0, #1
 8003f14:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003f18:	e7d4      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f20:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
 8003f24:	e7ce      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003f2c:	027b      	lsls	r3, r7, #9
 8003f2e:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003f30:	2390      	movs	r3, #144	; 0x90
 8003f32:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003f34:	2302      	movs	r3, #2
 8003f36:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8003f40:	4669      	mov	r1, sp
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	f001 fdda 	bl	8005afc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003f48:	2f01      	cmp	r7, #1
 8003f4a:	d915      	bls.n	8003f78 <HAL_SD_ReadBlocks+0xde>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003f50:	4631      	mov	r1, r6
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	f001 fe64 	bl	8005c20 <SDMMC_CmdReadMultiBlock>
 8003f58:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5a:	f1b9 0f00 	cmp.w	r9, #0
 8003f5e:	d025      	beq.n	8003fac <HAL_SD_ReadBlocks+0x112>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f6a:	ea43 0309 	orr.w	r3, r3, r9
 8003f6e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f70:	2001      	movs	r0, #1
 8003f72:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003f76:	e7a5      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	f001 fe36 	bl	8005bf0 <SDMMC_CmdReadSingleBlock>
 8003f84:	4681      	mov	r9, r0
 8003f86:	e7e8      	b.n	8003f5a <HAL_SD_ReadBlocks+0xc0>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	f001 fc49 	bl	8005820 <SDIO_ReadFIFO>
 8003f8e:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
        for(count = 0U; count < 8U; count++)
 8003f92:	3601      	adds	r6, #1
 8003f94:	2e07      	cmp	r6, #7
 8003f96:	d9f7      	bls.n	8003f88 <HAL_SD_ReadBlocks+0xee>
        tempbuff += 8U;
 8003f98:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f9c:	b193      	cbz	r3, 8003fc4 <HAL_SD_ReadBlocks+0x12a>
 8003f9e:	f7fe fbd5 	bl	800274c <HAL_GetTick>
 8003fa2:	eba0 0008 	sub.w	r0, r0, r8
 8003fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fa8:	4298      	cmp	r0, r3
 8003faa:	d20b      	bcs.n	8003fc4 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003fb0:	f240 332a 	movw	r3, #810	; 0x32a
 8003fb4:	421a      	tst	r2, r3
 8003fb6:	d112      	bne.n	8003fde <HAL_SD_ReadBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003fb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003fbe:	d0ec      	beq.n	8003f9a <HAL_SD_ReadBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 8003fc0:	464e      	mov	r6, r9
 8003fc2:	e7e7      	b.n	8003f94 <HAL_SD_ReadBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003fda:	2003      	movs	r0, #3
 8003fdc:	e772      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003fde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fe0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fe4:	d007      	beq.n	8003ff6 <HAL_SD_ReadBlocks+0x15c>
 8003fe6:	2f01      	cmp	r7, #1
 8003fe8:	d905      	bls.n	8003ff6 <HAL_SD_ReadBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d002      	beq.n	8003ff6 <HAL_SD_ReadBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff0:	f001 fe5e 	bl	8005cb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ff4:	bb50      	cbnz	r0, 800404c <HAL_SD_ReadBlocks+0x1b2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	f012 0f08 	tst.w	r2, #8
 8003ffe:	d130      	bne.n	8004062 <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	f012 0f02 	tst.w	r2, #2
 8004006:	d137      	bne.n	8004078 <HAL_SD_ReadBlocks+0x1de>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400a:	f012 0f20 	tst.w	r2, #32
 800400e:	d13e      	bne.n	800408e <HAL_SD_ReadBlocks+0x1f4>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004014:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004018:	d044      	beq.n	80040a4 <HAL_SD_ReadBlocks+0x20a>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 800401a:	f001 fc01 	bl	8005820 <SDIO_ReadFIFO>
 800401e:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004024:	b133      	cbz	r3, 8004034 <HAL_SD_ReadBlocks+0x19a>
 8004026:	f7fe fb91 	bl	800274c <HAL_GetTick>
 800402a:	eba0 0008 	sub.w	r0, r0, r8
 800402e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004030:	4298      	cmp	r0, r3
 8004032:	d3ed      	bcc.n	8004010 <HAL_SD_ReadBlocks+0x176>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800403c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800403e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004042:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004044:	2001      	movs	r0, #1
 8004046:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 800404a:	e73b      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004052:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004056:	4303      	orrs	r3, r0
 8004058:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800405a:	2001      	movs	r0, #1
 800405c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 8004060:	e730      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004062:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800406a:	f043 0308 	orr.w	r3, r3, #8
 800406e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004070:	2001      	movs	r0, #1
 8004072:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004076:	e725      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004078:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800407e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004086:	2001      	movs	r0, #1
 8004088:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800408c:	e71a      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800408e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004096:	f043 0320 	orr.w	r3, r3, #32
 800409a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800409c:	2001      	movs	r0, #1
 800409e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80040a2:	e70f      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040a4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80040a8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80040b0:	2000      	movs	r0, #0
 80040b2:	e707      	b.n	8003ec4 <HAL_SD_ReadBlocks+0x2a>

080040b4 <HAL_SD_WriteBlocks>:
{
 80040b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040b8:	b087      	sub	sp, #28
 80040ba:	4604      	mov	r4, r0
 80040bc:	460d      	mov	r5, r1
 80040be:	4616      	mov	r6, r2
 80040c0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7fe fb43 	bl	800274c <HAL_GetTick>
  if(NULL == pData)
 80040c6:	b16d      	cbz	r5, 80040e4 <HAL_SD_WriteBlocks+0x30>
 80040c8:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80040ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d00d      	beq.n	80040f0 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80040d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040da:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80040dc:	2001      	movs	r0, #1
}
 80040de:	b007      	add	sp, #28
 80040e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040ea:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80040ec:	2001      	movs	r0, #1
 80040ee:	e7f6      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040f4:	19f3      	adds	r3, r6, r7
 80040f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d828      	bhi.n	800414e <HAL_SD_WriteBlocks+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 80040fc:	2303      	movs	r3, #3
 80040fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800410a:	2b01      	cmp	r3, #1
 800410c:	d000      	beq.n	8004110 <HAL_SD_WriteBlocks+0x5c>
      BlockAdd *= 512U;
 800410e:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	f001 fd53 	bl	8005bc0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800411a:	4603      	mov	r3, r0
 800411c:	b9e8      	cbnz	r0, 800415a <HAL_SD_WriteBlocks+0xa6>
    if(NumberOfBlocks > 1U)
 800411e:	2f01      	cmp	r7, #1
 8004120:	d926      	bls.n	8004170 <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004122:	2320      	movs	r3, #32
 8004124:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004126:	4631      	mov	r1, r6
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	f001 fda9 	bl	8005c80 <SDMMC_CmdWriteMultiBlock>
 800412e:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8004130:	f1b9 0f00 	cmp.w	r9, #0
 8004134:	d024      	beq.n	8004180 <HAL_SD_WriteBlocks+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800413e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004140:	ea43 0309 	orr.w	r3, r3, r9
 8004144:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004146:	2001      	movs	r0, #1
 8004148:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800414c:	e7c7      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800414e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004154:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004156:	2001      	movs	r0, #1
 8004158:	e7c1      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004160:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004162:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004164:	4318      	orrs	r0, r3
 8004166:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004168:	2001      	movs	r0, #1
 800416a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800416e:	e7b6      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004170:	2310      	movs	r3, #16
 8004172:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004174:	4631      	mov	r1, r6
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	f001 fd6a 	bl	8005c50 <SDMMC_CmdWriteSingleBlock>
 800417c:	4681      	mov	r9, r0
 800417e:	e7d7      	b.n	8004130 <HAL_SD_WriteBlocks+0x7c>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004186:	027b      	lsls	r3, r7, #9
 8004188:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800418a:	2390      	movs	r3, #144	; 0x90
 800418c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004192:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004194:	2301      	movs	r3, #1
 8004196:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8004198:	4669      	mov	r1, sp
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	f001 fcae 	bl	8005afc <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041a0:	e011      	b.n	80041c6 <HAL_SD_WriteBlocks+0x112>
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80041a2:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	f001 fb3d 	bl	8005826 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80041ac:	3601      	adds	r6, #1
 80041ae:	2e07      	cmp	r6, #7
 80041b0:	d9f7      	bls.n	80041a2 <HAL_SD_WriteBlocks+0xee>
        tempbuff += 8U;
 80041b2:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80041b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b6:	b193      	cbz	r3, 80041de <HAL_SD_WriteBlocks+0x12a>
 80041b8:	f7fe fac8 	bl	800274c <HAL_GetTick>
 80041bc:	eba0 0008 	sub.w	r0, r0, r8
 80041c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c2:	4298      	cmp	r0, r3
 80041c4:	d20b      	bcs.n	80041de <HAL_SD_WriteBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80041ca:	f240 331a 	movw	r3, #794	; 0x31a
 80041ce:	421a      	tst	r2, r3
 80041d0:	d112      	bne.n	80041f8 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80041d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041d4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80041d8:	d0ec      	beq.n	80041b4 <HAL_SD_WriteBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 80041da:	464e      	mov	r6, r9
 80041dc:	e7e7      	b.n	80041ae <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80041e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041e8:	ea43 0309 	orr.w	r3, r3, r9
 80041ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80041f4:	2003      	movs	r0, #3
 80041f6:	e772      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80041f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041fe:	d007      	beq.n	8004210 <HAL_SD_WriteBlocks+0x15c>
 8004200:	2f01      	cmp	r7, #1
 8004202:	d905      	bls.n	8004210 <HAL_SD_WriteBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004204:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004206:	2b03      	cmp	r3, #3
 8004208:	d002      	beq.n	8004210 <HAL_SD_WriteBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800420a:	f001 fd51 	bl	8005cb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800420e:	b9b8      	cbnz	r0, 8004240 <HAL_SD_WriteBlocks+0x18c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004214:	f012 0f08 	tst.w	r2, #8
 8004218:	d11d      	bne.n	8004256 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	f012 0f02 	tst.w	r2, #2
 8004220:	d124      	bne.n	800426c <HAL_SD_WriteBlocks+0x1b8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004224:	f012 0f10 	tst.w	r2, #16
 8004228:	d02b      	beq.n	8004282 <HAL_SD_WriteBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800422a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004232:	f043 0310 	orr.w	r3, r3, #16
 8004236:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004238:	2001      	movs	r0, #1
 800423a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800423e:	e74e      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8004246:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800424a:	4303      	orrs	r3, r0
 800424c:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800424e:	2001      	movs	r0, #1
 8004250:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 8004254:	e743      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004256:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800425c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800425e:	f043 0308 	orr.w	r3, r3, #8
 8004262:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004264:	2001      	movs	r0, #1
 8004266:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800426a:	e738      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800426c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8004272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800427a:	2001      	movs	r0, #1
 800427c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004280:	e72d      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004282:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004288:	2301      	movs	r3, #1
 800428a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800428e:	2000      	movs	r0, #0
 8004290:	e725      	b.n	80040de <HAL_SD_WriteBlocks+0x2a>

08004292 <HAL_SD_ErrorCallback>:
}
 8004292:	4770      	bx	lr

08004294 <HAL_SD_GetCardCSD>:
{
 8004294:	b430      	push	{r4, r5}
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004296:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8004298:	0f9a      	lsrs	r2, r3, #30
 800429a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800429c:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80042a0:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80042a2:	f3c3 6301 	ubfx	r3, r3, #24, #2
 80042a6:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80042a8:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80042ac:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80042ae:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80042b2:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80042b4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80042b8:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80042ba:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80042c2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80042c6:	88cc      	ldrh	r4, [r1, #6]
 80042c8:	f3c3 1203 	ubfx	r2, r3, #4, #4
 80042cc:	4322      	orrs	r2, r4
 80042ce:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80042d6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80042da:	09da      	lsrs	r2, r3, #7
 80042dc:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80042de:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80042e2:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80042e4:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80042e8:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80042ea:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80042ee:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80042f0:	2200      	movs	r2, #0
 80042f2:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80042f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	f040 8092 	bne.w	8004420 <HAL_SD_GetCardCSD+0x18c>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004302:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004304:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2U;
 8004306:	690a      	ldr	r2, [r1, #16]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004312:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8004314:	690a      	ldr	r2, [r1, #16]
 8004316:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800431a:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800431c:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8004320:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8004322:	f3c3 6302 	ubfx	r3, r3, #24, #3
 8004326:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004328:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800432a:	f3c2 4307 	ubfx	r3, r2, #16, #8
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800432e:	f3c2 5442 	ubfx	r4, r2, #21, #3
 8004332:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004334:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8004338:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f003 0306 	and.w	r3, r3, #6
 8004340:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8004342:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8004344:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8004348:	7e0c      	ldrb	r4, [r1, #24]
 800434a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800434e:	4322      	orrs	r2, r4
 8004350:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004352:	690a      	ldr	r2, [r1, #16]
 8004354:	3201      	adds	r2, #1
 8004356:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8004358:	7e0c      	ldrb	r4, [r1, #24]
 800435a:	3402      	adds	r4, #2
 800435c:	fa02 f404 	lsl.w	r4, r2, r4
 8004360:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8004362:	7a0a      	ldrb	r2, [r1, #8]
 8004364:	b2d5      	uxtb	r5, r2
 8004366:	2201      	movs	r2, #1
 8004368:	40aa      	lsls	r2, r5
 800436a:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800436c:	0a52      	lsrs	r2, r2, #9
 800436e:	fb02 f204 	mul.w	r2, r2, r4
 8004372:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004378:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800437a:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800437e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004386:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8004388:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800438a:	7e8a      	ldrb	r2, [r1, #26]
 800438c:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8004390:	4322      	orrs	r2, r4
 8004392:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004398:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800439a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800439c:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800439e:	0fdc      	lsrs	r4, r3, #31
 80043a0:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80043a2:	f3c3 7441 	ubfx	r4, r3, #29, #2
 80043a6:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80043a8:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80043ac:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80043ae:	0093      	lsls	r3, r2, #2
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80043b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80043b8:	7fca      	ldrb	r2, [r1, #31]
 80043ba:	f3c3 5481 	ubfx	r4, r3, #22, #2
 80043be:	4322      	orrs	r2, r4
 80043c0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80043c2:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80043c6:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80043ca:	2200      	movs	r2, #0
 80043cc:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80043d0:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80043d4:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80043d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80043da:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 80043de:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80043e2:	f3c3 3480 	ubfx	r4, r3, #14, #1
 80043e6:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80043ea:	f3c3 3440 	ubfx	r4, r3, #13, #1
 80043ee:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80043f2:	f3c3 3400 	ubfx	r4, r3, #12, #1
 80043f6:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80043fa:	f3c3 2481 	ubfx	r4, r3, #10, #2
 80043fe:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8004402:	f3c3 2301 	ubfx	r3, r3, #8, #2
 8004406:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800440a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800440c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004410:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8004414:	2301      	movs	r3, #1
 8004416:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 800441a:	4610      	mov	r0, r2
}
 800441c:	bc30      	pop	{r4, r5}
 800441e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004420:	2a01      	cmp	r2, #1
 8004422:	d00c      	beq.n	800443e <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8004424:	6803      	ldr	r3, [r0, #0]
 8004426:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800442c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004434:	2201      	movs	r2, #1
 8004436:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 800443a:	4610      	mov	r0, r2
 800443c:	e7ee      	b.n	800441c <HAL_SD_GetCardCSD+0x188>
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800443e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004446:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004448:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8U);
 800444c:	690b      	ldr	r3, [r1, #16]
 800444e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004452:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8004454:	690a      	ldr	r2, [r1, #16]
 8004456:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]
 800445e:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004462:	690a      	ldr	r2, [r1, #16]
 8004464:	3201      	adds	r2, #1
 8004466:	0292      	lsls	r2, r2, #10
 8004468:	6542      	str	r2, [r0, #84]	; 0x54
 800446a:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800446c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004470:	6582      	str	r2, [r0, #88]	; 0x58
 8004472:	6602      	str	r2, [r0, #96]	; 0x60
 8004474:	e781      	b.n	800437a <HAL_SD_GetCardCSD+0xe6>

08004476 <SD_InitCard>:
{
 8004476:	b570      	push	{r4, r5, r6, lr}
 8004478:	b090      	sub	sp, #64	; 0x40
 800447a:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f001 f9d8 	bl	8005838 <SDIO_GetPowerState>
 8004488:	2800      	cmp	r0, #0
 800448a:	d06a      	beq.n	8004562 <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800448c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800448e:	2b03      	cmp	r3, #3
 8004490:	d143      	bne.n	800451a <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004494:	2b03      	cmp	r3, #3
 8004496:	d15b      	bne.n	8004550 <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004498:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800449a:	2b03      	cmp	r3, #3
 800449c:	d01d      	beq.n	80044da <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 800449e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80044a2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044a4:	0409      	lsls	r1, r1, #16
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f001 fcd4 	bl	8005e54 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ac:	4605      	mov	r5, r0
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d159      	bne.n	8004566 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044b2:	2100      	movs	r1, #0
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	f001 fa0b 	bl	80058d0 <SDIO_GetResponse>
 80044ba:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044bc:	2104      	movs	r1, #4
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	f001 fa06 	bl	80058d0 <SDIO_GetResponse>
 80044c4:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044c6:	2108      	movs	r1, #8
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	f001 fa01 	bl	80058d0 <SDIO_GetResponse>
 80044ce:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044d0:	210c      	movs	r1, #12
 80044d2:	6820      	ldr	r0, [r4, #0]
 80044d4:	f001 f9fc 	bl	80058d0 <SDIO_GetResponse>
 80044d8:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80044da:	2104      	movs	r1, #4
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	f001 f9f7 	bl	80058d0 <SDIO_GetResponse>
 80044e2:	0d00      	lsrs	r0, r0, #20
 80044e4:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80044e6:	a905      	add	r1, sp, #20
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff fed3 	bl	8004294 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80044ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80044f0:	0412      	lsls	r2, r2, #16
 80044f2:	2300      	movs	r3, #0
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	f001 fbf5 	bl	8005ce4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80044fa:	4605      	mov	r5, r0
 80044fc:	bb98      	cbnz	r0, 8004566 <SD_InitCard+0xf0>
  SDIO_Init(hsd->Instance, hsd->Init);
 80044fe:	4623      	mov	r3, r4
 8004500:	f853 6b10 	ldr.w	r6, [r3], #16
 8004504:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004508:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800450c:	3404      	adds	r4, #4
 800450e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004512:	4630      	mov	r0, r6
 8004514:	f001 f918 	bl	8005748 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8004518:	e025      	b.n	8004566 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	f001 fc85 	bl	8005e2a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004520:	4605      	mov	r5, r0
 8004522:	bb00      	cbnz	r0, 8004566 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004524:	2100      	movs	r1, #0
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	f001 f9d2 	bl	80058d0 <SDIO_GetResponse>
 800452c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800452e:	2104      	movs	r1, #4
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	f001 f9cd 	bl	80058d0 <SDIO_GetResponse>
 8004536:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004538:	2108      	movs	r1, #8
 800453a:	6820      	ldr	r0, [r4, #0]
 800453c:	f001 f9c8 	bl	80058d0 <SDIO_GetResponse>
 8004540:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004542:	210c      	movs	r1, #12
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	f001 f9c3 	bl	80058d0 <SDIO_GetResponse>
 800454a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800454e:	e7a0      	b.n	8004492 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004550:	f10d 0112 	add.w	r1, sp, #18
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f001 fc92 	bl	8005e7e <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800455a:	4605      	mov	r5, r0
 800455c:	2800      	cmp	r0, #0
 800455e:	d09b      	beq.n	8004498 <SD_InitCard+0x22>
 8004560:	e001      	b.n	8004566 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004562:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8004566:	4628      	mov	r0, r5
 8004568:	b010      	add	sp, #64	; 0x40
 800456a:	bd70      	pop	{r4, r5, r6, pc}

0800456c <HAL_SD_InitCard>:
{
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004572:	2400      	movs	r4, #0
 8004574:	9404      	str	r4, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004576:	9405      	str	r4, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004578:	9406      	str	r4, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800457a:	9407      	str	r4, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800457c:	9408      	str	r4, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800457e:	23c3      	movs	r3, #195	; 0xc3
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8004582:	ab0a      	add	r3, sp, #40	; 0x28
 8004584:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004588:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800458c:	ab04      	add	r3, sp, #16
 800458e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004590:	6828      	ldr	r0, [r5, #0]
 8004592:	f001 f8d9 	bl	8005748 <SDIO_Init>
  __HAL_SD_DISABLE(hsd); 
 8004596:	4e12      	ldr	r6, [pc, #72]	; (80045e0 <HAL_SD_InitCard+0x74>)
 8004598:	6034      	str	r4, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 800459a:	6828      	ldr	r0, [r5, #0]
 800459c:	f001 f948 	bl	8005830 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80045a0:	2301      	movs	r3, #1
 80045a2:	6033      	str	r3, [r6, #0]
  HAL_Delay(2U);
 80045a4:	2002      	movs	r0, #2
 80045a6:	f7fe f8d7 	bl	8002758 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff faf4 	bl	8003b98 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80045b0:	b140      	cbz	r0, 80045c4 <HAL_SD_InitCard+0x58>
 80045b2:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 80045b4:	2001      	movs	r0, #1
 80045b6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80045ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80045bc:	4313      	orrs	r3, r2
 80045be:	63ab      	str	r3, [r5, #56]	; 0x38
}
 80045c0:	b00a      	add	sp, #40	; 0x28
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SD_InitCard(hsd);
 80045c4:	4628      	mov	r0, r5
 80045c6:	f7ff ff56 	bl	8004476 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ca:	4602      	mov	r2, r0
 80045cc:	b130      	cbz	r0, 80045dc <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 80045ce:	2001      	movs	r0, #1
 80045d0:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80045d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80045d6:	4313      	orrs	r3, r2
 80045d8:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 80045da:	e7f1      	b.n	80045c0 <HAL_SD_InitCard+0x54>
  return HAL_OK;
 80045dc:	2000      	movs	r0, #0
 80045de:	e7ef      	b.n	80045c0 <HAL_SD_InitCard+0x54>
 80045e0:	423000a0 	.word	0x423000a0

080045e4 <HAL_SD_Init>:
  if(hsd == NULL)
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d062      	beq.n	80046ae <HAL_SD_Init+0xca>
{
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4604      	mov	r4, r0
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_SD_Init+0xd0>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d004      	beq.n	80045fe <HAL_SD_Init+0x1a>
 80045f4:	f240 1137 	movw	r1, #311	; 0x137
 80045f8:	482f      	ldr	r0, [pc, #188]	; (80046b8 <HAL_SD_Init+0xd4>)
 80045fa:	f7fc fcb2 	bl	8000f62 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	b113      	cbz	r3, 8004608 <HAL_SD_Init+0x24>
 8004602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004606:	d129      	bne.n	800465c <HAL_SD_Init+0x78>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	b113      	cbz	r3, 8004612 <HAL_SD_Init+0x2e>
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d12a      	bne.n	8004668 <HAL_SD_Init+0x84>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	b113      	cbz	r3, 800461c <HAL_SD_Init+0x38>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d12b      	bne.n	8004674 <HAL_SD_Init+0x90>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	b12b      	cbz	r3, 800462c <HAL_SD_Init+0x48>
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d002      	beq.n	800462c <HAL_SD_Init+0x48>
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d129      	bne.n	8004680 <HAL_SD_Init+0x9c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800462c:	6963      	ldr	r3, [r4, #20]
 800462e:	b113      	cbz	r3, 8004636 <HAL_SD_Init+0x52>
 8004630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004634:	d12a      	bne.n	800468c <HAL_SD_Init+0xa8>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	2bff      	cmp	r3, #255	; 0xff
 800463a:	d82d      	bhi.n	8004698 <HAL_SD_Init+0xb4>
  if(hsd->State == HAL_SD_STATE_RESET)
 800463c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004640:	b383      	cbz	r3, 80046a4 <HAL_SD_Init+0xc0>
  hsd->State = HAL_SD_STATE_BUSY;
 8004642:	2303      	movs	r3, #3
 8004644:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ff8f 	bl	800456c <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800464e:	2000      	movs	r0, #0
 8004650:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004652:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004654:	2301      	movs	r3, #1
 8004656:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800465a:	bd10      	pop	{r4, pc}
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 800465c:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004660:	4815      	ldr	r0, [pc, #84]	; (80046b8 <HAL_SD_Init+0xd4>)
 8004662:	f7fc fc7e 	bl	8000f62 <assert_failed>
 8004666:	e7cf      	b.n	8004608 <HAL_SD_Init+0x24>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8004668:	f240 1139 	movw	r1, #313	; 0x139
 800466c:	4812      	ldr	r0, [pc, #72]	; (80046b8 <HAL_SD_Init+0xd4>)
 800466e:	f7fc fc78 	bl	8000f62 <assert_failed>
 8004672:	e7ce      	b.n	8004612 <HAL_SD_Init+0x2e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004674:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8004678:	480f      	ldr	r0, [pc, #60]	; (80046b8 <HAL_SD_Init+0xd4>)
 800467a:	f7fc fc72 	bl	8000f62 <assert_failed>
 800467e:	e7cd      	b.n	800461c <HAL_SD_Init+0x38>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 8004680:	f240 113b 	movw	r1, #315	; 0x13b
 8004684:	480c      	ldr	r0, [pc, #48]	; (80046b8 <HAL_SD_Init+0xd4>)
 8004686:	f7fc fc6c 	bl	8000f62 <assert_failed>
 800468a:	e7cf      	b.n	800462c <HAL_SD_Init+0x48>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800468c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004690:	4809      	ldr	r0, [pc, #36]	; (80046b8 <HAL_SD_Init+0xd4>)
 8004692:	f7fc fc66 	bl	8000f62 <assert_failed>
 8004696:	e7ce      	b.n	8004636 <HAL_SD_Init+0x52>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 8004698:	f240 113d 	movw	r1, #317	; 0x13d
 800469c:	4806      	ldr	r0, [pc, #24]	; (80046b8 <HAL_SD_Init+0xd4>)
 800469e:	f7fc fc60 	bl	8000f62 <assert_failed>
 80046a2:	e7cb      	b.n	800463c <HAL_SD_Init+0x58>
    hsd->Lock = HAL_UNLOCKED;
 80046a4:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7fc fcb0 	bl	800100c <HAL_SD_MspInit>
 80046ac:	e7c9      	b.n	8004642 <HAL_SD_Init+0x5e>
    return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40018000 	.word	0x40018000
 80046b8:	0800f10c 	.word	0x0800f10c

080046bc <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80046bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046be:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80046c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80046c2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80046c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80046c6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80046c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80046ca:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80046cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80046ce:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80046d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80046d2:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80046d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80046d6:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80046d8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80046da:	61cb      	str	r3, [r1, #28]
}
 80046dc:	2000      	movs	r0, #0
 80046de:	4770      	bx	lr

080046e0 <HAL_SD_ConfigWideBusOperation>:
{
 80046e0:	b530      	push	{r4, r5, lr}
 80046e2:	b08b      	sub	sp, #44	; 0x2c
 80046e4:	4604      	mov	r4, r0
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 80046e6:	460d      	mov	r5, r1
 80046e8:	b129      	cbz	r1, 80046f6 <HAL_SD_ConfigWideBusOperation+0x16>
 80046ea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80046ee:	d002      	beq.n	80046f6 <HAL_SD_ConfigWideBusOperation+0x16>
 80046f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80046f4:	d111      	bne.n	800471a <HAL_SD_ConfigWideBusOperation+0x3a>
  hsd->State = HAL_SD_STATE_BUSY;
 80046f6:	2303      	movs	r3, #3
 80046f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80046fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d024      	beq.n	800474c <HAL_SD_ConfigWideBusOperation+0x6c>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004702:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004706:	d00e      	beq.n	8004726 <HAL_SD_ConfigWideBusOperation+0x46>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004708:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800470c:	d010      	beq.n	8004730 <HAL_SD_ConfigWideBusOperation+0x50>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800470e:	b1b5      	cbz	r5, 800473e <HAL_SD_ConfigWideBusOperation+0x5e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004716:	63a3      	str	r3, [r4, #56]	; 0x38
 8004718:	e01c      	b.n	8004754 <HAL_SD_ConfigWideBusOperation+0x74>
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 800471a:	f240 71ba 	movw	r1, #1978	; 0x7ba
 800471e:	4820      	ldr	r0, [pc, #128]	; (80047a0 <HAL_SD_ConfigWideBusOperation+0xc0>)
 8004720:	f7fc fc1f 	bl	8000f62 <assert_failed>
 8004724:	e7e7      	b.n	80046f6 <HAL_SD_ConfigWideBusOperation+0x16>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	63a3      	str	r3, [r4, #56]	; 0x38
 800472e:	e011      	b.n	8004754 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Enable(hsd);
 8004730:	4620      	mov	r0, r4
 8004732:	f7ff fb46 	bl	8003dc2 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8004736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004738:	4318      	orrs	r0, r3
 800473a:	63a0      	str	r0, [r4, #56]	; 0x38
 800473c:	e00a      	b.n	8004754 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Disable(hsd);
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff fb6a 	bl	8003e18 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8004744:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004746:	4318      	orrs	r0, r3
 8004748:	63a0      	str	r0, [r4, #56]	; 0x38
 800474a:	e003      	b.n	8004754 <HAL_SD_ConfigWideBusOperation+0x74>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800474c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004756:	b143      	cbz	r3, 800476a <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004760:	2001      	movs	r0, #1
 8004762:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8004766:	b00b      	add	sp, #44	; 0x2c
 8004768:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8004776:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004778:	6963      	ldr	r3, [r4, #20]
 800477a:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800477c:	69a3      	ldr	r3, [r4, #24]
 800477e:	9309      	str	r3, [sp, #36]	; 0x24
    SDIO_Init(hsd->Instance, Init);
 8004780:	ab0a      	add	r3, sp, #40	; 0x28
 8004782:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004786:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800478a:	ab04      	add	r3, sp, #16
 800478c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	f000 ffda 	bl	8005748 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004794:	2301      	movs	r3, #1
 8004796:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800479a:	2000      	movs	r0, #0
 800479c:	e7e3      	b.n	8004766 <HAL_SD_ConfigWideBusOperation+0x86>
 800479e:	bf00      	nop
 80047a0:	0800f10c 	.word	0x0800f10c

080047a4 <HAL_SD_GetCardState>:
{
 80047a4:	b510      	push	{r4, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80047aa:	a902      	add	r1, sp, #8
 80047ac:	2300      	movs	r3, #0
 80047ae:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 80047b2:	f7ff fb5c 	bl	8003e6e <SD_SendStatus>
  if(errorstate != HAL_OK)
 80047b6:	b118      	cbz	r0, 80047c0 <HAL_SD_GetCardState+0x1c>
 80047b8:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 80047ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047bc:	4318      	orrs	r0, r3
 80047be:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80047c0:	9801      	ldr	r0, [sp, #4]
 80047c2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80047c6:	b002      	add	sp, #8
 80047c8:	bd10      	pop	{r4, pc}

080047ca <SD_DMATxAbort>:
{
 80047ca:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmatx != NULL)
 80047ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047d0:	b10b      	cbz	r3, 80047d6 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 80047d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047d8:	b103      	cbz	r3, 80047dc <SD_DMATxAbort+0x12>
}
 80047da:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 80047dc:	4620      	mov	r0, r4
 80047de:	f7ff ffe1 	bl	80047a4 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047ec:	3805      	subs	r0, #5
 80047ee:	b2c0      	uxtb	r0, r0
 80047f0:	4298      	cmp	r0, r3
 80047f2:	d8f2      	bhi.n	80047da <SD_DMATxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	f001 fa5b 	bl	8005cb0 <SDMMC_CmdStopTransfer>
 80047fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047fc:	4318      	orrs	r0, r3
 80047fe:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004802:	b91b      	cbnz	r3, 800480c <SD_DMATxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 8004804:	4620      	mov	r0, r4
 8004806:	f7ff fd44 	bl	8004292 <HAL_SD_ErrorCallback>
}
 800480a:	e7e6      	b.n	80047da <SD_DMATxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 800480c:	4620      	mov	r0, r4
 800480e:	f002 fadc 	bl	8006dca <HAL_SD_AbortCallback>
 8004812:	e7e2      	b.n	80047da <SD_DMATxAbort+0x10>

08004814 <SD_DMARxAbort>:
{
 8004814:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004816:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmarx != NULL)
 8004818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800481a:	b10b      	cbz	r3, 8004820 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8004820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004822:	b103      	cbz	r3, 8004826 <SD_DMARxAbort+0x12>
}
 8004824:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff ffbc 	bl	80047a4 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800482c:	2300      	movs	r3, #0
 800482e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004830:	2301      	movs	r3, #1
 8004832:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004836:	3805      	subs	r0, #5
 8004838:	b2c0      	uxtb	r0, r0
 800483a:	4298      	cmp	r0, r3
 800483c:	d8f2      	bhi.n	8004824 <SD_DMARxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	f001 fa36 	bl	8005cb0 <SDMMC_CmdStopTransfer>
 8004844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004846:	4318      	orrs	r0, r3
 8004848:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800484a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800484c:	b91b      	cbnz	r3, 8004856 <SD_DMARxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff fd1f 	bl	8004292 <HAL_SD_ErrorCallback>
}
 8004854:	e7e6      	b.n	8004824 <SD_DMARxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 8004856:	4620      	mov	r0, r4
 8004858:	f002 fab7 	bl	8006dca <HAL_SD_AbortCallback>
 800485c:	e7e2      	b.n	8004824 <SD_DMARxAbort+0x10>
	...

08004860 <HAL_SD_IRQHandler>:
{
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004864:	6803      	ldr	r3, [r0, #0]
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	f412 7f80 	tst.w	r2, #256	; 0x100
 800486c:	d061      	beq.n	8004932 <HAL_SD_IRQHandler+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800486e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004874:	6802      	ldr	r2, [r0, #0]
 8004876:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004878:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004884:	f013 0f08 	tst.w	r3, #8
 8004888:	d02a      	beq.n	80048e0 <HAL_SD_IRQHandler+0x80>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800488a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800488c:	f013 0f02 	tst.w	r3, #2
 8004890:	d103      	bne.n	800489a <HAL_SD_IRQHandler+0x3a>
 8004892:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004894:	f013 0f20 	tst.w	r3, #32
 8004898:	d004      	beq.n	80048a4 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	f001 fa08 	bl	8005cb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80048a0:	4603      	mov	r3, r0
 80048a2:	b990      	cbnz	r0, 80048ca <HAL_SD_IRQHandler+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80048b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048b4:	f013 0f01 	tst.w	r3, #1
 80048b8:	d103      	bne.n	80048c2 <HAL_SD_IRQHandler+0x62>
 80048ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048bc:	f013 0f02 	tst.w	r3, #2
 80048c0:	d00a      	beq.n	80048d8 <HAL_SD_IRQHandler+0x78>
        HAL_SD_RxCpltCallback(hsd);
 80048c2:	4620      	mov	r0, r4
 80048c4:	f002 fa8b 	bl	8006dde <HAL_SD_RxCpltCallback>
}
 80048c8:	bd10      	pop	{r4, pc}
          hsd->ErrorCode |= errorstate;
 80048ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048cc:	4313      	orrs	r3, r2
 80048ce:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff fcde 	bl	8004292 <HAL_SD_ErrorCallback>
 80048d6:	e7e5      	b.n	80048a4 <HAL_SD_IRQHandler+0x44>
        HAL_SD_TxCpltCallback(hsd);
 80048d8:	4620      	mov	r0, r4
 80048da:	f002 fa7b 	bl	8006dd4 <HAL_SD_TxCpltCallback>
 80048de:	e7f3      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80048e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048e6:	d0ef      	beq.n	80048c8 <HAL_SD_IRQHandler+0x68>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80048e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048ea:	f013 0f20 	tst.w	r3, #32
 80048ee:	d113      	bne.n	8004918 <HAL_SD_IRQHandler+0xb8>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80048f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048f2:	f013 0f01 	tst.w	r3, #1
 80048f6:	d1e7      	bne.n	80048c8 <HAL_SD_IRQHandler+0x68>
 80048f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048fa:	f013 0f02 	tst.w	r3, #2
 80048fe:	d1e3      	bne.n	80048c8 <HAL_SD_IRQHandler+0x68>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004904:	f023 0308 	bic.w	r3, r3, #8
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800490a:	2301      	movs	r3, #1
 800490c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004910:	4620      	mov	r0, r4
 8004912:	f002 fa5f 	bl	8006dd4 <HAL_SD_TxCpltCallback>
 8004916:	e7d7      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004918:	6800      	ldr	r0, [r0, #0]
 800491a:	f001 f9c9 	bl	8005cb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800491e:	4603      	mov	r3, r0
 8004920:	2800      	cmp	r0, #0
 8004922:	d0e5      	beq.n	80048f0 <HAL_SD_IRQHandler+0x90>
          hsd->ErrorCode |= errorstate;
 8004924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004926:	4313      	orrs	r3, r2
 8004928:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fcb1 	bl	8004292 <HAL_SD_ErrorCallback>
 8004930:	e7de      	b.n	80048f0 <HAL_SD_IRQHandler+0x90>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8004932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004934:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004938:	d14c      	bne.n	80049d4 <HAL_SD_IRQHandler+0x174>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800493a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004940:	d14e      	bne.n	80049e0 <HAL_SD_IRQHandler+0x180>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8004942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004944:	f240 223a 	movw	r2, #570	; 0x23a
 8004948:	4211      	tst	r1, r2
 800494a:	d0bd      	beq.n	80048c8 <HAL_SD_IRQHandler+0x68>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800494c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494e:	f012 0f02 	tst.w	r2, #2
 8004952:	d003      	beq.n	800495c <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004954:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004956:	f042 0202 	orr.w	r2, r2, #2
 800495a:	6382      	str	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	f012 0f08 	tst.w	r2, #8
 8004962:	d003      	beq.n	800496c <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8004964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004966:	f042 0208 	orr.w	r2, r2, #8
 800496a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800496c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496e:	f012 0f20 	tst.w	r2, #32
 8004972:	d003      	beq.n	800497c <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8004974:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004976:	f042 0220 	orr.w	r2, r2, #32
 800497a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	f012 0f10 	tst.w	r2, #16
 8004982:	d003      	beq.n	800498c <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004984:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004986:	f042 0210 	orr.w	r2, r2, #16
 800498a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800498c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004992:	d003      	beq.n	800499c <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800499c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80049a6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80049aa:	f023 0302 	bic.w	r3, r3, #2
 80049ae:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80049b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049b6:	d030      	beq.n	8004a1a <HAL_SD_IRQHandler+0x1ba>
      if(hsd->hdmatx != NULL)
 80049b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049ba:	b1bb      	cbz	r3, 80049ec <HAL_SD_IRQHandler+0x18c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <HAL_SD_IRQHandler+0x1d4>)
 80049be:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80049c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049c2:	f7fe f825 	bl	8002a10 <HAL_DMA_Abort_IT>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f43f af7e 	beq.w	80048c8 <HAL_SD_IRQHandler+0x68>
          SD_DMATxAbort(hsd->hdmatx);
 80049cc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049ce:	f7ff fefc 	bl	80047ca <SD_DMATxAbort>
 80049d2:	e779      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80049d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80049da:	f7ff f95d 	bl	8003c98 <SD_Write_IT>
 80049de:	e773      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80049e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80049e6:	f7ff f945 	bl	8003c74 <SD_Read_IT>
 80049ea:	e76d      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
      else if(hsd->hdmarx != NULL)
 80049ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049ee:	b15b      	cbz	r3, 8004a08 <HAL_SD_IRQHandler+0x1a8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_SD_IRQHandler+0x1d8>)
 80049f2:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80049f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80049f6:	f7fe f80b 	bl	8002a10 <HAL_DMA_Abort_IT>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f43f af64 	beq.w	80048c8 <HAL_SD_IRQHandler+0x68>
          SD_DMARxAbort(hsd->hdmarx);
 8004a00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a02:	f7ff ff07 	bl	8004814 <SD_DMARxAbort>
 8004a06:	e75f      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8004a12:	4620      	mov	r0, r4
 8004a14:	f002 f9d9 	bl	8006dca <HAL_SD_AbortCallback>
 8004a18:	e756      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a1c:	f013 0f08 	tst.w	r3, #8
 8004a20:	f43f af52 	beq.w	80048c8 <HAL_SD_IRQHandler+0x68>
      hsd->State = HAL_SD_STATE_READY;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff fc31 	bl	8004292 <HAL_SD_ErrorCallback>
}
 8004a30:	e74a      	b.n	80048c8 <HAL_SD_IRQHandler+0x68>
 8004a32:	bf00      	nop
 8004a34:	080047cb 	.word	0x080047cb
 8004a38:	08004815 	.word	0x08004815

08004a3c <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a44:	6803      	ldr	r3, [r0, #0]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_TIM_Base_Start_IT+0x64>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d01f      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01b      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d018      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a5a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d014      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d010      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d008      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x4c>
 8004a82:	f240 1161 	movw	r1, #353	; 0x161
 8004a86:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <HAL_TIM_Base_Start_IT+0x68>)
 8004a88:	f7fc fa6b 	bl	8000f62 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	68d3      	ldr	r3, [r2, #12]
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	6813      	ldr	r3, [r2, #0]
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	bd10      	pop	{r4, pc}
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	0800f144 	.word	0x0800f144

08004aac <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_IRQHandler>:
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	f012 0f02 	tst.w	r2, #2
 8004ac0:	d011      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	f012 0f02 	tst.w	r2, #2
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aca:	f06f 0202 	mvn.w	r2, #2
 8004ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad4:	6803      	ldr	r3, [r0, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f013 0f03 	tst.w	r3, #3
 8004adc:	d070      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	f7ff ffe6 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	f012 0f04 	tst.w	r2, #4
 8004aee:	d012      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	f012 0f04 	tst.w	r2, #4
 8004af6:	d00e      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	2302      	movs	r3, #2
 8004b00:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b0a:	d05f      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ffce 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	2300      	movs	r3, #0
 8004b14:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	f012 0f08 	tst.w	r2, #8
 8004b1e:	d012      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	f012 0f08 	tst.w	r2, #8
 8004b26:	d00e      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b28:	f06f 0208 	mvn.w	r2, #8
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f013 0f03 	tst.w	r3, #3
 8004b3a:	d04e      	beq.n	8004bda <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff ffb6 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	2300      	movs	r3, #0
 8004b44:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	f012 0f10 	tst.w	r2, #16
 8004b4e:	d012      	beq.n	8004b76 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	f012 0f10 	tst.w	r2, #16
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b58:	f06f 0210 	mvn.w	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	2308      	movs	r3, #8
 8004b60:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b6a:	d03d      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff ff9e 	bl	8004aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	2300      	movs	r3, #0
 8004b74:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	f012 0f01 	tst.w	r2, #1
 8004b7e:	d003      	beq.n	8004b88 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	f012 0f01 	tst.w	r2, #1
 8004b86:	d136      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b98:	d134      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ba2:	d003      	beq.n	8004bac <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004baa:	d132      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	f012 0f20 	tst.w	r2, #32
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	f012 0f20 	tst.w	r2, #32
 8004bbc:	d130      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x16c>
}
 8004bbe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc0:	f7ff ff74 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff ff73 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bca:	e78a      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff ff6d 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff ff6c 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd8:	e79b      	b.n	8004b12 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff ff66 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff ff65 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004be6:	e7ac      	b.n	8004b42 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7ff ff5f 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff ff5e 	bl	8004ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bf4:	e7bd      	b.n	8004b72 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf6:	f06f 0201 	mvn.w	r2, #1
 8004bfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7fc f9a3 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
 8004c02:	e7c1      	b.n	8004b88 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f8c5 	bl	8004d9a <HAL_TIMEx_BreakCallback>
 8004c10:	e7c3      	b.n	8004b9a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c16:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff ff4a 	bl	8004ab2 <HAL_TIM_TriggerCallback>
 8004c1e:	e7c5      	b.n	8004bac <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 f8b6 	bl	8004d98 <HAL_TIMEx_CommutationCallback>
}
 8004c2c:	e7c7      	b.n	8004bbe <HAL_TIM_IRQHandler+0x10a>
	...

08004c30 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8004c30:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c32:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <TIM_Base_SetConfig+0x94>)
 8004c34:	4290      	cmp	r0, r2
 8004c36:	d012      	beq.n	8004c5e <TIM_Base_SetConfig+0x2e>
 8004c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3c:	4290      	cmp	r0, r2
 8004c3e:	d00e      	beq.n	8004c5e <TIM_Base_SetConfig+0x2e>
 8004c40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0x2e>
 8004c46:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c4a:	4290      	cmp	r0, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0x2e>
 8004c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c52:	4290      	cmp	r0, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0x2e>
 8004c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c5a:	4290      	cmp	r0, r2
 8004c5c:	d103      	bne.n	8004c66 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c62:	684a      	ldr	r2, [r1, #4]
 8004c64:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <TIM_Base_SetConfig+0x94>)
 8004c68:	4290      	cmp	r0, r2
 8004c6a:	d012      	beq.n	8004c92 <TIM_Base_SetConfig+0x62>
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	4290      	cmp	r0, r2
 8004c72:	d00e      	beq.n	8004c92 <TIM_Base_SetConfig+0x62>
 8004c74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c78:	d00b      	beq.n	8004c92 <TIM_Base_SetConfig+0x62>
 8004c7a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c7e:	4290      	cmp	r0, r2
 8004c80:	d007      	beq.n	8004c92 <TIM_Base_SetConfig+0x62>
 8004c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c86:	4290      	cmp	r0, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_Base_SetConfig+0x62>
 8004c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c8e:	4290      	cmp	r0, r2
 8004c90:	d103      	bne.n	8004c9a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	68ca      	ldr	r2, [r1, #12]
 8004c98:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004c9e:	694a      	ldr	r2, [r1, #20]
 8004ca0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ca2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	688b      	ldr	r3, [r1, #8]
 8004ca6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004ca8:	680b      	ldr	r3, [r1, #0]
 8004caa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <TIM_Base_SetConfig+0x94>)
 8004cae:	4298      	cmp	r0, r3
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	d101      	bne.n	8004cbe <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	6143      	str	r3, [r0, #20]
}
 8004cc2:	4770      	bx	lr
 8004cc4:	40012c00 	.word	0x40012c00

08004cc8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d05e      	beq.n	8004d8a <HAL_TIM_Base_Init+0xc2>
{
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004cd0:	6803      	ldr	r3, [r0, #0]
 8004cd2:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <HAL_TIM_Base_Init+0xc8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01e      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01a      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d017      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004ce6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_Base_Init+0x4e>
 8004d0e:	21d9      	movs	r1, #217	; 0xd9
 8004d10:	4820      	ldr	r0, [pc, #128]	; (8004d94 <HAL_TIM_Base_Init+0xcc>)
 8004d12:	f7fc f926 	bl	8000f62 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	b13b      	cbz	r3, 8004d2a <HAL_TIM_Base_Init+0x62>
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d005      	beq.n	8004d2a <HAL_TIM_Base_Init+0x62>
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_Base_Init+0x62>
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d001      	beq.n	8004d2a <HAL_TIM_Base_Init+0x62>
 8004d26:	2b60      	cmp	r3, #96	; 0x60
 8004d28:	d11a      	bne.n	8004d60 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	b12b      	cbz	r3, 8004d3a <HAL_TIM_Base_Init+0x72>
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d002      	beq.n	8004d3a <HAL_TIM_Base_Init+0x72>
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d117      	bne.n	8004d6a <HAL_TIM_Base_Init+0xa2>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	b10b      	cbz	r3, 8004d42 <HAL_TIM_Base_Init+0x7a>
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d118      	bne.n	8004d74 <HAL_TIM_Base_Init+0xac>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004d42:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004d46:	b1d3      	cbz	r3, 8004d7e <HAL_TIM_Base_Init+0xb6>
  htim->State= HAL_TIM_STATE_BUSY;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4e:	1d21      	adds	r1, r4, #4
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	f7ff ff6d 	bl	8004c30 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d5c:	2000      	movs	r0, #0
}
 8004d5e:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004d60:	21da      	movs	r1, #218	; 0xda
 8004d62:	480c      	ldr	r0, [pc, #48]	; (8004d94 <HAL_TIM_Base_Init+0xcc>)
 8004d64:	f7fc f8fd 	bl	8000f62 <assert_failed>
 8004d68:	e7df      	b.n	8004d2a <HAL_TIM_Base_Init+0x62>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d6a:	21db      	movs	r1, #219	; 0xdb
 8004d6c:	4809      	ldr	r0, [pc, #36]	; (8004d94 <HAL_TIM_Base_Init+0xcc>)
 8004d6e:	f7fc f8f8 	bl	8000f62 <assert_failed>
 8004d72:	e7e2      	b.n	8004d3a <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d74:	21dc      	movs	r1, #220	; 0xdc
 8004d76:	4807      	ldr	r0, [pc, #28]	; (8004d94 <HAL_TIM_Base_Init+0xcc>)
 8004d78:	f7fc f8f3 	bl	8000f62 <assert_failed>
 8004d7c:	e7e1      	b.n	8004d42 <HAL_TIM_Base_Init+0x7a>
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fe5a 	bl	8004a3c <HAL_TIM_Base_MspInit>
 8004d88:	e7de      	b.n	8004d48 <HAL_TIM_Base_Init+0x80>
    return HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	0800f144 	.word	0x0800f144

08004d98 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d9a:	4770      	bx	lr

08004d9c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	4604      	mov	r4, r0
  ErrorStatus status = SUCCESS;
  /* Check the parameters */
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 8004da0:	6803      	ldr	r3, [r0, #0]
 8004da2:	0cdb      	lsrs	r3, r3, #19
 8004da4:	04db      	lsls	r3, r3, #19
 8004da6:	b9b3      	cbnz	r3, 8004dd6 <LL_EXTI_Init+0x3a>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8004da8:	7923      	ldrb	r3, [r4, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d818      	bhi.n	8004de0 <LL_EXTI_Init+0x44>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 8004dae:	7963      	ldrb	r3, [r4, #5]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d81a      	bhi.n	8004dea <LL_EXTI_Init+0x4e>

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004db4:	7923      	ldrb	r3, [r4, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d06b      	beq.n	8004e92 <LL_EXTI_Init+0xf6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 8004dba:	79a3      	ldrb	r3, [r4, #6]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d819      	bhi.n	8004df4 <LL_EXTI_Init+0x58>

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d072      	beq.n	8004eac <LL_EXTI_Init+0x110>
    {
      switch (EXTI_InitStruct->Mode)
 8004dc6:	7962      	ldrb	r2, [r4, #5]
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	d02d      	beq.n	8004e28 <LL_EXTI_Init+0x8c>
 8004dcc:	b1ba      	cbz	r2, 8004dfe <LL_EXTI_Init+0x62>
 8004dce:	2a02      	cmp	r2, #2
 8004dd0:	d035      	beq.n	8004e3e <LL_EXTI_Init+0xa2>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e01d      	b.n	8004e12 <LL_EXTI_Init+0x76>
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 8004dd6:	217d      	movs	r1, #125	; 0x7d
 8004dd8:	4835      	ldr	r0, [pc, #212]	; (8004eb0 <LL_EXTI_Init+0x114>)
 8004dda:	f7fc f8c2 	bl	8000f62 <assert_failed>
 8004dde:	e7e3      	b.n	8004da8 <LL_EXTI_Init+0xc>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8004de0:	217e      	movs	r1, #126	; 0x7e
 8004de2:	4833      	ldr	r0, [pc, #204]	; (8004eb0 <LL_EXTI_Init+0x114>)
 8004de4:	f7fc f8bd 	bl	8000f62 <assert_failed>
 8004de8:	e7e1      	b.n	8004dae <LL_EXTI_Init+0x12>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 8004dea:	217f      	movs	r1, #127	; 0x7f
 8004dec:	4830      	ldr	r0, [pc, #192]	; (8004eb0 <LL_EXTI_Init+0x114>)
 8004dee:	f7fc f8b8 	bl	8000f62 <assert_failed>
 8004df2:	e7df      	b.n	8004db4 <LL_EXTI_Init+0x18>
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 8004df4:	2184      	movs	r1, #132	; 0x84
 8004df6:	482e      	ldr	r0, [pc, #184]	; (8004eb0 <LL_EXTI_Init+0x114>)
 8004df8:	f7fc f8b3 	bl	8000f62 <assert_failed>
 8004dfc:	e7e0      	b.n	8004dc0 <LL_EXTI_Init+0x24>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e00:	6851      	ldr	r1, [r2, #4]
 8004e02:	ea21 0303 	bic.w	r3, r1, r3
 8004e06:	6053      	str	r3, [r2, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004e08:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004e0a:	6811      	ldr	r1, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]
  ErrorStatus status = SUCCESS;
 8004e10:	2001      	movs	r0, #1
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004e12:	79a3      	ldrb	r3, [r4, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d048      	beq.n	8004eaa <LL_EXTI_Init+0x10e>
      {
        switch (EXTI_InitStruct->Trigger)
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d025      	beq.n	8004e68 <LL_EXTI_Init+0xcc>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d02e      	beq.n	8004e7e <LL_EXTI_Init+0xe2>
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d016      	beq.n	8004e52 <LL_EXTI_Init+0xb6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status = ERROR;
 8004e24:	2000      	movs	r0, #0
 8004e26:	e040      	b.n	8004eaa <LL_EXTI_Init+0x10e>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e2a:	6811      	ldr	r1, [r2, #0]
 8004e2c:	ea21 0303 	bic.w	r3, r1, r3
 8004e30:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004e32:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004e34:	6851      	ldr	r1, [r2, #4]
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	e7e9      	b.n	8004e12 <LL_EXTI_Init+0x76>
  SET_BIT(EXTI->IMR, ExtiLine);
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e40:	6811      	ldr	r1, [r2, #0]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004e46:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004e48:	6851      	ldr	r1, [r2, #4]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8004e4e:	2001      	movs	r0, #1
 8004e50:	e7df      	b.n	8004e12 <LL_EXTI_Init+0x76>
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e52:	6821      	ldr	r1, [r4, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	ea22 0201 	bic.w	r2, r2, r1
 8004e5c:	60da      	str	r2, [r3, #12]
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e5e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e020      	b.n	8004eaa <LL_EXTI_Init+0x10e>
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e68:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	ea22 0201 	bic.w	r2, r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e74:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	e015      	b.n	8004eaa <LL_EXTI_Init+0x10e>
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e7e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e82:	6899      	ldr	r1, [r3, #8]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e88:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004e8a:	68d9      	ldr	r1, [r3, #12]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	e00b      	b.n	8004eaa <LL_EXTI_Init+0x10e>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004e92:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <LL_EXTI_Init+0x118>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	ea22 0201 	bic.w	r2, r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004e9e:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	ea22 0201 	bic.w	r2, r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  ErrorStatus status = SUCCESS;
 8004ea8:	2001      	movs	r0, #1
  }
  return status;
}
 8004eaa:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8004eac:	2001      	movs	r0, #1
 8004eae:	e7fc      	b.n	8004eaa <LL_EXTI_Init+0x10e>
 8004eb0:	0800f17c 	.word	0x0800f17c
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	460e      	mov	r6, r1
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004ec0:	4b65      	ldr	r3, [pc, #404]	; (8005058 <LL_GPIO_Init+0x1a0>)
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	d01b      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	4298      	cmp	r0, r3
 8004ecc:	d017      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed2:	4298      	cmp	r0, r3
 8004ed4:	d013      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eda:	4298      	cmp	r0, r3
 8004edc:	d00f      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee2:	4298      	cmp	r0, r3
 8004ee4:	d00b      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eea:	4298      	cmp	r0, r3
 8004eec:	d007      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	d003      	beq.n	8004efe <LL_GPIO_Init+0x46>
 8004ef6:	21b2      	movs	r1, #178	; 0xb2
 8004ef8:	4858      	ldr	r0, [pc, #352]	; (800505c <LL_GPIO_Init+0x1a4>)
 8004efa:	f7fc f832 	bl	8000f62 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8004efe:	6833      	ldr	r3, [r6, #0]
 8004f00:	f033 427b 	bics.w	r2, r3, #4211081216	; 0xfb000000
 8004f04:	d002      	beq.n	8004f0c <LL_GPIO_Init+0x54>
 8004f06:	f013 4f7b 	tst.w	r3, #4211081216	; 0xfb000000
 8004f0a:	d003      	beq.n	8004f14 <LL_GPIO_Init+0x5c>
 8004f0c:	21b3      	movs	r1, #179	; 0xb3
 8004f0e:	4853      	ldr	r0, [pc, #332]	; (800505c <LL_GPIO_Init+0x1a4>)
 8004f10:	f7fc f827 	bl	8000f62 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	f3c3 280f 	ubfx	r8, r3, #8, #16
 8004f1a:	fa98 f5a8 	rbit	r5, r8
  pinpos = POSITION_VAL(pinmask);
 8004f1e:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8004f22:	e06a      	b.n	8004ffa <LL_GPIO_Init+0x142>
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8004f24:	f1a5 0308 	sub.w	r3, r5, #8
 8004f28:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 8004f2c:	409c      	lsls	r4, r3
 8004f2e:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8004f32:	e06f      	b.n	8005014 <LL_GPIO_Init+0x15c>
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004f34:	6933      	ldr	r3, [r6, #16]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d87c      	bhi.n	8005034 <LL_GPIO_Init+0x17c>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004f3a:	6871      	ldr	r1, [r6, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004f3c:	ea4f 6914 	mov.w	r9, r4, lsr #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004f40:	f857 3009 	ldr.w	r3, [r7, r9]
 8004f44:	fa94 f2a4 	rbit	r2, r4
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	0092      	lsls	r2, r2, #2
 8004f4e:	200f      	movs	r0, #15
 8004f50:	fa00 f202 	lsl.w	r2, r0, r2
 8004f54:	ea23 0302 	bic.w	r3, r3, r2
 8004f58:	fa94 f2a4 	rbit	r2, r4
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	fa01 f202 	lsl.w	r2, r1, r2
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f847 3009 	str.w	r3, [r7, r9]

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004f6c:	6932      	ldr	r2, [r6, #16]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	0a23      	lsrs	r3, r4, #8
 8004f72:	ea21 0103 	bic.w	r1, r1, r3
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	430b      	orrs	r3, r1
 8004f84:	60fb      	str	r3, [r7, #12]

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f86:	6873      	ldr	r3, [r6, #4]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <LL_GPIO_Init+0xd8>
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	d133      	bne.n	8004ff8 <LL_GPIO_Init+0x140>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8004f90:	68b3      	ldr	r3, [r6, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d852      	bhi.n	800503e <LL_GPIO_Init+0x186>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004f98:	68f3      	ldr	r3, [r6, #12]
 8004f9a:	b10b      	cbz	r3, 8004fa0 <LL_GPIO_Init+0xe8>
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d153      	bne.n	8005048 <LL_GPIO_Init+0x190>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004fa0:	68b1      	ldr	r1, [r6, #8]
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004fa2:	f857 3009 	ldr.w	r3, [r7, r9]
 8004fa6:	fa94 f2a4 	rbit	r2, r4
 8004faa:	fab2 f282 	clz	r2, r2
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	2003      	movs	r0, #3
 8004fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb6:	ea23 0302 	bic.w	r3, r3, r2
 8004fba:	fa94 f2a4 	rbit	r2, r4
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	0092      	lsls	r2, r2, #2
 8004fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	f847 2009 	str.w	r2, [r7, r9]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004fce:	68f3      	ldr	r3, [r6, #12]
 8004fd0:	fa94 f1a4 	rbit	r1, r4
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004fd4:	fab1 f181 	clz	r1, r1
 8004fd8:	0089      	lsls	r1, r1, #2
 8004fda:	2004      	movs	r0, #4
 8004fdc:	fa00 f101 	lsl.w	r1, r0, r1
 8004fe0:	ea22 0201 	bic.w	r2, r2, r1
 8004fe4:	fa94 f4a4 	rbit	r4, r4
 8004fe8:	fab4 f484 	clz	r4, r4
 8004fec:	00a4      	lsls	r4, r4, #2
 8004fee:	fa03 f404 	lsl.w	r4, r3, r4
 8004ff2:	4314      	orrs	r4, r2
 8004ff4:	f847 4009 	str.w	r4, [r7, r9]
      }
    }
    pinpos++;
 8004ff8:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0U)
 8004ffa:	fa38 f305 	lsrs.w	r3, r8, r5
 8004ffe:	d028      	beq.n	8005052 <LL_GPIO_Init+0x19a>
    if ((pinmask & (1U << pinpos)) != 0U)
 8005000:	2301      	movs	r3, #1
 8005002:	40ab      	lsls	r3, r5
 8005004:	ea13 0f08 	tst.w	r3, r8
 8005008:	d0f6      	beq.n	8004ff8 <LL_GPIO_Init+0x140>
      if (pinpos < GPIO_PIN_MASK_POS)
 800500a:	2d07      	cmp	r5, #7
 800500c:	d88a      	bhi.n	8004f24 <LL_GPIO_Init+0x6c>
        currentpin = (0x00000101U << pinpos);
 800500e:	f240 1401 	movw	r4, #257	; 0x101
 8005012:	40ac      	lsls	r4, r5
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8005014:	6873      	ldr	r3, [r6, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d08c      	beq.n	8004f34 <LL_GPIO_Init+0x7c>
 800501a:	2b04      	cmp	r3, #4
 800501c:	d08a      	beq.n	8004f34 <LL_GPIO_Init+0x7c>
 800501e:	2b08      	cmp	r3, #8
 8005020:	d088      	beq.n	8004f34 <LL_GPIO_Init+0x7c>
 8005022:	2b01      	cmp	r3, #1
 8005024:	d086      	beq.n	8004f34 <LL_GPIO_Init+0x7c>
 8005026:	2b09      	cmp	r3, #9
 8005028:	d084      	beq.n	8004f34 <LL_GPIO_Init+0x7c>
 800502a:	21cc      	movs	r1, #204	; 0xcc
 800502c:	480b      	ldr	r0, [pc, #44]	; (800505c <LL_GPIO_Init+0x1a4>)
 800502e:	f7fb ff98 	bl	8000f62 <assert_failed>
 8005032:	e77f      	b.n	8004f34 <LL_GPIO_Init+0x7c>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8005034:	21cd      	movs	r1, #205	; 0xcd
 8005036:	4809      	ldr	r0, [pc, #36]	; (800505c <LL_GPIO_Init+0x1a4>)
 8005038:	f7fb ff93 	bl	8000f62 <assert_failed>
 800503c:	e77d      	b.n	8004f3a <LL_GPIO_Init+0x82>
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800503e:	21d8      	movs	r1, #216	; 0xd8
 8005040:	4806      	ldr	r0, [pc, #24]	; (800505c <LL_GPIO_Init+0x1a4>)
 8005042:	f7fb ff8e 	bl	8000f62 <assert_failed>
 8005046:	e7a7      	b.n	8004f98 <LL_GPIO_Init+0xe0>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8005048:	21d9      	movs	r1, #217	; 0xd9
 800504a:	4804      	ldr	r0, [pc, #16]	; (800505c <LL_GPIO_Init+0x1a4>)
 800504c:	f7fb ff89 	bl	8000f62 <assert_failed>
 8005050:	e7a6      	b.n	8004fa0 <LL_GPIO_Init+0xe8>
  }
  return (SUCCESS);
}
 8005052:	2001      	movs	r0, #1
 8005054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005058:	40010800 	.word	0x40010800
 800505c:	0800f1b4 	.word	0x0800f1b4

08005060 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005062:	b085      	sub	sp, #20
 8005064:	4604      	mov	r4, r0
 8005066:	460d      	mov	r5, r1
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 8005068:	4b60      	ldr	r3, [pc, #384]	; (80051ec <LL_I2C_Init+0x18c>)
 800506a:	4298      	cmp	r0, r3
 800506c:	d007      	beq.n	800507e <LL_I2C_Init+0x1e>
 800506e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005072:	4298      	cmp	r0, r3
 8005074:	d003      	beq.n	800507e <LL_I2C_Init+0x1e>
 8005076:	2197      	movs	r1, #151	; 0x97
 8005078:	485d      	ldr	r0, [pc, #372]	; (80051f0 <LL_I2C_Init+0x190>)
 800507a:	f7fb ff72 	bl	8000f62 <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	b12b      	cbz	r3, 800508e <LL_I2C_Init+0x2e>
 8005082:	2b1a      	cmp	r3, #26
 8005084:	d003      	beq.n	800508e <LL_I2C_Init+0x2e>
 8005086:	2b02      	cmp	r3, #2
 8005088:	d001      	beq.n	800508e <LL_I2C_Init+0x2e>
 800508a:	2b12      	cmp	r3, #18
 800508c:	d16f      	bne.n	800516e <LL_I2C_Init+0x10e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 800508e:	686b      	ldr	r3, [r5, #4]
 8005090:	3b01      	subs	r3, #1
 8005092:	4a58      	ldr	r2, [pc, #352]	; (80051f4 <LL_I2C_Init+0x194>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d86f      	bhi.n	8005178 <LL_I2C_Init+0x118>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8005098:	68ab      	ldr	r3, [r5, #8]
 800509a:	b113      	cbz	r3, 80050a2 <LL_I2C_Init+0x42>
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a0:	d16f      	bne.n	8005182 <LL_I2C_Init+0x122>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 80050a2:	68eb      	ldr	r3, [r5, #12]
 80050a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a8:	d270      	bcs.n	800518c <LL_I2C_Init+0x12c>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 80050aa:	692b      	ldr	r3, [r5, #16]
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d001      	beq.n	80050b6 <LL_I2C_Init+0x56>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d16f      	bne.n	8005196 <LL_I2C_Init+0x136>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 80050b6:	696b      	ldr	r3, [r5, #20]
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d006      	beq.n	80050cc <LL_I2C_Init+0x6c>
 80050be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c2:	d003      	beq.n	80050cc <LL_I2C_Init+0x6c>
 80050c4:	219f      	movs	r1, #159	; 0x9f
 80050c6:	484a      	ldr	r0, [pc, #296]	; (80051f0 <LL_I2C_Init+0x190>)
 80050c8:	f7fb ff4b 	bl	8000f62 <assert_failed>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6023      	str	r3, [r4, #0]

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80050d4:	4668      	mov	r0, sp
 80050d6:	f000 f8ed 	bl	80052b4 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80050da:	9a02      	ldr	r2, [sp, #8]
 80050dc:	686b      	ldr	r3, [r5, #4]
 80050de:	68ae      	ldr	r6, [r5, #8]
{
  register uint32_t freqrange = 0x0U;
  register uint32_t clockconfig = 0x0U;

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80050e0:	4945      	ldr	r1, [pc, #276]	; (80051f8 <LL_I2C_Init+0x198>)
 80050e2:	fba1 0102 	umull	r0, r1, r1, r2
 80050e6:	0c89      	lsrs	r1, r1, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80050e8:	6860      	ldr	r0, [r4, #4]
 80050ea:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80050ee:	4308      	orrs	r0, r1
 80050f0:	6060      	str	r0, [r4, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80050f2:	6a20      	ldr	r0, [r4, #32]
 80050f4:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80050f8:	4f40      	ldr	r7, [pc, #256]	; (80051fc <LL_I2C_Init+0x19c>)
 80050fa:	42bb      	cmp	r3, r7
 80050fc:	d850      	bhi.n	80051a0 <LL_I2C_Init+0x140>
 80050fe:	3101      	adds	r1, #1
 8005100:	4301      	orrs	r1, r0
 8005102:	6221      	str	r1, [r4, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8005104:	493d      	ldr	r1, [pc, #244]	; (80051fc <LL_I2C_Init+0x19c>)
 8005106:	428b      	cmp	r3, r1
 8005108:	d966      	bls.n	80051d8 <LL_I2C_Init+0x178>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800510a:	2e00      	cmp	r6, #0
 800510c:	d152      	bne.n	80051b4 <LL_I2C_Init+0x154>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800510e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005112:	fbb2 f2f3 	udiv	r2, r2, r3
 8005116:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800511a:	2b00      	cmp	r3, #0
 800511c:	d056      	beq.n	80051cc <LL_I2C_Init+0x16c>
 800511e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005122:	ea46 0302 	orr.w	r3, r6, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8005126:	69e2      	ldr	r2, [r4, #28]
 8005128:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800512c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005130:	431a      	orrs	r2, r3
 8005132:	61e2      	str	r2, [r4, #28]
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8005134:	68ea      	ldr	r2, [r5, #12]
 8005136:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005138:	68a3      	ldr	r3, [r4, #8]
 800513a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800513e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005142:	430a      	orrs	r2, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	60a3      	str	r3, [r4, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8005148:	682b      	ldr	r3, [r5, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	f022 021a 	bic.w	r2, r2, #26
 8005150:	4313      	orrs	r3, r2
 8005152:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6023      	str	r3, [r4, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800515c:	692b      	ldr	r3, [r5, #16]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	4313      	orrs	r3, r2
 8005166:	6023      	str	r3, [r4, #0]

  return SUCCESS;
}
 8005168:	2001      	movs	r0, #1
 800516a:	b005      	add	sp, #20
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 800516e:	219a      	movs	r1, #154	; 0x9a
 8005170:	481f      	ldr	r0, [pc, #124]	; (80051f0 <LL_I2C_Init+0x190>)
 8005172:	f7fb fef6 	bl	8000f62 <assert_failed>
 8005176:	e78a      	b.n	800508e <LL_I2C_Init+0x2e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 8005178:	219b      	movs	r1, #155	; 0x9b
 800517a:	481d      	ldr	r0, [pc, #116]	; (80051f0 <LL_I2C_Init+0x190>)
 800517c:	f7fb fef1 	bl	8000f62 <assert_failed>
 8005180:	e78a      	b.n	8005098 <LL_I2C_Init+0x38>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8005182:	219c      	movs	r1, #156	; 0x9c
 8005184:	481a      	ldr	r0, [pc, #104]	; (80051f0 <LL_I2C_Init+0x190>)
 8005186:	f7fb feec 	bl	8000f62 <assert_failed>
 800518a:	e78a      	b.n	80050a2 <LL_I2C_Init+0x42>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 800518c:	219d      	movs	r1, #157	; 0x9d
 800518e:	4818      	ldr	r0, [pc, #96]	; (80051f0 <LL_I2C_Init+0x190>)
 8005190:	f7fb fee7 	bl	8000f62 <assert_failed>
 8005194:	e789      	b.n	80050aa <LL_I2C_Init+0x4a>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 8005196:	219e      	movs	r1, #158	; 0x9e
 8005198:	4815      	ldr	r0, [pc, #84]	; (80051f0 <LL_I2C_Init+0x190>)
 800519a:	f7fb fee2 	bl	8000f62 <assert_failed>
 800519e:	e78a      	b.n	80050b6 <LL_I2C_Init+0x56>
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80051a0:	f44f 7796 	mov.w	r7, #300	; 0x12c
 80051a4:	fb07 f101 	mul.w	r1, r7, r1
 80051a8:	4f15      	ldr	r7, [pc, #84]	; (8005200 <LL_I2C_Init+0x1a0>)
 80051aa:	fba7 7101 	umull	r7, r1, r7, r1
 80051ae:	0989      	lsrs	r1, r1, #6
 80051b0:	3101      	adds	r1, #1
 80051b2:	e7a5      	b.n	8005100 <LL_I2C_Init+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80051b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80051c4:	b12b      	cbz	r3, 80051d2 <LL_I2C_Init+0x172>
 80051c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ca:	e7aa      	b.n	8005122 <LL_I2C_Init+0xc2>
 80051cc:	f248 0201 	movw	r2, #32769	; 0x8001
 80051d0:	e7a7      	b.n	8005122 <LL_I2C_Init+0xc2>
 80051d2:	f248 0201 	movw	r2, #32769	; 0x8001
 80051d6:	e7a4      	b.n	8005122 <LL_I2C_Init+0xc2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	f3c3 020b 	ubfx	r2, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80051e2:	2a03      	cmp	r2, #3
 80051e4:	d89f      	bhi.n	8005126 <LL_I2C_Init+0xc6>
 80051e6:	2304      	movs	r3, #4
 80051e8:	e79d      	b.n	8005126 <LL_I2C_Init+0xc6>
 80051ea:	bf00      	nop
 80051ec:	40005400 	.word	0x40005400
 80051f0:	0800f1ec 	.word	0x0800f1ec
 80051f4:	00061a7f 	.word	0x00061a7f
 80051f8:	431bde83 	.word	0x431bde83
 80051fc:	000186a0 	.word	0x000186a0
 8005200:	10624dd3 	.word	0x10624dd3

08005204 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <RCC_GetHCLKClockFreq+0x10>)
 8005206:	685b      	ldr	r3, [r3, #4]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005208:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800520c:	4a02      	ldr	r2, [pc, #8]	; (8005218 <RCC_GetHCLKClockFreq+0x14>)
 800520e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005210:	40d8      	lsrs	r0, r3
 8005212:	4770      	bx	lr
 8005214:	40021000 	.word	0x40021000
 8005218:	0800efd4 	.word	0x0800efd4

0800521c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <RCC_GetPCLK1ClockFreq+0x10>)
 800521e:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005220:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005224:	4a02      	ldr	r2, [pc, #8]	; (8005230 <RCC_GetPCLK1ClockFreq+0x14>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
}
 8005228:	40d8      	lsrs	r0, r3
 800522a:	4770      	bx	lr
 800522c:	40021000 	.word	0x40021000
 8005230:	0800efe4 	.word	0x0800efe4

08005234 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <RCC_GetPCLK2ClockFreq+0x10>)
 8005236:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005238:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800523c:	4a02      	ldr	r2, [pc, #8]	; (8005248 <RCC_GetPCLK2ClockFreq+0x14>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005240:	40d8      	lsrs	r0, r3
 8005242:	4770      	bx	lr
 8005244:	40021000 	.word	0x40021000
 8005248:	0800efe4 	.word	0x0800efe4

0800524c <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <RCC_PLL_GetFreqDomain_SYS+0x30>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005254:	b17b      	cbz	r3, 8005276 <RCC_PLL_GetFreqDomain_SYS+0x2a>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8005258:	6858      	ldr	r0, [r3, #4]
 800525a:	f3c0 4040 	ubfx	r0, r0, #17, #1
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800525e:	3001      	adds	r0, #1
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <RCC_PLL_GetFreqDomain_SYS+0x34>)
 8005262:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8005268:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800526a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800526e:	3302      	adds	r3, #2
}
 8005270:	fb00 f003 	mul.w	r0, r0, r3
 8005274:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8005276:	4803      	ldr	r0, [pc, #12]	; (8005284 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 8005278:	e7f5      	b.n	8005266 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
 8005280:	00b71b00 	.word	0x00b71b00
 8005284:	003d0900 	.word	0x003d0900

08005288 <RCC_GetSystemClockFreq>:
{
 8005288:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <RCC_GetSystemClockFreq+0x20>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005292:	2b04      	cmp	r3, #4
 8005294:	d006      	beq.n	80052a4 <RCC_GetSystemClockFreq+0x1c>
 8005296:	2b08      	cmp	r3, #8
 8005298:	d001      	beq.n	800529e <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 800529a:	4804      	ldr	r0, [pc, #16]	; (80052ac <RCC_GetSystemClockFreq+0x24>)
}
 800529c:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800529e:	f7ff ffd5 	bl	800524c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80052a2:	e7fb      	b.n	800529c <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 80052a6:	e7f9      	b.n	800529c <RCC_GetSystemClockFreq+0x14>
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	00b71b00 	.word	0x00b71b00

080052b4 <LL_RCC_GetSystemClocksFreq>:
{
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80052b8:	f7ff ffe6 	bl	8005288 <RCC_GetSystemClockFreq>
 80052bc:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80052be:	f7ff ffa1 	bl	8005204 <RCC_GetHCLKClockFreq>
 80052c2:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80052c4:	f7ff ffaa 	bl	800521c <RCC_GetPCLK1ClockFreq>
 80052c8:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80052ca:	6860      	ldr	r0, [r4, #4]
 80052cc:	f7ff ffb2 	bl	8005234 <RCC_GetPCLK2ClockFreq>
 80052d0:	60e0      	str	r0, [r4, #12]
}
 80052d2:	bd10      	pop	{r4, pc}

080052d4 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80052d4:	b510      	push	{r4, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80052da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052de:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <LL_RTC_EnterInitMode+0x58>)
 80052e2:	4298      	cmp	r0, r3
 80052e4:	d004      	beq.n	80052f0 <LL_RTC_EnterInitMode+0x1c>
 80052e6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80052ea:	4811      	ldr	r0, [pc, #68]	; (8005330 <LL_RTC_EnterInitMode+0x5c>)
 80052ec:	f7fb fe39 	bl	8000f62 <assert_failed>
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 80052f6:	2001      	movs	r0, #1

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 80052f8:	9a01      	ldr	r2, [sp, #4]
 80052fa:	b182      	cbz	r2, 800531e <LL_RTC_EnterInitMode+0x4a>
 80052fc:	b97b      	cbnz	r3, 800531e <LL_RTC_EnterInitMode+0x4a>
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <LL_RTC_EnterInitMode+0x60>)
 8005300:	681b      	ldr	r3, [r3, #0]
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8005302:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005306:	d002      	beq.n	800530e <LL_RTC_EnterInitMode+0x3a>
      {
        timeout --;
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	f3c3 1340 	ubfx	r3, r3, #5, #1
      }
      tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
      if (timeout == 0U)
 8005314:	9a01      	ldr	r2, [sp, #4]
 8005316:	2a00      	cmp	r2, #0
 8005318:	d1ee      	bne.n	80052f8 <LL_RTC_EnterInitMode+0x24>
      {
        status = ERROR;
 800531a:	2000      	movs	r0, #0
 800531c:	e7ec      	b.n	80052f8 <LL_RTC_EnterInitMode+0x24>
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	f043 0310 	orr.w	r3, r3, #16
 8005324:	6063      	str	r3, [r4, #4]

   /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
  
  return status;
}
 8005326:	b002      	add	sp, #8
 8005328:	bd10      	pop	{r4, pc}
 800532a:	bf00      	nop
 800532c:	40002800 	.word	0x40002800
 8005330:	0800f224 	.word	0x0800f224
 8005334:	e000e010 	.word	0xe000e010

08005338 <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 8005338:	b510      	push	{r4, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800533e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005342:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;
  
  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <LL_RTC_ExitInitMode+0x58>)
 8005346:	4298      	cmp	r0, r3
 8005348:	d004      	beq.n	8005354 <LL_RTC_ExitInitMode+0x1c>
 800534a:	f240 11a7 	movw	r1, #423	; 0x1a7
 800534e:	4811      	ldr	r0, [pc, #68]	; (8005394 <LL_RTC_ExitInitMode+0x5c>)
 8005350:	f7fb fe07 	bl	8000f62 <assert_failed>
 CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 8005362:	2001      	movs	r0, #1
  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
  
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
  while ((timeout != 0U) && (tmp != 1U))
 8005364:	9a01      	ldr	r2, [sp, #4]
 8005366:	b182      	cbz	r2, 800538a <LL_RTC_ExitInitMode+0x52>
 8005368:	b97b      	cbnz	r3, 800538a <LL_RTC_ExitInitMode+0x52>
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <LL_RTC_ExitInitMode+0x60>)
 800536c:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800536e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005372:	d002      	beq.n	800537a <LL_RTC_ExitInitMode+0x42>
    {
      timeout --;
 8005374:	9b01      	ldr	r3, [sp, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    if (timeout == 0U)
 8005380:	9a01      	ldr	r2, [sp, #4]
 8005382:	2a00      	cmp	r2, #0
 8005384:	d1ee      	bne.n	8005364 <LL_RTC_ExitInitMode+0x2c>
    {
      status = ERROR;
 8005386:	2000      	movs	r0, #0
 8005388:	e7ec      	b.n	8005364 <LL_RTC_ExitInitMode+0x2c>
    }
  }
  return status;
}
 800538a:	b002      	add	sp, #8
 800538c:	bd10      	pop	{r4, pc}
 800538e:	bf00      	nop
 8005390:	40002800 	.word	0x40002800
 8005394:	0800f224 	.word	0x0800f224
 8005398:	e000e010 	.word	0xe000e010

0800539c <LL_RTC_TIME_Init>:
{
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	4605      	mov	r5, r0
 80053a0:	460e      	mov	r6, r1
 80053a2:	4614      	mov	r4, r2
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 80053a4:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <LL_RTC_TIME_Init+0x144>)
 80053a6:	4298      	cmp	r0, r3
 80053a8:	d003      	beq.n	80053b2 <LL_RTC_TIME_Init+0x16>
 80053aa:	21f0      	movs	r1, #240	; 0xf0
 80053ac:	484d      	ldr	r0, [pc, #308]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 80053ae:	f7fb fdd8 	bl	8000f62 <assert_failed>
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 80053b2:	2e01      	cmp	r6, #1
 80053b4:	d83e      	bhi.n	8005434 <LL_RTC_TIME_Init+0x98>
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	d150      	bne.n	800545c <LL_RTC_TIME_Init+0xc0>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 80053ba:	7823      	ldrb	r3, [r4, #0]
 80053bc:	2b17      	cmp	r3, #23
 80053be:	d83e      	bhi.n	800543e <LL_RTC_TIME_Init+0xa2>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 80053c0:	7863      	ldrb	r3, [r4, #1]
 80053c2:	2b3b      	cmp	r3, #59	; 0x3b
 80053c4:	d840      	bhi.n	8005448 <LL_RTC_TIME_Init+0xac>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 80053c6:	78a3      	ldrb	r3, [r4, #2]
 80053c8:	2b3b      	cmp	r3, #59	; 0x3b
 80053ca:	d842      	bhi.n	8005452 <LL_RTC_TIME_Init+0xb6>
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80053cc:	4628      	mov	r0, r5
 80053ce:	f7ff ff81 	bl	80052d4 <LL_RTC_EnterInitMode>
 80053d2:	4607      	mov	r7, r0
 80053d4:	b348      	cbz	r0, 800542a <LL_RTC_TIME_Init+0x8e>
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d170      	bne.n	80054bc <LL_RTC_TIME_Init+0x120>
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 80053da:	7823      	ldrb	r3, [r4, #0]
 80053dc:	091a      	lsrs	r2, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053e6:	0051      	lsls	r1, r2, #1
 80053e8:	440b      	add	r3, r1
 80053ea:	b2db      	uxtb	r3, r3
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 80053ec:	7862      	ldrb	r2, [r4, #1]
 80053ee:	0911      	lsrs	r1, r2, #4
 80053f0:	f002 020f 	and.w	r2, r2, #15
 80053f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80053f8:	0048      	lsls	r0, r1, #1
 80053fa:	4402      	add	r2, r0
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005402:	0091      	lsls	r1, r2, #2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8005404:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005408:	fb02 1303 	mla	r3, r2, r3, r1
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 800540c:	78a2      	ldrb	r2, [r4, #2]
 800540e:	0911      	lsrs	r1, r2, #4
 8005410:	f002 020f 	and.w	r2, r2, #15
 8005414:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005418:	0048      	lsls	r0, r1, #1
 800541a:	4402      	add	r2, r0
 800541c:	b2d2      	uxtb	r2, r2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 800541e:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 8005420:	0c1a      	lsrs	r2, r3, #16
 8005422:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005424:	b29b      	uxth	r3, r3
 8005426:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 8005428:	2701      	movs	r7, #1
  LL_RTC_ExitInitMode(RTCx);
 800542a:	4628      	mov	r0, r5
 800542c:	f7ff ff84 	bl	8005338 <LL_RTC_ExitInitMode>
}
 8005430:	4638      	mov	r0, r7
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 8005434:	21f1      	movs	r1, #241	; 0xf1
 8005436:	482b      	ldr	r0, [pc, #172]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 8005438:	f7fb fd93 	bl	8000f62 <assert_failed>
 800543c:	e7bb      	b.n	80053b6 <LL_RTC_TIME_Init+0x1a>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 800543e:	21f5      	movs	r1, #245	; 0xf5
 8005440:	4828      	ldr	r0, [pc, #160]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 8005442:	f7fb fd8e 	bl	8000f62 <assert_failed>
 8005446:	e7bb      	b.n	80053c0 <LL_RTC_TIME_Init+0x24>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 8005448:	21f6      	movs	r1, #246	; 0xf6
 800544a:	4826      	ldr	r0, [pc, #152]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 800544c:	f7fb fd89 	bl	8000f62 <assert_failed>
 8005450:	e7b9      	b.n	80053c6 <LL_RTC_TIME_Init+0x2a>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 8005452:	21f7      	movs	r1, #247	; 0xf7
 8005454:	4823      	ldr	r0, [pc, #140]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 8005456:	f7fb fd84 	bl	8000f62 <assert_failed>
 800545a:	e7b7      	b.n	80053cc <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 800545c:	7823      	ldrb	r3, [r4, #0]
 800545e:	091a      	lsrs	r2, r3, #4
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005468:	0051      	lsls	r1, r2, #1
 800546a:	440b      	add	r3, r1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b17      	cmp	r3, #23
 8005470:	d81a      	bhi.n	80054a8 <LL_RTC_TIME_Init+0x10c>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 8005472:	7863      	ldrb	r3, [r4, #1]
 8005474:	091a      	lsrs	r2, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800547e:	0051      	lsls	r1, r2, #1
 8005480:	440b      	add	r3, r1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b3b      	cmp	r3, #59	; 0x3b
 8005486:	d814      	bhi.n	80054b2 <LL_RTC_TIME_Init+0x116>
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
 8005488:	78a3      	ldrb	r3, [r4, #2]
 800548a:	091a      	lsrs	r2, r3, #4
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005494:	0051      	lsls	r1, r2, #1
 8005496:	440b      	add	r3, r1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b3b      	cmp	r3, #59	; 0x3b
 800549c:	d996      	bls.n	80053cc <LL_RTC_TIME_Init+0x30>
 800549e:	21fd      	movs	r1, #253	; 0xfd
 80054a0:	4810      	ldr	r0, [pc, #64]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 80054a2:	f7fb fd5e 	bl	8000f62 <assert_failed>
 80054a6:	e791      	b.n	80053cc <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 80054a8:	21fb      	movs	r1, #251	; 0xfb
 80054aa:	480e      	ldr	r0, [pc, #56]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 80054ac:	f7fb fd59 	bl	8000f62 <assert_failed>
 80054b0:	e7df      	b.n	8005472 <LL_RTC_TIME_Init+0xd6>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 80054b2:	21fc      	movs	r1, #252	; 0xfc
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <LL_RTC_TIME_Init+0x148>)
 80054b6:	f7fb fd54 	bl	8000f62 <assert_failed>
 80054ba:	e7e5      	b.n	8005488 <LL_RTC_TIME_Init+0xec>
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 80054bc:	7823      	ldrb	r3, [r4, #0]
                        ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 80054be:	7862      	ldrb	r2, [r4, #1]
 80054c0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80054c4:	0091      	lsls	r1, r2, #2
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 80054c6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80054ca:	fb02 1303 	mla	r3, r2, r3, r1
                        ((uint32_t)RTC_TimeStruct->Seconds));
 80054ce:	78a2      	ldrb	r2, [r4, #2]
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 80054d0:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 80054d2:	0c1a      	lsrs	r2, r3, #16
 80054d4:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 80054da:	2701      	movs	r7, #1
 80054dc:	e7a5      	b.n	800542a <LL_RTC_TIME_Init+0x8e>
 80054de:	bf00      	nop
 80054e0:	40002800 	.word	0x40002800
 80054e4:	0800f224 	.word	0x0800f224

080054e8 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80054e8:	b510      	push	{r4, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80054ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f2:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <LL_RTC_WaitForSynchro+0x58>)
 80054f6:	4298      	cmp	r0, r3
 80054f8:	d004      	beq.n	8005504 <LL_RTC_WaitForSynchro+0x1c>
 80054fa:	f240 2101 	movw	r1, #513	; 0x201
 80054fe:	4811      	ldr	r0, [pc, #68]	; (8005544 <LL_RTC_WaitForSynchro+0x5c>)
 8005500:	f7fb fd2f 	bl	8000f62 <assert_failed>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	f023 0308 	bic.w	r3, r3, #8
 800550a:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  ErrorStatus status = SUCCESS;
 8005512:	2001      	movs	r0, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8005514:	9a01      	ldr	r2, [sp, #4]
 8005516:	b182      	cbz	r2, 800553a <LL_RTC_WaitForSynchro+0x52>
 8005518:	b17b      	cbz	r3, 800553a <LL_RTC_WaitForSynchro+0x52>
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <LL_RTC_WaitForSynchro+0x60>)
 800551c:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800551e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005522:	d002      	beq.n	800552a <LL_RTC_WaitForSynchro+0x42>
    {
      timeout--;
 8005524:	9b01      	ldr	r3, [sp, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    if (timeout == 0U)
 8005530:	9a01      	ldr	r2, [sp, #4]
 8005532:	2a00      	cmp	r2, #0
 8005534:	d1ee      	bne.n	8005514 <LL_RTC_WaitForSynchro+0x2c>
    {
      status = ERROR;
 8005536:	2000      	movs	r0, #0
 8005538:	e7ec      	b.n	8005514 <LL_RTC_WaitForSynchro+0x2c>
    }
  }

  return (status);
}
 800553a:	b002      	add	sp, #8
 800553c:	bd10      	pop	{r4, pc}
 800553e:	bf00      	nop
 8005540:	40002800 	.word	0x40002800
 8005544:	0800f224 	.word	0x0800f224
 8005548:	e000e010 	.word	0xe000e010

0800554c <LL_RTC_Init>:
{
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4604      	mov	r4, r0
 8005550:	460d      	mov	r5, r1
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8005552:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <LL_RTC_Init+0xb8>)
 8005554:	4298      	cmp	r0, r3
 8005556:	d003      	beq.n	8005560 <LL_RTC_Init+0x14>
 8005558:	21ae      	movs	r1, #174	; 0xae
 800555a:	482b      	ldr	r0, [pc, #172]	; (8005608 <LL_RTC_Init+0xbc>)
 800555c:	f7fb fd01 	bl	8000f62 <assert_failed>
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005566:	d210      	bcs.n	800558a <LL_RTC_Init+0x3e>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 8005568:	686b      	ldr	r3, [r5, #4]
 800556a:	b13b      	cbz	r3, 800557c <LL_RTC_Init+0x30>
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d005      	beq.n	800557c <LL_RTC_Init+0x30>
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d002      	beq.n	800557c <LL_RTC_Init+0x30>
 8005576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557a:	d10b      	bne.n	8005594 <LL_RTC_Init+0x48>
  if(LL_RTC_WaitForSynchro(RTCx) != ERROR)
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff ffb3 	bl	80054e8 <LL_RTC_WaitForSynchro>
 8005582:	4603      	mov	r3, r0
 8005584:	b958      	cbnz	r0, 800559e <LL_RTC_Init+0x52>
}
 8005586:	4618      	mov	r0, r3
 8005588:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 800558a:	21af      	movs	r1, #175	; 0xaf
 800558c:	481e      	ldr	r0, [pc, #120]	; (8005608 <LL_RTC_Init+0xbc>)
 800558e:	f7fb fce8 	bl	8000f62 <assert_failed>
 8005592:	e7e9      	b.n	8005568 <LL_RTC_Init+0x1c>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 8005594:	21b0      	movs	r1, #176	; 0xb0
 8005596:	481c      	ldr	r0, [pc, #112]	; (8005608 <LL_RTC_Init+0xbc>)
 8005598:	f7fb fce3 	bl	8000f62 <assert_failed>
 800559c:	e7ee      	b.n	800557c <LL_RTC_Init+0x30>
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800559e:	4620      	mov	r0, r4
 80055a0:	f7ff fe98 	bl	80052d4 <LL_RTC_EnterInitMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0ed      	beq.n	8005586 <LL_RTC_Init+0x3a>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	f023 0302 	bic.w	r3, r3, #2
 80055b0:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6063      	str	r3, [r4, #4]
      if(RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 80055c2:	686b      	ldr	r3, [r5, #4]
 80055c4:	b123      	cbz	r3, 80055d0 <LL_RTC_Init+0x84>
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <LL_RTC_Init+0xc0>)
 80055c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 80055d0:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 80055d2:	490e      	ldr	r1, [pc, #56]	; (800560c <LL_RTC_Init+0xc0>)
 80055d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80055d6:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 80055da:	4313      	orrs	r3, r2
 80055dc:	62cb      	str	r3, [r1, #44]	; 0x2c
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80055de:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 80055e0:	68a2      	ldr	r2, [r4, #8]
 80055e2:	f022 020f 	bic.w	r2, r2, #15
 80055e6:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80055ea:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 80055ec:	68e3      	ldr	r3, [r4, #12]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	b289      	uxth	r1, r1
 80055f4:	430b      	orrs	r3, r1
 80055f6:	60e3      	str	r3, [r4, #12]
      LL_RTC_ExitInitMode(RTCx);      
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7ff fe9d 	bl	8005338 <LL_RTC_ExitInitMode>
      status = SUCCESS;
 80055fe:	2301      	movs	r3, #1
 8005600:	e7c1      	b.n	8005586 <LL_RTC_Init+0x3a>
 8005602:	bf00      	nop
 8005604:	40002800 	.word	0x40002800
 8005608:	0800f224 	.word	0x0800f224
 800560c:	40006c00 	.word	0x40006c00

08005610 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <SDMMC_GetCmdError+0x34>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <SDMMC_GetCmdError+0x38>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	0a5a      	lsrs	r2, r3, #9
 800561c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005620:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	b14b      	cbz	r3, 800563c <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005628:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 800562a:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800562c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005630:	d0f8      	beq.n	8005624 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005632:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005636:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800563c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000000 	.word	0x20000000
 8005648:	10624dd3 	.word	0x10624dd3

0800564c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <SDMMC_GetCmdResp2+0x54>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <SDMMC_GetCmdResp2+0x58>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a5a      	lsrs	r2, r3, #9
 8005658:	f241 3388 	movw	r3, #5000	; 0x1388
 800565c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005660:	1e5a      	subs	r2, r3, #1
 8005662:	b1cb      	cbz	r3, 8005698 <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005664:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005666:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005668:	f011 0f45 	tst.w	r1, #69	; 0x45
 800566c:	d0f8      	beq.n	8005660 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800566e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005670:	f013 0f04 	tst.w	r3, #4
 8005674:	d108      	bne.n	8005688 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005676:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005678:	f013 0f01 	tst.w	r3, #1
 800567c:	d108      	bne.n	8005690 <SDMMC_GetCmdResp2+0x44>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800567e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005682:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005684:	2000      	movs	r0, #0
 8005686:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005688:	2304      	movs	r3, #4
 800568a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800568c:	4618      	mov	r0, r3
 800568e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005690:	2301      	movs	r3, #1
 8005692:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005694:	4618      	mov	r0, r3
 8005696:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005698:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000000 	.word	0x20000000
 80056a4:	10624dd3 	.word	0x10624dd3

080056a8 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <SDMMC_GetCmdResp3+0x44>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a10      	ldr	r2, [pc, #64]	; (80056f0 <SDMMC_GetCmdResp3+0x48>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a5a      	lsrs	r2, r3, #9
 80056b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80056b8:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80056bc:	1e5a      	subs	r2, r3, #1
 80056be:	b18b      	cbz	r3, 80056e4 <SDMMC_GetCmdResp3+0x3c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80056c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80056c2:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80056c4:	f011 0f45 	tst.w	r1, #69	; 0x45
 80056c8:	d0f8      	beq.n	80056bc <SDMMC_GetCmdResp3+0x14>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056cc:	f013 0f04 	tst.w	r3, #4
 80056d0:	d104      	bne.n	80056dc <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80056d2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80056d6:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056d8:	2000      	movs	r0, #0
 80056da:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056dc:	2304      	movs	r3, #4
 80056de:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056e0:	4618      	mov	r0, r3
 80056e2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80056e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000000 	.word	0x20000000
 80056f0:	10624dd3 	.word	0x10624dd3

080056f4 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <SDMMC_GetCmdResp7+0x4c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a12      	ldr	r2, [pc, #72]	; (8005744 <SDMMC_GetCmdResp7+0x50>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	0a5a      	lsrs	r2, r3, #9
 8005700:	f241 3388 	movw	r3, #5000	; 0x1388
 8005704:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	b1a3      	cbz	r3, 8005736 <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800570c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 800570e:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005710:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005714:	d0f8      	beq.n	8005708 <SDMMC_GetCmdResp7+0x14>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005716:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005718:	f013 0f04 	tst.w	r3, #4
 800571c:	d107      	bne.n	800572e <SDMMC_GetCmdResp7+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800571e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005720:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005724:	d00a      	beq.n	800573c <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800572a:	2000      	movs	r0, #0
 800572c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800572e:	2340      	movs	r3, #64	; 0x40
 8005730:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005732:	2004      	movs	r0, #4
 8005734:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005736:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800573a:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800573c:	2000      	movs	r0, #0
  
}
 800573e:	4770      	bx	lr
 8005740:	20000000 	.word	0x20000000
 8005744:	10624dd3 	.word	0x10624dd3

08005748 <SDIO_Init>:
{
 8005748:	b084      	sub	sp, #16
 800574a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574e:	4606      	mov	r6, r0
 8005750:	a809      	add	r0, sp, #36	; 0x24
 8005752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <SDIO_Init+0xd0>)
 8005758:	429e      	cmp	r6, r3
 800575a:	d003      	beq.n	8005764 <SDIO_Init+0x1c>
 800575c:	21e7      	movs	r1, #231	; 0xe7
 800575e:	482f      	ldr	r0, [pc, #188]	; (800581c <SDIO_Init+0xd4>)
 8005760:	f7fb fbff 	bl	8000f62 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8005764:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005768:	f1b9 0f00 	cmp.w	r9, #0
 800576c:	d002      	beq.n	8005774 <SDIO_Init+0x2c>
 800576e:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8005772:	d133      	bne.n	80057dc <SDIO_Init+0x94>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8005774:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005778:	f1ba 0f00 	cmp.w	sl, #0
 800577c:	d002      	beq.n	8005784 <SDIO_Init+0x3c>
 800577e:	f5ba 6f80 	cmp.w	sl, #1024	; 0x400
 8005782:	d130      	bne.n	80057e6 <SDIO_Init+0x9e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8005784:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005788:	f1b8 0f00 	cmp.w	r8, #0
 800578c:	d002      	beq.n	8005794 <SDIO_Init+0x4c>
 800578e:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8005792:	d12d      	bne.n	80057f0 <SDIO_Init+0xa8>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8005794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005796:	b12d      	cbz	r5, 80057a4 <SDIO_Init+0x5c>
 8005798:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800579c:	d002      	beq.n	80057a4 <SDIO_Init+0x5c>
 800579e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80057a2:	d12a      	bne.n	80057fa <SDIO_Init+0xb2>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 80057a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80057a6:	b117      	cbz	r7, 80057ae <SDIO_Init+0x66>
 80057a8:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 80057ac:	d12a      	bne.n	8005804 <SDIO_Init+0xbc>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 80057ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80057b0:	2cff      	cmp	r4, #255	; 0xff
 80057b2:	d82c      	bhi.n	800580e <SDIO_Init+0xc6>
  tmpreg |= (Init.ClockEdge           |\
 80057b4:	ea49 090a 	orr.w	r9, r9, sl
             Init.ClockBypass         |\
 80057b8:	ea48 0809 	orr.w	r8, r8, r9
             Init.ClockPowerSave      |\
 80057bc:	ea45 0508 	orr.w	r5, r5, r8
             Init.BusWide             |\
 80057c0:	433d      	orrs	r5, r7
             Init.HardwareFlowControl |\
 80057c2:	432c      	orrs	r4, r5
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80057c4:	6873      	ldr	r3, [r6, #4]
 80057c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80057ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057ce:	431c      	orrs	r4, r3
 80057d0:	6074      	str	r4, [r6, #4]
}
 80057d2:	2000      	movs	r0, #0
 80057d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	b004      	add	sp, #16
 80057da:	4770      	bx	lr
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 80057dc:	21e8      	movs	r1, #232	; 0xe8
 80057de:	480f      	ldr	r0, [pc, #60]	; (800581c <SDIO_Init+0xd4>)
 80057e0:	f7fb fbbf 	bl	8000f62 <assert_failed>
 80057e4:	e7c6      	b.n	8005774 <SDIO_Init+0x2c>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 80057e6:	21e9      	movs	r1, #233	; 0xe9
 80057e8:	480c      	ldr	r0, [pc, #48]	; (800581c <SDIO_Init+0xd4>)
 80057ea:	f7fb fbba 	bl	8000f62 <assert_failed>
 80057ee:	e7c9      	b.n	8005784 <SDIO_Init+0x3c>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80057f0:	21ea      	movs	r1, #234	; 0xea
 80057f2:	480a      	ldr	r0, [pc, #40]	; (800581c <SDIO_Init+0xd4>)
 80057f4:	f7fb fbb5 	bl	8000f62 <assert_failed>
 80057f8:	e7cc      	b.n	8005794 <SDIO_Init+0x4c>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 80057fa:	21eb      	movs	r1, #235	; 0xeb
 80057fc:	4807      	ldr	r0, [pc, #28]	; (800581c <SDIO_Init+0xd4>)
 80057fe:	f7fb fbb0 	bl	8000f62 <assert_failed>
 8005802:	e7cf      	b.n	80057a4 <SDIO_Init+0x5c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8005804:	21ec      	movs	r1, #236	; 0xec
 8005806:	4805      	ldr	r0, [pc, #20]	; (800581c <SDIO_Init+0xd4>)
 8005808:	f7fb fbab 	bl	8000f62 <assert_failed>
 800580c:	e7cf      	b.n	80057ae <SDIO_Init+0x66>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 800580e:	21ed      	movs	r1, #237	; 0xed
 8005810:	4802      	ldr	r0, [pc, #8]	; (800581c <SDIO_Init+0xd4>)
 8005812:	f7fb fba6 	bl	8000f62 <assert_failed>
 8005816:	e7cd      	b.n	80057b4 <SDIO_Init+0x6c>
 8005818:	40018000 	.word	0x40018000
 800581c:	0800f25c 	.word	0x0800f25c

08005820 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8005820:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8005824:	4770      	bx	lr

08005826 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8005826:	680b      	ldr	r3, [r1, #0]
 8005828:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800582c:	2000      	movs	r0, #0
 800582e:	4770      	bx	lr

08005830 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005830:	2303      	movs	r3, #3
 8005832:	6003      	str	r3, [r0, #0]
}
 8005834:	2000      	movs	r0, #0
 8005836:	4770      	bx	lr

08005838 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005838:	6800      	ldr	r0, [r0, #0]
}
 800583a:	f000 0003 	and.w	r0, r0, #3
 800583e:	4770      	bx	lr

08005840 <SDIO_SendCommand>:
{
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4605      	mov	r5, r0
 8005844:	460c      	mov	r4, r1
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 8005846:	684b      	ldr	r3, [r1, #4]
 8005848:	2b3f      	cmp	r3, #63	; 0x3f
 800584a:	d829      	bhi.n	80058a0 <SDIO_SendCommand+0x60>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	b11b      	cbz	r3, 8005858 <SDIO_SendCommand+0x18>
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d001      	beq.n	8005858 <SDIO_SendCommand+0x18>
 8005854:	2bc0      	cmp	r3, #192	; 0xc0
 8005856:	d129      	bne.n	80058ac <SDIO_SendCommand+0x6c>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	b12b      	cbz	r3, 8005868 <SDIO_SendCommand+0x28>
 800585c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005860:	d002      	beq.n	8005868 <SDIO_SendCommand+0x28>
 8005862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005866:	d127      	bne.n	80058b8 <SDIO_SendCommand+0x78>
  assert_param(IS_SDIO_CPSM(Command->CPSM));
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b13b      	cbz	r3, 800587c <SDIO_SendCommand+0x3c>
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d004      	beq.n	800587c <SDIO_SendCommand+0x3c>
 8005872:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8005876:	4813      	ldr	r0, [pc, #76]	; (80058c4 <SDIO_SendCommand+0x84>)
 8005878:	f7fb fb73 	bl	8000f62 <assert_failed>
  SDIOx->ARG = Command->Argument;
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005880:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 8005882:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005884:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8005886:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 8005888:	4313      	orrs	r3, r2
                       Command->CPSM);
 800588a:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 800588c:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800588e:	68ea      	ldr	r2, [r5, #12]
 8005890:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005894:	f022 020f 	bic.w	r2, r2, #15
 8005898:	4313      	orrs	r3, r2
 800589a:	60eb      	str	r3, [r5, #12]
}
 800589c:	2000      	movs	r0, #0
 800589e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 80058a0:	f240 1173 	movw	r1, #371	; 0x173
 80058a4:	4807      	ldr	r0, [pc, #28]	; (80058c4 <SDIO_SendCommand+0x84>)
 80058a6:	f7fb fb5c 	bl	8000f62 <assert_failed>
 80058aa:	e7cf      	b.n	800584c <SDIO_SendCommand+0xc>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 80058ac:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80058b0:	4804      	ldr	r0, [pc, #16]	; (80058c4 <SDIO_SendCommand+0x84>)
 80058b2:	f7fb fb56 	bl	8000f62 <assert_failed>
 80058b6:	e7cf      	b.n	8005858 <SDIO_SendCommand+0x18>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 80058b8:	f240 1175 	movw	r1, #373	; 0x175
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <SDIO_SendCommand+0x84>)
 80058be:	f7fb fb50 	bl	8000f62 <assert_failed>
 80058c2:	e7d1      	b.n	8005868 <SDIO_SendCommand+0x28>
 80058c4:	0800f25c 	.word	0x0800f25c

080058c8 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80058c8:	6900      	ldr	r0, [r0, #16]
}
 80058ca:	b2c0      	uxtb	r0, r0
 80058cc:	4770      	bx	lr
	...

080058d0 <SDIO_GetResponse>:
{
 80058d0:	b530      	push	{r4, r5, lr}
 80058d2:	b083      	sub	sp, #12
 80058d4:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDIO_RESP(Response));
 80058da:	460d      	mov	r5, r1
 80058dc:	b151      	cbz	r1, 80058f4 <SDIO_GetResponse+0x24>
 80058de:	2904      	cmp	r1, #4
 80058e0:	d008      	beq.n	80058f4 <SDIO_GetResponse+0x24>
 80058e2:	2908      	cmp	r1, #8
 80058e4:	d006      	beq.n	80058f4 <SDIO_GetResponse+0x24>
 80058e6:	290c      	cmp	r1, #12
 80058e8:	d004      	beq.n	80058f4 <SDIO_GetResponse+0x24>
 80058ea:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80058ee:	4805      	ldr	r0, [pc, #20]	; (8005904 <SDIO_GetResponse+0x34>)
 80058f0:	f7fb fb37 	bl	8000f62 <assert_failed>
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80058f4:	3414      	adds	r4, #20
 80058f6:	442c      	add	r4, r5
 80058f8:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
}  
 80058fe:	b003      	add	sp, #12
 8005900:	bd30      	pop	{r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	0800f25c 	.word	0x0800f25c

08005908 <SDMMC_GetCmdResp1>:
{
 8005908:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800590a:	4b51      	ldr	r3, [pc, #324]	; (8005a50 <SDMMC_GetCmdResp1+0x148>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4c51      	ldr	r4, [pc, #324]	; (8005a54 <SDMMC_GetCmdResp1+0x14c>)
 8005910:	fba4 4303 	umull	r4, r3, r4, r3
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800591a:	1e53      	subs	r3, r2, #1
 800591c:	2a00      	cmp	r2, #0
 800591e:	d05e      	beq.n	80059de <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005920:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005922:	461a      	mov	r2, r3
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005924:	f014 0f45 	tst.w	r4, #69	; 0x45
 8005928:	d0f7      	beq.n	800591a <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800592a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800592c:	f013 0f04 	tst.w	r3, #4
 8005930:	d107      	bne.n	8005942 <SDMMC_GetCmdResp1+0x3a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005932:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005934:	f013 0f01 	tst.w	r3, #1
 8005938:	d007      	beq.n	800594a <SDMMC_GetCmdResp1+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800593a:	2301      	movs	r3, #1
 800593c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800593e:	4618      	mov	r0, r3
 8005940:	e04f      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005942:	2304      	movs	r3, #4
 8005944:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005946:	4618      	mov	r0, r3
 8005948:	e04b      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
 800594a:	460d      	mov	r5, r1
 800594c:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800594e:	f7ff ffbb 	bl	80058c8 <SDIO_GetCommandResponse>
 8005952:	42a8      	cmp	r0, r5
 8005954:	d001      	beq.n	800595a <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005956:	2001      	movs	r0, #1
 8005958:	e043      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800595a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800595e:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005960:	2100      	movs	r1, #0
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff ffb4 	bl	80058d0 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <SDMMC_GetCmdResp1+0x150>)
 800596a:	4003      	ands	r3, r0
 800596c:	b3d3      	cbz	r3, 80059e4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800596e:	2800      	cmp	r0, #0
 8005970:	db3a      	blt.n	80059e8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005972:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005976:	d13a      	bne.n	80059ee <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005978:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800597c:	d139      	bne.n	80059f2 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800597e:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8005982:	d138      	bne.n	80059f6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005984:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8005988:	d138      	bne.n	80059fc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800598a:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800598e:	d138      	bne.n	8005a02 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005990:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005994:	d138      	bne.n	8005a08 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005996:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800599a:	d138      	bne.n	8005a0e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800599c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80059a0:	d138      	bne.n	8005a14 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80059a2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80059a6:	d138      	bne.n	8005a1a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80059a8:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80059ac:	d138      	bne.n	8005a20 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80059ae:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80059b2:	d138      	bne.n	8005a26 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80059b4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80059b8:	d138      	bne.n	8005a2c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80059ba:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80059be:	d138      	bne.n	8005a32 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80059c0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80059c4:	d138      	bne.n	8005a38 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80059c6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80059ca:	d138      	bne.n	8005a3e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80059cc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80059d0:	d138      	bne.n	8005a44 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80059d2:	f010 0f08 	tst.w	r0, #8
 80059d6:	d038      	beq.n	8005a4a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80059d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80059dc:	e001      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 80059de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7fc      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80059ec:	e7f9      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059ee:	2040      	movs	r0, #64	; 0x40
 80059f0:	e7f7      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059f2:	2080      	movs	r0, #128	; 0x80
 80059f4:	e7f5      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80059fa:	e7f2      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80059fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005a00:	e7ef      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a06:	e7ec      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a0c:	e7e9      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a12:	e7e6      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a18:	e7e3      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a1e:	e7e0      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 8005a20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a24:	e7dd      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005a2a:	e7da      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005a30:	e7d7      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a36:	e7d4      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005a38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a3c:	e7d1      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005a3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005a42:	e7ce      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8005a44:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005a48:	e7cb      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a4a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005a4e:	e7c8      	b.n	80059e2 <SDMMC_GetCmdResp1+0xda>
 8005a50:	20000000 	.word	0x20000000
 8005a54:	10624dd3 	.word	0x10624dd3
 8005a58:	fdffe008 	.word	0xfdffe008

08005a5c <SDMMC_GetCmdResp6>:
{
 8005a5c:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <SDMMC_GetCmdResp6+0x98>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4c25      	ldr	r4, [pc, #148]	; (8005af8 <SDMMC_GetCmdResp6+0x9c>)
 8005a64:	fba4 4303 	umull	r4, r3, r4, r3
 8005a68:	0a5c      	lsrs	r4, r3, #9
 8005a6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a6e:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8005a72:	1e5c      	subs	r4, r3, #1
 8005a74:	b3a3      	cbz	r3, 8005ae0 <SDMMC_GetCmdResp6+0x84>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005a76:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005a78:	4623      	mov	r3, r4
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005a7a:	f015 0f45 	tst.w	r5, #69	; 0x45
 8005a7e:	d0f8      	beq.n	8005a72 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a82:	f013 0f04 	tst.w	r3, #4
 8005a86:	d107      	bne.n	8005a98 <SDMMC_GetCmdResp6+0x3c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005a8a:	f013 0f01 	tst.w	r3, #1
 8005a8e:	d007      	beq.n	8005aa0 <SDMMC_GetCmdResp6+0x44>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a90:	2301      	movs	r3, #1
 8005a92:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a94:	4618      	mov	r0, r3
 8005a96:	e025      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a98:	2304      	movs	r3, #4
 8005a9a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	e021      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005aa6:	f7ff ff0f 	bl	80058c8 <SDIO_GetCommandResponse>
 8005aaa:	42a8      	cmp	r0, r5
 8005aac:	d001      	beq.n	8005ab2 <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aae:	2001      	movs	r0, #1
 8005ab0:	e018      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005ab2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005ab6:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff ff08 	bl	80058d0 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005ac0:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8005ac4:	d008      	beq.n	8005ad8 <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005ac6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005aca:	d10c      	bne.n	8005ae6 <SDMMC_GetCmdResp6+0x8a>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005acc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005ad0:	d00c      	beq.n	8005aec <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ad2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005ad6:	e005      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ad8:	0c00      	lsrs	r0, r0, #16
 8005ada:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8005adc:	2000      	movs	r0, #0
 8005ade:	e001      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
      return SDMMC_ERROR_TIMEOUT;
 8005ae0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ae6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005aea:	e7fb      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005aec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005af0:	e7f8      	b.n	8005ae4 <SDMMC_GetCmdResp6+0x88>
 8005af2:	bf00      	nop
 8005af4:	20000000 	.word	0x20000000
 8005af8:	10624dd3 	.word	0x10624dd3

08005afc <SDIO_ConfigData>:
{
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	460c      	mov	r4, r1
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8005b02:	684b      	ldr	r3, [r1, #4]
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b08:	d23f      	bcs.n	8005b8a <SDIO_ConfigData+0x8e>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 8005b0a:	68a3      	ldr	r3, [r4, #8]
 8005b0c:	b1db      	cbz	r3, 8005b46 <SDIO_ConfigData+0x4a>
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d019      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d017      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b16:	2b30      	cmp	r3, #48	; 0x30
 8005b18:	d015      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d013      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b1e:	2b50      	cmp	r3, #80	; 0x50
 8005b20:	d011      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b22:	2b60      	cmp	r3, #96	; 0x60
 8005b24:	d00f      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b26:	2b70      	cmp	r3, #112	; 0x70
 8005b28:	d00d      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d00b      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b2e:	2b90      	cmp	r3, #144	; 0x90
 8005b30:	d009      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b32:	2ba0      	cmp	r3, #160	; 0xa0
 8005b34:	d007      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b36:	2bb0      	cmp	r3, #176	; 0xb0
 8005b38:	d005      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b3c:	d003      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b3e:	2bd0      	cmp	r3, #208	; 0xd0
 8005b40:	d001      	beq.n	8005b46 <SDIO_ConfigData+0x4a>
 8005b42:	2be0      	cmp	r3, #224	; 0xe0
 8005b44:	d127      	bne.n	8005b96 <SDIO_ConfigData+0x9a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	b10b      	cbz	r3, 8005b4e <SDIO_ConfigData+0x52>
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d129      	bne.n	8005ba2 <SDIO_ConfigData+0xa6>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	b10b      	cbz	r3, 8005b56 <SDIO_ConfigData+0x5a>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d12b      	bne.n	8005bae <SDIO_ConfigData+0xb2>
  assert_param(IS_SDIO_DPSM(Data->DPSM));
 8005b56:	6963      	ldr	r3, [r4, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d904      	bls.n	8005b66 <SDIO_ConfigData+0x6a>
 8005b5c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8005b60:	4816      	ldr	r0, [pc, #88]	; (8005bbc <SDIO_ConfigData+0xc0>)
 8005b62:	f7fb f9fe 	bl	8000f62 <assert_failed>
  SDIOx->DTIMER = Data->DataTimeOut;
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	626b      	str	r3, [r5, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b6e:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 8005b70:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b72:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8005b74:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 8005b76:	4313      	orrs	r3, r2
                       Data->DPSM);
 8005b78:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8005b7a:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005b7c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005b7e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8005b82:	4313      	orrs	r3, r2
 8005b84:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8005b86:	2000      	movs	r0, #0
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8005b8a:	f240 11b7 	movw	r1, #439	; 0x1b7
 8005b8e:	480b      	ldr	r0, [pc, #44]	; (8005bbc <SDIO_ConfigData+0xc0>)
 8005b90:	f7fb f9e7 	bl	8000f62 <assert_failed>
 8005b94:	e7b9      	b.n	8005b0a <SDIO_ConfigData+0xe>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 8005b96:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005b9a:	4808      	ldr	r0, [pc, #32]	; (8005bbc <SDIO_ConfigData+0xc0>)
 8005b9c:	f7fb f9e1 	bl	8000f62 <assert_failed>
 8005ba0:	e7d1      	b.n	8005b46 <SDIO_ConfigData+0x4a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 8005ba2:	f240 11b9 	movw	r1, #441	; 0x1b9
 8005ba6:	4805      	ldr	r0, [pc, #20]	; (8005bbc <SDIO_ConfigData+0xc0>)
 8005ba8:	f7fb f9db 	bl	8000f62 <assert_failed>
 8005bac:	e7cf      	b.n	8005b4e <SDIO_ConfigData+0x52>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 8005bae:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8005bb2:	4802      	ldr	r0, [pc, #8]	; (8005bbc <SDIO_ConfigData+0xc0>)
 8005bb4:	f7fb f9d5 	bl	8000f62 <assert_failed>
 8005bb8:	e7cd      	b.n	8005b56 <SDIO_ConfigData+0x5a>
 8005bba:	bf00      	nop
 8005bbc:	0800f25c 	.word	0x0800f25c

08005bc0 <SDMMC_CmdBlockLength>:
{
 8005bc0:	b530      	push	{r4, r5, lr}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005bc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005bc8:	2410      	movs	r4, #16
 8005bca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bcc:	2340      	movs	r3, #64	; 0x40
 8005bce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd8:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bda:	a901      	add	r1, sp, #4
 8005bdc:	f7ff fe30 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4621      	mov	r1, r4
 8005be6:	4628      	mov	r0, r5
 8005be8:	f7ff fe8e 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005bec:	b007      	add	sp, #28
 8005bee:	bd30      	pop	{r4, r5, pc}

08005bf0 <SDMMC_CmdReadSingleBlock>:
{
 8005bf0:	b530      	push	{r4, r5, lr}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005bf6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005bf8:	2411      	movs	r4, #17
 8005bfa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bfc:	2340      	movs	r3, #64	; 0x40
 8005bfe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c00:	2300      	movs	r3, #0
 8005c02:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c08:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c0a:	a901      	add	r1, sp, #4
 8005c0c:	f7ff fe18 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c14:	4621      	mov	r1, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7ff fe76 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005c1c:	b007      	add	sp, #28
 8005c1e:	bd30      	pop	{r4, r5, pc}

08005c20 <SDMMC_CmdReadMultiBlock>:
{
 8005c20:	b530      	push	{r4, r5, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c26:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c28:	2412      	movs	r4, #18
 8005c2a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c30:	2300      	movs	r3, #0
 8005c32:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c38:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c3a:	a901      	add	r1, sp, #4
 8005c3c:	f7ff fe00 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4621      	mov	r1, r4
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7ff fe5e 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005c4c:	b007      	add	sp, #28
 8005c4e:	bd30      	pop	{r4, r5, pc}

08005c50 <SDMMC_CmdWriteSingleBlock>:
{
 8005c50:	b530      	push	{r4, r5, lr}
 8005c52:	b087      	sub	sp, #28
 8005c54:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c56:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005c58:	2418      	movs	r4, #24
 8005c5a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c60:	2300      	movs	r3, #0
 8005c62:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c68:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c6a:	a901      	add	r1, sp, #4
 8005c6c:	f7ff fde8 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	4621      	mov	r1, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	f7ff fe46 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005c7c:	b007      	add	sp, #28
 8005c7e:	bd30      	pop	{r4, r5, pc}

08005c80 <SDMMC_CmdWriteMultiBlock>:
{
 8005c80:	b530      	push	{r4, r5, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c86:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005c88:	2419      	movs	r4, #25
 8005c8a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c8c:	2340      	movs	r3, #64	; 0x40
 8005c8e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c90:	2300      	movs	r3, #0
 8005c92:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c98:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c9a:	a901      	add	r1, sp, #4
 8005c9c:	f7ff fdd0 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff fe2e 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005cac:	b007      	add	sp, #28
 8005cae:	bd30      	pop	{r4, r5, pc}

08005cb0 <SDMMC_CmdStopTransfer>:
{
 8005cb0:	b530      	push	{r4, r5, lr}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005cba:	240c      	movs	r4, #12
 8005cbc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cc2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc8:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cca:	a901      	add	r1, sp, #4
 8005ccc:	f7ff fdb8 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8005cd0:	4a03      	ldr	r2, [pc, #12]	; (8005ce0 <SDMMC_CmdStopTransfer+0x30>)
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7ff fe17 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005cda:	b007      	add	sp, #28
 8005cdc:	bd30      	pop	{r4, r5, pc}
 8005cde:	bf00      	nop
 8005ce0:	05f5e100 	.word	0x05f5e100

08005ce4 <SDMMC_CmdSelDesel>:
{
 8005ce4:	b530      	push	{r4, r5, lr}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005cea:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005cec:	2407      	movs	r4, #7
 8005cee:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cf0:	2340      	movs	r3, #64	; 0x40
 8005cf2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfc:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cfe:	a901      	add	r1, sp, #4
 8005d00:	f7ff fd9e 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7ff fdfc 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005d10:	b007      	add	sp, #28
 8005d12:	bd30      	pop	{r4, r5, pc}

08005d14 <SDMMC_CmdGoIdleState>:
{
 8005d14:	b510      	push	{r4, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d1e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005d20:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d22:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d28:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d2a:	a901      	add	r1, sp, #4
 8005d2c:	f7ff fd88 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7ff fc6d 	bl	8005610 <SDMMC_GetCmdError>
}
 8005d36:	b006      	add	sp, #24
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <SDMMC_CmdOperCond>:
{
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005d40:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005d44:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d46:	2308      	movs	r3, #8
 8005d48:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4a:	2340      	movs	r3, #64	; 0x40
 8005d4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d56:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d58:	a901      	add	r1, sp, #4
 8005d5a:	f7ff fd71 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff fcc8 	bl	80056f4 <SDMMC_GetCmdResp7>
}
 8005d64:	b006      	add	sp, #24
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <SDMMC_CmdAppCommand>:
{
 8005d68:	b530      	push	{r4, r5, lr}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005d6e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005d70:	2437      	movs	r4, #55	; 0x37
 8005d72:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d80:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d82:	a901      	add	r1, sp, #4
 8005d84:	f7ff fd5c 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f7ff fdba 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005d94:	b007      	add	sp, #28
 8005d96:	bd30      	pop	{r4, r5, pc}

08005d98 <SDMMC_CmdAppOperCommand>:
{
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005d9e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005da2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005da6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005da8:	2329      	movs	r3, #41	; 0x29
 8005daa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dac:	2340      	movs	r3, #64	; 0x40
 8005dae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005db0:	2300      	movs	r3, #0
 8005db2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db8:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dba:	a901      	add	r1, sp, #4
 8005dbc:	f7ff fd40 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fc71 	bl	80056a8 <SDMMC_GetCmdResp3>
}
 8005dc6:	b006      	add	sp, #24
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <SDMMC_CmdBusWidth>:
{
 8005dca:	b530      	push	{r4, r5, lr}
 8005dcc:	b087      	sub	sp, #28
 8005dce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005dd0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005dd2:	2406      	movs	r4, #6
 8005dd4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd6:	2340      	movs	r3, #64	; 0x40
 8005dd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de4:	a901      	add	r1, sp, #4
 8005de6:	f7ff fd2b 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7ff fd89 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005df6:	b007      	add	sp, #28
 8005df8:	bd30      	pop	{r4, r5, pc}

08005dfa <SDMMC_CmdSendSCR>:
{
 8005dfa:	b530      	push	{r4, r5, lr}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005e04:	2433      	movs	r4, #51	; 0x33
 8005e06:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e08:	2240      	movs	r2, #64	; 0x40
 8005e0a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e0c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e14:	a901      	add	r1, sp, #4
 8005e16:	f7ff fd13 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff fd71 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005e26:	b007      	add	sp, #28
 8005e28:	bd30      	pop	{r4, r5, pc}

08005e2a <SDMMC_CmdSendCID>:
{
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005e34:	2202      	movs	r2, #2
 8005e36:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005e38:	22c0      	movs	r2, #192	; 0xc0
 8005e3a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e3c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e42:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e44:	a901      	add	r1, sp, #4
 8005e46:	f7ff fcfb 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7ff fbfe 	bl	800564c <SDMMC_GetCmdResp2>
}
 8005e50:	b006      	add	sp, #24
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <SDMMC_CmdSendCSD>:
{
 8005e54:	b510      	push	{r4, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005e5c:	2309      	movs	r3, #9
 8005e5e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005e60:	23c0      	movs	r3, #192	; 0xc0
 8005e62:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e64:	2300      	movs	r3, #0
 8005e66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e6e:	a901      	add	r1, sp, #4
 8005e70:	f7ff fce6 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fbe9 	bl	800564c <SDMMC_GetCmdResp2>
}
 8005e7a:	b006      	add	sp, #24
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <SDMMC_CmdSetRelAdd>:
{
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	4605      	mov	r5, r0
 8005e84:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005e8a:	2403      	movs	r4, #3
 8005e8c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e92:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e98:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9a:	a901      	add	r1, sp, #4
 8005e9c:	f7ff fcd0 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff fdd9 	bl	8005a5c <SDMMC_GetCmdResp6>
}
 8005eaa:	b006      	add	sp, #24
 8005eac:	bd70      	pop	{r4, r5, r6, pc}

08005eae <SDMMC_CmdSendStatus>:
{
 8005eae:	b530      	push	{r4, r5, lr}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005eb4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005eb6:	240d      	movs	r4, #13
 8005eb8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec6:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ec8:	a901      	add	r1, sp, #4
 8005eca:	f7ff fcb9 	bl	8005840 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f7ff fd17 	bl	8005908 <SDMMC_GetCmdResp1>
}
 8005eda:	b007      	add	sp, #28
 8005edc:	bd30      	pop	{r4, r5, pc}
	...

08005ee0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 8005ee6:	4b5a      	ldr	r3, [pc, #360]	; (8006050 <LL_SPI_Init+0x170>)
 8005ee8:	4298      	cmp	r0, r3
 8005eea:	d00b      	beq.n	8005f04 <LL_SPI_Init+0x24>
 8005eec:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8005ef0:	4298      	cmp	r0, r3
 8005ef2:	d007      	beq.n	8005f04 <LL_SPI_Init+0x24>
 8005ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef8:	4298      	cmp	r0, r3
 8005efa:	d003      	beq.n	8005f04 <LL_SPI_Init+0x24>
 8005efc:	21c7      	movs	r1, #199	; 0xc7
 8005efe:	4855      	ldr	r0, [pc, #340]	; (8006054 <LL_SPI_Init+0x174>)
 8005f00:	f7fb f82f 	bl	8000f62 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	b143      	cbz	r3, 8005f1a <LL_SPI_Init+0x3a>
 8005f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0c:	d005      	beq.n	8005f1a <LL_SPI_Init+0x3a>
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f12:	d002      	beq.n	8005f1a <LL_SPI_Init+0x3a>
 8005f14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f18:	d15c      	bne.n	8005fd4 <LL_SPI_Init+0xf4>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8005f1a:	6863      	ldr	r3, [r4, #4]
 8005f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f20:	d001      	beq.n	8005f26 <LL_SPI_Init+0x46>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d15b      	bne.n	8005fde <LL_SPI_Init+0xfe>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	b113      	cbz	r3, 8005f30 <LL_SPI_Init+0x50>
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d15b      	bne.n	8005fe8 <LL_SPI_Init+0x108>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8005f30:	68e3      	ldr	r3, [r4, #12]
 8005f32:	b10b      	cbz	r3, 8005f38 <LL_SPI_Init+0x58>
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d15c      	bne.n	8005ff2 <LL_SPI_Init+0x112>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8005f38:	6923      	ldr	r3, [r4, #16]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d85e      	bhi.n	8005ffc <LL_SPI_Init+0x11c>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8005f3e:	6963      	ldr	r3, [r4, #20]
 8005f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f44:	d003      	beq.n	8005f4e <LL_SPI_Init+0x6e>
 8005f46:	b113      	cbz	r3, 8005f4e <LL_SPI_Init+0x6e>
 8005f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f4c:	d15b      	bne.n	8006006 <LL_SPI_Init+0x126>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8005f4e:	69a3      	ldr	r3, [r4, #24]
 8005f50:	b16b      	cbz	r3, 8005f6e <LL_SPI_Init+0x8e>
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d00b      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d009      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f5a:	2b18      	cmp	r3, #24
 8005f5c:	d007      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d005      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f62:	2b28      	cmp	r3, #40	; 0x28
 8005f64:	d003      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f66:	2b30      	cmp	r3, #48	; 0x30
 8005f68:	d001      	beq.n	8005f6e <LL_SPI_Init+0x8e>
 8005f6a:	2b38      	cmp	r3, #56	; 0x38
 8005f6c:	d150      	bne.n	8006010 <LL_SPI_Init+0x130>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8005f6e:	69e3      	ldr	r3, [r4, #28]
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d001      	beq.n	8005f78 <LL_SPI_Init+0x98>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d150      	bne.n	800601a <LL_SPI_Init+0x13a>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8005f78:	6a23      	ldr	r3, [r4, #32]
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7e:	d001      	beq.n	8005f84 <LL_SPI_Init+0xa4>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d14f      	bne.n	8006024 <LL_SPI_Init+0x144>
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8005f84:	682b      	ldr	r3, [r5, #0]

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005f86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f8a:	d15b      	bne.n	8006044 <LL_SPI_Init+0x164>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005f8c:	682a      	ldr	r2, [r5, #0]
 8005f8e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005f92:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	68a1      	ldr	r1, [r4, #8]
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	68e1      	ldr	r1, [r4, #12]
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6921      	ldr	r1, [r4, #16]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	430b      	orrs	r3, r1
 8005fac:	69a1      	ldr	r1, [r4, #24]
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	69e1      	ldr	r1, [r4, #28]
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	6a21      	ldr	r1, [r4, #32]
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	602b      	str	r3, [r5, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005fbc:	686b      	ldr	r3, [r5, #4]
 8005fbe:	f023 0304 	bic.w	r3, r3, #4
 8005fc2:	8ae2      	ldrh	r2, [r4, #22]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	606b      	str	r3, [r5, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005fc8:	6a23      	ldr	r3, [r4, #32]
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fce:	d02e      	beq.n	800602e <LL_SPI_Init+0x14e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e038      	b.n	8006046 <LL_SPI_Init+0x166>
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8005fd4:	21ca      	movs	r1, #202	; 0xca
 8005fd6:	481f      	ldr	r0, [pc, #124]	; (8006054 <LL_SPI_Init+0x174>)
 8005fd8:	f7fa ffc3 	bl	8000f62 <assert_failed>
 8005fdc:	e79d      	b.n	8005f1a <LL_SPI_Init+0x3a>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8005fde:	21cb      	movs	r1, #203	; 0xcb
 8005fe0:	481c      	ldr	r0, [pc, #112]	; (8006054 <LL_SPI_Init+0x174>)
 8005fe2:	f7fa ffbe 	bl	8000f62 <assert_failed>
 8005fe6:	e79e      	b.n	8005f26 <LL_SPI_Init+0x46>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8005fe8:	21cc      	movs	r1, #204	; 0xcc
 8005fea:	481a      	ldr	r0, [pc, #104]	; (8006054 <LL_SPI_Init+0x174>)
 8005fec:	f7fa ffb9 	bl	8000f62 <assert_failed>
 8005ff0:	e79e      	b.n	8005f30 <LL_SPI_Init+0x50>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8005ff2:	21cd      	movs	r1, #205	; 0xcd
 8005ff4:	4817      	ldr	r0, [pc, #92]	; (8006054 <LL_SPI_Init+0x174>)
 8005ff6:	f7fa ffb4 	bl	8000f62 <assert_failed>
 8005ffa:	e79d      	b.n	8005f38 <LL_SPI_Init+0x58>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8005ffc:	21ce      	movs	r1, #206	; 0xce
 8005ffe:	4815      	ldr	r0, [pc, #84]	; (8006054 <LL_SPI_Init+0x174>)
 8006000:	f7fa ffaf 	bl	8000f62 <assert_failed>
 8006004:	e79b      	b.n	8005f3e <LL_SPI_Init+0x5e>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8006006:	21cf      	movs	r1, #207	; 0xcf
 8006008:	4812      	ldr	r0, [pc, #72]	; (8006054 <LL_SPI_Init+0x174>)
 800600a:	f7fa ffaa 	bl	8000f62 <assert_failed>
 800600e:	e79e      	b.n	8005f4e <LL_SPI_Init+0x6e>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8006010:	21d0      	movs	r1, #208	; 0xd0
 8006012:	4810      	ldr	r0, [pc, #64]	; (8006054 <LL_SPI_Init+0x174>)
 8006014:	f7fa ffa5 	bl	8000f62 <assert_failed>
 8006018:	e7a9      	b.n	8005f6e <LL_SPI_Init+0x8e>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 800601a:	21d1      	movs	r1, #209	; 0xd1
 800601c:	480d      	ldr	r0, [pc, #52]	; (8006054 <LL_SPI_Init+0x174>)
 800601e:	f7fa ffa0 	bl	8000f62 <assert_failed>
 8006022:	e7a9      	b.n	8005f78 <LL_SPI_Init+0x98>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8006024:	21d2      	movs	r1, #210	; 0xd2
 8006026:	480b      	ldr	r0, [pc, #44]	; (8006054 <LL_SPI_Init+0x174>)
 8006028:	f7fa ff9b 	bl	8000f62 <assert_failed>
 800602c:	e7aa      	b.n	8005f84 <LL_SPI_Init+0xa4>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 800602e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006030:	b11b      	cbz	r3, 800603a <LL_SPI_Init+0x15a>
 8006032:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006034:	612b      	str	r3, [r5, #16]
    status = SUCCESS;
 8006036:	2001      	movs	r0, #1
 8006038:	e005      	b.n	8006046 <LL_SPI_Init+0x166>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 800603a:	21f5      	movs	r1, #245	; 0xf5
 800603c:	4805      	ldr	r0, [pc, #20]	; (8006054 <LL_SPI_Init+0x174>)
 800603e:	f7fa ff90 	bl	8000f62 <assert_failed>
 8006042:	e7f6      	b.n	8006032 <LL_SPI_Init+0x152>
  ErrorStatus status = ERROR;
 8006044:	2000      	movs	r0, #0
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006046:	69eb      	ldr	r3, [r5, #28]
 8006048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604c:	61eb      	str	r3, [r5, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	40013000 	.word	0x40013000
 8006054:	0800f298 	.word	0x0800f298

08006058 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
  uint32_t tmpcr1 = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 800605e:	4b45      	ldr	r3, [pc, #276]	; (8006174 <LL_TIM_Init+0x11c>)
 8006060:	4298      	cmp	r0, r3
 8006062:	d01f      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	4298      	cmp	r0, r3
 800606a:	d01b      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 800606c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006070:	d018      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 8006072:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8006076:	4298      	cmp	r0, r3
 8006078:	d014      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 800607a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607e:	4298      	cmp	r0, r3
 8006080:	d010      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	4298      	cmp	r0, r3
 8006088:	d00c      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	4298      	cmp	r0, r3
 8006090:	d008      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 8006092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006096:	4298      	cmp	r0, r3
 8006098:	d004      	beq.n	80060a4 <LL_TIM_Init+0x4c>
 800609a:	f240 1159 	movw	r1, #345	; 0x159
 800609e:	4836      	ldr	r0, [pc, #216]	; (8006178 <LL_TIM_Init+0x120>)
 80060a0:	f7fa ff5f 	bl	8000f62 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 80060a4:	686b      	ldr	r3, [r5, #4]
 80060a6:	b13b      	cbz	r3, 80060b8 <LL_TIM_Init+0x60>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d005      	beq.n	80060b8 <LL_TIM_Init+0x60>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d003      	beq.n	80060b8 <LL_TIM_Init+0x60>
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d001      	beq.n	80060b8 <LL_TIM_Init+0x60>
 80060b4:	2b60      	cmp	r3, #96	; 0x60
 80060b6:	d150      	bne.n	800615a <LL_TIM_Init+0x102>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 80060b8:	68eb      	ldr	r3, [r5, #12]
 80060ba:	b12b      	cbz	r3, 80060c8 <LL_TIM_Init+0x70>
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c0:	d002      	beq.n	80060c8 <LL_TIM_Init+0x70>
 80060c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c6:	d14e      	bne.n	8006166 <LL_TIM_Init+0x10e>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80060c8:	6823      	ldr	r3, [r4, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ca:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <LL_TIM_Init+0x11c>)
 80060cc:	4294      	cmp	r4, r2
 80060ce:	d012      	beq.n	80060f6 <LL_TIM_Init+0x9e>
 80060d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d4:	4294      	cmp	r4, r2
 80060d6:	d00e      	beq.n	80060f6 <LL_TIM_Init+0x9e>
 80060d8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80060dc:	d00b      	beq.n	80060f6 <LL_TIM_Init+0x9e>
 80060de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80060e2:	4294      	cmp	r4, r2
 80060e4:	d007      	beq.n	80060f6 <LL_TIM_Init+0x9e>
 80060e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ea:	4294      	cmp	r4, r2
 80060ec:	d003      	beq.n	80060f6 <LL_TIM_Init+0x9e>
 80060ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060f2:	4294      	cmp	r4, r2
 80060f4:	d103      	bne.n	80060fe <LL_TIM_Init+0xa6>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	686a      	ldr	r2, [r5, #4]
 80060fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <LL_TIM_Init+0x11c>)
 8006100:	4294      	cmp	r4, r2
 8006102:	d012      	beq.n	800612a <LL_TIM_Init+0xd2>
 8006104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006108:	4294      	cmp	r4, r2
 800610a:	d00e      	beq.n	800612a <LL_TIM_Init+0xd2>
 800610c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006110:	d00b      	beq.n	800612a <LL_TIM_Init+0xd2>
 8006112:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006116:	4294      	cmp	r4, r2
 8006118:	d007      	beq.n	800612a <LL_TIM_Init+0xd2>
 800611a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800611e:	4294      	cmp	r4, r2
 8006120:	d003      	beq.n	800612a <LL_TIM_Init+0xd2>
 8006122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006126:	4294      	cmp	r4, r2
 8006128:	d103      	bne.n	8006132 <LL_TIM_Init+0xda>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	68ea      	ldr	r2, [r5, #12]
 8006130:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006132:	6023      	str	r3, [r4, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006134:	68ab      	ldr	r3, [r5, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006136:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006138:	882b      	ldrh	r3, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800613a:	62a3      	str	r3, [r4, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <LL_TIM_Init+0x11c>)
 800613e:	429c      	cmp	r4, r3
 8006140:	d003      	beq.n	800614a <LL_TIM_Init+0xf2>
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	429c      	cmp	r4, r3
 8006148:	d101      	bne.n	800614e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800614a:	7c2b      	ldrb	r3, [r5, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800614c:	6323      	str	r3, [r4, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800614e:	6963      	ldr	r3, [r4, #20]
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	6163      	str	r3, [r4, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8006156:	2001      	movs	r0, #1
 8006158:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 800615a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800615e:	4806      	ldr	r0, [pc, #24]	; (8006178 <LL_TIM_Init+0x120>)
 8006160:	f7fa feff 	bl	8000f62 <assert_failed>
 8006164:	e7a8      	b.n	80060b8 <LL_TIM_Init+0x60>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8006166:	f240 115b 	movw	r1, #347	; 0x15b
 800616a:	4803      	ldr	r0, [pc, #12]	; (8006178 <LL_TIM_Init+0x120>)
 800616c:	f7fa fef9 	bl	8000f62 <assert_failed>
 8006170:	e7aa      	b.n	80060c8 <LL_TIM_Init+0x70>
 8006172:	bf00      	nop
 8006174:	40012c00 	.word	0x40012c00
 8006178:	0800f2d0 	.word	0x0800f2d0

0800617c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800617c:	b530      	push	{r4, r5, lr}
 800617e:	b085      	sub	sp, #20
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8006184:	4b63      	ldr	r3, [pc, #396]	; (8006314 <LL_USART_Init+0x198>)
 8006186:	4298      	cmp	r0, r3
 8006188:	d013      	beq.n	80061b2 <LL_USART_Init+0x36>
 800618a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800618e:	4298      	cmp	r0, r3
 8006190:	d00f      	beq.n	80061b2 <LL_USART_Init+0x36>
 8006192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006196:	4298      	cmp	r0, r3
 8006198:	d00b      	beq.n	80061b2 <LL_USART_Init+0x36>
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	4298      	cmp	r0, r3
 80061a0:	d007      	beq.n	80061b2 <LL_USART_Init+0x36>
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	4298      	cmp	r0, r3
 80061a8:	d003      	beq.n	80061b2 <LL_USART_Init+0x36>
 80061aa:	21da      	movs	r1, #218	; 0xda
 80061ac:	485a      	ldr	r0, [pc, #360]	; (8006318 <LL_USART_Init+0x19c>)
 80061ae:	f7fa fed8 	bl	8000f62 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	4b59      	ldr	r3, [pc, #356]	; (800631c <LL_USART_Init+0x1a0>)
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d831      	bhi.n	800621e <LL_USART_Init+0xa2>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	b113      	cbz	r3, 80061c4 <LL_USART_Init+0x48>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d131      	bne.n	8006228 <LL_USART_Init+0xac>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80061c4:	68a3      	ldr	r3, [r4, #8]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d006      	beq.n	80061da <LL_USART_Init+0x5e>
 80061cc:	b12b      	cbz	r3, 80061da <LL_USART_Init+0x5e>
 80061ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061d2:	d002      	beq.n	80061da <LL_USART_Init+0x5e>
 80061d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d8:	d12b      	bne.n	8006232 <LL_USART_Init+0xb6>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	b12b      	cbz	r3, 80061ea <LL_USART_Init+0x6e>
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e2:	d002      	beq.n	80061ea <LL_USART_Init+0x6e>
 80061e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e8:	d128      	bne.n	800623c <LL_USART_Init+0xc0>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	b12b      	cbz	r3, 80061fa <LL_USART_Init+0x7e>
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d003      	beq.n	80061fa <LL_USART_Init+0x7e>
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d001      	beq.n	80061fa <LL_USART_Init+0x7e>
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d125      	bne.n	8006246 <LL_USART_Init+0xca>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 80061fa:	6963      	ldr	r3, [r4, #20]
 80061fc:	b143      	cbz	r3, 8006210 <LL_USART_Init+0x94>
 80061fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006202:	d005      	beq.n	8006210 <LL_USART_Init+0x94>
 8006204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006208:	d002      	beq.n	8006210 <LL_USART_Init+0x94>
 800620a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800620e:	d11f      	bne.n	8006250 <LL_USART_Init+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006210:	68eb      	ldr	r3, [r5, #12]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006212:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006216:	d020      	beq.n	800625a <LL_USART_Init+0xde>
  ErrorStatus status = ERROR;
 8006218:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800621a:	b005      	add	sp, #20
 800621c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 800621e:	21db      	movs	r1, #219	; 0xdb
 8006220:	483d      	ldr	r0, [pc, #244]	; (8006318 <LL_USART_Init+0x19c>)
 8006222:	f7fa fe9e 	bl	8000f62 <assert_failed>
 8006226:	e7c8      	b.n	80061ba <LL_USART_Init+0x3e>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8006228:	21dc      	movs	r1, #220	; 0xdc
 800622a:	483b      	ldr	r0, [pc, #236]	; (8006318 <LL_USART_Init+0x19c>)
 800622c:	f7fa fe99 	bl	8000f62 <assert_failed>
 8006230:	e7c8      	b.n	80061c4 <LL_USART_Init+0x48>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8006232:	21dd      	movs	r1, #221	; 0xdd
 8006234:	4838      	ldr	r0, [pc, #224]	; (8006318 <LL_USART_Init+0x19c>)
 8006236:	f7fa fe94 	bl	8000f62 <assert_failed>
 800623a:	e7ce      	b.n	80061da <LL_USART_Init+0x5e>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 800623c:	21de      	movs	r1, #222	; 0xde
 800623e:	4836      	ldr	r0, [pc, #216]	; (8006318 <LL_USART_Init+0x19c>)
 8006240:	f7fa fe8f 	bl	8000f62 <assert_failed>
 8006244:	e7d1      	b.n	80061ea <LL_USART_Init+0x6e>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8006246:	21df      	movs	r1, #223	; 0xdf
 8006248:	4833      	ldr	r0, [pc, #204]	; (8006318 <LL_USART_Init+0x19c>)
 800624a:	f7fa fe8a 	bl	8000f62 <assert_failed>
 800624e:	e7d4      	b.n	80061fa <LL_USART_Init+0x7e>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8006250:	21e0      	movs	r1, #224	; 0xe0
 8006252:	4831      	ldr	r0, [pc, #196]	; (8006318 <LL_USART_Init+0x19c>)
 8006254:	f7fa fe85 	bl	8000f62 <assert_failed>
 8006258:	e7da      	b.n	8006210 <LL_USART_Init+0x94>
    MODIFY_REG(USARTx->CR1,
 800625a:	68eb      	ldr	r3, [r5, #12]
 800625c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006260:	f023 030c 	bic.w	r3, r3, #12
 8006264:	6862      	ldr	r2, [r4, #4]
 8006266:	68e1      	ldr	r1, [r4, #12]
 8006268:	430a      	orrs	r2, r1
 800626a:	6921      	ldr	r1, [r4, #16]
 800626c:	430a      	orrs	r2, r1
 800626e:	4313      	orrs	r3, r2
 8006270:	60eb      	str	r3, [r5, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006272:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006274:	692a      	ldr	r2, [r5, #16]
 8006276:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800627a:	4313      	orrs	r3, r2
 800627c:	612b      	str	r3, [r5, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800627e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006280:	696a      	ldr	r2, [r5, #20]
 8006282:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006286:	4313      	orrs	r3, r2
 8006288:	616b      	str	r3, [r5, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800628a:	4668      	mov	r0, sp
 800628c:	f7ff f812 	bl	80052b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006290:	4b20      	ldr	r3, [pc, #128]	; (8006314 <LL_USART_Init+0x198>)
 8006292:	429d      	cmp	r5, r3
 8006294:	d00d      	beq.n	80062b2 <LL_USART_Init+0x136>
    else if (USARTx == USART2)
 8006296:	4b22      	ldr	r3, [pc, #136]	; (8006320 <LL_USART_Init+0x1a4>)
 8006298:	429d      	cmp	r5, r3
 800629a:	d02f      	beq.n	80062fc <LL_USART_Init+0x180>
    else if (USARTx == USART3)
 800629c:	4b21      	ldr	r3, [pc, #132]	; (8006324 <LL_USART_Init+0x1a8>)
 800629e:	429d      	cmp	r5, r3
 80062a0:	d02e      	beq.n	8006300 <LL_USART_Init+0x184>
    else if (USARTx == UART4)
 80062a2:	4b21      	ldr	r3, [pc, #132]	; (8006328 <LL_USART_Init+0x1ac>)
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d02d      	beq.n	8006304 <LL_USART_Init+0x188>
    else if (USARTx == UART5)
 80062a8:	4b20      	ldr	r3, [pc, #128]	; (800632c <LL_USART_Init+0x1b0>)
 80062aa:	429d      	cmp	r5, r3
 80062ac:	d02c      	beq.n	8006308 <LL_USART_Init+0x18c>
  ErrorStatus status = ERROR;
 80062ae:	2000      	movs	r0, #0
 80062b0:	e7b3      	b.n	800621a <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80062b2:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80062b4:	b353      	cbz	r3, 800630c <LL_USART_Init+0x190>
        && (USART_InitStruct->BaudRate != 0U))
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	b352      	cbz	r2, 8006310 <LL_USART_Init+0x194>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80062ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c8:	4c19      	ldr	r4, [pc, #100]	; (8006330 <LL_USART_Init+0x1b4>)
 80062ca:	fba4 2003 	umull	r2, r0, r4, r3
 80062ce:	0940      	lsrs	r0, r0, #5
 80062d0:	0102      	lsls	r2, r0, #4
 80062d2:	b291      	uxth	r1, r2
 80062d4:	2264      	movs	r2, #100	; 0x64
 80062d6:	fb02 3210 	mls	r2, r2, r0, r3
 80062da:	0113      	lsls	r3, r2, #4
 80062dc:	3332      	adds	r3, #50	; 0x32
 80062de:	fba4 2303 	umull	r2, r3, r4, r3
 80062e2:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80062e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062ea:	440a      	add	r2, r1
 80062ec:	b292      	uxth	r2, r2
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	4413      	add	r3, r2
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	60ab      	str	r3, [r5, #8]
      status = SUCCESS;
 80062f8:	2001      	movs	r0, #1
 80062fa:	e78e      	b.n	800621a <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80062fc:	9b02      	ldr	r3, [sp, #8]
 80062fe:	e7d9      	b.n	80062b4 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006300:	9b02      	ldr	r3, [sp, #8]
 8006302:	e7d7      	b.n	80062b4 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	e7d5      	b.n	80062b4 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006308:	9b02      	ldr	r3, [sp, #8]
 800630a:	e7d3      	b.n	80062b4 <LL_USART_Init+0x138>
  ErrorStatus status = ERROR;
 800630c:	2000      	movs	r0, #0
 800630e:	e784      	b.n	800621a <LL_USART_Init+0x9e>
 8006310:	2000      	movs	r0, #0
 8006312:	e782      	b.n	800621a <LL_USART_Init+0x9e>
 8006314:	40013800 	.word	0x40013800
 8006318:	0800f308 	.word	0x0800f308
 800631c:	00989680 	.word	0x00989680
 8006320:	40004400 	.word	0x40004400
 8006324:	40004800 	.word	0x40004800
 8006328:	40004c00 	.word	0x40004c00
 800632c:	40005000 	.word	0x40005000
 8006330:	51eb851f 	.word	0x51eb851f

08006334 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006334:	b084      	sub	sp, #16
 8006336:	a801      	add	r0, sp, #4
 8006338:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800633c:	2000      	movs	r0, #0
 800633e:	b004      	add	sp, #16
 8006340:	4770      	bx	lr

08006342 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006342:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8006346:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800634a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800634e:	2000      	movs	r0, #0
 8006350:	4770      	bx	lr

08006352 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006352:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8006356:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800635a:	045b      	lsls	r3, r3, #17
 800635c:	0c5b      	lsrs	r3, r3, #17
 800635e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8006362:	2000      	movs	r0, #0
 8006364:	4770      	bx	lr

08006366 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006366:	2000      	movs	r0, #0
 8006368:	4770      	bx	lr

0800636a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800636a:	b084      	sub	sp, #16
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	ac05      	add	r4, sp, #20
 8006370:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006374:	2301      	movs	r3, #1
 8006376:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800637a:	2400      	movs	r4, #0
 800637c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006380:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006384:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8006388:	f7ff ffdb 	bl	8006342 <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 800638c:	4620      	mov	r0, r4
 800638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006392:	b004      	add	sp, #16
 8006394:	4770      	bx	lr

08006396 <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006396:	2000      	movs	r0, #0
 8006398:	4770      	bx	lr

0800639a <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800639a:	2000      	movs	r0, #0
 800639c:	4770      	bx	lr

0800639e <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800639e:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 80063a0:	78cb      	ldrb	r3, [r1, #3]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d80f      	bhi.n	80063c6 <USB_ActivateEndpoint+0x28>
 80063a6:	e8df f003 	tbb	[pc, r3]
 80063aa:	6d02      	.short	0x6d02
 80063ac:	6054      	.short	0x6054
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80063ae:	780a      	ldrb	r2, [r1, #0]
 80063b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80063c6:	780a      	ldrb	r2, [r1, #0]
 80063c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	0d1b      	lsrs	r3, r3, #20
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80063e2:	7a8b      	ldrb	r3, [r1, #10]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 80af 	bne.w	8006548 <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 80063ea:	784b      	ldrb	r3, [r1, #1]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d056      	beq.n	800649e <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063f0:	888a      	ldrh	r2, [r1, #4]
 80063f2:	0852      	lsrs	r2, r2, #1
 80063f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80063f8:	780c      	ldrb	r4, [r1, #0]
 80063fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006402:	0052      	lsls	r2, r2, #1
 8006404:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006408:	780a      	ldrb	r2, [r1, #0]
 800640a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800640e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006412:	d00b      	beq.n	800642c <USB_ActivateEndpoint+0x8e>
 8006414:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641c:	051b      	lsls	r3, r3, #20
 800641e:	0d1b      	lsrs	r3, r3, #20
 8006420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006428:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800642c:	780a      	ldrb	r2, [r1, #0]
 800642e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643c:	f083 0320 	eor.w	r3, r3, #32
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800644c:	2000      	movs	r0, #0
 800644e:	bc10      	pop	{r4}
 8006450:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8006452:	780a      	ldrb	r2, [r1, #0]
 8006454:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	b29b      	uxth	r3, r3
 8006464:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8006468:	e7ad      	b.n	80063c6 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800646a:	780a      	ldrb	r2, [r1, #0]
 800646c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800647e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8006482:	e7a0      	b.n	80063c6 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8006484:	780a      	ldrb	r2, [r1, #0]
 8006486:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006498:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800649c:	e793      	b.n	80063c6 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800649e:	888a      	ldrh	r2, [r1, #4]
 80064a0:	0852      	lsrs	r2, r2, #1
 80064a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80064a6:	780c      	ldrb	r4, [r1, #0]
 80064a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064ac:	3304      	adds	r3, #4
 80064ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80064b2:	0052      	lsls	r2, r2, #1
 80064b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80064bc:	780a      	ldrb	r2, [r1, #0]
 80064be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c2:	3306      	adds	r3, #6
 80064c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80064c8:	690c      	ldr	r4, [r1, #16]
 80064ca:	2c3e      	cmp	r4, #62	; 0x3e
 80064cc:	d930      	bls.n	8006530 <USB_ActivateEndpoint+0x192>
 80064ce:	f3c4 124f 	ubfx	r2, r4, #5, #16
 80064d2:	f014 0f1f 	tst.w	r4, #31
 80064d6:	d101      	bne.n	80064dc <USB_ActivateEndpoint+0x13e>
 80064d8:	3a01      	subs	r2, #1
 80064da:	b292      	uxth	r2, r2
 80064dc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80064e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064e4:	b292      	uxth	r2, r2
 80064e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ea:	780a      	ldrb	r2, [r1, #0]
 80064ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80064f4:	d00b      	beq.n	800650e <USB_ActivateEndpoint+0x170>
 80064f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fe:	051b      	lsls	r3, r3, #20
 8006500:	0d1b      	lsrs	r3, r3, #20
 8006502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800650e:	780a      	ldrb	r2, [r1, #0]
 8006510:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800652e:	e78d      	b.n	800644c <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006530:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8006534:	f014 0f01 	tst.w	r4, #1
 8006538:	d001      	beq.n	800653e <USB_ActivateEndpoint+0x1a0>
 800653a:	3201      	adds	r2, #1
 800653c:	b292      	uxth	r2, r2
 800653e:	0292      	lsls	r2, r2, #10
 8006540:	b292      	uxth	r2, r2
 8006542:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006546:	e7d0      	b.n	80064ea <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006548:	780a      	ldrb	r2, [r1, #0]
 800654a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800654e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8006552:	051b      	lsls	r3, r3, #20
 8006554:	0d1b      	lsrs	r3, r3, #20
 8006556:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8006562:	88ca      	ldrh	r2, [r1, #6]
 8006564:	0852      	lsrs	r2, r2, #1
 8006566:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800656a:	780c      	ldrb	r4, [r1, #0]
 800656c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006570:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006574:	0052      	lsls	r2, r2, #1
 8006576:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800657a:	890a      	ldrh	r2, [r1, #8]
 800657c:	0852      	lsrs	r2, r2, #1
 800657e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006582:	780c      	ldrb	r4, [r1, #0]
 8006584:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006588:	3304      	adds	r3, #4
 800658a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800658e:	0052      	lsls	r2, r2, #1
 8006590:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 8006594:	784b      	ldrb	r3, [r1, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d14b      	bne.n	8006632 <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800659a:	780a      	ldrb	r2, [r1, #0]
 800659c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80065a4:	d00b      	beq.n	80065be <USB_ActivateEndpoint+0x220>
 80065a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ae:	051b      	lsls	r3, r3, #20
 80065b0:	0d1b      	lsrs	r3, r3, #20
 80065b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065be:	780a      	ldrb	r2, [r1, #0]
 80065c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065c8:	d00b      	beq.n	80065e2 <USB_ActivateEndpoint+0x244>
 80065ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d2:	051b      	lsls	r3, r3, #20
 80065d4:	0d1b      	lsrs	r3, r3, #20
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80065e2:	780a      	ldrb	r2, [r1, #0]
 80065e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ec:	051b      	lsls	r3, r3, #20
 80065ee:	0d1b      	lsrs	r3, r3, #20
 80065f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065fc:	780a      	ldrb	r2, [r1, #0]
 80065fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006610:	f248 0480 	movw	r4, #32896	; 0x8080
 8006614:	4323      	orrs	r3, r4
 8006616:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800661a:	780a      	ldrb	r2, [r1, #0]
 800661c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662a:	4323      	orrs	r3, r4
 800662c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006630:	e70c      	b.n	800644c <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006632:	780a      	ldrb	r2, [r1, #0]
 8006634:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006638:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800663c:	d00b      	beq.n	8006656 <USB_ActivateEndpoint+0x2b8>
 800663e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006646:	051b      	lsls	r3, r3, #20
 8006648:	0d1b      	lsrs	r3, r3, #20
 800664a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006656:	780a      	ldrb	r2, [r1, #0]
 8006658:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800665c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006660:	d00b      	beq.n	800667a <USB_ActivateEndpoint+0x2dc>
 8006662:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666a:	051b      	lsls	r3, r3, #20
 800666c:	0d1b      	lsrs	r3, r3, #20
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006676:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800667a:	780a      	ldrb	r2, [r1, #0]
 800667c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006684:	051b      	lsls	r3, r3, #20
 8006686:	0d1b      	lsrs	r3, r3, #20
 8006688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006694:	780b      	ldrb	r3, [r1, #0]
 8006696:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800669a:	b292      	uxth	r2, r2
 800669c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	f248 0480 	movw	r4, #32896	; 0x8080
 80066a8:	4322      	orrs	r2, r4
 80066aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ae:	780a      	ldrb	r2, [r1, #0]
 80066b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	4323      	orrs	r3, r4
 80066c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80066c4:	e6c2      	b.n	800644c <USB_ActivateEndpoint+0xae>

080066c6 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 80066c6:	7a8b      	ldrb	r3, [r1, #10]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d144      	bne.n	8006756 <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 80066cc:	784b      	ldrb	r3, [r1, #1]
 80066ce:	b30b      	cbz	r3, 8006714 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066d0:	780a      	ldrb	r2, [r1, #0]
 80066d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066da:	d00b      	beq.n	80066f4 <USB_DeactivateEndpoint+0x2e>
 80066dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e4:	051b      	lsls	r3, r3, #20
 80066e6:	0d1b      	lsrs	r3, r3, #20
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80066f4:	780a      	ldrb	r2, [r1, #0]
 80066f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8006710:	2000      	movs	r0, #0
 8006712:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006714:	780a      	ldrb	r2, [r1, #0]
 8006716:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800671a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800671e:	d00b      	beq.n	8006738 <USB_DeactivateEndpoint+0x72>
 8006720:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006728:	051b      	lsls	r3, r3, #20
 800672a:	0d1b      	lsrs	r3, r3, #20
 800672c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006738:	780a      	ldrb	r2, [r1, #0]
 800673a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006754:	e7dc      	b.n	8006710 <USB_DeactivateEndpoint+0x4a>
{
 8006756:	b410      	push	{r4}
    if (ep->is_in==0)
 8006758:	784b      	ldrb	r3, [r1, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d14b      	bne.n	80067f6 <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800675e:	780a      	ldrb	r2, [r1, #0]
 8006760:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006764:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006768:	d00b      	beq.n	8006782 <USB_DeactivateEndpoint+0xbc>
 800676a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800676e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006772:	051b      	lsls	r3, r3, #20
 8006774:	0d1b      	lsrs	r3, r3, #20
 8006776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006782:	780a      	ldrb	r2, [r1, #0]
 8006784:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006788:	f013 0f40 	tst.w	r3, #64	; 0x40
 800678c:	d00b      	beq.n	80067a6 <USB_DeactivateEndpoint+0xe0>
 800678e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006796:	051b      	lsls	r3, r3, #20
 8006798:	0d1b      	lsrs	r3, r3, #20
 800679a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80067a6:	780a      	ldrb	r2, [r1, #0]
 80067a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	0d1b      	lsrs	r3, r3, #20
 80067b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067c0:	780b      	ldrb	r3, [r1, #0]
 80067c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80067c6:	b292      	uxth	r2, r2
 80067c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067d0:	f248 0480 	movw	r4, #32896	; 0x8080
 80067d4:	4322      	orrs	r2, r4
 80067d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067da:	780a      	ldrb	r2, [r1, #0]
 80067dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	4323      	orrs	r3, r4
 80067ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80067f0:	2000      	movs	r0, #0
 80067f2:	bc10      	pop	{r4}
 80067f4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067f6:	780a      	ldrb	r2, [r1, #0]
 80067f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006800:	d00b      	beq.n	800681a <USB_DeactivateEndpoint+0x154>
 8006802:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680a:	051b      	lsls	r3, r3, #20
 800680c:	0d1b      	lsrs	r3, r3, #20
 800680e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006816:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800681a:	780a      	ldrb	r2, [r1, #0]
 800681c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006820:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006824:	d00b      	beq.n	800683e <USB_DeactivateEndpoint+0x178>
 8006826:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800682a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682e:	051b      	lsls	r3, r3, #20
 8006830:	0d1b      	lsrs	r3, r3, #20
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800683a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800683e:	780a      	ldrb	r2, [r1, #0]
 8006840:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	0d1b      	lsrs	r3, r3, #20
 800684c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006858:	780b      	ldrb	r3, [r1, #0]
 800685a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800685e:	b292      	uxth	r2, r2
 8006860:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006868:	f248 0480 	movw	r4, #32896	; 0x8080
 800686c:	4322      	orrs	r2, r4
 800686e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006872:	780a      	ldrb	r2, [r1, #0]
 8006874:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	4323      	orrs	r3, r4
 8006884:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006888:	e7b2      	b.n	80067f0 <USB_DeactivateEndpoint+0x12a>

0800688a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800688a:	780a      	ldrb	r2, [r1, #0]
 800688c:	b18a      	cbz	r2, 80068b2 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 800688e:	784b      	ldrb	r3, [r1, #1]
 8006890:	bb13      	cbnz	r3, 80068d8 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8006892:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80068b0:	e010      	b.n	80068d4 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80068b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068c4:	f083 0310 	eor.w	r3, r3, #16
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 80068d4:	2000      	movs	r0, #0
 80068d6:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80068d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e6:	f083 0310 	eor.w	r3, r3, #16
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80068f6:	e7ed      	b.n	80068d4 <USB_EPSetStall+0x4a>

080068f8 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80068f8:	784b      	ldrb	r3, [r1, #1]
 80068fa:	b31b      	cbz	r3, 8006944 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068fc:	780a      	ldrb	r2, [r1, #0]
 80068fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006902:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006906:	d00b      	beq.n	8006920 <USB_EPClearStall+0x28>
 8006908:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800690c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006910:	051b      	lsls	r3, r3, #20
 8006912:	0d1b      	lsrs	r3, r3, #20
 8006914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800691c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006920:	780a      	ldrb	r2, [r1, #0]
 8006922:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006930:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8006940:	2000      	movs	r0, #0
 8006942:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006944:	780a      	ldrb	r2, [r1, #0]
 8006946:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800694a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800694e:	d00b      	beq.n	8006968 <USB_EPClearStall+0x70>
 8006950:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006958:	051b      	lsls	r3, r3, #20
 800695a:	0d1b      	lsrs	r3, r3, #20
 800695c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006964:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006968:	780a      	ldrb	r2, [r1, #0]
 800696a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800697c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006984:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006988:	e7da      	b.n	8006940 <USB_EPClearStall+0x48>

0800698a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800698a:	b911      	cbnz	r1, 8006992 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8006992:	2000      	movs	r0, #0
 8006994:	4770      	bx	lr

08006996 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006996:	2000      	movs	r0, #0
 8006998:	4770      	bx	lr

0800699a <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800699a:	2000      	movs	r0, #0
 800699c:	4770      	bx	lr

0800699e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800699e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80069a2:	4770      	bx	lr

080069a4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80069a4:	2000      	movs	r0, #0
 80069a6:	4770      	bx	lr

080069a8 <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80069a8:	3301      	adds	r3, #1
 80069aa:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80069ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80069b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 80069b4:	b163      	cbz	r3, 80069d0 <USB_WritePMA+0x28>
{
 80069b6:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80069b8:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80069ba:	7848      	ldrb	r0, [r1, #1]
 80069bc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 80069c0:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 80069c4:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f5      	bne.n	80069b8 <USB_WritePMA+0x10>
  }
}
 80069cc:	bc10      	pop	{r4}
 80069ce:	4770      	bx	lr
 80069d0:	4770      	bx	lr

080069d2 <USB_EPStartXfer>:
{
 80069d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 80069d4:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 80069d6:	784d      	ldrb	r5, [r1, #1]
 80069d8:	2d01      	cmp	r5, #1
 80069da:	d034      	beq.n	8006a46 <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 80069dc:	690b      	ldr	r3, [r1, #16]
 80069de:	4293      	cmp	r3, r2
 80069e0:	f080 80ea 	bcs.w	8006bb8 <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 80069e8:	7a8a      	ldrb	r2, [r1, #10]
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	f040 80f4 	bne.w	8006bd8 <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80069f4:	780c      	ldrb	r4, [r1, #0]
 80069f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80069fa:	3206      	adds	r2, #6
 80069fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006a00:	2b3e      	cmp	r3, #62	; 0x3e
 8006a02:	f240 80dd 	bls.w	8006bc0 <USB_EPStartXfer+0x1ee>
 8006a06:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006a0a:	f013 0f1f 	tst.w	r3, #31
 8006a0e:	d101      	bne.n	8006a14 <USB_EPStartXfer+0x42>
 8006a10:	3c01      	subs	r4, #1
 8006a12:	b2a4      	uxth	r4, r4
 8006a14:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006a18:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006a1c:	b2a4      	uxth	r4, r4
 8006a1e:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a22:	780a      	ldrb	r2, [r1, #0]
 8006a24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006a42:	2000      	movs	r0, #0
 8006a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006a46:	690f      	ldr	r7, [r1, #16]
 8006a48:	4297      	cmp	r7, r2
 8006a4a:	d225      	bcs.n	8006a98 <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 8006a4c:	1bd2      	subs	r2, r2, r7
 8006a4e:	618a      	str	r2, [r1, #24]
 8006a50:	460e      	mov	r6, r1
 8006a52:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 8006a54:	7a8b      	ldrb	r3, [r1, #10]
 8006a56:	b31b      	cbz	r3, 8006aa0 <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8006a58:	780b      	ldrb	r3, [r1, #0]
 8006a5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006a5e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a62:	d069      	beq.n	8006b38 <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	d137      	bne.n	8006ad8 <USB_EPStartXfer+0x106>
 8006a68:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006a6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a70:	3306      	adds	r3, #6
 8006a72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006a76:	2f3e      	cmp	r7, #62	; 0x3e
 8006a78:	d922      	bls.n	8006ac0 <USB_EPStartXfer+0xee>
 8006a7a:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8006a7e:	f017 0f1f 	tst.w	r7, #31
 8006a82:	d101      	bne.n	8006a88 <USB_EPStartXfer+0xb6>
 8006a84:	3a01      	subs	r2, #1
 8006a86:	b292      	uxth	r2, r2
 8006a88:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006a8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006a90:	b292      	uxth	r2, r2
 8006a92:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006a96:	e028      	b.n	8006aea <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006a9c:	4617      	mov	r7, r2
 8006a9e:	e7d7      	b.n	8006a50 <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8006aa0:	b2bb      	uxth	r3, r7
 8006aa2:	888a      	ldrh	r2, [r1, #4]
 8006aa4:	6949      	ldr	r1, [r1, #20]
 8006aa6:	f7ff ff7f 	bl	80069a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aaa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8006aae:	7832      	ldrb	r2, [r6, #0]
 8006ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006aba:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8006abe:	e02a      	b.n	8006b16 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ac0:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8006ac4:	f017 0f01 	tst.w	r7, #1
 8006ac8:	d001      	beq.n	8006ace <USB_EPStartXfer+0xfc>
 8006aca:	3201      	adds	r2, #1
 8006acc:	b292      	uxth	r2, r2
 8006ace:	0292      	lsls	r2, r2, #10
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006ad6:	e008      	b.n	8006aea <USB_EPStartXfer+0x118>
 8006ad8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006adc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ae0:	3302      	adds	r3, #2
 8006ae2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006ae6:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8006aea:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8006aec:	b2bb      	uxth	r3, r7
 8006aee:	6971      	ldr	r1, [r6, #20]
 8006af0:	4620      	mov	r0, r4
 8006af2:	f7ff ff59 	bl	80069a8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006af6:	7873      	ldrb	r3, [r6, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d14d      	bne.n	8006b98 <USB_EPStartXfer+0x1c6>
 8006afc:	7832      	ldrb	r2, [r6, #0]
 8006afe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b06:	051b      	lsls	r3, r3, #20
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b12:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b16:	7832      	ldrb	r2, [r6, #0]
 8006b18:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b26:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b32:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006b36:	e784      	b.n	8006a42 <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b38:	bb1d      	cbnz	r5, 8006b82 <USB_EPStartXfer+0x1b0>
 8006b3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b42:	3302      	adds	r3, #2
 8006b44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006b48:	2f3e      	cmp	r7, #62	; 0x3e
 8006b4a:	d90e      	bls.n	8006b6a <USB_EPStartXfer+0x198>
 8006b4c:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8006b50:	f017 0f1f 	tst.w	r7, #31
 8006b54:	d101      	bne.n	8006b5a <USB_EPStartXfer+0x188>
 8006b56:	3a01      	subs	r2, #1
 8006b58:	b292      	uxth	r2, r2
 8006b5a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006b5e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006b62:	b292      	uxth	r2, r2
 8006b64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006b68:	e014      	b.n	8006b94 <USB_EPStartXfer+0x1c2>
 8006b6a:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8006b6e:	f017 0f01 	tst.w	r7, #1
 8006b72:	d001      	beq.n	8006b78 <USB_EPStartXfer+0x1a6>
 8006b74:	3201      	adds	r2, #1
 8006b76:	b292      	uxth	r2, r2
 8006b78:	0292      	lsls	r2, r2, #10
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006b80:	e008      	b.n	8006b94 <USB_EPStartXfer+0x1c2>
 8006b82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006b86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006b90:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8006b94:	88f2      	ldrh	r2, [r6, #6]
 8006b96:	e7a9      	b.n	8006aec <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d1bc      	bne.n	8006b16 <USB_EPStartXfer+0x144>
 8006b9c:	7832      	ldrb	r2, [r6, #0]
 8006b9e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba6:	051b      	lsls	r3, r3, #20
 8006ba8:	0d1b      	lsrs	r3, r3, #20
 8006baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006bb6:	e7ae      	b.n	8006b16 <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	e713      	b.n	80069e8 <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bc0:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006bc4:	f013 0f01 	tst.w	r3, #1
 8006bc8:	d001      	beq.n	8006bce <USB_EPStartXfer+0x1fc>
 8006bca:	3401      	adds	r4, #1
 8006bcc:	b2a4      	uxth	r4, r4
 8006bce:	02a4      	lsls	r4, r4, #10
 8006bd0:	b2a4      	uxth	r4, r4
 8006bd2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006bd6:	e724      	b.n	8006a22 <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006bd8:	b9bd      	cbnz	r5, 8006c0a <USB_EPStartXfer+0x238>
 8006bda:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006bde:	780c      	ldrb	r4, [r1, #0]
 8006be0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006be4:	3202      	adds	r2, #2
 8006be6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006bea:	2b3e      	cmp	r3, #62	; 0x3e
 8006bec:	d928      	bls.n	8006c40 <USB_EPStartXfer+0x26e>
 8006bee:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006bf2:	f013 0f1f 	tst.w	r3, #31
 8006bf6:	d101      	bne.n	8006bfc <USB_EPStartXfer+0x22a>
 8006bf8:	3c01      	subs	r4, #1
 8006bfa:	b2a4      	uxth	r4, r4
 8006bfc:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006c00:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006c04:	b2a4      	uxth	r4, r4
 8006c06:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006c0a:	784a      	ldrb	r2, [r1, #1]
 8006c0c:	bb82      	cbnz	r2, 8006c70 <USB_EPStartXfer+0x29e>
 8006c0e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006c12:	780c      	ldrb	r4, [r1, #0]
 8006c14:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006c18:	3206      	adds	r2, #6
 8006c1a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c20:	d91a      	bls.n	8006c58 <USB_EPStartXfer+0x286>
 8006c22:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006c26:	f013 0f1f 	tst.w	r3, #31
 8006c2a:	d101      	bne.n	8006c30 <USB_EPStartXfer+0x25e>
 8006c2c:	3c01      	subs	r4, #1
 8006c2e:	b2a4      	uxth	r4, r4
 8006c30:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006c34:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006c38:	b2a4      	uxth	r4, r4
 8006c3a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006c3e:	e6f0      	b.n	8006a22 <USB_EPStartXfer+0x50>
 8006c40:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006c44:	f013 0f01 	tst.w	r3, #1
 8006c48:	d001      	beq.n	8006c4e <USB_EPStartXfer+0x27c>
 8006c4a:	3401      	adds	r4, #1
 8006c4c:	b2a4      	uxth	r4, r4
 8006c4e:	02a4      	lsls	r4, r4, #10
 8006c50:	b2a4      	uxth	r4, r4
 8006c52:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006c56:	e7d8      	b.n	8006c0a <USB_EPStartXfer+0x238>
 8006c58:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006c5c:	f013 0f01 	tst.w	r3, #1
 8006c60:	d001      	beq.n	8006c66 <USB_EPStartXfer+0x294>
 8006c62:	3401      	adds	r4, #1
 8006c64:	b2a4      	uxth	r4, r4
 8006c66:	02a4      	lsls	r4, r4, #10
 8006c68:	b2a4      	uxth	r4, r4
 8006c6a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006c6e:	e6d8      	b.n	8006a22 <USB_EPStartXfer+0x50>
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	f47f aed6 	bne.w	8006a22 <USB_EPStartXfer+0x50>
 8006c76:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006c7a:	780c      	ldrb	r4, [r1, #0]
 8006c7c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006c80:	3202      	adds	r2, #2
 8006c82:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006c86:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8006c8a:	e6ca      	b.n	8006a22 <USB_EPStartXfer+0x50>

08006c8c <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8006c90:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8006c98:	e004      	b.n	8006ca4 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8006c9a:	6810      	ldr	r0, [r2, #0]
 8006c9c:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8006ca0:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8006ca2:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f8      	bne.n	8006c9a <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8006ca8:	4770      	bx	lr
	...

08006cac <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <LL_Init1msTick+0x18>)
 8006cae:	fba3 3000 	umull	r3, r0, r3, r0
 8006cb2:	0980      	lsrs	r0, r0, #6
 8006cb4:	3801      	subs	r0, #1
 8006cb6:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <LL_Init1msTick+0x1c>)
 8006cb8:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006cba:	2200      	movs	r2, #0
 8006cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8006cc2:	4770      	bx	lr
 8006cc4:	10624dd3 	.word	0x10624dd3
 8006cc8:	e000e010 	.word	0xe000e010

08006ccc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006ccc:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <LL_mDelay+0x28>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006cd4:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8006cd6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006cda:	d000      	beq.n	8006cde <LL_mDelay+0x12>
  {
    Delay++;
 8006cdc:	3001      	adds	r0, #1
  }

  while (Delay)
 8006cde:	b130      	cbz	r0, 8006cee <LL_mDelay+0x22>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <LL_mDelay+0x28>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006ce8:	d0f9      	beq.n	8006cde <LL_mDelay+0x12>
    {
      Delay--;
 8006cea:	3801      	subs	r0, #1
 8006cec:	e7f7      	b.n	8006cde <LL_mDelay+0x12>
    }
  }
}
 8006cee:	b002      	add	sp, #8
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	e000e010 	.word	0xe000e010

08006cf8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <LL_SetSystemCoreClock+0x8>)
 8006cfa:	6018      	str	r0, [r3, #0]
}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000000 	.word	0x20000000

08006d04 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8006d04:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <DWT_Delay_Init+0x3c>)
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006d0c:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006d14:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <DWT_Delay_Init+0x40>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8006d28:	2200      	movs	r2, #0
 8006d2a:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8006d2c:	bf00      	nop
     __ASM volatile ("NOP");
 8006d2e:	bf00      	nop
  __ASM volatile ("NOP");
 8006d30:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b90b      	cbnz	r3, 8006d3a <DWT_Delay_Init+0x36>
     {
       return 0; /*clock cycle counter started*/
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8006d36:	2001      	movs	r0, #1
  }
}
 8006d38:	4770      	bx	lr
       return 0; /*clock cycle counter started*/
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	e000edf0 	.word	0xe000edf0
 8006d44:	e0001000 	.word	0xe0001000

08006d48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006d48:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006d4a:	4903      	ldr	r1, [pc, #12]	; (8006d58 <MX_FATFS_Init+0x10>)
 8006d4c:	4803      	ldr	r0, [pc, #12]	; (8006d5c <MX_FATFS_Init+0x14>)
 8006d4e:	f001 f9d9 	bl	8008104 <FATFS_LinkDriver>
 8006d52:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <MX_FATFS_Init+0x18>)
 8006d54:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006d56:	bd08      	pop	{r3, pc}
 8006d58:	20006330 	.word	0x20006330
 8006d5c:	0800f35c 	.word	0x0800f35c
 8006d60:	2000632c 	.word	0x2000632c

08006d64 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006d64:	b500      	push	{lr}
 8006d66:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4803      	ldr	r0, [pc, #12]	; (8006d80 <BSP_SD_ReadBlocks+0x1c>)
 8006d72:	f7fd f892 	bl	8003e9a <HAL_SD_ReadBlocks>
 8006d76:	b100      	cbz	r0, 8006d7a <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006d78:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006d7a:	b003      	add	sp, #12
 8006d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d80:	2000624c 	.word	0x2000624c

08006d84 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006d84:	b500      	push	{lr}
 8006d86:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4803      	ldr	r0, [pc, #12]	; (8006da0 <BSP_SD_WriteBlocks+0x1c>)
 8006d92:	f7fd f98f 	bl	80040b4 <HAL_SD_WriteBlocks>
 8006d96:	b100      	cbz	r0, 8006d9a <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006d98:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006d9a:	b003      	add	sp, #12
 8006d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006da0:	2000624c 	.word	0x2000624c

08006da4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006da4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006da6:	4803      	ldr	r0, [pc, #12]	; (8006db4 <BSP_SD_GetCardState+0x10>)
 8006da8:	f7fd fcfc 	bl	80047a4 <HAL_SD_GetCardState>
}
 8006dac:	3804      	subs	r0, #4
 8006dae:	bf18      	it	ne
 8006db0:	2001      	movne	r0, #1
 8006db2:	bd08      	pop	{r3, pc}
 8006db4:	2000624c 	.word	0x2000624c

08006db8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006db8:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <BSP_SD_GetCardInfo+0xc>)
 8006dbe:	f7fd fc7d 	bl	80046bc <HAL_SD_GetCardInfo>
}
 8006dc2:	bd08      	pop	{r3, pc}
 8006dc4:	2000624c 	.word	0x2000624c

08006dc8 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006dc8:	4770      	bx	lr

08006dca <HAL_SD_AbortCallback>:
{
 8006dca:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006dcc:	f7ff fffc 	bl	8006dc8 <BSP_SD_AbortCallback>
}
 8006dd0:	bd08      	pop	{r3, pc}

08006dd2 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_SD_TxCpltCallback>:
{
 8006dd4:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006dd6:	f7ff fffc 	bl	8006dd2 <BSP_SD_WriteCpltCallback>
}
 8006dda:	bd08      	pop	{r3, pc}

08006ddc <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8006ddc:	4770      	bx	lr

08006dde <HAL_SD_RxCpltCallback>:
{
 8006dde:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006de0:	f7ff fffc 	bl	8006ddc <BSP_SD_ReadCpltCallback>
}
 8006de4:	bd08      	pop	{r3, pc}

08006de6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006de6:	b500      	push	{lr}
 8006de8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006df0:	f000 f824 	bl	8006e3c <BSP_PlatformIsDetected>
 8006df4:	b910      	cbnz	r0, 8006dfc <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8006dfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006e00:	b003      	add	sp, #12
 8006e02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006e08 <BSP_SD_Init>:
{
 8006e08:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006e0a:	f7ff ffec 	bl	8006de6 <BSP_SD_IsDetected>
 8006e0e:	2801      	cmp	r0, #1
 8006e10:	d002      	beq.n	8006e18 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8006e12:	2401      	movs	r4, #1
}
 8006e14:	4620      	mov	r0, r4
 8006e16:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8006e18:	4807      	ldr	r0, [pc, #28]	; (8006e38 <BSP_SD_Init+0x30>)
 8006e1a:	f7fd fbe3 	bl	80045e4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006e1e:	4604      	mov	r4, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d1f7      	bne.n	8006e14 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e28:	4803      	ldr	r0, [pc, #12]	; (8006e38 <BSP_SD_Init+0x30>)
 8006e2a:	f7fd fc59 	bl	80046e0 <HAL_SD_ConfigWideBusOperation>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0f0      	beq.n	8006e14 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8006e32:	2401      	movs	r4, #1
 8006e34:	e7ee      	b.n	8006e14 <BSP_SD_Init+0xc>
 8006e36:	bf00      	nop
 8006e38:	2000624c 	.word	0x2000624c

08006e3c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006e3c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e42:	4804      	ldr	r0, [pc, #16]	; (8006e54 <BSP_PlatformIsDetected+0x18>)
 8006e44:	f7fc f9ba 	bl	80031bc <HAL_GPIO_ReadPin>
 8006e48:	b108      	cbz	r0, 8006e4e <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 8006e4a:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8006e4c:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7fc      	b.n	8006e4c <BSP_PlatformIsDetected+0x10>
 8006e52:	bf00      	nop
 8006e54:	40010800 	.word	0x40010800

08006e58 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006e58:	2320      	movs	r3, #32
 8006e5a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006e5c:	4800      	ldr	r0, [pc, #0]	; (8006e60 <USBD_MSC_GetHSCfgDesc+0x8>)
 8006e5e:	4770      	bx	lr
 8006e60:	20000060 	.word	0x20000060

08006e64 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006e64:	2320      	movs	r3, #32
 8006e66:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006e68:	4800      	ldr	r0, [pc, #0]	; (8006e6c <USBD_MSC_GetFSCfgDesc+0x8>)
 8006e6a:	4770      	bx	lr
 8006e6c:	20000040 	.word	0x20000040

08006e70 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006e70:	2320      	movs	r3, #32
 8006e72:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006e76:	4770      	bx	lr
 8006e78:	2000008c 	.word	0x2000008c

08006e7c <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8006e80:	4800      	ldr	r0, [pc, #0]	; (8006e84 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8006e82:	4770      	bx	lr
 8006e84:	20000080 	.word	0x20000080

08006e88 <USBD_MSC_Init>:
{
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006e8c:	7c03      	ldrb	r3, [r0, #16]
 8006e8e:	b9c3      	cbnz	r3, 8006ec2 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8006e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e94:	2202      	movs	r2, #2
 8006e96:	2101      	movs	r1, #1
 8006e98:	f006 fd2c 	bl	800d8f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8006e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	2181      	movs	r1, #129	; 0x81
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f006 fd25 	bl	800d8f4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006eaa:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006eae:	f006 fd7d 	bl	800d9ac <USBD_static_malloc>
 8006eb2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8006eb6:	b180      	cbz	r0, 8006eda <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f8f3 	bl	80070a4 <MSC_BOT_Init>
    ret = 0;
 8006ebe:	2000      	movs	r0, #0
}
 8006ec0:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8006ec2:	2340      	movs	r3, #64	; 0x40
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	f006 fd14 	bl	800d8f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2202      	movs	r2, #2
 8006ed0:	2181      	movs	r1, #129	; 0x81
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f006 fd0e 	bl	800d8f4 <USBD_LL_OpenEP>
 8006ed8:	e7e7      	b.n	8006eaa <USBD_MSC_Init+0x22>
    ret = 1; 
 8006eda:	2001      	movs	r0, #1
 8006edc:	e7f0      	b.n	8006ec0 <USBD_MSC_Init+0x38>

08006ede <USBD_MSC_DeInit>:
{
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	f006 fd11 	bl	800d90a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8006ee8:	2181      	movs	r1, #129	; 0x81
 8006eea:	4620      	mov	r0, r4
 8006eec:	f006 fd0d 	bl	800d90a <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 f903 	bl	80070fc <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8006ef6:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8006efa:	b120      	cbz	r0, 8006f06 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8006efc:	f006 fd5a 	bl	800d9b4 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8006f06:	2000      	movs	r0, #0
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <USBD_MSC_Setup>:
{
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006f10:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f14:	780b      	ldrb	r3, [r1, #0]
 8006f16:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8006f1a:	d035      	beq.n	8006f88 <USBD_MSC_Setup+0x7e>
 8006f1c:	2a20      	cmp	r2, #32
 8006f1e:	d178      	bne.n	8007012 <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 8006f20:	784a      	ldrb	r2, [r1, #1]
 8006f22:	2afe      	cmp	r2, #254	; 0xfe
 8006f24:	d005      	beq.n	8006f32 <USBD_MSC_Setup+0x28>
 8006f26:	2aff      	cmp	r2, #255	; 0xff
 8006f28:	d01d      	beq.n	8006f66 <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 8006f2a:	f000 fe43 	bl	8007bb4 <USBD_CtlError>
       return USBD_FAIL; 
 8006f2e:	2002      	movs	r0, #2
 8006f30:	e070      	b.n	8007014 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 8006f32:	884a      	ldrh	r2, [r1, #2]
 8006f34:	b98a      	cbnz	r2, 8006f5a <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006f36:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006f38:	2a01      	cmp	r2, #1
 8006f3a:	d10e      	bne.n	8006f5a <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006f3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f40:	d00b      	beq.n	8006f5a <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006f42:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	4798      	blx	r3
 8006f4a:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	f001 f87d 	bl	8008050 <USBD_CtlSendData>
  return 0;
 8006f56:	2000      	movs	r0, #0
      break;
 8006f58:	e05c      	b.n	8007014 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 fe29 	bl	8007bb4 <USBD_CtlError>
         return USBD_FAIL; 
 8006f62:	2002      	movs	r0, #2
 8006f64:	e056      	b.n	8007014 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 8006f66:	884a      	ldrh	r2, [r1, #2]
 8006f68:	b942      	cbnz	r2, 8006f7c <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 8006f6a:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006f6c:	b932      	cbnz	r2, 8006f7c <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 8006f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f72:	d103      	bne.n	8006f7c <USBD_MSC_Setup+0x72>
         MSC_BOT_Reset(pdev);
 8006f74:	f000 f8b5 	bl	80070e2 <MSC_BOT_Reset>
  return 0;
 8006f78:	2000      	movs	r0, #0
      break;
 8006f7a:	e04b      	b.n	8007014 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 fe18 	bl	8007bb4 <USBD_CtlError>
         return USBD_FAIL; 
 8006f84:	2002      	movs	r0, #2
 8006f86:	e045      	b.n	8007014 <USBD_MSC_Setup+0x10a>
    switch (req->bRequest)
 8006f88:	784b      	ldrb	r3, [r1, #1]
 8006f8a:	2b0a      	cmp	r3, #10
 8006f8c:	d005      	beq.n	8006f9a <USBD_MSC_Setup+0x90>
 8006f8e:	2b0b      	cmp	r3, #11
 8006f90:	d009      	beq.n	8006fa6 <USBD_MSC_Setup+0x9c>
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d00b      	beq.n	8006fae <USBD_MSC_Setup+0xa4>
  return 0;
 8006f96:	2000      	movs	r0, #0
 8006f98:	e03c      	b.n	8007014 <USBD_MSC_Setup+0x10a>
      USBD_CtlSendData (pdev,
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	1d31      	adds	r1, r6, #4
 8006f9e:	f001 f857 	bl	8008050 <USBD_CtlSendData>
  return 0;
 8006fa2:	2000      	movs	r0, #0
      break;
 8006fa4:	e036      	b.n	8007014 <USBD_MSC_Setup+0x10a>
      hmsc->interface = (uint8_t)(req->wValue);
 8006fa6:	788b      	ldrb	r3, [r1, #2]
 8006fa8:	6073      	str	r3, [r6, #4]
  return 0;
 8006faa:	2000      	movs	r0, #0
      break;
 8006fac:	e032      	b.n	8007014 <USBD_MSC_Setup+0x10a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006fae:	7909      	ldrb	r1, [r1, #4]
 8006fb0:	f006 fcb3 	bl	800d91a <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006fb4:	7921      	ldrb	r1, [r4, #4]
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f006 fca7 	bl	800d90a <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8006fbc:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	db0e      	blt.n	8006fe2 <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006fc4:	7c2b      	ldrb	r3, [r5, #16]
 8006fc6:	b9eb      	cbnz	r3, 8007004 <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 8006fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fcc:	2202      	movs	r2, #2
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f006 fc8f 	bl	800d8f4 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006fd6:	7921      	ldrb	r1, [r4, #4]
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f93a 	bl	8007252 <MSC_BOT_CplClrFeature>
  return 0;
 8006fde:	2000      	movs	r0, #0
      break;
 8006fe0:	e018      	b.n	8007014 <USBD_MSC_Setup+0x10a>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006fe2:	7c2b      	ldrb	r3, [r5, #16]
 8006fe4:	b93b      	cbnz	r3, 8006ff6 <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 8006fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fea:	2202      	movs	r2, #2
 8006fec:	2181      	movs	r1, #129	; 0x81
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f006 fc80 	bl	800d8f4 <USBD_LL_OpenEP>
 8006ff4:	e7ef      	b.n	8006fd6 <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	2181      	movs	r1, #129	; 0x81
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f006 fc79 	bl	800d8f4 <USBD_LL_OpenEP>
 8007002:	e7e8      	b.n	8006fd6 <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	2202      	movs	r2, #2
 8007008:	2101      	movs	r1, #1
 800700a:	4628      	mov	r0, r5
 800700c:	f006 fc72 	bl	800d8f4 <USBD_LL_OpenEP>
 8007010:	e7e1      	b.n	8006fd6 <USBD_MSC_Setup+0xcc>
  return 0;
 8007012:	2000      	movs	r0, #0
}
 8007014:	bd70      	pop	{r4, r5, r6, pc}

08007016 <USBD_MSC_DataIn>:
{
 8007016:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8007018:	f000 f892 	bl	8007140 <MSC_BOT_DataIn>
}
 800701c:	2000      	movs	r0, #0
 800701e:	bd08      	pop	{r3, pc}

08007020 <USBD_MSC_DataOut>:
{
 8007020:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8007022:	f000 f8fd 	bl	8007220 <MSC_BOT_DataOut>
}
 8007026:	2000      	movs	r0, #0
 8007028:	bd08      	pop	{r3, pc}

0800702a <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 800702a:	b109      	cbz	r1, 8007030 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 800702c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8007030:	2000      	movs	r0, #0
 8007032:	4770      	bx	lr

08007034 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007038:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 800703c:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8007040:	b923      	cbnz	r3, 800704c <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 8007042:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 8007046:	b10b      	cbz	r3, 800704c <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8007048:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 800704a:	b13b      	cbz	r3, 800705c <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800704c:	2181      	movs	r1, #129	; 0x81
 800704e:	4628      	mov	r0, r5
 8007050:	f006 fc6b 	bl	800d92a <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007054:	7a63      	ldrb	r3, [r4, #9]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d004      	beq.n	8007064 <MSC_BOT_Abort+0x30>
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 800705a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800705c:	2101      	movs	r1, #1
 800705e:	f006 fc64 	bl	800d92a <USBD_LL_StallEP>
 8007062:	e7f3      	b.n	800704c <MSC_BOT_Abort+0x18>
    USBD_LL_PrepareReceive (pdev,
 8007064:	231f      	movs	r3, #31
 8007066:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 800706a:	2101      	movs	r1, #1
 800706c:	4628      	mov	r0, r5
 800706e:	f006 fc8f 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8007072:	e7f2      	b.n	800705a <MSC_BOT_Abort+0x26>

08007074 <MSC_BOT_SendData>:
{
 8007074:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007076:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 800707a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800707e:	4293      	cmp	r3, r2
 8007080:	bf28      	it	cs
 8007082:	4613      	movcs	r3, r2
 8007084:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 8007086:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007090:	2200      	movs	r2, #0
 8007092:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007096:	2204      	movs	r2, #4
 8007098:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800709a:	460a      	mov	r2, r1
 800709c:	2181      	movs	r1, #129	; 0x81
 800709e:	f006 fc6f 	bl	800d980 <USBD_LL_Transmit>
}
 80070a2:	bd10      	pop	{r4, pc}

080070a4 <MSC_BOT_Init>:
{
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070a8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80070ac:	2000      	movs	r0, #0
 80070ae:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80070b0:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 80070b2:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 80070b6:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 80070ba:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80070c2:	2101      	movs	r1, #1
 80070c4:	4620      	mov	r0, r4
 80070c6:	f006 fc28 	bl	800d91a <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80070ca:	2181      	movs	r1, #129	; 0x81
 80070cc:	4620      	mov	r0, r4
 80070ce:	f006 fc24 	bl	800d91a <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 80070d2:	231f      	movs	r3, #31
 80070d4:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 80070d8:	2101      	movs	r1, #1
 80070da:	4620      	mov	r0, r4
 80070dc:	f006 fc58 	bl	800d990 <USBD_LL_PrepareReceive>
}
 80070e0:	bd38      	pop	{r3, r4, r5, pc}

080070e2 <MSC_BOT_Reset>:
{
 80070e2:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070e4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80070e8:	2300      	movs	r3, #0
 80070ea:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80070ec:	2101      	movs	r1, #1
 80070ee:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 80070f0:	231f      	movs	r3, #31
 80070f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070f6:	f006 fc4b 	bl	800d990 <USBD_LL_PrepareReceive>
}
 80070fa:	bd08      	pop	{r3, pc}

080070fc <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80070fc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007100:	2200      	movs	r2, #0
 8007102:	721a      	strb	r2, [r3, #8]
}
 8007104:	4770      	bx	lr
	...

08007108 <MSC_BOT_SendCSW>:
{
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800710c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <MSC_BOT_SendCSW+0x34>)
 8007112:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007116:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800711a:	2300      	movs	r3, #0
 800711c:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 800711e:	230d      	movs	r3, #13
 8007120:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8007124:	2181      	movs	r1, #129	; 0x81
 8007126:	f006 fc2b 	bl	800d980 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 800712a:	231f      	movs	r3, #31
 800712c:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8007130:	2101      	movs	r1, #1
 8007132:	4628      	mov	r0, r5
 8007134:	f006 fc2c 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8007138:	bd38      	pop	{r3, r4, r5, pc}
 800713a:	bf00      	nop
 800713c:	53425355 	.word	0x53425355

08007140 <MSC_BOT_DataIn>:
{
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007144:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007148:	7a0b      	ldrb	r3, [r1, #8]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d006      	beq.n	800715c <MSC_BOT_DataIn+0x1c>
 800714e:	d304      	bcc.n	800715a <MSC_BOT_DataIn+0x1a>
 8007150:	2b04      	cmp	r3, #4
 8007152:	d802      	bhi.n	800715a <MSC_BOT_DataIn+0x1a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007154:	2100      	movs	r1, #0
 8007156:	f7ff ffd7 	bl	8007108 <MSC_BOT_SendCSW>
}
 800715a:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 800715c:	f201 221b 	addw	r2, r1, #539	; 0x21b
 8007160:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 8007164:	f000 fb69 	bl	800783a <SCSI_ProcessCmd>
 8007168:	2800      	cmp	r0, #0
 800716a:	daf6      	bge.n	800715a <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800716c:	2101      	movs	r1, #1
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff ffca 	bl	8007108 <MSC_BOT_SendCSW>
 8007174:	e7f1      	b.n	800715a <MSC_BOT_DataIn+0x1a>
	...

08007178 <MSC_BOT_CBW_Decode>:
{
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800717c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007180:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007184:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007188:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800718c:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007190:	2101      	movs	r1, #1
 8007192:	f006 fc05 	bl	800d9a0 <USBD_LL_GetRxDataSize>
 8007196:	281f      	cmp	r0, #31
 8007198:	d104      	bne.n	80071a4 <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800719a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800719e:	4b1f      	ldr	r3, [pc, #124]	; (800721c <MSC_BOT_CBW_Decode+0xa4>)
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d00c      	beq.n	80071be <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 80071a4:	2320      	movs	r3, #32
 80071a6:	2205      	movs	r2, #5
 80071a8:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 f8e9 	bl	8007384 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80071b2:	2302      	movs	r3, #2
 80071b4:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 80071b6:	4628      	mov	r0, r5
 80071b8:	f7ff ff3c 	bl	8007034 <MSC_BOT_Abort>
}
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 80071be:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 80071c2:	2901      	cmp	r1, #1
 80071c4:	d8ee      	bhi.n	80071a4 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 80071c6:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0ea      	beq.n	80071a4 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d8e8      	bhi.n	80071a4 <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 80071d2:	f204 221b 	addw	r2, r4, #539	; 0x21b
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 fb2f 	bl	800783a <SCSI_ProcessCmd>
 80071dc:	2800      	cmp	r0, #0
 80071de:	db0b      	blt.n	80071f8 <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80071e0:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d9e8      	bls.n	80071bc <MSC_BOT_CBW_Decode+0x44>
      if (hmsc->bot_data_length > 0)
 80071ea:	8962      	ldrh	r2, [r4, #10]
 80071ec:	b982      	cbnz	r2, 8007210 <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 80071ee:	2100      	movs	r1, #0
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7ff ff89 	bl	8007108 <MSC_BOT_SendCSW>
}
 80071f6:	e7e1      	b.n	80071bc <MSC_BOT_CBW_Decode+0x44>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 80071f8:	7a23      	ldrb	r3, [r4, #8]
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	d003      	beq.n	8007206 <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 80071fe:	4628      	mov	r0, r5
 8007200:	f7ff ff18 	bl	8007034 <MSC_BOT_Abort>
 8007204:	e7da      	b.n	80071bc <MSC_BOT_CBW_Decode+0x44>
       MSC_BOT_SendCSW (pdev,
 8007206:	2101      	movs	r1, #1
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff ff7d 	bl	8007108 <MSC_BOT_SendCSW>
 800720e:	e7d5      	b.n	80071bc <MSC_BOT_CBW_Decode+0x44>
        MSC_BOT_SendData(pdev,
 8007210:	f104 010c 	add.w	r1, r4, #12
 8007214:	4628      	mov	r0, r5
 8007216:	f7ff ff2d 	bl	8007074 <MSC_BOT_SendData>
 800721a:	e7cf      	b.n	80071bc <MSC_BOT_CBW_Decode+0x44>
 800721c:	43425355 	.word	0x43425355

08007220 <MSC_BOT_DataOut>:
{
 8007220:	b510      	push	{r4, lr}
 8007222:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007224:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007228:	7a1a      	ldrb	r2, [r3, #8]
 800722a:	b112      	cbz	r2, 8007232 <MSC_BOT_DataOut+0x12>
 800722c:	2a01      	cmp	r2, #1
 800722e:	d003      	beq.n	8007238 <MSC_BOT_DataOut+0x18>
}
 8007230:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 8007232:	f7ff ffa1 	bl	8007178 <MSC_BOT_CBW_Decode>
    break;
 8007236:	e7fb      	b.n	8007230 <MSC_BOT_DataOut+0x10>
    if(SCSI_ProcessCmd(pdev,
 8007238:	f203 221b 	addw	r2, r3, #539	; 0x21b
 800723c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007240:	f000 fafb 	bl	800783a <SCSI_ProcessCmd>
 8007244:	2800      	cmp	r0, #0
 8007246:	daf3      	bge.n	8007230 <MSC_BOT_DataOut+0x10>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007248:	2101      	movs	r1, #1
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff ff5c 	bl	8007108 <MSC_BOT_SendCSW>
}
 8007250:	e7ee      	b.n	8007230 <MSC_BOT_DataOut+0x10>

08007252 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007252:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007254:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8007258:	7a63      	ldrb	r3, [r4, #9]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d003      	beq.n	8007266 <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800725e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007262:	d106      	bne.n	8007272 <MSC_BOT_CplClrFeature+0x20>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 8007264:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007266:	2181      	movs	r1, #129	; 0x81
 8007268:	f006 fb5f 	bl	800d92a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800726c:	2300      	movs	r3, #0
 800726e:	7263      	strb	r3, [r4, #9]
 8007270:	e7f8      	b.n	8007264 <MSC_BOT_CplClrFeature+0x12>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007272:	2b01      	cmp	r3, #1
 8007274:	d0f6      	beq.n	8007264 <MSC_BOT_CplClrFeature+0x12>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007276:	2101      	movs	r1, #1
 8007278:	f7ff ff46 	bl	8007108 <MSC_BOT_SendCSW>
}
 800727c:	e7f2      	b.n	8007264 <MSC_BOT_CplClrFeature+0x12>
	...

08007280 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007280:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007282:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 8007286:	7853      	ldrb	r3, [r2, #1]
 8007288:	f013 0f01 	tst.w	r3, #1
 800728c:	d10d      	bne.n	80072aa <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800728e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007292:	69d8      	ldr	r0, [r3, #28]
 8007294:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007298:	008b      	lsls	r3, r1, #2
 800729a:	4418      	add	r0, r3
    len = pPage[4] + 5;
 800729c:	7901      	ldrb	r1, [r0, #4]
 800729e:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 80072a0:	7913      	ldrb	r3, [r2, #4]
 80072a2:	428b      	cmp	r3, r1
 80072a4:	d903      	bls.n	80072ae <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 80072a6:	460b      	mov	r3, r1
 80072a8:	e001      	b.n	80072ae <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 80072aa:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80072ac:	4806      	ldr	r0, [pc, #24]	; (80072c8 <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 80072ae:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 80072b0:	e004      	b.n	80072bc <SCSI_Inquiry+0x3c>
  {
    len--;
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80072b6:	5cc1      	ldrb	r1, [r0, r3]
 80072b8:	18e2      	adds	r2, r4, r3
 80072ba:	7311      	strb	r1, [r2, #12]
  while (len) 
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f8      	bne.n	80072b2 <SCSI_Inquiry+0x32>
  }
  return 0;
}
 80072c0:	2000      	movs	r0, #0
 80072c2:	bc10      	pop	{r4}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	0800f354 	.word	0x0800f354

080072cc <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80072cc:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 80072d0:	2308      	movs	r3, #8
 80072d2:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 80072d4:	e005      	b.n	80072e2 <SCSI_ModeSense6+0x16>
  {
    len--;
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80072da:	4a04      	ldr	r2, [pc, #16]	; (80072ec <SCSI_ModeSense6+0x20>)
 80072dc:	5cd1      	ldrb	r1, [r2, r3]
 80072de:	18c2      	adds	r2, r0, r3
 80072e0:	7311      	strb	r1, [r2, #12]
  while (len) 
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f7      	bne.n	80072d6 <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 80072e6:	2000      	movs	r0, #0
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	0800f34c 	.word	0x0800f34c

080072f0 <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80072f0:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 80072f4:	2308      	movs	r3, #8
 80072f6:	8143      	strh	r3, [r0, #10]

  while (len) 
 80072f8:	e005      	b.n	8007306 <SCSI_ModeSense10+0x16>
  {
    len--;
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80072fe:	4a04      	ldr	r2, [pc, #16]	; (8007310 <SCSI_ModeSense10+0x20>)
 8007300:	5cd1      	ldrb	r1, [r2, r3]
 8007302:	18c2      	adds	r2, r0, r3
 8007304:	7311      	strb	r1, [r2, #12]
  while (len) 
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f7      	bne.n	80072fa <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 800730a:	2000      	movs	r0, #0
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	0800f344 	.word	0x0800f344

08007314 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007314:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007316:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 800731a:	2300      	movs	r3, #0
 800731c:	e004      	b.n	8007328 <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 800731e:	18e1      	adds	r1, r4, r3
 8007320:	2000      	movs	r0, #0
 8007322:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8007324:	3301      	adds	r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b11      	cmp	r3, #17
 800732a:	d9f8      	bls.n	800731e <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 800732c:	2370      	movs	r3, #112	; 0x70
 800732e:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8007330:	230c      	movs	r3, #12
 8007332:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007334:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 8007338:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 800733c:	428b      	cmp	r3, r1
 800733e:	d00f      	beq.n	8007360 <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8007340:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8007344:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007348:	7908      	ldrb	r0, [r1, #4]
 800734a:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800734c:	7a48      	ldrb	r0, [r1, #9]
 800734e:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8007350:	7a09      	ldrb	r1, [r1, #8]
 8007352:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 8007354:	3301      	adds	r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800735c:	2b04      	cmp	r3, #4
 800735e:	d008      	beq.n	8007372 <SCSI_RequestSense+0x5e>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8007360:	2312      	movs	r3, #18
 8007362:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007364:	7913      	ldrb	r3, [r2, #4]
 8007366:	2b12      	cmp	r3, #18
 8007368:	d800      	bhi.n	800736c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 800736a:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 800736c:	2000      	movs	r0, #0
 800736e:	bc10      	pop	{r4}
 8007370:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 8007378:	e7f2      	b.n	8007360 <SCSI_RequestSense+0x4c>

0800737a <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 800737a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 800737e:	2000      	movs	r0, #0
 8007380:	8158      	strh	r0, [r3, #10]
  return 0;
}
 8007382:	4770      	bx	lr

08007384 <SCSI_SenseCode>:
{
 8007384:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007386:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800738a:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 800738e:	f101 0047 	add.w	r0, r1, #71	; 0x47
 8007392:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8007396:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 800739c:	3101      	adds	r1, #1
 800739e:	b2c9      	uxtb	r1, r1
 80073a0:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80073a4:	2904      	cmp	r1, #4
 80073a6:	d001      	beq.n	80073ac <SCSI_SenseCode+0x28>
}
 80073a8:	bc10      	pop	{r4}
 80073aa:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 80073b2:	e7f9      	b.n	80073a8 <SCSI_SenseCode+0x24>

080073b4 <SCSI_TestUnitReady>:
{
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80073b8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80073bc:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80073c0:	b95b      	cbnz	r3, 80073da <SCSI_TestUnitReady+0x26>
 80073c2:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80073c4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	4608      	mov	r0, r1
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	b960      	cbnz	r0, 80073ec <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 80073d2:	2200      	movs	r2, #0
 80073d4:	816a      	strh	r2, [r5, #10]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 80073da:	2320      	movs	r3, #32
 80073dc:	2205      	movs	r2, #5
 80073de:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 80073e2:	f7ff ffcf 	bl	8007384 <SCSI_SenseCode>
    return -1;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e7f4      	b.n	80073d6 <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 80073ec:	233a      	movs	r3, #58	; 0x3a
 80073ee:	2202      	movs	r2, #2
 80073f0:	4631      	mov	r1, r6
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7ff ffc6 	bl	8007384 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80073f8:	2305      	movs	r3, #5
 80073fa:	722b      	strb	r3, [r5, #8]
    return -1;
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	e7e9      	b.n	80073d6 <SCSI_TestUnitReady+0x22>

08007402 <SCSI_ReadFormatCapacity>:
{
 8007402:	b570      	push	{r4, r5, r6, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	4605      	mov	r5, r0
 8007408:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800740a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 800740e:	2300      	movs	r3, #0
 8007410:	e004      	b.n	800741c <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 8007412:	18e2      	adds	r2, r4, r3
 8007414:	2100      	movs	r1, #0
 8007416:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 8007418:	3301      	adds	r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d9f8      	bls.n	8007412 <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8007420:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f10d 0206 	add.w	r2, sp, #6
 800742a:	4669      	mov	r1, sp
 800742c:	4630      	mov	r0, r6
 800742e:	4798      	blx	r3
 8007430:	4601      	mov	r1, r0
 8007432:	b9d8      	cbnz	r0, 800746c <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 8007434:	2308      	movs	r3, #8
 8007436:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8007438:	9a00      	ldr	r2, [sp, #0]
 800743a:	1e53      	subs	r3, r2, #1
 800743c:	0e18      	lsrs	r0, r3, #24
 800743e:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8007440:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8007444:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8007446:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800744a:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800744c:	3a01      	subs	r2, #1
 800744e:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 8007450:	2302      	movs	r3, #2
 8007452:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007454:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007458:	2200      	movs	r2, #0
 800745a:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800745c:	0a1a      	lsrs	r2, r3, #8
 800745e:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007460:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 8007462:	230c      	movs	r3, #12
 8007464:	8163      	strh	r3, [r4, #10]
}
 8007466:	4608      	mov	r0, r1
 8007468:	b002      	add	sp, #8
 800746a:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 800746c:	233a      	movs	r3, #58	; 0x3a
 800746e:	2202      	movs	r2, #2
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	f7ff ff86 	bl	8007384 <SCSI_SenseCode>
    return -1;
 8007478:	f04f 31ff 	mov.w	r1, #4294967295
 800747c:	e7f3      	b.n	8007466 <SCSI_ReadFormatCapacity+0x64>

0800747e <SCSI_ReadCapacity10>:
{
 800747e:	b570      	push	{r4, r5, r6, lr}
 8007480:	4605      	mov	r5, r0
 8007482:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007484:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007488:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f204 225e 	addw	r2, r4, #606	; 0x25e
 8007492:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8007496:	4630      	mov	r0, r6
 8007498:	4798      	blx	r3
 800749a:	b9c8      	cbnz	r0, 80074d0 <SCSI_ReadCapacity10+0x52>
 800749c:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 800749e:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 80074a2:	1e53      	subs	r3, r2, #1
 80074a4:	0e18      	lsrs	r0, r3, #24
 80074a6:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 80074a8:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80074ac:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 80074ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80074b2:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 80074b4:	3a01      	subs	r2, #1
 80074b6:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80074b8:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 80074bc:	2200      	movs	r2, #0
 80074be:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80074c0:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80074c2:	0a1a      	lsrs	r2, r3, #8
 80074c4:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80074c6:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 80074c8:	2308      	movs	r3, #8
 80074ca:	8163      	strh	r3, [r4, #10]
}
 80074cc:	4608      	mov	r0, r1
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 80074d0:	233a      	movs	r3, #58	; 0x3a
 80074d2:	2202      	movs	r2, #2
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff ff54 	bl	8007384 <SCSI_SenseCode>
    return -1;
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	e7f4      	b.n	80074cc <SCSI_ReadCapacity10+0x4e>

080074e2 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 80074e2:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80074e4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80074e8:	4413      	add	r3, r2
 80074ea:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	d801      	bhi.n	80074f6 <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 80074f2:	2000      	movs	r0, #0
}
 80074f4:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 80074f6:	2321      	movs	r3, #33	; 0x21
 80074f8:	2205      	movs	r2, #5
 80074fa:	f7ff ff43 	bl	8007384 <SCSI_SenseCode>
    return -1;
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	e7f7      	b.n	80074f4 <SCSI_CheckAddressRange+0x12>

08007504 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007508:	4606      	mov	r6, r0
 800750a:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 800750c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8007510:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8007514:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007518:	bf28      	it	cs
 800751a:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800751e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007522:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 8007526:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800752a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800752e:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8007532:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8007536:	b29b      	uxth	r3, r3
 8007538:	fbb1 f2f2 	udiv	r2, r1, r2
 800753c:	4639      	mov	r1, r7
 800753e:	4640      	mov	r0, r8
 8007540:	47c8      	blx	r9
 8007542:	2800      	cmp	r0, #0
 8007544:	db1a      	blt.n	800757c <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 8007546:	b2ab      	uxth	r3, r5
 8007548:	463a      	mov	r2, r7
 800754a:	2181      	movs	r1, #129	; 0x81
 800754c:	4630      	mov	r0, r6
 800754e:	f006 fa17 	bl	800d980 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8007552:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 8007556:	442b      	add	r3, r5
 8007558:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 800755c:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8007560:	1b5b      	subs	r3, r3, r5
 8007562:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007566:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 800756a:	1b55      	subs	r5, r2, r5
 800756c:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8007570:	b96b      	cbnz	r3, 800758e <SCSI_ProcessRead+0x8a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007572:	2303      	movs	r3, #3
 8007574:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 8007576:	2000      	movs	r0, #0
}
 8007578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 800757c:	2311      	movs	r3, #17
 800757e:	2204      	movs	r2, #4
 8007580:	4641      	mov	r1, r8
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff fefe 	bl	8007384 <SCSI_SenseCode>
    return -1; 
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	e7f4      	b.n	8007578 <SCSI_ProcessRead+0x74>
  return 0;
 800758e:	2000      	movs	r0, #0
 8007590:	e7f2      	b.n	8007578 <SCSI_ProcessRead+0x74>

08007592 <SCSI_Read10>:
{
 8007592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007594:	4606      	mov	r6, r0
 8007596:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007598:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800759c:	7a23      	ldrb	r3, [r4, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d137      	bne.n	8007612 <SCSI_Read10+0x80>
 80075a2:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80075a4:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da3a      	bge.n	8007622 <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80075ac:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4608      	mov	r0, r1
 80075b4:	4798      	blx	r3
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d13c      	bne.n	8007634 <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075ba:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 80075bc:	78ea      	ldrb	r2, [r5, #3]
 80075be:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075c0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 80075c4:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 80075c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 80075ca:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 80075cc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075ce:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80075d2:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 80075d4:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80075d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075da:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80075de:	4639      	mov	r1, r7
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ff7e 	bl	80074e2 <SCSI_CheckAddressRange>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	db37      	blt.n	800765a <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80075ea:	2302      	movs	r3, #2
 80075ec:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80075ee:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 80075f2:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80075f6:	fb01 f202 	mul.w	r2, r1, r2
 80075fa:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80075fe:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8007602:	fb03 f301 	mul.w	r3, r3, r1
 8007606:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800760a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800760e:	4293      	cmp	r3, r2
 8007610:	d119      	bne.n	8007646 <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8007612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007616:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 8007618:	4639      	mov	r1, r7
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff ff72 	bl	8007504 <SCSI_ProcessRead>
}
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 8007622:	2320      	movs	r3, #32
 8007624:	2205      	movs	r2, #5
 8007626:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800762a:	f7ff feab 	bl	8007384 <SCSI_SenseCode>
      return -1;
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	e7f5      	b.n	8007620 <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 8007634:	233a      	movs	r3, #58	; 0x3a
 8007636:	2202      	movs	r2, #2
 8007638:	4639      	mov	r1, r7
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff fea2 	bl	8007384 <SCSI_SenseCode>
      return -1;
 8007640:	f04f 30ff 	mov.w	r0, #4294967295
 8007644:	e7ec      	b.n	8007620 <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 8007646:	2320      	movs	r3, #32
 8007648:	2205      	movs	r2, #5
 800764a:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800764e:	4630      	mov	r0, r6
 8007650:	f7ff fe98 	bl	8007384 <SCSI_SenseCode>
      return -1;
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	e7e2      	b.n	8007620 <SCSI_Read10+0x8e>
      return -1; /* error */
 800765a:	f04f 30ff 	mov.w	r0, #4294967295
 800765e:	e7df      	b.n	8007620 <SCSI_Read10+0x8e>

08007660 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	4606      	mov	r6, r0
 8007666:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007668:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800766c:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8007670:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007674:	bf28      	it	cs
 8007676:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800767a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800767e:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 8007682:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8007686:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800768a:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 800768e:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8007692:	b29b      	uxth	r3, r3
 8007694:	fbb1 f2f2 	udiv	r2, r1, r2
 8007698:	4639      	mov	r1, r7
 800769a:	4640      	mov	r0, r8
 800769c:	47c8      	blx	r9
 800769e:	2800      	cmp	r0, #0
 80076a0:	db1d      	blt.n	80076de <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 80076a2:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 80076a6:	442b      	add	r3, r5
 80076a8:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 80076ac:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 80076b0:	1b5b      	subs	r3, r3, r5
 80076b2:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80076b6:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 80076ba:	1b55      	subs	r5, r2, r5
 80076bc:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 80076c0:	b1b3      	cbz	r3, 80076f0 <SCSI_ProcessWrite+0x90>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c6:	bf28      	it	cs
 80076c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	463a      	mov	r2, r7
 80076d0:	2101      	movs	r1, #1
 80076d2:	4630      	mov	r0, r6
 80076d4:	f006 f95c 	bl	800d990 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 80076d8:	2000      	movs	r0, #0
}
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 80076de:	2303      	movs	r3, #3
 80076e0:	2204      	movs	r2, #4
 80076e2:	4641      	mov	r1, r8
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fe4d 	bl	8007384 <SCSI_SenseCode>
    return -1; 
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e7f4      	b.n	80076da <SCSI_ProcessWrite+0x7a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80076f0:	2100      	movs	r1, #0
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff fd08 	bl	8007108 <MSC_BOT_SendCSW>
  return 0;
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7ee      	b.n	80076da <SCSI_ProcessWrite+0x7a>

080076fc <SCSI_Write10>:
{
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4605      	mov	r5, r0
 8007702:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007704:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007708:	7a23      	ldrb	r3, [r4, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d172      	bne.n	80077f4 <SCSI_Write10+0xf8>
 800770e:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8007710:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8007714:	2b00      	cmp	r3, #0
 8007716:	db48      	blt.n	80077aa <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007718:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	4608      	mov	r0, r1
 8007720:	4798      	blx	r3
 8007722:	2800      	cmp	r0, #0
 8007724:	d14a      	bne.n	80077bc <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8007726:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4638      	mov	r0, r7
 800772e:	4798      	blx	r3
 8007730:	4680      	mov	r8, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	d14b      	bne.n	80077ce <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007736:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 8007738:	78f2      	ldrb	r2, [r6, #3]
 800773a:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800773c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8007740:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 8007742:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 8007746:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 8007748:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800774a:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800774e:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 8007750:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8007752:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007756:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 800775a:	4639      	mov	r1, r7
 800775c:	4628      	mov	r0, r5
 800775e:	f7ff fec0 	bl	80074e2 <SCSI_CheckAddressRange>
 8007762:	2800      	cmp	r0, #0
 8007764:	db4a      	blt.n	80077fc <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8007766:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 800776a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 800776e:	fb01 f202 	mul.w	r2, r1, r2
 8007772:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8007776:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 800777a:	fb03 f301 	mul.w	r3, r3, r1
 800777e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8007782:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8007786:	4293      	cmp	r3, r2
 8007788:	d12a      	bne.n	80077e0 <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 800778a:	2101      	movs	r1, #1
 800778c:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800778e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007792:	bf28      	it	cs
 8007794:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8007798:	b29b      	uxth	r3, r3
 800779a:	f104 020c 	add.w	r2, r4, #12
 800779e:	4628      	mov	r0, r5
 80077a0:	f006 f8f6 	bl	800d990 <USBD_LL_PrepareReceive>
}
 80077a4:	4640      	mov	r0, r8
 80077a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 80077aa:	2320      	movs	r3, #32
 80077ac:	2205      	movs	r2, #5
 80077ae:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80077b2:	f7ff fde7 	bl	8007384 <SCSI_SenseCode>
      return -1;
 80077b6:	f04f 38ff 	mov.w	r8, #4294967295
 80077ba:	e7f3      	b.n	80077a4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80077bc:	233a      	movs	r3, #58	; 0x3a
 80077be:	2202      	movs	r2, #2
 80077c0:	4639      	mov	r1, r7
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7ff fdde 	bl	8007384 <SCSI_SenseCode>
      return -1;
 80077c8:	f04f 38ff 	mov.w	r8, #4294967295
 80077cc:	e7ea      	b.n	80077a4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80077ce:	2327      	movs	r3, #39	; 0x27
 80077d0:	2202      	movs	r2, #2
 80077d2:	4639      	mov	r1, r7
 80077d4:	4628      	mov	r0, r5
 80077d6:	f7ff fdd5 	bl	8007384 <SCSI_SenseCode>
      return -1;
 80077da:	f04f 38ff 	mov.w	r8, #4294967295
 80077de:	e7e1      	b.n	80077a4 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 80077e0:	2320      	movs	r3, #32
 80077e2:	2205      	movs	r2, #5
 80077e4:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80077e8:	4628      	mov	r0, r5
 80077ea:	f7ff fdcb 	bl	8007384 <SCSI_SenseCode>
      return -1;
 80077ee:	f04f 38ff 	mov.w	r8, #4294967295
 80077f2:	e7d7      	b.n	80077a4 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 80077f4:	f7ff ff34 	bl	8007660 <SCSI_ProcessWrite>
 80077f8:	4680      	mov	r8, r0
 80077fa:	e7d3      	b.n	80077a4 <SCSI_Write10+0xa8>
      return -1; /* error */      
 80077fc:	f04f 38ff 	mov.w	r8, #4294967295
 8007800:	e7d0      	b.n	80077a4 <SCSI_Write10+0xa8>

08007802 <SCSI_Verify10>:
{
 8007802:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007804:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8007808:	7853      	ldrb	r3, [r2, #1]
 800780a:	f013 0f02 	tst.w	r3, #2
 800780e:	d10a      	bne.n	8007826 <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 8007810:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8007814:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8007818:	f7ff fe63 	bl	80074e2 <SCSI_CheckAddressRange>
 800781c:	2800      	cmp	r0, #0
 800781e:	db09      	blt.n	8007834 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 8007820:	2000      	movs	r0, #0
 8007822:	8160      	strh	r0, [r4, #10]
}
 8007824:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 8007826:	2324      	movs	r3, #36	; 0x24
 8007828:	2205      	movs	r2, #5
 800782a:	f7ff fdab 	bl	8007384 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	e7f7      	b.n	8007824 <SCSI_Verify10+0x22>
    return -1; /* error */      
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e7f4      	b.n	8007824 <SCSI_Verify10+0x22>

0800783a <SCSI_ProcessCmd>:
{
 800783a:	b508      	push	{r3, lr}
  switch (params[0])
 800783c:	7813      	ldrb	r3, [r2, #0]
 800783e:	2b5a      	cmp	r3, #90	; 0x5a
 8007840:	d853      	bhi.n	80078ea <SCSI_ProcessCmd+0xb0>
 8007842:	e8df f003 	tbb	[pc, r3]
 8007846:	522e      	.short	0x522e
 8007848:	52523152 	.word	0x52523152
 800784c:	52525252 	.word	0x52525252
 8007850:	52525252 	.word	0x52525252
 8007854:	52525252 	.word	0x52525252
 8007858:	52525234 	.word	0x52525234
 800785c:	52525252 	.word	0x52525252
 8007860:	5252373d 	.word	0x5252373d
 8007864:	5252523a 	.word	0x5252523a
 8007868:	46524352 	.word	0x46524352
 800786c:	52495252 	.word	0x52495252
 8007870:	5252524c 	.word	0x5252524c
 8007874:	52524f52 	.word	0x52524f52
 8007878:	52525252 	.word	0x52525252
 800787c:	52525252 	.word	0x52525252
 8007880:	52525252 	.word	0x52525252
 8007884:	52525252 	.word	0x52525252
 8007888:	52525252 	.word	0x52525252
 800788c:	52525252 	.word	0x52525252
 8007890:	52525252 	.word	0x52525252
 8007894:	52525252 	.word	0x52525252
 8007898:	52525252 	.word	0x52525252
 800789c:	52525252 	.word	0x52525252
 80078a0:	40          	.byte	0x40
 80078a1:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 80078a2:	f7ff fd87 	bl	80073b4 <SCSI_TestUnitReady>
}
 80078a6:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 80078a8:	f7ff fd34 	bl	8007314 <SCSI_RequestSense>
 80078ac:	e7fb      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_Inquiry(pdev, lun, params);
 80078ae:	f7ff fce7 	bl	8007280 <SCSI_Inquiry>
 80078b2:	e7f8      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 80078b4:	f7ff fd61 	bl	800737a <SCSI_StartStopUnit>
 80078b8:	e7f5      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 80078ba:	f7ff fd5e 	bl	800737a <SCSI_StartStopUnit>
 80078be:	e7f2      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense6 (pdev, lun, params);
 80078c0:	f7ff fd04 	bl	80072cc <SCSI_ModeSense6>
 80078c4:	e7ef      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense10 (pdev, lun, params);
 80078c6:	f7ff fd13 	bl	80072f0 <SCSI_ModeSense10>
 80078ca:	e7ec      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 80078cc:	f7ff fd99 	bl	8007402 <SCSI_ReadFormatCapacity>
 80078d0:	e7e9      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadCapacity10(pdev, lun, params);
 80078d2:	f7ff fdd4 	bl	800747e <SCSI_ReadCapacity10>
 80078d6:	e7e6      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_Read10(pdev, lun, params); 
 80078d8:	f7ff fe5b 	bl	8007592 <SCSI_Read10>
 80078dc:	e7e3      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_Write10(pdev, lun, params);
 80078de:	f7ff ff0d 	bl	80076fc <SCSI_Write10>
 80078e2:	e7e0      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    return SCSI_Verify10(pdev, lun, params);
 80078e4:	f7ff ff8d 	bl	8007802 <SCSI_Verify10>
 80078e8:	e7dd      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>
    SCSI_SenseCode(pdev, 
 80078ea:	2320      	movs	r3, #32
 80078ec:	2205      	movs	r2, #5
 80078ee:	f7ff fd49 	bl	8007384 <SCSI_SenseCode>
    return -1;
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	e7d6      	b.n	80078a6 <SCSI_ProcessCmd+0x6c>

080078f8 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80078f8:	b198      	cbz	r0, 8007922 <USBD_Init+0x2a>
{
 80078fa:	b508      	push	{r3, lr}
 80078fc:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80078fe:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8007902:	b110      	cbz	r0, 800790a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8007904:	2000      	movs	r0, #0
 8007906:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800790a:	b109      	cbz	r1, 8007910 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800790c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8007910:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007912:	2301      	movs	r3, #1
 8007914:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8007918:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800791a:	f005 ffa9 	bl	800d870 <USBD_LL_Init>
  
  return USBD_OK; 
 800791e:	2000      	movs	r0, #0
}
 8007920:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8007922:	2002      	movs	r0, #2
}
 8007924:	4770      	bx	lr

08007926 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007926:	b119      	cbz	r1, 8007930 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007928:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800792c:	2000      	movs	r0, #0
 800792e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8007930:	2002      	movs	r0, #2
  }
  
  return status;
}
 8007932:	4770      	bx	lr

08007934 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007934:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8007936:	f005 ffd5 	bl	800d8e4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800793a:	2000      	movs	r0, #0
 800793c:	bd08      	pop	{r3, pc}

0800793e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800793e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8007940:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007944:	b133      	cbz	r3, 8007954 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4798      	blx	r3
 800794a:	b908      	cbnz	r0, 8007950 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 800794c:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 800794e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007950:	2002      	movs	r0, #2
 8007952:	e7fc      	b.n	800794e <USBD_SetClassConfig+0x10>
 8007954:	2002      	movs	r0, #2
 8007956:	e7fa      	b.n	800794e <USBD_SetClassConfig+0x10>

08007958 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007958:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800795a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4798      	blx	r3
  return USBD_OK;
}
 8007962:	2000      	movs	r0, #0
 8007964:	bd08      	pop	{r3, pc}

08007966 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007966:	b538      	push	{r3, r4, r5, lr}
 8007968:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800796a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f90c 	bl	8007b8c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8007974:	2301      	movs	r3, #1
 8007976:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800797a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800797e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8007982:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8007986:	f001 031f 	and.w	r3, r1, #31
 800798a:	2b01      	cmp	r3, #1
 800798c:	d00e      	beq.n	80079ac <USBD_LL_SetupStage+0x46>
 800798e:	b13b      	cbz	r3, 80079a0 <USBD_LL_SetupStage+0x3a>
 8007990:	2b02      	cmp	r3, #2
 8007992:	d010      	beq.n	80079b6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007994:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007998:	4620      	mov	r0, r4
 800799a:	f005 ffc6 	bl	800d92a <USBD_LL_StallEP>
    break;
 800799e:	e003      	b.n	80079a8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80079a0:	4629      	mov	r1, r5
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fa6b 	bl	8007e7e <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80079a8:	2000      	movs	r0, #0
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80079ac:	4629      	mov	r1, r5
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fa89 	bl	8007ec6 <USBD_StdItfReq>
    break;
 80079b4:	e7f8      	b.n	80079a8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80079b6:	4629      	mov	r1, r5
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 faa0 	bl	8007efe <USBD_StdEPReq>
    break;
 80079be:	e7f3      	b.n	80079a8 <USBD_LL_SetupStage+0x42>

080079c0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80079c0:	b510      	push	{r4, lr}
 80079c2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80079c4:	bb21      	cbnz	r1, 8007a10 <USBD_LL_DataOutStage+0x50>
 80079c6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079c8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80079cc:	2a03      	cmp	r2, #3
 80079ce:	d001      	beq.n	80079d4 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80079d0:	2000      	movs	r0, #0
 80079d2:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80079d4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80079d8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80079dc:	4291      	cmp	r1, r2
 80079de:	d80c      	bhi.n	80079fa <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80079e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	b123      	cbz	r3, 80079f2 <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079e8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80079ec:	2a03      	cmp	r2, #3
 80079ee:	d100      	bne.n	80079f2 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 80079f0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fb49 	bl	800808a <USBD_CtlSendStatus>
 80079f8:	e7ea      	b.n	80079d0 <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 80079fa:	1a89      	subs	r1, r1, r2
 80079fc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8007a00:	428a      	cmp	r2, r1
 8007a02:	bf28      	it	cs
 8007a04:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8007a06:	b292      	uxth	r2, r2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	f000 fb36 	bl	800807a <USBD_CtlContinueRx>
 8007a0e:	e7df      	b.n	80079d0 <USBD_LL_DataOutStage+0x10>
 8007a10:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 8007a12:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0d9      	beq.n	80079d0 <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a1c:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8007a20:	2903      	cmp	r1, #3
 8007a22:	d1d5      	bne.n	80079d0 <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8007a24:	4611      	mov	r1, r2
 8007a26:	4798      	blx	r3
 8007a28:	e7d2      	b.n	80079d0 <USBD_LL_DataOutStage+0x10>

08007a2a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d146      	bne.n	8007ac0 <USBD_LL_DataInStage+0x96>
 8007a32:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a34:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8007a38:	2a02      	cmp	r2, #2
 8007a3a:	d005      	beq.n	8007a48 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8007a3c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d039      	beq.n	8007ab8 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8007a44:	2000      	movs	r0, #0
 8007a46:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8007a48:	69c1      	ldr	r1, [r0, #28]
 8007a4a:	6a02      	ldr	r2, [r0, #32]
 8007a4c:	4291      	cmp	r1, r2
 8007a4e:	d819      	bhi.n	8007a84 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 8007a50:	6981      	ldr	r1, [r0, #24]
 8007a52:	fbb1 f3f2 	udiv	r3, r1, r2
 8007a56:	fb02 1313 	mls	r3, r2, r3, r1
 8007a5a:	b92b      	cbnz	r3, 8007a68 <USBD_LL_DataInStage+0x3e>
 8007a5c:	428a      	cmp	r2, r1
 8007a5e:	d803      	bhi.n	8007a68 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 8007a60:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8007a64:	4299      	cmp	r1, r3
 8007a66:	d31a      	bcc.n	8007a9e <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007a68:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	b12b      	cbz	r3, 8007a7c <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a70:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007a74:	2a03      	cmp	r2, #3
 8007a76:	d101      	bne.n	8007a7c <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fb0f 	bl	80080a0 <USBD_CtlReceiveStatus>
 8007a82:	e7db      	b.n	8007a3c <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8007a84:	1a8a      	subs	r2, r1, r2
 8007a86:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8007a88:	b292      	uxth	r2, r2
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f000 faed 	bl	800806a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8007a90:	2300      	movs	r3, #0
 8007a92:	461a      	mov	r2, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	4620      	mov	r0, r4
 8007a98:	f005 ff7a 	bl	800d990 <USBD_LL_PrepareReceive>
 8007a9c:	e7ce      	b.n	8007a3c <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	f000 fae2 	bl	800806a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8007aac:	460b      	mov	r3, r1
 8007aae:	460a      	mov	r2, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f005 ff6d 	bl	800d990 <USBD_LL_PrepareReceive>
 8007ab6:	e7c1      	b.n	8007a3c <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8007abe:	e7c1      	b.n	8007a44 <USBD_LL_DataInStage+0x1a>
 8007ac0:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8007ac2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0bb      	beq.n	8007a44 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007acc:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8007ad0:	2903      	cmp	r1, #3
 8007ad2:	d1b7      	bne.n	8007a44 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	e7b4      	b.n	8007a44 <USBD_LL_DataInStage+0x1a>

08007ada <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007ada:	b538      	push	{r3, r4, r5, lr}
 8007adc:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	f005 ff06 	bl	800d8f4 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae8:	2540      	movs	r5, #64	; 0x40
 8007aea:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007aee:	462b      	mov	r3, r5
 8007af0:	2200      	movs	r2, #0
 8007af2:	2180      	movs	r1, #128	; 0x80
 8007af4:	4620      	mov	r0, r4
 8007af6:	f005 fefd 	bl	800d8f4 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007afa:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8007b02:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8007b06:	b12b      	cbz	r3, 8007b14 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8007b08:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	7921      	ldrb	r1, [r4, #4]
 8007b10:	4620      	mov	r0, r4
 8007b12:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8007b14:	2000      	movs	r0, #0
 8007b16:	bd38      	pop	{r3, r4, r5, pc}

08007b18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007b18:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	4770      	bx	lr

08007b1e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007b1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007b22:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b26:	2304      	movs	r3, #4
 8007b28:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8007b30:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8007b34:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4770      	bx	lr

08007b3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007b3c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d001      	beq.n	8007b4a <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8007b46:	2000      	movs	r0, #0
 8007b48:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8007b4a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0f8      	beq.n	8007b46 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8007b54:	4798      	blx	r3
 8007b56:	e7f6      	b.n	8007b46 <USBD_LL_SOF+0xa>

08007b58 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 8007b58:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8007b5a:	e002      	b.n	8007b62 <USBD_GetLen+0xa>
    {
        len++;
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	b2db      	uxtb	r3, r3
        buf++;
 8007b60:	3001      	adds	r0, #1
    while (*buf != '\0') 
 8007b62:	7802      	ldrb	r2, [r0, #0]
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d1f9      	bne.n	8007b5c <USBD_GetLen+0x4>
    }

    return len;
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4770      	bx	lr

08007b6c <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6c:	884b      	ldrh	r3, [r1, #2]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10b      	bne.n	8007b8a <USBD_SetFeature+0x1e>
{
 8007b72:	b510      	push	{r4, lr}
 8007b74:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8007b76:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007b7a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 fa81 	bl	800808a <USBD_CtlSendStatus>
}
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	4770      	bx	lr

08007b8c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b8c:	780b      	ldrb	r3, [r1, #0]
 8007b8e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b90:	784b      	ldrb	r3, [r1, #1]
 8007b92:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b94:	788b      	ldrb	r3, [r1, #2]
 8007b96:	78ca      	ldrb	r2, [r1, #3]
 8007b98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007b9c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b9e:	790b      	ldrb	r3, [r1, #4]
 8007ba0:	794a      	ldrb	r2, [r1, #5]
 8007ba2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ba6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007ba8:	798b      	ldrb	r3, [r1, #6]
 8007baa:	79ca      	ldrb	r2, [r1, #7]
 8007bac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007bb0:	80c3      	strh	r3, [r0, #6]
}
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_CtlError>:
{
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007bb8:	2180      	movs	r1, #128	; 0x80
 8007bba:	f005 feb6 	bl	800d92a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f005 feb2 	bl	800d92a <USBD_LL_StallEP>
}
 8007bc6:	bd10      	pop	{r4, pc}

08007bc8 <USBD_GetDescriptor>:
{
 8007bc8:	b530      	push	{r4, r5, lr}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	4604      	mov	r4, r0
 8007bce:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8007bd0:	884a      	ldrh	r2, [r1, #2]
 8007bd2:	0a13      	lsrs	r3, r2, #8
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	f200 8081 	bhi.w	8007cde <USBD_GetDescriptor+0x116>
 8007bdc:	e8df f003 	tbb	[pc, r3]
 8007be0:	7f271304 	.word	0x7f271304
 8007be4:	637f      	.short	0x637f
 8007be6:	70          	.byte	0x70
 8007be7:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007be8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f10d 0106 	add.w	r1, sp, #6
 8007bf2:	7c00      	ldrb	r0, [r0, #16]
 8007bf4:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8007bf6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007bfa:	b112      	cbz	r2, 8007c02 <USBD_GetDescriptor+0x3a>
 8007bfc:	88eb      	ldrh	r3, [r5, #6]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d171      	bne.n	8007ce6 <USBD_GetDescriptor+0x11e>
}
 8007c02:	b003      	add	sp, #12
 8007c04:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007c06:	7c03      	ldrb	r3, [r0, #16]
 8007c08:	b943      	cbnz	r3, 8007c1c <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007c0a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f10d 0006 	add.w	r0, sp, #6
 8007c14:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c16:	2302      	movs	r3, #2
 8007c18:	7043      	strb	r3, [r0, #1]
 8007c1a:	e7ec      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c1c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f10d 0006 	add.w	r0, sp, #6
 8007c26:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	7043      	strb	r3, [r0, #1]
 8007c2c:	e7e3      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	2a05      	cmp	r2, #5
 8007c32:	d834      	bhi.n	8007c9e <USBD_GetDescriptor+0xd6>
 8007c34:	e8df f002 	tbb	[pc, r2]
 8007c38:	1b130b03 	.word	0x1b130b03
 8007c3c:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007c3e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f10d 0106 	add.w	r1, sp, #6
 8007c48:	7c00      	ldrb	r0, [r0, #16]
 8007c4a:	4798      	blx	r3
      break;
 8007c4c:	e7d3      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c4e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f10d 0106 	add.w	r1, sp, #6
 8007c58:	7c00      	ldrb	r0, [r0, #16]
 8007c5a:	4798      	blx	r3
      break;
 8007c5c:	e7cb      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c5e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f10d 0106 	add.w	r1, sp, #6
 8007c68:	7c00      	ldrb	r0, [r0, #16]
 8007c6a:	4798      	blx	r3
      break;
 8007c6c:	e7c3      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c6e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f10d 0106 	add.w	r1, sp, #6
 8007c78:	7c00      	ldrb	r0, [r0, #16]
 8007c7a:	4798      	blx	r3
      break;
 8007c7c:	e7bb      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c7e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f10d 0106 	add.w	r1, sp, #6
 8007c88:	7c00      	ldrb	r0, [r0, #16]
 8007c8a:	4798      	blx	r3
      break;
 8007c8c:	e7b3      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c8e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f10d 0106 	add.w	r1, sp, #6
 8007c98:	7c00      	ldrb	r0, [r0, #16]
 8007c9a:	4798      	blx	r3
      break;
 8007c9c:	e7ab      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7ff ff88 	bl	8007bb4 <USBD_CtlError>
      return;
 8007ca4:	e7ad      	b.n	8007c02 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007ca6:	7c03      	ldrb	r3, [r0, #16]
 8007ca8:	b933      	cbnz	r3, 8007cb8 <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007caa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f10d 0006 	add.w	r0, sp, #6
 8007cb4:	4798      	blx	r3
      break;
 8007cb6:	e79e      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7ff ff7b 	bl	8007bb4 <USBD_CtlError>
      return;
 8007cbe:	e7a0      	b.n	8007c02 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007cc0:	7c03      	ldrb	r3, [r0, #16]
 8007cc2:	b943      	cbnz	r3, 8007cd6 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cc4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f10d 0006 	add.w	r0, sp, #6
 8007cce:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cd0:	2307      	movs	r3, #7
 8007cd2:	7043      	strb	r3, [r0, #1]
      break; 
 8007cd4:	e78f      	b.n	8007bf6 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7ff ff6c 	bl	8007bb4 <USBD_CtlError>
      return;
 8007cdc:	e791      	b.n	8007c02 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7ff ff68 	bl	8007bb4 <USBD_CtlError>
    return;
 8007ce4:	e78d      	b.n	8007c02 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bf28      	it	cs
 8007cea:	461a      	movcs	r2, r3
 8007cec:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 f9ac 	bl	8008050 <USBD_CtlSendData>
 8007cf8:	e783      	b.n	8007c02 <USBD_GetDescriptor+0x3a>

08007cfa <USBD_SetAddress>:
{
 8007cfa:	b538      	push	{r3, r4, r5, lr}
 8007cfc:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007cfe:	888b      	ldrh	r3, [r1, #4]
 8007d00:	b9e3      	cbnz	r3, 8007d3c <USBD_SetAddress+0x42>
 8007d02:	88cb      	ldrh	r3, [r1, #6]
 8007d04:	b9d3      	cbnz	r3, 8007d3c <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007d06:	788d      	ldrb	r5, [r1, #2]
 8007d08:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007d0c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d00c      	beq.n	8007d2e <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 8007d14:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f005 fe29 	bl	800d970 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f9b3 	bl	800808a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8007d24:	b135      	cbz	r5, 8007d34 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007d26:	2302      	movs	r3, #2
 8007d28:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007d2c:	e009      	b.n	8007d42 <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 8007d2e:	f7ff ff41 	bl	8007bb4 <USBD_CtlError>
 8007d32:	e006      	b.n	8007d42 <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007d34:	2301      	movs	r3, #1
 8007d36:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007d3a:	e002      	b.n	8007d42 <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7ff ff39 	bl	8007bb4 <USBD_CtlError>
}
 8007d42:	bd38      	pop	{r3, r4, r5, pc}

08007d44 <USBD_SetConfig>:
{
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4604      	mov	r4, r0
 8007d48:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8007d4a:	7889      	ldrb	r1, [r1, #2]
 8007d4c:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <USBD_SetConfig+0xa0>)
 8007d4e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007d50:	2901      	cmp	r1, #1
 8007d52:	d809      	bhi.n	8007d68 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8007d54:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d009      	beq.n	8007d70 <USBD_SetConfig+0x2c>
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d01c      	beq.n	8007d9a <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7ff ff27 	bl	8007bb4 <USBD_CtlError>
      break;
 8007d66:	e002      	b.n	8007d6e <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7ff ff23 	bl	8007bb4 <USBD_CtlError>
}
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8007d70:	b181      	cbz	r1, 8007d94 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8007d72:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d74:	2303      	movs	r3, #3
 8007d76:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007d7a:	f7ff fde0 	bl	800793e <USBD_SetClassConfig>
 8007d7e:	2802      	cmp	r0, #2
 8007d80:	d003      	beq.n	8007d8a <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f981 	bl	800808a <USBD_CtlSendStatus>
 8007d88:	e7f1      	b.n	8007d6e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff ff11 	bl	8007bb4 <USBD_CtlError>
          return;
 8007d92:	e7ec      	b.n	8007d6e <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 8007d94:	f000 f979 	bl	800808a <USBD_CtlSendStatus>
 8007d98:	e7e9      	b.n	8007d6e <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 8007d9a:	b189      	cbz	r1, 8007dc0 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8007d9c:	6843      	ldr	r3, [r0, #4]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	d01d      	beq.n	8007dde <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007da2:	b2d9      	uxtb	r1, r3
 8007da4:	f7ff fdd8 	bl	8007958 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <USBD_SetConfig+0xa0>)
 8007daa:	7819      	ldrb	r1, [r3, #0]
 8007dac:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7ff fdc5 	bl	800793e <USBD_SetClassConfig>
 8007db4:	2802      	cmp	r0, #2
 8007db6:	d00d      	beq.n	8007dd4 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f966 	bl	800808a <USBD_CtlSendStatus>
 8007dbe:	e7d6      	b.n	8007d6e <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007dc6:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007dc8:	f7ff fdc6 	bl	8007958 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f95c 	bl	800808a <USBD_CtlSendStatus>
 8007dd2:	e7cc      	b.n	8007d6e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f7ff feec 	bl	8007bb4 <USBD_CtlError>
          return;
 8007ddc:	e7c7      	b.n	8007d6e <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 8007dde:	f000 f954 	bl	800808a <USBD_CtlSendStatus>
 8007de2:	e7c4      	b.n	8007d6e <USBD_SetConfig+0x2a>
 8007de4:	20000d18 	.word	0x20000d18

08007de8 <USBD_GetConfig>:
{
 8007de8:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 8007dea:	88cb      	ldrh	r3, [r1, #6]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d108      	bne.n	8007e02 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8007df0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d007      	beq.n	8007e08 <USBD_GetConfig+0x20>
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d00d      	beq.n	8007e18 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8007dfc:	f7ff feda 	bl	8007bb4 <USBD_CtlError>
}
 8007e00:	e001      	b.n	8007e06 <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 8007e02:	f7ff fed7 	bl	8007bb4 <USBD_CtlError>
}
 8007e06:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8007e08:	4601      	mov	r1, r0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8007e10:	2201      	movs	r2, #1
 8007e12:	f000 f91d 	bl	8008050 <USBD_CtlSendData>
      break;
 8007e16:	e7f6      	b.n	8007e06 <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 8007e18:	2201      	movs	r2, #1
 8007e1a:	1d01      	adds	r1, r0, #4
 8007e1c:	f000 f918 	bl	8008050 <USBD_CtlSendData>
      break;
 8007e20:	e7f1      	b.n	8007e06 <USBD_GetConfig+0x1e>

08007e22 <USBD_GetStatus>:
{
 8007e22:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8007e24:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e28:	3b02      	subs	r3, #2
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d80c      	bhi.n	8007e48 <USBD_GetStatus+0x26>
    pdev->dev_config_status = 0;                                   
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8007e32:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007e36:	b10b      	cbz	r3, 8007e3c <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007e38:	2302      	movs	r3, #2
 8007e3a:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f100 010c 	add.w	r1, r0, #12
 8007e42:	f000 f905 	bl	8008050 <USBD_CtlSendData>
}
 8007e46:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8007e48:	f7ff feb4 	bl	8007bb4 <USBD_CtlError>
}
 8007e4c:	e7fb      	b.n	8007e46 <USBD_GetStatus+0x24>

08007e4e <USBD_ClrFeature>:
{
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8007e52:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e56:	3b02      	subs	r3, #2
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d80d      	bhi.n	8007e78 <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007e5c:	884b      	ldrh	r3, [r1, #2]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d109      	bne.n	8007e76 <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 8007e62:	2300      	movs	r3, #0
 8007e64:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007e68:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f90a 	bl	800808a <USBD_CtlSendStatus>
}
 8007e76:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8007e78:	f7ff fe9c 	bl	8007bb4 <USBD_CtlError>
}
 8007e7c:	e7fb      	b.n	8007e76 <USBD_ClrFeature+0x28>

08007e7e <USBD_StdDevReq>:
{
 8007e7e:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8007e80:	784b      	ldrb	r3, [r1, #1]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d81c      	bhi.n	8007ec0 <USBD_StdDevReq+0x42>
 8007e86:	e8df f003 	tbb	[pc, r3]
 8007e8a:	1812      	.short	0x1812
 8007e8c:	091b151b 	.word	0x091b151b
 8007e90:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 8007e94:	f7ff fe98 	bl	8007bc8 <USBD_GetDescriptor>
}
 8007e98:	2000      	movs	r0, #0
 8007e9a:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8007e9c:	f7ff ff2d 	bl	8007cfa <USBD_SetAddress>
    break;
 8007ea0:	e7fa      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8007ea2:	f7ff ff4f 	bl	8007d44 <USBD_SetConfig>
    break;
 8007ea6:	e7f7      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8007ea8:	f7ff ff9e 	bl	8007de8 <USBD_GetConfig>
    break;
 8007eac:	e7f4      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8007eae:	f7ff ffb8 	bl	8007e22 <USBD_GetStatus>
    break;
 8007eb2:	e7f1      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8007eb4:	f7ff fe5a 	bl	8007b6c <USBD_SetFeature>
    break;
 8007eb8:	e7ee      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8007eba:	f7ff ffc8 	bl	8007e4e <USBD_ClrFeature>
    break;
 8007ebe:	e7eb      	b.n	8007e98 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8007ec0:	f7ff fe78 	bl	8007bb4 <USBD_CtlError>
    break;
 8007ec4:	e7e8      	b.n	8007e98 <USBD_StdDevReq+0x1a>

08007ec6 <USBD_StdItfReq>:
{
 8007ec6:	b538      	push	{r3, r4, r5, lr}
 8007ec8:	4604      	mov	r4, r0
 8007eca:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8007ecc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d111      	bne.n	8007ef8 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8007ed4:	790b      	ldrb	r3, [r1, #4]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d80b      	bhi.n	8007ef2 <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 8007eda:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007ee2:	88eb      	ldrh	r3, [r5, #6]
 8007ee4:	b10b      	cbz	r3, 8007eea <USBD_StdItfReq+0x24>
}
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 f8cd 	bl	800808a <USBD_CtlSendStatus>
 8007ef0:	e7f9      	b.n	8007ee6 <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 8007ef2:	f7ff fe5f 	bl	8007bb4 <USBD_CtlError>
 8007ef6:	e7f6      	b.n	8007ee6 <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 8007ef8:	f7ff fe5c 	bl	8007bb4 <USBD_CtlError>
    break;
 8007efc:	e7f3      	b.n	8007ee6 <USBD_StdItfReq+0x20>

08007efe <USBD_StdEPReq>:
{
 8007efe:	b538      	push	{r3, r4, r5, lr}
 8007f00:	4605      	mov	r5, r0
 8007f02:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8007f04:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8007f06:	780b      	ldrb	r3, [r1, #0]
 8007f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d105      	bne.n	8007f1c <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 8007f10:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4798      	blx	r3
}
 8007f18:	2000      	movs	r0, #0
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8007f1e:	7863      	ldrb	r3, [r4, #1]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d025      	beq.n	8007f70 <USBD_StdEPReq+0x72>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d047      	beq.n	8007fb8 <USBD_StdEPReq+0xba>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d1f5      	bne.n	8007f18 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8007f2c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d005      	beq.n	8007f40 <USBD_StdEPReq+0x42>
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d00a      	beq.n	8007f4e <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f7ff fe3b 	bl	8007bb4 <USBD_CtlError>
      break;    
 8007f3e:	e7eb      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007f40:	2900      	cmp	r1, #0
 8007f42:	d0e9      	beq.n	8007f18 <USBD_StdEPReq+0x1a>
 8007f44:	2980      	cmp	r1, #128	; 0x80
 8007f46:	d0e7      	beq.n	8007f18 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007f48:	f005 fcef 	bl	800d92a <USBD_LL_StallEP>
 8007f4c:	e7e4      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007f4e:	8863      	ldrh	r3, [r4, #2]
 8007f50:	b923      	cbnz	r3, 8007f5c <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007f52:	b119      	cbz	r1, 8007f5c <USBD_StdEPReq+0x5e>
 8007f54:	2980      	cmp	r1, #128	; 0x80
 8007f56:	d001      	beq.n	8007f5c <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8007f58:	f005 fce7 	bl	800d92a <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8007f5c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 f88e 	bl	800808a <USBD_CtlSendStatus>
      break;
 8007f6e:	e7d3      	b.n	8007f18 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8007f70:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d005      	beq.n	8007f84 <USBD_StdEPReq+0x86>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d00a      	beq.n	8007f92 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	f7ff fe19 	bl	8007bb4 <USBD_CtlError>
      break;    
 8007f82:	e7c9      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007f84:	2900      	cmp	r1, #0
 8007f86:	d0c7      	beq.n	8007f18 <USBD_StdEPReq+0x1a>
 8007f88:	2980      	cmp	r1, #128	; 0x80
 8007f8a:	d0c5      	beq.n	8007f18 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007f8c:	f005 fccd 	bl	800d92a <USBD_LL_StallEP>
 8007f90:	e7c2      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007f92:	8863      	ldrh	r3, [r4, #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1bf      	bne.n	8007f18 <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 8007f98:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007f9c:	d103      	bne.n	8007fa6 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f873 	bl	800808a <USBD_CtlSendStatus>
 8007fa4:	e7b8      	b.n	8007f18 <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007fa6:	f005 fcc8 	bl	800d93a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007faa:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4798      	blx	r3
 8007fb6:	e7f2      	b.n	8007f9e <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8007fb8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d005      	beq.n	8007fcc <USBD_StdEPReq+0xce>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d009      	beq.n	8007fd8 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f7ff fdf5 	bl	8007bb4 <USBD_CtlError>
      break;
 8007fca:	e7a5      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 8007fcc:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007fd0:	d0a2      	beq.n	8007f18 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007fd2:	f005 fcaa 	bl	800d92a <USBD_LL_StallEP>
 8007fd6:	e79f      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007fd8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007fdc:	d111      	bne.n	8008002 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007fde:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007fe2:	3410      	adds	r4, #16
 8007fe4:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8007fe8:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007fea:	4628      	mov	r0, r5
 8007fec:	f005 fcad 	bl	800d94a <USBD_LL_IsStallEP>
 8007ff0:	b170      	cbz	r0, 8008010 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 f828 	bl	8008050 <USBD_CtlSendData>
      break;
 8008000:	e78a      	b.n	8007f18 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8008002:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8008006:	3401      	adds	r4, #1
 8008008:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800800c:	3404      	adds	r4, #4
 800800e:	e7ec      	b.n	8007fea <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 8008010:	2300      	movs	r3, #0
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	e7ef      	b.n	8007ff6 <USBD_StdEPReq+0xf8>

08008016 <USBD_GetString>:
  if (desc != NULL) 
 8008016:	b1d0      	cbz	r0, 800804e <USBD_GetString+0x38>
{
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460d      	mov	r5, r1
 800801c:	4616      	mov	r6, r2
 800801e:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8008020:	f7ff fd9a 	bl	8007b58 <USBD_GetLen>
 8008024:	3001      	adds	r0, #1
 8008026:	0040      	lsls	r0, r0, #1
 8008028:	b280      	uxth	r0, r0
 800802a:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 800802c:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800802e:	2303      	movs	r3, #3
 8008030:	706b      	strb	r3, [r5, #1]
 8008032:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8008034:	e007      	b.n	8008046 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8008036:	3401      	adds	r4, #1
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 800803e:	3302      	adds	r3, #2
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2100      	movs	r1, #0
 8008044:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8008046:	7821      	ldrb	r1, [r4, #0]
 8008048:	2900      	cmp	r1, #0
 800804a:	d1f4      	bne.n	8008036 <USBD_GetString+0x20>
}
 800804c:	bd70      	pop	{r4, r5, r6, pc}
 800804e:	4770      	bx	lr

08008050 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008050:	b510      	push	{r4, lr}
 8008052:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8008054:	2202      	movs	r2, #2
 8008056:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800805a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800805c:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800805e:	460a      	mov	r2, r1
 8008060:	2100      	movs	r1, #0
 8008062:	f005 fc8d 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8008066:	2000      	movs	r0, #0
 8008068:	bd10      	pop	{r4, pc}

0800806a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800806a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800806c:	4613      	mov	r3, r2
 800806e:	460a      	mov	r2, r1
 8008070:	2100      	movs	r1, #0
 8008072:	f005 fc85 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8008076:	2000      	movs	r0, #0
 8008078:	bd08      	pop	{r3, pc}

0800807a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800807a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800807c:	4613      	mov	r3, r2
 800807e:	460a      	mov	r2, r1
 8008080:	2100      	movs	r1, #0
 8008082:	f005 fc85 	bl	800d990 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8008086:	2000      	movs	r0, #0
 8008088:	bd08      	pop	{r3, pc}

0800808a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800808a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800808c:	2304      	movs	r3, #4
 800808e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8008092:	2300      	movs	r3, #0
 8008094:	461a      	mov	r2, r3
 8008096:	4619      	mov	r1, r3
 8008098:	f005 fc72 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800809c:	2000      	movs	r0, #0
 800809e:	bd08      	pop	{r3, pc}

080080a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80080a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80080a2:	2305      	movs	r3, #5
 80080a4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80080a8:	2300      	movs	r3, #0
 80080aa:	461a      	mov	r2, r3
 80080ac:	4619      	mov	r1, r3
 80080ae:	f005 fc6f 	bl	800d990 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80080b2:	2000      	movs	r0, #0
 80080b4:	bd08      	pop	{r3, pc}
	...

080080b8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <FATFS_LinkDriverEx+0x48>)
 80080ba:	7a5b      	ldrb	r3, [r3, #9]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d901      	bls.n	80080c6 <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 80080c2:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 80080c4:	4770      	bx	lr
{
 80080c6:	b430      	push	{r4, r5}
    disk.is_initialized[disk.nbr] = 0;
 80080c8:	4c0d      	ldr	r4, [pc, #52]	; (8008100 <FATFS_LinkDriverEx+0x48>)
 80080ca:	7a65      	ldrb	r5, [r4, #9]
 80080cc:	b2ed      	uxtb	r5, r5
 80080ce:	2300      	movs	r3, #0
 80080d0:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 80080d2:	7a65      	ldrb	r5, [r4, #9]
 80080d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80080d8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80080da:	7a60      	ldrb	r0, [r4, #9]
 80080dc:	4420      	add	r0, r4
 80080de:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80080e0:	7a62      	ldrb	r2, [r4, #9]
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	1c50      	adds	r0, r2, #1
 80080e6:	b2c0      	uxtb	r0, r0
 80080e8:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 80080ea:	3230      	adds	r2, #48	; 0x30
 80080ec:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80080ee:	223a      	movs	r2, #58	; 0x3a
 80080f0:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 80080f2:	222f      	movs	r2, #47	; 0x2f
 80080f4:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 80080f6:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 80080f8:	4618      	mov	r0, r3
}
 80080fa:	bc30      	pop	{r4, r5}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000d1c 	.word	0x20000d1c

08008104 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008104:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008106:	2200      	movs	r2, #0
 8008108:	f7ff ffd6 	bl	80080b8 <FATFS_LinkDriverEx>
}
 800810c:	bd08      	pop	{r3, pc}
	...

08008110 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008110:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8008112:	4b07      	ldr	r3, [pc, #28]	; (8008130 <SD_initialize+0x20>)
 8008114:	2201      	movs	r2, #1
 8008116:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008118:	f7fe fe76 	bl	8006e08 <BSP_SD_Init>
 800811c:	b920      	cbnz	r0, 8008128 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 800811e:	4a04      	ldr	r2, [pc, #16]	; (8008130 <SD_initialize+0x20>)
 8008120:	7813      	ldrb	r3, [r2, #0]
 8008122:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008126:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <SD_initialize+0x20>)
 800812a:	7818      	ldrb	r0, [r3, #0]
}
 800812c:	bd08      	pop	{r3, pc}
 800812e:	bf00      	nop
 8008130:	200000ac 	.word	0x200000ac

08008134 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008134:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <SD_status+0x20>)
 8008138:	2201      	movs	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800813c:	f7fe fe32 	bl	8006da4 <BSP_SD_GetCardState>
 8008140:	b920      	cbnz	r0, 800814c <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <SD_status+0x20>)
 8008144:	7813      	ldrb	r3, [r2, #0]
 8008146:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800814a:	7013      	strb	r3, [r2, #0]
  }
  
  return Stat;
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <SD_status+0x20>)
 800814e:	7818      	ldrb	r0, [r3, #0]
}
 8008150:	bd08      	pop	{r3, pc}
 8008152:	bf00      	nop
 8008154:	200000ac 	.word	0x200000ac

08008158 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008158:	b510      	push	{r4, lr}
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <SD_read+0x28>)
 8008162:	f7fe fdff 	bl	8006d64 <BSP_SD_ReadBlocks>
 8008166:	b938      	cbnz	r0, 8008178 <SD_read+0x20>
  uint32_t timeout = 100000;
 8008168:	4c06      	ldr	r4, [pc, #24]	; (8008184 <SD_read+0x2c>)
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800816a:	f7fe fe1b 	bl	8006da4 <BSP_SD_GetCardState>
 800816e:	b120      	cbz	r0, 800817a <SD_read+0x22>
    {
      if (timeout-- == 0)
 8008170:	1e63      	subs	r3, r4, #1
 8008172:	b11c      	cbz	r4, 800817c <SD_read+0x24>
 8008174:	461c      	mov	r4, r3
 8008176:	e7f8      	b.n	800816a <SD_read+0x12>
  DRESULT res = RES_ERROR;
 8008178:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }
  
  return res;
}
 800817a:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 800817c:	2001      	movs	r0, #1
 800817e:	e7fc      	b.n	800817a <SD_read+0x22>
 8008180:	05f5e100 	.word	0x05f5e100
 8008184:	000186a0 	.word	0x000186a0

08008188 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008188:	b510      	push	{r4, lr}
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <SD_write+0x28>)
 8008192:	f7fe fdf7 	bl	8006d84 <BSP_SD_WriteBlocks>
 8008196:	b938      	cbnz	r0, 80081a8 <SD_write+0x20>
  uint32_t timeout = 100000;
 8008198:	4c06      	ldr	r4, [pc, #24]	; (80081b4 <SD_write+0x2c>)
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800819a:	f7fe fe03 	bl	8006da4 <BSP_SD_GetCardState>
 800819e:	b120      	cbz	r0, 80081aa <SD_write+0x22>
    {
      if (timeout-- == 0)
 80081a0:	1e63      	subs	r3, r4, #1
 80081a2:	b11c      	cbz	r4, 80081ac <SD_write+0x24>
 80081a4:	461c      	mov	r4, r3
 80081a6:	e7f8      	b.n	800819a <SD_write+0x12>
  DRESULT res = RES_ERROR;
 80081a8:	2001      	movs	r0, #1
    }    
    res = RES_OK;
  }
  
  return res;
}
 80081aa:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 80081ac:	2001      	movs	r0, #1
 80081ae:	e7fc      	b.n	80081aa <SD_write+0x22>
 80081b0:	05f5e100 	.word	0x05f5e100
 80081b4:	000186a0 	.word	0x000186a0

080081b8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081b8:	4b14      	ldr	r3, [pc, #80]	; (800820c <SD_ioctl+0x54>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f013 0f01 	tst.w	r3, #1
 80081c0:	d120      	bne.n	8008204 <SD_ioctl+0x4c>
{
 80081c2:	b510      	push	{r4, lr}
 80081c4:	b088      	sub	sp, #32
 80081c6:	4614      	mov	r4, r2
  
  switch (cmd)
 80081c8:	2903      	cmp	r1, #3
 80081ca:	d81d      	bhi.n	8008208 <SD_ioctl+0x50>
 80081cc:	e8df f001 	tbb	[pc, r1]
 80081d0:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80081d4:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 80081d6:	b008      	add	sp, #32
 80081d8:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80081da:	4668      	mov	r0, sp
 80081dc:	f7fe fdec 	bl	8006db8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 80081e4:	2000      	movs	r0, #0
    break;
 80081e6:	e7f6      	b.n	80081d6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80081e8:	4668      	mov	r0, sp
 80081ea:	f7fe fde5 	bl	8006db8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80081ee:	9b07      	ldr	r3, [sp, #28]
 80081f0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80081f2:	2000      	movs	r0, #0
    break;
 80081f4:	e7ef      	b.n	80081d6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80081f6:	4668      	mov	r0, sp
 80081f8:	f7fe fdde 	bl	8006db8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008200:	2000      	movs	r0, #0
    break;
 8008202:	e7e8      	b.n	80081d6 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008204:	2003      	movs	r0, #3
}
 8008206:	4770      	bx	lr
    res = RES_PARERR;
 8008208:	2004      	movs	r0, #4
 800820a:	e7e4      	b.n	80081d6 <SD_ioctl+0x1e>
 800820c:	200000ac 	.word	0x200000ac

08008210 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008210:	2884      	cmp	r0, #132	; 0x84
 8008212:	d001      	beq.n	8008218 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008214:	3003      	adds	r0, #3
 8008216:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008218:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800821a:	4770      	bx	lr

0800821c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800821c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800821e:	f000 fee7 	bl	8008ff0 <vTaskStartScheduler>
  
  return osOK;
}
 8008222:	2000      	movs	r0, #0
 8008224:	bd08      	pop	{r3, pc}

08008226 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800822a:	b087      	sub	sp, #28
 800822c:	4604      	mov	r4, r0
 800822e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008230:	6945      	ldr	r5, [r0, #20]
 8008232:	b1a5      	cbz	r5, 800825e <osThreadCreate+0x38>
 8008234:	6986      	ldr	r6, [r0, #24]
 8008236:	b196      	cbz	r6, 800825e <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008238:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800823c:	f8d0 9000 	ldr.w	r9, [r0]
 8008240:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008244:	f7ff ffe4 	bl	8008210 <makeFreeRtosPriority>
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	9602      	str	r6, [sp, #8]
 800824c:	9501      	str	r5, [sp, #4]
 800824e:	9000      	str	r0, [sp, #0]
 8008250:	463b      	mov	r3, r7
 8008252:	4649      	mov	r1, r9
 8008254:	4640      	mov	r0, r8
 8008256:	f000 fdfd 	bl	8008e54 <xTaskCreateStatic>
 800825a:	9005      	str	r0, [sp, #20]
 800825c:	e013      	b.n	8008286 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800825e:	6865      	ldr	r5, [r4, #4]
 8008260:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008262:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008266:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800826a:	f7ff ffd1 	bl	8008210 <makeFreeRtosPriority>
 800826e:	ab05      	add	r3, sp, #20
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	9000      	str	r0, [sp, #0]
 8008274:	463b      	mov	r3, r7
 8008276:	fa1f f288 	uxth.w	r2, r8
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	f000 fe14 	bl	8008eaa <xTaskCreate>
 8008282:	2801      	cmp	r0, #1
 8008284:	d103      	bne.n	800828e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008286:	9805      	ldr	r0, [sp, #20]
}
 8008288:	b007      	add	sp, #28
 800828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800828e:	2000      	movs	r0, #0
 8008290:	e7fa      	b.n	8008288 <osThreadCreate+0x62>

08008292 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8008292:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008294:	f000 fe3c 	bl	8008f10 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8008298:	2000      	movs	r0, #0
 800829a:	bd08      	pop	{r3, pc}

0800829c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800829c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800829e:	4603      	mov	r3, r0
 80082a0:	b900      	cbnz	r0, 80082a4 <osDelay+0x8>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 f803 	bl	80092b0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80082aa:	2000      	movs	r0, #0
 80082ac:	bd08      	pop	{r3, pc}
	...

080082b0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80082b0:	b510      	push	{r4, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80082b6:	6844      	ldr	r4, [r0, #4]
 80082b8:	b16c      	cbz	r4, 80082d6 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80082ba:	2901      	cmp	r1, #1
 80082bc:	d009      	beq.n	80082d2 <osTimerCreate+0x22>
 80082be:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80082c0:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 80082c2:	9401      	str	r4, [sp, #4]
 80082c4:	9100      	str	r1, [sp, #0]
 80082c6:	2101      	movs	r1, #1
 80082c8:	4809      	ldr	r0, [pc, #36]	; (80082f0 <osTimerCreate+0x40>)
 80082ca:	f001 fb37 	bl	800993c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80082ce:	b002      	add	sp, #8
 80082d0:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 80082d2:	2201      	movs	r2, #1
 80082d4:	e7f4      	b.n	80082c0 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 80082d6:	2901      	cmp	r1, #1
 80082d8:	d007      	beq.n	80082ea <osTimerCreate+0x3a>
 80082da:	2200      	movs	r2, #0
                      (TaskFunction_t)timer_def->ptimer);
 80082dc:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 80082de:	9100      	str	r1, [sp, #0]
 80082e0:	2101      	movs	r1, #1
 80082e2:	4803      	ldr	r0, [pc, #12]	; (80082f0 <osTimerCreate+0x40>)
 80082e4:	f001 fb0e 	bl	8009904 <xTimerCreate>
 80082e8:	e7f1      	b.n	80082ce <osTimerCreate+0x1e>
 80082ea:	2201      	movs	r2, #1
 80082ec:	e7f6      	b.n	80082dc <osTimerCreate+0x2c>
 80082ee:	bf00      	nop
 80082f0:	0800f42c 	.word	0x0800f42c

080082f4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80082f4:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80082f6:	6841      	ldr	r1, [r0, #4]
 80082f8:	b119      	cbz	r1, 8008302 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80082fa:	2001      	movs	r0, #1
 80082fc:	f000 faa5 	bl	800884a <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008300:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008302:	2001      	movs	r0, #1
 8008304:	f000 fa96 	bl	8008834 <xQueueCreateMutex>
 8008308:	e7fa      	b.n	8008300 <osMutexCreate+0xc>

0800830a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800830a:	b510      	push	{r4, lr}
 800830c:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800830e:	6882      	ldr	r2, [r0, #8]
 8008310:	b10a      	cbz	r2, 8008316 <osMessageCreate+0xc>
 8008312:	68c3      	ldr	r3, [r0, #12]
 8008314:	b933      	cbnz	r3, 8008324 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008316:	2200      	movs	r2, #0
 8008318:	6841      	ldr	r1, [r0, #4]
 800831a:	6800      	ldr	r0, [r0, #0]
 800831c:	f000 f999 	bl	8008652 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008320:	b002      	add	sp, #8
 8008322:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008324:	6841      	ldr	r1, [r0, #4]
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	2400      	movs	r4, #0
 800832a:	9400      	str	r4, [sp, #0]
 800832c:	f000 f949 	bl	80085c2 <xQueueGenericCreateStatic>
 8008330:	e7f6      	b.n	8008320 <osMessageCreate+0x16>

08008332 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 8008332:	b508      	push	{r3, lr}
  vTaskSuspendAll();
 8008334:	f000 fea8 	bl	8009088 <vTaskSuspendAll>
  
  return osOK;
}
 8008338:	2000      	movs	r0, #0
 800833a:	bd08      	pop	{r3, pc}

0800833c <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 800833c:	b508      	push	{r3, lr}
  if (xTaskResumeAll() == pdTRUE)
 800833e:	f000 ff3d 	bl	80091bc <xTaskResumeAll>
 8008342:	2801      	cmp	r0, #1
 8008344:	d101      	bne.n	800834a <osThreadResumeAll+0xe>
    return osOK;
 8008346:	2000      	movs	r0, #0
  else
    return osErrorOS;
  
}
 8008348:	bd08      	pop	{r3, pc}
    return osErrorOS;
 800834a:	20ff      	movs	r0, #255	; 0xff
 800834c:	e7fc      	b.n	8008348 <osThreadResumeAll+0xc>

0800834e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834e:	f100 0308 	add.w	r3, r0, #8
 8008352:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008362:	4770      	bx	lr

08008364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008368:	4770      	bx	lr

0800836a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800836a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800836c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008376:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008378:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800837a:	6803      	ldr	r3, [r0, #0]
 800837c:	3301      	adds	r3, #1
 800837e:	6003      	str	r3, [r0, #0]
}
 8008380:	4770      	bx	lr

08008382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008382:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008384:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008386:	f1b5 3fff 	cmp.w	r5, #4294967295
 800838a:	d002      	beq.n	8008392 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800838c:	f100 0208 	add.w	r2, r0, #8
 8008390:	e002      	b.n	8008398 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008392:	6902      	ldr	r2, [r0, #16]
 8008394:	e004      	b.n	80083a0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008396:	461a      	mov	r2, r3
 8008398:	6853      	ldr	r3, [r2, #4]
 800839a:	681c      	ldr	r4, [r3, #0]
 800839c:	42ac      	cmp	r4, r5
 800839e:	d9fa      	bls.n	8008396 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083a0:	6853      	ldr	r3, [r2, #4]
 80083a2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083a4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083a6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80083a8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80083ac:	6803      	ldr	r3, [r0, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	6003      	str	r3, [r0, #0]
}
 80083b2:	bc30      	pop	{r4, r5}
 80083b4:	4770      	bx	lr

080083b6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80083b6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083b8:	6842      	ldr	r2, [r0, #4]
 80083ba:	6881      	ldr	r1, [r0, #8]
 80083bc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083be:	6882      	ldr	r2, [r0, #8]
 80083c0:	6841      	ldr	r1, [r0, #4]
 80083c2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	4282      	cmp	r2, r0
 80083c8:	d005      	beq.n	80083d6 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80083ca:	2200      	movs	r2, #0
 80083cc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	3801      	subs	r0, #1
 80083d2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80083d4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083d6:	6882      	ldr	r2, [r0, #8]
 80083d8:	605a      	str	r2, [r3, #4]
 80083da:	e7f6      	b.n	80083ca <uxListRemove+0x14>

080083dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083dc:	b510      	push	{r4, lr}
 80083de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083e0:	f001 fca0 	bl	8009d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d004      	beq.n	80083f6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80083ec:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80083ee:	f001 fcbb 	bl	8009d68 <vPortExitCritical>

	return xReturn;
}
 80083f2:	4620      	mov	r0, r4
 80083f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80083f6:	2401      	movs	r4, #1
 80083f8:	e7f9      	b.n	80083ee <prvIsQueueFull+0x12>

080083fa <prvIsQueueEmpty>:
{
 80083fa:	b510      	push	{r4, lr}
 80083fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80083fe:	f001 fc91 	bl	8009d24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008404:	b123      	cbz	r3, 8008410 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008406:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008408:	f001 fcae 	bl	8009d68 <vPortExitCritical>
}
 800840c:	4620      	mov	r0, r4
 800840e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008410:	2401      	movs	r4, #1
 8008412:	e7f9      	b.n	8008408 <prvIsQueueEmpty+0xe>

08008414 <prvCopyDataToQueue>:
{
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800841a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800841c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800841e:	b95a      	cbnz	r2, 8008438 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008420:	6803      	ldr	r3, [r0, #0]
 8008422:	b11b      	cbz	r3, 800842c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008424:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8008426:	3501      	adds	r5, #1
 8008428:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800842a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800842c:	6840      	ldr	r0, [r0, #4]
 800842e:	f001 f945 	bl	80096bc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	6063      	str	r3, [r4, #4]
 8008436:	e7f6      	b.n	8008426 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008438:	b96e      	cbnz	r6, 8008456 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800843a:	6880      	ldr	r0, [r0, #8]
 800843c:	f005 fb2f 	bl	800da9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008440:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	4413      	add	r3, r2
 8008446:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008448:	6862      	ldr	r2, [r4, #4]
 800844a:	4293      	cmp	r3, r2
 800844c:	d319      	bcc.n	8008482 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008452:	2000      	movs	r0, #0
 8008454:	e7e7      	b.n	8008426 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008456:	68c0      	ldr	r0, [r0, #12]
 8008458:	f005 fb21 	bl	800da9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800845c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800845e:	4252      	negs	r2, r2
 8008460:	68e3      	ldr	r3, [r4, #12]
 8008462:	4413      	add	r3, r2
 8008464:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008466:	6821      	ldr	r1, [r4, #0]
 8008468:	428b      	cmp	r3, r1
 800846a:	d202      	bcs.n	8008472 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	441a      	add	r2, r3
 8008470:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008472:	2e02      	cmp	r6, #2
 8008474:	d001      	beq.n	800847a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008476:	2000      	movs	r0, #0
 8008478:	e7d5      	b.n	8008426 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847a:	b125      	cbz	r5, 8008486 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800847c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800847e:	2000      	movs	r0, #0
 8008480:	e7d1      	b.n	8008426 <prvCopyDataToQueue+0x12>
 8008482:	2000      	movs	r0, #0
 8008484:	e7cf      	b.n	8008426 <prvCopyDataToQueue+0x12>
 8008486:	2000      	movs	r0, #0
 8008488:	e7cd      	b.n	8008426 <prvCopyDataToQueue+0x12>

0800848a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800848a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800848c:	b172      	cbz	r2, 80084ac <prvCopyDataFromQueue+0x22>
{
 800848e:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008490:	68c3      	ldr	r3, [r0, #12]
 8008492:	4413      	add	r3, r2
 8008494:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008496:	6844      	ldr	r4, [r0, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	d301      	bcc.n	80084a0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800849c:	6803      	ldr	r3, [r0, #0]
 800849e:	60c3      	str	r3, [r0, #12]
 80084a0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80084a2:	68c1      	ldr	r1, [r0, #12]
 80084a4:	4620      	mov	r0, r4
 80084a6:	f005 fafa 	bl	800da9e <memcpy>
}
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	4770      	bx	lr

080084ae <prvUnlockQueue>:
{
 80084ae:	b538      	push	{r3, r4, r5, lr}
 80084b0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80084b2:	f001 fc37 	bl	8009d24 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80084b6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80084ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084bc:	e003      	b.n	80084c6 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80084be:	f001 f897 	bl	80095f0 <vTaskMissedYield>
			--cTxLock;
 80084c2:	3c01      	subs	r4, #1
 80084c4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	dd08      	ble.n	80084dc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084cc:	b133      	cbz	r3, 80084dc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80084d2:	f000 ffe3 	bl	800949c <xTaskRemoveFromEventList>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0f3      	beq.n	80084c2 <prvUnlockQueue+0x14>
 80084da:	e7f0      	b.n	80084be <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80084dc:	23ff      	movs	r3, #255	; 0xff
 80084de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80084e2:	f001 fc41 	bl	8009d68 <vPortExitCritical>
	taskENTER_CRITICAL();
 80084e6:	f001 fc1d 	bl	8009d24 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80084ea:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80084ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084f0:	e003      	b.n	80084fa <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80084f2:	f001 f87d 	bl	80095f0 <vTaskMissedYield>
				--cRxLock;
 80084f6:	3c01      	subs	r4, #1
 80084f8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	dd08      	ble.n	8008510 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084fe:	692b      	ldr	r3, [r5, #16]
 8008500:	b133      	cbz	r3, 8008510 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008502:	f105 0010 	add.w	r0, r5, #16
 8008506:	f000 ffc9 	bl	800949c <xTaskRemoveFromEventList>
 800850a:	2800      	cmp	r0, #0
 800850c:	d0f3      	beq.n	80084f6 <prvUnlockQueue+0x48>
 800850e:	e7f0      	b.n	80084f2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008510:	23ff      	movs	r3, #255	; 0xff
 8008512:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008516:	f001 fc27 	bl	8009d68 <vPortExitCritical>
}
 800851a:	bd38      	pop	{r3, r4, r5, pc}

0800851c <xQueueGenericReset>:
{
 800851c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800851e:	b940      	cbnz	r0, 8008532 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	e7fe      	b.n	8008530 <xQueueGenericReset+0x14>
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008536:	f001 fbf5 	bl	8009d24 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800853a:	6821      	ldr	r1, [r4, #0]
 800853c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800853e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008540:	fb03 1002 	mla	r0, r3, r2, r1
 8008544:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008546:	2000      	movs	r0, #0
 8008548:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800854a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800854c:	3a01      	subs	r2, #1
 800854e:	fb02 1303 	mla	r3, r2, r3, r1
 8008552:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008554:	23ff      	movs	r3, #255	; 0xff
 8008556:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800855a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800855e:	b9a5      	cbnz	r5, 800858a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b91b      	cbnz	r3, 800856c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008564:	f001 fc00 	bl	8009d68 <vPortExitCritical>
}
 8008568:	2001      	movs	r0, #1
 800856a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856c:	f104 0010 	add.w	r0, r4, #16
 8008570:	f000 ff94 	bl	800949c <xTaskRemoveFromEventList>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0f5      	beq.n	8008564 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <xQueueGenericReset+0x80>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	e7ec      	b.n	8008564 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858a:	f104 0010 	add.w	r0, r4, #16
 800858e:	f7ff fede 	bl	800834e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008592:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008596:	f7ff feda 	bl	800834e <vListInitialise>
 800859a:	e7e3      	b.n	8008564 <xQueueGenericReset+0x48>
 800859c:	e000ed04 	.word	0xe000ed04

080085a0 <prvInitialiseNewQueue>:
{
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	461d      	mov	r5, r3
 80085a4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80085a6:	460b      	mov	r3, r1
 80085a8:	b149      	cbz	r1, 80085be <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085aa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80085ac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085ae:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085b0:	2101      	movs	r1, #1
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7ff ffb2 	bl	800851c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80085b8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085be:	6024      	str	r4, [r4, #0]
 80085c0:	e7f4      	b.n	80085ac <prvInitialiseNewQueue+0xc>

080085c2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c2:	b940      	cbnz	r0, 80085d6 <xQueueGenericCreateStatic+0x14>
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericCreateStatic+0x12>
	{
 80085d6:	b510      	push	{r4, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80085dc:	b153      	cbz	r3, 80085f4 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085de:	b192      	cbz	r2, 8008606 <xQueueGenericCreateStatic+0x44>
 80085e0:	b989      	cbnz	r1, 8008606 <xQueueGenericCreateStatic+0x44>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	e7fe      	b.n	80085f2 <xQueueGenericCreateStatic+0x30>
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	e7fe      	b.n	8008604 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008606:	b94a      	cbnz	r2, 800861c <xQueueGenericCreateStatic+0x5a>
 8008608:	b141      	cbz	r1, 800861c <xQueueGenericCreateStatic+0x5a>
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	e7fe      	b.n	800861a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800861c:	2050      	movs	r0, #80	; 0x50
 800861e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008620:	9803      	ldr	r0, [sp, #12]
 8008622:	2850      	cmp	r0, #80	; 0x50
 8008624:	d008      	beq.n	8008638 <xQueueGenericCreateStatic+0x76>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	e7fe      	b.n	8008636 <xQueueGenericCreateStatic+0x74>
 8008638:	4620      	mov	r0, r4
 800863a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008642:	9400      	str	r4, [sp, #0]
 8008644:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008648:	f7ff ffaa 	bl	80085a0 <prvInitialiseNewQueue>
	}
 800864c:	4620      	mov	r0, r4
 800864e:	b004      	add	sp, #16
 8008650:	bd10      	pop	{r4, pc}

08008652 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008652:	b940      	cbnz	r0, 8008666 <xQueueGenericCreate+0x14>
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreate+0x12>
	{
 8008666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008668:	b083      	sub	sp, #12
 800866a:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800866c:	b111      	cbz	r1, 8008674 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866e:	fb01 f000 	mul.w	r0, r1, r0
 8008672:	e000      	b.n	8008676 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008674:	2000      	movs	r0, #0
 8008676:	4617      	mov	r7, r2
 8008678:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800867a:	3050      	adds	r0, #80	; 0x50
 800867c:	f001 fcb4 	bl	8009fe8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008680:	4605      	mov	r5, r0
 8008682:	b150      	cbz	r0, 800869a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800868a:	9000      	str	r0, [sp, #0]
 800868c:	463b      	mov	r3, r7
 800868e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008692:	4621      	mov	r1, r4
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff ff83 	bl	80085a0 <prvInitialiseNewQueue>
	}
 800869a:	4628      	mov	r0, r5
 800869c:	b003      	add	sp, #12
 800869e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086a0 <xQueueGenericSend>:
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b085      	sub	sp, #20
 80086a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80086a6:	b160      	cbz	r0, 80086c2 <xQueueGenericSend+0x22>
 80086a8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086aa:	b999      	cbnz	r1, 80086d4 <xQueueGenericSend+0x34>
 80086ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80086ae:	b18a      	cbz	r2, 80086d4 <xQueueGenericSend+0x34>
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericSend+0x20>
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	e7fe      	b.n	80086d2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d10b      	bne.n	80086f0 <xQueueGenericSend+0x50>
 80086d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80086da:	2a01      	cmp	r2, #1
 80086dc:	d008      	beq.n	80086f0 <xQueueGenericSend+0x50>
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	e7fe      	b.n	80086ee <xQueueGenericSend+0x4e>
 80086f0:	461e      	mov	r6, r3
 80086f2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086f4:	f000 ff82 	bl	80095fc <xTaskGetSchedulerState>
 80086f8:	b950      	cbnz	r0, 8008710 <xQueueGenericSend+0x70>
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	b153      	cbz	r3, 8008714 <xQueueGenericSend+0x74>
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	e7fe      	b.n	800870e <xQueueGenericSend+0x6e>
 8008710:	2500      	movs	r5, #0
 8008712:	e03a      	b.n	800878a <xQueueGenericSend+0xea>
 8008714:	2500      	movs	r5, #0
 8008716:	e038      	b.n	800878a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008718:	4632      	mov	r2, r6
 800871a:	4639      	mov	r1, r7
 800871c:	4620      	mov	r0, r4
 800871e:	f7ff fe79 	bl	8008414 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008724:	b94b      	cbnz	r3, 800873a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008726:	b1a8      	cbz	r0, 8008754 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008728:	4b3b      	ldr	r3, [pc, #236]	; (8008818 <xQueueGenericSend+0x178>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	e00c      	b.n	8008754 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800873a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800873e:	f000 fead 	bl	800949c <xTaskRemoveFromEventList>
 8008742:	b138      	cbz	r0, 8008754 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008744:	4b34      	ldr	r3, [pc, #208]	; (8008818 <xQueueGenericSend+0x178>)
 8008746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008754:	f001 fb08 	bl	8009d68 <vPortExitCritical>
				return pdPASS;
 8008758:	2001      	movs	r0, #1
}
 800875a:	b005      	add	sp, #20
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800875e:	f001 fb03 	bl	8009d68 <vPortExitCritical>
					return errQUEUE_FULL;
 8008762:	2000      	movs	r0, #0
 8008764:	e7f9      	b.n	800875a <xQueueGenericSend+0xba>
					vTaskSetTimeOutState( &xTimeOut );
 8008766:	a802      	add	r0, sp, #8
 8008768:	f000 fede 	bl	8009528 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800876c:	2501      	movs	r5, #1
 800876e:	e019      	b.n	80087a4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008770:	2300      	movs	r3, #0
 8008772:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008776:	e021      	b.n	80087bc <xQueueGenericSend+0x11c>
 8008778:	2300      	movs	r3, #0
 800877a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800877e:	e023      	b.n	80087c8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff fe94 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008786:	f000 fd19 	bl	80091bc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800878a:	f001 facb 	bl	8009d24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800878e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008792:	429a      	cmp	r2, r3
 8008794:	d3c0      	bcc.n	8008718 <xQueueGenericSend+0x78>
 8008796:	2e02      	cmp	r6, #2
 8008798:	d0be      	beq.n	8008718 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0de      	beq.n	800875e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	d0e0      	beq.n	8008766 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80087a4:	f001 fae0 	bl	8009d68 <vPortExitCritical>
		vTaskSuspendAll();
 80087a8:	f000 fc6e 	bl	8009088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ac:	f001 faba 	bl	8009d24 <vPortEnterCritical>
 80087b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087b4:	b25b      	sxtb	r3, r3
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ba:	d0d9      	beq.n	8008770 <xQueueGenericSend+0xd0>
 80087bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d0d7      	beq.n	8008778 <xQueueGenericSend+0xd8>
 80087c8:	f001 face 	bl	8009d68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087cc:	a901      	add	r1, sp, #4
 80087ce:	a802      	add	r0, sp, #8
 80087d0:	f000 fec0 	bl	8009554 <xTaskCheckForTimeOut>
 80087d4:	b9c8      	cbnz	r0, 800880a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff fe00 	bl	80083dc <prvIsQueueFull>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0cf      	beq.n	8008780 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087e0:	9901      	ldr	r1, [sp, #4]
 80087e2:	f104 0010 	add.w	r0, r4, #16
 80087e6:	f000 fe25 	bl	8009434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff fe5f 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087f0:	f000 fce4 	bl	80091bc <xTaskResumeAll>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d1c8      	bne.n	800878a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80087f8:	4b07      	ldr	r3, [pc, #28]	; (8008818 <xQueueGenericSend+0x178>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	e7bf      	b.n	800878a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fe4f 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008810:	f000 fcd4 	bl	80091bc <xTaskResumeAll>
			return errQUEUE_FULL;
 8008814:	2000      	movs	r0, #0
 8008816:	e7a0      	b.n	800875a <xQueueGenericSend+0xba>
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800881c:	b148      	cbz	r0, 8008832 <prvInitialiseMutex+0x16>
	{
 800881e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8008820:	2100      	movs	r1, #0
 8008822:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008824:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008826:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008828:	460b      	mov	r3, r1
 800882a:	460a      	mov	r2, r1
 800882c:	f7ff ff38 	bl	80086a0 <xQueueGenericSend>
	}
 8008830:	bd08      	pop	{r3, pc}
 8008832:	4770      	bx	lr

08008834 <xQueueCreateMutex>:
	{
 8008834:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008836:	4602      	mov	r2, r0
 8008838:	2100      	movs	r1, #0
 800883a:	2001      	movs	r0, #1
 800883c:	f7ff ff09 	bl	8008652 <xQueueGenericCreate>
 8008840:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8008842:	f7ff ffeb 	bl	800881c <prvInitialiseMutex>
	}
 8008846:	4620      	mov	r0, r4
 8008848:	bd10      	pop	{r4, pc}

0800884a <xQueueCreateMutexStatic>:
	{
 800884a:	b510      	push	{r4, lr}
 800884c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800884e:	9000      	str	r0, [sp, #0]
 8008850:	460b      	mov	r3, r1
 8008852:	2200      	movs	r2, #0
 8008854:	4611      	mov	r1, r2
 8008856:	2001      	movs	r0, #1
 8008858:	f7ff feb3 	bl	80085c2 <xQueueGenericCreateStatic>
 800885c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800885e:	f7ff ffdd 	bl	800881c <prvInitialiseMutex>
	}
 8008862:	4620      	mov	r0, r4
 8008864:	b002      	add	sp, #8
 8008866:	bd10      	pop	{r4, pc}

08008868 <xQueueGenericSendFromISR>:
{
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800886c:	b160      	cbz	r0, 8008888 <xQueueGenericSendFromISR+0x20>
 800886e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008870:	b999      	cbnz	r1, 800889a <xQueueGenericSendFromISR+0x32>
 8008872:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008874:	b188      	cbz	r0, 800889a <xQueueGenericSendFromISR+0x32>
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	e7fe      	b.n	8008886 <xQueueGenericSendFromISR+0x1e>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	e7fe      	b.n	8008898 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800889a:	2b02      	cmp	r3, #2
 800889c:	d10b      	bne.n	80088b6 <xQueueGenericSendFromISR+0x4e>
 800889e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80088a0:	2801      	cmp	r0, #1
 80088a2:	d008      	beq.n	80088b6 <xQueueGenericSendFromISR+0x4e>
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericSendFromISR+0x4c>
 80088b6:	461f      	mov	r7, r3
 80088b8:	4690      	mov	r8, r2
 80088ba:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088bc:	f001 fb0a 	bl	8009ed4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088c0:	f3ef 8611 	mrs	r6, BASEPRI
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088d8:	429a      	cmp	r2, r3
 80088da:	d303      	bcc.n	80088e4 <xQueueGenericSendFromISR+0x7c>
 80088dc:	2f02      	cmp	r7, #2
 80088de:	d001      	beq.n	80088e4 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80088e0:	2000      	movs	r0, #0
 80088e2:	e00f      	b.n	8008904 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80088e8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ea:	463a      	mov	r2, r7
 80088ec:	4649      	mov	r1, r9
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7ff fd90 	bl	8008414 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80088f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80088f8:	d008      	beq.n	800890c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088fa:	1c6b      	adds	r3, r5, #1
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008902:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008904:	f386 8811 	msr	BASEPRI, r6
}
 8008908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800890e:	b15b      	cbz	r3, 8008928 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008910:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008914:	f000 fdc2 	bl	800949c <xTaskRemoveFromEventList>
 8008918:	b140      	cbz	r0, 800892c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800891a:	f1b8 0f00 	cmp.w	r8, #0
 800891e:	d007      	beq.n	8008930 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008920:	2001      	movs	r0, #1
 8008922:	f8c8 0000 	str.w	r0, [r8]
 8008926:	e7ed      	b.n	8008904 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8008928:	2001      	movs	r0, #1
 800892a:	e7eb      	b.n	8008904 <xQueueGenericSendFromISR+0x9c>
 800892c:	2001      	movs	r0, #1
 800892e:	e7e9      	b.n	8008904 <xQueueGenericSendFromISR+0x9c>
 8008930:	2001      	movs	r0, #1
 8008932:	e7e7      	b.n	8008904 <xQueueGenericSendFromISR+0x9c>

08008934 <xQueueGenericReceive>:
{
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800893c:	b160      	cbz	r0, 8008958 <xQueueGenericReceive+0x24>
 800893e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008940:	b999      	cbnz	r1, 800896a <xQueueGenericReceive+0x36>
 8008942:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008944:	b18a      	cbz	r2, 800896a <xQueueGenericReceive+0x36>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	e7fe      	b.n	8008956 <xQueueGenericReceive+0x22>
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	e7fe      	b.n	8008968 <xQueueGenericReceive+0x34>
 800896a:	461f      	mov	r7, r3
 800896c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800896e:	f000 fe45 	bl	80095fc <xTaskGetSchedulerState>
 8008972:	b950      	cbnz	r0, 800898a <xQueueGenericReceive+0x56>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	b153      	cbz	r3, 800898e <xQueueGenericReceive+0x5a>
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	e7fe      	b.n	8008988 <xQueueGenericReceive+0x54>
 800898a:	2600      	movs	r6, #0
 800898c:	e05f      	b.n	8008a4e <xQueueGenericReceive+0x11a>
 800898e:	2600      	movs	r6, #0
 8008990:	e05d      	b.n	8008a4e <xQueueGenericReceive+0x11a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8008992:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008994:	4641      	mov	r1, r8
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff fd77 	bl	800848a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800899c:	b9df      	cbnz	r7, 80089d6 <xQueueGenericReceive+0xa2>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800899e:	3d01      	subs	r5, #1
 80089a0:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	b913      	cbnz	r3, 80089ac <xQueueGenericReceive+0x78>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80089a6:	f000 fee1 	bl	800976c <pvTaskIncrementMutexHeldCount>
 80089aa:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	b163      	cbz	r3, 80089ca <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b0:	f104 0010 	add.w	r0, r4, #16
 80089b4:	f000 fd72 	bl	800949c <xTaskRemoveFromEventList>
 80089b8:	b138      	cbz	r0, 80089ca <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 80089ba:	4b46      	ldr	r3, [pc, #280]	; (8008ad4 <xQueueGenericReceive+0x1a0>)
 80089bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80089ca:	f001 f9cd 	bl	8009d68 <vPortExitCritical>
				return pdPASS;
 80089ce:	2001      	movs	r0, #1
}
 80089d0:	b004      	add	sp, #16
 80089d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80089d6:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f5      	beq.n	80089ca <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089e2:	f000 fd5b 	bl	800949c <xTaskRemoveFromEventList>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d0ef      	beq.n	80089ca <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 80089ea:	4b3a      	ldr	r3, [pc, #232]	; (8008ad4 <xQueueGenericReceive+0x1a0>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	e7e6      	b.n	80089ca <xQueueGenericReceive+0x96>
					taskEXIT_CRITICAL();
 80089fc:	f001 f9b4 	bl	8009d68 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008a00:	2000      	movs	r0, #0
 8008a02:	e7e5      	b.n	80089d0 <xQueueGenericReceive+0x9c>
					vTaskSetTimeOutState( &xTimeOut );
 8008a04:	a802      	add	r0, sp, #8
 8008a06:	f000 fd8f 	bl	8009528 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a0a:	2601      	movs	r6, #1
 8008a0c:	e029      	b.n	8008a62 <xQueueGenericReceive+0x12e>
		prvLockQueue( pxQueue );
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a14:	e031      	b.n	8008a7a <xQueueGenericReceive+0x146>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a1c:	e033      	b.n	8008a86 <xQueueGenericReceive+0x152>
						taskENTER_CRITICAL();
 8008a1e:	f001 f981 	bl	8009d24 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008a22:	6860      	ldr	r0, [r4, #4]
 8008a24:	f000 fdfa 	bl	800961c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8008a28:	f001 f99e 	bl	8009d68 <vPortExitCritical>
 8008a2c:	e03b      	b.n	8008aa6 <xQueueGenericReceive+0x172>
				prvUnlockQueue( pxQueue );
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7ff fd3d 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a34:	f000 fbc2 	bl	80091bc <xTaskResumeAll>
 8008a38:	e009      	b.n	8008a4e <xQueueGenericReceive+0x11a>
			prvUnlockQueue( pxQueue );
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f7ff fd37 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a40:	f000 fbbc 	bl	80091bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a44:	4620      	mov	r0, r4
 8008a46:	f7ff fcd8 	bl	80083fa <prvIsQueueEmpty>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d140      	bne.n	8008ad0 <xQueueGenericReceive+0x19c>
		taskENTER_CRITICAL();
 8008a4e:	f001 f969 	bl	8009d24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a54:	2d00      	cmp	r5, #0
 8008a56:	d19c      	bne.n	8008992 <xQueueGenericReceive+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0ce      	beq.n	80089fc <xQueueGenericReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d0d0      	beq.n	8008a04 <xQueueGenericReceive+0xd0>
		taskEXIT_CRITICAL();
 8008a62:	f001 f981 	bl	8009d68 <vPortExitCritical>
		vTaskSuspendAll();
 8008a66:	f000 fb0f 	bl	8009088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a6a:	f001 f95b 	bl	8009d24 <vPortEnterCritical>
 8008a6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d0c9      	beq.n	8008a0e <xQueueGenericReceive+0xda>
 8008a7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a84:	d0c7      	beq.n	8008a16 <xQueueGenericReceive+0xe2>
 8008a86:	f001 f96f 	bl	8009d68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a8a:	a901      	add	r1, sp, #4
 8008a8c:	a802      	add	r0, sp, #8
 8008a8e:	f000 fd61 	bl	8009554 <xTaskCheckForTimeOut>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d1d1      	bne.n	8008a3a <xQueueGenericReceive+0x106>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff fcaf 	bl	80083fa <prvIsQueueEmpty>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0c6      	beq.n	8008a2e <xQueueGenericReceive+0xfa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0bb      	beq.n	8008a1e <xQueueGenericReceive+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008aa6:	9901      	ldr	r1, [sp, #4]
 8008aa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008aac:	f000 fcc2 	bl	8009434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7ff fcfc 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ab6:	f000 fb81 	bl	80091bc <xTaskResumeAll>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d1c7      	bne.n	8008a4e <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <xQueueGenericReceive+0x1a0>)
 8008ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	e7be      	b.n	8008a4e <xQueueGenericReceive+0x11a>
				return errQUEUE_EMPTY;
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e77d      	b.n	80089d0 <xQueueGenericReceive+0x9c>
 8008ad4:	e000ed04 	.word	0xe000ed04

08008ad8 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8008ad8:	b940      	cbnz	r0, 8008aec <uxQueueMessagesWaiting+0x14>
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	e7fe      	b.n	8008aea <uxQueueMessagesWaiting+0x12>
{
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008af0:	f001 f918 	bl	8009d24 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008af4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8008af6:	f001 f937 	bl	8009d68 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008afa:	4620      	mov	r0, r4
 8008afc:	bd10      	pop	{r4, pc}

08008afe <uxQueueSpacesAvailable>:
	configASSERT( pxQueue );
 8008afe:	b940      	cbnz	r0, 8008b12 <uxQueueSpacesAvailable+0x14>
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	e7fe      	b.n	8008b10 <uxQueueSpacesAvailable+0x12>
{
 8008b12:	b510      	push	{r4, lr}
 8008b14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008b16:	f001 f905 	bl	8009d24 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008b1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008b1e:	1b1c      	subs	r4, r3, r4
	taskEXIT_CRITICAL();
 8008b20:	f001 f922 	bl	8009d68 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008b24:	4620      	mov	r0, r4
 8008b26:	bd10      	pop	{r4, pc}

08008b28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2bfe      	cmp	r3, #254	; 0xfe
 8008b2c:	d80c      	bhi.n	8008b48 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b2e:	4a07      	ldr	r2, [pc, #28]	; (8008b4c <vQueueAddToRegistry+0x24>)
 8008b30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008b34:	b10a      	cbz	r2, 8008b3a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b36:	3301      	adds	r3, #1
 8008b38:	e7f7      	b.n	8008b2a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b3a:	4a04      	ldr	r2, [pc, #16]	; (8008b4c <vQueueAddToRegistry+0x24>)
 8008b3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b44:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b46:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20006798 	.word	0x20006798

08008b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b58:	f001 f8e4 	bl	8009d24 <vPortEnterCritical>
 8008b5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d00d      	beq.n	8008b84 <vQueueWaitForMessageRestricted+0x34>
 8008b68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b6c:	b25b      	sxtb	r3, r3
 8008b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b72:	d00b      	beq.n	8008b8c <vQueueWaitForMessageRestricted+0x3c>
 8008b74:	f001 f8f8 	bl	8009d68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b7a:	b15b      	cbz	r3, 8008b94 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fc96 	bl	80084ae <prvUnlockQueue>
	}
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008b84:	2300      	movs	r3, #0
 8008b86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b8a:	e7ed      	b.n	8008b68 <vQueueWaitForMessageRestricted+0x18>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b92:	e7ef      	b.n	8008b74 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b94:	4632      	mov	r2, r6
 8008b96:	4629      	mov	r1, r5
 8008b98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b9c:	f000 fc62 	bl	8009464 <vTaskPlaceOnEventListRestricted>
 8008ba0:	e7ec      	b.n	8008b7c <vQueueWaitForMessageRestricted+0x2c>
	...

08008ba4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba4:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <prvResetNextTaskUnblockTime+0x24>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	b13b      	cbz	r3, 8008bbc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <prvResetNextTaskUnblockTime+0x24>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <prvResetNextTaskUnblockTime+0x28>)
 8008bb8:	601a      	str	r2, [r3, #0]
	}
}
 8008bba:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bbc:	4b03      	ldr	r3, [pc, #12]	; (8008bcc <prvResetNextTaskUnblockTime+0x28>)
 8008bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000d2c 	.word	0x20000d2c
 8008bcc:	20000e04 	.word	0x20000e04

08008bd0 <prvInitialiseNewTask>:
{
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	460d      	mov	r5, r1
 8008bd8:	4617      	mov	r7, r2
 8008bda:	469a      	mov	sl, r3
 8008bdc:	9e08      	ldr	r6, [sp, #32]
 8008bde:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008be2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008be4:	0092      	lsls	r2, r2, #2
 8008be6:	21a5      	movs	r1, #165	; 0xa5
 8008be8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008bea:	f004 ff63 	bl	800dab4 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008bf0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008bf4:	3a01      	subs	r2, #1
 8008bf6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008bfa:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b1f      	cmp	r3, #31
 8008c02:	d807      	bhi.n	8008c14 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c04:	5ce9      	ldrb	r1, [r5, r3]
 8008c06:	18e2      	adds	r2, r4, r3
 8008c08:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8008c0c:	5cea      	ldrb	r2, [r5, r3]
 8008c0e:	b10a      	cbz	r2, 8008c14 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c10:	3301      	adds	r3, #1
 8008c12:	e7f5      	b.n	8008c00 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c14:	2300      	movs	r3, #0
 8008c16:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c1a:	2e06      	cmp	r6, #6
 8008c1c:	d900      	bls.n	8008c20 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c1e:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008c20:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008c22:	65e6      	str	r6, [r4, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008c24:	2500      	movs	r5, #0
 8008c26:	6625      	str	r5, [r4, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c28:	1d20      	adds	r0, r4, #4
 8008c2a:	f7ff fb9b 	bl	8008364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c2e:	f104 0018 	add.w	r0, r4, #24
 8008c32:	f7ff fb97 	bl	8008364 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c36:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c38:	f1c6 0607 	rsb	r6, r6, #7
 8008c3c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c3e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008c40:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008c42:	66a5      	str	r5, [r4, #104]	; 0x68
		pxNewTCB->ulNotifiedValue = 0;
 8008c44:	66e5      	str	r5, [r4, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c46:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008c4a:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c4e:	4652      	mov	r2, sl
 8008c50:	4649      	mov	r1, r9
 8008c52:	4638      	mov	r0, r7
 8008c54:	f001 f83e 	bl	8009cd4 <pxPortInitialiseStack>
 8008c58:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d001      	beq.n	8008c64 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c60:	f8c8 4000 	str.w	r4, [r8]
}
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008c68 <prvInitialiseTaskLists>:
{
 8008c68:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	e007      	b.n	8008c7e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c6e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008c72:	0093      	lsls	r3, r2, #2
 8008c74:	480e      	ldr	r0, [pc, #56]	; (8008cb0 <prvInitialiseTaskLists+0x48>)
 8008c76:	4418      	add	r0, r3
 8008c78:	f7ff fb69 	bl	800834e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c7c:	3401      	adds	r4, #1
 8008c7e:	2c06      	cmp	r4, #6
 8008c80:	d9f5      	bls.n	8008c6e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008c82:	4d0c      	ldr	r5, [pc, #48]	; (8008cb4 <prvInitialiseTaskLists+0x4c>)
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff fb62 	bl	800834e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c8a:	4c0b      	ldr	r4, [pc, #44]	; (8008cb8 <prvInitialiseTaskLists+0x50>)
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff fb5e 	bl	800834e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c92:	480a      	ldr	r0, [pc, #40]	; (8008cbc <prvInitialiseTaskLists+0x54>)
 8008c94:	f7ff fb5b 	bl	800834e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008c98:	4809      	ldr	r0, [pc, #36]	; (8008cc0 <prvInitialiseTaskLists+0x58>)
 8008c9a:	f7ff fb58 	bl	800834e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008c9e:	4809      	ldr	r0, [pc, #36]	; (8008cc4 <prvInitialiseTaskLists+0x5c>)
 8008ca0:	f7ff fb55 	bl	800834e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <prvInitialiseTaskLists+0x60>)
 8008ca6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ca8:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <prvInitialiseTaskLists+0x64>)
 8008caa:	601c      	str	r4, [r3, #0]
}
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000d34 	.word	0x20000d34
 8008cb4:	20000ddc 	.word	0x20000ddc
 8008cb8:	20000df0 	.word	0x20000df0
 8008cbc:	20000e0c 	.word	0x20000e0c
 8008cc0:	20000e38 	.word	0x20000e38
 8008cc4:	20000e24 	.word	0x20000e24
 8008cc8:	20000d2c 	.word	0x20000d2c
 8008ccc:	20000d30 	.word	0x20000d30

08008cd0 <prvAddNewTaskToReadyList>:
{
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008cd4:	f001 f826 	bl	8009d24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008cd8:	4a21      	ldr	r2, [pc, #132]	; (8008d60 <prvAddNewTaskToReadyList+0x90>)
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ce0:	4b20      	ldr	r3, [pc, #128]	; (8008d64 <prvAddNewTaskToReadyList+0x94>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	b15b      	cbz	r3, 8008cfe <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <prvAddNewTaskToReadyList+0x98>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	b96b      	cbnz	r3, 8008d08 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cec:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <prvAddNewTaskToReadyList+0x94>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d807      	bhi.n	8008d08 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008cf8:	4b1a      	ldr	r3, [pc, #104]	; (8008d64 <prvAddNewTaskToReadyList+0x94>)
 8008cfa:	601c      	str	r4, [r3, #0]
 8008cfc:	e004      	b.n	8008d08 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8008cfe:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <prvAddNewTaskToReadyList+0x94>)
 8008d00:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d027      	beq.n	8008d58 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8008d08:	4a18      	ldr	r2, [pc, #96]	; (8008d6c <prvAddNewTaskToReadyList+0x9c>)
 8008d0a:	6813      	ldr	r3, [r2, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d10:	6563      	str	r3, [r4, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 8008d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d14:	2201      	movs	r2, #1
 8008d16:	409a      	lsls	r2, r3
 8008d18:	4915      	ldr	r1, [pc, #84]	; (8008d70 <prvAddNewTaskToReadyList+0xa0>)
 8008d1a:	6808      	ldr	r0, [r1, #0]
 8008d1c:	4302      	orrs	r2, r0
 8008d1e:	600a      	str	r2, [r1, #0]
 8008d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d24:	009a      	lsls	r2, r3, #2
 8008d26:	1d21      	adds	r1, r4, #4
 8008d28:	4812      	ldr	r0, [pc, #72]	; (8008d74 <prvAddNewTaskToReadyList+0xa4>)
 8008d2a:	4410      	add	r0, r2
 8008d2c:	f7ff fb1d 	bl	800836a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008d30:	f001 f81a 	bl	8009d68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <prvAddNewTaskToReadyList+0x98>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	b16b      	cbz	r3, 8008d56 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <prvAddNewTaskToReadyList+0x94>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d207      	bcs.n	8008d56 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvAddNewTaskToReadyList+0xa8>)
 8008d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
}
 8008d56:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8008d58:	f7ff ff86 	bl	8008c68 <prvInitialiseTaskLists>
 8008d5c:	e7d4      	b.n	8008d08 <prvAddNewTaskToReadyList+0x38>
 8008d5e:	bf00      	nop
 8008d60:	20000dc4 	.word	0x20000dc4
 8008d64:	20000d28 	.word	0x20000d28
 8008d68:	20000e20 	.word	0x20000e20
 8008d6c:	20000dd4 	.word	0x20000dd4
 8008d70:	20000dd8 	.word	0x20000dd8
 8008d74:	20000d34 	.word	0x20000d34
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <prvDeleteTCB>:
	{
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d80:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8008d84:	b933      	cbnz	r3, 8008d94 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8008d86:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008d88:	f001 f9bc 	bl	800a104 <vPortFree>
				vPortFree( pxTCB );
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f001 f9b9 	bl	800a104 <vPortFree>
	}
 8008d92:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d00a      	beq.n	8008dae <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d0fa      	beq.n	8008d92 <prvDeleteTCB+0x16>
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	e7fe      	b.n	8008dac <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8008dae:	f001 f9a9 	bl	800a104 <vPortFree>
 8008db2:	e7ee      	b.n	8008d92 <prvDeleteTCB+0x16>

08008db4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dba:	4b1f      	ldr	r3, [pc, #124]	; (8008e38 <prvAddCurrentTaskToDelayedList+0x84>)
 8008dbc:	681d      	ldr	r5, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	3004      	adds	r0, #4
 8008dcc:	f7ff faf3 	bl	80083b6 <uxListRemove>
 8008dd0:	b950      	cbnz	r0, 8008de8 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008dd2:	4b1a      	ldr	r3, [pc, #104]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd8:	2301      	movs	r3, #1
 8008dda:	fa03 f202 	lsl.w	r2, r3, r2
 8008dde:	4918      	ldr	r1, [pc, #96]	; (8008e40 <prvAddCurrentTaskToDelayedList+0x8c>)
 8008de0:	680b      	ldr	r3, [r1, #0]
 8008de2:	ea23 0302 	bic.w	r3, r3, r2
 8008de6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008de8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008dec:	d013      	beq.n	8008e16 <prvAddCurrentTaskToDelayedList+0x62>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dee:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008df0:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008df6:	42a5      	cmp	r5, r4
 8008df8:	d816      	bhi.n	8008e28 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dfa:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008e00:	6819      	ldr	r1, [r3, #0]
 8008e02:	3104      	adds	r1, #4
 8008e04:	f7ff fabd 	bl	8008382 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	d912      	bls.n	8008e36 <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008e10:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e12:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e14:	e00f      	b.n	8008e36 <prvAddCurrentTaskToDelayedList+0x82>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	d0e9      	beq.n	8008dee <prvAddCurrentTaskToDelayedList+0x3a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e1a:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008e1c:	6819      	ldr	r1, [r3, #0]
 8008e1e:	3104      	adds	r1, #4
 8008e20:	480a      	ldr	r0, [pc, #40]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8008e22:	f7ff faa2 	bl	800836a <vListInsertEnd>
 8008e26:	e006      	b.n	8008e36 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e28:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8008e2e:	6819      	ldr	r1, [r3, #0]
 8008e30:	3104      	adds	r1, #4
 8008e32:	f7ff faa6 	bl	8008382 <vListInsert>
}
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	20000e4c 	.word	0x20000e4c
 8008e3c:	20000d28 	.word	0x20000d28
 8008e40:	20000dd8 	.word	0x20000dd8
 8008e44:	20000d2c 	.word	0x20000d2c
 8008e48:	20000e04 	.word	0x20000e04
 8008e4c:	20000e24 	.word	0x20000e24
 8008e50:	20000d30 	.word	0x20000d30

08008e54 <xTaskCreateStatic>:
	{
 8008e54:	b530      	push	{r4, r5, lr}
 8008e56:	b087      	sub	sp, #28
 8008e58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8008e5c:	b14d      	cbz	r5, 8008e72 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008e5e:	b98c      	cbnz	r4, 8008e84 <xTaskCreateStatic+0x30>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	e7fe      	b.n	8008e70 <xTaskCreateStatic+0x1c>
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	e7fe      	b.n	8008e82 <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e84:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e86:	2502      	movs	r5, #2
 8008e88:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	9503      	str	r5, [sp, #12]
 8008e90:	9402      	str	r4, [sp, #8]
 8008e92:	ad05      	add	r5, sp, #20
 8008e94:	9501      	str	r5, [sp, #4]
 8008e96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e98:	9500      	str	r5, [sp, #0]
 8008e9a:	f7ff fe99 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f7ff ff16 	bl	8008cd0 <prvAddNewTaskToReadyList>
	}
 8008ea4:	9805      	ldr	r0, [sp, #20]
 8008ea6:	b007      	add	sp, #28
 8008ea8:	bd30      	pop	{r4, r5, pc}

08008eaa <xTaskCreate>:
	{
 8008eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	4688      	mov	r8, r1
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb8:	0090      	lsls	r0, r2, #2
 8008eba:	f001 f895 	bl	8009fe8 <pvPortMalloc>
			if( pxStack != NULL )
 8008ebe:	b308      	cbz	r0, 8008f04 <xTaskCreate+0x5a>
 8008ec0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008ec2:	2074      	movs	r0, #116	; 0x74
 8008ec4:	f001 f890 	bl	8009fe8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008ec8:	4604      	mov	r4, r0
 8008eca:	b1b8      	cbz	r0, 8008efc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8008ecc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008ece:	b1e4      	cbz	r4, 8008f0a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	9402      	str	r4, [sp, #8]
 8008eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7ff fe71 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff feee 	bl	8008cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ef4:	2001      	movs	r0, #1
	}
 8008ef6:	b005      	add	sp, #20
 8008ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008efc:	4630      	mov	r0, r6
 8008efe:	f001 f901 	bl	800a104 <vPortFree>
 8008f02:	e7e4      	b.n	8008ece <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	e7f5      	b.n	8008ef6 <xTaskCreate+0x4c>
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008f0e:	e7f2      	b.n	8008ef6 <xTaskCreate+0x4c>

08008f10 <vTaskDelete>:
	{
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8008f14:	f000 ff06 	bl	8009d24 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	d034      	beq.n	8008f86 <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f1c:	1d25      	adds	r5, r4, #4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f7ff fa49 	bl	80083b6 <uxListRemove>
 8008f24:	b970      	cbnz	r0, 8008f44 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f28:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008f2c:	008b      	lsls	r3, r1, #2
 8008f2e:	4926      	ldr	r1, [pc, #152]	; (8008fc8 <vTaskDelete+0xb8>)
 8008f30:	58cb      	ldr	r3, [r1, r3]
 8008f32:	b93b      	cbnz	r3, 8008f44 <vTaskDelete+0x34>
 8008f34:	2301      	movs	r3, #1
 8008f36:	fa03 f202 	lsl.w	r2, r3, r2
 8008f3a:	4924      	ldr	r1, [pc, #144]	; (8008fcc <vTaskDelete+0xbc>)
 8008f3c:	680b      	ldr	r3, [r1, #0]
 8008f3e:	ea23 0302 	bic.w	r3, r3, r2
 8008f42:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f46:	b11b      	cbz	r3, 8008f50 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f48:	f104 0018 	add.w	r0, r4, #24
 8008f4c:	f7ff fa33 	bl	80083b6 <uxListRemove>
			uxTaskNumber++;
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <vTaskDelete+0xc0>)
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <vTaskDelete+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d015      	beq.n	8008f8c <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
 8008f60:	4a1d      	ldr	r2, [pc, #116]	; (8008fd8 <vTaskDelete+0xc8>)
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7ff ff07 	bl	8008d7c <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8008f6e:	f7ff fe19 	bl	8008ba4 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 8008f72:	f000 fef9 	bl	8009d68 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8008f76:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <vTaskDelete+0xcc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	b11b      	cbz	r3, 8008f84 <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
 8008f7c:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <vTaskDelete+0xc4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	d00c      	beq.n	8008f9e <vTaskDelete+0x8e>
	}
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <vTaskDelete+0xc4>)
 8008f88:	681c      	ldr	r4, [r3, #0]
 8008f8a:	e7c7      	b.n	8008f1c <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4814      	ldr	r0, [pc, #80]	; (8008fe0 <vTaskDelete+0xd0>)
 8008f90:	f7ff f9eb 	bl	800836a <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8008f94:	4a13      	ldr	r2, [pc, #76]	; (8008fe4 <vTaskDelete+0xd4>)
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	e7e9      	b.n	8008f72 <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 8008f9e:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <vTaskDelete+0xd8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	b143      	cbz	r3, 8008fb6 <vTaskDelete+0xa6>
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	e7fe      	b.n	8008fb4 <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <vTaskDelete+0xdc>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
	}
 8008fc6:	e7dd      	b.n	8008f84 <vTaskDelete+0x74>
 8008fc8:	20000d34 	.word	0x20000d34
 8008fcc:	20000dd8 	.word	0x20000dd8
 8008fd0:	20000dd4 	.word	0x20000dd4
 8008fd4:	20000d28 	.word	0x20000d28
 8008fd8:	20000dc4 	.word	0x20000dc4
 8008fdc:	20000e20 	.word	0x20000e20
 8008fe0:	20000e38 	.word	0x20000e38
 8008fe4:	20000dc8 	.word	0x20000dc8
 8008fe8:	20000dd0 	.word	0x20000dd0
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <vTaskStartScheduler>:
{
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ff4:	2400      	movs	r4, #0
 8008ff6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ff8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ffa:	aa07      	add	r2, sp, #28
 8008ffc:	a906      	add	r1, sp, #24
 8008ffe:	a805      	add	r0, sp, #20
 8009000:	f7f7 fcac 	bl	800095c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	9b06      	ldr	r3, [sp, #24]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	9400      	str	r4, [sp, #0]
 800900e:	4623      	mov	r3, r4
 8009010:	9a07      	ldr	r2, [sp, #28]
 8009012:	4918      	ldr	r1, [pc, #96]	; (8009074 <vTaskStartScheduler+0x84>)
 8009014:	4818      	ldr	r0, [pc, #96]	; (8009078 <vTaskStartScheduler+0x88>)
 8009016:	f7ff ff1d 	bl	8008e54 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800901a:	b140      	cbz	r0, 800902e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800901c:	f000 fc40 	bl	80098a0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009020:	2801      	cmp	r0, #1
 8009022:	d006      	beq.n	8009032 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009024:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009028:	d01a      	beq.n	8009060 <vTaskStartScheduler+0x70>
}
 800902a:	b008      	add	sp, #32
 800902c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800902e:	2000      	movs	r0, #0
 8009030:	e7f6      	b.n	8009020 <vTaskStartScheduler+0x30>
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <vTaskStartScheduler+0x8c>)
 8009044:	f04f 32ff 	mov.w	r2, #4294967295
 8009048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <vTaskStartScheduler+0x90>)
 800904c:	2201      	movs	r2, #1
 800904e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <vTaskStartScheduler+0x94>)
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009056:	f7f7 fc7d 	bl	8000954 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800905a:	f000 feef 	bl	8009e3c <xPortStartScheduler>
 800905e:	e7e4      	b.n	800902a <vTaskStartScheduler+0x3a>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	e7fe      	b.n	8009070 <vTaskStartScheduler+0x80>
 8009072:	bf00      	nop
 8009074:	0800f370 	.word	0x0800f370
 8009078:	08009359 	.word	0x08009359
 800907c:	20000e04 	.word	0x20000e04
 8009080:	20000e20 	.word	0x20000e20
 8009084:	20000e4c 	.word	0x20000e4c

08009088 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009088:	4a02      	ldr	r2, [pc, #8]	; (8009094 <vTaskSuspendAll+0xc>)
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000dd0 	.word	0x20000dd0

08009098 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009098:	4b01      	ldr	r3, [pc, #4]	; (80090a0 <xTaskGetTickCount+0x8>)
 800909a:	6818      	ldr	r0, [r3, #0]
}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20000e4c 	.word	0x20000e4c

080090a4 <xTaskIncrementTick>:
{
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a6:	4b3a      	ldr	r3, [pc, #232]	; (8009190 <xTaskIncrementTick+0xec>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d164      	bne.n	8009178 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80090ae:	4b39      	ldr	r3, [pc, #228]	; (8009194 <xTaskIncrementTick+0xf0>)
 80090b0:	681d      	ldr	r5, [r3, #0]
 80090b2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80090b4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80090b6:	b9c5      	cbnz	r5, 80090ea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80090b8:	4b37      	ldr	r3, [pc, #220]	; (8009198 <xTaskIncrementTick+0xf4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	b143      	cbz	r3, 80090d2 <xTaskIncrementTick+0x2e>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	e7fe      	b.n	80090d0 <xTaskIncrementTick+0x2c>
 80090d2:	4a31      	ldr	r2, [pc, #196]	; (8009198 <xTaskIncrementTick+0xf4>)
 80090d4:	6811      	ldr	r1, [r2, #0]
 80090d6:	4b31      	ldr	r3, [pc, #196]	; (800919c <xTaskIncrementTick+0xf8>)
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	6019      	str	r1, [r3, #0]
 80090de:	4a30      	ldr	r2, [pc, #192]	; (80091a0 <xTaskIncrementTick+0xfc>)
 80090e0:	6813      	ldr	r3, [r2, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	f7ff fd5d 	bl	8008ba4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090ea:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <xTaskIncrementTick+0x100>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	42ab      	cmp	r3, r5
 80090f0:	d938      	bls.n	8009164 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80090f2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <xTaskIncrementTick+0x104>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090fe:	009a      	lsls	r2, r3, #2
 8009100:	4b2a      	ldr	r3, [pc, #168]	; (80091ac <xTaskIncrementTick+0x108>)
 8009102:	589b      	ldr	r3, [r3, r2]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d93c      	bls.n	8009182 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009108:	2401      	movs	r4, #1
 800910a:	e03a      	b.n	8009182 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800910c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910e:	4b22      	ldr	r3, [pc, #136]	; (8009198 <xTaskIncrementTick+0xf4>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	b343      	cbz	r3, 8009168 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009116:	4b20      	ldr	r3, [pc, #128]	; (8009198 <xTaskIncrementTick+0xf4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800911e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009120:	429d      	cmp	r5, r3
 8009122:	d326      	bcc.n	8009172 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009124:	1d37      	adds	r7, r6, #4
 8009126:	4638      	mov	r0, r7
 8009128:	f7ff f945 	bl	80083b6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800912c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800912e:	b11b      	cbz	r3, 8009138 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009130:	f106 0018 	add.w	r0, r6, #24
 8009134:	f7ff f93f 	bl	80083b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009138:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800913a:	2201      	movs	r2, #1
 800913c:	409a      	lsls	r2, r3
 800913e:	491c      	ldr	r1, [pc, #112]	; (80091b0 <xTaskIncrementTick+0x10c>)
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	4302      	orrs	r2, r0
 8009144:	600a      	str	r2, [r1, #0]
 8009146:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800914a:	009a      	lsls	r2, r3, #2
 800914c:	4639      	mov	r1, r7
 800914e:	4817      	ldr	r0, [pc, #92]	; (80091ac <xTaskIncrementTick+0x108>)
 8009150:	4410      	add	r0, r2
 8009152:	f7ff f90a 	bl	800836a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009156:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009158:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <xTaskIncrementTick+0x104>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	429a      	cmp	r2, r3
 8009160:	d2d4      	bcs.n	800910c <xTaskIncrementTick+0x68>
 8009162:	e7d4      	b.n	800910e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009164:	2400      	movs	r4, #0
 8009166:	e7d2      	b.n	800910e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009168:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <xTaskIncrementTick+0x100>)
 800916a:	f04f 32ff 	mov.w	r2, #4294967295
 800916e:	601a      	str	r2, [r3, #0]
					break;
 8009170:	e7c0      	b.n	80090f4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009172:	4a0c      	ldr	r2, [pc, #48]	; (80091a4 <xTaskIncrementTick+0x100>)
 8009174:	6013      	str	r3, [r2, #0]
						break;
 8009176:	e7bd      	b.n	80090f4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009178:	4a0e      	ldr	r2, [pc, #56]	; (80091b4 <xTaskIncrementTick+0x110>)
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009180:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <xTaskIncrementTick+0x114>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	b103      	cbz	r3, 800918a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009188:	2401      	movs	r4, #1
}
 800918a:	4620      	mov	r0, r4
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918e:	bf00      	nop
 8009190:	20000dd0 	.word	0x20000dd0
 8009194:	20000e4c 	.word	0x20000e4c
 8009198:	20000d2c 	.word	0x20000d2c
 800919c:	20000d30 	.word	0x20000d30
 80091a0:	20000e08 	.word	0x20000e08
 80091a4:	20000e04 	.word	0x20000e04
 80091a8:	20000d28 	.word	0x20000d28
 80091ac:	20000d34 	.word	0x20000d34
 80091b0:	20000dd8 	.word	0x20000dd8
 80091b4:	20000dcc 	.word	0x20000dcc
 80091b8:	20000e50 	.word	0x20000e50

080091bc <xTaskResumeAll>:
{
 80091bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80091be:	4b33      	ldr	r3, [pc, #204]	; (800928c <xTaskResumeAll+0xd0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	b943      	cbnz	r3, 80091d6 <xTaskResumeAll+0x1a>
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	e7fe      	b.n	80091d4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80091d6:	f000 fda5 	bl	8009d24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80091da:	4b2c      	ldr	r3, [pc, #176]	; (800928c <xTaskResumeAll+0xd0>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	3a01      	subs	r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d14d      	bne.n	8009284 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091e8:	4b29      	ldr	r3, [pc, #164]	; (8009290 <xTaskResumeAll+0xd4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	b923      	cbnz	r3, 80091f8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80091ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80091f0:	f000 fdba 	bl	8009d68 <vPortExitCritical>
}
 80091f4:	4620      	mov	r0, r4
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80091f8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091fa:	4b26      	ldr	r3, [pc, #152]	; (8009294 <xTaskResumeAll+0xd8>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	b31b      	cbz	r3, 8009248 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009200:	4b24      	ldr	r3, [pc, #144]	; (8009294 <xTaskResumeAll+0xd8>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009206:	f104 0018 	add.w	r0, r4, #24
 800920a:	f7ff f8d4 	bl	80083b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800920e:	1d25      	adds	r5, r4, #4
 8009210:	4628      	mov	r0, r5
 8009212:	f7ff f8d0 	bl	80083b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009218:	2201      	movs	r2, #1
 800921a:	409a      	lsls	r2, r3
 800921c:	491e      	ldr	r1, [pc, #120]	; (8009298 <xTaskResumeAll+0xdc>)
 800921e:	6808      	ldr	r0, [r1, #0]
 8009220:	4302      	orrs	r2, r0
 8009222:	600a      	str	r2, [r1, #0]
 8009224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009228:	009a      	lsls	r2, r3, #2
 800922a:	4629      	mov	r1, r5
 800922c:	481b      	ldr	r0, [pc, #108]	; (800929c <xTaskResumeAll+0xe0>)
 800922e:	4410      	add	r0, r2
 8009230:	f7ff f89b 	bl	800836a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009234:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009236:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <xTaskResumeAll+0xe4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d3dc      	bcc.n	80091fa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8009240:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <xTaskResumeAll+0xe8>)
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e7d8      	b.n	80091fa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8009248:	b10c      	cbz	r4, 800924e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800924a:	f7ff fcab 	bl	8008ba4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <xTaskResumeAll+0xec>)
 8009250:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009252:	b154      	cbz	r4, 800926a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009254:	f7ff ff26 	bl	80090a4 <xTaskIncrementTick>
 8009258:	b110      	cbz	r0, 8009260 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800925a:	4b12      	ldr	r3, [pc, #72]	; (80092a4 <xTaskResumeAll+0xe8>)
 800925c:	2201      	movs	r2, #1
 800925e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009260:	3c01      	subs	r4, #1
 8009262:	d1f7      	bne.n	8009254 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009264:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <xTaskResumeAll+0xec>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800926a:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <xTaskResumeAll+0xe8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	b15b      	cbz	r3, 8009288 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8009270:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <xTaskResumeAll+0xf0>)
 8009272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009280:	2401      	movs	r4, #1
 8009282:	e7b5      	b.n	80091f0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009284:	2400      	movs	r4, #0
 8009286:	e7b3      	b.n	80091f0 <xTaskResumeAll+0x34>
 8009288:	2400      	movs	r4, #0
 800928a:	e7b1      	b.n	80091f0 <xTaskResumeAll+0x34>
 800928c:	20000dd0 	.word	0x20000dd0
 8009290:	20000dc4 	.word	0x20000dc4
 8009294:	20000e0c 	.word	0x20000e0c
 8009298:	20000dd8 	.word	0x20000dd8
 800929c:	20000d34 	.word	0x20000d34
 80092a0:	20000d28 	.word	0x20000d28
 80092a4:	20000e50 	.word	0x20000e50
 80092a8:	20000dcc 	.word	0x20000dcc
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <vTaskDelay>:
	{
 80092b0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092b2:	b1a8      	cbz	r0, 80092e0 <vTaskDelay+0x30>
 80092b4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <vTaskDelay+0x44>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	b143      	cbz	r3, 80092ce <vTaskDelay+0x1e>
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	e7fe      	b.n	80092cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80092ce:	f7ff fedb 	bl	8009088 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092d2:	2100      	movs	r1, #0
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7ff fd6d 	bl	8008db4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80092da:	f7ff ff6f 	bl	80091bc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80092de:	b938      	cbnz	r0, 80092f0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <vTaskDelay+0x48>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
	}
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	20000dd0 	.word	0x20000dd0
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092fc:	4b13      	ldr	r3, [pc, #76]	; (800934c <prvCheckTasksWaitingTermination+0x50>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	b313      	cbz	r3, 8009348 <prvCheckTasksWaitingTermination+0x4c>
{
 8009302:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8009304:	f7ff fec0 	bl	8009088 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <prvCheckTasksWaitingTermination+0x54>)
 800930a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 800930c:	f7ff ff56 	bl	80091bc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8009310:	b924      	cbnz	r4, 800931c <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009312:	4b0e      	ldr	r3, [pc, #56]	; (800934c <prvCheckTasksWaitingTermination+0x50>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f4      	bne.n	8009304 <prvCheckTasksWaitingTermination+0x8>
}
 800931a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 800931c:	f000 fd02 	bl	8009d24 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <prvCheckTasksWaitingTermination+0x54>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009326:	1d20      	adds	r0, r4, #4
 8009328:	f7ff f845 	bl	80083b6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800932c:	4a09      	ldr	r2, [pc, #36]	; (8009354 <prvCheckTasksWaitingTermination+0x58>)
 800932e:	6813      	ldr	r3, [r2, #0]
 8009330:	3b01      	subs	r3, #1
 8009332:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8009334:	4a05      	ldr	r2, [pc, #20]	; (800934c <prvCheckTasksWaitingTermination+0x50>)
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	3b01      	subs	r3, #1
 800933a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800933c:	f000 fd14 	bl	8009d68 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff fd1b 	bl	8008d7c <prvDeleteTCB>
 8009346:	e7e4      	b.n	8009312 <prvCheckTasksWaitingTermination+0x16>
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000dc8 	.word	0x20000dc8
 8009350:	20000e38 	.word	0x20000e38
 8009354:	20000dc4 	.word	0x20000dc4

08009358 <prvIdleTask>:
{
 8009358:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800935a:	f7ff ffcf 	bl	80092fc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800935e:	4b06      	ldr	r3, [pc, #24]	; (8009378 <prvIdleTask+0x20>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d9f9      	bls.n	800935a <prvIdleTask+0x2>
				taskYIELD();
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <prvIdleTask+0x24>)
 8009368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	e7f0      	b.n	800935a <prvIdleTask+0x2>
 8009378:	20000d34 	.word	0x20000d34
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009380:	4b26      	ldr	r3, [pc, #152]	; (800941c <vTaskSwitchContext+0x9c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	b11b      	cbz	r3, 800938e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <vTaskSwitchContext+0xa0>)
 8009388:	2201      	movs	r2, #1
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	4770      	bx	lr
{
 800938e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <vTaskSwitchContext+0xa0>)
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009396:	f7f7 fade 	bl	8000956 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800939a:	4b22      	ldr	r3, [pc, #136]	; (8009424 <vTaskSwitchContext+0xa4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4298      	cmp	r0, r3
 80093a0:	d905      	bls.n	80093ae <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80093a2:	4a21      	ldr	r2, [pc, #132]	; (8009428 <vTaskSwitchContext+0xa8>)
 80093a4:	6811      	ldr	r1, [r2, #0]
 80093a6:	1ac3      	subs	r3, r0, r3
 80093a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80093aa:	4413      	add	r3, r2
 80093ac:	668b      	str	r3, [r1, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 80093ae:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <vTaskSwitchContext+0xa4>)
 80093b0:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80093b2:	4b1e      	ldr	r3, [pc, #120]	; (800942c <vTaskSwitchContext+0xac>)
 80093b4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80093b6:	fab3 f383 	clz	r3, r3
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f1c3 031f 	rsb	r3, r3, #31
 80093c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80093c4:	008a      	lsls	r2, r1, #2
 80093c6:	491a      	ldr	r1, [pc, #104]	; (8009430 <vTaskSwitchContext+0xb0>)
 80093c8:	588a      	ldr	r2, [r1, r2]
 80093ca:	b942      	cbnz	r2, 80093de <vTaskSwitchContext+0x5e>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	e7fe      	b.n	80093dc <vTaskSwitchContext+0x5c>
 80093de:	4814      	ldr	r0, [pc, #80]	; (8009430 <vTaskSwitchContext+0xb0>)
 80093e0:	009a      	lsls	r2, r3, #2
 80093e2:	18d4      	adds	r4, r2, r3
 80093e4:	00a1      	lsls	r1, r4, #2
 80093e6:	4401      	add	r1, r0
 80093e8:	684c      	ldr	r4, [r1, #4]
 80093ea:	6864      	ldr	r4, [r4, #4]
 80093ec:	604c      	str	r4, [r1, #4]
 80093ee:	441a      	add	r2, r3
 80093f0:	0091      	lsls	r1, r2, #2
 80093f2:	3108      	adds	r1, #8
 80093f4:	4408      	add	r0, r1
 80093f6:	4284      	cmp	r4, r0
 80093f8:	d009      	beq.n	800940e <vTaskSwitchContext+0x8e>
 80093fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093fe:	009a      	lsls	r2, r3, #2
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <vTaskSwitchContext+0xb0>)
 8009402:	4413      	add	r3, r2
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	4b07      	ldr	r3, [pc, #28]	; (8009428 <vTaskSwitchContext+0xa8>)
 800940a:	601a      	str	r2, [r3, #0]
}
 800940c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800940e:	6861      	ldr	r1, [r4, #4]
 8009410:	4807      	ldr	r0, [pc, #28]	; (8009430 <vTaskSwitchContext+0xb0>)
 8009412:	2214      	movs	r2, #20
 8009414:	fb02 0203 	mla	r2, r2, r3, r0
 8009418:	6051      	str	r1, [r2, #4]
 800941a:	e7ee      	b.n	80093fa <vTaskSwitchContext+0x7a>
 800941c:	20000dd0 	.word	0x20000dd0
 8009420:	20000e50 	.word	0x20000e50
 8009424:	20000dc0 	.word	0x20000dc0
 8009428:	20000d28 	.word	0x20000d28
 800942c:	20000dd8 	.word	0x20000dd8
 8009430:	20000d34 	.word	0x20000d34

08009434 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009434:	b940      	cbnz	r0, 8009448 <vTaskPlaceOnEventList+0x14>
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	e7fe      	b.n	8009446 <vTaskPlaceOnEventList+0x12>
{
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <vTaskPlaceOnEventList+0x2c>)
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	3118      	adds	r1, #24
 8009452:	f7fe ff96 	bl	8008382 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009456:	2101      	movs	r1, #1
 8009458:	4620      	mov	r0, r4
 800945a:	f7ff fcab 	bl	8008db4 <prvAddCurrentTaskToDelayedList>
}
 800945e:	bd10      	pop	{r4, pc}
 8009460:	20000d28 	.word	0x20000d28

08009464 <vTaskPlaceOnEventListRestricted>:
	{
 8009464:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009466:	b940      	cbnz	r0, 800947a <vTaskPlaceOnEventListRestricted+0x16>
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	e7fe      	b.n	8009478 <vTaskPlaceOnEventListRestricted+0x14>
 800947a:	460c      	mov	r4, r1
 800947c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800947e:	4a06      	ldr	r2, [pc, #24]	; (8009498 <vTaskPlaceOnEventListRestricted+0x34>)
 8009480:	6811      	ldr	r1, [r2, #0]
 8009482:	3118      	adds	r1, #24
 8009484:	f7fe ff71 	bl	800836a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009488:	b10d      	cbz	r5, 800948e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800948a:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800948e:	4629      	mov	r1, r5
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff fc8f 	bl	8008db4 <prvAddCurrentTaskToDelayedList>
	}
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000d28 	.word	0x20000d28

0800949c <xTaskRemoveFromEventList>:
{
 800949c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800949e:	68c3      	ldr	r3, [r0, #12]
 80094a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80094a2:	b944      	cbnz	r4, 80094b6 <xTaskRemoveFromEventList+0x1a>
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	e7fe      	b.n	80094b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094b6:	f104 0518 	add.w	r5, r4, #24
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7fe ff7b 	bl	80083b6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c0:	4b13      	ldr	r3, [pc, #76]	; (8009510 <xTaskRemoveFromEventList+0x74>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b9e3      	cbnz	r3, 8009500 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094c6:	1d25      	adds	r5, r4, #4
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7fe ff74 	bl	80083b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094d0:	2201      	movs	r2, #1
 80094d2:	409a      	lsls	r2, r3
 80094d4:	490f      	ldr	r1, [pc, #60]	; (8009514 <xTaskRemoveFromEventList+0x78>)
 80094d6:	6808      	ldr	r0, [r1, #0]
 80094d8:	4302      	orrs	r2, r0
 80094da:	600a      	str	r2, [r1, #0]
 80094dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80094e0:	009a      	lsls	r2, r3, #2
 80094e2:	4629      	mov	r1, r5
 80094e4:	480c      	ldr	r0, [pc, #48]	; (8009518 <xTaskRemoveFromEventList+0x7c>)
 80094e6:	4410      	add	r0, r2
 80094e8:	f7fe ff3f 	bl	800836a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <xTaskRemoveFromEventList+0x80>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d908      	bls.n	800950a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80094f8:	2001      	movs	r0, #1
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <xTaskRemoveFromEventList+0x84>)
 80094fc:	6018      	str	r0, [r3, #0]
}
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009500:	4629      	mov	r1, r5
 8009502:	4808      	ldr	r0, [pc, #32]	; (8009524 <xTaskRemoveFromEventList+0x88>)
 8009504:	f7fe ff31 	bl	800836a <vListInsertEnd>
 8009508:	e7f0      	b.n	80094ec <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800950a:	2000      	movs	r0, #0
	return xReturn;
 800950c:	e7f7      	b.n	80094fe <xTaskRemoveFromEventList+0x62>
 800950e:	bf00      	nop
 8009510:	20000dd0 	.word	0x20000dd0
 8009514:	20000dd8 	.word	0x20000dd8
 8009518:	20000d34 	.word	0x20000d34
 800951c:	20000d28 	.word	0x20000d28
 8009520:	20000e50 	.word	0x20000e50
 8009524:	20000e0c 	.word	0x20000e0c

08009528 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8009528:	b130      	cbz	r0, 8009538 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800952a:	4a08      	ldr	r2, [pc, #32]	; (800954c <vTaskSetTimeOutState+0x24>)
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009530:	4a07      	ldr	r2, [pc, #28]	; (8009550 <vTaskSetTimeOutState+0x28>)
 8009532:	6812      	ldr	r2, [r2, #0]
 8009534:	6042      	str	r2, [r0, #4]
}
 8009536:	4770      	bx	lr
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	e7fe      	b.n	8009548 <vTaskSetTimeOutState+0x20>
 800954a:	bf00      	nop
 800954c:	20000e08 	.word	0x20000e08
 8009550:	20000e4c 	.word	0x20000e4c

08009554 <xTaskCheckForTimeOut>:
{
 8009554:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8009556:	b150      	cbz	r0, 800956e <xTaskCheckForTimeOut+0x1a>
 8009558:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 800955a:	b989      	cbnz	r1, 8009580 <xTaskCheckForTimeOut+0x2c>
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	e7fe      	b.n	800956c <xTaskCheckForTimeOut+0x18>
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	e7fe      	b.n	800957e <xTaskCheckForTimeOut+0x2a>
 8009580:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8009582:	f000 fbcf 	bl	8009d24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009586:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <xTaskCheckForTimeOut+0x90>)
 8009588:	6819      	ldr	r1, [r3, #0]
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 800958a:	4b17      	ldr	r3, [pc, #92]	; (80095e8 <xTaskCheckForTimeOut+0x94>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8009592:	b9bb      	cbnz	r3, 80095c4 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959a:	d01d      	beq.n	80095d8 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4a13      	ldr	r2, [pc, #76]	; (80095ec <xTaskCheckForTimeOut+0x98>)
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	4290      	cmp	r0, r2
 80095a4:	d002      	beq.n	80095ac <xTaskCheckForTimeOut+0x58>
 80095a6:	6862      	ldr	r2, [r4, #4]
 80095a8:	428a      	cmp	r2, r1
 80095aa:	d917      	bls.n	80095dc <xTaskCheckForTimeOut+0x88>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095ac:	6862      	ldr	r2, [r4, #4]
 80095ae:	1a88      	subs	r0, r1, r2
 80095b0:	4283      	cmp	r3, r0
 80095b2:	d915      	bls.n	80095e0 <xTaskCheckForTimeOut+0x8c>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80095b4:	1a52      	subs	r2, r2, r1
 80095b6:	4413      	add	r3, r2
 80095b8:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff ffb4 	bl	8009528 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80095c0:	2400      	movs	r4, #0
 80095c2:	e005      	b.n	80095d0 <xTaskCheckForTimeOut+0x7c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80095c4:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <xTaskCheckForTimeOut+0x94>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				xReturn = pdTRUE;
 80095ce:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80095d0:	f000 fbca 	bl	8009d68 <vPortExitCritical>
}
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80095d8:	2400      	movs	r4, #0
 80095da:	e7f9      	b.n	80095d0 <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 80095dc:	2401      	movs	r4, #1
 80095de:	e7f7      	b.n	80095d0 <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 80095e0:	2401      	movs	r4, #1
 80095e2:	e7f5      	b.n	80095d0 <xTaskCheckForTimeOut+0x7c>
 80095e4:	20000e4c 	.word	0x20000e4c
 80095e8:	20000d28 	.word	0x20000d28
 80095ec:	20000e08 	.word	0x20000e08

080095f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80095f0:	4b01      	ldr	r3, [pc, #4]	; (80095f8 <vTaskMissedYield+0x8>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	601a      	str	r2, [r3, #0]
}
 80095f6:	4770      	bx	lr
 80095f8:	20000e50 	.word	0x20000e50

080095fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <xTaskGetSchedulerState+0x18>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	b133      	cbz	r3, 8009610 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <xTaskGetSchedulerState+0x1c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	b10b      	cbz	r3, 800960c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009608:	2000      	movs	r0, #0
	}
 800960a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800960c:	2002      	movs	r0, #2
 800960e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009610:	2001      	movs	r0, #1
 8009612:	4770      	bx	lr
 8009614:	20000e20 	.word	0x20000e20
 8009618:	20000dd0 	.word	0x20000dd0

0800961c <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800961c:	2800      	cmp	r0, #0
 800961e:	d045      	beq.n	80096ac <vTaskPriorityInherit+0x90>
	{
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009624:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009626:	4922      	ldr	r1, [pc, #136]	; (80096b0 <vTaskPriorityInherit+0x94>)
 8009628:	6809      	ldr	r1, [r1, #0]
 800962a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800962c:	428a      	cmp	r2, r1
 800962e:	d214      	bcs.n	800965a <vTaskPriorityInherit+0x3e>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009630:	6981      	ldr	r1, [r0, #24]
 8009632:	2900      	cmp	r1, #0
 8009634:	db05      	blt.n	8009642 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009636:	491e      	ldr	r1, [pc, #120]	; (80096b0 <vTaskPriorityInherit+0x94>)
 8009638:	6809      	ldr	r1, [r1, #0]
 800963a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800963c:	f1c1 0107 	rsb	r1, r1, #7
 8009640:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009642:	6960      	ldr	r0, [r4, #20]
 8009644:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009648:	0091      	lsls	r1, r2, #2
 800964a:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <vTaskPriorityInherit+0x98>)
 800964c:	440a      	add	r2, r1
 800964e:	4290      	cmp	r0, r2
 8009650:	d004      	beq.n	800965c <vTaskPriorityInherit+0x40>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009652:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <vTaskPriorityInherit+0x94>)
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009658:	62e2      	str	r2, [r4, #44]	; 0x2c
	}
 800965a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800965c:	1d25      	adds	r5, r4, #4
 800965e:	4628      	mov	r0, r5
 8009660:	f7fe fea9 	bl	80083b6 <uxListRemove>
 8009664:	b190      	cbz	r0, 800968c <vTaskPriorityInherit+0x70>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009666:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <vTaskPriorityInherit+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800966e:	2201      	movs	r2, #1
 8009670:	409a      	lsls	r2, r3
 8009672:	4911      	ldr	r1, [pc, #68]	; (80096b8 <vTaskPriorityInherit+0x9c>)
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	4302      	orrs	r2, r0
 8009678:	600a      	str	r2, [r1, #0]
 800967a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800967e:	009a      	lsls	r2, r3, #2
 8009680:	4629      	mov	r1, r5
 8009682:	480c      	ldr	r0, [pc, #48]	; (80096b4 <vTaskPriorityInherit+0x98>)
 8009684:	4410      	add	r0, r2
 8009686:	f7fe fe70 	bl	800836a <vListInsertEnd>
	}
 800968a:	e7e6      	b.n	800965a <vTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800968c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800968e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009692:	008a      	lsls	r2, r1, #2
 8009694:	4907      	ldr	r1, [pc, #28]	; (80096b4 <vTaskPriorityInherit+0x98>)
 8009696:	588a      	ldr	r2, [r1, r2]
 8009698:	2a00      	cmp	r2, #0
 800969a:	d1e4      	bne.n	8009666 <vTaskPriorityInherit+0x4a>
 800969c:	2201      	movs	r2, #1
 800969e:	409a      	lsls	r2, r3
 80096a0:	4905      	ldr	r1, [pc, #20]	; (80096b8 <vTaskPriorityInherit+0x9c>)
 80096a2:	680b      	ldr	r3, [r1, #0]
 80096a4:	ea23 0302 	bic.w	r3, r3, r2
 80096a8:	600b      	str	r3, [r1, #0]
 80096aa:	e7dc      	b.n	8009666 <vTaskPriorityInherit+0x4a>
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000d28 	.word	0x20000d28
 80096b4:	20000d34 	.word	0x20000d34
 80096b8:	20000dd8 	.word	0x20000dd8

080096bc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80096bc:	2800      	cmp	r0, #0
 80096be:	d049      	beq.n	8009754 <xTaskPriorityDisinherit+0x98>
	{
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80096c4:	4a26      	ldr	r2, [pc, #152]	; (8009760 <xTaskPriorityDisinherit+0xa4>)
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	4282      	cmp	r2, r0
 80096ca:	d008      	beq.n	80096de <xTaskPriorityDisinherit+0x22>
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	e7fe      	b.n	80096dc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80096de:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096e0:	b942      	cbnz	r2, 80096f4 <xTaskPriorityDisinherit+0x38>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	e7fe      	b.n	80096f2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80096f4:	3a01      	subs	r2, #1
 80096f6:	6602      	str	r2, [r0, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80096fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096fc:	4288      	cmp	r0, r1
 80096fe:	d02b      	beq.n	8009758 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009700:	bb62      	cbnz	r2, 800975c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009702:	1d25      	adds	r5, r4, #4
 8009704:	4628      	mov	r0, r5
 8009706:	f7fe fe56 	bl	80083b6 <uxListRemove>
 800970a:	b970      	cbnz	r0, 800972a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800970c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800970e:	2314      	movs	r3, #20
 8009710:	fb03 f302 	mul.w	r3, r3, r2
 8009714:	4913      	ldr	r1, [pc, #76]	; (8009764 <xTaskPriorityDisinherit+0xa8>)
 8009716:	58cb      	ldr	r3, [r1, r3]
 8009718:	b93b      	cbnz	r3, 800972a <xTaskPriorityDisinherit+0x6e>
 800971a:	2301      	movs	r3, #1
 800971c:	fa03 f202 	lsl.w	r2, r3, r2
 8009720:	4911      	ldr	r1, [pc, #68]	; (8009768 <xTaskPriorityDisinherit+0xac>)
 8009722:	680b      	ldr	r3, [r1, #0]
 8009724:	ea23 0302 	bic.w	r3, r3, r2
 8009728:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800972a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800972c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800972e:	f1c3 0207 	rsb	r2, r3, #7
 8009732:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009734:	2401      	movs	r4, #1
 8009736:	fa04 f203 	lsl.w	r2, r4, r3
 800973a:	490b      	ldr	r1, [pc, #44]	; (8009768 <xTaskPriorityDisinherit+0xac>)
 800973c:	6808      	ldr	r0, [r1, #0]
 800973e:	4302      	orrs	r2, r0
 8009740:	600a      	str	r2, [r1, #0]
 8009742:	4629      	mov	r1, r5
 8009744:	4a07      	ldr	r2, [pc, #28]	; (8009764 <xTaskPriorityDisinherit+0xa8>)
 8009746:	2014      	movs	r0, #20
 8009748:	fb00 2003 	mla	r0, r0, r3, r2
 800974c:	f7fe fe0d 	bl	800836a <vListInsertEnd>
					xReturn = pdTRUE;
 8009750:	4620      	mov	r0, r4
	}
 8009752:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009754:	2000      	movs	r0, #0
	}
 8009756:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009758:	2000      	movs	r0, #0
 800975a:	e7fa      	b.n	8009752 <xTaskPriorityDisinherit+0x96>
 800975c:	2000      	movs	r0, #0
		return xReturn;
 800975e:	e7f8      	b.n	8009752 <xTaskPriorityDisinherit+0x96>
 8009760:	20000d28 	.word	0x20000d28
 8009764:	20000d34 	.word	0x20000d34
 8009768:	20000dd8 	.word	0x20000dd8

0800976c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <pvTaskIncrementMutexHeldCount+0x18>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	b123      	cbz	r3, 800977c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009772:	4b04      	ldr	r3, [pc, #16]	; (8009784 <pvTaskIncrementMutexHeldCount+0x18>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8009778:	3301      	adds	r3, #1
 800977a:	6613      	str	r3, [r2, #96]	; 0x60
		return pxCurrentTCB;
 800977c:	4b01      	ldr	r3, [pc, #4]	; (8009784 <pvTaskIncrementMutexHeldCount+0x18>)
 800977e:	6818      	ldr	r0, [r3, #0]
	}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000d28 	.word	0x20000d28

08009788 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009788:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <prvGetNextExpireTime+0x1c>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	6813      	ldr	r3, [r2, #0]
 800978e:	fab3 f383 	clz	r3, r3
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009796:	b913      	cbnz	r3, 800979e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009798:	68d3      	ldr	r3, [r2, #12]
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800979e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000e54 	.word	0x20000e54

080097a8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097a8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097ac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097ae:	4291      	cmp	r1, r2
 80097b0:	d80c      	bhi.n	80097cc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	6983      	ldr	r3, [r0, #24]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d301      	bcc.n	80097be <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097ba:	2001      	movs	r0, #1
 80097bc:	e010      	b.n	80097e0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097be:	1d01      	adds	r1, r0, #4
 80097c0:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <prvInsertTimerInActiveList+0x40>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	f7fe fddd 	bl	8008382 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80097c8:	2000      	movs	r0, #0
 80097ca:	e009      	b.n	80097e0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d201      	bcs.n	80097d4 <prvInsertTimerInActiveList+0x2c>
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d206      	bcs.n	80097e2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097d4:	1d01      	adds	r1, r0, #4
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <prvInsertTimerInActiveList+0x44>)
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f7fe fdd2 	bl	8008382 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80097de:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80097e0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 80097e2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80097e4:	e7fc      	b.n	80097e0 <prvInsertTimerInActiveList+0x38>
 80097e6:	bf00      	nop
 80097e8:	20000e58 	.word	0x20000e58
 80097ec:	20000e54 	.word	0x20000e54

080097f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097f0:	b530      	push	{r4, r5, lr}
 80097f2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097f4:	f000 fa96 	bl	8009d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097f8:	4b11      	ldr	r3, [pc, #68]	; (8009840 <prvCheckForValidListAndQueue+0x50>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	b11b      	cbz	r3, 8009806 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097fe:	f000 fab3 	bl	8009d68 <vPortExitCritical>
}
 8009802:	b003      	add	sp, #12
 8009804:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009806:	4d0f      	ldr	r5, [pc, #60]	; (8009844 <prvCheckForValidListAndQueue+0x54>)
 8009808:	4628      	mov	r0, r5
 800980a:	f7fe fda0 	bl	800834e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800980e:	4c0e      	ldr	r4, [pc, #56]	; (8009848 <prvCheckForValidListAndQueue+0x58>)
 8009810:	4620      	mov	r0, r4
 8009812:	f7fe fd9c 	bl	800834e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009816:	4b0d      	ldr	r3, [pc, #52]	; (800984c <prvCheckForValidListAndQueue+0x5c>)
 8009818:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800981a:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <prvCheckForValidListAndQueue+0x60>)
 800981c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800981e:	2300      	movs	r3, #0
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <prvCheckForValidListAndQueue+0x64>)
 8009824:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <prvCheckForValidListAndQueue+0x68>)
 8009826:	2110      	movs	r1, #16
 8009828:	200a      	movs	r0, #10
 800982a:	f7fe feca 	bl	80085c2 <xQueueGenericCreateStatic>
 800982e:	4b04      	ldr	r3, [pc, #16]	; (8009840 <prvCheckForValidListAndQueue+0x50>)
 8009830:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009832:	2800      	cmp	r0, #0
 8009834:	d0e3      	beq.n	80097fe <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009836:	4909      	ldr	r1, [pc, #36]	; (800985c <prvCheckForValidListAndQueue+0x6c>)
 8009838:	f7ff f976 	bl	8008b28 <vQueueAddToRegistry>
 800983c:	e7df      	b.n	80097fe <prvCheckForValidListAndQueue+0xe>
 800983e:	bf00      	nop
 8009840:	20000f78 	.word	0x20000f78
 8009844:	20000efc 	.word	0x20000efc
 8009848:	20000f10 	.word	0x20000f10
 800984c:	20000e54 	.word	0x20000e54
 8009850:	20000e58 	.word	0x20000e58
 8009854:	20000f28 	.word	0x20000f28
 8009858:	20000e5c 	.word	0x20000e5c
 800985c:	0800f378 	.word	0x0800f378

08009860 <prvInitialiseNewTimer>:
{
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009866:	b941      	cbnz	r1, 800987a <prvInitialiseNewTimer+0x1a>
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	e7fe      	b.n	8009878 <prvInitialiseNewTimer+0x18>
 800987a:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800987c:	b174      	cbz	r4, 800989c <prvInitialiseNewTimer+0x3c>
 800987e:	461d      	mov	r5, r3
 8009880:	4616      	mov	r6, r2
 8009882:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 8009884:	f7ff ffb4 	bl	80097f0 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009888:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800988c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800988e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009890:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009892:	9b06      	ldr	r3, [sp, #24]
 8009894:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009896:	1d20      	adds	r0, r4, #4
 8009898:	f7fe fd64 	bl	8008364 <vListInitialiseItem>
}
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098a0 <xTimerCreateTimerTask>:
{
 80098a0:	b510      	push	{r4, lr}
 80098a2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80098a4:	f7ff ffa4 	bl	80097f0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80098a8:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <xTimerCreateTimerTask+0x54>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b1cb      	cbz	r3, 80098e2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098ae:	2400      	movs	r4, #0
 80098b0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098b2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098b4:	aa07      	add	r2, sp, #28
 80098b6:	a906      	add	r1, sp, #24
 80098b8:	a805      	add	r0, sp, #20
 80098ba:	f7f7 f85b 	bl	8000974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	2305      	movs	r3, #5
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	4623      	mov	r3, r4
 80098cc:	9a07      	ldr	r2, [sp, #28]
 80098ce:	490a      	ldr	r1, [pc, #40]	; (80098f8 <xTimerCreateTimerTask+0x58>)
 80098d0:	480a      	ldr	r0, [pc, #40]	; (80098fc <xTimerCreateTimerTask+0x5c>)
 80098d2:	f7ff fabf 	bl	8008e54 <xTaskCreateStatic>
 80098d6:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <xTimerCreateTimerTask+0x60>)
 80098d8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80098da:	b110      	cbz	r0, 80098e2 <xTimerCreateTimerTask+0x42>
}
 80098dc:	2001      	movs	r0, #1
 80098de:	b008      	add	sp, #32
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	e7fe      	b.n	80098f2 <xTimerCreateTimerTask+0x52>
 80098f4:	20000f78 	.word	0x20000f78
 80098f8:	0800f380 	.word	0x0800f380
 80098fc:	08009c69 	.word	0x08009c69
 8009900:	20000f7c 	.word	0x20000f7c

08009904 <xTimerCreate>:
	{
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	4605      	mov	r5, r0
 800990c:	460e      	mov	r6, r1
 800990e:	4617      	mov	r7, r2
 8009910:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009912:	2030      	movs	r0, #48	; 0x30
 8009914:	f000 fb68 	bl	8009fe8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009918:	4604      	mov	r4, r0
 800991a:	b158      	cbz	r0, 8009934 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800991c:	9001      	str	r0, [sp, #4]
 800991e:	9b08      	ldr	r3, [sp, #32]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4643      	mov	r3, r8
 8009924:	463a      	mov	r2, r7
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	f7ff ff99 	bl	8009860 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8009934:	4620      	mov	r0, r4
 8009936:	b002      	add	sp, #8
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800993c <xTimerCreateStatic>:
	{
 800993c:	b530      	push	{r4, r5, lr}
 800993e:	b085      	sub	sp, #20
 8009940:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009942:	2530      	movs	r5, #48	; 0x30
 8009944:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009946:	9d03      	ldr	r5, [sp, #12]
 8009948:	2d30      	cmp	r5, #48	; 0x30
 800994a:	d008      	beq.n	800995e <xTimerCreateStatic+0x22>
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	e7fe      	b.n	800995c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
 800995e:	b944      	cbnz	r4, 8009972 <xTimerCreateStatic+0x36>
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	e7fe      	b.n	8009970 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009972:	9401      	str	r4, [sp, #4]
 8009974:	9d08      	ldr	r5, [sp, #32]
 8009976:	9500      	str	r5, [sp, #0]
 8009978:	f7ff ff72 	bl	8009860 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800997c:	2301      	movs	r3, #1
 800997e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 8009982:	4620      	mov	r0, r4
 8009984:	b005      	add	sp, #20
 8009986:	bd30      	pop	{r4, r5, pc}

08009988 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009988:	b1c8      	cbz	r0, 80099be <xTimerGenericCommand+0x36>
{
 800998a:	b530      	push	{r4, r5, lr}
 800998c:	b085      	sub	sp, #20
 800998e:	4615      	mov	r5, r2
 8009990:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8009992:	4a17      	ldr	r2, [pc, #92]	; (80099f0 <xTimerGenericCommand+0x68>)
 8009994:	6810      	ldr	r0, [r2, #0]
 8009996:	b340      	cbz	r0, 80099ea <xTimerGenericCommand+0x62>
 8009998:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800999a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800999c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800999e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099a0:	2905      	cmp	r1, #5
 80099a2:	dc1d      	bgt.n	80099e0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099a4:	f7ff fe2a 	bl	80095fc <xTaskGetSchedulerState>
 80099a8:	2802      	cmp	r0, #2
 80099aa:	d011      	beq.n	80099d0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099ac:	2300      	movs	r3, #0
 80099ae:	461a      	mov	r2, r3
 80099b0:	4669      	mov	r1, sp
 80099b2:	480f      	ldr	r0, [pc, #60]	; (80099f0 <xTimerGenericCommand+0x68>)
 80099b4:	6800      	ldr	r0, [r0, #0]
 80099b6:	f7fe fe73 	bl	80086a0 <xQueueGenericSend>
}
 80099ba:	b005      	add	sp, #20
 80099bc:	bd30      	pop	{r4, r5, pc}
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	e7fe      	b.n	80099ce <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099d0:	2300      	movs	r3, #0
 80099d2:	9a08      	ldr	r2, [sp, #32]
 80099d4:	4669      	mov	r1, sp
 80099d6:	4806      	ldr	r0, [pc, #24]	; (80099f0 <xTimerGenericCommand+0x68>)
 80099d8:	6800      	ldr	r0, [r0, #0]
 80099da:	f7fe fe61 	bl	80086a0 <xQueueGenericSend>
 80099de:	e7ec      	b.n	80099ba <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099e0:	2300      	movs	r3, #0
 80099e2:	4669      	mov	r1, sp
 80099e4:	f7fe ff40 	bl	8008868 <xQueueGenericSendFromISR>
 80099e8:	e7e7      	b.n	80099ba <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 80099ea:	2000      	movs	r0, #0
	return xReturn;
 80099ec:	e7e5      	b.n	80099ba <xTimerGenericCommand+0x32>
 80099ee:	bf00      	nop
 80099f0:	20000f78 	.word	0x20000f78

080099f4 <prvSwitchTimerLists>:
{
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099f8:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <prvSwitchTimerLists+0x70>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	b352      	cbz	r2, 8009a56 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a04:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a06:	1d25      	adds	r5, r4, #4
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7fe fcd4 	bl	80083b6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a10:	4620      	mov	r0, r4
 8009a12:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a14:	69e3      	ldr	r3, [r4, #28]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d1ee      	bne.n	80099f8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009a1e:	429e      	cmp	r6, r3
 8009a20:	d207      	bcs.n	8009a32 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a22:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a24:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a26:	4629      	mov	r1, r5
 8009a28:	4b0e      	ldr	r3, [pc, #56]	; (8009a64 <prvSwitchTimerLists+0x70>)
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	f7fe fca9 	bl	8008382 <vListInsert>
 8009a30:	e7e2      	b.n	80099f8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a32:	2100      	movs	r1, #0
 8009a34:	9100      	str	r1, [sp, #0]
 8009a36:	460b      	mov	r3, r1
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff ffa4 	bl	8009988 <xTimerGenericCommand>
				configASSERT( xResult );
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1d9      	bne.n	80099f8 <prvSwitchTimerLists+0x4>
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	e7fe      	b.n	8009a54 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8009a56:	4a04      	ldr	r2, [pc, #16]	; (8009a68 <prvSwitchTimerLists+0x74>)
 8009a58:	6810      	ldr	r0, [r2, #0]
 8009a5a:	4902      	ldr	r1, [pc, #8]	; (8009a64 <prvSwitchTimerLists+0x70>)
 8009a5c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009a5e:	6013      	str	r3, [r2, #0]
}
 8009a60:	b002      	add	sp, #8
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	20000e54 	.word	0x20000e54
 8009a68:	20000e58 	.word	0x20000e58

08009a6c <prvSampleTimeNow>:
{
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009a70:	f7ff fb12 	bl	8009098 <xTaskGetTickCount>
 8009a74:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <prvSampleTimeNow+0x28>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4283      	cmp	r3, r0
 8009a7c:	d805      	bhi.n	8009a8a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009a82:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <prvSampleTimeNow+0x28>)
 8009a84:	601c      	str	r4, [r3, #0]
}
 8009a86:	4620      	mov	r0, r4
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009a8a:	f7ff ffb3 	bl	80099f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	e7f6      	b.n	8009a82 <prvSampleTimeNow+0x16>
 8009a94:	20000f24 	.word	0x20000f24

08009a98 <prvProcessExpiredTimer>:
{
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aa0:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <prvProcessExpiredTimer+0x5c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa8:	1d20      	adds	r0, r4, #4
 8009aaa:	f7fe fc84 	bl	80083b6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009aae:	69e3      	ldr	r3, [r4, #28]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d004      	beq.n	8009abe <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4798      	blx	r3
}
 8009aba:	b002      	add	sp, #8
 8009abc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009abe:	69a1      	ldr	r1, [r4, #24]
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	4632      	mov	r2, r6
 8009ac4:	4429      	add	r1, r5
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f7ff fe6e 	bl	80097a8 <prvInsertTimerInActiveList>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0f1      	beq.n	8009ab4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	9100      	str	r1, [sp, #0]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7ff ff55 	bl	8009988 <xTimerGenericCommand>
			configASSERT( xResult );
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d1e8      	bne.n	8009ab4 <prvProcessExpiredTimer+0x1c>
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	e7fe      	b.n	8009af2 <prvProcessExpiredTimer+0x5a>
 8009af4:	20000e54 	.word	0x20000e54

08009af8 <prvProcessTimerOrBlockTask>:
{
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	4606      	mov	r6, r0
 8009afe:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009b00:	f7ff fac2 	bl	8009088 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b04:	a801      	add	r0, sp, #4
 8009b06:	f7ff ffb1 	bl	8009a6c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	bb1b      	cbnz	r3, 8009b56 <prvProcessTimerOrBlockTask+0x5e>
 8009b0e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b10:	b90c      	cbnz	r4, 8009b16 <prvProcessTimerOrBlockTask+0x1e>
 8009b12:	42b0      	cmp	r0, r6
 8009b14:	d218      	bcs.n	8009b48 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 8009b16:	b12c      	cbz	r4, 8009b24 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b18:	4b11      	ldr	r3, [pc, #68]	; (8009b60 <prvProcessTimerOrBlockTask+0x68>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	fab4 f484 	clz	r4, r4
 8009b22:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b24:	4622      	mov	r2, r4
 8009b26:	1b71      	subs	r1, r6, r5
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <prvProcessTimerOrBlockTask+0x6c>)
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	f7ff f810 	bl	8008b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b30:	f7ff fb44 	bl	80091bc <xTaskResumeAll>
 8009b34:	b988      	cbnz	r0, 8009b5a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvProcessTimerOrBlockTask+0x70>)
 8009b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	e008      	b.n	8009b5a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 8009b48:	f7ff fb38 	bl	80091bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f7ff ffa2 	bl	8009a98 <prvProcessExpiredTimer>
 8009b54:	e001      	b.n	8009b5a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 8009b56:	f7ff fb31 	bl	80091bc <xTaskResumeAll>
}
 8009b5a:	b002      	add	sp, #8
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000e58 	.word	0x20000e58
 8009b64:	20000f78 	.word	0x20000f78
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <prvProcessReceivedCommands>:
{
 8009b6c:	b530      	push	{r4, r5, lr}
 8009b6e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b70:	e002      	b.n	8009b78 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da10      	bge.n	8009b9a <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b78:	2300      	movs	r3, #0
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	a904      	add	r1, sp, #16
 8009b7e:	4839      	ldr	r0, [pc, #228]	; (8009c64 <prvProcessReceivedCommands+0xf8>)
 8009b80:	6800      	ldr	r0, [r0, #0]
 8009b82:	f7fe fed7 	bl	8008934 <xQueueGenericReceive>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d069      	beq.n	8009c5e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	daf0      	bge.n	8009b72 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b90:	9907      	ldr	r1, [sp, #28]
 8009b92:	9806      	ldr	r0, [sp, #24]
 8009b94:	9b05      	ldr	r3, [sp, #20]
 8009b96:	4798      	blx	r3
 8009b98:	e7eb      	b.n	8009b72 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b9a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009b9c:	6963      	ldr	r3, [r4, #20]
 8009b9e:	b113      	cbz	r3, 8009ba6 <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ba0:	1d20      	adds	r0, r4, #4
 8009ba2:	f7fe fc08 	bl	80083b6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ba6:	a803      	add	r0, sp, #12
 8009ba8:	f7ff ff60 	bl	8009a6c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d8e2      	bhi.n	8009b78 <prvProcessReceivedCommands+0xc>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <prvProcessReceivedCommands+0x4c>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009b79 	.word	0x08009b79
 8009bc8:	08009c29 	.word	0x08009c29
 8009bcc:	08009c4f 	.word	0x08009c4f
 8009bd0:	08009be1 	.word	0x08009be1
 8009bd4:	08009be1 	.word	0x08009be1
 8009bd8:	08009b79 	.word	0x08009b79
 8009bdc:	08009c29 	.word	0x08009c29
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009be0:	9905      	ldr	r1, [sp, #20]
 8009be2:	69a5      	ldr	r5, [r4, #24]
 8009be4:	460b      	mov	r3, r1
 8009be6:	4602      	mov	r2, r0
 8009be8:	4429      	add	r1, r5
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff fddc 	bl	80097a8 <prvInsertTimerInActiveList>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0c1      	beq.n	8009b78 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bfa:	69e3      	ldr	r3, [r4, #28]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d1bb      	bne.n	8009b78 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c00:	69a2      	ldr	r2, [r4, #24]
 8009c02:	2100      	movs	r1, #0
 8009c04:	9100      	str	r1, [sp, #0]
 8009c06:	460b      	mov	r3, r1
 8009c08:	9805      	ldr	r0, [sp, #20]
 8009c0a:	4402      	add	r2, r0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7ff febb 	bl	8009988 <xTimerGenericCommand>
							configASSERT( xResult );
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d1b0      	bne.n	8009b78 <prvProcessReceivedCommands+0xc>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	e7fe      	b.n	8009c26 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c28:	9905      	ldr	r1, [sp, #20]
 8009c2a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c2c:	b131      	cbz	r1, 8009c3c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4602      	mov	r2, r0
 8009c32:	4401      	add	r1, r0
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7ff fdb7 	bl	80097a8 <prvInsertTimerInActiveList>
					break;
 8009c3a:	e79d      	b.n	8009b78 <prvProcessReceivedCommands+0xc>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	e7fe      	b.n	8009c4c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c4e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d190      	bne.n	8009b78 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fa54 	bl	800a104 <vPortFree>
 8009c5c:	e78c      	b.n	8009b78 <prvProcessReceivedCommands+0xc>
}
 8009c5e:	b009      	add	sp, #36	; 0x24
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	20000f78 	.word	0x20000f78

08009c68 <prvTimerTask>:
{
 8009c68:	b500      	push	{lr}
 8009c6a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c6c:	a801      	add	r0, sp, #4
 8009c6e:	f7ff fd8b 	bl	8009788 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c72:	9901      	ldr	r1, [sp, #4]
 8009c74:	f7ff ff40 	bl	8009af8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009c78:	f7ff ff78 	bl	8009b6c <prvProcessReceivedCommands>
 8009c7c:	e7f6      	b.n	8009c6c <prvTimerTask+0x4>
	...

08009c80 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <prvTaskExitError+0x30>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c88:	d008      	beq.n	8009c9c <prvTaskExitError+0x1c>
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	e7fe      	b.n	8009c9a <prvTaskExitError+0x1a>
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	e7fe      	b.n	8009cac <prvTaskExitError+0x2c>
 8009cae:	bf00      	nop
 8009cb0:	200000b0 	.word	0x200000b0

08009cb4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009cb4:	4806      	ldr	r0, [pc, #24]	; (8009cd0 <prvPortStartFirstTask+0x1c>)
 8009cb6:	6800      	ldr	r0, [r0, #0]
 8009cb8:	6800      	ldr	r0, [r0, #0]
 8009cba:	f380 8808 	msr	MSP, r0
 8009cbe:	b662      	cpsie	i
 8009cc0:	b661      	cpsie	f
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	df00      	svc	0
 8009ccc:	bf00      	nop
 8009cce:	0000      	.short	0x0000
 8009cd0:	e000ed08 	.word	0xe000ed08

08009cd4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cd8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cdc:	f021 0101 	bic.w	r1, r1, #1
 8009ce0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ce4:	4b03      	ldr	r3, [pc, #12]	; (8009cf4 <pxPortInitialiseStack+0x20>)
 8009ce6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cea:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009cee:	3840      	subs	r0, #64	; 0x40
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	08009c81 	.word	0x08009c81
	...

08009d00 <SVC_Handler>:
	__asm volatile (
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <pxCurrentTCBConst2>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d0a:	f380 8809 	msr	PSP, r0
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8811 	msr	BASEPRI, r0
 8009d1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d1e:	4770      	bx	lr

08009d20 <pxCurrentTCBConst2>:
 8009d20:	20000d28 	.word	0x20000d28

08009d24 <vPortEnterCritical>:
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d34:	4a0a      	ldr	r2, [pc, #40]	; (8009d60 <vPortEnterCritical+0x3c>)
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d000      	beq.n	8009d42 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009d40:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d42:	4b08      	ldr	r3, [pc, #32]	; (8009d64 <vPortEnterCritical+0x40>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d4a:	d0f9      	beq.n	8009d40 <vPortEnterCritical+0x1c>
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	e7fe      	b.n	8009d5c <vPortEnterCritical+0x38>
 8009d5e:	bf00      	nop
 8009d60:	200000b0 	.word	0x200000b0
 8009d64:	e000ed04 	.word	0xe000ed04

08009d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009d68:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <vPortExitCritical+0x28>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	b943      	cbnz	r3, 8009d80 <vPortExitCritical+0x18>
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	e7fe      	b.n	8009d7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009d80:	3b01      	subs	r3, #1
 8009d82:	4a03      	ldr	r2, [pc, #12]	; (8009d90 <vPortExitCritical+0x28>)
 8009d84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d86:	b90b      	cbnz	r3, 8009d8c <vPortExitCritical+0x24>
	__asm volatile
 8009d88:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	200000b0 	.word	0x200000b0
	...

08009da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009da0:	f3ef 8009 	mrs	r0, PSP
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <pxCurrentTCBConst>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009db0:	6010      	str	r0, [r2, #0]
 8009db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009db6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dba:	f380 8811 	msr	BASEPRI, r0
 8009dbe:	f7ff fadf 	bl	8009380 <vTaskSwitchContext>
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8811 	msr	BASEPRI, r0
 8009dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dd6:	f380 8809 	msr	PSP, r0
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	4770      	bx	lr

08009de0 <pxCurrentTCBConst>:
 8009de0:	20000d28 	.word	0x20000d28

08009de4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009de4:	b508      	push	{r3, lr}
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009df6:	f7ff f955 	bl	80090a4 <xTaskIncrementTick>
 8009dfa:	b118      	cbz	r0, 8009e04 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dfc:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <SysTick_Handler+0x28>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009e04:	2300      	movs	r3, #0
 8009e06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e0a:	bd08      	pop	{r3, pc}
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <vPortSetupTimerInterrupt+0x1c>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a06      	ldr	r2, [pc, #24]	; (8009e30 <vPortSetupTimerInterrupt+0x20>)
 8009e16:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1a:	099b      	lsrs	r3, r3, #6
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	4a05      	ldr	r2, [pc, #20]	; (8009e34 <vPortSetupTimerInterrupt+0x24>)
 8009e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e22:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <vPortSetupTimerInterrupt+0x28>)
 8009e24:	2207      	movs	r2, #7
 8009e26:	601a      	str	r2, [r3, #0]
}
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20000000 	.word	0x20000000
 8009e30:	10624dd3 	.word	0x10624dd3
 8009e34:	e000e014 	.word	0xe000e014
 8009e38:	e000e010 	.word	0xe000e010

08009e3c <xPortStartScheduler>:
{
 8009e3c:	b500      	push	{lr}
 8009e3e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e40:	4b1f      	ldr	r3, [pc, #124]	; (8009ec0 <xPortStartScheduler+0x84>)
 8009e42:	781a      	ldrb	r2, [r3, #0]
 8009e44:	b2d2      	uxtb	r2, r2
 8009e46:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e48:	22ff      	movs	r2, #255	; 0xff
 8009e4a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e5c:	4a19      	ldr	r2, [pc, #100]	; (8009ec4 <xPortStartScheduler+0x88>)
 8009e5e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e60:	4b19      	ldr	r3, [pc, #100]	; (8009ec8 <xPortStartScheduler+0x8c>)
 8009e62:	2207      	movs	r2, #7
 8009e64:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e66:	e009      	b.n	8009e7c <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8009e68:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xPortStartScheduler+0x8c>)
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e84:	d1f0      	bne.n	8009e68 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e86:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <xPortStartScheduler+0x8c>)
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e90:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e92:	9b01      	ldr	r3, [sp, #4]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	4a0a      	ldr	r2, [pc, #40]	; (8009ec0 <xPortStartScheduler+0x84>)
 8009e98:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <xPortStartScheduler+0x90>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009ea2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009eaa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009eac:	f7ff ffb0 	bl	8009e10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009eb0:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <xPortStartScheduler+0x94>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8009eb6:	f7ff fefd 	bl	8009cb4 <prvPortStartFirstTask>
	prvTaskExitError();
 8009eba:	f7ff fee1 	bl	8009c80 <prvTaskExitError>
 8009ebe:	bf00      	nop
 8009ec0:	e000e400 	.word	0xe000e400
 8009ec4:	20000f80 	.word	0x20000f80
 8009ec8:	20000f84 	.word	0x20000f84
 8009ecc:	e000ed20 	.word	0xe000ed20
 8009ed0:	200000b0 	.word	0x200000b0

08009ed4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8009ed4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ed8:	2b0f      	cmp	r3, #15
 8009eda:	d90f      	bls.n	8009efc <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009edc:	4a10      	ldr	r2, [pc, #64]	; (8009f20 <vPortValidateInterruptPriority+0x4c>)
 8009ede:	5c9b      	ldrb	r3, [r3, r2]
 8009ee0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ee2:	4a10      	ldr	r2, [pc, #64]	; (8009f24 <vPortValidateInterruptPriority+0x50>)
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d908      	bls.n	8009efc <vPortValidateInterruptPriority+0x28>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	e7fe      	b.n	8009efa <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <vPortValidateInterruptPriority+0x54>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f04:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <vPortValidateInterruptPriority+0x58>)
 8009f06:	6812      	ldr	r2, [r2, #0]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d908      	bls.n	8009f1e <vPortValidateInterruptPriority+0x4a>
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	e7fe      	b.n	8009f1c <vPortValidateInterruptPriority+0x48>
	}
 8009f1e:	4770      	bx	lr
 8009f20:	e000e3f0 	.word	0xe000e3f0
 8009f24:	20000f80 	.word	0x20000f80
 8009f28:	e000ed0c 	.word	0xe000ed0c
 8009f2c:	20000f84 	.word	0x20000f84

08009f30 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f30:	4a12      	ldr	r2, [pc, #72]	; (8009f7c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f32:	f012 0f07 	tst.w	r2, #7
 8009f36:	d01e      	beq.n	8009f76 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f38:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f3a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f3e:	f5c1 5320 	rsb	r3, r1, #10240	; 0x2800
 8009f42:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f44:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f46:	480e      	ldr	r0, [pc, #56]	; (8009f80 <prvHeapInit+0x50>)
 8009f48:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f4e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009f50:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f52:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009f56:	480b      	ldr	r0, [pc, #44]	; (8009f84 <prvHeapInit+0x54>)
 8009f58:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009f5a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f5c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f5e:	1a99      	subs	r1, r3, r2
 8009f60:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f62:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f64:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <prvHeapInit+0x58>)
 8009f66:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f68:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <prvHeapInit+0x5c>)
 8009f6a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <prvHeapInit+0x60>)
 8009f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009f7a:	e7e4      	b.n	8009f46 <prvHeapInit+0x16>
 8009f7c:	20000f8c 	.word	0x20000f8c
 8009f80:	20003798 	.word	0x20003798
 8009f84:	20000f88 	.word	0x20000f88
 8009f88:	20003794 	.word	0x20003794
 8009f8c:	20003790 	.word	0x20003790
 8009f90:	2000378c 	.word	0x2000378c

08009f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f94:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f96:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <prvInsertBlockIntoFreeList+0x4c>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4282      	cmp	r2, r0
 8009f9c:	d31a      	bcc.n	8009fd4 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f9e:	6859      	ldr	r1, [r3, #4]
 8009fa0:	185c      	adds	r4, r3, r1
 8009fa2:	4284      	cmp	r4, r0
 8009fa4:	d103      	bne.n	8009fae <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fa6:	6840      	ldr	r0, [r0, #4]
 8009fa8:	4401      	add	r1, r0
 8009faa:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fac:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fae:	6841      	ldr	r1, [r0, #4]
 8009fb0:	1844      	adds	r4, r0, r1
 8009fb2:	42a2      	cmp	r2, r4
 8009fb4:	d112      	bne.n	8009fdc <prvInsertBlockIntoFreeList+0x48>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fb6:	4c0b      	ldr	r4, [pc, #44]	; (8009fe4 <prvInsertBlockIntoFreeList+0x50>)
 8009fb8:	6824      	ldr	r4, [r4, #0]
 8009fba:	42a2      	cmp	r2, r4
 8009fbc:	d00c      	beq.n	8009fd8 <prvInsertBlockIntoFreeList+0x44>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fbe:	6852      	ldr	r2, [r2, #4]
 8009fc0:	4411      	add	r1, r2
 8009fc2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	6812      	ldr	r2, [r2, #0]
 8009fc8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fca:	4298      	cmp	r0, r3
 8009fcc:	d000      	beq.n	8009fd0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fce:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd0:	bc10      	pop	{r4}
 8009fd2:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	e7df      	b.n	8009f98 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fd8:	6004      	str	r4, [r0, #0]
 8009fda:	e7f6      	b.n	8009fca <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fdc:	6002      	str	r2, [r0, #0]
 8009fde:	e7f4      	b.n	8009fca <prvInsertBlockIntoFreeList+0x36>
 8009fe0:	20003798 	.word	0x20003798
 8009fe4:	20000f88 	.word	0x20000f88

08009fe8 <pvPortMalloc>:
{
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009fec:	f7ff f84c 	bl	8009088 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009ff0:	4b3f      	ldr	r3, [pc, #252]	; (800a0f0 <pvPortMalloc+0x108>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	b1a3      	cbz	r3, 800a020 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ff6:	4b3f      	ldr	r3, [pc, #252]	; (800a0f4 <pvPortMalloc+0x10c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	421c      	tst	r4, r3
 8009ffc:	d013      	beq.n	800a026 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 8009ffe:	f7ff f8dd 	bl	80091bc <xTaskResumeAll>
void *pvReturn = NULL;
 800a002:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800a004:	f7f6 fca9 	bl	800095a <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a008:	f016 0f07 	tst.w	r6, #7
 800a00c:	d06e      	beq.n	800a0ec <pvPortMalloc+0x104>
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	e7fe      	b.n	800a01e <pvPortMalloc+0x36>
			prvHeapInit();
 800a020:	f7ff ff86 	bl	8009f30 <prvHeapInit>
 800a024:	e7e7      	b.n	8009ff6 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 800a026:	b194      	cbz	r4, 800a04e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 800a028:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a02a:	f014 0f07 	tst.w	r4, #7
 800a02e:	d00e      	beq.n	800a04e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a030:	f024 0407 	bic.w	r4, r4, #7
 800a034:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a036:	f004 0307 	and.w	r3, r4, #7
 800a03a:	b143      	cbz	r3, 800a04e <pvPortMalloc+0x66>
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	e7fe      	b.n	800a04c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a04e:	b134      	cbz	r4, 800a05e <pvPortMalloc+0x76>
 800a050:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <pvPortMalloc+0x110>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	42a3      	cmp	r3, r4
 800a056:	d306      	bcc.n	800a066 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 800a058:	4b28      	ldr	r3, [pc, #160]	; (800a0fc <pvPortMalloc+0x114>)
 800a05a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a05c:	e009      	b.n	800a072 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800a05e:	f7ff f8ad 	bl	80091bc <xTaskResumeAll>
void *pvReturn = NULL;
 800a062:	2600      	movs	r6, #0
 800a064:	e7ce      	b.n	800a004 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 800a066:	f7ff f8a9 	bl	80091bc <xTaskResumeAll>
void *pvReturn = NULL;
 800a06a:	2600      	movs	r6, #0
 800a06c:	e7ca      	b.n	800a004 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 800a06e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a070:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a072:	686a      	ldr	r2, [r5, #4]
 800a074:	42a2      	cmp	r2, r4
 800a076:	d202      	bcs.n	800a07e <pvPortMalloc+0x96>
 800a078:	682a      	ldr	r2, [r5, #0]
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	d1f7      	bne.n	800a06e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 800a07e:	4a1c      	ldr	r2, [pc, #112]	; (800a0f0 <pvPortMalloc+0x108>)
 800a080:	6812      	ldr	r2, [r2, #0]
 800a082:	42aa      	cmp	r2, r5
 800a084:	d014      	beq.n	800a0b0 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a086:	681e      	ldr	r6, [r3, #0]
 800a088:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a08a:	682a      	ldr	r2, [r5, #0]
 800a08c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a08e:	686b      	ldr	r3, [r5, #4]
 800a090:	1b1b      	subs	r3, r3, r4
 800a092:	2b10      	cmp	r3, #16
 800a094:	d914      	bls.n	800a0c0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a096:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a098:	f010 0f07 	tst.w	r0, #7
 800a09c:	d00c      	beq.n	800a0b8 <pvPortMalloc+0xd0>
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	e7fe      	b.n	800a0ae <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 800a0b0:	f7ff f884 	bl	80091bc <xTaskResumeAll>
void *pvReturn = NULL;
 800a0b4:	2600      	movs	r6, #0
 800a0b6:	e7a5      	b.n	800a004 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0ba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0bc:	f7ff ff6a 	bl	8009f94 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0c0:	686a      	ldr	r2, [r5, #4]
 800a0c2:	490d      	ldr	r1, [pc, #52]	; (800a0f8 <pvPortMalloc+0x110>)
 800a0c4:	680b      	ldr	r3, [r1, #0]
 800a0c6:	1a9b      	subs	r3, r3, r2
 800a0c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0ca:	490d      	ldr	r1, [pc, #52]	; (800a100 <pvPortMalloc+0x118>)
 800a0cc:	6809      	ldr	r1, [r1, #0]
 800a0ce:	428b      	cmp	r3, r1
 800a0d0:	d201      	bcs.n	800a0d6 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0d2:	490b      	ldr	r1, [pc, #44]	; (800a100 <pvPortMalloc+0x118>)
 800a0d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0d6:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <pvPortMalloc+0x10c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a0e2:	f7ff f86b 	bl	80091bc <xTaskResumeAll>
		if( pvReturn == NULL )
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	d18e      	bne.n	800a008 <pvPortMalloc+0x20>
 800a0ea:	e78b      	b.n	800a004 <pvPortMalloc+0x1c>
}
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	20000f88 	.word	0x20000f88
 800a0f4:	2000378c 	.word	0x2000378c
 800a0f8:	20003790 	.word	0x20003790
 800a0fc:	20003798 	.word	0x20003798
 800a100:	20003794 	.word	0x20003794

0800a104 <vPortFree>:
	if( pv != NULL )
 800a104:	b380      	cbz	r0, 800a168 <vPortFree+0x64>
{
 800a106:	b538      	push	{r3, r4, r5, lr}
 800a108:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a10a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a10e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a112:	4916      	ldr	r1, [pc, #88]	; (800a16c <vPortFree+0x68>)
 800a114:	6809      	ldr	r1, [r1, #0]
 800a116:	420a      	tst	r2, r1
 800a118:	d108      	bne.n	800a12c <vPortFree+0x28>
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	e7fe      	b.n	800a12a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a12c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800a130:	b140      	cbz	r0, 800a144 <vPortFree+0x40>
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	e7fe      	b.n	800a142 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a144:	ea22 0201 	bic.w	r2, r2, r1
 800a148:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800a14c:	f7fe ff9c 	bl	8009088 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a150:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a154:	4a06      	ldr	r2, [pc, #24]	; (800a170 <vPortFree+0x6c>)
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	440b      	add	r3, r1
 800a15a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a15c:	4628      	mov	r0, r5
 800a15e:	f7ff ff19 	bl	8009f94 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a162:	f7ff f82b 	bl	80091bc <xTaskResumeAll>
}
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	2000378c 	.word	0x2000378c
 800a170:	20003790 	.word	0x20003790

0800a174 <lfs_alloc_lookahead>:
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
 800a174:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a176:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800a178:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a17a:	6a1a      	ldr	r2, [r3, #32]
 800a17c:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
 800a17e:	fbb1 f3f2 	udiv	r3, r1, r2
 800a182:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 800a186:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a188:	428b      	cmp	r3, r1
 800a18a:	d90b      	bls.n	800a1a4 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800a18c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a18e:	0948      	lsrs	r0, r1, #5
 800a190:	f001 011f 	and.w	r1, r1, #31
 800a194:	2301      	movs	r3, #1
 800a196:	fa03 f101 	lsl.w	r1, r3, r1
 800a19a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    }

    return 0;
}
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	4770      	bx	lr

0800a1a8 <lfs_alloc_ack>:
        }
    }
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
 800a1a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	6603      	str	r3, [r0, #96]	; 0x60
}
 800a1ae:	4770      	bx	lr

0800a1b0 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800a1b0:	b410      	push	{r4}
    lfs_tag_t *filtertag = p;
    (void)buffer;

    // check for redundancy
    uint32_t mask = LFS_MKTAG(0x7ff, 0x3ff, 0);
    if ((mask & tag) == (mask & *filtertag) ||
 800a1b2:	6802      	ldr	r2, [r0, #0]
 800a1b4:	ea82 0401 	eor.w	r4, r2, r1
 800a1b8:	4b13      	ldr	r3, [pc, #76]	; (800a208 <lfs_dir_traverse_filter+0x58>)
 800a1ba:	4023      	ands	r3, r4
 800a1bc:	b1eb      	cbz	r3, 800a1fa <lfs_dir_traverse_filter+0x4a>
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a1be:	4c12      	ldr	r4, [pc, #72]	; (800a208 <lfs_dir_traverse_filter+0x58>)
 800a1c0:	400c      	ands	r4, r1
            (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <lfs_dir_traverse_filter+0x5c>)
 800a1c4:	4013      	ands	r3, r2
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a1c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a1ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    if ((mask & tag) == (mask & *filtertag) ||
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d016      	beq.n	800a200 <lfs_dir_traverse_filter+0x50>
    return (tag & 0x70000000) >> 20;
 800a1d2:	0d0b      	lsrs	r3, r1, #20
 800a1d4:	f403 64e0 	and.w	r4, r3, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a1d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a1dc:	d001      	beq.n	800a1e2 <lfs_dir_traverse_filter+0x32>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e00c      	b.n	800a1fc <lfs_dir_traverse_filter+0x4c>
    return (tag & 0x000ffc00) >> 10;
 800a1e2:	f3c1 2189 	ubfx	r1, r1, #10, #10
 800a1e6:	f3c2 2489 	ubfx	r4, r2, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a1ea:	428c      	cmp	r4, r1
 800a1ec:	d30a      	bcc.n	800a204 <lfs_dir_traverse_filter+0x54>
    return (int8_t)lfs_tag_chunk(tag);
 800a1ee:	b25b      	sxtb	r3, r3
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a1f0:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 800a1f4:	6002      	str	r2, [r0, #0]
    return false;
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e000      	b.n	800a1fc <lfs_dir_traverse_filter+0x4c>
        return true;
 800a1fa:	2001      	movs	r0, #1
}
 800a1fc:	bc10      	pop	{r4}
 800a1fe:	4770      	bx	lr
        return true;
 800a200:	2001      	movs	r0, #1
 800a202:	e7fb      	b.n	800a1fc <lfs_dir_traverse_filter+0x4c>
    return false;
 800a204:	2000      	movs	r0, #0
 800a206:	e7f9      	b.n	800a1fc <lfs_dir_traverse_filter+0x4c>
 800a208:	7ffffc00 	.word	0x7ffffc00
 800a20c:	000ffc00 	.word	0x000ffc00

0800a210 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a210:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a218:	bf08      	it	eq
 800a21a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 800a21c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a220:	3104      	adds	r1, #4

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800a222:	6803      	ldr	r3, [r0, #0]
 800a224:	4419      	add	r1, r3
 800a226:	6001      	str	r1, [r0, #0]
    return 0;
}
 800a228:	2000      	movs	r0, #0
 800a22a:	4770      	bx	lr

0800a22c <lfs_fs_preporphans>:

    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    lfs->gpending.tag += orphans;
 800a22c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a22e:	4419      	add	r1, r3
    return tag & 0x000003ff;
 800a230:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 800a234:	3300      	adds	r3, #0
 800a236:	bf18      	it	ne
 800a238:	2301      	movne	r3, #1
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ (orphans << 31));
 800a23a:	ea81 73c3 	eor.w	r3, r1, r3, lsl #31
 800a23e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a242:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800a244:	405a      	eors	r2, r3
 800a246:	6482      	str	r2, [r0, #72]	; 0x48
 800a248:	4059      	eors	r1, r3
 800a24a:	63c1      	str	r1, [r0, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
}
 800a24c:	4770      	bx	lr

0800a24e <lfs_fs_size_count>:
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 800a24e:	6803      	ldr	r3, [r0, #0]
 800a250:	3301      	adds	r3, #1
 800a252:	6003      	str	r3, [r0, #0]
    return 0;
}
 800a254:	2000      	movs	r0, #0
 800a256:	4770      	bx	lr

0800a258 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800a258:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 800a25a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a25c:	6a03      	ldr	r3, [r0, #32]
 800a25e:	428b      	cmp	r3, r1
 800a260:	d902      	bls.n	800a268 <lfs_bd_erase+0x10>
    return lfs->cfg->erase(lfs->cfg, block);
 800a262:	68c3      	ldr	r3, [r0, #12]
 800a264:	4798      	blx	r3
}
 800a266:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->cfg->block_count);
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <lfs_bd_erase+0x1c>)
 800a26a:	4a03      	ldr	r2, [pc, #12]	; (800a278 <lfs_bd_erase+0x20>)
 800a26c:	21dc      	movs	r1, #220	; 0xdc
 800a26e:	4803      	ldr	r0, [pc, #12]	; (800a27c <lfs_bd_erase+0x24>)
 800a270:	f003 fba2 	bl	800d9b8 <__assert_func>
 800a274:	0800f468 	.word	0x0800f468
 800a278:	0800f3b0 	.word	0x0800f3b0
 800a27c:	0800f430 	.word	0x0800f430

0800a280 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b083      	sub	sp, #12
 800a286:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a288:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a28a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 800a28e:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a292:	d00c      	beq.n	800a2ae <lfs_bd_read+0x2e>
 800a294:	4607      	mov	r7, r0
 800a296:	468a      	mov	sl, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	469b      	mov	fp, r3
    if (off+size > lfs->cfg->block_size) {
 800a29c:	eb05 0309 	add.w	r3, r5, r9
 800a2a0:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a2a2:	69d2      	ldr	r2, [r2, #28]
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d95a      	bls.n	800a35e <lfs_bd_read+0xde>
        return LFS_ERR_CORRUPT;
 800a2a8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a2ac:	e087      	b.n	800a3be <lfs_bd_read+0x13e>
    LFS_ASSERT(block != 0xffffffff);
 800a2ae:	4b46      	ldr	r3, [pc, #280]	; (800a3c8 <lfs_bd_read+0x148>)
 800a2b0:	4a46      	ldr	r2, [pc, #280]	; (800a3cc <lfs_bd_read+0x14c>)
 800a2b2:	2129      	movs	r1, #41	; 0x29
 800a2b4:	4846      	ldr	r0, [pc, #280]	; (800a3d0 <lfs_bd_read+0x150>)
 800a2b6:	f003 fb7f 	bl	800d9b8 <__assert_func>
                off < pcache->off + pcache->size) {
 800a2ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a2be:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a2c2:	18ca      	adds	r2, r1, r3
        if (pcache && block == pcache->block &&
 800a2c4:	42aa      	cmp	r2, r5
 800a2c6:	d956      	bls.n	800a376 <lfs_bd_read+0xf6>
            if (off >= pcache->off) {
 800a2c8:	42a9      	cmp	r1, r5
 800a2ca:	d904      	bls.n	800a2d6 <lfs_bd_read+0x56>
            diff = lfs_min(diff, pcache->off-off);
 800a2cc:	1b49      	subs	r1, r1, r5
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
 800a2ce:	4549      	cmp	r1, r9
 800a2d0:	bf28      	it	cs
 800a2d2:	4649      	movcs	r1, r9
 800a2d4:	e015      	b.n	800a302 <lfs_bd_read+0x82>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a2d6:	eba1 0805 	sub.w	r8, r1, r5
 800a2da:	4498      	add	r8, r3
 800a2dc:	45c8      	cmp	r8, r9
 800a2de:	bf28      	it	cs
 800a2e0:	46c8      	movcs	r8, r9
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a2e2:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a2e6:	1a69      	subs	r1, r5, r1
 800a2e8:	4642      	mov	r2, r8
 800a2ea:	4419      	add	r1, r3
 800a2ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a2ee:	f003 fbd6 	bl	800da9e <memcpy>
                data += diff;
 800a2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f4:	4443      	add	r3, r8
 800a2f6:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 800a2f8:	4445      	add	r5, r8
                size -= diff;
 800a2fa:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 800a2fe:	e02e      	b.n	800a35e <lfs_bd_read+0xde>
        lfs_size_t diff = size;
 800a300:	4649      	mov	r1, r9
        if (block == rcache->block &&
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	42b3      	cmp	r3, r6
 800a306:	d038      	beq.n	800a37a <lfs_bd_read+0xfa>
        LFS_ASSERT(block < lfs->cfg->block_count);
 800a308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	d94f      	bls.n	800a3b0 <lfs_bd_read+0x130>
        rcache->block = block;
 800a310:	6026      	str	r6, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a314:	695b      	ldr	r3, [r3, #20]
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
 800a316:	fbb5 f2f3 	udiv	r2, r5, r3
 800a31a:	fb03 5212 	mls	r2, r3, r2, r5
 800a31e:	1aaa      	subs	r2, r5, r2
 800a320:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a322:	eb05 030b 	add.w	r3, r5, fp
 800a326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a328:	6948      	ldr	r0, [r1, #20]
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
 800a32a:	4403      	add	r3, r0
 800a32c:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800a32e:	fbb3 fcf0 	udiv	ip, r3, r0
 800a332:	fb00 301c 	mls	r0, r0, ip, r3
 800a336:	1a1b      	subs	r3, r3, r0
                lfs_min(lfs->cfg->block_size - rcache->off,
 800a338:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a33a:	1a80      	subs	r0, r0, r2
 800a33c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
 800a33e:	4288      	cmp	r0, r1
 800a340:	bf28      	it	cs
 800a342:	4608      	movcs	r0, r1
 800a344:	4283      	cmp	r3, r0
 800a346:	bf28      	it	cs
 800a348:	4603      	movcs	r3, r0
 800a34a:	60a3      	str	r3, [r4, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800a34c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a34e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	68e3      	ldr	r3, [r4, #12]
 800a356:	4631      	mov	r1, r6
 800a358:	47c0      	blx	r8
        if (err) {
 800a35a:	4603      	mov	r3, r0
 800a35c:	bb78      	cbnz	r0, 800a3be <lfs_bd_read+0x13e>
    while (size > 0) {
 800a35e:	f1b9 0f00 	cmp.w	r9, #0
 800a362:	d02b      	beq.n	800a3bc <lfs_bd_read+0x13c>
        if (pcache && block == pcache->block &&
 800a364:	f1ba 0f00 	cmp.w	sl, #0
 800a368:	d0ca      	beq.n	800a300 <lfs_bd_read+0x80>
 800a36a:	f8da 3000 	ldr.w	r3, [sl]
 800a36e:	42b3      	cmp	r3, r6
 800a370:	d0a3      	beq.n	800a2ba <lfs_bd_read+0x3a>
        lfs_size_t diff = size;
 800a372:	4649      	mov	r1, r9
 800a374:	e7c5      	b.n	800a302 <lfs_bd_read+0x82>
 800a376:	4649      	mov	r1, r9
 800a378:	e7c3      	b.n	800a302 <lfs_bd_read+0x82>
                off < rcache->off + rcache->size) {
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	68a2      	ldr	r2, [r4, #8]
 800a37e:	1898      	adds	r0, r3, r2
        if (block == rcache->block &&
 800a380:	42a8      	cmp	r0, r5
 800a382:	d9c1      	bls.n	800a308 <lfs_bd_read+0x88>
            if (off >= rcache->off) {
 800a384:	42ab      	cmp	r3, r5
 800a386:	d8bf      	bhi.n	800a308 <lfs_bd_read+0x88>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a388:	eba3 0805 	sub.w	r8, r3, r5
 800a38c:	4490      	add	r8, r2
 800a38e:	4588      	cmp	r8, r1
 800a390:	bf28      	it	cs
 800a392:	4688      	movcs	r8, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a394:	68e1      	ldr	r1, [r4, #12]
 800a396:	1aeb      	subs	r3, r5, r3
 800a398:	4642      	mov	r2, r8
 800a39a:	4419      	add	r1, r3
 800a39c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a39e:	f003 fb7e 	bl	800da9e <memcpy>
                data += diff;
 800a3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a4:	4443      	add	r3, r8
 800a3a6:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 800a3a8:	4445      	add	r5, r8
                size -= diff;
 800a3aa:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 800a3ae:	e7d6      	b.n	800a35e <lfs_bd_read+0xde>
        LFS_ASSERT(block < lfs->cfg->block_count);
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <lfs_bd_read+0x154>)
 800a3b2:	4a06      	ldr	r2, [pc, #24]	; (800a3cc <lfs_bd_read+0x14c>)
 800a3b4:	2154      	movs	r1, #84	; 0x54
 800a3b6:	4806      	ldr	r0, [pc, #24]	; (800a3d0 <lfs_bd_read+0x150>)
 800a3b8:	f003 fafe 	bl	800d9b8 <__assert_func>
    return 0;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	b003      	add	sp, #12
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800f4c8 	.word	0x0800f4c8
 800a3cc:	0800f388 	.word	0x0800f388
 800a3d0:	0800f430 	.word	0x0800f430
 800a3d4:	0800f468 	.word	0x0800f468

0800a3d8 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 800a3d8:	b530      	push	{r4, r5, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 800a3de:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a3e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	6852      	ldr	r2, [r2, #4]
 800a3e8:	2508      	movs	r5, #8
 800a3ea:	9503      	str	r5, [sp, #12]
 800a3ec:	ad04      	add	r5, sp, #16
 800a3ee:	9502      	str	r5, [sp, #8]
 800a3f0:	9201      	str	r2, [sp, #4]
 800a3f2:	9100      	str	r1, [sp, #0]
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f100 0110 	add.w	r1, r0, #16
 800a3fa:	f7ff ff41 	bl	800a280 <lfs_bd_read>
    if (err) {
 800a3fe:	4603      	mov	r3, r0
 800a400:	b978      	cbnz	r0, 800a422 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	6861      	ldr	r1, [r4, #4]
 800a406:	4291      	cmp	r1, r2
 800a408:	d008      	beq.n	800a41c <lfs_fs_parent_match+0x44>
 800a40a:	9d05      	ldr	r5, [sp, #20]
 800a40c:	68a0      	ldr	r0, [r4, #8]
 800a40e:	4285      	cmp	r5, r0
 800a410:	d004      	beq.n	800a41c <lfs_fs_parent_match+0x44>
 800a412:	4282      	cmp	r2, r0
 800a414:	d002      	beq.n	800a41c <lfs_fs_parent_match+0x44>
 800a416:	42a9      	cmp	r1, r5
 800a418:	d000      	beq.n	800a41c <lfs_fs_parent_match+0x44>
 800a41a:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800a41c:	3300      	adds	r3, #0
 800a41e:	bf18      	it	ne
 800a420:	2301      	movne	r3, #1
}
 800a422:	4618      	mov	r0, r3
 800a424:	b007      	add	sp, #28
 800a426:	bd30      	pop	{r4, r5, pc}

0800a428 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	b089      	sub	sp, #36	; 0x24
 800a42e:	4682      	mov	sl, r0
 800a430:	4689      	mov	r9, r1
 800a432:	9205      	str	r2, [sp, #20]
 800a434:	4698      	mov	r8, r3
 800a436:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a438:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a43a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800a43e:	9d15      	ldr	r5, [sp, #84]	; 0x54
    for (lfs_off_t i = 0; i < size; i++) {
 800a440:	2400      	movs	r4, #0
 800a442:	42ac      	cmp	r4, r5
 800a444:	d21d      	bcs.n	800a482 <lfs_bd_cmp+0x5a>
        int err = lfs_bd_read(lfs,
 800a446:	19a3      	adds	r3, r4, r6
 800a448:	2201      	movs	r2, #1
 800a44a:	9203      	str	r2, [sp, #12]
 800a44c:	f10d 021f 	add.w	r2, sp, #31
 800a450:	9202      	str	r2, [sp, #8]
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	9700      	str	r7, [sp, #0]
 800a456:	eba8 0304 	sub.w	r3, r8, r4
 800a45a:	9a05      	ldr	r2, [sp, #20]
 800a45c:	4649      	mov	r1, r9
 800a45e:	4650      	mov	r0, sl
 800a460:	f7ff ff0e 	bl	800a280 <lfs_bd_read>
        if (err) {
 800a464:	4603      	mov	r3, r0
 800a466:	b968      	cbnz	r0, 800a484 <lfs_bd_cmp+0x5c>
        if (dat != data[i]) {
 800a468:	f81b 2004 	ldrb.w	r2, [fp, r4]
 800a46c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a470:	429a      	cmp	r2, r3
 800a472:	d101      	bne.n	800a478 <lfs_bd_cmp+0x50>
    for (lfs_off_t i = 0; i < size; i++) {
 800a474:	3401      	adds	r4, #1
 800a476:	e7e4      	b.n	800a442 <lfs_bd_cmp+0x1a>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 800a478:	d801      	bhi.n	800a47e <lfs_bd_cmp+0x56>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e002      	b.n	800a484 <lfs_bd_cmp+0x5c>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <lfs_bd_cmp+0x5c>
    return LFS_CMP_EQ;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	b009      	add	sp, #36	; 0x24
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a48c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 800a48c:	b530      	push	{r4, r5, lr}
 800a48e:	b085      	sub	sp, #20
 800a490:	4604      	mov	r4, r0
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800a492:	6883      	ldr	r3, [r0, #8]
    return tag & 0x000003ff;
 800a494:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a498:	42ab      	cmp	r3, r5
 800a49a:	bf28      	it	cs
 800a49c:	462b      	movcs	r3, r5
    int res = lfs_bd_cmp(lfs,
 800a49e:	6811      	ldr	r1, [r2, #0]
 800a4a0:	6852      	ldr	r2, [r2, #4]
 800a4a2:	6840      	ldr	r0, [r0, #4]
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	9002      	str	r0, [sp, #8]
 800a4a8:	9201      	str	r2, [sp, #4]
 800a4aa:	9100      	str	r1, [sp, #0]
 800a4ac:	6822      	ldr	r2, [r4, #0]
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f7ff ffb9 	bl	800a428 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	b920      	cbnz	r0, 800a4c4 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 800a4ba:	68a2      	ldr	r2, [r4, #8]
 800a4bc:	42aa      	cmp	r2, r5
 800a4be:	d001      	beq.n	800a4c4 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a4c0:	d203      	bcs.n	800a4ca <lfs_dir_find_match+0x3e>
 800a4c2:	2301      	movs	r3, #1
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	b005      	add	sp, #20
 800a4c8:	bd30      	pop	{r4, r5, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e7fa      	b.n	800a4c4 <lfs_dir_find_match+0x38>
	...

0800a4d0 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	b095      	sub	sp, #84	; 0x54
 800a4d6:	4683      	mov	fp, r0
 800a4d8:	4688      	mov	r8, r1
 800a4da:	4615      	mov	r5, r2
 800a4dc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t revs[2] = {0, 0};
 800a4de:	2400      	movs	r4, #0
 800a4e0:	9410      	str	r4, [sp, #64]	; 0x40
 800a4e2:	9411      	str	r4, [sp, #68]	; 0x44
    for (int i = 0; i < 2; i++) {
 800a4e4:	4626      	mov	r6, r4
 800a4e6:	e000      	b.n	800a4ea <lfs_dir_fetchmatch+0x1a>
 800a4e8:	3601      	adds	r6, #1
 800a4ea:	2e01      	cmp	r6, #1
 800a4ec:	dc2a      	bgt.n	800a544 <lfs_dir_fetchmatch+0x74>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a4ee:	00b7      	lsls	r7, r6, #2
        int err = lfs_bd_read(lfs,
 800a4f0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a4f4:	ab10      	add	r3, sp, #64	; 0x40
 800a4f6:	19da      	adds	r2, r3, r7
        int err = lfs_bd_read(lfs,
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	9303      	str	r3, [sp, #12]
 800a4fc:	9202      	str	r2, [sp, #8]
 800a4fe:	2100      	movs	r1, #0
 800a500:	9101      	str	r1, [sp, #4]
 800a502:	9000      	str	r0, [sp, #0]
 800a504:	465a      	mov	r2, fp
 800a506:	4658      	mov	r0, fp
 800a508:	f7ff feba 	bl	800a280 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 800a50c:	ab14      	add	r3, sp, #80	; 0x50
 800a50e:	441f      	add	r7, r3
 800a510:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 800a514:	4603      	mov	r3, r0
 800a516:	b118      	cbz	r0, 800a520 <lfs_dir_fetchmatch+0x50>
 800a518:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a51c:	f040 823d 	bne.w	800a99a <lfs_dir_fetchmatch+0x4ca>
        if (err != LFS_ERR_CORRUPT &&
 800a520:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a524:	d0e0      	beq.n	800a4e8 <lfs_dir_fetchmatch+0x18>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a526:	1c73      	adds	r3, r6, #1
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	bf48      	it	mi
 800a52e:	425b      	negmi	r3, r3
 800a530:	a914      	add	r1, sp, #80	; 0x50
 800a532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a536:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
 800a53a:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	ddd3      	ble.n	800a4e8 <lfs_dir_fetchmatch+0x18>
            r = i;
 800a540:	4634      	mov	r4, r6
 800a542:	e7d1      	b.n	800a4e8 <lfs_dir_fetchmatch+0x18>
    dir->pair[0] = pair[(r+0)%2];
 800a544:	2c00      	cmp	r4, #0
 800a546:	f004 0301 	and.w	r3, r4, #1
 800a54a:	bfb8      	it	lt
 800a54c:	425b      	neglt	r3, r3
 800a54e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800a552:	f8c8 2000 	str.w	r2, [r8]
    dir->pair[1] = pair[(r+1)%2];
 800a556:	3401      	adds	r4, #1
 800a558:	f004 0401 	and.w	r4, r4, #1
 800a55c:	bf48      	it	mi
 800a55e:	4264      	negmi	r4, r4
 800a560:	940a      	str	r4, [sp, #40]	; 0x28
 800a562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a566:	f8c8 2004 	str.w	r2, [r8, #4]
    dir->rev = revs[(r+0)%2];
 800a56a:	aa14      	add	r2, sp, #80	; 0x50
 800a56c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a570:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a574:	f8c8 3008 	str.w	r3, [r8, #8]
    dir->off = 0; // nonzero = found some commits
 800a578:	2300      	movs	r3, #0
 800a57a:	f8c8 300c 	str.w	r3, [r8, #12]
    for (int i = 0; i < 2; i++) {
 800a57e:	4699      	mov	r9, r3
    lfs_stag_t besttag = -1;
 800a580:	f04f 33ff 	mov.w	r3, #4294967295
 800a584:	9308      	str	r3, [sp, #32]
    for (int i = 0; i < 2; i++) {
 800a586:	e04e      	b.n	800a626 <lfs_dir_fetchmatch+0x156>
                if (err == LFS_ERR_CORRUPT) {
 800a588:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a58c:	f040 819b 	bne.w	800a8c6 <lfs_dir_fetchmatch+0x3f6>
                    dir->erased = false;
 800a590:	2300      	movs	r3, #0
 800a592:	f888 3016 	strb.w	r3, [r8, #22]
                    break;
 800a596:	e02f      	b.n	800a5f8 <lfs_dir_fetchmatch+0x128>
    return (tag & 0x70000000) >> 20;
 800a598:	0d2b      	lsrs	r3, r5, #20
 800a59a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a59e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a5a2:	d005      	beq.n	800a5b0 <lfs_dir_fetchmatch+0xe0>
 800a5a4:	9b06      	ldr	r3, [sp, #24]
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	f888 3016 	strb.w	r3, [r8, #22]
                break;
 800a5ae:	e023      	b.n	800a5f8 <lfs_dir_fetchmatch+0x128>
                        dir->off % lfs->cfg->prog_size == 0);
 800a5b0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a5b4:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	fbb1 f3f2 	udiv	r3, r1, r2
 800a5be:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1ee      	bne.n	800a5a4 <lfs_dir_fetchmatch+0xd4>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	9306      	str	r3, [sp, #24]
 800a5ca:	e7eb      	b.n	800a5a4 <lfs_dir_fetchmatch+0xd4>
                err = lfs_bd_read(lfs,
 800a5cc:	f8d8 2000 	ldr.w	r2, [r8]
 800a5d0:	1d39      	adds	r1, r7, #4
 800a5d2:	2004      	movs	r0, #4
 800a5d4:	9003      	str	r0, [sp, #12]
 800a5d6:	a80d      	add	r0, sp, #52	; 0x34
 800a5d8:	9002      	str	r0, [sp, #8]
 800a5da:	9101      	str	r1, [sp, #4]
 800a5dc:	9200      	str	r2, [sp, #0]
 800a5de:	465a      	mov	r2, fp
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f7ff fe4c 	bl	800a280 <lfs_bd_read>
                if (err) {
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d138      	bne.n	800a65e <lfs_dir_fetchmatch+0x18e>
                dcrc = lfs_fromle32(dcrc);
 800a5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
 800a5ee:	42b3      	cmp	r3, r6
 800a5f0:	d03e      	beq.n	800a670 <lfs_dir_fetchmatch+0x1a0>
                    dir->erased = false;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f888 3016 	strb.w	r3, [r8, #22]
        if (dir->off > 0) {
 800a5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 8167 	bne.w	800a8d0 <lfs_dir_fetchmatch+0x400>
    lfs_block_t t = pair[0];
 800a602:	f8d8 3000 	ldr.w	r3, [r8]
    pair[0] = pair[1];
 800a606:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a60a:	f8c8 2000 	str.w	r2, [r8]
    pair[1] = t;
 800a60e:	f8c8 3004 	str.w	r3, [r8, #4]
        dir->rev = revs[(r+1)%2];
 800a612:	aa14      	add	r2, sp, #80	; 0x50
 800a614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a61a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a61e:	f8c8 3008 	str.w	r3, [r8, #8]
    for (int i = 0; i < 2; i++) {
 800a622:	f109 0901 	add.w	r9, r9, #1
 800a626:	f1b9 0f01 	cmp.w	r9, #1
 800a62a:	f300 81a6 	bgt.w	800a97a <lfs_dir_fetchmatch+0x4aa>
        lfs_block_t temptail[2] = {0xffffffff, 0xffffffff};
 800a62e:	4ac1      	ldr	r2, [pc, #772]	; (800a934 <lfs_dir_fetchmatch+0x464>)
 800a630:	ab0e      	add	r3, sp, #56	; 0x38
 800a632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a636:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a63a:	2204      	movs	r2, #4
 800a63c:	f108 0108 	add.w	r1, r8, #8
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	f002 ff2a 	bl	800d49c <lfs_crc>
        lfs_stag_t tempbesttag = besttag;
 800a648:	9b08      	ldr	r3, [sp, #32]
 800a64a:	9307      	str	r3, [sp, #28]
        bool tempsplit = false;
 800a64c:	2300      	movs	r3, #0
 800a64e:	930b      	str	r3, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
 800a650:	461f      	mov	r7, r3
        lfs_tag_t ptag = 0xffffffff;
 800a652:	f04f 3aff 	mov.w	sl, #4294967295
        lfs_off_t off = 0;
 800a656:	4655      	mov	r5, sl
 800a658:	469a      	mov	sl, r3
 800a65a:	4606      	mov	r6, r0
 800a65c:	e063      	b.n	800a726 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a65e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a662:	d103      	bne.n	800a66c <lfs_dir_fetchmatch+0x19c>
                        dir->erased = false;
 800a664:	2300      	movs	r3, #0
 800a666:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a66a:	e7c5      	b.n	800a5f8 <lfs_dir_fetchmatch+0x128>
                    return err;
 800a66c:	9008      	str	r0, [sp, #32]
 800a66e:	e190      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
 800a672:	0d1d      	lsrs	r5, r3, #20
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a674:	ea84 75c5 	eor.w	r5, r4, r5, lsl #31
                lfs->seed ^= crc;
 800a678:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a67c:	4072      	eors	r2, r6
 800a67e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a682:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a686:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a68a:	bf08      	it	eq
 800a68c:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a68e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a692:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 800a694:	443b      	add	r3, r7
 800a696:	f8c8 300c 	str.w	r3, [r8, #12]
                dir->etag = ptag;
 800a69a:	f8c8 5010 	str.w	r5, [r8, #16]
                dir->count = tempcount;
 800a69e:	f8a8 a014 	strh.w	sl, [r8, #20]
                dir->tail[0] = temptail[0];
 800a6a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a4:	f8c8 3018 	str.w	r3, [r8, #24]
                dir->tail[1] = temptail[1];
 800a6a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6aa:	f8c8 301c 	str.w	r3, [r8, #28]
                dir->split = tempsplit;
 800a6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b0:	f888 3017 	strb.w	r3, [r8, #23]
                besttag = tempbesttag;
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	9308      	str	r3, [sp, #32]
                crc = 0xffffffff;
 800a6b8:	f04f 36ff 	mov.w	r6, #4294967295
 800a6bc:	e033      	b.n	800a726 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a6be:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a6c2:	d10e      	bne.n	800a6e2 <lfs_dir_fetchmatch+0x212>
                        dir->erased = false;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f888 3016 	strb.w	r3, [r8, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a6cc:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a6ce:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 800a6d2:	d108      	bne.n	800a6e6 <lfs_dir_fetchmatch+0x216>
    return (tag & 0x000ffc00) >> 10;
 800a6d4:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 800a6d8:	459a      	cmp	sl, r3
 800a6da:	d80c      	bhi.n	800a6f6 <lfs_dir_fetchmatch+0x226>
                    tempcount = lfs_tag_id(tag) + 1;
 800a6dc:	f103 0a01 	add.w	sl, r3, #1
 800a6e0:	e009      	b.n	800a6f6 <lfs_dir_fetchmatch+0x226>
                    return err;
 800a6e2:	9008      	str	r0, [sp, #32]
 800a6e4:	e155      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800a6e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6ea:	f000 808c 	beq.w	800a806 <lfs_dir_fetchmatch+0x336>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800a6ee:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800a6f2:	f000 80b1 	beq.w	800a858 <lfs_dir_fetchmatch+0x388>
            if ((fmask & tag) == (fmask & ftag)) {
 800a6f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a6fa:	404b      	eors	r3, r1
 800a6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6fe:	4213      	tst	r3, r2
 800a700:	d110      	bne.n	800a724 <lfs_dir_fetchmatch+0x254>
                        dir->pair[0], off+sizeof(tag)});
 800a702:	f8d8 3000 	ldr.w	r3, [r8]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a706:	9312      	str	r3, [sp, #72]	; 0x48
                        dir->pair[0], off+sizeof(tag)});
 800a708:	1d3b      	adds	r3, r7, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a70a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a70c:	aa12      	add	r2, sp, #72	; 0x48
 800a70e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a712:	4798      	blx	r3
                if (res < 0) {
 800a714:	2800      	cmp	r0, #0
 800a716:	f2c0 80bf 	blt.w	800a898 <lfs_dir_fetchmatch+0x3c8>
                if (res == LFS_CMP_EQ) {
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f040 80c3 	bne.w	800a8a6 <lfs_dir_fetchmatch+0x3d6>
                    tempbesttag = tag;
 800a720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a722:	9307      	str	r3, [sp, #28]
            ptag = tag;
 800a724:	4625      	mov	r5, r4
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a726:	f345 0309 	sbfx	r3, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	bf14      	ite	ne
 800a730:	462b      	movne	r3, r5
 800a732:	1c6b      	addeq	r3, r5, #1
    return tag & 0x000003ff;
 800a734:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a738:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 800a73a:	441f      	add	r7, r3
            int err = lfs_bd_read(lfs,
 800a73c:	f8cd b014 	str.w	fp, [sp, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a740:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f8d8 2000 	ldr.w	r2, [r8]
 800a74a:	2104      	movs	r1, #4
 800a74c:	9103      	str	r1, [sp, #12]
 800a74e:	a90c      	add	r1, sp, #48	; 0x30
 800a750:	9102      	str	r1, [sp, #8]
 800a752:	9701      	str	r7, [sp, #4]
 800a754:	9200      	str	r2, [sp, #0]
 800a756:	465a      	mov	r2, fp
 800a758:	2100      	movs	r1, #0
 800a75a:	4658      	mov	r0, fp
 800a75c:	f7ff fd90 	bl	800a280 <lfs_bd_read>
            if (err) {
 800a760:	9006      	str	r0, [sp, #24]
 800a762:	2800      	cmp	r0, #0
 800a764:	f47f af10 	bne.w	800a588 <lfs_dir_fetchmatch+0xb8>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a768:	2204      	movs	r2, #4
 800a76a:	a90c      	add	r1, sp, #48	; 0x30
 800a76c:	4630      	mov	r0, r6
 800a76e:	f002 fe95 	bl	800d49c <lfs_crc>
 800a772:	4606      	mov	r6, r0
            tag = lfs_frombe32(tag) ^ ptag;
 800a774:	9c0c      	ldr	r4, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800a776:	ba24      	rev	r4, r4
 800a778:	406c      	eors	r4, r5
 800a77a:	940c      	str	r4, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag) ||
 800a77c:	2c00      	cmp	r4, #0
 800a77e:	f6ff af0b 	blt.w	800a598 <lfs_dir_fetchmatch+0xc8>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a782:	f344 0209 	sbfx	r2, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a786:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a78a:	bf14      	ite	ne
 800a78c:	4622      	movne	r2, r4
 800a78e:	1c62      	addeq	r2, r4, #1
    return tag & 0x000003ff;
 800a790:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a794:	3204      	adds	r2, #4
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a796:	443a      	add	r2, r7
 800a798:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a79c:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	f63f aefa 	bhi.w	800a598 <lfs_dir_fetchmatch+0xc8>
    return (tag & 0x70000000) >> 20;
 800a7a4:	0d22      	lsrs	r2, r4, #20
 800a7a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800a7aa:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a7ae:	f43f af0d 	beq.w	800a5cc <lfs_dir_fetchmatch+0xfc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a7b2:	2504      	movs	r5, #4
 800a7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a7b6:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a7ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7be:	bf08      	it	eq
 800a7c0:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a7c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a7c6:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	f4bf af7e 	bcs.w	800a6ca <lfs_dir_fetchmatch+0x1fa>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a7ce:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	f8d8 2000 	ldr.w	r2, [r8]
 800a7d8:	19e9      	adds	r1, r5, r7
 800a7da:	2001      	movs	r0, #1
 800a7dc:	9003      	str	r0, [sp, #12]
 800a7de:	a80d      	add	r0, sp, #52	; 0x34
 800a7e0:	9002      	str	r0, [sp, #8]
 800a7e2:	9101      	str	r1, [sp, #4]
 800a7e4:	9200      	str	r2, [sp, #0]
 800a7e6:	9a05      	ldr	r2, [sp, #20]
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4658      	mov	r0, fp
 800a7ec:	f7ff fd48 	bl	800a280 <lfs_bd_read>
                if (err) {
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f47f af64 	bne.w	800a6be <lfs_dir_fetchmatch+0x1ee>
                crc = lfs_crc(crc, &dat, 1);
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	a90d      	add	r1, sp, #52	; 0x34
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f002 fe4e 	bl	800d49c <lfs_crc>
 800a800:	4606      	mov	r6, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a802:	3501      	adds	r5, #1
 800a804:	e7d6      	b.n	800a7b4 <lfs_dir_fetchmatch+0x2e4>
    return (int8_t)lfs_tag_chunk(tag);
 800a806:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 800a808:	b291      	uxth	r1, r2
 800a80a:	448a      	add	sl, r1
 800a80c:	fa1f fa8a 	uxth.w	sl, sl
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800a810:	9907      	ldr	r1, [sp, #28]
 800a812:	4608      	mov	r0, r1
 800a814:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a818:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800a81c:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
 800a820:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a824:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 800a828:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800a82c:	428b      	cmp	r3, r1
 800a82e:	d00f      	beq.n	800a850 <lfs_dir_fetchmatch+0x380>
                } else if (tempbesttag != -1 &&
 800a830:	9907      	ldr	r1, [sp, #28]
 800a832:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a836:	f43f af5e 	beq.w	800a6f6 <lfs_dir_fetchmatch+0x226>
    return (tag & 0x000ffc00) >> 10;
 800a83a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a83e:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
 800a842:	4299      	cmp	r1, r3
 800a844:	f4ff af57 	bcc.w	800a6f6 <lfs_dir_fetchmatch+0x226>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a848:	eb00 2382 	add.w	r3, r0, r2, lsl #10
 800a84c:	9307      	str	r3, [sp, #28]
 800a84e:	e752      	b.n	800a6f6 <lfs_dir_fetchmatch+0x226>
                    tempbesttag |= 0x80000000;
 800a850:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
 800a854:	9307      	str	r3, [sp, #28]
 800a856:	e74e      	b.n	800a6f6 <lfs_dir_fetchmatch+0x226>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800a858:	f002 0201 	and.w	r2, r2, #1
 800a85c:	b2d3      	uxtb	r3, r2
 800a85e:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a860:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	f8d8 2000 	ldr.w	r2, [r8]
 800a86a:	1d39      	adds	r1, r7, #4
 800a86c:	2008      	movs	r0, #8
 800a86e:	9003      	str	r0, [sp, #12]
 800a870:	a80e      	add	r0, sp, #56	; 0x38
 800a872:	9002      	str	r0, [sp, #8]
 800a874:	9101      	str	r1, [sp, #4]
 800a876:	9200      	str	r2, [sp, #0]
 800a878:	465a      	mov	r2, fp
 800a87a:	2100      	movs	r1, #0
 800a87c:	4658      	mov	r0, fp
 800a87e:	f7ff fcff 	bl	800a280 <lfs_bd_read>
                if (err) {
 800a882:	2800      	cmp	r0, #0
 800a884:	f43f af37 	beq.w	800a6f6 <lfs_dir_fetchmatch+0x226>
                    if (err == LFS_ERR_CORRUPT) {
 800a888:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a88c:	f47f af33 	bne.w	800a6f6 <lfs_dir_fetchmatch+0x226>
                        dir->erased = false;
 800a890:	2300      	movs	r3, #0
 800a892:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a896:	e6af      	b.n	800a5f8 <lfs_dir_fetchmatch+0x128>
                    if (res == LFS_ERR_CORRUPT) {
 800a898:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a89c:	d116      	bne.n	800a8cc <lfs_dir_fetchmatch+0x3fc>
                        dir->erased = false;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a8a4:	e6a8      	b.n	800a5f8 <lfs_dir_fetchmatch+0x128>
                } else if (res == LFS_CMP_GT &&
 800a8a6:	2802      	cmp	r0, #2
 800a8a8:	f47f af3c 	bne.w	800a724 <lfs_dir_fetchmatch+0x254>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800a8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 800a8ae:	f3c3 2289 	ubfx	r2, r3, #10, #10
 800a8b2:	9907      	ldr	r1, [sp, #28]
 800a8b4:	f3c1 2189 	ubfx	r1, r1, #10, #10
                } else if (res == LFS_CMP_GT &&
 800a8b8:	4291      	cmp	r1, r2
 800a8ba:	f4ff af33 	bcc.w	800a724 <lfs_dir_fetchmatch+0x254>
                    tempbesttag = tag | 0x80000000;
 800a8be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	e72e      	b.n	800a724 <lfs_dir_fetchmatch+0x254>
                return err;
 800a8c6:	9b06      	ldr	r3, [sp, #24]
 800a8c8:	9308      	str	r3, [sp, #32]
 800a8ca:	e062      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
                    return res;
 800a8cc:	9008      	str	r0, [sp, #32]
 800a8ce:	e060      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8d0:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a8d4:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8d6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800a8da:	d013      	beq.n	800a904 <lfs_dir_fetchmatch+0x434>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a8dc:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800a8e0:	f8d8 1000 	ldr.w	r1, [r8]
 800a8e4:	428c      	cmp	r4, r1
 800a8e6:	d021      	beq.n	800a92c <lfs_dir_fetchmatch+0x45c>
 800a8e8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800a8ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8f0:	4283      	cmp	r3, r0
 800a8f2:	d01d      	beq.n	800a930 <lfs_dir_fetchmatch+0x460>
 800a8f4:	4284      	cmp	r4, r0
 800a8f6:	d01f      	beq.n	800a938 <lfs_dir_fetchmatch+0x468>
 800a8f8:	4299      	cmp	r1, r3
 800a8fa:	d001      	beq.n	800a900 <lfs_dir_fetchmatch+0x430>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e002      	b.n	800a906 <lfs_dir_fetchmatch+0x436>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <lfs_dir_fetchmatch+0x436>
 800a904:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 800a906:	b1e3      	cbz	r3, 800a942 <lfs_dir_fetchmatch+0x472>
    return (tag & 0x000ffc00) >> 10;
 800a908:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a90c:	9a08      	ldr	r2, [sp, #32]
 800a90e:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
 800a910:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a914:	429a      	cmp	r2, r3
 800a916:	d011      	beq.n	800a93c <lfs_dir_fetchmatch+0x46c>
                } else if (besttag != -1 &&
 800a918:	9808      	ldr	r0, [sp, #32]
 800a91a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a91e:	d010      	beq.n	800a942 <lfs_dir_fetchmatch+0x472>
 800a920:	429a      	cmp	r2, r3
 800a922:	d90e      	bls.n	800a942 <lfs_dir_fetchmatch+0x472>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800a924:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
 800a928:	9308      	str	r3, [sp, #32]
 800a92a:	e00a      	b.n	800a942 <lfs_dir_fetchmatch+0x472>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e7ea      	b.n	800a906 <lfs_dir_fetchmatch+0x436>
 800a930:	2301      	movs	r3, #1
 800a932:	e7e8      	b.n	800a906 <lfs_dir_fetchmatch+0x436>
 800a934:	0800ee7c 	.word	0x0800ee7c
 800a938:	2301      	movs	r3, #1
 800a93a:	e7e4      	b.n	800a906 <lfs_dir_fetchmatch+0x436>
                    besttag |= 0x80000000;
 800a93c:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
 800a940:	9308      	str	r3, [sp, #32]
            if (id) {
 800a942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a944:	b14b      	cbz	r3, 800a95a <lfs_dir_fetchmatch+0x48a>
    return (tag & 0x000ffc00) >> 10;
 800a946:	9b08      	ldr	r3, [sp, #32]
 800a948:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800a94c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    return (a < b) ? a : b;
 800a950:	4293      	cmp	r3, r2
 800a952:	bf28      	it	cs
 800a954:	4613      	movcs	r3, r2
 800a956:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a958:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da18      	bge.n	800a992 <lfs_dir_fetchmatch+0x4c2>
    return (tag & 0x000ffc00) >> 10;
 800a960:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
 800a964:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d802      	bhi.n	800a972 <lfs_dir_fetchmatch+0x4a2>
                return 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	e00f      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
                return LFS_ERR_NOENT;
 800a972:	f06f 0301 	mvn.w	r3, #1
 800a976:	9308      	str	r3, [sp, #32]
 800a978:	e00b      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
    LFS_ERROR("Corrupted dir pair at %"PRIu32" %"PRIu32,
 800a97a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a97e:	f8d8 2000 	ldr.w	r2, [r8]
 800a982:	f240 31c6 	movw	r1, #966	; 0x3c6
 800a986:	4806      	ldr	r0, [pc, #24]	; (800a9a0 <lfs_dir_fetchmatch+0x4d0>)
 800a988:	f003 fc08 	bl	800e19c <iprintf>
    return LFS_ERR_CORRUPT;
 800a98c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a990:	9308      	str	r3, [sp, #32]
}
 800a992:	9808      	ldr	r0, [sp, #32]
 800a994:	b015      	add	sp, #84	; 0x54
 800a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99a:	9008      	str	r0, [sp, #32]
 800a99c:	e7f9      	b.n	800a992 <lfs_dir_fetchmatch+0x4c2>
 800a99e:	bf00      	nop
 800a9a0:	0800f5dc 	.word	0x0800f5dc

0800a9a4 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	61d3      	str	r3, [r2, #28]
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800a9b6:	69a3      	ldr	r3, [r4, #24]
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d022      	beq.n	800aa04 <lfs_fs_parent+0x60>
 800a9be:	69e3      	ldr	r3, [r4, #28]
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d01c      	beq.n	800aa00 <lfs_fs_parent+0x5c>
 800a9c6:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(parent->tail)) {
 800a9c8:	b9f3      	cbnz	r3, 800aa08 <lfs_fs_parent+0x64>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a9ca:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
 800a9cc:	682b      	ldr	r3, [r5, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a9ce:	9306      	str	r3, [sp, #24]
 800a9d0:	686b      	ldr	r3, [r5, #4]
 800a9d2:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a9d4:	ab05      	add	r3, sp, #20
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <lfs_fs_parent+0x70>)
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <lfs_fs_parent+0x74>)
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <lfs_fs_parent+0x78>)
 800a9e6:	f104 0218 	add.w	r2, r4, #24
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fd6f 	bl	800a4d0 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d0de      	beq.n	800a9b6 <lfs_fs_parent+0x12>
 800a9f8:	f110 0f02 	cmn.w	r0, #2
 800a9fc:	d0db      	beq.n	800a9b6 <lfs_fs_parent+0x12>
 800a9fe:	e005      	b.n	800aa0c <lfs_fs_parent+0x68>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e7e1      	b.n	800a9c8 <lfs_fs_parent+0x24>
 800aa04:	2301      	movs	r3, #1
 800aa06:	e7df      	b.n	800a9c8 <lfs_fs_parent+0x24>
    return LFS_ERR_NOENT;
 800aa08:	f06f 0301 	mvn.w	r3, #1
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	b008      	add	sp, #32
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	bf00      	nop
 800aa14:	0800a3d9 	.word	0x0800a3d9
 800aa18:	20000008 	.word	0x20000008
 800aa1c:	7ff003ff 	.word	0x7ff003ff

0800aa20 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800aa20:	b500      	push	{lr}
 800aa22:	b085      	sub	sp, #20
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 800aa24:	2300      	movs	r3, #0
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa32:	f7ff fd4d 	bl	800a4d0 <lfs_dir_fetchmatch>
}
 800aa36:	b005      	add	sp, #20
 800aa38:	f85d fb04 	ldr.w	pc, [sp], #4

0800aa3c <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 800aa4c:	e016      	b.n	800aa7c <lfs_fs_pred+0x40>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aa4e:	2201      	movs	r2, #1
 800aa50:	e000      	b.n	800aa54 <lfs_fs_pred+0x18>
 800aa52:	2201      	movs	r2, #1
    while (!lfs_pair_isnull(pdir->tail)) {
 800aa54:	b9e2      	cbnz	r2, 800aa90 <lfs_fs_pred+0x54>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800aa56:	682a      	ldr	r2, [r5, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d01d      	beq.n	800aa98 <lfs_fs_pred+0x5c>
 800aa5c:	69e0      	ldr	r0, [r4, #28]
 800aa5e:	6869      	ldr	r1, [r5, #4]
 800aa60:	4288      	cmp	r0, r1
 800aa62:	d01b      	beq.n	800aa9c <lfs_fs_pred+0x60>
 800aa64:	4299      	cmp	r1, r3
 800aa66:	d01b      	beq.n	800aaa0 <lfs_fs_pred+0x64>
 800aa68:	4282      	cmp	r2, r0
 800aa6a:	d01b      	beq.n	800aaa4 <lfs_fs_pred+0x68>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800aa6c:	f104 0218 	add.w	r2, r4, #24
 800aa70:	4621      	mov	r1, r4
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffd4 	bl	800aa20 <lfs_dir_fetch>
        if (err) {
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b958      	cbnz	r0, 800aa94 <lfs_fs_pred+0x58>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aa7c:	69a3      	ldr	r3, [r4, #24]
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	d0e6      	beq.n	800aa52 <lfs_fs_pred+0x16>
 800aa84:	69e2      	ldr	r2, [r4, #28]
 800aa86:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa8a:	d0e0      	beq.n	800aa4e <lfs_fs_pred+0x12>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	e7e1      	b.n	800aa54 <lfs_fs_pred+0x18>
    return LFS_ERR_NOENT;
 800aa90:	f06f 0301 	mvn.w	r3, #1
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e7fb      	b.n	800aa94 <lfs_fs_pred+0x58>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e7f9      	b.n	800aa94 <lfs_fs_pred+0x58>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e7f7      	b.n	800aa94 <lfs_fs_pred+0x58>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e7f5      	b.n	800aa94 <lfs_fs_pred+0x58>

0800aaa8 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	b097      	sub	sp, #92	; 0x5c
 800aaae:	900a      	str	r0, [sp, #40]	; 0x28
 800aab0:	460d      	mov	r5, r1
 800aab2:	4691      	mov	r9, r2
 800aab4:	461c      	mov	r4, r3
 800aab6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800aab8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800aaba:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 800aabe:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac0:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800aac4:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800aac8:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800aacc:	930d      	str	r3, [sp, #52]	; 0x34
 800aace:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800aad2:	930e      	str	r3, [sp, #56]	; 0x38
 800aad4:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 800aad8:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800aada:	f344 0a09 	sbfx	sl, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800aade:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aae2:	bf14      	ite	ne
 800aae4:	46a2      	movne	sl, r4
 800aae6:	f104 0a01 	addeq.w	sl, r4, #1
    return tag & 0x000003ff;
 800aaea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800aaee:	f10a 0a04 	add.w	sl, sl, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800aaf2:	44ca      	add	sl, r9
 800aaf4:	68eb      	ldr	r3, [r5, #12]
 800aaf6:	459a      	cmp	sl, r3
 800aaf8:	d32f      	bcc.n	800ab5a <lfs_dir_traverse+0xb2>
        } else if (attrcount > 0) {
 800aafa:	2f00      	cmp	r7, #0
 800aafc:	dd4c      	ble.n	800ab98 <lfs_dir_traverse+0xf0>
            tag = attrs[0].tag;
 800aafe:	6833      	ldr	r3, [r6, #0]
 800ab00:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
 800ab02:	f8d6 a004 	ldr.w	sl, [r6, #4]
            attrs += 1;
 800ab06:	3608      	adds	r6, #8
            attrcount -= 1;
 800ab08:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800ab0a:	4b78      	ldr	r3, [pc, #480]	; (800acec <lfs_dir_traverse+0x244>)
 800ab0c:	ea08 0303 	and.w	r3, r8, r3
 800ab10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab12:	ea8b 0202 	eor.w	r2, fp, r2
 800ab16:	421a      	tst	r2, r3
 800ab18:	d1df      	bne.n	800aada <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800ab1a:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(tmask) != 0) {
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d166      	bne.n	800abf0 <lfs_dir_traverse+0x148>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800ab22:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
 800ab24:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0d6      	beq.n	800aada <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800ab2c:	f240 1201 	movw	r2, #257	; 0x101
 800ab30:	4293      	cmp	r3, r2
 800ab32:	f000 8082 	beq.w	800ac3a <lfs_dir_traverse+0x192>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800ab36:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ab3a:	f000 80a4 	beq.w	800ac86 <lfs_dir_traverse+0x1de>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800ab3e:	4652      	mov	r2, sl
 800ab40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab42:	eb01 2183 	add.w	r1, r1, r3, lsl #10
 800ab46:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ab48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ab4a:	4798      	blx	r3
            if (err) {
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0c3      	beq.n	800aada <lfs_dir_traverse+0x32>
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	b017      	add	sp, #92	; 0x5c
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int err = lfs_bd_read(lfs,
 800ab5a:	682a      	ldr	r2, [r5, #0]
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	9303      	str	r3, [sp, #12]
 800ab60:	a913      	add	r1, sp, #76	; 0x4c
 800ab62:	9102      	str	r1, [sp, #8]
 800ab64:	f8cd a004 	str.w	sl, [sp, #4]
 800ab68:	9200      	str	r2, [sp, #0]
 800ab6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f7ff fb86 	bl	800a280 <lfs_bd_read>
            if (err) {
 800ab74:	4603      	mov	r3, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d1eb      	bne.n	800ab52 <lfs_dir_traverse+0xaa>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800ab7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
 800ab7c:	ba1b      	rev	r3, r3
 800ab7e:	405c      	eors	r4, r3
 800ab80:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800ab84:	9413      	str	r4, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
 800ab8a:	f10a 0304 	add.w	r3, sl, #4
 800ab8e:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
 800ab90:	46d1      	mov	r9, sl
            buffer = &disk;
 800ab92:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800ab96:	e7b8      	b.n	800ab0a <lfs_dir_traverse+0x62>
        } else if (!hasseenmove &&
 800ab98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 80a1 	bne.w	800ace2 <lfs_dir_traverse+0x23a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800aba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aba2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800aba4:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800aba6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800abaa:	d010      	beq.n	800abce <lfs_dir_traverse+0x126>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800abac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800abae:	6829      	ldr	r1, [r5, #0]
 800abb0:	428b      	cmp	r3, r1
 800abb2:	d017      	beq.n	800abe4 <lfs_dir_traverse+0x13c>
 800abb4:	f8d0 c044 	ldr.w	ip, [r0, #68]	; 0x44
 800abb8:	6868      	ldr	r0, [r5, #4]
 800abba:	4584      	cmp	ip, r0
 800abbc:	d014      	beq.n	800abe8 <lfs_dir_traverse+0x140>
 800abbe:	4283      	cmp	r3, r0
 800abc0:	d014      	beq.n	800abec <lfs_dir_traverse+0x144>
 800abc2:	4561      	cmp	r1, ip
 800abc4:	d001      	beq.n	800abca <lfs_dir_traverse+0x122>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e002      	b.n	800abd0 <lfs_dir_traverse+0x128>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <lfs_dir_traverse+0x128>
 800abce:	2300      	movs	r3, #0
        } else if (!hasseenmove &&
 800abd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f000 8087 	beq.w	800ace6 <lfs_dir_traverse+0x23e>
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800abd8:	4b45      	ldr	r3, [pc, #276]	; (800acf0 <lfs_dir_traverse+0x248>)
 800abda:	4013      	ands	r3, r2
 800abdc:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = NULL;
 800abde:	f04f 0a00 	mov.w	sl, #0
            hasseenmove = true;
 800abe2:	e792      	b.n	800ab0a <lfs_dir_traverse+0x62>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e7f3      	b.n	800abd0 <lfs_dir_traverse+0x128>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7f1      	b.n	800abd0 <lfs_dir_traverse+0x128>
 800abec:	2301      	movs	r3, #1
 800abee:	e7ef      	b.n	800abd0 <lfs_dir_traverse+0x128>
            int filter = lfs_dir_traverse(lfs,
 800abf0:	ab13      	add	r3, sp, #76	; 0x4c
 800abf2:	9309      	str	r3, [sp, #36]	; 0x24
 800abf4:	4b3f      	ldr	r3, [pc, #252]	; (800acf4 <lfs_dir_traverse+0x24c>)
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9307      	str	r3, [sp, #28]
 800abfc:	9306      	str	r3, [sp, #24]
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9303      	str	r3, [sp, #12]
 800ac04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac06:	9302      	str	r3, [sp, #8]
 800ac08:	9701      	str	r7, [sp, #4]
 800ac0a:	9600      	str	r6, [sp, #0]
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	464a      	mov	r2, r9
 800ac10:	4629      	mov	r1, r5
 800ac12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac14:	f7ff ff48 	bl	800aaa8 <lfs_dir_traverse>
            if (filter < 0) {
 800ac18:	1e03      	subs	r3, r0, #0
 800ac1a:	db9a      	blt.n	800ab52 <lfs_dir_traverse+0xaa>
            if (filter) {
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f47f af5c 	bne.w	800aada <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800ac22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac24:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800ac28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	f63f af55 	bhi.w	800aada <lfs_dir_traverse+0x32>
 800ac30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac32:	429a      	cmp	r2, r3
 800ac34:	f63f af75 	bhi.w	800ab22 <lfs_dir_traverse+0x7a>
 800ac38:	e74f      	b.n	800aada <lfs_dir_traverse+0x32>
            uint16_t fromid = lfs_tag_size(tag);
 800ac3a:	f3c1 0209 	ubfx	r2, r1, #0, #10
    return (tag & 0x000ffc00) >> 10;
 800ac3e:	f3c1 2389 	ubfx	r3, r1, #10, #10
            int err = lfs_dir_traverse(lfs,
 800ac42:	1c50      	adds	r0, r2, #1
                    fromid, fromid+1, toid-fromid+diff,
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac4a:	440b      	add	r3, r1
            int err = lfs_dir_traverse(lfs,
 800ac4c:	b21b      	sxth	r3, r3
 800ac4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ac50:	9109      	str	r1, [sp, #36]	; 0x24
 800ac52:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800ac54:	9108      	str	r1, [sp, #32]
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	9006      	str	r0, [sp, #24]
 800ac5a:	9205      	str	r2, [sp, #20]
 800ac5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ac60:	9304      	str	r3, [sp, #16]
 800ac62:	4b25      	ldr	r3, [pc, #148]	; (800acf8 <lfs_dir_traverse+0x250>)
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	2301      	movs	r3, #1
 800ac68:	9302      	str	r3, [sp, #8]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	9201      	str	r2, [sp, #4]
 800ac6e:	9200      	str	r2, [sp, #0]
 800ac70:	f04f 33ff 	mov.w	r3, #4294967295
 800ac74:	4651      	mov	r1, sl
 800ac76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac78:	f7ff ff16 	bl	800aaa8 <lfs_dir_traverse>
            if (err) {
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f43f af2b 	beq.w	800aada <lfs_dir_traverse+0x32>
 800ac84:	e765      	b.n	800ab52 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ac86:	2300      	movs	r3, #0
 800ac88:	950f      	str	r5, [sp, #60]	; 0x3c
 800ac8a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800ac8e:	9411      	str	r4, [sp, #68]	; 0x44
 800ac90:	461c      	mov	r4, r3
 800ac92:	46b1      	mov	r9, r6
 800ac94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac96:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800ac98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
 800ac9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ac9e:	4294      	cmp	r4, r2
 800aca0:	d219      	bcs.n	800acd6 <lfs_dir_traverse+0x22e>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800aca2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aca6:	0091      	lsls	r1, r2, #2
 800aca8:	eb0a 0201 	add.w	r2, sl, r1
 800acac:	f81a 1001 	ldrb.w	r1, [sl, r1]
 800acb0:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
 800acb4:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800acb8:	442b      	add	r3, r5
 800acba:	029b      	lsls	r3, r3, #10
 800acbc:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800acc0:	6891      	ldr	r1, [r2, #8]
 800acc2:	6852      	ldr	r2, [r2, #4]
 800acc4:	4319      	orrs	r1, r3
 800acc6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800acc8:	47b0      	blx	r6
                if (err) {
 800acca:	4603      	mov	r3, r0
 800accc:	2800      	cmp	r0, #0
 800acce:	f47f af40 	bne.w	800ab52 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800acd2:	3401      	adds	r4, #1
 800acd4:	e7e0      	b.n	800ac98 <lfs_dir_traverse+0x1f0>
 800acd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800acd8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800acda:	464e      	mov	r6, r9
 800acdc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800ace0:	e6fb      	b.n	800aada <lfs_dir_traverse+0x32>
            return 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	e735      	b.n	800ab52 <lfs_dir_traverse+0xaa>
 800ace6:	2300      	movs	r3, #0
 800ace8:	e733      	b.n	800ab52 <lfs_dir_traverse+0xaa>
 800acea:	bf00      	nop
 800acec:	7ff00000 	.word	0x7ff00000
 800acf0:	7ffffc00 	.word	0x7ffffc00
 800acf4:	0800a1b1 	.word	0x0800a1b1
 800acf8:	600ffc00 	.word	0x600ffc00

0800acfc <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	b089      	sub	sp, #36	; 0x24
 800ad02:	4607      	mov	r7, r0
 800ad04:	468a      	mov	sl, r1
 800ad06:	4691      	mov	r9, r2
 800ad08:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 800ad0a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 800ad0c:	690b      	ldr	r3, [r1, #16]
 800ad0e:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad10:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800ad12:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad14:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800ad18:	d010      	beq.n	800ad3c <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ad1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ad1c:	6809      	ldr	r1, [r1, #0]
 800ad1e:	4291      	cmp	r1, r2
 800ad20:	d019      	beq.n	800ad56 <lfs_dir_getslice+0x5a>
 800ad22:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ad24:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d016      	beq.n	800ad5a <lfs_dir_getslice+0x5e>
 800ad2c:	4290      	cmp	r0, r2
 800ad2e:	d016      	beq.n	800ad5e <lfs_dir_getslice+0x62>
 800ad30:	428c      	cmp	r4, r1
 800ad32:	d001      	beq.n	800ad38 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad34:	2200      	movs	r2, #0
 800ad36:	e002      	b.n	800ad3e <lfs_dir_getslice+0x42>
 800ad38:	2201      	movs	r2, #1
 800ad3a:	e000      	b.n	800ad3e <lfs_dir_getslice+0x42>
 800ad3c:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	f000 8088 	beq.w	800ae54 <lfs_dir_getslice+0x158>
    return (tag & 0x000ffc00) >> 10;
 800ad44:	f3cb 2289 	ubfx	r2, fp, #10, #10
 800ad48:	f3c3 2389 	ubfx	r3, r3, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	f080 8083 	bcs.w	800ae58 <lfs_dir_getslice+0x15c>
    lfs_stag_t gdiff = 0;
 800ad52:	2600      	movs	r6, #0
 800ad54:	e00e      	b.n	800ad74 <lfs_dir_getslice+0x78>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad56:	2201      	movs	r2, #1
 800ad58:	e7f1      	b.n	800ad3e <lfs_dir_getslice+0x42>
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	e7ef      	b.n	800ad3e <lfs_dir_getslice+0x42>
 800ad5e:	2201      	movs	r2, #1
 800ad60:	e7ed      	b.n	800ad3e <lfs_dir_getslice+0x42>
    return (int8_t)lfs_tag_chunk(tag);
 800ad62:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800ad64:	eb01 2686 	add.w	r6, r1, r6, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800ad68:	ebab 0306 	sub.w	r3, fp, r6
 800ad6c:	4063      	eors	r3, r4
 800ad6e:	ea13 0f09 	tst.w	r3, r9
 800ad72:	d049      	beq.n	800ae08 <lfs_dir_getslice+0x10c>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800ad74:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ad76:	f344 0809 	sbfx	r8, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ad7a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ad7e:	bf14      	ite	ne
 800ad80:	4623      	movne	r3, r4
 800ad82:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 800ad84:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ad88:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	d865      	bhi.n	800ae5c <lfs_dir_getslice+0x160>
        off -= lfs_tag_dsize(ntag);
 800ad90:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
 800ad92:	9705      	str	r7, [sp, #20]
 800ad94:	f8da 2000 	ldr.w	r2, [sl]
 800ad98:	2304      	movs	r3, #4
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	a907      	add	r1, sp, #28
 800ad9e:	9102      	str	r1, [sp, #8]
 800ada0:	9501      	str	r5, [sp, #4]
 800ada2:	9200      	str	r2, [sp, #0]
 800ada4:	463a      	mov	r2, r7
 800ada6:	2100      	movs	r1, #0
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff fa69 	bl	800a280 <lfs_bd_read>
        if (err) {
 800adae:	4603      	mov	r3, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d155      	bne.n	800ae60 <lfs_dir_getslice+0x164>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800adb4:	9b07      	ldr	r3, [sp, #28]
 800adb6:	ba1b      	rev	r3, r3
 800adb8:	4063      	eors	r3, r4
 800adba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adbe:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 800adc0:	f3c9 2389 	ubfx	r3, r9, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0cf      	beq.n	800ad68 <lfs_dir_getslice+0x6c>
    return (tag & 0x70000000) >> 20;
 800adc8:	0d23      	lsrs	r3, r4, #20
 800adca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
 800adce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800add2:	d1c9      	bne.n	800ad68 <lfs_dir_getslice+0x6c>
    return (tag & 0x000ffc00) >> 10;
 800add4:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800add8:	4631      	mov	r1, r6
 800adda:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 800adde:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800ade2:	4584      	cmp	ip, r0
 800ade4:	d3c0      	bcc.n	800ad68 <lfs_dir_getslice+0x6c>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800ade6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800adea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800adee:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800adf2:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800adf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800adfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800adfe:	42a2      	cmp	r2, r4
 800ae00:	d1af      	bne.n	800ad62 <lfs_dir_getslice+0x66>
                return LFS_ERR_NOENT;
 800ae02:	f06f 0301 	mvn.w	r3, #1
 800ae06:	e02b      	b.n	800ae60 <lfs_dir_getslice+0x164>
 800ae08:	46b1      	mov	r9, r6
            if (lfs_tag_isdelete(tag)) {
 800ae0a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ae0e:	d02b      	beq.n	800ae68 <lfs_dir_getslice+0x16c>
    return tag & 0x000003ff;
 800ae10:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 800ae14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae16:	429e      	cmp	r6, r3
 800ae18:	bf28      	it	cs
 800ae1a:	461e      	movcs	r6, r3
            err = lfs_bd_read(lfs,
 800ae1c:	f8da 2000 	ldr.w	r2, [sl]
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800ae20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae22:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 800ae24:	3304      	adds	r3, #4
 800ae26:	9603      	str	r6, [sp, #12]
 800ae28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae2a:	9102      	str	r1, [sp, #8]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	9200      	str	r2, [sp, #0]
 800ae30:	4633      	mov	r3, r6
 800ae32:	9a05      	ldr	r2, [sp, #20]
 800ae34:	2100      	movs	r1, #0
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff fa22 	bl	800a280 <lfs_bd_read>
            if (err) {
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	b978      	cbnz	r0, 800ae60 <lfs_dir_getslice+0x164>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800ae40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae42:	1b9a      	subs	r2, r3, r6
 800ae44:	2100      	movs	r1, #0
 800ae46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae48:	1998      	adds	r0, r3, r6
 800ae4a:	f002 fe33 	bl	800dab4 <memset>
            return tag + gdiff;
 800ae4e:	464b      	mov	r3, r9
 800ae50:	4423      	add	r3, r4
 800ae52:	e005      	b.n	800ae60 <lfs_dir_getslice+0x164>
    lfs_stag_t gdiff = 0;
 800ae54:	2600      	movs	r6, #0
 800ae56:	e78d      	b.n	800ad74 <lfs_dir_getslice+0x78>
        gdiff -= LFS_MKTAG(0, 1, 0);
 800ae58:	4e05      	ldr	r6, [pc, #20]	; (800ae70 <lfs_dir_getslice+0x174>)
 800ae5a:	e78b      	b.n	800ad74 <lfs_dir_getslice+0x78>
    return LFS_ERR_NOENT;
 800ae5c:	f06f 0301 	mvn.w	r3, #1
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	b009      	add	sp, #36	; 0x24
 800ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
 800ae68:	f06f 0301 	mvn.w	r3, #1
 800ae6c:	e7f8      	b.n	800ae60 <lfs_dir_getslice+0x164>
 800ae6e:	bf00      	nop
 800ae70:	fffffc00 	.word	0xfffffc00

0800ae74 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800ae74:	b510      	push	{r4, lr}
 800ae76:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 800ae78:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 800ae7c:	9402      	str	r4, [sp, #8]
 800ae7e:	9c06      	ldr	r4, [sp, #24]
 800ae80:	9401      	str	r4, [sp, #4]
 800ae82:	2400      	movs	r4, #0
 800ae84:	9400      	str	r4, [sp, #0]
 800ae86:	f7ff ff39 	bl	800acfc <lfs_dir_getslice>
}
 800ae8a:	b004      	add	sp, #16
 800ae8c:	bd10      	pop	{r4, pc}
	...

0800ae90 <lfs_dir_getgstate>:
        struct lfs_gstate *gstate) {
 800ae90:	b510      	push	{r4, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <lfs_dir_getgstate+0x4c>)
 800ae9c:	4a10      	ldr	r2, [pc, #64]	; (800aee0 <lfs_dir_getgstate+0x50>)
 800ae9e:	f7ff ffe9 	bl	800ae74 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aea2:	2800      	cmp	r0, #0
 800aea4:	db04      	blt.n	800aeb0 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
 800aea6:	f110 0f02 	cmn.w	r0, #2
 800aeaa:	d005      	beq.n	800aeb8 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
 800aeac:	2300      	movs	r3, #0
 800aeae:	e010      	b.n	800aed2 <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aeb0:	f110 0f02 	cmn.w	r0, #2
 800aeb4:	d110      	bne.n	800aed8 <lfs_dir_getgstate+0x48>
 800aeb6:	e7f6      	b.n	800aea6 <lfs_dir_getgstate+0x16>
    return 0;
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e00d      	b.n	800aed8 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800aebc:	aa06      	add	r2, sp, #24
 800aebe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aec2:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 800aec6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800aeca:	404a      	eors	r2, r1
 800aecc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 800aed0:	3301      	adds	r3, #1
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	ddf2      	ble.n	800aebc <lfs_dir_getgstate+0x2c>
    return 0;
 800aed6:	2000      	movs	r0, #0
}
 800aed8:	b006      	add	sp, #24
 800aeda:	bd10      	pop	{r4, pc}
 800aedc:	7ff0000c 	.word	0x7ff0000c
 800aee0:	7ff00000 	.word	0x7ff00000

0800aee4 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b085      	sub	sp, #20
 800aeea:	4606      	mov	r6, r0
 800aeec:	468a      	mov	sl, r1
 800aeee:	4690      	mov	r8, r2
 800aef0:	461c      	mov	r4, r3
 800aef2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800aef6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aef8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
 800aefa:	19ea      	adds	r2, r5, r7
 800aefc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	429a      	cmp	r2, r3
 800af02:	d951      	bls.n	800afa8 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 800af04:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800af08:	e078      	b.n	800affc <lfs_dir_getread+0x118>
                off < pcache->off + pcache->size) {
 800af0a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af12:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == 0xfffffffe &&
 800af14:	42aa      	cmp	r2, r5
 800af16:	d91d      	bls.n	800af54 <lfs_dir_getread+0x70>
            if (off >= pcache->off) {
 800af18:	42a9      	cmp	r1, r5
 800af1a:	d904      	bls.n	800af26 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
 800af1c:	1b49      	subs	r1, r1, r5
 800af1e:	42b9      	cmp	r1, r7
 800af20:	bf28      	it	cs
 800af22:	4639      	movcs	r1, r7
 800af24:	e04a      	b.n	800afbc <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800af26:	eba1 0b05 	sub.w	fp, r1, r5
 800af2a:	449b      	add	fp, r3
 800af2c:	45bb      	cmp	fp, r7
 800af2e:	bf28      	it	cs
 800af30:	46bb      	movcs	fp, r7
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800af32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af36:	1a69      	subs	r1, r5, r1
 800af38:	465a      	mov	r2, fp
 800af3a:	4419      	add	r1, r3
 800af3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af3e:	f002 fdae 	bl	800da9e <memcpy>
                data += diff;
 800af42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af44:	445b      	add	r3, fp
 800af46:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800af48:	445d      	add	r5, fp
                size -= diff;
 800af4a:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800af4e:	e02b      	b.n	800afa8 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 800af50:	4639      	mov	r1, r7
 800af52:	e033      	b.n	800afbc <lfs_dir_getread+0xd8>
 800af54:	4639      	mov	r1, r7
 800af56:	e031      	b.n	800afbc <lfs_dir_getread+0xd8>
        rcache->block = 0xfffffffe;
 800af58:	f06f 0301 	mvn.w	r3, #1
 800af5c:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800af5e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800af60:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
 800af62:	fbb5 f2f3 	udiv	r2, r5, r3
 800af66:	fb03 5212 	mls	r2, r3, r2, r5
 800af6a:	1aaa      	subs	r2, r5, r2
 800af6c:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800af6e:	eb05 0309 	add.w	r3, r5, r9
 800af72:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800af74:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 800af78:	4463      	add	r3, ip
 800af7a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800af7c:	fbb3 f1fc 	udiv	r1, r3, ip
 800af80:	fb0c 3111 	mls	r1, ip, r1, r3
 800af84:	1a5b      	subs	r3, r3, r1
 800af86:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf28      	it	cs
 800af8c:	460b      	movcs	r3, r1
 800af8e:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 800af90:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	9101      	str	r1, [sp, #4]
 800af96:	9200      	str	r2, [sp, #0]
 800af98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af9c:	4651      	mov	r1, sl
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff feac 	bl	800acfc <lfs_dir_getslice>
        if (err) {
 800afa4:	4603      	mov	r3, r0
 800afa6:	bb48      	cbnz	r0, 800affc <lfs_dir_getread+0x118>
    while (size > 0) {
 800afa8:	b33f      	cbz	r7, 800affa <lfs_dir_getread+0x116>
        if (pcache && pcache->block == 0xfffffffe &&
 800afaa:	f1b8 0f00 	cmp.w	r8, #0
 800afae:	d0cf      	beq.n	800af50 <lfs_dir_getread+0x6c>
 800afb0:	f8d8 3000 	ldr.w	r3, [r8]
 800afb4:	f113 0f02 	cmn.w	r3, #2
 800afb8:	d0a7      	beq.n	800af0a <lfs_dir_getread+0x26>
        lfs_size_t diff = size;
 800afba:	4639      	mov	r1, r7
        if (rcache->block == 0xfffffffe &&
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	f113 0f02 	cmn.w	r3, #2
 800afc2:	d1c9      	bne.n	800af58 <lfs_dir_getread+0x74>
                off < rcache->off + rcache->size) {
 800afc4:	6863      	ldr	r3, [r4, #4]
 800afc6:	68a2      	ldr	r2, [r4, #8]
 800afc8:	1898      	adds	r0, r3, r2
        if (rcache->block == 0xfffffffe &&
 800afca:	42a8      	cmp	r0, r5
 800afcc:	d9c4      	bls.n	800af58 <lfs_dir_getread+0x74>
            if (off >= rcache->off) {
 800afce:	42ab      	cmp	r3, r5
 800afd0:	d8c2      	bhi.n	800af58 <lfs_dir_getread+0x74>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800afd2:	eba3 0b05 	sub.w	fp, r3, r5
 800afd6:	4493      	add	fp, r2
 800afd8:	458b      	cmp	fp, r1
 800afda:	bf28      	it	cs
 800afdc:	468b      	movcs	fp, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800afde:	68e1      	ldr	r1, [r4, #12]
 800afe0:	1aeb      	subs	r3, r5, r3
 800afe2:	465a      	mov	r2, fp
 800afe4:	4419      	add	r1, r3
 800afe6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afe8:	f002 fd59 	bl	800da9e <memcpy>
                data += diff;
 800afec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afee:	445b      	add	r3, fp
 800aff0:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800aff2:	445d      	add	r5, fp
                size -= diff;
 800aff4:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800aff8:	e7d6      	b.n	800afa8 <lfs_dir_getread+0xc4>
    return 0;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	b005      	add	sp, #20
 800b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b004 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	460d      	mov	r5, r1
    if (pcache->block != 0xffffffff && pcache->block != 0xfffffffe) {
 800b00c:	6809      	ldr	r1, [r1, #0]
 800b00e:	1c8c      	adds	r4, r1, #2
 800b010:	2c01      	cmp	r4, #1
 800b012:	d93d      	bls.n	800b090 <lfs_bd_flush+0x8c>
 800b014:	4698      	mov	r8, r3
 800b016:	4692      	mov	sl, r2
 800b018:	4606      	mov	r6, r0
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800b01a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800b01c:	6a03      	ldr	r3, [r0, #32]
 800b01e:	4299      	cmp	r1, r3
 800b020:	d230      	bcs.n	800b084 <lfs_bd_flush+0x80>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800b022:	68ac      	ldr	r4, [r5, #8]
 800b024:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800b026:	4414      	add	r4, r2
 800b028:	3c01      	subs	r4, #1
    return a - (a % alignment);
 800b02a:	fbb4 f3f2 	udiv	r3, r4, r2
 800b02e:	fb02 4313 	mls	r3, r2, r3, r4
 800b032:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800b034:	6887      	ldr	r7, [r0, #8]
 800b036:	9400      	str	r4, [sp, #0]
 800b038:	68eb      	ldr	r3, [r5, #12]
 800b03a:	686a      	ldr	r2, [r5, #4]
 800b03c:	47b8      	blx	r7
        if (err) {
 800b03e:	4681      	mov	r9, r0
 800b040:	bb40      	cbnz	r0, 800b094 <lfs_bd_flush+0x90>
        if (validate) {
 800b042:	f1b8 0f00 	cmp.w	r8, #0
 800b046:	d013      	beq.n	800b070 <lfs_bd_flush+0x6c>
    rcache->block = 0xffffffff;
 800b048:	f04f 33ff 	mov.w	r3, #4294967295
 800b04c:	f8ca 3000 	str.w	r3, [sl]
            int res = lfs_bd_cmp(lfs,
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	686a      	ldr	r2, [r5, #4]
                    pcache->block, pcache->off, pcache->buffer, diff);
 800b054:	68e9      	ldr	r1, [r5, #12]
            int res = lfs_bd_cmp(lfs,
 800b056:	9403      	str	r4, [sp, #12]
 800b058:	9102      	str	r1, [sp, #8]
 800b05a:	9201      	str	r2, [sp, #4]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	4623      	mov	r3, r4
 800b060:	4652      	mov	r2, sl
 800b062:	2100      	movs	r1, #0
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff f9df 	bl	800a428 <lfs_bd_cmp>
            if (res < 0) {
 800b06a:	2800      	cmp	r0, #0
 800b06c:	db16      	blt.n	800b09c <lfs_bd_flush+0x98>
            if (res != LFS_CMP_EQ) {
 800b06e:	b9b8      	cbnz	r0, 800b0a0 <lfs_bd_flush+0x9c>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b070:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800b072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b074:	21ff      	movs	r1, #255	; 0xff
 800b076:	68e8      	ldr	r0, [r5, #12]
 800b078:	f002 fd1c 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b07c:	f04f 33ff 	mov.w	r3, #4294967295
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	e007      	b.n	800b094 <lfs_bd_flush+0x90>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800b084:	4b08      	ldr	r3, [pc, #32]	; (800b0a8 <lfs_bd_flush+0xa4>)
 800b086:	4a09      	ldr	r2, [pc, #36]	; (800b0ac <lfs_bd_flush+0xa8>)
 800b088:	2184      	movs	r1, #132	; 0x84
 800b08a:	4809      	ldr	r0, [pc, #36]	; (800b0b0 <lfs_bd_flush+0xac>)
 800b08c:	f002 fc94 	bl	800d9b8 <__assert_func>
    return 0;
 800b090:	f04f 0900 	mov.w	r9, #0
}
 800b094:	4648      	mov	r0, r9
 800b096:	b004      	add	sp, #16
 800b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return res;
 800b09c:	4681      	mov	r9, r0
 800b09e:	e7f9      	b.n	800b094 <lfs_bd_flush+0x90>
                return LFS_ERR_CORRUPT;
 800b0a0:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800b0a4:	e7f6      	b.n	800b094 <lfs_bd_flush+0x90>
 800b0a6:	bf00      	nop
 800b0a8:	0800f460 	.word	0x0800f460
 800b0ac:	0800f394 	.word	0x0800f394
 800b0b0:	0800f430 	.word	0x0800f430

0800b0b4 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 800b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	9201      	str	r2, [sp, #4]
 800b0bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b0c0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b0c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 800b0c6:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b0ca:	d00d      	beq.n	800b0e8 <lfs_bd_prog+0x34>
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	469b      	mov	fp, r3
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800b0d2:	19eb      	adds	r3, r5, r7
 800b0d4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800b0d6:	69d2      	ldr	r2, [r2, #28]
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d91a      	bls.n	800b112 <lfs_bd_prog+0x5e>
 800b0dc:	4b2a      	ldr	r3, [pc, #168]	; (800b188 <lfs_bd_prog+0xd4>)
 800b0de:	4a2b      	ldr	r2, [pc, #172]	; (800b18c <lfs_bd_prog+0xd8>)
 800b0e0:	21b3      	movs	r1, #179	; 0xb3
 800b0e2:	482b      	ldr	r0, [pc, #172]	; (800b190 <lfs_bd_prog+0xdc>)
 800b0e4:	f002 fc68 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(block != 0xffffffff);
 800b0e8:	4b2a      	ldr	r3, [pc, #168]	; (800b194 <lfs_bd_prog+0xe0>)
 800b0ea:	4a28      	ldr	r2, [pc, #160]	; (800b18c <lfs_bd_prog+0xd8>)
 800b0ec:	21b2      	movs	r1, #178	; 0xb2
 800b0ee:	4828      	ldr	r0, [pc, #160]	; (800b190 <lfs_bd_prog+0xdc>)
 800b0f0:	f002 fc62 	bl	800d9b8 <__assert_func>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d13a      	bne.n	800b170 <lfs_bd_prog+0xbc>
        pcache->block = block;
 800b0fa:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800b0fc:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	fbb5 f3f2 	udiv	r3, r5, r2
 800b106:	fb02 5313 	mls	r3, r2, r3, r5
 800b10a:	1aeb      	subs	r3, r5, r3
 800b10c:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 800b112:	b39f      	cbz	r7, 800b17c <lfs_bd_prog+0xc8>
        if (block == pcache->block &&
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	42b3      	cmp	r3, r6
 800b118:	d1ec      	bne.n	800b0f4 <lfs_bd_prog+0x40>
                off >= pcache->off &&
 800b11a:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 800b11c:	42aa      	cmp	r2, r5
 800b11e:	d8e9      	bhi.n	800b0f4 <lfs_bd_prog+0x40>
                off < pcache->off + lfs->cfg->cache_size) {
 800b120:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 800b124:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800b126:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 800b128:	42a8      	cmp	r0, r5
 800b12a:	d9e3      	bls.n	800b0f4 <lfs_bd_prog+0x40>
                    lfs->cfg->cache_size - (off-pcache->off));
 800b12c:	eba2 0905 	sub.w	r9, r2, r5
            lfs_size_t diff = lfs_min(size,
 800b130:	4489      	add	r9, r1
    return (a < b) ? a : b;
 800b132:	45b9      	cmp	r9, r7
 800b134:	bf28      	it	cs
 800b136:	46b9      	movcs	r9, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800b138:	68e3      	ldr	r3, [r4, #12]
 800b13a:	1aa8      	subs	r0, r5, r2
 800b13c:	464a      	mov	r2, r9
 800b13e:	4651      	mov	r1, sl
 800b140:	4418      	add	r0, r3
 800b142:	f002 fcac 	bl	800da9e <memcpy>
            data += diff;
 800b146:	44ca      	add	sl, r9
            off += diff;
 800b148:	444d      	add	r5, r9
            size -= diff;
 800b14a:	eba7 0709 	sub.w	r7, r7, r9
            pcache->size = off - pcache->off;
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	1aeb      	subs	r3, r5, r3
 800b152:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800b154:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800b158:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d1d9      	bne.n	800b112 <lfs_bd_prog+0x5e>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b15e:	465b      	mov	r3, fp
 800b160:	9a01      	ldr	r2, [sp, #4]
 800b162:	4621      	mov	r1, r4
 800b164:	4640      	mov	r0, r8
 800b166:	f7ff ff4d 	bl	800b004 <lfs_bd_flush>
                if (err) {
 800b16a:	4603      	mov	r3, r0
 800b16c:	b938      	cbnz	r0, 800b17e <lfs_bd_prog+0xca>
 800b16e:	e7d0      	b.n	800b112 <lfs_bd_prog+0x5e>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800b170:	4b09      	ldr	r3, [pc, #36]	; (800b198 <lfs_bd_prog+0xe4>)
 800b172:	4a06      	ldr	r2, [pc, #24]	; (800b18c <lfs_bd_prog+0xd8>)
 800b174:	21d0      	movs	r1, #208	; 0xd0
 800b176:	4806      	ldr	r0, [pc, #24]	; (800b190 <lfs_bd_prog+0xdc>)
 800b178:	f002 fc1e 	bl	800d9b8 <__assert_func>
    return 0;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	b003      	add	sp, #12
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	bf00      	nop
 800b188:	0800f488 	.word	0x0800f488
 800b18c:	0800f3a4 	.word	0x0800f3a4
 800b190:	0800f430 	.word	0x0800f430
 800b194:	0800f4c8 	.word	0x0800f4c8
 800b198:	0800f4ac 	.word	0x0800f4ac

0800b19c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 800b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	4617      	mov	r7, r2
 800b1a4:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
 800b1a6:	680b      	ldr	r3, [r1, #0]
 800b1a8:	684a      	ldr	r2, [r1, #4]
 800b1aa:	9603      	str	r6, [sp, #12]
 800b1ac:	9702      	str	r7, [sp, #8]
 800b1ae:	9201      	str	r2, [sp, #4]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	f100 0110 	add.w	r1, r0, #16
 800b1ba:	f7ff ff7b 	bl	800b0b4 <lfs_bd_prog>
    if (err) {
 800b1be:	4605      	mov	r5, r0
 800b1c0:	b110      	cbz	r0, 800b1c8 <lfs_dir_commitprog+0x2c>
}
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	b005      	add	sp, #20
 800b1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	68e0      	ldr	r0, [r4, #12]
 800b1ce:	f002 f965 	bl	800d49c <lfs_crc>
 800b1d2:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	441e      	add	r6, r3
 800b1d8:	6066      	str	r6, [r4, #4]
    return 0;
 800b1da:	e7f2      	b.n	800b1c2 <lfs_dir_commitprog+0x26>

0800b1dc <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	b087      	sub	sp, #28
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b1e2:	f342 0709 	sbfx	r7, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b1e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b1ea:	bf14      	ite	ne
 800b1ec:	4617      	movne	r7, r2
 800b1ee:	1c57      	addeq	r7, r2, #1
    return tag & 0x000003ff;
 800b1f0:	f3c7 0709 	ubfx	r7, r7, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b1f4:	f107 0904 	add.w	r9, r7, #4
    if (commit->off + dsize > commit->end) {
 800b1f8:	684c      	ldr	r4, [r1, #4]
 800b1fa:	eb04 0c09 	add.w	ip, r4, r9
 800b1fe:	694c      	ldr	r4, [r1, #20]
 800b200:	45a4      	cmp	ip, r4
 800b202:	d846      	bhi.n	800b292 <lfs_dir_commitattr+0xb6>
 800b204:	4698      	mov	r8, r3
 800b206:	4615      	mov	r5, r2
 800b208:	460e      	mov	r6, r1
 800b20a:	4604      	mov	r4, r0
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b20c:	f022 4b00 	bic.w	fp, r2, #2147483648	; 0x80000000
 800b210:	688b      	ldr	r3, [r1, #8]
 800b212:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 800b216:	ba1b      	rev	r3, r3
 800b218:	aa06      	add	r2, sp, #24
 800b21a:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b21e:	2304      	movs	r3, #4
 800b220:	f7ff ffbc 	bl	800b19c <lfs_dir_commitprog>
    if (err) {
 800b224:	4682      	mov	sl, r0
 800b226:	bb70      	cbnz	r0, 800b286 <lfs_dir_commitattr+0xaa>
    if (!(tag & 0x80000000)) {
 800b228:	2d00      	cmp	r5, #0
 800b22a:	da23      	bge.n	800b274 <lfs_dir_commitattr+0x98>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b22c:	2500      	movs	r5, #0
 800b22e:	42bd      	cmp	r5, r7
 800b230:	d227      	bcs.n	800b282 <lfs_dir_commitattr+0xa6>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b232:	eba9 0305 	sub.w	r3, r9, r5
            err = lfs_bd_read(lfs,
 800b236:	f8d8 1000 	ldr.w	r1, [r8]
                    disk->block, disk->off+i, &dat, 1);
 800b23a:	f8d8 2004 	ldr.w	r2, [r8, #4]
            err = lfs_bd_read(lfs,
 800b23e:	442a      	add	r2, r5
 800b240:	2001      	movs	r0, #1
 800b242:	9003      	str	r0, [sp, #12]
 800b244:	f10d 0013 	add.w	r0, sp, #19
 800b248:	9002      	str	r0, [sp, #8]
 800b24a:	9201      	str	r2, [sp, #4]
 800b24c:	9100      	str	r1, [sp, #0]
 800b24e:	3b04      	subs	r3, #4
 800b250:	4622      	mov	r2, r4
 800b252:	2100      	movs	r1, #0
 800b254:	4620      	mov	r0, r4
 800b256:	f7ff f813 	bl	800a280 <lfs_bd_read>
            if (err) {
 800b25a:	4603      	mov	r3, r0
 800b25c:	b9b8      	cbnz	r0, 800b28e <lfs_dir_commitattr+0xb2>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b25e:	2301      	movs	r3, #1
 800b260:	f10d 0213 	add.w	r2, sp, #19
 800b264:	4631      	mov	r1, r6
 800b266:	4620      	mov	r0, r4
 800b268:	f7ff ff98 	bl	800b19c <lfs_dir_commitprog>
            if (err) {
 800b26c:	4603      	mov	r3, r0
 800b26e:	b970      	cbnz	r0, 800b28e <lfs_dir_commitattr+0xb2>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b270:	3501      	adds	r5, #1
 800b272:	e7dc      	b.n	800b22e <lfs_dir_commitattr+0x52>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b274:	463b      	mov	r3, r7
 800b276:	4642      	mov	r2, r8
 800b278:	4631      	mov	r1, r6
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7ff ff8e 	bl	800b19c <lfs_dir_commitprog>
        if (err) {
 800b280:	b950      	cbnz	r0, 800b298 <lfs_dir_commitattr+0xbc>
    commit->ptag = tag & 0x7fffffff;
 800b282:	f8c6 b008 	str.w	fp, [r6, #8]
}
 800b286:	4650      	mov	r0, sl
 800b288:	b007      	add	sp, #28
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 800b28e:	469a      	mov	sl, r3
 800b290:	e7f9      	b.n	800b286 <lfs_dir_commitattr+0xaa>
        return LFS_ERR_NOSPC;
 800b292:	f06f 0a1b 	mvn.w	sl, #27
 800b296:	e7f6      	b.n	800b286 <lfs_dir_commitattr+0xaa>
            return err;
 800b298:	4682      	mov	sl, r0
 800b29a:	e7f4      	b.n	800b286 <lfs_dir_commitattr+0xaa>

0800b29c <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b29c:	b508      	push	{r3, lr}
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b29e:	4613      	mov	r3, r2
 800b2a0:	460a      	mov	r2, r1
 800b2a2:	6841      	ldr	r1, [r0, #4]
 800b2a4:	6800      	ldr	r0, [r0, #0]
 800b2a6:	f7ff ff99 	bl	800b1dc <lfs_dir_commitattr>
}
 800b2aa:	bd08      	pop	{r3, pc}

0800b2ac <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4605      	mov	r5, r0
    rcache->block = 0xffffffff;
 800b2b0:	f04f 34ff 	mov.w	r4, #4294967295
 800b2b4:	6014      	str	r4, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b2b6:	f7ff fea5 	bl	800b004 <lfs_bd_flush>
    if (err) {
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	b918      	cbnz	r0, 800b2c6 <lfs_bd_sync+0x1a>
    return lfs->cfg->sync(lfs->cfg);
 800b2be:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800b2c0:	6903      	ldr	r3, [r0, #16]
 800b2c2:	4798      	blx	r3
 800b2c4:	4603      	mov	r3, r0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}

0800b2ca <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b2ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ce:	b089      	sub	sp, #36	; 0x24
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	460c      	mov	r4, r1
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b2d4:	684b      	ldr	r3, [r1, #4]
 800b2d6:	3308      	adds	r3, #8
            lfs->cfg->prog_size);
 800b2d8:	6e82      	ldr	r2, [r0, #104]	; 0x68
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b2da:	6992      	ldr	r2, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800b2dc:	4413      	add	r3, r2
 800b2de:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800b2e0:	fbb3 f8f2 	udiv	r8, r3, r2
 800b2e4:	fb02 3818 	mls	r8, r2, r8, r3
 800b2e8:	eba3 0708 	sub.w	r7, r3, r8
    int err = lfs_bd_read(lfs,
 800b2ec:	4683      	mov	fp, r0
 800b2ee:	680a      	ldr	r2, [r1, #0]
 800b2f0:	2304      	movs	r3, #4
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	a907      	add	r1, sp, #28
 800b2f6:	9102      	str	r1, [sp, #8]
 800b2f8:	9701      	str	r7, [sp, #4]
 800b2fa:	9200      	str	r2, [sp, #0]
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	2100      	movs	r1, #0
 800b300:	f7fe ffbe 	bl	800a280 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
 800b304:	b138      	cbz	r0, 800b316 <lfs_dir_commitcrc+0x4c>
 800b306:	4681      	mov	r9, r0
 800b308:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800b30c:	d003      	beq.n	800b316 <lfs_dir_commitcrc+0x4c>
}
 800b30e:	4648      	mov	r0, r9
 800b310:	b009      	add	sp, #36	; 0x24
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool reset = ~lfs_frombe32(tag) >> 31;
 800b316:	9e07      	ldr	r6, [sp, #28]
    return __builtin_bswap32(a);
 800b318:	ba36      	rev	r6, r6
 800b31a:	43f6      	mvns	r6, r6
 800b31c:	0ff6      	lsrs	r6, r6, #31
 800b31e:	b2f6      	uxtb	r6, r6
    tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff,
 800b320:	f506 62a0 	add.w	r2, r6, #1280	; 0x500
 800b324:	6863      	ldr	r3, [r4, #4]
 800b326:	1afb      	subs	r3, r7, r3
 800b328:	3b04      	subs	r3, #4
 800b32a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b32e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b332:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b336:	9307      	str	r3, [sp, #28]
    footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b338:	68a2      	ldr	r2, [r4, #8]
 800b33a:	4053      	eors	r3, r2
 800b33c:	ba1b      	rev	r3, r3
 800b33e:	f10d 0820 	add.w	r8, sp, #32
 800b342:	f848 3d0c 	str.w	r3, [r8, #-12]!
    commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b346:	2204      	movs	r2, #4
 800b348:	4641      	mov	r1, r8
 800b34a:	68e0      	ldr	r0, [r4, #12]
 800b34c:	f002 f8a6 	bl	800d49c <lfs_crc>
 800b350:	60e0      	str	r0, [r4, #12]
    footer[1] = lfs_tole32(commit->crc);
 800b352:	9006      	str	r0, [sp, #24]
    err = lfs_bd_prog(lfs,
 800b354:	f105 0a10 	add.w	sl, r5, #16
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	2108      	movs	r1, #8
 800b35e:	9103      	str	r1, [sp, #12]
 800b360:	f8cd 8008 	str.w	r8, [sp, #8]
 800b364:	9201      	str	r2, [sp, #4]
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	2300      	movs	r3, #0
 800b36a:	462a      	mov	r2, r5
 800b36c:	4651      	mov	r1, sl
 800b36e:	4628      	mov	r0, r5
 800b370:	f7ff fea0 	bl	800b0b4 <lfs_bd_prog>
    if (err) {
 800b374:	4681      	mov	r9, r0
 800b376:	2800      	cmp	r0, #0
 800b378:	d1c9      	bne.n	800b30e <lfs_dir_commitcrc+0x44>
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b37a:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
 800b37c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b380:	1d11      	adds	r1, r2, #4
 800b382:	6862      	ldr	r2, [r4, #4]
 800b384:	440a      	add	r2, r1
 800b386:	6062      	str	r2, [r4, #4]
    commit->ptag = tag ^ (reset << 31);
 800b388:	ea83 76c6 	eor.w	r6, r3, r6, lsl #31
 800b38c:	60a6      	str	r6, [r4, #8]
    err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b38e:	2300      	movs	r3, #0
 800b390:	462a      	mov	r2, r5
 800b392:	4651      	mov	r1, sl
 800b394:	4628      	mov	r0, r5
 800b396:	f7ff ff89 	bl	800b2ac <lfs_bd_sync>
    if (err) {
 800b39a:	4681      	mov	r9, r0
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d1b6      	bne.n	800b30e <lfs_dir_commitcrc+0x44>
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800b3a0:	6863      	ldr	r3, [r4, #4]
 800b3a2:	9a07      	ldr	r2, [sp, #28]
    return tag & 0x000003ff;
 800b3a4:	f3c2 0809 	ubfx	r8, r2, #0, #10
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800b3a8:	eba3 0308 	sub.w	r3, r3, r8
 800b3ac:	6922      	ldr	r2, [r4, #16]
 800b3ae:	eba3 0802 	sub.w	r8, r3, r2
    for (lfs_off_t i = 0; i < size; i++) {
 800b3b2:	2600      	movs	r6, #0
    uint32_t crc = 0xffffffff;
 800b3b4:	f04f 3aff 	mov.w	sl, #4294967295
    for (lfs_off_t i = 0; i < size; i++) {
 800b3b8:	e007      	b.n	800b3ca <lfs_dir_commitcrc+0x100>
        crc = lfs_crc(crc, &dat, 1);
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f10d 0113 	add.w	r1, sp, #19
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	f002 f86b 	bl	800d49c <lfs_crc>
 800b3c6:	4682      	mov	sl, r0
    for (lfs_off_t i = 0; i < size; i++) {
 800b3c8:	3601      	adds	r6, #1
 800b3ca:	4546      	cmp	r6, r8
 800b3cc:	d214      	bcs.n	800b3f8 <lfs_dir_commitcrc+0x12e>
        err = lfs_bd_read(lfs,
 800b3ce:	6822      	ldr	r2, [r4, #0]
                commit->block, commit->begin+i, &dat, 1);
 800b3d0:	6923      	ldr	r3, [r4, #16]
        err = lfs_bd_read(lfs,
 800b3d2:	4433      	add	r3, r6
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	9103      	str	r1, [sp, #12]
 800b3d8:	f10d 0113 	add.w	r1, sp, #19
 800b3dc:	9102      	str	r1, [sp, #8]
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	9200      	str	r2, [sp, #0]
 800b3e2:	eba8 0306 	sub.w	r3, r8, r6
 800b3e6:	465a      	mov	r2, fp
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f7fe ff48 	bl	800a280 <lfs_bd_read>
        if (err) {
 800b3f0:	4681      	mov	r9, r0
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0e1      	beq.n	800b3ba <lfs_dir_commitcrc+0xf0>
 800b3f6:	e78a      	b.n	800b30e <lfs_dir_commitcrc+0x44>
    if (err) {
 800b3f8:	f1b9 0f00 	cmp.w	r9, #0
 800b3fc:	d187      	bne.n	800b30e <lfs_dir_commitcrc+0x44>
    if (crc != commit->crc) {
 800b3fe:	68e3      	ldr	r3, [r4, #12]
 800b400:	4553      	cmp	r3, sl
 800b402:	d084      	beq.n	800b30e <lfs_dir_commitcrc+0x44>
        return LFS_ERR_CORRUPT;
 800b404:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800b408:	e781      	b.n	800b30e <lfs_dir_commitcrc+0x44>
	...

0800b40c <lfs_dir_find>:
        const char **path, uint16_t *id) {
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	b08d      	sub	sp, #52	; 0x34
 800b412:	4683      	mov	fp, r0
 800b414:	460f      	mov	r7, r1
 800b416:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 800b418:	6812      	ldr	r2, [r2, #0]
 800b41a:	9205      	str	r2, [sp, #20]
    if (id) {
 800b41c:	9306      	str	r3, [sp, #24]
 800b41e:	b11b      	cbz	r3, 800b428 <lfs_dir_find+0x1c>
 800b420:	461a      	mov	r2, r3
        *id = 0x3ff;
 800b422:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b426:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 800b428:	f8db 3020 	ldr.w	r3, [fp, #32]
 800b42c:	61bb      	str	r3, [r7, #24]
    dir->tail[1] = lfs->root[1];
 800b42e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800b432:	61fb      	str	r3, [r7, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800b434:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800b580 <lfs_dir_find+0x174>
 800b438:	46b8      	mov	r8, r7
        name += strspn(name, "/");
 800b43a:	4c4d      	ldr	r4, [pc, #308]	; (800b570 <lfs_dir_find+0x164>)
 800b43c:	4621      	mov	r1, r4
 800b43e:	9e05      	ldr	r6, [sp, #20]
 800b440:	4630      	mov	r0, r6
 800b442:	f002 ff12 	bl	800e26a <strspn>
 800b446:	4605      	mov	r5, r0
 800b448:	1837      	adds	r7, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
 800b44a:	4621      	mov	r1, r4
 800b44c:	4638      	mov	r0, r7
 800b44e:	f002 fefa 	bl	800e246 <strcspn>
 800b452:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b454:	2801      	cmp	r0, #1
 800b456:	d00b      	beq.n	800b470 <lfs_dir_find+0x64>
 800b458:	f1ba 0f02 	cmp.w	sl, #2
 800b45c:	d00d      	beq.n	800b47a <lfs_dir_find+0x6e>
        const char *suffix = name + namelen;
 800b45e:	eb07 030a 	add.w	r3, r7, sl
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	461c      	mov	r4, r3
        int depth = 1;
 800b466:	2601      	movs	r6, #1
 800b468:	e014      	b.n	800b494 <lfs_dir_find+0x88>
 800b46a:	4681      	mov	r9, r0
 800b46c:	46ab      	mov	fp, r5
 800b46e:	e7e4      	b.n	800b43a <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	5d5b      	ldrb	r3, [r3, r5]
 800b474:	2b2e      	cmp	r3, #46	; 0x2e
 800b476:	d1ef      	bne.n	800b458 <lfs_dir_find+0x4c>
 800b478:	e006      	b.n	800b488 <lfs_dir_find+0x7c>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800b47a:	2202      	movs	r2, #2
 800b47c:	493d      	ldr	r1, [pc, #244]	; (800b574 <lfs_dir_find+0x168>)
 800b47e:	4638      	mov	r0, r7
 800b480:	f002 fafe 	bl	800da80 <memcmp>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1ea      	bne.n	800b45e <lfs_dir_find+0x52>
            name += namelen;
 800b488:	eb07 030a 	add.w	r3, r7, sl
 800b48c:	9305      	str	r3, [sp, #20]
            goto nextname;
 800b48e:	e7d4      	b.n	800b43a <lfs_dir_find+0x2e>
                depth += 1;
 800b490:	3601      	adds	r6, #1
            suffix += sufflen;
 800b492:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
 800b494:	4d36      	ldr	r5, [pc, #216]	; (800b570 <lfs_dir_find+0x164>)
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f002 fee6 	bl	800e26a <strspn>
 800b49e:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f002 fecf 	bl	800e246 <strcspn>
            if (sufflen == 0) {
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	b168      	cbz	r0, 800b4c8 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800b4ac:	2802      	cmp	r0, #2
 800b4ae:	d1ef      	bne.n	800b490 <lfs_dir_find+0x84>
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	4930      	ldr	r1, [pc, #192]	; (800b574 <lfs_dir_find+0x168>)
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f002 fae3 	bl	800da80 <memcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d1e8      	bne.n	800b490 <lfs_dir_find+0x84>
                if (depth == 0) {
 800b4be:	3e01      	subs	r6, #1
 800b4c0:	d1e7      	bne.n	800b492 <lfs_dir_find+0x86>
                    name = suffix + sufflen;
 800b4c2:	1963      	adds	r3, r4, r5
 800b4c4:	9305      	str	r3, [sp, #20]
                    goto nextname;
 800b4c6:	e7b8      	b.n	800b43a <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 800b4c8:	783b      	ldrb	r3, [r7, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d04b      	beq.n	800b566 <lfs_dir_find+0x15a>
        *path = name;
 800b4ce:	9b07      	ldr	r3, [sp, #28]
 800b4d0:	601f      	str	r7, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
 800b4d2:	f3c9 530a 	ubfx	r3, r9, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d141      	bne.n	800b55e <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 800b4da:	f3c9 2989 	ubfx	r9, r9, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 800b4de:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b4e2:	4599      	cmp	r9, r3
 800b4e4:	d102      	bne.n	800b4ec <lfs_dir_find+0xe0>
 800b4e6:	4654      	mov	r4, sl
 800b4e8:	465d      	mov	r5, fp
 800b4ea:	e02b      	b.n	800b544 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b4ec:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b4f0:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	f049 5300 	orr.w	r3, r9, #536870912	; 0x20000000
 800b4fa:	f043 0308 	orr.w	r3, r3, #8
 800b4fe:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <lfs_dir_find+0x16c>)
 800b500:	4641      	mov	r1, r8
 800b502:	4658      	mov	r0, fp
 800b504:	f7ff fcb6 	bl	800ae74 <lfs_dir_get>
            if (res < 0) {
 800b508:	f1b0 0900 	subs.w	r9, r0, #0
 800b50c:	db2b      	blt.n	800b566 <lfs_dir_find+0x15a>
 800b50e:	4654      	mov	r4, sl
 800b510:	465d      	mov	r5, fp
 800b512:	e017      	b.n	800b544 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b514:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b516:	9509      	str	r5, [sp, #36]	; 0x24
 800b518:	970a      	str	r7, [sp, #40]	; 0x28
 800b51a:	940b      	str	r4, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b51c:	aa09      	add	r2, sp, #36	; 0x24
 800b51e:	9203      	str	r2, [sp, #12]
 800b520:	4a16      	ldr	r2, [pc, #88]	; (800b57c <lfs_dir_find+0x170>)
 800b522:	9202      	str	r2, [sp, #8]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	9400      	str	r4, [sp, #0]
 800b528:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b52c:	4632      	mov	r2, r6
 800b52e:	4641      	mov	r1, r8
 800b530:	4628      	mov	r0, r5
 800b532:	f7fe ffcd 	bl	800a4d0 <lfs_dir_fetchmatch>
            if (tag < 0) {
 800b536:	2800      	cmp	r0, #0
 800b538:	db14      	blt.n	800b564 <lfs_dir_find+0x158>
            if (tag) {
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d195      	bne.n	800b46a <lfs_dir_find+0x5e>
            if (!dir->split) {
 800b53e:	f898 3017 	ldrb.w	r3, [r8, #23]
 800b542:	b14b      	cbz	r3, 800b558 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b544:	f108 0618 	add.w	r6, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b548:	212f      	movs	r1, #47	; 0x2f
 800b54a:	4638      	mov	r0, r7
 800b54c:	f002 fe6e 	bl	800e22c <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b550:	2800      	cmp	r0, #0
 800b552:	d0df      	beq.n	800b514 <lfs_dir_find+0x108>
 800b554:	2300      	movs	r3, #0
 800b556:	e7de      	b.n	800b516 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 800b558:	f06f 0901 	mvn.w	r9, #1
 800b55c:	e003      	b.n	800b566 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 800b55e:	f06f 0913 	mvn.w	r9, #19
 800b562:	e000      	b.n	800b566 <lfs_dir_find+0x15a>
 800b564:	4681      	mov	r9, r0
}
 800b566:	4648      	mov	r0, r9
 800b568:	b00d      	add	sp, #52	; 0x34
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	bf00      	nop
 800b570:	0800f60c 	.word	0x0800f60c
 800b574:	0800f610 	.word	0x0800f610
 800b578:	700ffc00 	.word	0x700ffc00
 800b57c:	0800a48d 	.word	0x0800a48d
 800b580:	002ffc00 	.word	0x002ffc00

0800b584 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 800b584:	b510      	push	{r4, lr}
 800b586:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 800b588:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	b13b      	cbz	r3, 800b59e <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 800b58e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	b143      	cbz	r3, 800b5a6 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 800b594:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b598:	b14b      	cbz	r3, 800b5ae <lfs_deinit+0x2a>
}
 800b59a:	2000      	movs	r0, #0
 800b59c:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 800b59e:	68c0      	ldr	r0, [r0, #12]
 800b5a0:	f002 fa66 	bl	800da70 <free>
 800b5a4:	e7f3      	b.n	800b58e <lfs_deinit+0xa>
 800b5a6:	69e0      	ldr	r0, [r4, #28]
 800b5a8:	f002 fa62 	bl	800da70 <free>
 800b5ac:	e7f2      	b.n	800b594 <lfs_deinit+0x10>
 800b5ae:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b5b0:	f002 fa5e 	bl	800da70 <free>
 800b5b4:	e7f1      	b.n	800b59a <lfs_deinit+0x16>

0800b5b6 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800b5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 800b5b8:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800b5ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b5bc:	69dc      	ldr	r4, [r3, #28]
 800b5be:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
 800b5c0:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
 800b5c4:	b190      	cbz	r0, 800b5ec <lfs_ctz_index+0x36>
 800b5c6:	460e      	mov	r6, r1
    return __builtin_popcount(a);
 800b5c8:	3801      	subs	r0, #1
 800b5ca:	f7f4 fe39 	bl	8000240 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800b5ce:	1c85      	adds	r5, r0, #2
 800b5d0:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
 800b5d4:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
 800b5d8:	fb05 7414 	mls	r4, r5, r4, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f7f4 fe2f 	bl	8000240 <__popcountsi2>
 800b5e2:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
 800b5e6:	6034      	str	r4, [r6, #0]
    return i;
 800b5e8:	4628      	mov	r0, r5
}
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	e7fc      	b.n	800b5ea <lfs_ctz_index+0x34>

0800b5f0 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	b089      	sub	sp, #36	; 0x24
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    if (size == 0) {
 800b5fc:	b923      	cbnz	r3, 800b608 <lfs_ctz_traverse+0x18>
        return 0;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	b009      	add	sp, #36	; 0x24
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	4681      	mov	r9, r0
 800b60a:	468a      	mov	sl, r1
 800b60c:	4693      	mov	fp, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b60e:	3b01      	subs	r3, #1
 800b610:	a908      	add	r1, sp, #32
 800b612:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b616:	f7ff ffce 	bl	800b5b6 <lfs_ctz_index>
 800b61a:	4680      	mov	r8, r0
        int err = cb(data, head);
 800b61c:	4621      	mov	r1, r4
 800b61e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b620:	47a8      	blx	r5
        if (err) {
 800b622:	4603      	mov	r3, r0
 800b624:	2800      	cmp	r0, #0
 800b626:	d1eb      	bne.n	800b600 <lfs_ctz_traverse+0x10>
        if (index == 0) {
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d0e8      	beq.n	800b600 <lfs_ctz_traverse+0x10>
        int count = 2 - (index & 1);
 800b62e:	f008 0701 	and.w	r7, r8, #1
 800b632:	f1c7 0702 	rsb	r7, r7, #2
 800b636:	463e      	mov	r6, r7
                pcache, rcache, count*sizeof(head),
 800b638:	00bb      	lsls	r3, r7, #2
        err = lfs_bd_read(lfs,
 800b63a:	9303      	str	r3, [sp, #12]
 800b63c:	aa05      	add	r2, sp, #20
 800b63e:	9202      	str	r2, [sp, #8]
 800b640:	2200      	movs	r2, #0
 800b642:	9201      	str	r2, [sp, #4]
 800b644:	9400      	str	r4, [sp, #0]
 800b646:	465a      	mov	r2, fp
 800b648:	4651      	mov	r1, sl
 800b64a:	4648      	mov	r0, r9
 800b64c:	f7fe fe18 	bl	800a280 <lfs_bd_read>
        if (err) {
 800b650:	4604      	mov	r4, r0
 800b652:	b9b0      	cbnz	r0, 800b682 <lfs_ctz_traverse+0x92>
        for (int i = 0; i < count-1; i++) {
 800b654:	1e73      	subs	r3, r6, #1
 800b656:	42a3      	cmp	r3, r4
 800b658:	dd0b      	ble.n	800b672 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 800b65a:	ab08      	add	r3, sp, #32
 800b65c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b660:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800b664:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b666:	47a8      	blx	r5
            if (err) {
 800b668:	4603      	mov	r3, r0
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d1c8      	bne.n	800b600 <lfs_ctz_traverse+0x10>
        for (int i = 0; i < count-1; i++) {
 800b66e:	3401      	adds	r4, #1
 800b670:	e7f0      	b.n	800b654 <lfs_ctz_traverse+0x64>
        head = heads[count-1];
 800b672:	aa08      	add	r2, sp, #32
 800b674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b678:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 800b67c:	eba8 0807 	sub.w	r8, r8, r7
    while (true) {
 800b680:	e7cc      	b.n	800b61c <lfs_ctz_traverse+0x2c>
            return err;
 800b682:	4603      	mov	r3, r0
 800b684:	e7bc      	b.n	800b600 <lfs_ctz_traverse+0x10>
	...

0800b688 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4604      	mov	r4, r0
    lfs->cfg = cfg;
 800b68c:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b68e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800b690:	694a      	ldr	r2, [r1, #20]
 800b692:	fbb0 f3f2 	udiv	r3, r0, r2
 800b696:	fb02 0313 	mls	r3, r2, r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d172      	bne.n	800b784 <lfs_init+0xfc>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b69e:	698a      	ldr	r2, [r1, #24]
 800b6a0:	fbb0 f3f2 	udiv	r3, r0, r2
 800b6a4:	fb02 0313 	mls	r3, r2, r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d172      	bne.n	800b792 <lfs_init+0x10a>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b6ac:	69ca      	ldr	r2, [r1, #28]
 800b6ae:	fbb2 f3f0 	udiv	r3, r2, r0
 800b6b2:	fb00 2313 	mls	r3, r0, r3, r2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d172      	bne.n	800b7a0 <lfs_init+0x118>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b6ba:	f1a2 0508 	sub.w	r5, r2, #8
 800b6be:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c2:	fbb3 f3f5 	udiv	r3, r3, r5
    return 32 - __builtin_clz(a-1);
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	fab3 f383 	clz	r3, r3
 800b6cc:	f1c3 0320 	rsb	r3, r3, #32
 800b6d0:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b6d4:	d36b      	bcc.n	800b7ae <lfs_init+0x126>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b6d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d06e      	beq.n	800b7bc <lfs_init+0x134>
    if (lfs->cfg->read_buffer) {
 800b6de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d072      	beq.n	800b7ca <lfs_init+0x142>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800b6e4:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 800b6e6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b6e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d078      	beq.n	800b7e0 <lfs_init+0x158>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800b6ee:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b6f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b6f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6f4:	21ff      	movs	r1, #255	; 0xff
 800b6f6:	68e0      	ldr	r0, [r4, #12]
 800b6f8:	f002 f9dc 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b6fc:	f04f 35ff 	mov.w	r5, #4294967295
 800b700:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b702:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b706:	21ff      	movs	r1, #255	; 0xff
 800b708:	69e0      	ldr	r0, [r4, #28]
 800b70a:	f002 f9d3 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b70e:	6125      	str	r5, [r4, #16]
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b710:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b712:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b714:	2800      	cmp	r0, #0
 800b716:	d06a      	beq.n	800b7ee <lfs_init+0x166>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b718:	f010 0f07 	tst.w	r0, #7
 800b71c:	d16e      	bne.n	800b7fc <lfs_init+0x174>
 800b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b720:	f013 0f07 	tst.w	r3, #7
 800b724:	d16a      	bne.n	800b7fc <lfs_init+0x174>
    if (lfs->cfg->lookahead_buffer) {
 800b726:	2b00      	cmp	r3, #0
 800b728:	d06f      	beq.n	800b80a <lfs_init+0x182>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800b72a:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b72c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b72e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b730:	2aff      	cmp	r2, #255	; 0xff
 800b732:	d870      	bhi.n	800b816 <lfs_init+0x18e>
    lfs->name_max = lfs->cfg->name_max;
 800b734:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
 800b736:	b90a      	cbnz	r2, 800b73c <lfs_init+0xb4>
        lfs->name_max = LFS_NAME_MAX;
 800b738:	22ff      	movs	r2, #255	; 0xff
 800b73a:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b73c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b73e:	f1b2 6ff0 	cmp.w	r2, #125829120	; 0x7800000
 800b742:	d86f      	bhi.n	800b824 <lfs_init+0x19c>
    lfs->file_max = lfs->cfg->file_max;
 800b744:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
 800b746:	b912      	cbnz	r2, 800b74e <lfs_init+0xc6>
        lfs->file_max = LFS_FILE_MAX;
 800b748:	f04f 62f0 	mov.w	r2, #125829120	; 0x7800000
 800b74c:	6722      	str	r2, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b750:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b754:	4293      	cmp	r3, r2
 800b756:	d86c      	bhi.n	800b832 <lfs_init+0x1aa>
    lfs->attr_max = lfs->cfg->attr_max;
 800b758:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
 800b75a:	b913      	cbnz	r3, 800b762 <lfs_init+0xda>
        lfs->attr_max = LFS_ATTR_MAX;
 800b75c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800b760:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = 0xffffffff;
 800b762:	f04f 33ff 	mov.w	r3, #4294967295
 800b766:	6223      	str	r3, [r4, #32]
    lfs->root[1] = 0xffffffff;
 800b768:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
 800b76a:	2000      	movs	r0, #0
 800b76c:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
 800b76e:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 800b770:	6320      	str	r0, [r4, #48]	; 0x30
 800b772:	6360      	str	r0, [r4, #52]	; 0x34
 800b774:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gpending = (struct lfs_gstate){0};
 800b776:	63e0      	str	r0, [r4, #60]	; 0x3c
 800b778:	6420      	str	r0, [r4, #64]	; 0x40
 800b77a:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gdelta = (struct lfs_gstate){0};
 800b77c:	64a0      	str	r0, [r4, #72]	; 0x48
 800b77e:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b780:	6520      	str	r0, [r4, #80]	; 0x50
}
 800b782:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b784:	4b2e      	ldr	r3, [pc, #184]	; (800b840 <lfs_init+0x1b8>)
 800b786:	4a2f      	ldr	r2, [pc, #188]	; (800b844 <lfs_init+0x1bc>)
 800b788:	f640 4171 	movw	r1, #3185	; 0xc71
 800b78c:	482e      	ldr	r0, [pc, #184]	; (800b848 <lfs_init+0x1c0>)
 800b78e:	f002 f913 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b792:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <lfs_init+0x1c4>)
 800b794:	4a2b      	ldr	r2, [pc, #172]	; (800b844 <lfs_init+0x1bc>)
 800b796:	f640 4172 	movw	r1, #3186	; 0xc72
 800b79a:	482b      	ldr	r0, [pc, #172]	; (800b848 <lfs_init+0x1c0>)
 800b79c:	f002 f90c 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b7a0:	4b2b      	ldr	r3, [pc, #172]	; (800b850 <lfs_init+0x1c8>)
 800b7a2:	4a28      	ldr	r2, [pc, #160]	; (800b844 <lfs_init+0x1bc>)
 800b7a4:	f640 4173 	movw	r1, #3187	; 0xc73
 800b7a8:	4827      	ldr	r0, [pc, #156]	; (800b848 <lfs_init+0x1c0>)
 800b7aa:	f002 f905 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b7ae:	4b29      	ldr	r3, [pc, #164]	; (800b854 <lfs_init+0x1cc>)
 800b7b0:	4a24      	ldr	r2, [pc, #144]	; (800b844 <lfs_init+0x1bc>)
 800b7b2:	f640 4177 	movw	r1, #3191	; 0xc77
 800b7b6:	4824      	ldr	r0, [pc, #144]	; (800b848 <lfs_init+0x1c0>)
 800b7b8:	f002 f8fe 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b7bc:	4b26      	ldr	r3, [pc, #152]	; (800b858 <lfs_init+0x1d0>)
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <lfs_init+0x1bc>)
 800b7c0:	f640 417a 	movw	r1, #3194	; 0xc7a
 800b7c4:	4820      	ldr	r0, [pc, #128]	; (800b848 <lfs_init+0x1c0>)
 800b7c6:	f002 f8f7 	bl	800d9b8 <__assert_func>
    return malloc(size);
 800b7ca:	f002 f949 	bl	800da60 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b7ce:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d188      	bne.n	800b6e6 <lfs_init+0x5e>
    lfs_deinit(lfs);
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7ff fed5 	bl	800b584 <lfs_deinit>
    return err;
 800b7da:	f06f 000b 	mvn.w	r0, #11
 800b7de:	e7d0      	b.n	800b782 <lfs_init+0xfa>
 800b7e0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b7e2:	f002 f93d 	bl	800da60 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b7e6:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d181      	bne.n	800b6f0 <lfs_init+0x68>
 800b7ec:	e7f2      	b.n	800b7d4 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b7ee:	4b1b      	ldr	r3, [pc, #108]	; (800b85c <lfs_init+0x1d4>)
 800b7f0:	4a14      	ldr	r2, [pc, #80]	; (800b844 <lfs_init+0x1bc>)
 800b7f2:	f640 4197 	movw	r1, #3223	; 0xc97
 800b7f6:	4814      	ldr	r0, [pc, #80]	; (800b848 <lfs_init+0x1c0>)
 800b7f8:	f002 f8de 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b7fc:	4b18      	ldr	r3, [pc, #96]	; (800b860 <lfs_init+0x1d8>)
 800b7fe:	4a11      	ldr	r2, [pc, #68]	; (800b844 <lfs_init+0x1bc>)
 800b800:	f640 4198 	movw	r1, #3224	; 0xc98
 800b804:	4810      	ldr	r0, [pc, #64]	; (800b848 <lfs_init+0x1c0>)
 800b806:	f002 f8d7 	bl	800d9b8 <__assert_func>
 800b80a:	f002 f929 	bl	800da60 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800b80e:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 800b810:	2800      	cmp	r0, #0
 800b812:	d18b      	bne.n	800b72c <lfs_init+0xa4>
 800b814:	e7de      	b.n	800b7d4 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <lfs_init+0x1dc>)
 800b818:	4a0a      	ldr	r2, [pc, #40]	; (800b844 <lfs_init+0x1bc>)
 800b81a:	f640 41a4 	movw	r1, #3236	; 0xca4
 800b81e:	480a      	ldr	r0, [pc, #40]	; (800b848 <lfs_init+0x1c0>)
 800b820:	f002 f8ca 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b824:	4b10      	ldr	r3, [pc, #64]	; (800b868 <lfs_init+0x1e0>)
 800b826:	4a07      	ldr	r2, [pc, #28]	; (800b844 <lfs_init+0x1bc>)
 800b828:	f640 41aa 	movw	r1, #3242	; 0xcaa
 800b82c:	4806      	ldr	r0, [pc, #24]	; (800b848 <lfs_init+0x1c0>)
 800b82e:	f002 f8c3 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <lfs_init+0x1e4>)
 800b834:	4a03      	ldr	r2, [pc, #12]	; (800b844 <lfs_init+0x1bc>)
 800b836:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 800b83a:	4803      	ldr	r0, [pc, #12]	; (800b848 <lfs_init+0x1c0>)
 800b83c:	f002 f8bc 	bl	800d9b8 <__assert_func>
 800b840:	0800f6d8 	.word	0x0800f6d8
 800b844:	0800f3f0 	.word	0x0800f3f0
 800b848:	0800f430 	.word	0x0800f430
 800b84c:	0800f708 	.word	0x0800f708
 800b850:	0800f738 	.word	0x0800f738
 800b854:	0800f76c 	.word	0x0800f76c
 800b858:	0800f7b8 	.word	0x0800f7b8
 800b85c:	0800f7dc 	.word	0x0800f7dc
 800b860:	0800f7fc 	.word	0x0800f7fc
 800b864:	0800f850 	.word	0x0800f850
 800b868:	0800f86c 	.word	0x0800f86c
 800b86c:	0800f88c 	.word	0x0800f88c

0800b870 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800b870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b874:	b089      	sub	sp, #36	; 0x24
 800b876:	9305      	str	r3, [sp, #20]
 800b878:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
 800b87a:	b953      	cbnz	r3, 800b892 <lfs_ctz_find+0x22>
        *block = 0xffffffff;
 800b87c:	f04f 33ff 	mov.w	r3, #4294967295
 800b880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b882:	6013      	str	r3, [r2, #0]
        *off = 0;
 800b884:	2200      	movs	r2, #0
 800b886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b888:	601a      	str	r2, [r3, #0]
}
 800b88a:	4610      	mov	r0, r2
 800b88c:	b009      	add	sp, #36	; 0x24
 800b88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b892:	4691      	mov	r9, r2
 800b894:	4688      	mov	r8, r1
 800b896:	4606      	mov	r6, r0
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b898:	3b01      	subs	r3, #1
 800b89a:	a908      	add	r1, sp, #32
 800b89c:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b8a0:	f7ff fe89 	bl	800b5b6 <lfs_ctz_index>
 800b8a4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800b8a6:	a911      	add	r1, sp, #68	; 0x44
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7ff fe84 	bl	800b5b6 <lfs_ctz_index>
 800b8ae:	4607      	mov	r7, r0
    while (current > target) {
 800b8b0:	e003      	b.n	800b8ba <lfs_ctz_find+0x4a>
        current -= 1 << skip;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	fa03 f404 	lsl.w	r4, r3, r4
 800b8b8:	1b2d      	subs	r5, r5, r4
    while (current > target) {
 800b8ba:	42bd      	cmp	r5, r7
 800b8bc:	d92a      	bls.n	800b914 <lfs_ctz_find+0xa4>
                lfs_npw2(current-target+1) - 1,
 800b8be:	1bec      	subs	r4, r5, r7
    return 32 - __builtin_clz(a-1);
 800b8c0:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 800b8c4:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 800b8c8:	fa95 f3a5 	rbit	r3, r5
 800b8cc:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 800b8d0:	429c      	cmp	r4, r3
 800b8d2:	bf28      	it	cs
 800b8d4:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 800b8d6:	aa08      	add	r2, sp, #32
 800b8d8:	f852 1d0c 	ldr.w	r1, [r2, #-12]!
 800b8dc:	00a0      	lsls	r0, r4, #2
 800b8de:	2304      	movs	r3, #4
 800b8e0:	9303      	str	r3, [sp, #12]
 800b8e2:	9202      	str	r2, [sp, #8]
 800b8e4:	9001      	str	r0, [sp, #4]
 800b8e6:	9100      	str	r1, [sp, #0]
 800b8e8:	464a      	mov	r2, r9
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f7fe fcc7 	bl	800a280 <lfs_bd_read>
        head = lfs_fromle32(head);
 800b8f2:	9b05      	ldr	r3, [sp, #20]
        if (err) {
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d1c7      	bne.n	800b88a <lfs_ctz_find+0x1a>
        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d903      	bls.n	800b906 <lfs_ctz_find+0x96>
 800b8fe:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 800b900:	6a12      	ldr	r2, [r2, #32]
 800b902:	4293      	cmp	r3, r2
 800b904:	d9d5      	bls.n	800b8b2 <lfs_ctz_find+0x42>
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <lfs_ctz_find+0xb4>)
 800b908:	4a07      	ldr	r2, [pc, #28]	; (800b928 <lfs_ctz_find+0xb8>)
 800b90a:	f640 012a 	movw	r1, #2090	; 0x82a
 800b90e:	4807      	ldr	r0, [pc, #28]	; (800b92c <lfs_ctz_find+0xbc>)
 800b910:	f002 f852 	bl	800d9b8 <__assert_func>
    *block = head;
 800b914:	9b05      	ldr	r3, [sp, #20]
 800b916:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b918:	6013      	str	r3, [r2, #0]
    *off = pos;
 800b91a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b91c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b91e:	6013      	str	r3, [r2, #0]
    return 0;
 800b920:	2200      	movs	r2, #0
 800b922:	e7b2      	b.n	800b88a <lfs_ctz_find+0x1a>
 800b924:	0800f50c 	.word	0x0800f50c
 800b928:	0800f3d0 	.word	0x0800f3d0
 800b92c:	0800f430 	.word	0x0800f430

0800b930 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
 800b930:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 800b932:	f7ff fe27 	bl	800b584 <lfs_deinit>
}
 800b936:	bd08      	pop	{r3, pc}

0800b938 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800b938:	b530      	push	{r4, r5, lr}
 800b93a:	b097      	sub	sp, #92	; 0x5c
 800b93c:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 800b93e:	f7ff fea3 	bl	800b688 <lfs_init>
    if (err) {
 800b942:	4605      	mov	r5, r0
 800b944:	2800      	cmp	r0, #0
 800b946:	f040 80ca 	bne.w	800bade <lfs_mount+0x1a6>
    lfs_mdir_t dir = {.tail = {0, 1}};
 800b94a:	2300      	movs	r3, #0
 800b94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b94e:	930c      	str	r3, [sp, #48]	; 0x30
 800b950:	930d      	str	r3, [sp, #52]	; 0x34
 800b952:	930e      	str	r3, [sp, #56]	; 0x38
 800b954:	930f      	str	r3, [sp, #60]	; 0x3c
 800b956:	9310      	str	r3, [sp, #64]	; 0x40
 800b958:	9311      	str	r3, [sp, #68]	; 0x44
 800b95a:	2301      	movs	r3, #1
 800b95c:	9312      	str	r3, [sp, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 800b95e:	e02b      	b.n	800b9b8 <lfs_mount+0x80>
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 800b960:	b29b      	uxth	r3, r3
 800b962:	f640 513d 	movw	r1, #3389	; 0xd3d
 800b966:	4862      	ldr	r0, [pc, #392]	; (800baf0 <lfs_mount+0x1b8>)
 800b968:	f002 fc18 	bl	800e19c <iprintf>
                err = LFS_ERR_INVAL;
 800b96c:	f06f 0515 	mvn.w	r5, #21
                goto cleanup;
 800b970:	e0b2      	b.n	800bad8 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800b972:	f640 5146 	movw	r1, #3398	; 0xd46
 800b976:	485f      	ldr	r0, [pc, #380]	; (800baf4 <lfs_mount+0x1bc>)
 800b978:	f002 fc10 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800b97c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b980:	e0aa      	b.n	800bad8 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800b982:	f640 5151 	movw	r1, #3409	; 0xd51
 800b986:	485c      	ldr	r0, [pc, #368]	; (800baf8 <lfs_mount+0x1c0>)
 800b988:	f002 fc08 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800b98c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b990:	e0a2      	b.n	800bad8 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800b992:	f640 515c 	movw	r1, #3420	; 0xd5c
 800b996:	4859      	ldr	r0, [pc, #356]	; (800bafc <lfs_mount+0x1c4>)
 800b998:	f002 fc00 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800b99c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b9a0:	e09a      	b.n	800bad8 <lfs_mount+0x1a0>
                err = tag;
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	e098      	b.n	800bad8 <lfs_mount+0x1a0>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 800b9a6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800b9aa:	a90b      	add	r1, sp, #44	; 0x2c
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f7ff fa6f 	bl	800ae90 <lfs_dir_getgstate>
        if (err) {
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	f040 8099 	bne.w	800baea <lfs_mount+0x1b2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800b9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9be:	d04f      	beq.n	800ba60 <lfs_mount+0x128>
 800b9c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c6:	d049      	beq.n	800ba5c <lfs_mount+0x124>
 800b9c8:	462b      	mov	r3, r5
    while (!lfs_pair_isnull(dir.tail)) {
 800b9ca:	f013 0f01 	tst.w	r3, #1
 800b9ce:	d149      	bne.n	800ba64 <lfs_mount+0x12c>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b9d0:	9413      	str	r4, [sp, #76]	; 0x4c
 800b9d2:	4b4b      	ldr	r3, [pc, #300]	; (800bb00 <lfs_mount+0x1c8>)
 800b9d4:	9314      	str	r3, [sp, #80]	; 0x50
 800b9d6:	2308      	movs	r3, #8
 800b9d8:	9315      	str	r3, [sp, #84]	; 0x54
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800b9da:	ab13      	add	r3, sp, #76	; 0x4c
 800b9dc:	9303      	str	r3, [sp, #12]
 800b9de:	4b49      	ldr	r3, [pc, #292]	; (800bb04 <lfs_mount+0x1cc>)
 800b9e0:	9302      	str	r3, [sp, #8]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	4b48      	ldr	r3, [pc, #288]	; (800bb08 <lfs_mount+0x1d0>)
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	4b48      	ldr	r3, [pc, #288]	; (800bb0c <lfs_mount+0x1d4>)
 800b9ec:	aa11      	add	r2, sp, #68	; 0x44
 800b9ee:	a90b      	add	r1, sp, #44	; 0x2c
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7fe fd6d 	bl	800a4d0 <lfs_dir_fetchmatch>
        if (tag < 0) {
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	db6d      	blt.n	800bad6 <lfs_mount+0x19e>
        if (tag && !lfs_tag_isdelete(tag)) {
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d0d3      	beq.n	800b9a6 <lfs_mount+0x6e>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b9fe:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 800ba02:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba06:	d0ce      	beq.n	800b9a6 <lfs_mount+0x6e>
            lfs->root[0] = dir.pair[0];
 800ba08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba0a:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 800ba0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0e:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800ba10:	ab05      	add	r3, sp, #20
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4b3e      	ldr	r3, [pc, #248]	; (800bb10 <lfs_mount+0x1d8>)
 800ba16:	4a3d      	ldr	r2, [pc, #244]	; (800bb0c <lfs_mount+0x1d4>)
 800ba18:	a90b      	add	r1, sp, #44	; 0x2c
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f7ff fa2a 	bl	800ae74 <lfs_dir_get>
            if (tag < 0) {
 800ba20:	2800      	cmp	r0, #0
 800ba22:	dbbe      	blt.n	800b9a2 <lfs_mount+0x6a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800ba24:	9b05      	ldr	r3, [sp, #20]
 800ba26:	0c1a      	lsrs	r2, r3, #16
 800ba28:	b291      	uxth	r1, r2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800ba2a:	b298      	uxth	r0, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800ba2c:	2902      	cmp	r1, #2
 800ba2e:	d197      	bne.n	800b960 <lfs_mount+0x28>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d195      	bne.n	800b960 <lfs_mount+0x28>
            if (superblock.name_max) {
 800ba34:	9a08      	ldr	r2, [sp, #32]
 800ba36:	b11a      	cbz	r2, 800ba40 <lfs_mount+0x108>
                if (superblock.name_max > lfs->name_max) {
 800ba38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d899      	bhi.n	800b972 <lfs_mount+0x3a>
                lfs->name_max = superblock.name_max;
 800ba3e:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 800ba40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba42:	b11a      	cbz	r2, 800ba4c <lfs_mount+0x114>
                if (superblock.file_max > lfs->file_max) {
 800ba44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d89b      	bhi.n	800b982 <lfs_mount+0x4a>
                lfs->file_max = superblock.file_max;
 800ba4a:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 800ba4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d0a9      	beq.n	800b9a6 <lfs_mount+0x6e>
                if (superblock.attr_max > lfs->attr_max) {
 800ba52:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d89c      	bhi.n	800b992 <lfs_mount+0x5a>
                lfs->attr_max = superblock.attr_max;
 800ba58:	6762      	str	r2, [r4, #116]	; 0x74
 800ba5a:	e7a4      	b.n	800b9a6 <lfs_mount+0x6e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e7b4      	b.n	800b9ca <lfs_mount+0x92>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7b2      	b.n	800b9ca <lfs_mount+0x92>
 800ba64:	6a23      	ldr	r3, [r4, #32]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d027      	beq.n	800babc <lfs_mount+0x184>
 800ba6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba72:	d021      	beq.n	800bab8 <lfs_mount+0x180>
 800ba74:	462b      	mov	r3, r5
    if (lfs_pair_isnull(lfs->root)) {
 800ba76:	f013 0f01 	tst.w	r3, #1
 800ba7a:	d133      	bne.n	800bae4 <lfs_mount+0x1ac>
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 800ba7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba7e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ba82:	63e3      	str	r3, [r4, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 800ba84:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800ba88:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800ba8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return (tag & 0x70000000) >> 20;
 800ba92:	0d02      	lsrs	r2, r0, #20
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 800ba94:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800ba98:	d112      	bne.n	800bac0 <lfs_mount+0x188>
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 800ba9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ba9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ba9e:	69da      	ldr	r2, [r3, #28]
 800baa0:	fbb1 f3f2 	udiv	r3, r1, r2
 800baa4:	fb02 1313 	mls	r3, r2, r3, r1
 800baa8:	6563      	str	r3, [r4, #84]	; 0x54
    lfs->free.size = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	65a3      	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
 800baae:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7fe fb79 	bl	800a1a8 <lfs_alloc_ack>
    return 0;
 800bab6:	e012      	b.n	800bade <lfs_mount+0x1a6>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bab8:	2301      	movs	r3, #1
 800baba:	e7dc      	b.n	800ba76 <lfs_mount+0x13e>
 800babc:	2301      	movs	r3, #1
 800babe:	e7da      	b.n	800ba76 <lfs_mount+0x13e>
    return (tag & 0x000ffc00) >> 10;
 800bac0:	f3c0 2389 	ubfx	r3, r0, #10, #10
        LFS_DEBUG("Found move %"PRIu32" %"PRIu32" %"PRIu16,
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bac8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800baca:	f640 5179 	movw	r1, #3449	; 0xd79
 800bace:	4811      	ldr	r0, [pc, #68]	; (800bb14 <lfs_mount+0x1dc>)
 800bad0:	f002 fb64 	bl	800e19c <iprintf>
 800bad4:	e7e1      	b.n	800ba9a <lfs_mount+0x162>
            err = tag;
 800bad6:	4605      	mov	r5, r0
    lfs_unmount(lfs);
 800bad8:	4620      	mov	r0, r4
 800bada:	f7ff ff29 	bl	800b930 <lfs_unmount>
}
 800bade:	4628      	mov	r0, r5
 800bae0:	b017      	add	sp, #92	; 0x5c
 800bae2:	bd30      	pop	{r4, r5, pc}
        err = LFS_ERR_INVAL;
 800bae4:	f06f 0515 	mvn.w	r5, #21
 800bae8:	e7f6      	b.n	800bad8 <lfs_mount+0x1a0>
            return err;
 800baea:	4605      	mov	r5, r0
 800baec:	e7f7      	b.n	800bade <lfs_mount+0x1a6>
 800baee:	bf00      	nop
 800baf0:	0800f8b4 	.word	0x0800f8b4
 800baf4:	0800f8dc 	.word	0x0800f8dc
 800baf8:	0800f90c 	.word	0x0800f90c
 800bafc:	0800f93c 	.word	0x0800f93c
 800bb00:	0800f8a8 	.word	0x0800f8a8
 800bb04:	0800a48d 	.word	0x0800a48d
 800bb08:	0ff00008 	.word	0x0ff00008
 800bb0c:	7ffffc00 	.word	0x7ffffc00
 800bb10:	20100018 	.word	0x20100018
 800bb14:	0800f96c 	.word	0x0800f96c

0800bb18 <lfs_fs_traverse>:
        int (*cb)(void *data, lfs_block_t block), void *data) {
 800bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb1a:	b08f      	sub	sp, #60	; 0x3c
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	460e      	mov	r6, r1
 800bb20:	4617      	mov	r7, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 800bb22:	2300      	movs	r3, #0
 800bb24:	9306      	str	r3, [sp, #24]
 800bb26:	9307      	str	r3, [sp, #28]
 800bb28:	9308      	str	r3, [sp, #32]
 800bb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb2c:	930a      	str	r3, [sp, #40]	; 0x28
 800bb2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb30:	930c      	str	r3, [sp, #48]	; 0x30
 800bb32:	2301      	movs	r3, #1
 800bb34:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3c:	d04e      	beq.n	800bbdc <lfs_fs_traverse+0xc4>
 800bb3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d048      	beq.n	800bbd8 <lfs_fs_traverse+0xc0>
 800bb46:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d149      	bne.n	800bbe0 <lfs_fs_traverse+0xc8>
        for (int i = 0; i < 2; i++) {
 800bb4c:	2400      	movs	r4, #0
 800bb4e:	2c01      	cmp	r4, #1
 800bb50:	dc0b      	bgt.n	800bb6a <lfs_fs_traverse+0x52>
            int err = cb(data, dir.tail[i]);
 800bb52:	1da3      	adds	r3, r4, #6
 800bb54:	aa0e      	add	r2, sp, #56	; 0x38
 800bb56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb5a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	47b0      	blx	r6
            if (err) {
 800bb62:	4603      	mov	r3, r0
 800bb64:	b968      	cbnz	r0, 800bb82 <lfs_fs_traverse+0x6a>
        for (int i = 0; i < 2; i++) {
 800bb66:	3401      	adds	r4, #1
 800bb68:	e7f1      	b.n	800bb4e <lfs_fs_traverse+0x36>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800bb6a:	aa0c      	add	r2, sp, #48	; 0x30
 800bb6c:	a906      	add	r1, sp, #24
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7fe ff56 	bl	800aa20 <lfs_dir_fetch>
        if (err) {
 800bb74:	4603      	mov	r3, r0
 800bb76:	b920      	cbnz	r0, 800bb82 <lfs_fs_traverse+0x6a>
        for (uint16_t id = 0; id < dir.count; id++) {
 800bb78:	2400      	movs	r4, #0
 800bb7a:	e007      	b.n	800bb8c <lfs_fs_traverse+0x74>
                if (tag == LFS_ERR_NOENT) {
 800bb7c:	f113 0f02 	cmn.w	r3, #2
 800bb80:	d002      	beq.n	800bb88 <lfs_fs_traverse+0x70>
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	b00f      	add	sp, #60	; 0x3c
 800bb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (uint16_t id = 0; id < dir.count; id++) {
 800bb88:	3401      	adds	r4, #1
 800bb8a:	b2a4      	uxth	r4, r4
 800bb8c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	d9d0      	bls.n	800bb36 <lfs_fs_traverse+0x1e>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800bb94:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800bb96:	aa04      	add	r2, sp, #16
 800bb98:	9200      	str	r2, [sp, #0]
 800bb9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb9e:	f043 0308 	orr.w	r3, r3, #8
 800bba2:	4a28      	ldr	r2, [pc, #160]	; (800bc44 <lfs_fs_traverse+0x12c>)
 800bba4:	a906      	add	r1, sp, #24
 800bba6:	4628      	mov	r0, r5
 800bba8:	f7ff f964 	bl	800ae74 <lfs_dir_get>
            if (tag < 0) {
 800bbac:	1e03      	subs	r3, r0, #0
 800bbae:	dbe5      	blt.n	800bb7c <lfs_fs_traverse+0x64>
    return (tag & 0x7ff00000) >> 20;
 800bbb0:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800bbb4:	f240 2202 	movw	r2, #514	; 0x202
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d1e5      	bne.n	800bb88 <lfs_fs_traverse+0x70>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800bbbc:	9702      	str	r7, [sp, #8]
 800bbbe:	9601      	str	r6, [sp, #4]
 800bbc0:	9b05      	ldr	r3, [sp, #20]
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	462a      	mov	r2, r5
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f7ff fd10 	bl	800b5f0 <lfs_ctz_traverse>
                if (err) {
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0d8      	beq.n	800bb88 <lfs_fs_traverse+0x70>
 800bbd6:	e7d4      	b.n	800bb82 <lfs_fs_traverse+0x6a>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e7b5      	b.n	800bb48 <lfs_fs_traverse+0x30>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e7b3      	b.n	800bb48 <lfs_fs_traverse+0x30>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bbe0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800bbe2:	e00e      	b.n	800bc02 <lfs_fs_traverse+0xea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bbe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bbe8:	9702      	str	r7, [sp, #8]
 800bbea:	9601      	str	r6, [sp, #4]
 800bbec:	9200      	str	r2, [sp, #0]
 800bbee:	462a      	mov	r2, r5
 800bbf0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	f7ff fcfb 	bl	800b5f0 <lfs_ctz_traverse>
            if (err) {
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	b158      	cbz	r0, 800bc16 <lfs_fs_traverse+0xfe>
 800bbfe:	e7c0      	b.n	800bb82 <lfs_fs_traverse+0x6a>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bc00:	6824      	ldr	r4, [r4, #0]
 800bc02:	b1ec      	cbz	r4, 800bc40 <lfs_fs_traverse+0x128>
        if (f->type != LFS_TYPE_REG) {
 800bc04:	79a3      	ldrb	r3, [r4, #6]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d1fa      	bne.n	800bc00 <lfs_fs_traverse+0xe8>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800bc0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc0c:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 800bc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc14:	d0e6      	beq.n	800bbe4 <lfs_fs_traverse+0xcc>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800bc16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc18:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 800bc1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc20:	d1ee      	bne.n	800bc00 <lfs_fs_traverse+0xe8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bc22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc24:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bc26:	9702      	str	r7, [sp, #8]
 800bc28:	9601      	str	r6, [sp, #4]
 800bc2a:	9200      	str	r2, [sp, #0]
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bc32:	4628      	mov	r0, r5
 800bc34:	f7ff fcdc 	bl	800b5f0 <lfs_ctz_traverse>
            if (err) {
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d0e0      	beq.n	800bc00 <lfs_fs_traverse+0xe8>
 800bc3e:	e7a0      	b.n	800bb82 <lfs_fs_traverse+0x6a>
    return 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e79e      	b.n	800bb82 <lfs_fs_traverse+0x6a>
 800bc44:	700ffc00 	.word	0x700ffc00

0800bc48 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
 800bc4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc50:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d02d      	beq.n	800bcb2 <lfs_alloc+0x6a>
            lfs->free.i += 1;
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
 800bc5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bc5c:	3a01      	subs	r2, #1
 800bc5e:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800bc60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc62:	0959      	lsrs	r1, r3, #5
 800bc64:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800bc68:	f003 001f 	and.w	r0, r3, #31
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4082      	lsls	r2, r0
 800bc70:	4211      	tst	r1, r2
 800bc72:	d1ec      	bne.n	800bc4e <lfs_alloc+0x6>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800bc74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bc76:	4413      	add	r3, r2
 800bc78:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bc7a:	6a11      	ldr	r1, [r2, #32]
 800bc7c:	fbb3 f2f1 	udiv	r2, r3, r1
 800bc80:	fb01 3312 	mls	r3, r1, r2, r3
 800bc84:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
 800bc86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc88:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d03b      	beq.n	800bd06 <lfs_alloc+0xbe>
                        (lfs->free.buffer[lfs->free.i / 32]
 800bc8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc90:	0959      	lsrs	r1, r3, #5
 800bc92:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
 800bc96:	f003 001f 	and.w	r0, r3, #31
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
 800bc9e:	4211      	tst	r1, r2
 800bca0:	d005      	beq.n	800bcae <lfs_alloc+0x66>
                    lfs->free.i += 1;
 800bca2:	3301      	adds	r3, #1
 800bca4:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800bca6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	6623      	str	r3, [r4, #96]	; 0x60
 800bcac:	e7eb      	b.n	800bc86 <lfs_alloc+0x3e>
                return 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e02a      	b.n	800bd08 <lfs_alloc+0xc0>
        if (lfs->free.ack == 0) {
 800bcb2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bcb4:	b1e9      	cbz	r1, 800bcf2 <lfs_alloc+0xaa>
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800bcb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bcb8:	441a      	add	r2, r3
                % lfs->cfg->block_count;
 800bcba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bcbc:	6a1e      	ldr	r6, [r3, #32]
 800bcbe:	fbb2 f0f6 	udiv	r0, r2, r6
 800bcc2:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800bcc6:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800bcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcca:	00d2      	lsls	r2, r2, #3
 800bccc:	4291      	cmp	r1, r2
 800bcce:	bf28      	it	cs
 800bcd0:	4611      	movcs	r1, r2
 800bcd2:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800bcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcda:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bcdc:	f001 feea 	bl	800dab4 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 800bce0:	4622      	mov	r2, r4
 800bce2:	490a      	ldr	r1, [pc, #40]	; (800bd0c <lfs_alloc+0xc4>)
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7ff ff17 	bl	800bb18 <lfs_fs_traverse>
        if (err) {
 800bcea:	4603      	mov	r3, r0
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0ae      	beq.n	800bc4e <lfs_alloc+0x6>
 800bcf0:	e00a      	b.n	800bd08 <lfs_alloc+0xc0>
            LFS_WARN("No more free space %"PRIu32,
 800bcf2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bcf4:	441a      	add	r2, r3
 800bcf6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800bcfa:	4805      	ldr	r0, [pc, #20]	; (800bd10 <lfs_alloc+0xc8>)
 800bcfc:	f002 fa4e 	bl	800e19c <iprintf>
            return LFS_ERR_NOSPC;
 800bd00:	f06f 031b 	mvn.w	r3, #27
 800bd04:	e000      	b.n	800bd08 <lfs_alloc+0xc0>
                return 0;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	0800a175 	.word	0x0800a175
 800bd10:	0800f408 	.word	0x0800f408

0800bd14 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	4606      	mov	r6, r0
 800bd1a:	460d      	mov	r5, r1
    for (int i = 0; i < 2; i++) {
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	2c01      	cmp	r4, #1
 800bd20:	dc0d      	bgt.n	800bd3e <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800bd22:	3401      	adds	r4, #1
 800bd24:	f004 0101 	and.w	r1, r4, #1
 800bd28:	bf48      	it	mi
 800bd2a:	4249      	negmi	r1, r1
 800bd2c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ff89 	bl	800bc48 <lfs_alloc>
        if (err) {
 800bd36:	4603      	mov	r3, r0
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d0f0      	beq.n	800bd1e <lfs_dir_alloc+0xa>
 800bd3c:	e021      	b.n	800bd82 <lfs_dir_alloc+0x6e>
    int err = lfs_bd_read(lfs,
 800bd3e:	462a      	mov	r2, r5
 800bd40:	f852 0b08 	ldr.w	r0, [r2], #8
 800bd44:	2304      	movs	r3, #4
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	9202      	str	r2, [sp, #8]
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	9101      	str	r1, [sp, #4]
 800bd4e:	9000      	str	r0, [sp, #0]
 800bd50:	4632      	mov	r2, r6
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7fe fa94 	bl	800a280 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 800bd58:	68aa      	ldr	r2, [r5, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b110      	cbz	r0, 800bd64 <lfs_dir_alloc+0x50>
 800bd5e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bd62:	d10e      	bne.n	800bd82 <lfs_dir_alloc+0x6e>
    dir->rev += dir->rev & 1;
 800bd64:	3201      	adds	r2, #1
 800bd66:	f022 0201 	bic.w	r2, r2, #1
 800bd6a:	60aa      	str	r2, [r5, #8]
    dir->off = sizeof(dir->rev);
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	60eb      	str	r3, [r5, #12]
    dir->etag = 0xffffffff;
 800bd70:	f04f 32ff 	mov.w	r2, #4294967295
 800bd74:	612a      	str	r2, [r5, #16]
    dir->count = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	82ab      	strh	r3, [r5, #20]
    dir->tail[0] = 0xffffffff;
 800bd7a:	61aa      	str	r2, [r5, #24]
    dir->tail[1] = 0xffffffff;
 800bd7c:	61ea      	str	r2, [r5, #28]
    dir->erased = false;
 800bd7e:	75ab      	strb	r3, [r5, #22]
    dir->split = false;
 800bd80:	75eb      	strb	r3, [r5, #23]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	b004      	add	sp, #16
 800bd86:	bd70      	pop	{r4, r5, r6, pc}

0800bd88 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8a:	b089      	sub	sp, #36	; 0x24
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460e      	mov	r6, r1
 800bd90:	e050      	b.n	800be34 <lfs_file_relocate+0xac>
                err = lfs_bd_read(lfs,
 800bd92:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800bd94:	2101      	movs	r1, #1
 800bd96:	9103      	str	r1, [sp, #12]
 800bd98:	f10d 011b 	add.w	r1, sp, #27
 800bd9c:	9102      	str	r1, [sp, #8]
 800bd9e:	9401      	str	r4, [sp, #4]
 800bda0:	9200      	str	r2, [sp, #0]
 800bda2:	1b1b      	subs	r3, r3, r4
 800bda4:	462a      	mov	r2, r5
 800bda6:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f7fe fa68 	bl	800a280 <lfs_bd_read>
                if (err) {
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d151      	bne.n	800be58 <lfs_file_relocate+0xd0>
            err = lfs_bd_prog(lfs,
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	9303      	str	r3, [sp, #12]
 800bdb8:	f10d 021b 	add.w	r2, sp, #27
 800bdbc:	9202      	str	r2, [sp, #8]
 800bdbe:	9401      	str	r4, [sp, #4]
 800bdc0:	9a07      	ldr	r2, [sp, #28]
 800bdc2:	9200      	str	r2, [sp, #0]
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	f105 0110 	add.w	r1, r5, #16
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7ff f972 	bl	800b0b4 <lfs_bd_prog>
            if (err) {
 800bdd0:	bb20      	cbnz	r0, 800be1c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800bdd2:	3401      	adds	r4, #1
 800bdd4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	d942      	bls.n	800be60 <lfs_file_relocate+0xd8>
            if (file->flags & LFS_F_INLINE) {
 800bdda:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800bddc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800bde0:	d0d7      	beq.n	800bd92 <lfs_file_relocate+0xa>
                err = lfs_dir_getread(lfs, &file->m,
 800bde2:	1b1b      	subs	r3, r3, r4
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800bde4:	88b2      	ldrh	r2, [r6, #4]
 800bde6:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 800bde8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800bdec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	9105      	str	r1, [sp, #20]
 800bdf4:	f10d 011b 	add.w	r1, sp, #27
 800bdf8:	9104      	str	r1, [sp, #16]
 800bdfa:	9403      	str	r4, [sp, #12]
 800bdfc:	9202      	str	r2, [sp, #8]
 800bdfe:	4a28      	ldr	r2, [pc, #160]	; (800bea0 <lfs_file_relocate+0x118>)
 800be00:	9201      	str	r2, [sp, #4]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	f106 0340 	add.w	r3, r6, #64	; 0x40
 800be08:	2200      	movs	r2, #0
 800be0a:	f106 0108 	add.w	r1, r6, #8
 800be0e:	4628      	mov	r0, r5
 800be10:	f7ff f868 	bl	800aee4 <lfs_dir_getread>
                if (err) {
 800be14:	2800      	cmp	r0, #0
 800be16:	d0cd      	beq.n	800bdb4 <lfs_file_relocate+0x2c>
                    return err;
 800be18:	4607      	mov	r7, r0
 800be1a:	e03e      	b.n	800be9a <lfs_file_relocate+0x112>
                if (err == LFS_ERR_CORRUPT) {
 800be1c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800be20:	d118      	bne.n	800be54 <lfs_file_relocate+0xcc>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800be22:	9a07      	ldr	r2, [sp, #28]
 800be24:	f44f 611b 	mov.w	r1, #2480	; 0x9b0
 800be28:	481e      	ldr	r0, [pc, #120]	; (800bea4 <lfs_file_relocate+0x11c>)
 800be2a:	f002 f9b7 	bl	800e19c <iprintf>
    rcache->block = 0xffffffff;
 800be2e:	f04f 33ff 	mov.w	r3, #4294967295
 800be32:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 800be34:	a907      	add	r1, sp, #28
 800be36:	4628      	mov	r0, r5
 800be38:	f7ff ff06 	bl	800bc48 <lfs_alloc>
        if (err) {
 800be3c:	4607      	mov	r7, r0
 800be3e:	bb60      	cbnz	r0, 800be9a <lfs_file_relocate+0x112>
        err = lfs_bd_erase(lfs, nblock);
 800be40:	9907      	ldr	r1, [sp, #28]
 800be42:	4628      	mov	r0, r5
 800be44:	f7fe fa08 	bl	800a258 <lfs_bd_erase>
        if (err) {
 800be48:	4607      	mov	r7, r0
 800be4a:	b138      	cbz	r0, 800be5c <lfs_file_relocate+0xd4>
            if (err == LFS_ERR_CORRUPT) {
 800be4c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800be50:	d0e7      	beq.n	800be22 <lfs_file_relocate+0x9a>
 800be52:	e022      	b.n	800be9a <lfs_file_relocate+0x112>
                return err;
 800be54:	4607      	mov	r7, r0
 800be56:	e020      	b.n	800be9a <lfs_file_relocate+0x112>
                    return err;
 800be58:	4607      	mov	r7, r0
 800be5a:	e01e      	b.n	800be9a <lfs_file_relocate+0x112>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800be5c:	2400      	movs	r4, #0
 800be5e:	e7b9      	b.n	800bdd4 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800be60:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800be62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be64:	69e9      	ldr	r1, [r5, #28]
 800be66:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800be68:	f001 fe19 	bl	800da9e <memcpy>
        file->cache.block = lfs->pcache.block;
 800be6c:	692b      	ldr	r3, [r5, #16]
 800be6e:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800be70:	696b      	ldr	r3, [r5, #20]
 800be72:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800be74:	69ab      	ldr	r3, [r5, #24]
 800be76:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800be78:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800be7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be7c:	21ff      	movs	r1, #255	; 0xff
 800be7e:	69e8      	ldr	r0, [r5, #28]
 800be80:	f001 fe18 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800be84:	f04f 33ff 	mov.w	r3, #4294967295
 800be88:	612b      	str	r3, [r5, #16]
        file->block = nblock;
 800be8a:	9b07      	ldr	r3, [sp, #28]
 800be8c:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags &= ~LFS_F_INLINE;
 800be8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800be90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
        file->flags |= LFS_F_WRITING;
 800be94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be98:	6333      	str	r3, [r6, #48]	; 0x30
}
 800be9a:	4638      	mov	r0, r7
 800be9c:	b009      	add	sp, #36	; 0x24
 800be9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea0:	fff7fc00 	.word	0xfff7fc00
 800bea4:	0800f614 	.word	0x0800f614

0800bea8 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	b089      	sub	sp, #36	; 0x24
 800beae:	4604      	mov	r4, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	4616      	mov	r6, r2
 800beb4:	9305      	str	r3, [sp, #20]
 800beb6:	e04f      	b.n	800bf58 <lfs_ctz_extend+0xb0>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800beb8:	4b5f      	ldr	r3, [pc, #380]	; (800c038 <lfs_ctz_extend+0x190>)
 800beba:	4a60      	ldr	r2, [pc, #384]	; (800c03c <lfs_ctz_extend+0x194>)
 800bebc:	f640 013e 	movw	r1, #2110	; 0x83e
 800bec0:	485f      	ldr	r0, [pc, #380]	; (800c040 <lfs_ctz_extend+0x198>)
 800bec2:	f001 fd79 	bl	800d9b8 <__assert_func>
            if (size == 0) {
 800bec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d032      	beq.n	800bf32 <lfs_ctz_extend+0x8a>
            size -= 1;
 800becc:	3b01      	subs	r3, #1
 800bece:	9312      	str	r3, [sp, #72]	; 0x48
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 800bed0:	a912      	add	r1, sp, #72	; 0x48
 800bed2:	4620      	mov	r0, r4
 800bed4:	f7ff fb6f 	bl	800b5b6 <lfs_ctz_index>
            size += 1;
 800bed8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800beda:	3301      	adds	r3, #1
 800bedc:	9312      	str	r3, [sp, #72]	; 0x48
            if (size != lfs->cfg->block_size) {
 800bede:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bee0:	69d2      	ldr	r2, [r2, #28]
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d05b      	beq.n	800bf9e <lfs_ctz_extend+0xf6>
                for (lfs_off_t i = 0; i < size; i++) {
 800bee6:	2500      	movs	r5, #0
 800bee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800beea:	42ab      	cmp	r3, r5
 800beec:	d94d      	bls.n	800bf8a <lfs_ctz_extend+0xe2>
                    err = lfs_bd_read(lfs,
 800beee:	2201      	movs	r2, #1
 800bef0:	9203      	str	r2, [sp, #12]
 800bef2:	f10d 021b 	add.w	r2, sp, #27
 800bef6:	9202      	str	r2, [sp, #8]
 800bef8:	9501      	str	r5, [sp, #4]
 800befa:	9a05      	ldr	r2, [sp, #20]
 800befc:	9200      	str	r2, [sp, #0]
 800befe:	1b5b      	subs	r3, r3, r5
 800bf00:	4632      	mov	r2, r6
 800bf02:	2100      	movs	r1, #0
 800bf04:	4620      	mov	r0, r4
 800bf06:	f7fe f9bb 	bl	800a280 <lfs_bd_read>
                    if (err) {
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d13a      	bne.n	800bf86 <lfs_ctz_extend+0xde>
                    err = lfs_bd_prog(lfs,
 800bf10:	2301      	movs	r3, #1
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	f10d 021b 	add.w	r2, sp, #27
 800bf18:	9202      	str	r2, [sp, #8]
 800bf1a:	9501      	str	r5, [sp, #4]
 800bf1c:	9a07      	ldr	r2, [sp, #28]
 800bf1e:	9200      	str	r2, [sp, #0]
 800bf20:	4632      	mov	r2, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	4620      	mov	r0, r4
 800bf26:	f7ff f8c5 	bl	800b0b4 <lfs_bd_prog>
                    if (err) {
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	b940      	cbnz	r0, 800bf40 <lfs_ctz_extend+0x98>
                for (lfs_off_t i = 0; i < size; i++) {
 800bf2e:	3501      	adds	r5, #1
 800bf30:	e7da      	b.n	800bee8 <lfs_ctz_extend+0x40>
                *block = nblock;
 800bf32:	9b07      	ldr	r3, [sp, #28]
 800bf34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf36:	6013      	str	r3, [r2, #0]
                *off = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf3c:	6013      	str	r3, [r2, #0]
                return 0;
 800bf3e:	e02a      	b.n	800bf96 <lfs_ctz_extend+0xee>
                        if (err == LFS_ERR_CORRUPT) {
 800bf40:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bf44:	d11f      	bne.n	800bf86 <lfs_ctz_extend+0xde>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800bf46:	9a07      	ldr	r2, [sp, #28]
 800bf48:	f640 0191 	movw	r1, #2193	; 0x891
 800bf4c:	483d      	ldr	r0, [pc, #244]	; (800c044 <lfs_ctz_extend+0x19c>)
 800bf4e:	f002 f925 	bl	800e19c <iprintf>
    rcache->block = 0xffffffff;
 800bf52:	f04f 33ff 	mov.w	r3, #4294967295
 800bf56:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 800bf58:	a907      	add	r1, sp, #28
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7ff fe74 	bl	800bc48 <lfs_alloc>
        if (err) {
 800bf60:	4680      	mov	r8, r0
 800bf62:	b9c0      	cbnz	r0, 800bf96 <lfs_ctz_extend+0xee>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800bf64:	9907      	ldr	r1, [sp, #28]
 800bf66:	2901      	cmp	r1, #1
 800bf68:	d9a6      	bls.n	800beb8 <lfs_ctz_extend+0x10>
 800bf6a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	d8a2      	bhi.n	800beb8 <lfs_ctz_extend+0x10>
            err = lfs_bd_erase(lfs, nblock);
 800bf72:	4620      	mov	r0, r4
 800bf74:	f7fe f970 	bl	800a258 <lfs_bd_erase>
            if (err) {
 800bf78:	4680      	mov	r8, r0
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d0a3      	beq.n	800bec6 <lfs_ctz_extend+0x1e>
                if (err == LFS_ERR_CORRUPT) {
 800bf7e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bf82:	d0e0      	beq.n	800bf46 <lfs_ctz_extend+0x9e>
 800bf84:	e007      	b.n	800bf96 <lfs_ctz_extend+0xee>
                        return err;
 800bf86:	4698      	mov	r8, r3
 800bf88:	e005      	b.n	800bf96 <lfs_ctz_extend+0xee>
                *block = nblock;
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf8e:	6013      	str	r3, [r2, #0]
                *off = size;
 800bf90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf94:	6013      	str	r3, [r2, #0]
}
 800bf96:	4640      	mov	r0, r8
 800bf98:	b009      	add	sp, #36	; 0x24
 800bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 800bf9e:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 800bfa0:	fa90 faa0 	rbit	sl, r0
 800bfa4:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
 800bfa8:	f10a 0b01 	add.w	fp, sl, #1
            for (lfs_off_t i = 0; i < skips; i++) {
 800bfac:	2500      	movs	r5, #0
 800bfae:	e00c      	b.n	800bfca <lfs_ctz_extend+0x122>
                    if (err == LFS_ERR_CORRUPT) {
 800bfb0:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bfb4:	d0c7      	beq.n	800bf46 <lfs_ctz_extend+0x9e>
                    return err;
 800bfb6:	4680      	mov	r8, r0
 800bfb8:	e7ed      	b.n	800bf96 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d92b      	bls.n	800c018 <lfs_ctz_extend+0x170>
 800bfc0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bfc2:	6a12      	ldr	r2, [r2, #32]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d827      	bhi.n	800c018 <lfs_ctz_extend+0x170>
            for (lfs_off_t i = 0; i < skips; i++) {
 800bfc8:	3501      	adds	r5, #1
 800bfca:	455d      	cmp	r5, fp
 800bfcc:	d22b      	bcs.n	800c026 <lfs_ctz_extend+0x17e>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800bfce:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800bfd2:	2304      	movs	r3, #4
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	ab05      	add	r3, sp, #20
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfde:	9b07      	ldr	r3, [sp, #28]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f7ff f863 	bl	800b0b4 <lfs_bd_prog>
                head = lfs_fromle32(head);
 800bfee:	9a05      	ldr	r2, [sp, #20]
                if (err) {
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d1dd      	bne.n	800bfb0 <lfs_ctz_extend+0x108>
                if (i != skips-1) {
 800bff4:	4555      	cmp	r5, sl
 800bff6:	d0e0      	beq.n	800bfba <lfs_ctz_extend+0x112>
                    err = lfs_bd_read(lfs,
 800bff8:	2304      	movs	r3, #4
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	a905      	add	r1, sp, #20
 800bffe:	9102      	str	r1, [sp, #8]
 800c000:	f8cd 9004 	str.w	r9, [sp, #4]
 800c004:	9200      	str	r2, [sp, #0]
 800c006:	4632      	mov	r2, r6
 800c008:	2100      	movs	r1, #0
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7fe f938 	bl	800a280 <lfs_bd_read>
                    if (err) {
 800c010:	2800      	cmp	r0, #0
 800c012:	d0d2      	beq.n	800bfba <lfs_ctz_extend+0x112>
                        return err;
 800c014:	4680      	mov	r8, r0
 800c016:	e7be      	b.n	800bf96 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <lfs_ctz_extend+0x1a0>)
 800c01a:	4a08      	ldr	r2, [pc, #32]	; (800c03c <lfs_ctz_extend+0x194>)
 800c01c:	f640 0188 	movw	r1, #2184	; 0x888
 800c020:	4807      	ldr	r0, [pc, #28]	; (800c040 <lfs_ctz_extend+0x198>)
 800c022:	f001 fcc9 	bl	800d9b8 <__assert_func>
            *block = nblock;
 800c026:	9b07      	ldr	r3, [sp, #28]
 800c028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c02a:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 800c02c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c032:	6013      	str	r3, [r2, #0]
            return 0;
 800c034:	e7af      	b.n	800bf96 <lfs_ctz_extend+0xee>
 800c036:	bf00      	nop
 800c038:	0800f4dc 	.word	0x0800f4dc
 800c03c:	0800f3e0 	.word	0x0800f3e0
 800c040:	0800f430 	.word	0x0800f430
 800c044:	0800f614 	.word	0x0800f614
 800c048:	0800f50c 	.word	0x0800f50c

0800c04c <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
 800c04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c050:	b087      	sub	sp, #28
 800c052:	4617      	mov	r7, r2
 800c054:	4699      	mov	r9, r3
    if ((file->flags & 3) == LFS_O_RDONLY) {
 800c056:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c058:	f003 0203 	and.w	r2, r3, #3
 800c05c:	2a01      	cmp	r2, #1
 800c05e:	f000 80f3 	beq.w	800c248 <lfs_file_write+0x1fc>
 800c062:	4605      	mov	r5, r0
 800c064:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 800c066:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c06a:	d125      	bne.n	800c0b8 <lfs_file_write+0x6c>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800c06c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c06e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800c072:	d004      	beq.n	800c07e <lfs_file_write+0x32>
 800c074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c078:	4291      	cmp	r1, r2
 800c07a:	d200      	bcs.n	800c07e <lfs_file_write+0x32>
        file->pos = file->ctz.size;
 800c07c:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
 800c07e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800c080:	eb06 0109 	add.w	r1, r6, r9
 800c084:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800c086:	4291      	cmp	r1, r2
 800c088:	f200 80e1 	bhi.w	800c24e <lfs_file_write+0x202>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800c08c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c090:	d118      	bne.n	800c0c4 <lfs_file_write+0x78>
 800c092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c094:	429e      	cmp	r6, r3
 800c096:	d915      	bls.n	800c0c4 <lfs_file_write+0x78>
        file->pos = file->ctz.size;
 800c098:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 800c09a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c09c:	429e      	cmp	r6, r3
 800c09e:	d911      	bls.n	800c0c4 <lfs_file_write+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 800c0a0:	aa06      	add	r2, sp, #24
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f7ff ffcd 	bl	800c04c <lfs_file_write>
            if (res < 0) {
 800c0b2:	1e03      	subs	r3, r0, #0
 800c0b4:	daf1      	bge.n	800c09a <lfs_file_write+0x4e>
 800c0b6:	e0b0      	b.n	800c21a <lfs_file_write+0x1ce>
        int err = lfs_file_flush(lfs, file);
 800c0b8:	f000 f8cc 	bl	800c254 <lfs_file_flush>
        if (err) {
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0d4      	beq.n	800c06c <lfs_file_write+0x20>
 800c0c2:	e0aa      	b.n	800c21a <lfs_file_write+0x1ce>
    if ((file->flags & LFS_F_INLINE) &&
 800c0c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c0ca:	d014      	beq.n	800c0f6 <lfs_file_write+0xaa>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800c0cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c0ce:	eb00 0209 	add.w	r2, r0, r9
 800c0d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	bf38      	it	cc
 800c0d8:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800c0da:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800c0dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800c0de:	69c9      	ldr	r1, [r1, #28]
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800c0e0:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
 800c0e2:	428b      	cmp	r3, r1
 800c0e4:	bf28      	it	cs
 800c0e6:	460b      	movcs	r3, r1
 800c0e8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800c0ec:	428b      	cmp	r3, r1
 800c0ee:	bf28      	it	cs
 800c0f0:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d82d      	bhi.n	800c152 <lfs_file_write+0x106>
        const void *buffer, lfs_size_t size) {
 800c0f6:	46c8      	mov	r8, r9
    while (nsize > 0) {
 800c0f8:	f1b8 0f00 	cmp.w	r8, #0
 800c0fc:	f000 809e 	beq.w	800c23c <lfs_file_write+0x1f0>
        if (!(file->flags & LFS_F_WRITING) ||
 800c100:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c102:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
 800c106:	d004      	beq.n	800c112 <lfs_file_write+0xc6>
                file->off == lfs->cfg->block_size) {
 800c108:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c10a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c10c:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800c10e:	4288      	cmp	r0, r1
 800c110:	d15a      	bne.n	800c1c8 <lfs_file_write+0x17c>
            if (!(file->flags & LFS_F_INLINE)) {
 800c112:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c116:	d14e      	bne.n	800c1b6 <lfs_file_write+0x16a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800c118:	b90a      	cbnz	r2, 800c11e <lfs_file_write+0xd2>
 800c11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c11c:	bb4b      	cbnz	r3, 800c172 <lfs_file_write+0x126>
                lfs_alloc_ack(lfs);
 800c11e:	4628      	mov	r0, r5
 800c120:	f7fe f842 	bl	800a1a8 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800c124:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c126:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800c12a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800c12e:	9102      	str	r1, [sp, #8]
 800c130:	9201      	str	r2, [sp, #4]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c136:	462a      	mov	r2, r5
 800c138:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c13c:	4628      	mov	r0, r5
 800c13e:	f7ff feb3 	bl	800bea8 <lfs_ctz_extend>
                if (err) {
 800c142:	4603      	mov	r3, r0
 800c144:	2800      	cmp	r0, #0
 800c146:	d03b      	beq.n	800c1c0 <lfs_file_write+0x174>
                    file->flags |= LFS_F_ERRED;
 800c148:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c14a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c14e:	6322      	str	r2, [r4, #48]	; 0x30
                    return err;
 800c150:	e063      	b.n	800c21a <lfs_file_write+0x1ce>
        file->off = file->pos;
 800c152:	63e0      	str	r0, [r4, #60]	; 0x3c
        lfs_alloc_ack(lfs);
 800c154:	4628      	mov	r0, r5
 800c156:	f7fe f827 	bl	800a1a8 <lfs_alloc_ack>
        int err = lfs_file_relocate(lfs, file);
 800c15a:	4621      	mov	r1, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	f7ff fe13 	bl	800bd88 <lfs_file_relocate>
        if (err) {
 800c162:	4603      	mov	r3, r0
 800c164:	2800      	cmp	r0, #0
 800c166:	d0c6      	beq.n	800c0f6 <lfs_file_write+0xaa>
            file->flags |= LFS_F_ERRED;
 800c168:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c16a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c16e:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800c170:	e053      	b.n	800c21a <lfs_file_write+0x1ce>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800c172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c174:	3b01      	subs	r3, #1
 800c176:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c17a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c17e:	9003      	str	r0, [sp, #12]
 800c180:	9102      	str	r1, [sp, #8]
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	9200      	str	r2, [sp, #0]
 800c186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c188:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c18c:	2100      	movs	r1, #0
 800c18e:	4628      	mov	r0, r5
 800c190:	f7ff fb6e 	bl	800b870 <lfs_ctz_find>
                    if (err) {
 800c194:	4603      	mov	r3, r0
 800c196:	b948      	cbnz	r0, 800c1ac <lfs_file_write+0x160>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800c198:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c19a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c19c:	21ff      	movs	r1, #255	; 0xff
 800c19e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c1a0:	f001 fc88 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800c1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a8:	6423      	str	r3, [r4, #64]	; 0x40
 800c1aa:	e7b8      	b.n	800c11e <lfs_file_write+0xd2>
                        file->flags |= LFS_F_ERRED;
 800c1ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c1ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c1b2:	6322      	str	r2, [r4, #48]	; 0x30
                        return err;
 800c1b4:	e031      	b.n	800c21a <lfs_file_write+0x1ce>
                file->block = 0xfffffffe;
 800c1b6:	f06f 0301 	mvn.w	r3, #1
 800c1ba:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800c1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1be:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 800c1c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c6:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800c1c8:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c1ca:	69de      	ldr	r6, [r3, #28]
 800c1cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1ce:	1af6      	subs	r6, r6, r3
 800c1d0:	4546      	cmp	r6, r8
 800c1d2:	bf28      	it	cs
 800c1d4:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800c1d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c1da:	9603      	str	r6, [sp, #12]
 800c1dc:	9702      	str	r7, [sp, #8]
 800c1de:	9201      	str	r2, [sp, #4]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	462a      	mov	r2, r5
 800c1e6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f7fe ff62 	bl	800b0b4 <lfs_bd_prog>
            if (err) {
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	b1b0      	cbz	r0, 800c222 <lfs_file_write+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 800c1f4:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c1f8:	d10b      	bne.n	800c212 <lfs_file_write+0x1c6>
            err = lfs_file_relocate(lfs, file);
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f7ff fdc3 	bl	800bd88 <lfs_file_relocate>
            if (err) {
 800c202:	4603      	mov	r3, r0
 800c204:	2800      	cmp	r0, #0
 800c206:	d0e6      	beq.n	800c1d6 <lfs_file_write+0x18a>
                file->flags |= LFS_F_ERRED;
 800c208:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c20a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c20e:	6322      	str	r2, [r4, #48]	; 0x30
                return err;
 800c210:	e003      	b.n	800c21a <lfs_file_write+0x1ce>
                file->flags |= LFS_F_ERRED;
 800c212:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c214:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c218:	6322      	str	r2, [r4, #48]	; 0x30
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	b007      	add	sp, #28
 800c21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 800c222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c224:	4433      	add	r3, r6
 800c226:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800c228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c22a:	4433      	add	r3, r6
 800c22c:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800c22e:	4437      	add	r7, r6
        nsize -= diff;
 800c230:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ack(lfs);
 800c234:	4628      	mov	r0, r5
 800c236:	f7fd ffb7 	bl	800a1a8 <lfs_alloc_ack>
 800c23a:	e75d      	b.n	800c0f8 <lfs_file_write+0xac>
    file->flags &= ~LFS_F_ERRED;
 800c23c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c23e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c242:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
 800c244:	464b      	mov	r3, r9
 800c246:	e7e8      	b.n	800c21a <lfs_file_write+0x1ce>
        return LFS_ERR_BADF;
 800c248:	f06f 0308 	mvn.w	r3, #8
 800c24c:	e7e5      	b.n	800c21a <lfs_file_write+0x1ce>
        return LFS_ERR_FBIG;
 800c24e:	f06f 031a 	mvn.w	r3, #26
 800c252:	e7e2      	b.n	800c21a <lfs_file_write+0x1ce>

0800c254 <lfs_file_flush>:
    if (file->flags & LFS_F_READING) {
 800c254:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c256:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c25a:	d008      	beq.n	800c26e <lfs_file_flush+0x1a>
        if (!(file->flags & LFS_F_INLINE)) {
 800c25c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c260:	d102      	bne.n	800c268 <lfs_file_flush+0x14>
    rcache->block = 0xffffffff;
 800c262:	f04f 32ff 	mov.w	r2, #4294967295
 800c266:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 800c268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c26c:	630b      	str	r3, [r1, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 800c26e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c274:	d064      	beq.n	800c340 <lfs_file_flush+0xec>
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800c276:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c278:	b097      	sub	sp, #92	; 0x5c
 800c27a:	460c      	mov	r4, r1
 800c27c:	4605      	mov	r5, r0
        lfs_off_t pos = file->pos;
 800c27e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 800c280:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c284:	d14d      	bne.n	800c322 <lfs_file_flush+0xce>
            lfs_file_t orig = {
 800c286:	2254      	movs	r2, #84	; 0x54
 800c288:	2100      	movs	r1, #0
 800c28a:	a801      	add	r0, sp, #4
 800c28c:	f001 fc12 	bl	800dab4 <memset>
                .ctz.head = file->ctz.head,
 800c290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
 800c292:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
 800c294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
 800c296:	930c      	str	r3, [sp, #48]	; 0x30
 800c298:	2301      	movs	r3, #1
 800c29a:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
 800c29c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
 800c29e:	930e      	str	r3, [sp, #56]	; 0x38
 800c2a0:	af11      	add	r7, sp, #68	; 0x44
 800c2a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c2a6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = 0xffffffff;
 800c2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ae:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 800c2b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c2b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d21a      	bcs.n	800c2ee <lfs_file_flush+0x9a>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	f10d 0203 	add.w	r2, sp, #3
 800c2be:	a901      	add	r1, sp, #4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 f843 	bl	800c34c <lfs_file_read>
                if (res < 0) {
 800c2c6:	1e03      	subs	r3, r0, #0
 800c2c8:	db37      	blt.n	800c33a <lfs_file_flush+0xe6>
                res = lfs_file_write(lfs, file, &data, 1);
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	f10d 0203 	add.w	r2, sp, #3
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7ff feba 	bl	800c04c <lfs_file_write>
                if (res < 0) {
 800c2d8:	1e03      	subs	r3, r0, #0
 800c2da:	db2e      	blt.n	800c33a <lfs_file_flush+0xe6>
                if (lfs->rcache.block != 0xffffffff) {
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e2:	d0e5      	beq.n	800c2b0 <lfs_file_flush+0x5c>
    rcache->block = 0xffffffff;
 800c2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	e7e0      	b.n	800c2b0 <lfs_file_flush+0x5c>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	462a      	mov	r2, r5
 800c2f2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f7fe fe84 	bl	800b004 <lfs_bd_flush>
                if (err) {
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	b180      	cbz	r0, 800c322 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
 800c300:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c304:	d119      	bne.n	800c33a <lfs_file_flush+0xe6>
                LFS_DEBUG("Bad block at %"PRIu32, file->block);
 800c306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c308:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800c30c:	480e      	ldr	r0, [pc, #56]	; (800c348 <lfs_file_flush+0xf4>)
 800c30e:	f001 ff45 	bl	800e19c <iprintf>
                err = lfs_file_relocate(lfs, file);
 800c312:	4621      	mov	r1, r4
 800c314:	4628      	mov	r0, r5
 800c316:	f7ff fd37 	bl	800bd88 <lfs_file_relocate>
                if (err) {
 800c31a:	4603      	mov	r3, r0
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d0e6      	beq.n	800c2ee <lfs_file_flush+0x9a>
 800c320:	e00b      	b.n	800c33a <lfs_file_flush+0xe6>
        file->ctz.head = file->block;
 800c322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c324:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 800c326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c328:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800c32a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c32c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 800c330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c334:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
 800c336:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	b017      	add	sp, #92	; 0x5c
 800c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	0800f614 	.word	0x0800f614

0800c34c <lfs_file_read>:
        void *buffer, lfs_size_t size) {
 800c34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c350:	b087      	sub	sp, #28
 800c352:	4617      	mov	r7, r2
 800c354:	461d      	mov	r5, r3
    if ((file->flags & 3) == LFS_O_WRONLY) {
 800c356:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c358:	f003 0203 	and.w	r2, r3, #3
 800c35c:	2a02      	cmp	r2, #2
 800c35e:	f000 8081 	beq.w	800c464 <lfs_file_read+0x118>
 800c362:	4680      	mov	r8, r0
 800c364:	460c      	mov	r4, r1
    if (file->flags & LFS_F_WRITING) {
 800c366:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c36a:	d10a      	bne.n	800c382 <lfs_file_read+0x36>
    if (file->pos >= file->ctz.size) {
 800c36c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c36e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c370:	429a      	cmp	r2, r3
 800c372:	d27a      	bcs.n	800c46a <lfs_file_read+0x11e>
    size = lfs_min(size, file->ctz.size - file->pos);
 800c374:	eba3 0902 	sub.w	r9, r3, r2
 800c378:	45a9      	cmp	r9, r5
 800c37a:	bf28      	it	cs
 800c37c:	46a9      	movcs	r9, r5
    nsize = size;
 800c37e:	464e      	mov	r6, r9
    while (nsize > 0) {
 800c380:	e03d      	b.n	800c3fe <lfs_file_read+0xb2>
        int err = lfs_file_flush(lfs, file);
 800c382:	f7ff ff67 	bl	800c254 <lfs_file_flush>
        if (err) {
 800c386:	4603      	mov	r3, r0
 800c388:	2800      	cmp	r0, #0
 800c38a:	d0ef      	beq.n	800c36c <lfs_file_read+0x20>
 800c38c:	e06e      	b.n	800c46c <lfs_file_read+0x120>
            if (!(file->flags & LFS_F_INLINE)) {
 800c38e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c392:	d041      	beq.n	800c418 <lfs_file_read+0xcc>
                file->block = 0xfffffffe;
 800c394:	f06f 0301 	mvn.w	r3, #1
 800c398:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800c39a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c39c:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
 800c39e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c3a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3a4:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800c3a6:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c3ae:	1a5d      	subs	r5, r3, r1
 800c3b0:	42b5      	cmp	r5, r6
 800c3b2:	bf28      	it	cs
 800c3b4:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 800c3b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c3b8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c3bc:	d041      	beq.n	800c442 <lfs_file_read+0xf6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800c3be:	88a2      	ldrh	r2, [r4, #4]
 800c3c0:	0292      	lsls	r2, r2, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800c3c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c3c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c3ca:	9505      	str	r5, [sp, #20]
 800c3cc:	9704      	str	r7, [sp, #16]
 800c3ce:	9103      	str	r1, [sp, #12]
 800c3d0:	9202      	str	r2, [sp, #8]
 800c3d2:	4a28      	ldr	r2, [pc, #160]	; (800c474 <lfs_file_read+0x128>)
 800c3d4:	9201      	str	r2, [sp, #4]
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f104 0108 	add.w	r1, r4, #8
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	f7fe fd7e 	bl	800aee4 <lfs_dir_getread>
            if (err) {
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d13e      	bne.n	800c46c <lfs_file_read+0x120>
        file->pos += diff;
 800c3ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3f0:	442b      	add	r3, r5
 800c3f2:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800c3f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c3f6:	442b      	add	r3, r5
 800c3f8:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800c3fa:	442f      	add	r7, r5
        nsize -= diff;
 800c3fc:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 800c3fe:	2e00      	cmp	r6, #0
 800c400:	d02e      	beq.n	800c460 <lfs_file_read+0x114>
        if (!(file->flags & LFS_F_READING) ||
 800c402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c404:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c408:	d0c1      	beq.n	800c38e <lfs_file_read+0x42>
                file->off == lfs->cfg->block_size) {
 800c40a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c40c:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800c410:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
 800c412:	4291      	cmp	r1, r2
 800c414:	d1c7      	bne.n	800c3a6 <lfs_file_read+0x5a>
 800c416:	e7ba      	b.n	800c38e <lfs_file_read+0x42>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800c418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c41a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c41c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c420:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c424:	9003      	str	r0, [sp, #12]
 800c426:	9102      	str	r1, [sp, #8]
 800c428:	9201      	str	r2, [sp, #4]
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c42e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c432:	2100      	movs	r1, #0
 800c434:	4640      	mov	r0, r8
 800c436:	f7ff fa1b 	bl	800b870 <lfs_ctz_find>
                if (err) {
 800c43a:	4603      	mov	r3, r0
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d0ae      	beq.n	800c39e <lfs_file_read+0x52>
 800c440:	e014      	b.n	800c46c <lfs_file_read+0x120>
            int err = lfs_bd_read(lfs,
 800c442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c444:	9503      	str	r5, [sp, #12]
 800c446:	9702      	str	r7, [sp, #8]
 800c448:	9101      	str	r1, [sp, #4]
 800c44a:	9200      	str	r2, [sp, #0]
 800c44c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c450:	2100      	movs	r1, #0
 800c452:	4640      	mov	r0, r8
 800c454:	f7fd ff14 	bl	800a280 <lfs_bd_read>
            if (err) {
 800c458:	4603      	mov	r3, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d0c7      	beq.n	800c3ee <lfs_file_read+0xa2>
 800c45e:	e005      	b.n	800c46c <lfs_file_read+0x120>
    return size;
 800c460:	464b      	mov	r3, r9
 800c462:	e003      	b.n	800c46c <lfs_file_read+0x120>
        return LFS_ERR_BADF;
 800c464:	f06f 0308 	mvn.w	r3, #8
 800c468:	e000      	b.n	800c46c <lfs_file_read+0x120>
        return 0;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	b007      	add	sp, #28
 800c470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c474:	fff7fc00 	.word	0xfff7fc00

0800c478 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	4606      	mov	r6, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	4617      	mov	r7, r2
 800c480:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
 800c482:	f7ff fee7 	bl	800c254 <lfs_file_flush>
    if (err) {
 800c486:	4603      	mov	r3, r0
 800c488:	b938      	cbnz	r0, 800c49a <lfs_file_seek+0x22>
    lfs_off_t npos = file->pos;
 800c48a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 800c48c:	b93d      	cbnz	r5, 800c49e <lfs_file_seek+0x26>
        npos = off;
 800c48e:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
 800c490:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c492:	4283      	cmp	r3, r0
 800c494:	d30c      	bcc.n	800c4b0 <lfs_file_seek+0x38>
    file->pos = npos;
 800c496:	6360      	str	r0, [r4, #52]	; 0x34
    return npos;
 800c498:	4603      	mov	r3, r0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
 800c49e:	2d01      	cmp	r5, #1
 800c4a0:	d004      	beq.n	800c4ac <lfs_file_seek+0x34>
    } else if (whence == LFS_SEEK_END) {
 800c4a2:	2d02      	cmp	r5, #2
 800c4a4:	d1f4      	bne.n	800c490 <lfs_file_seek+0x18>
        npos = file->ctz.size + off;
 800c4a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c4a8:	4438      	add	r0, r7
 800c4aa:	e7f1      	b.n	800c490 <lfs_file_seek+0x18>
        npos = file->pos + off;
 800c4ac:	4438      	add	r0, r7
 800c4ae:	e7ef      	b.n	800c490 <lfs_file_seek+0x18>
        return LFS_ERR_INVAL;
 800c4b0:	f06f 0315 	mvn.w	r3, #21
 800c4b4:	e7f1      	b.n	800c49a <lfs_file_seek+0x22>

0800c4b6 <lfs_file_rewind>:
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800c4b6:	b508      	push	{r3, lr}
    lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_SET);
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7ff ffdc 	bl	800c478 <lfs_file_seek>
    if (res < 0) {
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	db00      	blt.n	800c4c6 <lfs_file_rewind+0x10>
    return 0;
 800c4c4:	2000      	movs	r0, #0
}
 800c4c6:	bd08      	pop	{r3, pc}

0800c4c8 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 800c4c8:	b500      	push	{lr}
 800c4ca:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 800c4cc:	aa02      	add	r2, sp, #8
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 800c4d4:	4904      	ldr	r1, [pc, #16]	; (800c4e8 <lfs_fs_size+0x20>)
 800c4d6:	f7ff fb1f 	bl	800bb18 <lfs_fs_traverse>
    if (err) {
 800c4da:	4603      	mov	r3, r0
 800c4dc:	b900      	cbnz	r0, 800c4e0 <lfs_fs_size+0x18>
        return err;
    }

  return size;
 800c4de:	9b01      	ldr	r3, [sp, #4]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	b003      	add	sp, #12
 800c4e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4e8:	0800a24f 	.word	0x0800a24f

0800c4ec <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	b099      	sub	sp, #100	; 0x64
 800c4f2:	4607      	mov	r7, r0
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	4691      	mov	r9, r2
 800c4f8:	469a      	mov	sl, r3
 800c4fa:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800c4fe:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800c502:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 800c506:	684b      	ldr	r3, [r1, #4]
 800c508:	9314      	str	r3, [sp, #80]	; 0x50
 800c50a:	680b      	ldr	r3, [r1, #0]
 800c50c:	9315      	str	r3, [sp, #84]	; 0x54
    while (end - begin > 1) {
 800c50e:	e012      	b.n	800c536 <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
 800c510:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800c514:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c518:	442c      	add	r4, r5
 800c51a:	b2a4      	uxth	r4, r4
 800c51c:	9602      	str	r6, [sp, #8]
 800c51e:	9401      	str	r4, [sp, #4]
 800c520:	f8cd 8000 	str.w	r8, [sp]
 800c524:	4653      	mov	r3, sl
 800c526:	464a      	mov	r2, r9
 800c528:	4659      	mov	r1, fp
 800c52a:	4638      	mov	r0, r7
 800c52c:	f000 ff76 	bl	800d41c <lfs_dir_split>
        if (err) {
 800c530:	2800      	cmp	r0, #0
 800c532:	d160      	bne.n	800c5f6 <lfs_dir_compact+0x10a>
        end = begin + split;
 800c534:	4626      	mov	r6, r4
    while (end - begin > 1) {
 800c536:	1b74      	subs	r4, r6, r5
 800c538:	2c01      	cmp	r4, #1
 800c53a:	dd31      	ble.n	800c5a0 <lfs_dir_compact+0xb4>
        lfs_size_t size = 0;
 800c53c:	2200      	movs	r2, #0
 800c53e:	a918      	add	r1, sp, #96	; 0x60
 800c540:	f841 2d28 	str.w	r2, [r1, #-40]!
        int err = lfs_dir_traverse(lfs,
 800c544:	426b      	negs	r3, r5
 800c546:	b21b      	sxth	r3, r3
 800c548:	9109      	str	r1, [sp, #36]	; 0x24
 800c54a:	49a3      	ldr	r1, [pc, #652]	; (800c7d8 <lfs_dir_compact+0x2ec>)
 800c54c:	9108      	str	r1, [sp, #32]
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	9606      	str	r6, [sp, #24]
 800c552:	9505      	str	r5, [sp, #20]
 800c554:	9204      	str	r2, [sp, #16]
 800c556:	4ba1      	ldr	r3, [pc, #644]	; (800c7dc <lfs_dir_compact+0x2f0>)
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	9202      	str	r2, [sp, #8]
 800c55c:	f8cd a004 	str.w	sl, [sp, #4]
 800c560:	f8cd 9000 	str.w	r9, [sp]
 800c564:	f04f 33ff 	mov.w	r3, #4294967295
 800c568:	4641      	mov	r1, r8
 800c56a:	4638      	mov	r0, r7
 800c56c:	f7fe fa9c 	bl	800aaa8 <lfs_dir_traverse>
        if (err) {
 800c570:	2800      	cmp	r0, #0
 800c572:	f040 81c1 	bne.w	800c8f8 <lfs_dir_compact+0x40c>
        if (end - begin < 0xff &&
 800c576:	2cfe      	cmp	r4, #254	; 0xfe
 800c578:	dcca      	bgt.n	800c510 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800c57a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c57c:	69da      	ldr	r2, [r3, #28]
 800c57e:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
 800c582:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800c584:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800c588:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
 800c58a:	fbb3 f2f0 	udiv	r2, r3, r0
 800c58e:	fb00 3212 	mls	r2, r0, r2, r3
 800c592:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 800c594:	428b      	cmp	r3, r1
 800c596:	bf28      	it	cs
 800c598:	460b      	movcs	r3, r1
 800c59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if (end - begin < 0xff &&
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d8b7      	bhi.n	800c510 <lfs_dir_compact+0x24>
    dir->rev += 1;
 800c5a0:	f8db 3008 	ldr.w	r3, [fp, #8]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	f8cb 3008 	str.w	r3, [fp, #8]
    if (lfs->cfg->block_cycles &&
 800c5aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c5ae:	2a00      	cmp	r2, #0
 800c5b0:	d048      	beq.n	800c644 <lfs_dir_compact+0x158>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 800c5b2:	3201      	adds	r2, #1
 800c5b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5b8:	fb02 3211 	mls	r2, r2, r1, r3
    if (lfs->cfg->block_cycles &&
 800c5bc:	2a00      	cmp	r2, #0
 800c5be:	d145      	bne.n	800c64c <lfs_dir_compact+0x160>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c5c0:	f8db 3000 	ldr.w	r3, [fp]
 800c5c4:	b143      	cbz	r3, 800c5d8 <lfs_dir_compact+0xec>
 800c5c6:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c5ca:	2a01      	cmp	r2, #1
 800c5cc:	d004      	beq.n	800c5d8 <lfs_dir_compact+0xec>
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d002      	beq.n	800c5d8 <lfs_dir_compact+0xec>
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	f040 8165 	bne.w	800c8a2 <lfs_dir_compact+0x3b6>
            lfs_ssize_t res = lfs_fs_size(lfs);
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff ff75 	bl	800c4c8 <lfs_fs_size>
            if (res < 0) {
 800c5de:	1e02      	subs	r2, r0, #0
 800c5e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5e2:	db3f      	blt.n	800c664 <lfs_dir_compact+0x178>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800c5e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 800c5ec:	d30e      	bcc.n	800c60c <lfs_dir_compact+0x120>
    bool exhausted = false;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800c5f4:	e02d      	b.n	800c652 <lfs_dir_compact+0x166>
 800c5f6:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800c5f8:	f110 0f1c 	cmn.w	r0, #28
 800c5fc:	d132      	bne.n	800c664 <lfs_dir_compact+0x178>
 800c5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	3b24      	subs	r3, #36	; 0x24
 800c604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c606:	4293      	cmp	r3, r2
 800c608:	d2ca      	bcs.n	800c5a0 <lfs_dir_compact+0xb4>
 800c60a:	e02b      	b.n	800c664 <lfs_dir_compact+0x178>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800c60c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800c610:	f240 51ba 	movw	r1, #1466	; 0x5ba
 800c614:	4872      	ldr	r0, [pc, #456]	; (800c7e0 <lfs_dir_compact+0x2f4>)
 800c616:	f001 fdc1 	bl	800e19c <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c61a:	9602      	str	r6, [sp, #8]
 800c61c:	9501      	str	r5, [sp, #4]
 800c61e:	f8cd 8000 	str.w	r8, [sp]
 800c622:	4653      	mov	r3, sl
 800c624:	464a      	mov	r2, r9
 800c626:	4659      	mov	r1, fp
 800c628:	4638      	mov	r0, r7
 800c62a:	f000 fef7 	bl	800d41c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
 800c62e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c630:	b110      	cbz	r0, 800c638 <lfs_dir_compact+0x14c>
 800c632:	f110 0f1c 	cmn.w	r0, #28
 800c636:	d115      	bne.n	800c664 <lfs_dir_compact+0x178>
                if (!err) {
 800c638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c63a:	b1bb      	cbz	r3, 800c66c <lfs_dir_compact+0x180>
    bool exhausted = false;
 800c63c:	2300      	movs	r3, #0
 800c63e:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c640:	930d      	str	r3, [sp, #52]	; 0x34
 800c642:	e006      	b.n	800c652 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c644:	2300      	movs	r3, #0
 800c646:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c648:	930d      	str	r3, [sp, #52]	; 0x34
 800c64a:	e002      	b.n	800c652 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c64c:	2300      	movs	r3, #0
 800c64e:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c650:	930d      	str	r3, [sp, #52]	; 0x34
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800c652:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800c656:	4622      	mov	r2, r4
 800c658:	4659      	mov	r1, fp
 800c65a:	4638      	mov	r0, r7
 800c65c:	f7fe fc18 	bl	800ae90 <lfs_dir_getgstate>
            if (err) {
 800c660:	900b      	str	r0, [sp, #44]	; 0x2c
 800c662:	b170      	cbz	r0, 800c682 <lfs_dir_compact+0x196>
}
 800c664:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c666:	b019      	add	sp, #100	; 0x64
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    end = begin;
 800c66c:	462e      	mov	r6, r5
    bool exhausted = false;
 800c66e:	2300      	movs	r3, #0
 800c670:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c672:	930d      	str	r3, [sp, #52]	; 0x34
 800c674:	e7ed      	b.n	800c652 <lfs_dir_compact+0x166>
        relocated = true;
 800c676:	2301      	movs	r3, #1
 800c678:	930d      	str	r3, [sp, #52]	; 0x34
 800c67a:	e7ea      	b.n	800c652 <lfs_dir_compact+0x166>
 800c67c:	2301      	movs	r3, #1
 800c67e:	930d      	str	r3, [sp, #52]	; 0x34
 800c680:	e7e7      	b.n	800c652 <lfs_dir_compact+0x166>
                .block = dir->pair[1],
 800c682:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
 800c686:	910e      	str	r1, [sp, #56]	; 0x38
 800c688:	2300      	movs	r3, #0
 800c68a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c68c:	f04f 32ff 	mov.w	r2, #4294967295
 800c690:	9210      	str	r2, [sp, #64]	; 0x40
 800c692:	9211      	str	r2, [sp, #68]	; 0x44
 800c694:	9312      	str	r3, [sp, #72]	; 0x48
                .end = lfs->cfg->block_size - 8,
 800c696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800c69c:	9313      	str	r3, [sp, #76]	; 0x4c
            err = lfs_bd_erase(lfs, dir->pair[1]);
 800c69e:	4638      	mov	r0, r7
 800c6a0:	f7fd fdda 	bl	800a258 <lfs_bd_erase>
            if (err) {
 800c6a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6a6:	b340      	cbz	r0, 800c6fa <lfs_dir_compact+0x20e>
                if (err == LFS_ERR_CORRUPT) {
 800c6a8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c6ac:	d1da      	bne.n	800c664 <lfs_dir_compact+0x178>
    rcache->block = 0xffffffff;
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b2:	613b      	str	r3, [r7, #16]
        if (!exhausted) {
 800c6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 80f6 	beq.w	800c8a8 <lfs_dir_compact+0x3bc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c6bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	f000 80fa 	beq.w	800c8b8 <lfs_dir_compact+0x3cc>
 800c6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	f000 80f6 	beq.w	800c8b8 <lfs_dir_compact+0x3cc>
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	f000 80f3 	beq.w	800c8b8 <lfs_dir_compact+0x3cc>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80f0 	beq.w	800c8b8 <lfs_dir_compact+0x3cc>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800c6d8:	f10b 0104 	add.w	r1, fp, #4
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff fab3 	bl	800bc48 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 800c6e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d0c6      	beq.n	800c676 <lfs_dir_compact+0x18a>
 800c6e8:	f110 0f1c 	cmn.w	r0, #28
 800c6ec:	d0c6      	beq.n	800c67c <lfs_dir_compact+0x190>
 800c6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0b7      	beq.n	800c664 <lfs_dir_compact+0x178>
        relocated = true;
 800c6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f8:	e7ab      	b.n	800c652 <lfs_dir_compact+0x166>
            err = lfs_dir_commitprog(lfs, &commit,
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	f10b 0208 	add.w	r2, fp, #8
 800c700:	a90e      	add	r1, sp, #56	; 0x38
 800c702:	4638      	mov	r0, r7
 800c704:	f7fe fd4a 	bl	800b19c <lfs_dir_commitprog>
            if (err) {
 800c708:	900b      	str	r0, [sp, #44]	; 0x2c
 800c70a:	b118      	cbz	r0, 800c714 <lfs_dir_compact+0x228>
                if (err == LFS_ERR_CORRUPT) {
 800c70c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c710:	d1a8      	bne.n	800c664 <lfs_dir_compact+0x178>
 800c712:	e7cc      	b.n	800c6ae <lfs_dir_compact+0x1c2>
            err = lfs_dir_traverse(lfs,
 800c714:	426b      	negs	r3, r5
 800c716:	b21b      	sxth	r3, r3
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c718:	9716      	str	r7, [sp, #88]	; 0x58
 800c71a:	aa0e      	add	r2, sp, #56	; 0x38
 800c71c:	9217      	str	r2, [sp, #92]	; 0x5c
            err = lfs_dir_traverse(lfs,
 800c71e:	aa16      	add	r2, sp, #88	; 0x58
 800c720:	9209      	str	r2, [sp, #36]	; 0x24
 800c722:	4a30      	ldr	r2, [pc, #192]	; (800c7e4 <lfs_dir_compact+0x2f8>)
 800c724:	9208      	str	r2, [sp, #32]
 800c726:	9307      	str	r3, [sp, #28]
 800c728:	9606      	str	r6, [sp, #24]
 800c72a:	9505      	str	r5, [sp, #20]
 800c72c:	2200      	movs	r2, #0
 800c72e:	9204      	str	r2, [sp, #16]
 800c730:	4b2a      	ldr	r3, [pc, #168]	; (800c7dc <lfs_dir_compact+0x2f0>)
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	9202      	str	r2, [sp, #8]
 800c736:	f8cd a004 	str.w	sl, [sp, #4]
 800c73a:	f8cd 9000 	str.w	r9, [sp]
 800c73e:	f04f 33ff 	mov.w	r3, #4294967295
 800c742:	4641      	mov	r1, r8
 800c744:	4638      	mov	r0, r7
 800c746:	f7fe f9af 	bl	800aaa8 <lfs_dir_traverse>
            if (err) {
 800c74a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c74c:	b118      	cbz	r0, 800c756 <lfs_dir_compact+0x26a>
                if (err == LFS_ERR_CORRUPT) {
 800c74e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c752:	d187      	bne.n	800c664 <lfs_dir_compact+0x178>
 800c754:	e7ab      	b.n	800c6ae <lfs_dir_compact+0x1c2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c756:	f8db 3018 	ldr.w	r3, [fp, #24]
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d014      	beq.n	800c78a <lfs_dir_compact+0x29e>
 800c760:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c768:	d00d      	beq.n	800c786 <lfs_dir_compact+0x29a>
 800c76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
 800c76c:	f013 0f01 	tst.w	r3, #1
 800c770:	d00d      	beq.n	800c78e <lfs_dir_compact+0x2a2>
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c774:	bb13      	cbnz	r3, 800c7bc <lfs_dir_compact+0x2d0>
 800c776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 800c778:	2b02      	cmp	r3, #2
 800c77a:	dc1d      	bgt.n	800c7b8 <lfs_dir_compact+0x2cc>
        if (((uint32_t*)a)[i] != 0) {
 800c77c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800c780:	bb3a      	cbnz	r2, 800c7d2 <lfs_dir_compact+0x2e6>
    for (int i = 0; i < 3; i++) {
 800c782:	3301      	adds	r3, #1
 800c784:	e7f8      	b.n	800c778 <lfs_dir_compact+0x28c>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c786:	2301      	movs	r3, #1
 800c788:	e7f0      	b.n	800c76c <lfs_dir_compact+0x280>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e7ee      	b.n	800c76c <lfs_dir_compact+0x280>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800c78e:	f89b 2017 	ldrb.w	r2, [fp, #23]
 800c792:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 800c796:	f10b 0318 	add.w	r3, fp, #24
 800c79a:	4913      	ldr	r1, [pc, #76]	; (800c7e8 <lfs_dir_compact+0x2fc>)
 800c79c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800c7a0:	a90e      	add	r1, sp, #56	; 0x38
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	f7fe fd1a 	bl	800b1dc <lfs_dir_commitattr>
                if (err) {
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d0e2      	beq.n	800c772 <lfs_dir_compact+0x286>
                    if (err == LFS_ERR_CORRUPT) {
 800c7ac:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c7b0:	f43f af7d 	beq.w	800c6ae <lfs_dir_compact+0x1c2>
                    return err;
 800c7b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7b6:	e755      	b.n	800c664 <lfs_dir_compact+0x178>
    return true;
 800c7b8:	2301      	movs	r3, #1
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c7ba:	b1bb      	cbz	r3, 800c7ec <lfs_dir_compact+0x300>
            err = lfs_dir_commitcrc(lfs, &commit);
 800c7bc:	a90e      	add	r1, sp, #56	; 0x38
 800c7be:	4638      	mov	r0, r7
 800c7c0:	f7fe fd83 	bl	800b2ca <lfs_dir_commitcrc>
            if (err) {
 800c7c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7c6:	b1f8      	cbz	r0, 800c808 <lfs_dir_compact+0x31c>
                if (err == LFS_ERR_CORRUPT) {
 800c7c8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c7cc:	f47f af4a 	bne.w	800c664 <lfs_dir_compact+0x178>
 800c7d0:	e76d      	b.n	800c6ae <lfs_dir_compact+0x1c2>
            return false;
 800c7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d4:	e7f1      	b.n	800c7ba <lfs_dir_compact+0x2ce>
 800c7d6:	bf00      	nop
 800c7d8:	0800a211 	.word	0x0800a211
 800c7dc:	400ffc00 	.word	0x400ffc00
 800c7e0:	0800f548 	.word	0x0800f548
 800c7e4:	0800b29d 	.word	0x0800b29d
 800c7e8:	000ffc08 	.word	0x000ffc08
                err = lfs_dir_commitattr(lfs, &commit,
 800c7ec:	4623      	mov	r3, r4
 800c7ee:	4a43      	ldr	r2, [pc, #268]	; (800c8fc <lfs_dir_compact+0x410>)
 800c7f0:	a90e      	add	r1, sp, #56	; 0x38
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	f7fe fcf2 	bl	800b1dc <lfs_dir_commitattr>
                if (err) {
 800c7f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d0de      	beq.n	800c7bc <lfs_dir_compact+0x2d0>
                    if (err == LFS_ERR_CORRUPT) {
 800c7fe:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c802:	f47f af2f 	bne.w	800c664 <lfs_dir_compact+0x178>
 800c806:	e752      	b.n	800c6ae <lfs_dir_compact+0x1c2>
    lfs_block_t t = pair[0];
 800c808:	f8db 1000 	ldr.w	r1, [fp]
    pair[0] = pair[1];
 800c80c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c810:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
 800c814:	f8cb 1004 	str.w	r1, [fp, #4]
            dir->count = end - begin;
 800c818:	1b75      	subs	r5, r6, r5
 800c81a:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
 800c81e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c820:	f8cb 000c 	str.w	r0, [fp, #12]
            dir->etag = commit.ptag;
 800c824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c826:	f8cb 3010 	str.w	r3, [fp, #16]
            dir->erased = (dir->off % lfs->cfg->prog_size == 0);
 800c82a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c82c:	699c      	ldr	r4, [r3, #24]
 800c82e:	fbb0 f3f4 	udiv	r3, r0, r4
 800c832:	fb04 0313 	mls	r3, r4, r3, r0
 800c836:	fab3 f383 	clz	r3, r3
 800c83a:	095b      	lsrs	r3, r3, #5
 800c83c:	f88b 3016 	strb.w	r3, [fp, #22]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c840:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800c842:	0d03      	lsrs	r3, r0, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c844:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800c848:	d00d      	beq.n	800c866 <lfs_dir_compact+0x37a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c84a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c84c:	4294      	cmp	r4, r2
 800c84e:	d022      	beq.n	800c896 <lfs_dir_compact+0x3aa>
 800c850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c852:	428b      	cmp	r3, r1
 800c854:	d021      	beq.n	800c89a <lfs_dir_compact+0x3ae>
 800c856:	428c      	cmp	r4, r1
 800c858:	d021      	beq.n	800c89e <lfs_dir_compact+0x3b2>
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d001      	beq.n	800c862 <lfs_dir_compact+0x376>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c860:	e002      	b.n	800c868 <lfs_dir_compact+0x37c>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <lfs_dir_compact+0x37c>
 800c866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800c868:	f013 0f01 	tst.w	r3, #1
 800c86c:	d005      	beq.n	800c87a <lfs_dir_compact+0x38e>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800c86e:	4b24      	ldr	r3, [pc, #144]	; (800c900 <lfs_dir_compact+0x414>)
 800c870:	4003      	ands	r3, r0
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800c874:	2300      	movs	r3, #0
 800c876:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800c878:	647b      	str	r3, [r7, #68]	; 0x44
    if (!relocated) {
 800c87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c87c:	bb33      	cbnz	r3, 800c8cc <lfs_dir_compact+0x3e0>
        lfs->gstate = lfs->gpending;
 800c87e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c882:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c886:	ca07      	ldmia	r2, {r0, r1, r2}
 800c888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800c88c:	2300      	movs	r3, #0
 800c88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c890:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c892:	653b      	str	r3, [r7, #80]	; 0x50
 800c894:	e6e6      	b.n	800c664 <lfs_dir_compact+0x178>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c896:	2301      	movs	r3, #1
 800c898:	e7e6      	b.n	800c868 <lfs_dir_compact+0x37c>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e7e4      	b.n	800c868 <lfs_dir_compact+0x37c>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e7e2      	b.n	800c868 <lfs_dir_compact+0x37c>
            exhausted = true;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	930c      	str	r3, [sp, #48]	; 0x30
 800c8a6:	e702      	b.n	800c6ae <lfs_dir_compact+0x1c2>
            LFS_DEBUG("Bad block at %"PRIu32, dir->pair[1]);
 800c8a8:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c8ac:	f240 6141 	movw	r1, #1601	; 0x641
 800c8b0:	4814      	ldr	r0, [pc, #80]	; (800c904 <lfs_dir_compact+0x418>)
 800c8b2:	f001 fc73 	bl	800e19c <iprintf>
 800c8b6:	e701      	b.n	800c6bc <lfs_dir_compact+0x1d0>
            LFS_WARN("Superblock %"PRIu32" has become unwritable", oldpair[1]);
 800c8b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c8ba:	f240 6146 	movw	r1, #1606	; 0x646
 800c8be:	4812      	ldr	r0, [pc, #72]	; (800c908 <lfs_dir_compact+0x41c>)
 800c8c0:	f001 fc6c 	bl	800e19c <iprintf>
            return LFS_ERR_NOSPC;
 800c8c4:	f06f 031b 	mvn.w	r3, #27
 800c8c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8ca:	e6cb      	b.n	800c664 <lfs_dir_compact+0x178>
        LFS_DEBUG("Relocating %"PRIu32" %"PRIu32" to %"PRIu32" %"PRIu32,
 800c8cc:	ac18      	add	r4, sp, #96	; 0x60
 800c8ce:	f854 2d10 	ldr.w	r2, [r4, #-16]!
 800c8d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f8db 3000 	ldr.w	r3, [fp]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8e0:	f240 6159 	movw	r1, #1625	; 0x659
 800c8e4:	4809      	ldr	r0, [pc, #36]	; (800c90c <lfs_dir_compact+0x420>)
 800c8e6:	f001 fc59 	bl	800e19c <iprintf>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800c8ea:	465a      	mov	r2, fp
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	f000 fafe 	bl	800cef0 <lfs_fs_relocate>
 800c8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8f6:	e6b5      	b.n	800c664 <lfs_dir_compact+0x178>
 800c8f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8fa:	e6b3      	b.n	800c664 <lfs_dir_compact+0x178>
 800c8fc:	7ffffc0c 	.word	0x7ffffc0c
 800c900:	800003ff 	.word	0x800003ff
 800c904:	0800f614 	.word	0x0800f614
 800c908:	0800f578 	.word	0x0800f578
 800c90c:	0800f5ac 	.word	0x0800f5ac

0800c910 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 800c910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	b09c      	sub	sp, #112	; 0x70
 800c916:	4607      	mov	r7, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	4616      	mov	r6, r2
 800c91c:	4698      	mov	r8, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c91e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c920:	e003      	b.n	800c92a <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c922:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c924:	2b01      	cmp	r3, #1
 800c926:	d012      	beq.n	800c94e <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c928:	6824      	ldr	r4, [r4, #0]
 800c92a:	b38c      	cbz	r4, 800c990 <lfs_dir_commit+0x80>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c92c:	f104 0308 	add.w	r3, r4, #8
 800c930:	42ab      	cmp	r3, r5
 800c932:	d0f9      	beq.n	800c928 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c934:	68a3      	ldr	r3, [r4, #8]
 800c936:	682a      	ldr	r2, [r5, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d0f2      	beq.n	800c922 <lfs_dir_commit+0x12>
 800c93c:	68e0      	ldr	r0, [r4, #12]
 800c93e:	6869      	ldr	r1, [r5, #4]
 800c940:	4281      	cmp	r1, r0
 800c942:	d0ee      	beq.n	800c922 <lfs_dir_commit+0x12>
 800c944:	4299      	cmp	r1, r3
 800c946:	d0ec      	beq.n	800c922 <lfs_dir_commit+0x12>
 800c948:	4290      	cmp	r0, r2
 800c94a:	d1ed      	bne.n	800c928 <lfs_dir_commit+0x18>
 800c94c:	e7e9      	b.n	800c922 <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c94e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c950:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c954:	d0e8      	beq.n	800c928 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 800c956:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c958:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c95a:	6a92      	ldr	r2, [r2, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c95c:	4291      	cmp	r1, r2
 800c95e:	d9e3      	bls.n	800c928 <lfs_dir_commit+0x18>
            f->flags &= ~LFS_F_READING;
 800c960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c964:	6323      	str	r3, [r4, #48]	; 0x30
            f->off = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	63e3      	str	r3, [r4, #60]	; 0x3c
            lfs_alloc_ack(lfs);
 800c96a:	4638      	mov	r0, r7
 800c96c:	f7fd fc1c 	bl	800a1a8 <lfs_alloc_ack>
            int err = lfs_file_relocate(lfs, f);
 800c970:	4621      	mov	r1, r4
 800c972:	4638      	mov	r0, r7
 800c974:	f7ff fa08 	bl	800bd88 <lfs_file_relocate>
            if (err) {
 800c978:	4603      	mov	r3, r0
 800c97a:	2800      	cmp	r0, #0
 800c97c:	f040 8163 	bne.w	800cc46 <lfs_dir_commit+0x336>
            err = lfs_file_flush(lfs, f);
 800c980:	4621      	mov	r1, r4
 800c982:	4638      	mov	r0, r7
 800c984:	f7ff fc66 	bl	800c254 <lfs_file_flush>
            if (err) {
 800c988:	4603      	mov	r3, r0
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0cc      	beq.n	800c928 <lfs_dir_commit+0x18>
 800c98e:	e15a      	b.n	800cc46 <lfs_dir_commit+0x336>
    for (int i = 0; i < attrcount; i++) {
 800c990:	2300      	movs	r3, #0
    lfs_tag_t createtag = 0xffffffff;
 800c992:	f04f 3aff 	mov.w	sl, #4294967295
    lfs_tag_t deletetag = 0xffffffff;
 800c996:	46d1      	mov	r9, sl
 800c998:	e004      	b.n	800c9a4 <lfs_dir_commit+0x94>
            dir->count += 1;
 800c99a:	8aaa      	ldrh	r2, [r5, #20]
 800c99c:	3201      	adds	r2, #1
 800c99e:	82aa      	strh	r2, [r5, #20]
            createtag = attrs[i].tag;
 800c9a0:	4682      	mov	sl, r0
    for (int i = 0; i < attrcount; i++) {
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4543      	cmp	r3, r8
 800c9a6:	da2e      	bge.n	800ca06 <lfs_dir_commit+0xf6>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800c9a8:	00dc      	lsls	r4, r3, #3
 800c9aa:	eb06 0e04 	add.w	lr, r6, r4
 800c9ae:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 800c9b2:	0d02      	lsrs	r2, r0, #20
 800c9b4:	f3c2 010a 	ubfx	r1, r2, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800c9b8:	f240 4c01 	movw	ip, #1025	; 0x401
 800c9bc:	4561      	cmp	r1, ip
 800c9be:	d0ec      	beq.n	800c99a <lfs_dir_commit+0x8a>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800c9c0:	f240 4cff 	movw	ip, #1279	; 0x4ff
 800c9c4:	4561      	cmp	r1, ip
 800c9c6:	d011      	beq.n	800c9ec <lfs_dir_commit+0xdc>
    return (tag & 0x70000000) >> 20;
 800c9c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800c9cc:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800c9d0:	d1e7      	bne.n	800c9a2 <lfs_dir_commit+0x92>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800c9d2:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800c9da:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c9de:	6852      	ldr	r2, [r2, #4]
 800c9e0:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800c9e2:	5932      	ldr	r2, [r6, r4]
 800c9e4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800c9e8:	75ea      	strb	r2, [r5, #23]
 800c9ea:	e7da      	b.n	800c9a2 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800c9ec:	8aaa      	ldrh	r2, [r5, #20]
 800c9ee:	b11a      	cbz	r2, 800c9f8 <lfs_dir_commit+0xe8>
            dir->count -= 1;
 800c9f0:	3a01      	subs	r2, #1
 800c9f2:	82aa      	strh	r2, [r5, #20]
            deletetag = attrs[i].tag;
 800c9f4:	4681      	mov	r9, r0
 800c9f6:	e7d4      	b.n	800c9a2 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800c9f8:	4b9d      	ldr	r3, [pc, #628]	; (800cc70 <lfs_dir_commit+0x360>)
 800c9fa:	4a9e      	ldr	r2, [pc, #632]	; (800cc74 <lfs_dir_commit+0x364>)
 800c9fc:	f240 6184 	movw	r1, #1668	; 0x684
 800ca00:	489d      	ldr	r0, [pc, #628]	; (800cc78 <lfs_dir_commit+0x368>)
 800ca02:	f000 ffd9 	bl	800d9b8 <__assert_func>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800ca08:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca0a:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800ca0e:	d00f      	beq.n	800ca30 <lfs_dir_commit+0x120>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ca10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca12:	6829      	ldr	r1, [r5, #0]
 800ca14:	428a      	cmp	r2, r1
 800ca16:	d078      	beq.n	800cb0a <lfs_dir_commit+0x1fa>
 800ca18:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ca1a:	6868      	ldr	r0, [r5, #4]
 800ca1c:	4284      	cmp	r4, r0
 800ca1e:	d076      	beq.n	800cb0e <lfs_dir_commit+0x1fe>
 800ca20:	4282      	cmp	r2, r0
 800ca22:	d076      	beq.n	800cb12 <lfs_dir_commit+0x202>
 800ca24:	42a1      	cmp	r1, r4
 800ca26:	d001      	beq.n	800ca2c <lfs_dir_commit+0x11c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca28:	2200      	movs	r2, #0
 800ca2a:	e002      	b.n	800ca32 <lfs_dir_commit+0x122>
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	e000      	b.n	800ca32 <lfs_dir_commit+0x122>
 800ca30:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800ca32:	b1b2      	cbz	r2, 800ca62 <lfs_dir_commit+0x152>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800ca34:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800cc7c <lfs_dir_commit+0x36c>
 800ca38:	ea03 0909 	and.w	r9, r3, r9
        LFS_ASSERT(dir->count > 0);
 800ca3c:	8aab      	ldrh	r3, [r5, #20]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d069      	beq.n	800cb16 <lfs_dir_commit+0x206>
        dir->count -= 1;
 800ca42:	3b01      	subs	r3, #1
 800ca44:	82ab      	strh	r3, [r5, #20]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800ca46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca48:	4a8c      	ldr	r2, [pc, #560]	; (800cc7c <lfs_dir_commit+0x36c>)
 800ca4a:	401a      	ands	r2, r3
 800ca4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca4e:	4053      	eors	r3, r2
 800ca50:	64bb      	str	r3, [r7, #72]	; 0x48
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800ca52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca56:	4053      	eors	r3, r2
 800ca58:	64fb      	str	r3, [r7, #76]	; 0x4c
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800ca5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5e:	4053      	eors	r3, r2
 800ca60:	653b      	str	r3, [r7, #80]	; 0x50
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 800ca62:	f1b9 0f00 	cmp.w	r9, #0
 800ca66:	db02      	blt.n	800ca6e <lfs_dir_commit+0x15e>
 800ca68:	8aab      	ldrh	r3, [r5, #20]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d05a      	beq.n	800cb24 <lfs_dir_commit+0x214>
    if (dir->erased || dir->count >= 0xff) {
 800ca6e:	7dab      	ldrb	r3, [r5, #22]
 800ca70:	b913      	cbnz	r3, 800ca78 <lfs_dir_commit+0x168>
 800ca72:	8aab      	ldrh	r3, [r5, #20]
 800ca74:	2bfe      	cmp	r3, #254	; 0xfe
 800ca76:	d92c      	bls.n	800cad2 <lfs_dir_commit+0x1c2>
            .block = dir->pair[0],
 800ca78:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
 800ca7a:	930a      	str	r3, [sp, #40]	; 0x28
            .off = dir->off,
 800ca7c:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
 800ca7e:	920b      	str	r2, [sp, #44]	; 0x2c
            .ptag = dir->etag,
 800ca80:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 800ca82:	930c      	str	r3, [sp, #48]	; 0x30
 800ca84:	f04f 31ff 	mov.w	r1, #4294967295
 800ca88:	910d      	str	r1, [sp, #52]	; 0x34
 800ca8a:	920e      	str	r2, [sp, #56]	; 0x38
            .end = lfs->cfg->block_size - 8,
 800ca8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca8e:	69c9      	ldr	r1, [r1, #28]
 800ca90:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 800ca92:	910f      	str	r1, [sp, #60]	; 0x3c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800ca94:	971a      	str	r7, [sp, #104]	; 0x68
 800ca96:	a90a      	add	r1, sp, #40	; 0x28
 800ca98:	911b      	str	r1, [sp, #108]	; 0x6c
        int err = lfs_dir_traverse(lfs,
 800ca9a:	a91a      	add	r1, sp, #104	; 0x68
 800ca9c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca9e:	4978      	ldr	r1, [pc, #480]	; (800cc80 <lfs_dir_commit+0x370>)
 800caa0:	9108      	str	r1, [sp, #32]
 800caa2:	2100      	movs	r1, #0
 800caa4:	9107      	str	r1, [sp, #28]
 800caa6:	9106      	str	r1, [sp, #24]
 800caa8:	9105      	str	r1, [sp, #20]
 800caaa:	9104      	str	r1, [sp, #16]
 800caac:	9103      	str	r1, [sp, #12]
 800caae:	9102      	str	r1, [sp, #8]
 800cab0:	f8cd 8004 	str.w	r8, [sp, #4]
 800cab4:	9600      	str	r6, [sp, #0]
 800cab6:	4629      	mov	r1, r5
 800cab8:	4638      	mov	r0, r7
 800caba:	f7fd fff5 	bl	800aaa8 <lfs_dir_traverse>
        if (err) {
 800cabe:	4603      	mov	r3, r0
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d048      	beq.n	800cb56 <lfs_dir_commit+0x246>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cac4:	f110 0f1c 	cmn.w	r0, #28
 800cac8:	d003      	beq.n	800cad2 <lfs_dir_commit+0x1c2>
 800caca:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cace:	f040 80ba 	bne.w	800cc46 <lfs_dir_commit+0x336>
    rcache->block = 0xffffffff;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295
 800cad6:	613b      	str	r3, [r7, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800cad8:	8aab      	ldrh	r3, [r5, #20]
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	2300      	movs	r3, #0
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	9500      	str	r5, [sp, #0]
 800cae2:	4643      	mov	r3, r8
 800cae4:	4632      	mov	r2, r6
 800cae6:	4629      	mov	r1, r5
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff fcff 	bl	800c4ec <lfs_dir_compact>
        if (err) {
 800caee:	4603      	mov	r3, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	f040 80a8 	bne.w	800cc46 <lfs_dir_commit+0x336>
    lfs_mdir_t copy = *dir;
 800caf6:	ac12      	add	r4, sp, #72	; 0x48
 800caf8:	462e      	mov	r6, r5
 800cafa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cafc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cafe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cb02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cb06:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cb08:	e0c1      	b.n	800cc8e <lfs_dir_commit+0x37e>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	e791      	b.n	800ca32 <lfs_dir_commit+0x122>
 800cb0e:	2201      	movs	r2, #1
 800cb10:	e78f      	b.n	800ca32 <lfs_dir_commit+0x122>
 800cb12:	2201      	movs	r2, #1
 800cb14:	e78d      	b.n	800ca32 <lfs_dir_commit+0x122>
        LFS_ASSERT(dir->count > 0);
 800cb16:	4b56      	ldr	r3, [pc, #344]	; (800cc70 <lfs_dir_commit+0x360>)
 800cb18:	4a56      	ldr	r2, [pc, #344]	; (800cc74 <lfs_dir_commit+0x364>)
 800cb1a:	f240 6191 	movw	r1, #1681	; 0x691
 800cb1e:	4856      	ldr	r0, [pc, #344]	; (800cc78 <lfs_dir_commit+0x368>)
 800cb20:	f000 ff4a 	bl	800d9b8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800cb24:	aa0a      	add	r2, sp, #40	; 0x28
 800cb26:	4629      	mov	r1, r5
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7fd ff87 	bl	800aa3c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 800cb2e:	4603      	mov	r3, r0
 800cb30:	b118      	cbz	r0, 800cb3a <lfs_dir_commit+0x22a>
 800cb32:	f110 0f02 	cmn.w	r0, #2
 800cb36:	f040 8086 	bne.w	800cc46 <lfs_dir_commit+0x336>
        if (err != LFS_ERR_NOENT && pdir.split) {
 800cb3a:	f113 0f02 	cmn.w	r3, #2
 800cb3e:	d096      	beq.n	800ca6e <lfs_dir_commit+0x15e>
 800cb40:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d092      	beq.n	800ca6e <lfs_dir_commit+0x15e>
            return lfs_dir_drop(lfs, &pdir, dir);
 800cb48:	462a      	mov	r2, r5
 800cb4a:	a90a      	add	r1, sp, #40	; 0x28
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	f000 f8f3 	bl	800cd38 <lfs_dir_drop>
 800cb52:	4603      	mov	r3, r0
 800cb54:	e077      	b.n	800cc46 <lfs_dir_commit+0x336>
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800cb56:	f107 0448 	add.w	r4, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	dc04      	bgt.n	800cb68 <lfs_dir_commit+0x258>
        if (((uint32_t*)a)[i] != 0) {
 800cb5e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800cb62:	b9d2      	cbnz	r2, 800cb9a <lfs_dir_commit+0x28a>
    for (int i = 0; i < 3; i++) {
 800cb64:	3301      	adds	r3, #1
 800cb66:	e7f8      	b.n	800cb5a <lfs_dir_commit+0x24a>
    return true;
 800cb68:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800cb6a:	b9c3      	cbnz	r3, 800cb9e <lfs_dir_commit+0x28e>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800cb6c:	4622      	mov	r2, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7fe f98d 	bl	800ae90 <lfs_dir_getgstate>
            if (err) {
 800cb76:	4603      	mov	r3, r0
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d164      	bne.n	800cc46 <lfs_dir_commit+0x336>
            err = lfs_dir_commitattr(lfs, &commit,
 800cb7c:	4623      	mov	r3, r4
 800cb7e:	4a41      	ldr	r2, [pc, #260]	; (800cc84 <lfs_dir_commit+0x374>)
 800cb80:	a90a      	add	r1, sp, #40	; 0x28
 800cb82:	4638      	mov	r0, r7
 800cb84:	f7fe fb2a 	bl	800b1dc <lfs_dir_commitattr>
            if (err) {
 800cb88:	4603      	mov	r3, r0
 800cb8a:	b140      	cbz	r0, 800cb9e <lfs_dir_commit+0x28e>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cb8c:	f110 0f1c 	cmn.w	r0, #28
 800cb90:	d09f      	beq.n	800cad2 <lfs_dir_commit+0x1c2>
 800cb92:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cb96:	d156      	bne.n	800cc46 <lfs_dir_commit+0x336>
 800cb98:	e79b      	b.n	800cad2 <lfs_dir_commit+0x1c2>
            return false;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e7e5      	b.n	800cb6a <lfs_dir_commit+0x25a>
        err = lfs_dir_commitcrc(lfs, &commit);
 800cb9e:	a90a      	add	r1, sp, #40	; 0x28
 800cba0:	4638      	mov	r0, r7
 800cba2:	f7fe fb92 	bl	800b2ca <lfs_dir_commitcrc>
        if (err) {
 800cba6:	4603      	mov	r3, r0
 800cba8:	b130      	cbz	r0, 800cbb8 <lfs_dir_commit+0x2a8>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cbaa:	f110 0f1c 	cmn.w	r0, #28
 800cbae:	d090      	beq.n	800cad2 <lfs_dir_commit+0x1c2>
 800cbb0:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cbb4:	d147      	bne.n	800cc46 <lfs_dir_commit+0x336>
 800cbb6:	e78c      	b.n	800cad2 <lfs_dir_commit+0x1c2>
        dir->off = commit.off;
 800cbb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbba:	60ea      	str	r2, [r5, #12]
        dir->etag = commit.ptag;
 800cbbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbbe:	612a      	str	r2, [r5, #16]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cbc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800cbc2:	0d11      	lsrs	r1, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cbc4:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 800cbc8:	d00e      	beq.n	800cbe8 <lfs_dir_commit+0x2d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cbca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cbcc:	6829      	ldr	r1, [r5, #0]
 800cbce:	4288      	cmp	r0, r1
 800cbd0:	d009      	beq.n	800cbe6 <lfs_dir_commit+0x2d6>
 800cbd2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800cbd4:	686e      	ldr	r6, [r5, #4]
 800cbd6:	42b4      	cmp	r4, r6
 800cbd8:	d01b      	beq.n	800cc12 <lfs_dir_commit+0x302>
 800cbda:	42b0      	cmp	r0, r6
 800cbdc:	d01b      	beq.n	800cc16 <lfs_dir_commit+0x306>
 800cbde:	42a1      	cmp	r1, r4
 800cbe0:	d102      	bne.n	800cbe8 <lfs_dir_commit+0x2d8>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e000      	b.n	800cbe8 <lfs_dir_commit+0x2d8>
 800cbe6:	2301      	movs	r3, #1
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800cbe8:	f013 0f01 	tst.w	r3, #1
 800cbec:	d005      	beq.n	800cbfa <lfs_dir_commit+0x2ea>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800cbee:	4b26      	ldr	r3, [pc, #152]	; (800cc88 <lfs_dir_commit+0x378>)
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800cbf8:	647b      	str	r3, [r7, #68]	; 0x44
        lfs->gstate = lfs->gpending;
 800cbfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cbfe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cc02:	ca07      	ldmia	r2, {r0, r1, r2}
 800cc04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800cc08:	2200      	movs	r2, #0
 800cc0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cc0e:	653a      	str	r2, [r7, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
 800cc10:	e771      	b.n	800caf6 <lfs_dir_commit+0x1e6>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e7e8      	b.n	800cbe8 <lfs_dir_commit+0x2d8>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e7e6      	b.n	800cbe8 <lfs_dir_commit+0x2d8>
                d->m.pair[0] = 0xffffffff;
 800cc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1e:	60a3      	str	r3, [r4, #8]
                d->m.pair[1] = 0xffffffff;
 800cc20:	60e3      	str	r3, [r4, #12]
            while (d->id >= d->m.count && d->m.split) {
 800cc22:	88a3      	ldrh	r3, [r4, #4]
 800cc24:	8ba2      	ldrh	r2, [r4, #28]
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d330      	bcc.n	800cc8c <lfs_dir_commit+0x37c>
 800cc2a:	7fe1      	ldrb	r1, [r4, #31]
 800cc2c:	b371      	cbz	r1, 800cc8c <lfs_dir_commit+0x37c>
                d->id -= d->m.count;
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800cc32:	f104 0220 	add.w	r2, r4, #32
 800cc36:	f104 0108 	add.w	r1, r4, #8
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7fd fef0 	bl	800aa20 <lfs_dir_fetch>
                if (err) {
 800cc40:	4603      	mov	r3, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d0ed      	beq.n	800cc22 <lfs_dir_commit+0x312>
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	b01c      	add	sp, #112	; 0x70
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800cc4e:	f104 0208 	add.w	r2, r4, #8
 800cc52:	42aa      	cmp	r2, r5
 800cc54:	d0e5      	beq.n	800cc22 <lfs_dir_commit+0x312>
    return (tag & 0x000ffc00) >> 10;
 800cc56:	f3ca 2289 	ubfx	r2, sl, #10, #10
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d3e1      	bcc.n	800cc22 <lfs_dir_commit+0x312>
                d->id += 1;
 800cc5e:	3301      	adds	r3, #1
 800cc60:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800cc62:	79a3      	ldrb	r3, [r4, #6]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d1dc      	bne.n	800cc22 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos += 1;
 800cc68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc6e:	e7d8      	b.n	800cc22 <lfs_dir_commit+0x312>
 800cc70:	0800f538 	.word	0x0800f538
 800cc74:	0800f3c0 	.word	0x0800f3c0
 800cc78:	0800f430 	.word	0x0800f430
 800cc7c:	7ffffc00 	.word	0x7ffffc00
 800cc80:	0800b29d 	.word	0x0800b29d
 800cc84:	7ffffc0c 	.word	0x7ffffc0c
 800cc88:	800003ff 	.word	0x800003ff
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cc8c:	6824      	ldr	r4, [r4, #0]
 800cc8e:	b32c      	cbz	r4, 800ccdc <lfs_dir_commit+0x3cc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cc90:	68a3      	ldr	r3, [r4, #8]
 800cc92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <lfs_dir_commit+0x398>
 800cc98:	68e0      	ldr	r0, [r4, #12]
 800cc9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cc9c:	4288      	cmp	r0, r1
 800cc9e:	d003      	beq.n	800cca8 <lfs_dir_commit+0x398>
 800cca0:	428b      	cmp	r3, r1
 800cca2:	d001      	beq.n	800cca8 <lfs_dir_commit+0x398>
 800cca4:	4282      	cmp	r2, r0
 800cca6:	d1f1      	bne.n	800cc8c <lfs_dir_commit+0x37c>
            d->m = *dir;
 800cca8:	f104 0608 	add.w	r6, r4, #8
 800ccac:	46ac      	mov	ip, r5
 800ccae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ccb4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800ccb8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 800ccbc:	88a3      	ldrh	r3, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 800ccbe:	f3c9 2289 	ubfx	r2, r9, #10, #10
            if (d->id == lfs_tag_id(deletetag)) {
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d0a9      	beq.n	800cc1a <lfs_dir_commit+0x30a>
            } else if (d->id > lfs_tag_id(deletetag)) {
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d9c1      	bls.n	800cc4e <lfs_dir_commit+0x33e>
                d->id -= 1;
 800ccca:	3b01      	subs	r3, #1
 800cccc:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800ccce:	79a3      	ldrb	r3, [r4, #6]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d1a6      	bne.n	800cc22 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos -= 1;
 800ccd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccda:	e7a2      	b.n	800cc22 <lfs_dir_commit+0x312>
    return 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e7b2      	b.n	800cc46 <lfs_dir_commit+0x336>

0800cce0 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 800cce0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800cce2:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gstate)) {
 800cce4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800cce8:	d102      	bne.n	800ccf0 <lfs_fs_demove+0x10>
        return 0;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 800ccf0:	b530      	push	{r4, r5, lr}
 800ccf2:	b08b      	sub	sp, #44	; 0x2c
 800ccf4:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 800ccf6:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move %"PRIu32" %"PRIu32" %"PRIu16,
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	f855 2f34 	ldr.w	r2, [r5, #52]!
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd04:	f640 6173 	movw	r1, #3699	; 0xe73
 800cd08:	480a      	ldr	r0, [pc, #40]	; (800cd34 <lfs_fs_demove+0x54>)
 800cd0a:	f001 fa47 	bl	800e19c <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gstate.pair);
 800cd0e:	462a      	mov	r2, r5
 800cd10:	a902      	add	r1, sp, #8
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7fd fe84 	bl	800aa20 <lfs_dir_fetch>
    if (err) {
 800cd18:	4603      	mov	r3, r0
 800cd1a:	b110      	cbz	r0, 800cd22 <lfs_fs_demove+0x42>
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	b00b      	add	sp, #44	; 0x2c
 800cd20:	bd30      	pop	{r4, r5, pc}
    err = lfs_dir_commit(lfs, &movedir, NULL, 0);
 800cd22:	2300      	movs	r3, #0
 800cd24:	461a      	mov	r2, r3
 800cd26:	a902      	add	r1, sp, #8
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f7ff fdf1 	bl	800c910 <lfs_dir_commit>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	e7f4      	b.n	800cd1c <lfs_fs_demove+0x3c>
 800cd32:	bf00      	nop
 800cd34:	0800f634 	.word	0x0800f634

0800cd38 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460e      	mov	r6, r1
 800cd40:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800cd42:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800cd46:	4621      	mov	r1, r4
 800cd48:	f7fe f8a2 	bl	800ae90 <lfs_dir_getgstate>
    if (err) {
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	b110      	cbz	r0, 800cd56 <lfs_dir_drop+0x1e>
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	b002      	add	sp, #8
 800cd54:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 800cd56:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800cd5a:	7de3      	ldrb	r3, [r4, #23]
 800cd5c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800cd60:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <lfs_dir_drop+0x44>)
 800cd62:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	9101      	str	r1, [sp, #4]
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	466a      	mov	r2, sp
 800cd6e:	4631      	mov	r1, r6
 800cd70:	4628      	mov	r0, r5
 800cd72:	f7ff fdcd 	bl	800c910 <lfs_dir_commit>
 800cd76:	4603      	mov	r3, r0
 800cd78:	e7ea      	b.n	800cd50 <lfs_dir_drop+0x18>
 800cd7a:	bf00      	nop
 800cd7c:	000ffc08 	.word	0x000ffc08

0800cd80 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
 800cd84:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
 800cd86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f000 8096 	beq.w	800cebc <lfs_fs_deorphan+0x13c>
 800cd90:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true};
 800cd92:	2220      	movs	r2, #32
 800cd94:	2100      	movs	r1, #0
 800cd96:	a814      	add	r0, sp, #80	; 0x50
 800cd98:	f000 fe8c 	bl	800dab4 <memset>
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
    lfs_mdir_t dir = {.tail = {0, 1}};
 800cda2:	2300      	movs	r3, #0
 800cda4:	930c      	str	r3, [sp, #48]	; 0x30
 800cda6:	930d      	str	r3, [sp, #52]	; 0x34
 800cda8:	930e      	str	r3, [sp, #56]	; 0x38
 800cdaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdac:	9310      	str	r3, [sp, #64]	; 0x40
 800cdae:	9311      	str	r3, [sp, #68]	; 0x44
 800cdb0:	9312      	str	r3, [sp, #72]	; 0x48
 800cdb2:	9213      	str	r2, [sp, #76]	; 0x4c
    while (!lfs_pair_isnull(dir.tail)) {
 800cdb4:	e078      	b.n	800cea8 <lfs_fs_deorphan+0x128>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800cdb6:	aa04      	add	r2, sp, #16
 800cdb8:	a91a      	add	r1, sp, #104	; 0x68
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f7fd fdf2 	bl	800a9a4 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cdc0:	1e03      	subs	r3, r0, #0
 800cdc2:	db28      	blt.n	800ce16 <lfs_fs_deorphan+0x96>
            if (tag == LFS_ERR_NOENT) {
 800cdc4:	f113 0f02 	cmn.w	r3, #2
 800cdc8:	d02a      	beq.n	800ce20 <lfs_fs_deorphan+0xa0>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800cdca:	aa02      	add	r2, sp, #8
 800cdcc:	9200      	str	r2, [sp, #0]
 800cdce:	4a3d      	ldr	r2, [pc, #244]	; (800cec4 <lfs_fs_deorphan+0x144>)
 800cdd0:	a904      	add	r1, sp, #16
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7fe f84e 	bl	800ae74 <lfs_dir_get>
            if (res < 0) {
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	db4b      	blt.n	800ce74 <lfs_fs_deorphan+0xf4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cddc:	9a02      	ldr	r2, [sp, #8]
 800cdde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d03c      	beq.n	800ce5e <lfs_fs_deorphan+0xde>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800cde4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cde6:	428a      	cmp	r2, r1
 800cde8:	d03f      	beq.n	800ce6a <lfs_fs_deorphan+0xea>
            if (!lfs_pair_sync(pair, pdir.tail)) {
 800cdea:	f014 0f01 	tst.w	r4, #1
 800cdee:	d153      	bne.n	800ce98 <lfs_fs_deorphan+0x118>
                LFS_DEBUG("Fixing half-orphan %"PRIu32" %"PRIu32,
 800cdf0:	9b03      	ldr	r3, [sp, #12]
 800cdf2:	f640 61b6 	movw	r1, #3766	; 0xeb6
 800cdf6:	4834      	ldr	r0, [pc, #208]	; (800cec8 <lfs_fs_deorphan+0x148>)
 800cdf8:	f001 f9d0 	bl	800e19c <iprintf>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800cdfc:	4b33      	ldr	r3, [pc, #204]	; (800cecc <lfs_fs_deorphan+0x14c>)
 800cdfe:	931c      	str	r3, [sp, #112]	; 0x70
 800ce00:	ab02      	add	r3, sp, #8
 800ce02:	931d      	str	r3, [sp, #116]	; 0x74
 800ce04:	2301      	movs	r3, #1
 800ce06:	aa1c      	add	r2, sp, #112	; 0x70
 800ce08:	a914      	add	r1, sp, #80	; 0x50
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f7ff fd80 	bl	800c910 <lfs_dir_commit>
                if (err) {
 800ce10:	4604      	mov	r4, r0
 800ce12:	b1a0      	cbz	r0, 800ce3e <lfs_fs_deorphan+0xbe>
 800ce14:	e053      	b.n	800cebe <lfs_fs_deorphan+0x13e>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800ce16:	f113 0f02 	cmn.w	r3, #2
 800ce1a:	d0d3      	beq.n	800cdc4 <lfs_fs_deorphan+0x44>
                return tag;
 800ce1c:	461c      	mov	r4, r3
 800ce1e:	e04e      	b.n	800cebe <lfs_fs_deorphan+0x13e>
                LFS_DEBUG("Fixing orphan %"PRIu32" %"PRIu32,
 800ce20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce24:	f640 61a1 	movw	r1, #3745	; 0xea1
 800ce28:	4829      	ldr	r0, [pc, #164]	; (800ced0 <lfs_fs_deorphan+0x150>)
 800ce2a:	f001 f9b7 	bl	800e19c <iprintf>
                err = lfs_dir_drop(lfs, &pdir, &dir);
 800ce2e:	aa0c      	add	r2, sp, #48	; 0x30
 800ce30:	a914      	add	r1, sp, #80	; 0x50
 800ce32:	4630      	mov	r0, r6
 800ce34:	f7ff ff80 	bl	800cd38 <lfs_dir_drop>
                if (err) {
 800ce38:	4604      	mov	r4, r0
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d13f      	bne.n	800cebe <lfs_fs_deorphan+0x13e>
    return lfs_tag_size(a->tag);
 800ce3e:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800ce42:	4249      	negs	r1, r1
 800ce44:	b249      	sxtb	r1, r1
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fd f9f0 	bl	800a22c <lfs_fs_preporphans>
    lfs->gstate = lfs->gpending;
 800ce4c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800ce50:	363c      	adds	r6, #60	; 0x3c
 800ce52:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ce56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return 0;
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	e02f      	b.n	800cebe <lfs_fs_deorphan+0x13e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ce5e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ce60:	9903      	ldr	r1, [sp, #12]
 800ce62:	4288      	cmp	r0, r1
 800ce64:	d1be      	bne.n	800cde4 <lfs_fs_deorphan+0x64>
 800ce66:	2401      	movs	r4, #1
 800ce68:	e7bf      	b.n	800cdea <lfs_fs_deorphan+0x6a>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ce6a:	9903      	ldr	r1, [sp, #12]
 800ce6c:	428b      	cmp	r3, r1
 800ce6e:	d1bc      	bne.n	800cdea <lfs_fs_deorphan+0x6a>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ce70:	2401      	movs	r4, #1
 800ce72:	e7ba      	b.n	800cdea <lfs_fs_deorphan+0x6a>
                return res;
 800ce74:	4604      	mov	r4, r0
 800ce76:	e022      	b.n	800cebe <lfs_fs_deorphan+0x13e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e000      	b.n	800ce7e <lfs_fs_deorphan+0xfe>
 800ce7c:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(dir.tail)) {
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1dd      	bne.n	800ce3e <lfs_fs_deorphan+0xbe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800ce82:	aa12      	add	r2, sp, #72	; 0x48
 800ce84:	a90c      	add	r1, sp, #48	; 0x30
 800ce86:	4630      	mov	r0, r6
 800ce88:	f7fd fdca 	bl	800aa20 <lfs_dir_fetch>
        if (err) {
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	b9b0      	cbnz	r0, 800cebe <lfs_fs_deorphan+0x13e>
        if (!pdir.split) {
 800ce90:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d08e      	beq.n	800cdb6 <lfs_fs_deorphan+0x36>
        memcpy(&pdir, &dir, sizeof(pdir));
 800ce98:	ac14      	add	r4, sp, #80	; 0x50
 800ce9a:	ad0c      	add	r5, sp, #48	; 0x30
 800ce9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceae:	d0e5      	beq.n	800ce7c <lfs_fs_deorphan+0xfc>
 800ceb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d0df      	beq.n	800ce78 <lfs_fs_deorphan+0xf8>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e7e0      	b.n	800ce7e <lfs_fs_deorphan+0xfe>
        return 0;
 800cebc:	2400      	movs	r4, #0
}
 800cebe:	4620      	mov	r0, r4
 800cec0:	b01e      	add	sp, #120	; 0x78
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	7ffffc00 	.word	0x7ffffc00
 800cec8:	0800f684 	.word	0x0800f684
 800cecc:	600ffc08 	.word	0x600ffc08
 800ced0:	0800f65c 	.word	0x0800f65c

0800ced4 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800ced4:	b510      	push	{r4, lr}
 800ced6:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
 800ced8:	f7ff ff02 	bl	800cce0 <lfs_fs_demove>
    if (err) {
 800cedc:	4603      	mov	r3, r0
 800cede:	b108      	cbz	r0, 800cee4 <lfs_fs_forceconsistency+0x10>
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
 800cee4:	4620      	mov	r0, r4
 800cee6:	f7ff ff4b 	bl	800cd80 <lfs_fs_deorphan>
 800ceea:	4603      	mov	r3, r0
 800ceec:	e7f8      	b.n	800cee0 <lfs_fs_forceconsistency+0xc>
	...

0800cef0 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef2:	b08d      	sub	sp, #52	; 0x34
 800cef4:	4606      	mov	r6, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	4614      	mov	r4, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cefa:	680b      	ldr	r3, [r1, #0]
 800cefc:	6a02      	ldr	r2, [r0, #32]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d007      	beq.n	800cf12 <lfs_fs_relocate+0x22>
 800cf02:	6848      	ldr	r0, [r1, #4]
 800cf04:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800cf06:	4281      	cmp	r1, r0
 800cf08:	d003      	beq.n	800cf12 <lfs_fs_relocate+0x22>
 800cf0a:	4299      	cmp	r1, r3
 800cf0c:	d001      	beq.n	800cf12 <lfs_fs_relocate+0x22>
 800cf0e:	4290      	cmp	r0, r2
 800cf10:	d10a      	bne.n	800cf28 <lfs_fs_relocate+0x38>
        LFS_DEBUG("Relocating root %"PRIu32" %"PRIu32,
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6822      	ldr	r2, [r4, #0]
 800cf16:	f640 6123 	movw	r1, #3619	; 0xe23
 800cf1a:	4830      	ldr	r0, [pc, #192]	; (800cfdc <lfs_fs_relocate+0xec>)
 800cf1c:	f001 f93e 	bl	800e19c <iprintf>
        lfs->root[0] = newpair[0];
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	6233      	str	r3, [r6, #32]
        lfs->root[1] = newpair[1];
 800cf24:	6863      	ldr	r3, [r4, #4]
 800cf26:	6273      	str	r3, [r6, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cf28:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800cf2a:	e004      	b.n	800cf36 <lfs_fs_relocate+0x46>
            d->m.pair[0] = newpair[0];
 800cf2c:	6822      	ldr	r2, [r4, #0]
 800cf2e:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800cf30:	6862      	ldr	r2, [r4, #4]
 800cf32:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	b163      	cbz	r3, 800cf52 <lfs_fs_relocate+0x62>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cf38:	682a      	ldr	r2, [r5, #0]
 800cf3a:	6899      	ldr	r1, [r3, #8]
 800cf3c:	428a      	cmp	r2, r1
 800cf3e:	d0f5      	beq.n	800cf2c <lfs_fs_relocate+0x3c>
 800cf40:	686f      	ldr	r7, [r5, #4]
 800cf42:	68d8      	ldr	r0, [r3, #12]
 800cf44:	4287      	cmp	r7, r0
 800cf46:	d0f1      	beq.n	800cf2c <lfs_fs_relocate+0x3c>
 800cf48:	4282      	cmp	r2, r0
 800cf4a:	d0ef      	beq.n	800cf2c <lfs_fs_relocate+0x3c>
 800cf4c:	42b9      	cmp	r1, r7
 800cf4e:	d1f1      	bne.n	800cf34 <lfs_fs_relocate+0x44>
 800cf50:	e7ec      	b.n	800cf2c <lfs_fs_relocate+0x3c>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800cf52:	466a      	mov	r2, sp
 800cf54:	4629      	mov	r1, r5
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7fd fd24 	bl	800a9a4 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cf5c:	1e07      	subs	r7, r0, #0
 800cf5e:	db13      	blt.n	800cf88 <lfs_fs_relocate+0x98>
    if (tag != LFS_ERR_NOENT) {
 800cf60:	f117 0f02 	cmn.w	r7, #2
 800cf64:	d019      	beq.n	800cf9a <lfs_fs_relocate+0xaa>
        lfs_fs_preporphans(lfs, +1);
 800cf66:	2101      	movs	r1, #1
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f7fd f95f 	bl	800a22c <lfs_fs_preporphans>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 800cf6e:	9708      	str	r7, [sp, #32]
 800cf70:	9409      	str	r4, [sp, #36]	; 0x24
 800cf72:	2301      	movs	r3, #1
 800cf74:	aa08      	add	r2, sp, #32
 800cf76:	4669      	mov	r1, sp
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff fcc9 	bl	800c910 <lfs_dir_commit>
        if (err) {
 800cf7e:	4607      	mov	r7, r0
 800cf80:	b130      	cbz	r0, 800cf90 <lfs_fs_relocate+0xa0>
}
 800cf82:	4638      	mov	r0, r7
 800cf84:	b00d      	add	sp, #52	; 0x34
 800cf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cf88:	f117 0f02 	cmn.w	r7, #2
 800cf8c:	d1f9      	bne.n	800cf82 <lfs_fs_relocate+0x92>
 800cf8e:	e7e7      	b.n	800cf60 <lfs_fs_relocate+0x70>
        lfs_fs_preporphans(lfs, -1);
 800cf90:	f04f 31ff 	mov.w	r1, #4294967295
 800cf94:	4630      	mov	r0, r6
 800cf96:	f7fd f949 	bl	800a22c <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800cf9a:	466a      	mov	r2, sp
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7fd fd4c 	bl	800aa3c <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	b110      	cbz	r0, 800cfae <lfs_fs_relocate+0xbe>
 800cfa8:	f110 0f02 	cmn.w	r0, #2
 800cfac:	d1e9      	bne.n	800cf82 <lfs_fs_relocate+0x92>
    if (err != LFS_ERR_NOENT) {
 800cfae:	f117 0f02 	cmn.w	r7, #2
 800cfb2:	d010      	beq.n	800cfd6 <lfs_fs_relocate+0xe6>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800cfb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800cfb8:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800cfbc:	4b08      	ldr	r3, [pc, #32]	; (800cfe0 <lfs_fs_relocate+0xf0>)
 800cfbe:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cfc2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfc4:	940b      	str	r4, [sp, #44]	; 0x2c
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	aa0a      	add	r2, sp, #40	; 0x28
 800cfca:	4669      	mov	r1, sp
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f7ff fc9f 	bl	800c910 <lfs_dir_commit>
 800cfd2:	4607      	mov	r7, r0
 800cfd4:	e7d5      	b.n	800cf82 <lfs_fs_relocate+0x92>
    return 0;
 800cfd6:	2700      	movs	r7, #0
 800cfd8:	e7d3      	b.n	800cf82 <lfs_fs_relocate+0x92>
 800cfda:	bf00      	nop
 800cfdc:	0800f6b0 	.word	0x0800f6b0
 800cfe0:	000ffc08 	.word	0x000ffc08

0800cfe4 <lfs_file_sync>:
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 800cfe4:	b530      	push	{r4, r5, lr}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	4605      	mov	r5, r0
 800cfea:	460c      	mov	r4, r1
 800cfec:	e039      	b.n	800d062 <lfs_file_sync+0x7e>
            file->flags |= LFS_F_ERRED;
 800cfee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cff0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800cff4:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800cff6:	e05b      	b.n	800d0b0 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cff8:	2101      	movs	r1, #1
 800cffa:	e000      	b.n	800cffe <lfs_file_sync+0x1a>
 800cffc:	2101      	movs	r1, #1
                !(file->flags & LFS_F_ERRED) &&
 800cffe:	f011 0f01 	tst.w	r1, #1
 800d002:	d155      	bne.n	800d0b0 <lfs_file_sync+0xcc>
            if (file->flags & LFS_F_INLINE) {
 800d004:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800d008:	d042      	beq.n	800d090 <lfs_file_sync+0xac>
                buffer = file->cache.buffer;
 800d00a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                size = file->ctz.size;
 800d00c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                type = LFS_TYPE_INLINESTRUCT;
 800d00e:	f240 2201 	movw	r2, #513	; 0x201
            err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800d012:	88a3      	ldrh	r3, [r4, #4]
 800d014:	029b      	lsls	r3, r3, #10
 800d016:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 800d01a:	4302      	orrs	r2, r0
 800d01c:	9202      	str	r2, [sp, #8]
 800d01e:	9103      	str	r1, [sp, #12]
 800d020:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d022:	6891      	ldr	r1, [r2, #8]
 800d024:	430b      	orrs	r3, r1
 800d026:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	6853      	ldr	r3, [r2, #4]
 800d02e:	9305      	str	r3, [sp, #20]
 800d030:	2302      	movs	r3, #2
 800d032:	aa02      	add	r2, sp, #8
 800d034:	f104 0108 	add.w	r1, r4, #8
 800d038:	4628      	mov	r0, r5
 800d03a:	f7ff fc69 	bl	800c910 <lfs_dir_commit>
            if (err) {
 800d03e:	4603      	mov	r3, r0
 800d040:	2800      	cmp	r0, #0
 800d042:	d038      	beq.n	800d0b6 <lfs_file_sync+0xd2>
                if (err == LFS_ERR_NOSPC && (file->flags & LFS_F_INLINE)) {
 800d044:	f110 0f1c 	cmn.w	r0, #28
 800d048:	d12e      	bne.n	800d0a8 <lfs_file_sync+0xc4>
 800d04a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d04c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800d050:	d02a      	beq.n	800d0a8 <lfs_file_sync+0xc4>
        file->off = file->pos;
 800d052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d054:	63e3      	str	r3, [r4, #60]	; 0x3c
        err = lfs_file_relocate(lfs, file);
 800d056:	4621      	mov	r1, r4
 800d058:	4628      	mov	r0, r5
 800d05a:	f7fe fe95 	bl	800bd88 <lfs_file_relocate>
        if (err) {
 800d05e:	4603      	mov	r3, r0
 800d060:	bb70      	cbnz	r0, 800d0c0 <lfs_file_sync+0xdc>
        int err = lfs_file_flush(lfs, file);
 800d062:	4621      	mov	r1, r4
 800d064:	4628      	mov	r0, r5
 800d066:	f7ff f8f5 	bl	800c254 <lfs_file_flush>
        if (err) {
 800d06a:	4603      	mov	r3, r0
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1be      	bne.n	800cfee <lfs_file_sync+0xa>
        if ((file->flags & LFS_F_DIRTY) &&
 800d070:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d072:	f402 2110 	and.w	r1, r2, #589824	; 0x90000
 800d076:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800d07a:	d119      	bne.n	800d0b0 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800d07c:	68a1      	ldr	r1, [r4, #8]
 800d07e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d082:	d0bb      	beq.n	800cffc <lfs_file_sync+0x18>
 800d084:	68e1      	ldr	r1, [r4, #12]
 800d086:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d08a:	d0b5      	beq.n	800cff8 <lfs_file_sync+0x14>
 800d08c:	4601      	mov	r1, r0
 800d08e:	e7b6      	b.n	800cffe <lfs_file_sync+0x1a>
                ctz = file->ctz;
 800d090:	466b      	mov	r3, sp
 800d092:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800d096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d09a:	e883 0003 	stmia.w	r3, {r0, r1}
                size = sizeof(ctz);
 800d09e:	2008      	movs	r0, #8
                buffer = &ctz;
 800d0a0:	4619      	mov	r1, r3
                type = LFS_TYPE_CTZSTRUCT;
 800d0a2:	f240 2202 	movw	r2, #514	; 0x202
 800d0a6:	e7b4      	b.n	800d012 <lfs_file_sync+0x2e>
                file->flags |= LFS_F_ERRED;
 800d0a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d0aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d0ae:	6322      	str	r2, [r4, #48]	; 0x30
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	b007      	add	sp, #28
 800d0b4:	bd30      	pop	{r4, r5, pc}
            file->flags &= ~LFS_F_DIRTY;
 800d0b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d0b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d0bc:	6322      	str	r2, [r4, #48]	; 0x30
 800d0be:	e7f7      	b.n	800d0b0 <lfs_file_sync+0xcc>
            file->flags |= LFS_F_ERRED;
 800d0c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d0c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d0c6:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800d0c8:	e7f2      	b.n	800d0b0 <lfs_file_sync+0xcc>

0800d0ca <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800d0ca:	b570      	push	{r4, r5, r6, lr}
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
 800d0d0:	f7ff ff88 	bl	800cfe4 <lfs_file_sync>
 800d0d4:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d0d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d0da:	6803      	ldr	r3, [r0, #0]
 800d0dc:	b12b      	cbz	r3, 800d0ea <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
 800d0de:	42ab      	cmp	r3, r5
 800d0e0:	d001      	beq.n	800d0e6 <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	e7f9      	b.n	800d0da <lfs_file_close+0x10>
            *p = (*p)->next;
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6003      	str	r3, [r0, #0]
    if (!file->cfg->buffer) {
 800d0ea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	b10b      	cbz	r3, 800d0f4 <lfs_file_close+0x2a>
}
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 800d0f4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800d0f6:	f000 fcbb 	bl	800da70 <free>
    return err;
 800d0fa:	e7f9      	b.n	800d0f0 <lfs_file_close+0x26>

0800d0fc <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
 800d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d100:	b08a      	sub	sp, #40	; 0x28
 800d102:	4605      	mov	r5, r0
 800d104:	460c      	mov	r4, r1
 800d106:	9203      	str	r2, [sp, #12]
 800d108:	461f      	mov	r7, r3
    if ((flags & 3) != LFS_O_RDONLY) {
 800d10a:	f003 0303 	and.w	r3, r3, #3
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d005      	beq.n	800d11e <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
 800d112:	f7ff fedf 	bl	800ced4 <lfs_fs_forceconsistency>
        if (err) {
 800d116:	4606      	mov	r6, r0
 800d118:	2800      	cmp	r0, #0
 800d11a:	f040 8109 	bne.w	800d330 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
 800d11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d120:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags;
 800d122:	6327      	str	r7, [r4, #48]	; 0x30
    file->pos = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	6363      	str	r3, [r4, #52]	; 0x34
    file->cache.buffer = NULL;
 800d128:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800d12a:	f104 0808 	add.w	r8, r4, #8
 800d12e:	1d23      	adds	r3, r4, #4
 800d130:	aa03      	add	r2, sp, #12
 800d132:	4641      	mov	r1, r8
 800d134:	4628      	mov	r0, r5
 800d136:	f7fe f969 	bl	800b40c <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800d13a:	1e06      	subs	r6, r0, #0
 800d13c:	db12      	blt.n	800d164 <lfs_file_opencfg+0x68>
    file->type = LFS_TYPE_REG;
 800d13e:	2301      	movs	r3, #1
 800d140:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
 800d142:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d144:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
 800d146:	62ac      	str	r4, [r5, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 800d148:	f116 0f02 	cmn.w	r6, #2
 800d14c:	d014      	beq.n	800d178 <lfs_file_opencfg+0x7c>
    } else if (flags & LFS_O_EXCL) {
 800d14e:	f417 7f00 	tst.w	r7, #512	; 0x200
 800d152:	f040 80e3 	bne.w	800d31c <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
 800d156:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800d15a:	2e01      	cmp	r6, #1
 800d15c:	d039      	beq.n	800d1d2 <lfs_file_opencfg+0xd6>
        err = LFS_ERR_ISDIR;
 800d15e:	f06f 0614 	mvn.w	r6, #20
 800d162:	e0dd      	b.n	800d320 <lfs_file_opencfg+0x224>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800d164:	f116 0f02 	cmn.w	r6, #2
 800d168:	f040 80da 	bne.w	800d320 <lfs_file_opencfg+0x224>
 800d16c:	88a2      	ldrh	r2, [r4, #4]
 800d16e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d172:	429a      	cmp	r2, r3
 800d174:	d1e3      	bne.n	800d13e <lfs_file_opencfg+0x42>
 800d176:	e0d3      	b.n	800d320 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
 800d178:	f417 7f80 	tst.w	r7, #256	; 0x100
 800d17c:	f000 80c8 	beq.w	800d310 <lfs_file_opencfg+0x214>
        lfs_size_t nlen = strlen(path);
 800d180:	9e03      	ldr	r6, [sp, #12]
 800d182:	4630      	mov	r0, r6
 800d184:	f7f3 f854 	bl	8000230 <strlen>
        if (nlen > lfs->name_max) {
 800d188:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d18a:	4283      	cmp	r3, r0
 800d18c:	d202      	bcs.n	800d194 <lfs_file_opencfg+0x98>
            err = LFS_ERR_NAMETOOLONG;
 800d18e:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800d192:	e0c5      	b.n	800d320 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800d194:	88a3      	ldrh	r3, [r4, #4]
 800d196:	029b      	lsls	r3, r3, #10
 800d198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d19c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d1a0:	9204      	str	r2, [sp, #16]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	9205      	str	r2, [sp, #20]
 800d1a6:	4318      	orrs	r0, r3
 800d1a8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800d1ac:	9006      	str	r0, [sp, #24]
 800d1ae:	9607      	str	r6, [sp, #28]
 800d1b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1b8:	9308      	str	r3, [sp, #32]
 800d1ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d1bc:	2303      	movs	r3, #3
 800d1be:	aa04      	add	r2, sp, #16
 800d1c0:	4641      	mov	r1, r8
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f7ff fba4 	bl	800c910 <lfs_dir_commit>
        if (err) {
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	f040 80a4 	bne.w	800d316 <lfs_file_opencfg+0x21a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800d1ce:	4e5c      	ldr	r6, [pc, #368]	; (800d340 <lfs_file_opencfg+0x244>)
 800d1d0:	e00c      	b.n	800d1ec <lfs_file_opencfg+0xf0>
    } else if (flags & LFS_O_TRUNC) {
 800d1d2:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800d1d6:	d00b      	beq.n	800d1f0 <lfs_file_opencfg+0xf4>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800d1d8:	88a6      	ldrh	r6, [r4, #4]
 800d1da:	02b6      	lsls	r6, r6, #10
 800d1dc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800d1e0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 800d1e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d1e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1ea:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d1ec:	2700      	movs	r7, #0
 800d1ee:	e024      	b.n	800d23a <lfs_file_opencfg+0x13e>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800d1f0:	88a3      	ldrh	r3, [r4, #4]
 800d1f2:	029b      	lsls	r3, r3, #10
 800d1f4:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800d1f8:	9200      	str	r2, [sp, #0]
 800d1fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1fe:	f043 0308 	orr.w	r3, r3, #8
 800d202:	4a50      	ldr	r2, [pc, #320]	; (800d344 <lfs_file_opencfg+0x248>)
 800d204:	4641      	mov	r1, r8
 800d206:	4628      	mov	r0, r5
 800d208:	f7fd fe34 	bl	800ae74 <lfs_dir_get>
        if (tag < 0) {
 800d20c:	1e06      	subs	r6, r0, #0
 800d20e:	daed      	bge.n	800d1ec <lfs_file_opencfg+0xf0>
 800d210:	e086      	b.n	800d320 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
 800d212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d214:	f003 0203 	and.w	r2, r3, #3
 800d218:	2a01      	cmp	r2, #1
 800d21a:	d00d      	beq.n	800d238 <lfs_file_opencfg+0x13c>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800d21c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d21e:	6852      	ldr	r2, [r2, #4]
 800d220:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800d224:	0081      	lsls	r1, r0, #2
 800d226:	440a      	add	r2, r1
 800d228:	6891      	ldr	r1, [r2, #8]
 800d22a:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800d22c:	4291      	cmp	r1, r2
 800d22e:	f200 8083 	bhi.w	800d338 <lfs_file_opencfg+0x23c>
            file->flags |= LFS_F_DIRTY;
 800d232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d236:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d238:	3701      	adds	r7, #1
 800d23a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d23c:	6893      	ldr	r3, [r2, #8]
 800d23e:	42bb      	cmp	r3, r7
 800d240:	d920      	bls.n	800d284 <lfs_file_opencfg+0x188>
        if ((file->flags & 3) != LFS_O_WRONLY) {
 800d242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d244:	f003 0303 	and.w	r3, r3, #3
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d0e2      	beq.n	800d212 <lfs_file_opencfg+0x116>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800d24c:	6852      	ldr	r2, [r2, #4]
 800d24e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 800d252:	008b      	lsls	r3, r1, #2
 800d254:	18d1      	adds	r1, r2, r3
 800d256:	5cd3      	ldrb	r3, [r2, r3]
 800d258:	f503 7240 	add.w	r2, r3, #768	; 0x300
 800d25c:	88a3      	ldrh	r3, [r4, #4]
 800d25e:	029b      	lsls	r3, r3, #10
 800d260:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d264:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d266:	6849      	ldr	r1, [r1, #4]
 800d268:	9100      	str	r1, [sp, #0]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	4a36      	ldr	r2, [pc, #216]	; (800d348 <lfs_file_opencfg+0x24c>)
 800d26e:	4641      	mov	r1, r8
 800d270:	4628      	mov	r0, r5
 800d272:	f7fd fdff 	bl	800ae74 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 800d276:	2800      	cmp	r0, #0
 800d278:	dacb      	bge.n	800d212 <lfs_file_opencfg+0x116>
 800d27a:	f110 0f02 	cmn.w	r0, #2
 800d27e:	d0c8      	beq.n	800d212 <lfs_file_opencfg+0x116>
                err = res;
 800d280:	4606      	mov	r6, r0
 800d282:	e04d      	b.n	800d320 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
 800d284:	6813      	ldr	r3, [r2, #0]
 800d286:	b18b      	cbz	r3, 800d2ac <lfs_file_opencfg+0x1b0>
        file->cache.buffer = file->cfg->buffer;
 800d288:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800d28a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800d28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d28e:	21ff      	movs	r1, #255	; 0xff
 800d290:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d292:	f000 fc0f 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295
 800d29a:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
 800d29c:	f3c6 520a 	ubfx	r2, r6, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800d2a0:	f240 2301 	movw	r3, #513	; 0x201
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d00b      	beq.n	800d2c0 <lfs_file_opencfg+0x1c4>
    return 0;
 800d2a8:	2600      	movs	r6, #0
 800d2aa:	e041      	b.n	800d330 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d2ac:	6eab      	ldr	r3, [r5, #104]	; 0x68
    return malloc(size);
 800d2ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d2b0:	f000 fbd6 	bl	800da60 <malloc>
 800d2b4:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d1e7      	bne.n	800d28a <lfs_file_opencfg+0x18e>
            err = LFS_ERR_NOMEM;
 800d2ba:	f06f 060b 	mvn.w	r6, #11
 800d2be:	e02f      	b.n	800d320 <lfs_file_opencfg+0x224>
        file->ctz.head = 0xfffffffe;
 800d2c0:	f06f 0201 	mvn.w	r2, #1
 800d2c4:	62a2      	str	r2, [r4, #40]	; 0x28
    return tag & 0x000003ff;
 800d2c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 800d2ca:	62e6      	str	r6, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800d2cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d2ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2d2:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800d2d4:	6422      	str	r2, [r4, #64]	; 0x40
        file->cache.off = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800d2da:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 800d2e0:	b90e      	cbnz	r6, 800d2e6 <lfs_file_opencfg+0x1ea>
    return 0;
 800d2e2:	2600      	movs	r6, #0
 800d2e4:	e024      	b.n	800d330 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800d2e6:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
 800d2e8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800d2ec:	428b      	cmp	r3, r1
 800d2ee:	bf28      	it	cs
 800d2f0:	460b      	movcs	r3, r1
 800d2f2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
 800d2f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d2f8:	9200      	str	r2, [sp, #0]
 800d2fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2fe:	4a11      	ldr	r2, [pc, #68]	; (800d344 <lfs_file_opencfg+0x248>)
 800d300:	4641      	mov	r1, r8
 800d302:	4628      	mov	r0, r5
 800d304:	f7fd fdb6 	bl	800ae74 <lfs_dir_get>
            if (res < 0) {
 800d308:	1e06      	subs	r6, r0, #0
 800d30a:	db09      	blt.n	800d320 <lfs_file_opencfg+0x224>
    return 0;
 800d30c:	2600      	movs	r6, #0
 800d30e:	e00f      	b.n	800d330 <lfs_file_opencfg+0x234>
            err = LFS_ERR_NOENT;
 800d310:	f06f 0601 	mvn.w	r6, #1
 800d314:	e004      	b.n	800d320 <lfs_file_opencfg+0x224>
            err = LFS_ERR_NAMETOOLONG;
 800d316:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800d31a:	e001      	b.n	800d320 <lfs_file_opencfg+0x224>
        err = LFS_ERR_EXIST;
 800d31c:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 800d320:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d326:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
 800d328:	4621      	mov	r1, r4
 800d32a:	4628      	mov	r0, r5
 800d32c:	f7ff fecd 	bl	800d0ca <lfs_file_close>
}
 800d330:	4630      	mov	r0, r6
 800d332:	b00a      	add	sp, #40	; 0x28
 800d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                err = LFS_ERR_NOSPC;
 800d338:	f06f 061b 	mvn.w	r6, #27
 800d33c:	e7f0      	b.n	800d320 <lfs_file_opencfg+0x224>
 800d33e:	bf00      	nop
 800d340:	20100000 	.word	0x20100000
 800d344:	700ffc00 	.word	0x700ffc00
 800d348:	7ffffc00 	.word	0x7ffffc00

0800d34c <lfs_file_open>:
        const char *path, int flags) {
 800d34c:	b510      	push	{r4, lr}
 800d34e:	b082      	sub	sp, #8
    return lfs_file_opencfg(lfs, file, path, flags, &defaults);
 800d350:	4c02      	ldr	r4, [pc, #8]	; (800d35c <lfs_file_open+0x10>)
 800d352:	9400      	str	r4, [sp, #0]
 800d354:	f7ff fed2 	bl	800d0fc <lfs_file_opencfg>
}
 800d358:	b002      	add	sp, #8
 800d35a:	bd10      	pop	{r4, pc}
 800d35c:	0800f3fc 	.word	0x0800f3fc

0800d360 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800d360:	b530      	push	{r4, r5, lr}
 800d362:	b097      	sub	sp, #92	; 0x5c
 800d364:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
 800d366:	f7fe f98f 	bl	800b688 <lfs_init>
        if (err) {
 800d36a:	4605      	mov	r5, r0
 800d36c:	b110      	cbz	r0, 800d374 <lfs_format+0x14>
}
 800d36e:	4628      	mov	r0, r5
 800d370:	b017      	add	sp, #92	; 0x5c
 800d372:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d374:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	2100      	movs	r1, #0
 800d37a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800d37c:	f000 fb9a 	bl	800dab4 <memset>
        lfs->free.off = 0;
 800d380:	2200      	movs	r2, #0
 800d382:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d384:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d386:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	6a09      	ldr	r1, [r1, #32]
 800d38c:	428b      	cmp	r3, r1
 800d38e:	bf28      	it	cs
 800d390:	460b      	movcs	r3, r1
 800d392:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800d394:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800d396:	4620      	mov	r0, r4
 800d398:	f7fc ff06 	bl	800a1a8 <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
 800d39c:	a906      	add	r1, sp, #24
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f7fe fcb8 	bl	800bd14 <lfs_dir_alloc>
        if (err) {
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	b118      	cbz	r0, 800d3b0 <lfs_format+0x50>
    lfs_deinit(lfs);
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f7fe f8eb 	bl	800b584 <lfs_deinit>
    return err;
 800d3ae:	e7de      	b.n	800d36e <lfs_format+0xe>
        lfs_superblock_t superblock = {
 800d3b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d3b4:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 800d3b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d3b8:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 800d3ba:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800d3be:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 800d3c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800d3c2:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 800d3c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
 800d3c6:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 800d3c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
 800d3ca:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <lfs_format+0xac>)
 800d3ce:	930e      	str	r3, [sp, #56]	; 0x38
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <lfs_format+0xb0>)
 800d3d6:	9310      	str	r3, [sp, #64]	; 0x40
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <lfs_format+0xb4>)
 800d3da:	9311      	str	r3, [sp, #68]	; 0x44
 800d3dc:	4b0e      	ldr	r3, [pc, #56]	; (800d418 <lfs_format+0xb8>)
 800d3de:	9312      	str	r3, [sp, #72]	; 0x48
 800d3e0:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	aa0e      	add	r2, sp, #56	; 0x38
 800d3e8:	a906      	add	r1, sp, #24
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7ff fa90 	bl	800c910 <lfs_dir_commit>
        if (err) {
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d1d8      	bne.n	800d3a8 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9314      	str	r3, [sp, #80]	; 0x50
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	9315      	str	r3, [sp, #84]	; 0x54
 800d3fe:	aa14      	add	r2, sp, #80	; 0x50
 800d400:	a906      	add	r1, sp, #24
 800d402:	4620      	mov	r0, r4
 800d404:	f7fd fb0c 	bl	800aa20 <lfs_dir_fetch>
 800d408:	4605      	mov	r5, r0
 800d40a:	e7cd      	b.n	800d3a8 <lfs_format+0x48>
 800d40c:	40100000 	.word	0x40100000
 800d410:	0ff00008 	.word	0x0ff00008
 800d414:	0800f8a8 	.word	0x0800f8a8
 800d418:	20100018 	.word	0x20100018

0800d41c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d420:	b08c      	sub	sp, #48	; 0x30
 800d422:	4605      	mov	r5, r0
 800d424:	460c      	mov	r4, r1
 800d426:	4617      	mov	r7, r2
 800d428:	4698      	mov	r8, r3
 800d42a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    int err = lfs_dir_alloc(lfs, &tail);
 800d42e:	a904      	add	r1, sp, #16
 800d430:	f7fe fc70 	bl	800bd14 <lfs_dir_alloc>
    if (err) {
 800d434:	4603      	mov	r3, r0
 800d436:	b118      	cbz	r0, 800d440 <lfs_dir_split+0x24>
}
 800d438:	4618      	mov	r0, r3
 800d43a:	b00c      	add	sp, #48	; 0x30
 800d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
 800d440:	7de3      	ldrb	r3, [r4, #23]
 800d442:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800d446:	69a3      	ldr	r3, [r4, #24]
 800d448:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800d44e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d452:	9302      	str	r3, [sp, #8]
 800d454:	9601      	str	r6, [sp, #4]
 800d456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	4643      	mov	r3, r8
 800d45c:	463a      	mov	r2, r7
 800d45e:	a904      	add	r1, sp, #16
 800d460:	4628      	mov	r0, r5
 800d462:	f7ff f843 	bl	800c4ec <lfs_dir_compact>
    if (err) {
 800d466:	4603      	mov	r3, r0
 800d468:	2800      	cmp	r0, #0
 800d46a:	d1e5      	bne.n	800d438 <lfs_dir_split+0x1c>
    dir->tail[0] = tail.pair[0];
 800d46c:	9904      	ldr	r1, [sp, #16]
 800d46e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 800d470:	9a05      	ldr	r2, [sp, #20]
 800d472:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 800d474:	2001      	movs	r0, #1
 800d476:	75e0      	strb	r0, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	6a2f      	ldr	r7, [r5, #32]
 800d47c:	42b8      	cmp	r0, r7
 800d47e:	d008      	beq.n	800d492 <lfs_dir_split+0x76>
 800d480:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d484:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d486:	45a4      	cmp	ip, r4
 800d488:	d003      	beq.n	800d492 <lfs_dir_split+0x76>
 800d48a:	42a0      	cmp	r0, r4
 800d48c:	d001      	beq.n	800d492 <lfs_dir_split+0x76>
 800d48e:	4567      	cmp	r7, ip
 800d490:	d1d2      	bne.n	800d438 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800d492:	2e00      	cmp	r6, #0
 800d494:	d1d0      	bne.n	800d438 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 800d496:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 800d498:	626a      	str	r2, [r5, #36]	; 0x24
 800d49a:	e7cd      	b.n	800d438 <lfs_dir_split+0x1c>

0800d49c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800d49c:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 800d49e:	2400      	movs	r4, #0
 800d4a0:	e012      	b.n	800d4c8 <lfs_crc+0x2c>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800d4a2:	5d0b      	ldrb	r3, [r1, r4]
 800d4a4:	ea83 0500 	eor.w	r5, r3, r0
 800d4a8:	f005 050f 	and.w	r5, r5, #15
 800d4ac:	4e08      	ldr	r6, [pc, #32]	; (800d4d0 <lfs_crc+0x34>)
 800d4ae:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800d4b2:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800d4b6:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 800d4ba:	f003 030f 	and.w	r3, r3, #15
 800d4be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d4c2:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	4294      	cmp	r4, r2
 800d4ca:	d3ea      	bcc.n	800d4a2 <lfs_crc+0x6>
    }

    return crc;
}
 800d4cc:	bc70      	pop	{r4, r5, r6}
 800d4ce:	4770      	bx	lr
 800d4d0:	0800f994 	.word	0x0800f994

0800d4d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d4d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d4d6:	e003      	b.n	800d4e0 <LoopCopyDataInit>

0800d4d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d4d8:	4b0b      	ldr	r3, [pc, #44]	; (800d508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800d4da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d4dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d4de:	3104      	adds	r1, #4

0800d4e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d4e0:	480a      	ldr	r0, [pc, #40]	; (800d50c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800d4e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d4e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d4e8:	d3f6      	bcc.n	800d4d8 <CopyDataInit>
  ldr r2, =_sbss
 800d4ea:	4a0a      	ldr	r2, [pc, #40]	; (800d514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800d4ec:	e002      	b.n	800d4f4 <LoopFillZerobss>

0800d4ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d4ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 800d4f0:	f842 3b04 	str.w	r3, [r2], #4

0800d4f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800d4f4:	4b08      	ldr	r3, [pc, #32]	; (800d518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800d4f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d4f8:	d3f9      	bcc.n	800d4ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d4fa:	f7f3 ffc3 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d4fe:	f000 fa8b 	bl	800da18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d502:	f7f3 fcf9 	bl	8000ef8 <main>
  bx lr
 800d506:	4770      	bx	lr
  ldr r3, =_sidata
 800d508:	0800fb0c 	.word	0x0800fb0c
  ldr r0, =_sdata
 800d50c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d510:	2000018c 	.word	0x2000018c
  ldr r2, =_sbss
 800d514:	20000190 	.word	0x20000190
  ldr r3, = _ebss
 800d518:	20007818 	.word	0x20007818

0800d51c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d51c:	e7fe      	b.n	800d51c <ADC1_2_IRQHandler>
	...

0800d520 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d522:	2200      	movs	r2, #0
 800d524:	490f      	ldr	r1, [pc, #60]	; (800d564 <MX_USB_DEVICE_Init+0x44>)
 800d526:	4810      	ldr	r0, [pc, #64]	; (800d568 <MX_USB_DEVICE_Init+0x48>)
 800d528:	f7fa f9e6 	bl	80078f8 <USBD_Init>
 800d52c:	b970      	cbnz	r0, 800d54c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d52e:	490f      	ldr	r1, [pc, #60]	; (800d56c <MX_USB_DEVICE_Init+0x4c>)
 800d530:	480d      	ldr	r0, [pc, #52]	; (800d568 <MX_USB_DEVICE_Init+0x48>)
 800d532:	f7fa f9f8 	bl	8007926 <USBD_RegisterClass>
 800d536:	b960      	cbnz	r0, 800d552 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d538:	490d      	ldr	r1, [pc, #52]	; (800d570 <MX_USB_DEVICE_Init+0x50>)
 800d53a:	480b      	ldr	r0, [pc, #44]	; (800d568 <MX_USB_DEVICE_Init+0x48>)
 800d53c:	f7f9 fd75 	bl	800702a <USBD_MSC_RegisterStorage>
 800d540:	b950      	cbnz	r0, 800d558 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d542:	4809      	ldr	r0, [pc, #36]	; (800d568 <MX_USB_DEVICE_Init+0x48>)
 800d544:	f7fa f9f6 	bl	8007934 <USBD_Start>
 800d548:	b948      	cbnz	r0, 800d55e <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d54a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800d54c:	f7f3 fd08 	bl	8000f60 <Error_Handler>
 800d550:	e7ed      	b.n	800d52e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800d552:	f7f3 fd05 	bl	8000f60 <Error_Handler>
 800d556:	e7ef      	b.n	800d538 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800d558:	f7f3 fd02 	bl	8000f60 <Error_Handler>
 800d55c:	e7f1      	b.n	800d542 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800d55e:	f7f3 fcff 	bl	8000f60 <Error_Handler>
}
 800d562:	e7f2      	b.n	800d54a <MX_USB_DEVICE_Init+0x2a>
 800d564:	200000b4 	.word	0x200000b4
 800d568:	20006f90 	.word	0x20006f90
 800d56c:	20000008 	.word	0x20000008
 800d570:	20000104 	.word	0x20000104

0800d574 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800d574:	2312      	movs	r3, #18
 800d576:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800d578:	4800      	ldr	r0, [pc, #0]	; (800d57c <USBD_FS_DeviceDescriptor+0x8>)
 800d57a:	4770      	bx	lr
 800d57c:	200000d0 	.word	0x200000d0

0800d580 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800d580:	2304      	movs	r3, #4
 800d582:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d584:	4800      	ldr	r0, [pc, #0]	; (800d588 <USBD_FS_LangIDStrDescriptor+0x8>)
 800d586:	4770      	bx	lr
 800d588:	200000e4 	.word	0x200000e4

0800d58c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800d58c:	2300      	movs	r3, #0
 800d58e:	4293      	cmp	r3, r2
 800d590:	d216      	bcs.n	800d5c0 <IntToUnicode+0x34>
{
 800d592:	b430      	push	{r4, r5}
 800d594:	e00b      	b.n	800d5ae <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d596:	3437      	adds	r4, #55	; 0x37
 800d598:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800d59c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800d59e:	005c      	lsls	r4, r3, #1
 800d5a0:	3401      	adds	r4, #1
 800d5a2:	2500      	movs	r5, #0
 800d5a4:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d206      	bcs.n	800d5bc <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800d5ae:	0f04      	lsrs	r4, r0, #28
 800d5b0:	2c09      	cmp	r4, #9
 800d5b2:	d8f0      	bhi.n	800d596 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5b4:	3430      	adds	r4, #48	; 0x30
 800d5b6:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800d5ba:	e7ef      	b.n	800d59c <IntToUnicode+0x10>
  }
}
 800d5bc:	bc30      	pop	{r4, r5}
 800d5be:	4770      	bx	lr
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <Get_SerialNum>:
{
 800d5c4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <Get_SerialNum+0x2c>)
 800d5c8:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800d5d2:	18c0      	adds	r0, r0, r3
 800d5d4:	d100      	bne.n	800d5d8 <Get_SerialNum+0x14>
}
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5d8:	4d06      	ldr	r5, [pc, #24]	; (800d5f4 <Get_SerialNum+0x30>)
 800d5da:	2208      	movs	r2, #8
 800d5dc:	1ca9      	adds	r1, r5, #2
 800d5de:	f7ff ffd5 	bl	800d58c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5e2:	2204      	movs	r2, #4
 800d5e4:	f105 0112 	add.w	r1, r5, #18
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f7ff ffcf 	bl	800d58c <IntToUnicode>
}
 800d5ee:	e7f2      	b.n	800d5d6 <Get_SerialNum+0x12>
 800d5f0:	1ffff7e8 	.word	0x1ffff7e8
 800d5f4:	200000e8 	.word	0x200000e8

0800d5f8 <USBD_FS_SerialStrDescriptor>:
{
 800d5f8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d5fa:	231a      	movs	r3, #26
 800d5fc:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800d5fe:	f7ff ffe1 	bl	800d5c4 <Get_SerialNum>
}
 800d602:	4801      	ldr	r0, [pc, #4]	; (800d608 <USBD_FS_SerialStrDescriptor+0x10>)
 800d604:	bd08      	pop	{r3, pc}
 800d606:	bf00      	nop
 800d608:	200000e8 	.word	0x200000e8

0800d60c <USBD_FS_ProductStrDescriptor>:
{
 800d60c:	b508      	push	{r3, lr}
 800d60e:	460a      	mov	r2, r1
  if(speed == 0)
 800d610:	b128      	cbz	r0, 800d61e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d612:	4905      	ldr	r1, [pc, #20]	; (800d628 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d614:	4805      	ldr	r0, [pc, #20]	; (800d62c <USBD_FS_ProductStrDescriptor+0x20>)
 800d616:	f7fa fcfe 	bl	8008016 <USBD_GetString>
}
 800d61a:	4803      	ldr	r0, [pc, #12]	; (800d628 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d61c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d61e:	4902      	ldr	r1, [pc, #8]	; (800d628 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d620:	4802      	ldr	r0, [pc, #8]	; (800d62c <USBD_FS_ProductStrDescriptor+0x20>)
 800d622:	f7fa fcf8 	bl	8008016 <USBD_GetString>
 800d626:	e7f8      	b.n	800d61a <USBD_FS_ProductStrDescriptor+0xe>
 800d628:	200071b4 	.word	0x200071b4
 800d62c:	0800f9f8 	.word	0x0800f9f8

0800d630 <USBD_FS_ManufacturerStrDescriptor>:
{
 800d630:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d632:	4c04      	ldr	r4, [pc, #16]	; (800d644 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800d634:	460a      	mov	r2, r1
 800d636:	4621      	mov	r1, r4
 800d638:	4803      	ldr	r0, [pc, #12]	; (800d648 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d63a:	f7fa fcec 	bl	8008016 <USBD_GetString>
}
 800d63e:	4620      	mov	r0, r4
 800d640:	bd10      	pop	{r4, pc}
 800d642:	bf00      	nop
 800d644:	200071b4 	.word	0x200071b4
 800d648:	0800f9f0 	.word	0x0800f9f0

0800d64c <USBD_FS_ConfigStrDescriptor>:
{
 800d64c:	b508      	push	{r3, lr}
 800d64e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d650:	b128      	cbz	r0, 800d65e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d652:	4905      	ldr	r1, [pc, #20]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d654:	4805      	ldr	r0, [pc, #20]	; (800d66c <USBD_FS_ConfigStrDescriptor+0x20>)
 800d656:	f7fa fcde 	bl	8008016 <USBD_GetString>
}
 800d65a:	4803      	ldr	r0, [pc, #12]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d65c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d65e:	4902      	ldr	r1, [pc, #8]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d660:	4802      	ldr	r0, [pc, #8]	; (800d66c <USBD_FS_ConfigStrDescriptor+0x20>)
 800d662:	f7fa fcd8 	bl	8008016 <USBD_GetString>
 800d666:	e7f8      	b.n	800d65a <USBD_FS_ConfigStrDescriptor+0xe>
 800d668:	200071b4 	.word	0x200071b4
 800d66c:	0800f9d4 	.word	0x0800f9d4

0800d670 <USBD_FS_InterfaceStrDescriptor>:
{
 800d670:	b508      	push	{r3, lr}
 800d672:	460a      	mov	r2, r1
  if(speed == 0)
 800d674:	b128      	cbz	r0, 800d682 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d676:	4905      	ldr	r1, [pc, #20]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d678:	4805      	ldr	r0, [pc, #20]	; (800d690 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d67a:	f7fa fccc 	bl	8008016 <USBD_GetString>
}
 800d67e:	4803      	ldr	r0, [pc, #12]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d680:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d682:	4902      	ldr	r1, [pc, #8]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d684:	4802      	ldr	r0, [pc, #8]	; (800d690 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d686:	f7fa fcc6 	bl	8008016 <USBD_GetString>
 800d68a:	e7f8      	b.n	800d67e <USBD_FS_InterfaceStrDescriptor+0xe>
 800d68c:	200071b4 	.word	0x200071b4
 800d690:	0800f9e0 	.word	0x0800f9e0

0800d694 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d694:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 2 */
/* Configure the uSD device */
sd_Stat = USBD_FAIL;
 800d696:	4c05      	ldr	r4, [pc, #20]	; (800d6ac <STORAGE_Init_FS+0x18>)
 800d698:	2302      	movs	r3, #2
 800d69a:	7023      	strb	r3, [r4, #0]
sd_Stat = SD_Driver.disk_initialize(lun);
 800d69c:	4b04      	ldr	r3, [pc, #16]	; (800d6b0 <STORAGE_Init_FS+0x1c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4798      	blx	r3
 800d6a2:	7020      	strb	r0, [r4, #0]
return sd_Stat;
 800d6a4:	7820      	ldrb	r0, [r4, #0]

  /* USER CODE END 2 */
}
 800d6a6:	b240      	sxtb	r0, r0
 800d6a8:	bd10      	pop	{r4, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20000124 	.word	0x20000124
 800d6b0:	0800f35c 	.word	0x0800f35c

0800d6b4 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	4770      	bx	lr

0800d6b8 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	4770      	bx	lr

0800d6bc <STORAGE_Write_FS>:
{
 800d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	4616      	mov	r6, r2
 800d6c6:	461f      	mov	r7, r3
if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800d6c8:	f7f9 fb8d 	bl	8006de6 <BSP_SD_IsDetected>
 800d6cc:	b148      	cbz	r0, 800d6e2 <STORAGE_Write_FS+0x26>
    sd_Stat =  SD_Driver.disk_write(lun, buf,  (uint32_t)blk_addr,  (uint16_t) blk_len);
 800d6ce:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <STORAGE_Write_FS+0x2c>)
 800d6d0:	68dc      	ldr	r4, [r3, #12]
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4640      	mov	r0, r8
 800d6da:	47a0      	blx	r4
 800d6dc:	b240      	sxtb	r0, r0
}
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int8_t sd_Stat = -1;
 800d6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e6:	e7fa      	b.n	800d6de <STORAGE_Write_FS+0x22>
 800d6e8:	0800f35c 	.word	0x0800f35c

0800d6ec <STORAGE_Read_FS>:
{
 800d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	4616      	mov	r6, r2
 800d6f6:	461f      	mov	r7, r3
sd_Stat = -1;
 800d6f8:	4b09      	ldr	r3, [pc, #36]	; (800d720 <STORAGE_Read_FS+0x34>)
 800d6fa:	22ff      	movs	r2, #255	; 0xff
 800d6fc:	701a      	strb	r2, [r3, #0]
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800d6fe:	f7f9 fb72 	bl	8006de6 <BSP_SD_IsDetected>
 800d702:	b140      	cbz	r0, 800d716 <STORAGE_Read_FS+0x2a>
      sd_Stat =  SD_Driver.disk_read(lun, buf,  (uint32_t)blk_addr,  (uint16_t) blk_len);
 800d704:	4b07      	ldr	r3, [pc, #28]	; (800d724 <STORAGE_Read_FS+0x38>)
 800d706:	689c      	ldr	r4, [r3, #8]
 800d708:	463b      	mov	r3, r7
 800d70a:	4632      	mov	r2, r6
 800d70c:	4629      	mov	r1, r5
 800d70e:	4640      	mov	r0, r8
 800d710:	47a0      	blx	r4
 800d712:	4b03      	ldr	r3, [pc, #12]	; (800d720 <STORAGE_Read_FS+0x34>)
 800d714:	7018      	strb	r0, [r3, #0]
  return sd_Stat;
 800d716:	4b02      	ldr	r3, [pc, #8]	; (800d720 <STORAGE_Read_FS+0x34>)
 800d718:	7818      	ldrb	r0, [r3, #0]
}
 800d71a:	b240      	sxtb	r0, r0
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	20000124 	.word	0x20000124
 800d724:	0800f35c 	.word	0x0800f35c

0800d728 <STORAGE_IsReady_FS>:
{
 800d728:	b510      	push	{r4, lr}
 800d72a:	4604      	mov	r4, r0
sd_Stat = -1;
 800d72c:	4b07      	ldr	r3, [pc, #28]	; (800d74c <STORAGE_IsReady_FS+0x24>)
 800d72e:	22ff      	movs	r2, #255	; 0xff
 800d730:	701a      	strb	r2, [r3, #0]
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800d732:	f7f9 fb58 	bl	8006de6 <BSP_SD_IsDetected>
 800d736:	b128      	cbz	r0, 800d744 <STORAGE_IsReady_FS+0x1c>
      sd_Stat =   SD_Driver.disk_status(lun);
 800d738:	4b05      	ldr	r3, [pc, #20]	; (800d750 <STORAGE_IsReady_FS+0x28>)
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	4620      	mov	r0, r4
 800d73e:	4798      	blx	r3
 800d740:	4b02      	ldr	r3, [pc, #8]	; (800d74c <STORAGE_IsReady_FS+0x24>)
 800d742:	7018      	strb	r0, [r3, #0]
  return sd_Stat;
 800d744:	4b01      	ldr	r3, [pc, #4]	; (800d74c <STORAGE_IsReady_FS+0x24>)
 800d746:	7818      	ldrb	r0, [r3, #0]
}
 800d748:	b240      	sxtb	r0, r0
 800d74a:	bd10      	pop	{r4, pc}
 800d74c:	20000124 	.word	0x20000124
 800d750:	0800f35c 	.word	0x0800f35c

0800d754 <STORAGE_GetCapacity_FS>:
{
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	4604      	mov	r4, r0
 800d758:	460f      	mov	r7, r1
 800d75a:	4616      	mov	r6, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800d75c:	f7f9 fb43 	bl	8006de6 <BSP_SD_IsDetected>
 800d760:	b170      	cbz	r0, 800d780 <STORAGE_GetCapacity_FS+0x2c>
      sd_Stat = SD_Driver.disk_ioctl(lun, GET_SECTOR_COUNT, block_num);
 800d762:	4d09      	ldr	r5, [pc, #36]	; (800d788 <STORAGE_GetCapacity_FS+0x34>)
 800d764:	692b      	ldr	r3, [r5, #16]
 800d766:	463a      	mov	r2, r7
 800d768:	2101      	movs	r1, #1
 800d76a:	4620      	mov	r0, r4
 800d76c:	4798      	blx	r3
 800d76e:	b247      	sxtb	r7, r0
      sd_Stat |= SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, block_size);
 800d770:	692b      	ldr	r3, [r5, #16]
 800d772:	4632      	mov	r2, r6
 800d774:	2102      	movs	r1, #2
 800d776:	4620      	mov	r0, r4
 800d778:	4798      	blx	r3
 800d77a:	b240      	sxtb	r0, r0
 800d77c:	4338      	orrs	r0, r7
}
 800d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int8_t sd_Stat = -1;
 800d780:	f04f 30ff 	mov.w	r0, #4294967295
 800d784:	e7fb      	b.n	800d77e <STORAGE_GetCapacity_FS+0x2a>
 800d786:	bf00      	nop
 800d788:	0800f35c 	.word	0x0800f35c

0800d78c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d78c:	b118      	cbz	r0, 800d796 <USBD_Get_USB_Status+0xa>
 800d78e:	2802      	cmp	r0, #2
 800d790:	d003      	beq.n	800d79a <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d792:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d794:	4770      	bx	lr
      usb_status = USBD_OK;
 800d796:	2000      	movs	r0, #0
 800d798:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800d79a:	2001      	movs	r0, #1
    break;
 800d79c:	4770      	bx	lr
	...

0800d7a0 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800d7a0:	6802      	ldr	r2, [r0, #0]
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	; (800d7dc <HAL_PCD_MspInit+0x3c>)
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d000      	beq.n	800d7aa <HAL_PCD_MspInit+0xa>
 800d7a8:	4770      	bx	lr
{
 800d7aa:	b500      	push	{lr}
 800d7ac:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d7ae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800d7b2:	69da      	ldr	r2, [r3, #28]
 800d7b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d7b8:	61da      	str	r2, [r3, #28]
 800d7ba:	69db      	ldr	r3, [r3, #28]
 800d7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2105      	movs	r1, #5
 800d7c8:	2014      	movs	r0, #20
 800d7ca:	f7f4 fff7 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d7ce:	2014      	movs	r0, #20
 800d7d0:	f7f5 f83a 	bl	8002848 <HAL_NVIC_EnableIRQ>
}
 800d7d4:	b003      	add	sp, #12
 800d7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7da:	bf00      	nop
 800d7dc:	40005c00 	.word	0x40005c00

0800d7e0 <HAL_PCD_SetupStageCallback>:
{
 800d7e0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7e2:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800d7e6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d7ea:	f7fa f8bc 	bl	8007966 <USBD_LL_SetupStage>
}
 800d7ee:	bd08      	pop	{r3, pc}

0800d7f0 <HAL_PCD_DataOutStageCallback>:
{
 800d7f0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7f2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d7f6:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800d7fa:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d7fe:	f7fa f8df 	bl	80079c0 <USBD_LL_DataOutStage>
}
 800d802:	bd08      	pop	{r3, pc}

0800d804 <HAL_PCD_DataInStageCallback>:
{
 800d804:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d806:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d80a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d80c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d810:	f7fa f90b 	bl	8007a2a <USBD_LL_DataInStage>
}
 800d814:	bd08      	pop	{r3, pc}

0800d816 <HAL_PCD_SOFCallback>:
{
 800d816:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d818:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d81c:	f7fa f98e 	bl	8007b3c <USBD_LL_SOF>
}
 800d820:	bd08      	pop	{r3, pc}

0800d822 <HAL_PCD_ResetCallback>:
{ 
 800d822:	b510      	push	{r4, lr}
 800d824:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d826:	6883      	ldr	r3, [r0, #8]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d001      	beq.n	800d830 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800d82c:	f7f3 fb98 	bl	8000f60 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d830:	2101      	movs	r1, #1
 800d832:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d836:	f7fa f96f 	bl	8007b18 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d83a:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d83e:	f7fa f94c 	bl	8007ada <USBD_LL_Reset>
}
 800d842:	bd10      	pop	{r4, pc}

0800d844 <HAL_PCD_SuspendCallback>:
{
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d848:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d84c:	f7fa f967 	bl	8007b1e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800d850:	69a3      	ldr	r3, [r4, #24]
 800d852:	b123      	cbz	r3, 800d85e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d854:	4a02      	ldr	r2, [pc, #8]	; (800d860 <HAL_PCD_SuspendCallback+0x1c>)
 800d856:	6913      	ldr	r3, [r2, #16]
 800d858:	f043 0306 	orr.w	r3, r3, #6
 800d85c:	6113      	str	r3, [r2, #16]
}
 800d85e:	bd10      	pop	{r4, pc}
 800d860:	e000ed00 	.word	0xe000ed00

0800d864 <HAL_PCD_ResumeCallback>:
{
 800d864:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d866:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d86a:	f7fa f961 	bl	8007b30 <USBD_LL_Resume>
}
 800d86e:	bd08      	pop	{r3, pc}

0800d870 <USBD_LL_Init>:
{
 800d870:	b510      	push	{r4, lr}
 800d872:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800d874:	4819      	ldr	r0, [pc, #100]	; (800d8dc <USBD_LL_Init+0x6c>)
 800d876:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800d87a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Instance = USB;
 800d87e:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <USBD_LL_Init+0x70>)
 800d880:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d882:	2308      	movs	r3, #8
 800d884:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d886:	2302      	movs	r3, #2
 800d888:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d88e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d890:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d892:	f7f5 fca7 	bl	80031e4 <HAL_PCD_Init>
 800d896:	b9e8      	cbnz	r0, 800d8d4 <USBD_LL_Init+0x64>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d898:	2318      	movs	r3, #24
 800d89a:	2200      	movs	r2, #0
 800d89c:	4611      	mov	r1, r2
 800d89e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8a2:	f7f6 f918 	bl	8003ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d8a6:	2358      	movs	r3, #88	; 0x58
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2180      	movs	r1, #128	; 0x80
 800d8ac:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8b0:	f7f6 f911 	bl	8003ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800d8b4:	2398      	movs	r3, #152	; 0x98
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2181      	movs	r1, #129	; 0x81
 800d8ba:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8be:	f7f6 f90a 	bl	8003ad6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800d8c2:	23d8      	movs	r3, #216	; 0xd8
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2101      	movs	r1, #1
 800d8c8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8cc:	f7f6 f903 	bl	8003ad6 <HAL_PCDEx_PMAConfig>
}
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d8d4:	f7f3 fb44 	bl	8000f60 <Error_Handler>
 800d8d8:	e7de      	b.n	800d898 <USBD_LL_Init+0x28>
 800d8da:	bf00      	nop
 800d8dc:	200073b4 	.word	0x200073b4
 800d8e0:	40005c00 	.word	0x40005c00

0800d8e4 <USBD_LL_Start>:
{
 800d8e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d8e6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d8ea:	f7f5 fcf3 	bl	80032d4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ee:	f7ff ff4d 	bl	800d78c <USBD_Get_USB_Status>
}
 800d8f2:	bd08      	pop	{r3, pc}

0800d8f4 <USBD_LL_OpenEP>:
{
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	4622      	mov	r2, r4
 800d8fc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d900:	f7f5 fd13 	bl	800332a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d904:	f7ff ff42 	bl	800d78c <USBD_Get_USB_Status>
}
 800d908:	bd10      	pop	{r4, pc}

0800d90a <USBD_LL_CloseEP>:
{
 800d90a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d90c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d910:	f7f5 fd34 	bl	800337c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d914:	f7ff ff3a 	bl	800d78c <USBD_Get_USB_Status>
}
 800d918:	bd08      	pop	{r3, pc}

0800d91a <USBD_LL_FlushEP>:
{
 800d91a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d91c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d920:	f7f6 f8be 	bl	8003aa0 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d924:	f7ff ff32 	bl	800d78c <USBD_Get_USB_Status>
}
 800d928:	bd08      	pop	{r3, pc}

0800d92a <USBD_LL_StallEP>:
{
 800d92a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d92c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d930:	f7f6 f861 	bl	80039f6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d934:	f7ff ff2a 	bl	800d78c <USBD_Get_USB_Status>
}
 800d938:	bd08      	pop	{r3, pc}

0800d93a <USBD_LL_ClearStallEP>:
{
 800d93a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d93c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d940:	f7f6 f887 	bl	8003a52 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d944:	f7ff ff22 	bl	800d78c <USBD_Get_USB_Status>
}
 800d948:	bd08      	pop	{r3, pc}

0800d94a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d94a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800d94e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d952:	d106      	bne.n	800d962 <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d954:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d958:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d95c:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
}
 800d960:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d962:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d966:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d96a:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 800d96e:	4770      	bx	lr

0800d970 <USBD_LL_SetUSBAddress>:
{
 800d970:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d972:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d976:	f7f5 fcc4 	bl	8003302 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97a:	f7ff ff07 	bl	800d78c <USBD_Get_USB_Status>
}
 800d97e:	bd08      	pop	{r3, pc}

0800d980 <USBD_LL_Transmit>:
{
 800d980:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d982:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d986:	f7f5 fd46 	bl	8003416 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d98a:	f7ff feff 	bl	800d78c <USBD_Get_USB_Status>
}
 800d98e:	bd08      	pop	{r3, pc}

0800d990 <USBD_LL_PrepareReceive>:
{
 800d990:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d992:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d996:	f7f5 fd18 	bl	80033ca <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d99a:	f7ff fef7 	bl	800d78c <USBD_Get_USB_Status>
}
 800d99e:	bd08      	pop	{r3, pc}

0800d9a0 <USBD_LL_GetRxDataSize>:
{
 800d9a0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d9a6:	f7f5 fd2f 	bl	8003408 <HAL_PCD_EP_GetRxCount>
}
 800d9aa:	bd08      	pop	{r3, pc}

0800d9ac <USBD_static_malloc>:
}
 800d9ac:	4800      	ldr	r0, [pc, #0]	; (800d9b0 <USBD_static_malloc+0x4>)
 800d9ae:	4770      	bx	lr
 800d9b0:	200037a0 	.word	0x200037a0

0800d9b4 <USBD_static_free>:
}
 800d9b4:	4770      	bx	lr

0800d9b6 <HAL_PCDEx_SetConnectionState>:
}
 800d9b6:	4770      	bx	lr

0800d9b8 <__assert_func>:
 800d9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <__assert_func+0x2c>)
 800d9be:	4605      	mov	r5, r0
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68d8      	ldr	r0, [r3, #12]
 800d9c4:	b152      	cbz	r2, 800d9dc <__assert_func+0x24>
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <__assert_func+0x30>)
 800d9c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9cc:	9100      	str	r1, [sp, #0]
 800d9ce:	462b      	mov	r3, r5
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	4906      	ldr	r1, [pc, #24]	; (800d9ec <__assert_func+0x34>)
 800d9d4:	f000 f80e 	bl	800d9f4 <fiprintf>
 800d9d8:	f000 fd1a 	bl	800e410 <abort>
 800d9dc:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <__assert_func+0x38>)
 800d9de:	461a      	mov	r2, r3
 800d9e0:	e7f2      	b.n	800d9c8 <__assert_func+0x10>
 800d9e2:	bf00      	nop
 800d9e4:	20000128 	.word	0x20000128
 800d9e8:	0800fa30 	.word	0x0800fa30
 800d9ec:	0800fa3d 	.word	0x0800fa3d
 800d9f0:	0800fa6b 	.word	0x0800fa6b

0800d9f4 <fiprintf>:
 800d9f4:	b40e      	push	{r1, r2, r3}
 800d9f6:	b503      	push	{r0, r1, lr}
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	ab03      	add	r3, sp, #12
 800d9fc:	4805      	ldr	r0, [pc, #20]	; (800da14 <fiprintf+0x20>)
 800d9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800da02:	6800      	ldr	r0, [r0, #0]
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	f000 f92b 	bl	800dc60 <_vfiprintf_r>
 800da0a:	b002      	add	sp, #8
 800da0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da10:	b003      	add	sp, #12
 800da12:	4770      	bx	lr
 800da14:	20000128 	.word	0x20000128

0800da18 <__libc_init_array>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	2500      	movs	r5, #0
 800da1c:	4e0c      	ldr	r6, [pc, #48]	; (800da50 <__libc_init_array+0x38>)
 800da1e:	4c0d      	ldr	r4, [pc, #52]	; (800da54 <__libc_init_array+0x3c>)
 800da20:	1ba4      	subs	r4, r4, r6
 800da22:	10a4      	asrs	r4, r4, #2
 800da24:	42a5      	cmp	r5, r4
 800da26:	d109      	bne.n	800da3c <__libc_init_array+0x24>
 800da28:	f001 f9c2 	bl	800edb0 <_init>
 800da2c:	2500      	movs	r5, #0
 800da2e:	4e0a      	ldr	r6, [pc, #40]	; (800da58 <__libc_init_array+0x40>)
 800da30:	4c0a      	ldr	r4, [pc, #40]	; (800da5c <__libc_init_array+0x44>)
 800da32:	1ba4      	subs	r4, r4, r6
 800da34:	10a4      	asrs	r4, r4, #2
 800da36:	42a5      	cmp	r5, r4
 800da38:	d105      	bne.n	800da46 <__libc_init_array+0x2e>
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da40:	4798      	blx	r3
 800da42:	3501      	adds	r5, #1
 800da44:	e7ee      	b.n	800da24 <__libc_init_array+0xc>
 800da46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da4a:	4798      	blx	r3
 800da4c:	3501      	adds	r5, #1
 800da4e:	e7f2      	b.n	800da36 <__libc_init_array+0x1e>
 800da50:	0800fb04 	.word	0x0800fb04
 800da54:	0800fb04 	.word	0x0800fb04
 800da58:	0800fb04 	.word	0x0800fb04
 800da5c:	0800fb08 	.word	0x0800fb08

0800da60 <malloc>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <malloc+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f000 b879 	b.w	800db5c <_malloc_r>
 800da6a:	bf00      	nop
 800da6c:	20000128 	.word	0x20000128

0800da70 <free>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <free+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f000 b825 	b.w	800dac4 <_free_r>
 800da7a:	bf00      	nop
 800da7c:	20000128 	.word	0x20000128

0800da80 <memcmp>:
 800da80:	b530      	push	{r4, r5, lr}
 800da82:	2400      	movs	r4, #0
 800da84:	42a2      	cmp	r2, r4
 800da86:	d101      	bne.n	800da8c <memcmp+0xc>
 800da88:	2000      	movs	r0, #0
 800da8a:	e007      	b.n	800da9c <memcmp+0x1c>
 800da8c:	5d03      	ldrb	r3, [r0, r4]
 800da8e:	3401      	adds	r4, #1
 800da90:	190d      	adds	r5, r1, r4
 800da92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800da96:	42ab      	cmp	r3, r5
 800da98:	d0f4      	beq.n	800da84 <memcmp+0x4>
 800da9a:	1b58      	subs	r0, r3, r5
 800da9c:	bd30      	pop	{r4, r5, pc}

0800da9e <memcpy>:
 800da9e:	b510      	push	{r4, lr}
 800daa0:	1e43      	subs	r3, r0, #1
 800daa2:	440a      	add	r2, r1
 800daa4:	4291      	cmp	r1, r2
 800daa6:	d100      	bne.n	800daaa <memcpy+0xc>
 800daa8:	bd10      	pop	{r4, pc}
 800daaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab2:	e7f7      	b.n	800daa4 <memcpy+0x6>

0800dab4 <memset>:
 800dab4:	4603      	mov	r3, r0
 800dab6:	4402      	add	r2, r0
 800dab8:	4293      	cmp	r3, r2
 800daba:	d100      	bne.n	800dabe <memset+0xa>
 800dabc:	4770      	bx	lr
 800dabe:	f803 1b01 	strb.w	r1, [r3], #1
 800dac2:	e7f9      	b.n	800dab8 <memset+0x4>

0800dac4 <_free_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4605      	mov	r5, r0
 800dac8:	2900      	cmp	r1, #0
 800daca:	d043      	beq.n	800db54 <_free_r+0x90>
 800dacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad0:	1f0c      	subs	r4, r1, #4
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	bfb8      	it	lt
 800dad6:	18e4      	addlt	r4, r4, r3
 800dad8:	f000 fea7 	bl	800e82a <__malloc_lock>
 800dadc:	4a1e      	ldr	r2, [pc, #120]	; (800db58 <_free_r+0x94>)
 800dade:	6813      	ldr	r3, [r2, #0]
 800dae0:	4610      	mov	r0, r2
 800dae2:	b933      	cbnz	r3, 800daf2 <_free_r+0x2e>
 800dae4:	6063      	str	r3, [r4, #4]
 800dae6:	6014      	str	r4, [r2, #0]
 800dae8:	4628      	mov	r0, r5
 800daea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daee:	f000 be9d 	b.w	800e82c <__malloc_unlock>
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	d90b      	bls.n	800db0e <_free_r+0x4a>
 800daf6:	6821      	ldr	r1, [r4, #0]
 800daf8:	1862      	adds	r2, r4, r1
 800dafa:	4293      	cmp	r3, r2
 800dafc:	bf01      	itttt	eq
 800dafe:	681a      	ldreq	r2, [r3, #0]
 800db00:	685b      	ldreq	r3, [r3, #4]
 800db02:	1852      	addeq	r2, r2, r1
 800db04:	6022      	streq	r2, [r4, #0]
 800db06:	6063      	str	r3, [r4, #4]
 800db08:	6004      	str	r4, [r0, #0]
 800db0a:	e7ed      	b.n	800dae8 <_free_r+0x24>
 800db0c:	4613      	mov	r3, r2
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	b10a      	cbz	r2, 800db16 <_free_r+0x52>
 800db12:	42a2      	cmp	r2, r4
 800db14:	d9fa      	bls.n	800db0c <_free_r+0x48>
 800db16:	6819      	ldr	r1, [r3, #0]
 800db18:	1858      	adds	r0, r3, r1
 800db1a:	42a0      	cmp	r0, r4
 800db1c:	d10b      	bne.n	800db36 <_free_r+0x72>
 800db1e:	6820      	ldr	r0, [r4, #0]
 800db20:	4401      	add	r1, r0
 800db22:	1858      	adds	r0, r3, r1
 800db24:	4282      	cmp	r2, r0
 800db26:	6019      	str	r1, [r3, #0]
 800db28:	d1de      	bne.n	800dae8 <_free_r+0x24>
 800db2a:	6810      	ldr	r0, [r2, #0]
 800db2c:	6852      	ldr	r2, [r2, #4]
 800db2e:	4401      	add	r1, r0
 800db30:	6019      	str	r1, [r3, #0]
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	e7d8      	b.n	800dae8 <_free_r+0x24>
 800db36:	d902      	bls.n	800db3e <_free_r+0x7a>
 800db38:	230c      	movs	r3, #12
 800db3a:	602b      	str	r3, [r5, #0]
 800db3c:	e7d4      	b.n	800dae8 <_free_r+0x24>
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	1821      	adds	r1, r4, r0
 800db42:	428a      	cmp	r2, r1
 800db44:	bf01      	itttt	eq
 800db46:	6811      	ldreq	r1, [r2, #0]
 800db48:	6852      	ldreq	r2, [r2, #4]
 800db4a:	1809      	addeq	r1, r1, r0
 800db4c:	6021      	streq	r1, [r4, #0]
 800db4e:	6062      	str	r2, [r4, #4]
 800db50:	605c      	str	r4, [r3, #4]
 800db52:	e7c9      	b.n	800dae8 <_free_r+0x24>
 800db54:	bd38      	pop	{r3, r4, r5, pc}
 800db56:	bf00      	nop
 800db58:	20003a10 	.word	0x20003a10

0800db5c <_malloc_r>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	1ccd      	adds	r5, r1, #3
 800db60:	f025 0503 	bic.w	r5, r5, #3
 800db64:	3508      	adds	r5, #8
 800db66:	2d0c      	cmp	r5, #12
 800db68:	bf38      	it	cc
 800db6a:	250c      	movcc	r5, #12
 800db6c:	2d00      	cmp	r5, #0
 800db6e:	4606      	mov	r6, r0
 800db70:	db01      	blt.n	800db76 <_malloc_r+0x1a>
 800db72:	42a9      	cmp	r1, r5
 800db74:	d903      	bls.n	800db7e <_malloc_r+0x22>
 800db76:	230c      	movs	r3, #12
 800db78:	6033      	str	r3, [r6, #0]
 800db7a:	2000      	movs	r0, #0
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
 800db7e:	f000 fe54 	bl	800e82a <__malloc_lock>
 800db82:	4a21      	ldr	r2, [pc, #132]	; (800dc08 <_malloc_r+0xac>)
 800db84:	6814      	ldr	r4, [r2, #0]
 800db86:	4621      	mov	r1, r4
 800db88:	b991      	cbnz	r1, 800dbb0 <_malloc_r+0x54>
 800db8a:	4c20      	ldr	r4, [pc, #128]	; (800dc0c <_malloc_r+0xb0>)
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	b91b      	cbnz	r3, 800db98 <_malloc_r+0x3c>
 800db90:	4630      	mov	r0, r6
 800db92:	f000 fb1b 	bl	800e1cc <_sbrk_r>
 800db96:	6020      	str	r0, [r4, #0]
 800db98:	4629      	mov	r1, r5
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 fb16 	bl	800e1cc <_sbrk_r>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d124      	bne.n	800dbee <_malloc_r+0x92>
 800dba4:	230c      	movs	r3, #12
 800dba6:	4630      	mov	r0, r6
 800dba8:	6033      	str	r3, [r6, #0]
 800dbaa:	f000 fe3f 	bl	800e82c <__malloc_unlock>
 800dbae:	e7e4      	b.n	800db7a <_malloc_r+0x1e>
 800dbb0:	680b      	ldr	r3, [r1, #0]
 800dbb2:	1b5b      	subs	r3, r3, r5
 800dbb4:	d418      	bmi.n	800dbe8 <_malloc_r+0x8c>
 800dbb6:	2b0b      	cmp	r3, #11
 800dbb8:	d90f      	bls.n	800dbda <_malloc_r+0x7e>
 800dbba:	600b      	str	r3, [r1, #0]
 800dbbc:	18cc      	adds	r4, r1, r3
 800dbbe:	50cd      	str	r5, [r1, r3]
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f000 fe33 	bl	800e82c <__malloc_unlock>
 800dbc6:	f104 000b 	add.w	r0, r4, #11
 800dbca:	1d23      	adds	r3, r4, #4
 800dbcc:	f020 0007 	bic.w	r0, r0, #7
 800dbd0:	1ac3      	subs	r3, r0, r3
 800dbd2:	d0d3      	beq.n	800db7c <_malloc_r+0x20>
 800dbd4:	425a      	negs	r2, r3
 800dbd6:	50e2      	str	r2, [r4, r3]
 800dbd8:	e7d0      	b.n	800db7c <_malloc_r+0x20>
 800dbda:	684b      	ldr	r3, [r1, #4]
 800dbdc:	428c      	cmp	r4, r1
 800dbde:	bf16      	itet	ne
 800dbe0:	6063      	strne	r3, [r4, #4]
 800dbe2:	6013      	streq	r3, [r2, #0]
 800dbe4:	460c      	movne	r4, r1
 800dbe6:	e7eb      	b.n	800dbc0 <_malloc_r+0x64>
 800dbe8:	460c      	mov	r4, r1
 800dbea:	6849      	ldr	r1, [r1, #4]
 800dbec:	e7cc      	b.n	800db88 <_malloc_r+0x2c>
 800dbee:	1cc4      	adds	r4, r0, #3
 800dbf0:	f024 0403 	bic.w	r4, r4, #3
 800dbf4:	42a0      	cmp	r0, r4
 800dbf6:	d005      	beq.n	800dc04 <_malloc_r+0xa8>
 800dbf8:	1a21      	subs	r1, r4, r0
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f000 fae6 	bl	800e1cc <_sbrk_r>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d0cf      	beq.n	800dba4 <_malloc_r+0x48>
 800dc04:	6025      	str	r5, [r4, #0]
 800dc06:	e7db      	b.n	800dbc0 <_malloc_r+0x64>
 800dc08:	20003a10 	.word	0x20003a10
 800dc0c:	20003a14 	.word	0x20003a14

0800dc10 <__sfputc_r>:
 800dc10:	6893      	ldr	r3, [r2, #8]
 800dc12:	b410      	push	{r4}
 800dc14:	3b01      	subs	r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	6093      	str	r3, [r2, #8]
 800dc1a:	da07      	bge.n	800dc2c <__sfputc_r+0x1c>
 800dc1c:	6994      	ldr	r4, [r2, #24]
 800dc1e:	42a3      	cmp	r3, r4
 800dc20:	db01      	blt.n	800dc26 <__sfputc_r+0x16>
 800dc22:	290a      	cmp	r1, #10
 800dc24:	d102      	bne.n	800dc2c <__sfputc_r+0x1c>
 800dc26:	bc10      	pop	{r4}
 800dc28:	f000 bb32 	b.w	800e290 <__swbuf_r>
 800dc2c:	6813      	ldr	r3, [r2, #0]
 800dc2e:	1c58      	adds	r0, r3, #1
 800dc30:	6010      	str	r0, [r2, #0]
 800dc32:	7019      	strb	r1, [r3, #0]
 800dc34:	4608      	mov	r0, r1
 800dc36:	bc10      	pop	{r4}
 800dc38:	4770      	bx	lr

0800dc3a <__sfputs_r>:
 800dc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	460f      	mov	r7, r1
 800dc40:	4614      	mov	r4, r2
 800dc42:	18d5      	adds	r5, r2, r3
 800dc44:	42ac      	cmp	r4, r5
 800dc46:	d101      	bne.n	800dc4c <__sfputs_r+0x12>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e007      	b.n	800dc5c <__sfputs_r+0x22>
 800dc4c:	463a      	mov	r2, r7
 800dc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7ff ffdc 	bl	800dc10 <__sfputc_r>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d1f3      	bne.n	800dc44 <__sfputs_r+0xa>
 800dc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc60 <_vfiprintf_r>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	460c      	mov	r4, r1
 800dc66:	b09d      	sub	sp, #116	; 0x74
 800dc68:	4617      	mov	r7, r2
 800dc6a:	461d      	mov	r5, r3
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	b118      	cbz	r0, 800dc78 <_vfiprintf_r+0x18>
 800dc70:	6983      	ldr	r3, [r0, #24]
 800dc72:	b90b      	cbnz	r3, 800dc78 <_vfiprintf_r+0x18>
 800dc74:	f000 fcc4 	bl	800e600 <__sinit>
 800dc78:	4b7c      	ldr	r3, [pc, #496]	; (800de6c <_vfiprintf_r+0x20c>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	d158      	bne.n	800dd30 <_vfiprintf_r+0xd0>
 800dc7e:	6874      	ldr	r4, [r6, #4]
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	0718      	lsls	r0, r3, #28
 800dc84:	d55e      	bpl.n	800dd44 <_vfiprintf_r+0xe4>
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d05b      	beq.n	800dd44 <_vfiprintf_r+0xe4>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc90:	2320      	movs	r3, #32
 800dc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc96:	2330      	movs	r3, #48	; 0x30
 800dc98:	f04f 0b01 	mov.w	fp, #1
 800dc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dca0:	9503      	str	r5, [sp, #12]
 800dca2:	46b8      	mov	r8, r7
 800dca4:	4645      	mov	r5, r8
 800dca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcaa:	b10b      	cbz	r3, 800dcb0 <_vfiprintf_r+0x50>
 800dcac:	2b25      	cmp	r3, #37	; 0x25
 800dcae:	d154      	bne.n	800dd5a <_vfiprintf_r+0xfa>
 800dcb0:	ebb8 0a07 	subs.w	sl, r8, r7
 800dcb4:	d00b      	beq.n	800dcce <_vfiprintf_r+0x6e>
 800dcb6:	4653      	mov	r3, sl
 800dcb8:	463a      	mov	r2, r7
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f7ff ffbc 	bl	800dc3a <__sfputs_r>
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	f000 80c2 	beq.w	800de4c <_vfiprintf_r+0x1ec>
 800dcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcca:	4453      	add	r3, sl
 800dccc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcce:	f898 3000 	ldrb.w	r3, [r8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 80ba 	beq.w	800de4c <_vfiprintf_r+0x1ec>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f04f 32ff 	mov.w	r2, #4294967295
 800dcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dce2:	9304      	str	r3, [sp, #16]
 800dce4:	9307      	str	r3, [sp, #28]
 800dce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcea:	931a      	str	r3, [sp, #104]	; 0x68
 800dcec:	46a8      	mov	r8, r5
 800dcee:	2205      	movs	r2, #5
 800dcf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dcf4:	485e      	ldr	r0, [pc, #376]	; (800de70 <_vfiprintf_r+0x210>)
 800dcf6:	f000 fd71 	bl	800e7dc <memchr>
 800dcfa:	9b04      	ldr	r3, [sp, #16]
 800dcfc:	bb78      	cbnz	r0, 800dd5e <_vfiprintf_r+0xfe>
 800dcfe:	06d9      	lsls	r1, r3, #27
 800dd00:	bf44      	itt	mi
 800dd02:	2220      	movmi	r2, #32
 800dd04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd08:	071a      	lsls	r2, r3, #28
 800dd0a:	bf44      	itt	mi
 800dd0c:	222b      	movmi	r2, #43	; 0x2b
 800dd0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd12:	782a      	ldrb	r2, [r5, #0]
 800dd14:	2a2a      	cmp	r2, #42	; 0x2a
 800dd16:	d02a      	beq.n	800dd6e <_vfiprintf_r+0x10e>
 800dd18:	46a8      	mov	r8, r5
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	250a      	movs	r5, #10
 800dd1e:	9a07      	ldr	r2, [sp, #28]
 800dd20:	4641      	mov	r1, r8
 800dd22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd26:	3b30      	subs	r3, #48	; 0x30
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d969      	bls.n	800de00 <_vfiprintf_r+0x1a0>
 800dd2c:	b360      	cbz	r0, 800dd88 <_vfiprintf_r+0x128>
 800dd2e:	e024      	b.n	800dd7a <_vfiprintf_r+0x11a>
 800dd30:	4b50      	ldr	r3, [pc, #320]	; (800de74 <_vfiprintf_r+0x214>)
 800dd32:	429c      	cmp	r4, r3
 800dd34:	d101      	bne.n	800dd3a <_vfiprintf_r+0xda>
 800dd36:	68b4      	ldr	r4, [r6, #8]
 800dd38:	e7a2      	b.n	800dc80 <_vfiprintf_r+0x20>
 800dd3a:	4b4f      	ldr	r3, [pc, #316]	; (800de78 <_vfiprintf_r+0x218>)
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	bf08      	it	eq
 800dd40:	68f4      	ldreq	r4, [r6, #12]
 800dd42:	e79d      	b.n	800dc80 <_vfiprintf_r+0x20>
 800dd44:	4621      	mov	r1, r4
 800dd46:	4630      	mov	r0, r6
 800dd48:	f000 faf4 	bl	800e334 <__swsetup_r>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d09d      	beq.n	800dc8c <_vfiprintf_r+0x2c>
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	b01d      	add	sp, #116	; 0x74
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5a:	46a8      	mov	r8, r5
 800dd5c:	e7a2      	b.n	800dca4 <_vfiprintf_r+0x44>
 800dd5e:	4a44      	ldr	r2, [pc, #272]	; (800de70 <_vfiprintf_r+0x210>)
 800dd60:	4645      	mov	r5, r8
 800dd62:	1a80      	subs	r0, r0, r2
 800dd64:	fa0b f000 	lsl.w	r0, fp, r0
 800dd68:	4318      	orrs	r0, r3
 800dd6a:	9004      	str	r0, [sp, #16]
 800dd6c:	e7be      	b.n	800dcec <_vfiprintf_r+0x8c>
 800dd6e:	9a03      	ldr	r2, [sp, #12]
 800dd70:	1d11      	adds	r1, r2, #4
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	9103      	str	r1, [sp, #12]
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	db01      	blt.n	800dd7e <_vfiprintf_r+0x11e>
 800dd7a:	9207      	str	r2, [sp, #28]
 800dd7c:	e004      	b.n	800dd88 <_vfiprintf_r+0x128>
 800dd7e:	4252      	negs	r2, r2
 800dd80:	f043 0302 	orr.w	r3, r3, #2
 800dd84:	9207      	str	r2, [sp, #28]
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	f898 3000 	ldrb.w	r3, [r8]
 800dd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8e:	d10e      	bne.n	800ddae <_vfiprintf_r+0x14e>
 800dd90:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd94:	2b2a      	cmp	r3, #42	; 0x2a
 800dd96:	d138      	bne.n	800de0a <_vfiprintf_r+0x1aa>
 800dd98:	9b03      	ldr	r3, [sp, #12]
 800dd9a:	f108 0802 	add.w	r8, r8, #2
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	9203      	str	r2, [sp, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bfb8      	it	lt
 800dda8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	4d33      	ldr	r5, [pc, #204]	; (800de7c <_vfiprintf_r+0x21c>)
 800ddb0:	2203      	movs	r2, #3
 800ddb2:	f898 1000 	ldrb.w	r1, [r8]
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f000 fd10 	bl	800e7dc <memchr>
 800ddbc:	b140      	cbz	r0, 800ddd0 <_vfiprintf_r+0x170>
 800ddbe:	2340      	movs	r3, #64	; 0x40
 800ddc0:	1b40      	subs	r0, r0, r5
 800ddc2:	fa03 f000 	lsl.w	r0, r3, r0
 800ddc6:	9b04      	ldr	r3, [sp, #16]
 800ddc8:	f108 0801 	add.w	r8, r8, #1
 800ddcc:	4303      	orrs	r3, r0
 800ddce:	9304      	str	r3, [sp, #16]
 800ddd0:	f898 1000 	ldrb.w	r1, [r8]
 800ddd4:	2206      	movs	r2, #6
 800ddd6:	482a      	ldr	r0, [pc, #168]	; (800de80 <_vfiprintf_r+0x220>)
 800ddd8:	f108 0701 	add.w	r7, r8, #1
 800dddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dde0:	f000 fcfc 	bl	800e7dc <memchr>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d037      	beq.n	800de58 <_vfiprintf_r+0x1f8>
 800dde8:	4b26      	ldr	r3, [pc, #152]	; (800de84 <_vfiprintf_r+0x224>)
 800ddea:	bb1b      	cbnz	r3, 800de34 <_vfiprintf_r+0x1d4>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	3307      	adds	r3, #7
 800ddf0:	f023 0307 	bic.w	r3, r3, #7
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	9303      	str	r3, [sp, #12]
 800ddf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfa:	444b      	add	r3, r9
 800ddfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfe:	e750      	b.n	800dca2 <_vfiprintf_r+0x42>
 800de00:	fb05 3202 	mla	r2, r5, r2, r3
 800de04:	2001      	movs	r0, #1
 800de06:	4688      	mov	r8, r1
 800de08:	e78a      	b.n	800dd20 <_vfiprintf_r+0xc0>
 800de0a:	2300      	movs	r3, #0
 800de0c:	250a      	movs	r5, #10
 800de0e:	4619      	mov	r1, r3
 800de10:	f108 0801 	add.w	r8, r8, #1
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	4640      	mov	r0, r8
 800de18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de1c:	3a30      	subs	r2, #48	; 0x30
 800de1e:	2a09      	cmp	r2, #9
 800de20:	d903      	bls.n	800de2a <_vfiprintf_r+0x1ca>
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0c3      	beq.n	800ddae <_vfiprintf_r+0x14e>
 800de26:	9105      	str	r1, [sp, #20]
 800de28:	e7c1      	b.n	800ddae <_vfiprintf_r+0x14e>
 800de2a:	fb05 2101 	mla	r1, r5, r1, r2
 800de2e:	2301      	movs	r3, #1
 800de30:	4680      	mov	r8, r0
 800de32:	e7f0      	b.n	800de16 <_vfiprintf_r+0x1b6>
 800de34:	ab03      	add	r3, sp, #12
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4622      	mov	r2, r4
 800de3a:	4b13      	ldr	r3, [pc, #76]	; (800de88 <_vfiprintf_r+0x228>)
 800de3c:	a904      	add	r1, sp, #16
 800de3e:	4630      	mov	r0, r6
 800de40:	f3af 8000 	nop.w
 800de44:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de48:	4681      	mov	r9, r0
 800de4a:	d1d5      	bne.n	800ddf8 <_vfiprintf_r+0x198>
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	065b      	lsls	r3, r3, #25
 800de50:	f53f af7e 	bmi.w	800dd50 <_vfiprintf_r+0xf0>
 800de54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de56:	e77d      	b.n	800dd54 <_vfiprintf_r+0xf4>
 800de58:	ab03      	add	r3, sp, #12
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4622      	mov	r2, r4
 800de5e:	4b0a      	ldr	r3, [pc, #40]	; (800de88 <_vfiprintf_r+0x228>)
 800de60:	a904      	add	r1, sp, #16
 800de62:	4630      	mov	r0, r6
 800de64:	f000 f888 	bl	800df78 <_printf_i>
 800de68:	e7ec      	b.n	800de44 <_vfiprintf_r+0x1e4>
 800de6a:	bf00      	nop
 800de6c:	0800fac4 	.word	0x0800fac4
 800de70:	0800fa70 	.word	0x0800fa70
 800de74:	0800fae4 	.word	0x0800fae4
 800de78:	0800faa4 	.word	0x0800faa4
 800de7c:	0800fa76 	.word	0x0800fa76
 800de80:	0800fa7a 	.word	0x0800fa7a
 800de84:	00000000 	.word	0x00000000
 800de88:	0800dc3b 	.word	0x0800dc3b

0800de8c <_printf_common>:
 800de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	4691      	mov	r9, r2
 800de92:	461f      	mov	r7, r3
 800de94:	688a      	ldr	r2, [r1, #8]
 800de96:	690b      	ldr	r3, [r1, #16]
 800de98:	4606      	mov	r6, r0
 800de9a:	4293      	cmp	r3, r2
 800de9c:	bfb8      	it	lt
 800de9e:	4613      	movlt	r3, r2
 800dea0:	f8c9 3000 	str.w	r3, [r9]
 800dea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dea8:	460c      	mov	r4, r1
 800deaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800deae:	b112      	cbz	r2, 800deb6 <_printf_common+0x2a>
 800deb0:	3301      	adds	r3, #1
 800deb2:	f8c9 3000 	str.w	r3, [r9]
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	0699      	lsls	r1, r3, #26
 800deba:	bf42      	ittt	mi
 800debc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dec0:	3302      	addmi	r3, #2
 800dec2:	f8c9 3000 	strmi.w	r3, [r9]
 800dec6:	6825      	ldr	r5, [r4, #0]
 800dec8:	f015 0506 	ands.w	r5, r5, #6
 800decc:	d107      	bne.n	800dede <_printf_common+0x52>
 800dece:	f104 0a19 	add.w	sl, r4, #25
 800ded2:	68e3      	ldr	r3, [r4, #12]
 800ded4:	f8d9 2000 	ldr.w	r2, [r9]
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	42ab      	cmp	r3, r5
 800dedc:	dc29      	bgt.n	800df32 <_printf_common+0xa6>
 800dede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	3300      	adds	r3, #0
 800dee6:	bf18      	it	ne
 800dee8:	2301      	movne	r3, #1
 800deea:	0692      	lsls	r2, r2, #26
 800deec:	d42e      	bmi.n	800df4c <_printf_common+0xc0>
 800deee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800def2:	4639      	mov	r1, r7
 800def4:	4630      	mov	r0, r6
 800def6:	47c0      	blx	r8
 800def8:	3001      	adds	r0, #1
 800defa:	d021      	beq.n	800df40 <_printf_common+0xb4>
 800defc:	6823      	ldr	r3, [r4, #0]
 800defe:	68e5      	ldr	r5, [r4, #12]
 800df00:	f003 0306 	and.w	r3, r3, #6
 800df04:	2b04      	cmp	r3, #4
 800df06:	bf18      	it	ne
 800df08:	2500      	movne	r5, #0
 800df0a:	f8d9 2000 	ldr.w	r2, [r9]
 800df0e:	f04f 0900 	mov.w	r9, #0
 800df12:	bf08      	it	eq
 800df14:	1aad      	subeq	r5, r5, r2
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	6922      	ldr	r2, [r4, #16]
 800df1a:	bf08      	it	eq
 800df1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df20:	4293      	cmp	r3, r2
 800df22:	bfc4      	itt	gt
 800df24:	1a9b      	subgt	r3, r3, r2
 800df26:	18ed      	addgt	r5, r5, r3
 800df28:	341a      	adds	r4, #26
 800df2a:	454d      	cmp	r5, r9
 800df2c:	d11a      	bne.n	800df64 <_printf_common+0xd8>
 800df2e:	2000      	movs	r0, #0
 800df30:	e008      	b.n	800df44 <_printf_common+0xb8>
 800df32:	2301      	movs	r3, #1
 800df34:	4652      	mov	r2, sl
 800df36:	4639      	mov	r1, r7
 800df38:	4630      	mov	r0, r6
 800df3a:	47c0      	blx	r8
 800df3c:	3001      	adds	r0, #1
 800df3e:	d103      	bne.n	800df48 <_printf_common+0xbc>
 800df40:	f04f 30ff 	mov.w	r0, #4294967295
 800df44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df48:	3501      	adds	r5, #1
 800df4a:	e7c2      	b.n	800ded2 <_printf_common+0x46>
 800df4c:	2030      	movs	r0, #48	; 0x30
 800df4e:	18e1      	adds	r1, r4, r3
 800df50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df5a:	4422      	add	r2, r4
 800df5c:	3302      	adds	r3, #2
 800df5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df62:	e7c4      	b.n	800deee <_printf_common+0x62>
 800df64:	2301      	movs	r3, #1
 800df66:	4622      	mov	r2, r4
 800df68:	4639      	mov	r1, r7
 800df6a:	4630      	mov	r0, r6
 800df6c:	47c0      	blx	r8
 800df6e:	3001      	adds	r0, #1
 800df70:	d0e6      	beq.n	800df40 <_printf_common+0xb4>
 800df72:	f109 0901 	add.w	r9, r9, #1
 800df76:	e7d8      	b.n	800df2a <_printf_common+0x9e>

0800df78 <_printf_i>:
 800df78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df80:	460c      	mov	r4, r1
 800df82:	7e09      	ldrb	r1, [r1, #24]
 800df84:	b085      	sub	sp, #20
 800df86:	296e      	cmp	r1, #110	; 0x6e
 800df88:	4617      	mov	r7, r2
 800df8a:	4606      	mov	r6, r0
 800df8c:	4698      	mov	r8, r3
 800df8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df90:	f000 80b3 	beq.w	800e0fa <_printf_i+0x182>
 800df94:	d822      	bhi.n	800dfdc <_printf_i+0x64>
 800df96:	2963      	cmp	r1, #99	; 0x63
 800df98:	d036      	beq.n	800e008 <_printf_i+0x90>
 800df9a:	d80a      	bhi.n	800dfb2 <_printf_i+0x3a>
 800df9c:	2900      	cmp	r1, #0
 800df9e:	f000 80b9 	beq.w	800e114 <_printf_i+0x19c>
 800dfa2:	2958      	cmp	r1, #88	; 0x58
 800dfa4:	f000 8083 	beq.w	800e0ae <_printf_i+0x136>
 800dfa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dfb0:	e032      	b.n	800e018 <_printf_i+0xa0>
 800dfb2:	2964      	cmp	r1, #100	; 0x64
 800dfb4:	d001      	beq.n	800dfba <_printf_i+0x42>
 800dfb6:	2969      	cmp	r1, #105	; 0x69
 800dfb8:	d1f6      	bne.n	800dfa8 <_printf_i+0x30>
 800dfba:	6820      	ldr	r0, [r4, #0]
 800dfbc:	6813      	ldr	r3, [r2, #0]
 800dfbe:	0605      	lsls	r5, r0, #24
 800dfc0:	f103 0104 	add.w	r1, r3, #4
 800dfc4:	d52a      	bpl.n	800e01c <_printf_i+0xa4>
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6011      	str	r1, [r2, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da03      	bge.n	800dfd6 <_printf_i+0x5e>
 800dfce:	222d      	movs	r2, #45	; 0x2d
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfd6:	486f      	ldr	r0, [pc, #444]	; (800e194 <_printf_i+0x21c>)
 800dfd8:	220a      	movs	r2, #10
 800dfda:	e039      	b.n	800e050 <_printf_i+0xd8>
 800dfdc:	2973      	cmp	r1, #115	; 0x73
 800dfde:	f000 809d 	beq.w	800e11c <_printf_i+0x1a4>
 800dfe2:	d808      	bhi.n	800dff6 <_printf_i+0x7e>
 800dfe4:	296f      	cmp	r1, #111	; 0x6f
 800dfe6:	d020      	beq.n	800e02a <_printf_i+0xb2>
 800dfe8:	2970      	cmp	r1, #112	; 0x70
 800dfea:	d1dd      	bne.n	800dfa8 <_printf_i+0x30>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	f043 0320 	orr.w	r3, r3, #32
 800dff2:	6023      	str	r3, [r4, #0]
 800dff4:	e003      	b.n	800dffe <_printf_i+0x86>
 800dff6:	2975      	cmp	r1, #117	; 0x75
 800dff8:	d017      	beq.n	800e02a <_printf_i+0xb2>
 800dffa:	2978      	cmp	r1, #120	; 0x78
 800dffc:	d1d4      	bne.n	800dfa8 <_printf_i+0x30>
 800dffe:	2378      	movs	r3, #120	; 0x78
 800e000:	4865      	ldr	r0, [pc, #404]	; (800e198 <_printf_i+0x220>)
 800e002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e006:	e055      	b.n	800e0b4 <_printf_i+0x13c>
 800e008:	6813      	ldr	r3, [r2, #0]
 800e00a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e00e:	1d19      	adds	r1, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6011      	str	r1, [r2, #0]
 800e014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e018:	2301      	movs	r3, #1
 800e01a:	e08c      	b.n	800e136 <_printf_i+0x1be>
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e022:	6011      	str	r1, [r2, #0]
 800e024:	bf18      	it	ne
 800e026:	b21b      	sxthne	r3, r3
 800e028:	e7cf      	b.n	800dfca <_printf_i+0x52>
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	6825      	ldr	r5, [r4, #0]
 800e02e:	1d18      	adds	r0, r3, #4
 800e030:	6010      	str	r0, [r2, #0]
 800e032:	0628      	lsls	r0, r5, #24
 800e034:	d501      	bpl.n	800e03a <_printf_i+0xc2>
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	e002      	b.n	800e040 <_printf_i+0xc8>
 800e03a:	0668      	lsls	r0, r5, #25
 800e03c:	d5fb      	bpl.n	800e036 <_printf_i+0xbe>
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	296f      	cmp	r1, #111	; 0x6f
 800e042:	bf14      	ite	ne
 800e044:	220a      	movne	r2, #10
 800e046:	2208      	moveq	r2, #8
 800e048:	4852      	ldr	r0, [pc, #328]	; (800e194 <_printf_i+0x21c>)
 800e04a:	2100      	movs	r1, #0
 800e04c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e050:	6865      	ldr	r5, [r4, #4]
 800e052:	2d00      	cmp	r5, #0
 800e054:	60a5      	str	r5, [r4, #8]
 800e056:	f2c0 8095 	blt.w	800e184 <_printf_i+0x20c>
 800e05a:	6821      	ldr	r1, [r4, #0]
 800e05c:	f021 0104 	bic.w	r1, r1, #4
 800e060:	6021      	str	r1, [r4, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d13d      	bne.n	800e0e2 <_printf_i+0x16a>
 800e066:	2d00      	cmp	r5, #0
 800e068:	f040 808e 	bne.w	800e188 <_printf_i+0x210>
 800e06c:	4665      	mov	r5, ip
 800e06e:	2a08      	cmp	r2, #8
 800e070:	d10b      	bne.n	800e08a <_printf_i+0x112>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	07db      	lsls	r3, r3, #31
 800e076:	d508      	bpl.n	800e08a <_printf_i+0x112>
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	6862      	ldr	r2, [r4, #4]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	bfde      	ittt	le
 800e080:	2330      	movle	r3, #48	; 0x30
 800e082:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e08a:	ebac 0305 	sub.w	r3, ip, r5
 800e08e:	6123      	str	r3, [r4, #16]
 800e090:	f8cd 8000 	str.w	r8, [sp]
 800e094:	463b      	mov	r3, r7
 800e096:	aa03      	add	r2, sp, #12
 800e098:	4621      	mov	r1, r4
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7ff fef6 	bl	800de8c <_printf_common>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d14d      	bne.n	800e140 <_printf_i+0x1c8>
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	b005      	add	sp, #20
 800e0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ae:	4839      	ldr	r0, [pc, #228]	; (800e194 <_printf_i+0x21c>)
 800e0b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e0b4:	6813      	ldr	r3, [r2, #0]
 800e0b6:	6821      	ldr	r1, [r4, #0]
 800e0b8:	1d1d      	adds	r5, r3, #4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6015      	str	r5, [r2, #0]
 800e0be:	060a      	lsls	r2, r1, #24
 800e0c0:	d50b      	bpl.n	800e0da <_printf_i+0x162>
 800e0c2:	07ca      	lsls	r2, r1, #31
 800e0c4:	bf44      	itt	mi
 800e0c6:	f041 0120 	orrmi.w	r1, r1, #32
 800e0ca:	6021      	strmi	r1, [r4, #0]
 800e0cc:	b91b      	cbnz	r3, 800e0d6 <_printf_i+0x15e>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	f022 0220 	bic.w	r2, r2, #32
 800e0d4:	6022      	str	r2, [r4, #0]
 800e0d6:	2210      	movs	r2, #16
 800e0d8:	e7b7      	b.n	800e04a <_printf_i+0xd2>
 800e0da:	064d      	lsls	r5, r1, #25
 800e0dc:	bf48      	it	mi
 800e0de:	b29b      	uxthmi	r3, r3
 800e0e0:	e7ef      	b.n	800e0c2 <_printf_i+0x14a>
 800e0e2:	4665      	mov	r5, ip
 800e0e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0e8:	fb02 3311 	mls	r3, r2, r1, r3
 800e0ec:	5cc3      	ldrb	r3, [r0, r3]
 800e0ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	d1f5      	bne.n	800e0e4 <_printf_i+0x16c>
 800e0f8:	e7b9      	b.n	800e06e <_printf_i+0xf6>
 800e0fa:	6813      	ldr	r3, [r2, #0]
 800e0fc:	6825      	ldr	r5, [r4, #0]
 800e0fe:	1d18      	adds	r0, r3, #4
 800e100:	6961      	ldr	r1, [r4, #20]
 800e102:	6010      	str	r0, [r2, #0]
 800e104:	0628      	lsls	r0, r5, #24
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	d501      	bpl.n	800e10e <_printf_i+0x196>
 800e10a:	6019      	str	r1, [r3, #0]
 800e10c:	e002      	b.n	800e114 <_printf_i+0x19c>
 800e10e:	066a      	lsls	r2, r5, #25
 800e110:	d5fb      	bpl.n	800e10a <_printf_i+0x192>
 800e112:	8019      	strh	r1, [r3, #0]
 800e114:	2300      	movs	r3, #0
 800e116:	4665      	mov	r5, ip
 800e118:	6123      	str	r3, [r4, #16]
 800e11a:	e7b9      	b.n	800e090 <_printf_i+0x118>
 800e11c:	6813      	ldr	r3, [r2, #0]
 800e11e:	1d19      	adds	r1, r3, #4
 800e120:	6011      	str	r1, [r2, #0]
 800e122:	681d      	ldr	r5, [r3, #0]
 800e124:	6862      	ldr	r2, [r4, #4]
 800e126:	2100      	movs	r1, #0
 800e128:	4628      	mov	r0, r5
 800e12a:	f000 fb57 	bl	800e7dc <memchr>
 800e12e:	b108      	cbz	r0, 800e134 <_printf_i+0x1bc>
 800e130:	1b40      	subs	r0, r0, r5
 800e132:	6060      	str	r0, [r4, #4]
 800e134:	6863      	ldr	r3, [r4, #4]
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	2300      	movs	r3, #0
 800e13a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e13e:	e7a7      	b.n	800e090 <_printf_i+0x118>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	462a      	mov	r2, r5
 800e144:	4639      	mov	r1, r7
 800e146:	4630      	mov	r0, r6
 800e148:	47c0      	blx	r8
 800e14a:	3001      	adds	r0, #1
 800e14c:	d0aa      	beq.n	800e0a4 <_printf_i+0x12c>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	079b      	lsls	r3, r3, #30
 800e152:	d413      	bmi.n	800e17c <_printf_i+0x204>
 800e154:	68e0      	ldr	r0, [r4, #12]
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	4298      	cmp	r0, r3
 800e15a:	bfb8      	it	lt
 800e15c:	4618      	movlt	r0, r3
 800e15e:	e7a3      	b.n	800e0a8 <_printf_i+0x130>
 800e160:	2301      	movs	r3, #1
 800e162:	464a      	mov	r2, r9
 800e164:	4639      	mov	r1, r7
 800e166:	4630      	mov	r0, r6
 800e168:	47c0      	blx	r8
 800e16a:	3001      	adds	r0, #1
 800e16c:	d09a      	beq.n	800e0a4 <_printf_i+0x12c>
 800e16e:	3501      	adds	r5, #1
 800e170:	68e3      	ldr	r3, [r4, #12]
 800e172:	9a03      	ldr	r2, [sp, #12]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	42ab      	cmp	r3, r5
 800e178:	dcf2      	bgt.n	800e160 <_printf_i+0x1e8>
 800e17a:	e7eb      	b.n	800e154 <_printf_i+0x1dc>
 800e17c:	2500      	movs	r5, #0
 800e17e:	f104 0919 	add.w	r9, r4, #25
 800e182:	e7f5      	b.n	800e170 <_printf_i+0x1f8>
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1ac      	bne.n	800e0e2 <_printf_i+0x16a>
 800e188:	7803      	ldrb	r3, [r0, #0]
 800e18a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e18e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e192:	e76c      	b.n	800e06e <_printf_i+0xf6>
 800e194:	0800fa81 	.word	0x0800fa81
 800e198:	0800fa92 	.word	0x0800fa92

0800e19c <iprintf>:
 800e19c:	b40f      	push	{r0, r1, r2, r3}
 800e19e:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <iprintf+0x2c>)
 800e1a0:	b513      	push	{r0, r1, r4, lr}
 800e1a2:	681c      	ldr	r4, [r3, #0]
 800e1a4:	b124      	cbz	r4, 800e1b0 <iprintf+0x14>
 800e1a6:	69a3      	ldr	r3, [r4, #24]
 800e1a8:	b913      	cbnz	r3, 800e1b0 <iprintf+0x14>
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fa28 	bl	800e600 <__sinit>
 800e1b0:	ab05      	add	r3, sp, #20
 800e1b2:	9a04      	ldr	r2, [sp, #16]
 800e1b4:	68a1      	ldr	r1, [r4, #8]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	f7ff fd51 	bl	800dc60 <_vfiprintf_r>
 800e1be:	b002      	add	sp, #8
 800e1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c4:	b004      	add	sp, #16
 800e1c6:	4770      	bx	lr
 800e1c8:	20000128 	.word	0x20000128

0800e1cc <_sbrk_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	4c05      	ldr	r4, [pc, #20]	; (800e1e8 <_sbrk_r+0x1c>)
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	6023      	str	r3, [r4, #0]
 800e1d8:	f000 fdd2 	bl	800ed80 <_sbrk>
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	d102      	bne.n	800e1e6 <_sbrk_r+0x1a>
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	b103      	cbz	r3, 800e1e6 <_sbrk_r+0x1a>
 800e1e4:	602b      	str	r3, [r5, #0]
 800e1e6:	bd38      	pop	{r3, r4, r5, pc}
 800e1e8:	20007814 	.word	0x20007814

0800e1ec <siprintf>:
 800e1ec:	b40e      	push	{r1, r2, r3}
 800e1ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1f2:	b500      	push	{lr}
 800e1f4:	b09c      	sub	sp, #112	; 0x70
 800e1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e1f8:	9002      	str	r0, [sp, #8]
 800e1fa:	9006      	str	r0, [sp, #24]
 800e1fc:	9107      	str	r1, [sp, #28]
 800e1fe:	9104      	str	r1, [sp, #16]
 800e200:	4808      	ldr	r0, [pc, #32]	; (800e224 <siprintf+0x38>)
 800e202:	4909      	ldr	r1, [pc, #36]	; (800e228 <siprintf+0x3c>)
 800e204:	f853 2b04 	ldr.w	r2, [r3], #4
 800e208:	9105      	str	r1, [sp, #20]
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	a902      	add	r1, sp, #8
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	f000 fb8e 	bl	800e930 <_svfiprintf_r>
 800e214:	2200      	movs	r2, #0
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	701a      	strb	r2, [r3, #0]
 800e21a:	b01c      	add	sp, #112	; 0x70
 800e21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e220:	b003      	add	sp, #12
 800e222:	4770      	bx	lr
 800e224:	20000128 	.word	0x20000128
 800e228:	ffff0208 	.word	0xffff0208

0800e22c <strchr>:
 800e22c:	b2c9      	uxtb	r1, r1
 800e22e:	4603      	mov	r3, r0
 800e230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e234:	b11a      	cbz	r2, 800e23e <strchr+0x12>
 800e236:	428a      	cmp	r2, r1
 800e238:	d1f9      	bne.n	800e22e <strchr+0x2>
 800e23a:	4618      	mov	r0, r3
 800e23c:	4770      	bx	lr
 800e23e:	2900      	cmp	r1, #0
 800e240:	bf18      	it	ne
 800e242:	2300      	movne	r3, #0
 800e244:	e7f9      	b.n	800e23a <strchr+0xe>

0800e246 <strcspn>:
 800e246:	4603      	mov	r3, r0
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	461a      	mov	r2, r3
 800e24c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e250:	b14d      	cbz	r5, 800e266 <strcspn+0x20>
 800e252:	1e4c      	subs	r4, r1, #1
 800e254:	e001      	b.n	800e25a <strcspn+0x14>
 800e256:	42ae      	cmp	r6, r5
 800e258:	d005      	beq.n	800e266 <strcspn+0x20>
 800e25a:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800e25e:	2e00      	cmp	r6, #0
 800e260:	d1f9      	bne.n	800e256 <strcspn+0x10>
 800e262:	4613      	mov	r3, r2
 800e264:	e7f1      	b.n	800e24a <strcspn+0x4>
 800e266:	1a18      	subs	r0, r3, r0
 800e268:	bd70      	pop	{r4, r5, r6, pc}

0800e26a <strspn>:
 800e26a:	4603      	mov	r3, r0
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	461a      	mov	r2, r3
 800e270:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e274:	b13d      	cbz	r5, 800e286 <strspn+0x1c>
 800e276:	1e4c      	subs	r4, r1, #1
 800e278:	e001      	b.n	800e27e <strspn+0x14>
 800e27a:	42ae      	cmp	r6, r5
 800e27c:	d005      	beq.n	800e28a <strspn+0x20>
 800e27e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800e282:	2e00      	cmp	r6, #0
 800e284:	d1f9      	bne.n	800e27a <strspn+0x10>
 800e286:	1a18      	subs	r0, r3, r0
 800e288:	bd70      	pop	{r4, r5, r6, pc}
 800e28a:	4613      	mov	r3, r2
 800e28c:	e7ef      	b.n	800e26e <strspn+0x4>
	...

0800e290 <__swbuf_r>:
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e292:	460e      	mov	r6, r1
 800e294:	4614      	mov	r4, r2
 800e296:	4605      	mov	r5, r0
 800e298:	b118      	cbz	r0, 800e2a2 <__swbuf_r+0x12>
 800e29a:	6983      	ldr	r3, [r0, #24]
 800e29c:	b90b      	cbnz	r3, 800e2a2 <__swbuf_r+0x12>
 800e29e:	f000 f9af 	bl	800e600 <__sinit>
 800e2a2:	4b21      	ldr	r3, [pc, #132]	; (800e328 <__swbuf_r+0x98>)
 800e2a4:	429c      	cmp	r4, r3
 800e2a6:	d12a      	bne.n	800e2fe <__swbuf_r+0x6e>
 800e2a8:	686c      	ldr	r4, [r5, #4]
 800e2aa:	69a3      	ldr	r3, [r4, #24]
 800e2ac:	60a3      	str	r3, [r4, #8]
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	071a      	lsls	r2, r3, #28
 800e2b2:	d52e      	bpl.n	800e312 <__swbuf_r+0x82>
 800e2b4:	6923      	ldr	r3, [r4, #16]
 800e2b6:	b363      	cbz	r3, 800e312 <__swbuf_r+0x82>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	6820      	ldr	r0, [r4, #0]
 800e2bc:	b2f6      	uxtb	r6, r6
 800e2be:	1ac0      	subs	r0, r0, r3
 800e2c0:	6963      	ldr	r3, [r4, #20]
 800e2c2:	4637      	mov	r7, r6
 800e2c4:	4283      	cmp	r3, r0
 800e2c6:	dc04      	bgt.n	800e2d2 <__swbuf_r+0x42>
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f000 f92e 	bl	800e52c <_fflush_r>
 800e2d0:	bb28      	cbnz	r0, 800e31e <__swbuf_r+0x8e>
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	60a3      	str	r3, [r4, #8]
 800e2da:	6823      	ldr	r3, [r4, #0]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	6022      	str	r2, [r4, #0]
 800e2e0:	701e      	strb	r6, [r3, #0]
 800e2e2:	6963      	ldr	r3, [r4, #20]
 800e2e4:	4283      	cmp	r3, r0
 800e2e6:	d004      	beq.n	800e2f2 <__swbuf_r+0x62>
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	07db      	lsls	r3, r3, #31
 800e2ec:	d519      	bpl.n	800e322 <__swbuf_r+0x92>
 800e2ee:	2e0a      	cmp	r6, #10
 800e2f0:	d117      	bne.n	800e322 <__swbuf_r+0x92>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f000 f919 	bl	800e52c <_fflush_r>
 800e2fa:	b190      	cbz	r0, 800e322 <__swbuf_r+0x92>
 800e2fc:	e00f      	b.n	800e31e <__swbuf_r+0x8e>
 800e2fe:	4b0b      	ldr	r3, [pc, #44]	; (800e32c <__swbuf_r+0x9c>)
 800e300:	429c      	cmp	r4, r3
 800e302:	d101      	bne.n	800e308 <__swbuf_r+0x78>
 800e304:	68ac      	ldr	r4, [r5, #8]
 800e306:	e7d0      	b.n	800e2aa <__swbuf_r+0x1a>
 800e308:	4b09      	ldr	r3, [pc, #36]	; (800e330 <__swbuf_r+0xa0>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	bf08      	it	eq
 800e30e:	68ec      	ldreq	r4, [r5, #12]
 800e310:	e7cb      	b.n	800e2aa <__swbuf_r+0x1a>
 800e312:	4621      	mov	r1, r4
 800e314:	4628      	mov	r0, r5
 800e316:	f000 f80d 	bl	800e334 <__swsetup_r>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d0cc      	beq.n	800e2b8 <__swbuf_r+0x28>
 800e31e:	f04f 37ff 	mov.w	r7, #4294967295
 800e322:	4638      	mov	r0, r7
 800e324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e326:	bf00      	nop
 800e328:	0800fac4 	.word	0x0800fac4
 800e32c:	0800fae4 	.word	0x0800fae4
 800e330:	0800faa4 	.word	0x0800faa4

0800e334 <__swsetup_r>:
 800e334:	4b32      	ldr	r3, [pc, #200]	; (800e400 <__swsetup_r+0xcc>)
 800e336:	b570      	push	{r4, r5, r6, lr}
 800e338:	681d      	ldr	r5, [r3, #0]
 800e33a:	4606      	mov	r6, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	b125      	cbz	r5, 800e34a <__swsetup_r+0x16>
 800e340:	69ab      	ldr	r3, [r5, #24]
 800e342:	b913      	cbnz	r3, 800e34a <__swsetup_r+0x16>
 800e344:	4628      	mov	r0, r5
 800e346:	f000 f95b 	bl	800e600 <__sinit>
 800e34a:	4b2e      	ldr	r3, [pc, #184]	; (800e404 <__swsetup_r+0xd0>)
 800e34c:	429c      	cmp	r4, r3
 800e34e:	d10f      	bne.n	800e370 <__swsetup_r+0x3c>
 800e350:	686c      	ldr	r4, [r5, #4]
 800e352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e356:	b29a      	uxth	r2, r3
 800e358:	0715      	lsls	r5, r2, #28
 800e35a:	d42c      	bmi.n	800e3b6 <__swsetup_r+0x82>
 800e35c:	06d0      	lsls	r0, r2, #27
 800e35e:	d411      	bmi.n	800e384 <__swsetup_r+0x50>
 800e360:	2209      	movs	r2, #9
 800e362:	6032      	str	r2, [r6, #0]
 800e364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	f04f 30ff 	mov.w	r0, #4294967295
 800e36e:	e03e      	b.n	800e3ee <__swsetup_r+0xba>
 800e370:	4b25      	ldr	r3, [pc, #148]	; (800e408 <__swsetup_r+0xd4>)
 800e372:	429c      	cmp	r4, r3
 800e374:	d101      	bne.n	800e37a <__swsetup_r+0x46>
 800e376:	68ac      	ldr	r4, [r5, #8]
 800e378:	e7eb      	b.n	800e352 <__swsetup_r+0x1e>
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <__swsetup_r+0xd8>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	bf08      	it	eq
 800e380:	68ec      	ldreq	r4, [r5, #12]
 800e382:	e7e6      	b.n	800e352 <__swsetup_r+0x1e>
 800e384:	0751      	lsls	r1, r2, #29
 800e386:	d512      	bpl.n	800e3ae <__swsetup_r+0x7a>
 800e388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e38a:	b141      	cbz	r1, 800e39e <__swsetup_r+0x6a>
 800e38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e390:	4299      	cmp	r1, r3
 800e392:	d002      	beq.n	800e39a <__swsetup_r+0x66>
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff fb95 	bl	800dac4 <_free_r>
 800e39a:	2300      	movs	r3, #0
 800e39c:	6363      	str	r3, [r4, #52]	; 0x34
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3a4:	81a3      	strh	r3, [r4, #12]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	f043 0308 	orr.w	r3, r3, #8
 800e3b4:	81a3      	strh	r3, [r4, #12]
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	b94b      	cbnz	r3, 800e3ce <__swsetup_r+0x9a>
 800e3ba:	89a3      	ldrh	r3, [r4, #12]
 800e3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c4:	d003      	beq.n	800e3ce <__swsetup_r+0x9a>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f000 f9c7 	bl	800e75c <__smakebuf_r>
 800e3ce:	89a2      	ldrh	r2, [r4, #12]
 800e3d0:	f012 0301 	ands.w	r3, r2, #1
 800e3d4:	d00c      	beq.n	800e3f0 <__swsetup_r+0xbc>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60a3      	str	r3, [r4, #8]
 800e3da:	6963      	ldr	r3, [r4, #20]
 800e3dc:	425b      	negs	r3, r3
 800e3de:	61a3      	str	r3, [r4, #24]
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	b953      	cbnz	r3, 800e3fa <__swsetup_r+0xc6>
 800e3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e3ec:	d1ba      	bne.n	800e364 <__swsetup_r+0x30>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	0792      	lsls	r2, r2, #30
 800e3f2:	bf58      	it	pl
 800e3f4:	6963      	ldrpl	r3, [r4, #20]
 800e3f6:	60a3      	str	r3, [r4, #8]
 800e3f8:	e7f2      	b.n	800e3e0 <__swsetup_r+0xac>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7f7      	b.n	800e3ee <__swsetup_r+0xba>
 800e3fe:	bf00      	nop
 800e400:	20000128 	.word	0x20000128
 800e404:	0800fac4 	.word	0x0800fac4
 800e408:	0800fae4 	.word	0x0800fae4
 800e40c:	0800faa4 	.word	0x0800faa4

0800e410 <abort>:
 800e410:	b508      	push	{r3, lr}
 800e412:	2006      	movs	r0, #6
 800e414:	f000 fbac 	bl	800eb70 <raise>
 800e418:	2001      	movs	r0, #1
 800e41a:	f000 fcc7 	bl	800edac <_exit>
	...

0800e420 <__sflush_r>:
 800e420:	898a      	ldrh	r2, [r1, #12]
 800e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	4605      	mov	r5, r0
 800e428:	0710      	lsls	r0, r2, #28
 800e42a:	460c      	mov	r4, r1
 800e42c:	d458      	bmi.n	800e4e0 <__sflush_r+0xc0>
 800e42e:	684b      	ldr	r3, [r1, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	dc05      	bgt.n	800e440 <__sflush_r+0x20>
 800e434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	dc02      	bgt.n	800e440 <__sflush_r+0x20>
 800e43a:	2000      	movs	r0, #0
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e442:	2e00      	cmp	r6, #0
 800e444:	d0f9      	beq.n	800e43a <__sflush_r+0x1a>
 800e446:	2300      	movs	r3, #0
 800e448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e44c:	682f      	ldr	r7, [r5, #0]
 800e44e:	6a21      	ldr	r1, [r4, #32]
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	d032      	beq.n	800e4ba <__sflush_r+0x9a>
 800e454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	075a      	lsls	r2, r3, #29
 800e45a:	d505      	bpl.n	800e468 <__sflush_r+0x48>
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	1ac0      	subs	r0, r0, r3
 800e460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e462:	b10b      	cbz	r3, 800e468 <__sflush_r+0x48>
 800e464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e466:	1ac0      	subs	r0, r0, r3
 800e468:	2300      	movs	r3, #0
 800e46a:	4602      	mov	r2, r0
 800e46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e46e:	6a21      	ldr	r1, [r4, #32]
 800e470:	4628      	mov	r0, r5
 800e472:	47b0      	blx	r6
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	d106      	bne.n	800e488 <__sflush_r+0x68>
 800e47a:	6829      	ldr	r1, [r5, #0]
 800e47c:	291d      	cmp	r1, #29
 800e47e:	d848      	bhi.n	800e512 <__sflush_r+0xf2>
 800e480:	4a29      	ldr	r2, [pc, #164]	; (800e528 <__sflush_r+0x108>)
 800e482:	40ca      	lsrs	r2, r1
 800e484:	07d6      	lsls	r6, r2, #31
 800e486:	d544      	bpl.n	800e512 <__sflush_r+0xf2>
 800e488:	2200      	movs	r2, #0
 800e48a:	6062      	str	r2, [r4, #4]
 800e48c:	6922      	ldr	r2, [r4, #16]
 800e48e:	04d9      	lsls	r1, r3, #19
 800e490:	6022      	str	r2, [r4, #0]
 800e492:	d504      	bpl.n	800e49e <__sflush_r+0x7e>
 800e494:	1c42      	adds	r2, r0, #1
 800e496:	d101      	bne.n	800e49c <__sflush_r+0x7c>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	b903      	cbnz	r3, 800e49e <__sflush_r+0x7e>
 800e49c:	6560      	str	r0, [r4, #84]	; 0x54
 800e49e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4a0:	602f      	str	r7, [r5, #0]
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	d0c9      	beq.n	800e43a <__sflush_r+0x1a>
 800e4a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	d002      	beq.n	800e4b4 <__sflush_r+0x94>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff fb08 	bl	800dac4 <_free_r>
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	6360      	str	r0, [r4, #52]	; 0x34
 800e4b8:	e7c0      	b.n	800e43c <__sflush_r+0x1c>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b0      	blx	r6
 800e4c0:	1c41      	adds	r1, r0, #1
 800e4c2:	d1c8      	bne.n	800e456 <__sflush_r+0x36>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0c5      	beq.n	800e456 <__sflush_r+0x36>
 800e4ca:	2b1d      	cmp	r3, #29
 800e4cc:	d001      	beq.n	800e4d2 <__sflush_r+0xb2>
 800e4ce:	2b16      	cmp	r3, #22
 800e4d0:	d101      	bne.n	800e4d6 <__sflush_r+0xb6>
 800e4d2:	602f      	str	r7, [r5, #0]
 800e4d4:	e7b1      	b.n	800e43a <__sflush_r+0x1a>
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	e7ad      	b.n	800e43c <__sflush_r+0x1c>
 800e4e0:	690f      	ldr	r7, [r1, #16]
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d0a9      	beq.n	800e43a <__sflush_r+0x1a>
 800e4e6:	0793      	lsls	r3, r2, #30
 800e4e8:	bf18      	it	ne
 800e4ea:	2300      	movne	r3, #0
 800e4ec:	680e      	ldr	r6, [r1, #0]
 800e4ee:	bf08      	it	eq
 800e4f0:	694b      	ldreq	r3, [r1, #20]
 800e4f2:	eba6 0807 	sub.w	r8, r6, r7
 800e4f6:	600f      	str	r7, [r1, #0]
 800e4f8:	608b      	str	r3, [r1, #8]
 800e4fa:	f1b8 0f00 	cmp.w	r8, #0
 800e4fe:	dd9c      	ble.n	800e43a <__sflush_r+0x1a>
 800e500:	4643      	mov	r3, r8
 800e502:	463a      	mov	r2, r7
 800e504:	6a21      	ldr	r1, [r4, #32]
 800e506:	4628      	mov	r0, r5
 800e508:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e50a:	47b0      	blx	r6
 800e50c:	2800      	cmp	r0, #0
 800e50e:	dc06      	bgt.n	800e51e <__sflush_r+0xfe>
 800e510:	89a3      	ldrh	r3, [r4, #12]
 800e512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	f04f 30ff 	mov.w	r0, #4294967295
 800e51c:	e78e      	b.n	800e43c <__sflush_r+0x1c>
 800e51e:	4407      	add	r7, r0
 800e520:	eba8 0800 	sub.w	r8, r8, r0
 800e524:	e7e9      	b.n	800e4fa <__sflush_r+0xda>
 800e526:	bf00      	nop
 800e528:	20400001 	.word	0x20400001

0800e52c <_fflush_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	690b      	ldr	r3, [r1, #16]
 800e530:	4605      	mov	r5, r0
 800e532:	460c      	mov	r4, r1
 800e534:	b1db      	cbz	r3, 800e56e <_fflush_r+0x42>
 800e536:	b118      	cbz	r0, 800e540 <_fflush_r+0x14>
 800e538:	6983      	ldr	r3, [r0, #24]
 800e53a:	b90b      	cbnz	r3, 800e540 <_fflush_r+0x14>
 800e53c:	f000 f860 	bl	800e600 <__sinit>
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <_fflush_r+0x48>)
 800e542:	429c      	cmp	r4, r3
 800e544:	d109      	bne.n	800e55a <_fflush_r+0x2e>
 800e546:	686c      	ldr	r4, [r5, #4]
 800e548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e54c:	b17b      	cbz	r3, 800e56e <_fflush_r+0x42>
 800e54e:	4621      	mov	r1, r4
 800e550:	4628      	mov	r0, r5
 800e552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e556:	f7ff bf63 	b.w	800e420 <__sflush_r>
 800e55a:	4b07      	ldr	r3, [pc, #28]	; (800e578 <_fflush_r+0x4c>)
 800e55c:	429c      	cmp	r4, r3
 800e55e:	d101      	bne.n	800e564 <_fflush_r+0x38>
 800e560:	68ac      	ldr	r4, [r5, #8]
 800e562:	e7f1      	b.n	800e548 <_fflush_r+0x1c>
 800e564:	4b05      	ldr	r3, [pc, #20]	; (800e57c <_fflush_r+0x50>)
 800e566:	429c      	cmp	r4, r3
 800e568:	bf08      	it	eq
 800e56a:	68ec      	ldreq	r4, [r5, #12]
 800e56c:	e7ec      	b.n	800e548 <_fflush_r+0x1c>
 800e56e:	2000      	movs	r0, #0
 800e570:	bd38      	pop	{r3, r4, r5, pc}
 800e572:	bf00      	nop
 800e574:	0800fac4 	.word	0x0800fac4
 800e578:	0800fae4 	.word	0x0800fae4
 800e57c:	0800faa4 	.word	0x0800faa4

0800e580 <std>:
 800e580:	2300      	movs	r3, #0
 800e582:	b510      	push	{r4, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	e9c0 3300 	strd	r3, r3, [r0]
 800e58a:	6083      	str	r3, [r0, #8]
 800e58c:	8181      	strh	r1, [r0, #12]
 800e58e:	6643      	str	r3, [r0, #100]	; 0x64
 800e590:	81c2      	strh	r2, [r0, #14]
 800e592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e596:	6183      	str	r3, [r0, #24]
 800e598:	4619      	mov	r1, r3
 800e59a:	2208      	movs	r2, #8
 800e59c:	305c      	adds	r0, #92	; 0x5c
 800e59e:	f7ff fa89 	bl	800dab4 <memset>
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x38>)
 800e5a4:	6224      	str	r4, [r4, #32]
 800e5a6:	6263      	str	r3, [r4, #36]	; 0x24
 800e5a8:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <std+0x3c>)
 800e5aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <std+0x40>)
 800e5ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5b0:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <std+0x44>)
 800e5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b4:	bd10      	pop	{r4, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0800eba9 	.word	0x0800eba9
 800e5bc:	0800ebcb 	.word	0x0800ebcb
 800e5c0:	0800ec03 	.word	0x0800ec03
 800e5c4:	0800ec27 	.word	0x0800ec27

0800e5c8 <_cleanup_r>:
 800e5c8:	4901      	ldr	r1, [pc, #4]	; (800e5d0 <_cleanup_r+0x8>)
 800e5ca:	f000 b885 	b.w	800e6d8 <_fwalk_reent>
 800e5ce:	bf00      	nop
 800e5d0:	0800e52d 	.word	0x0800e52d

0800e5d4 <__sfmoreglue>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	2568      	movs	r5, #104	; 0x68
 800e5d8:	1e4a      	subs	r2, r1, #1
 800e5da:	4355      	muls	r5, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5e2:	f7ff fabb 	bl	800db5c <_malloc_r>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b140      	cbz	r0, 800e5fc <__sfmoreglue+0x28>
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	60a0      	str	r0, [r4, #8]
 800e5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f8:	f7ff fa5c 	bl	800dab4 <memset>
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}

0800e600 <__sinit>:
 800e600:	6983      	ldr	r3, [r0, #24]
 800e602:	b510      	push	{r4, lr}
 800e604:	4604      	mov	r4, r0
 800e606:	bb33      	cbnz	r3, 800e656 <__sinit+0x56>
 800e608:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e60c:	6503      	str	r3, [r0, #80]	; 0x50
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <__sinit+0x58>)
 800e610:	4a12      	ldr	r2, [pc, #72]	; (800e65c <__sinit+0x5c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6282      	str	r2, [r0, #40]	; 0x28
 800e616:	4298      	cmp	r0, r3
 800e618:	bf04      	itt	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	6183      	streq	r3, [r0, #24]
 800e61e:	f000 f81f 	bl	800e660 <__sfp>
 800e622:	6060      	str	r0, [r4, #4]
 800e624:	4620      	mov	r0, r4
 800e626:	f000 f81b 	bl	800e660 <__sfp>
 800e62a:	60a0      	str	r0, [r4, #8]
 800e62c:	4620      	mov	r0, r4
 800e62e:	f000 f817 	bl	800e660 <__sfp>
 800e632:	2200      	movs	r2, #0
 800e634:	60e0      	str	r0, [r4, #12]
 800e636:	2104      	movs	r1, #4
 800e638:	6860      	ldr	r0, [r4, #4]
 800e63a:	f7ff ffa1 	bl	800e580 <std>
 800e63e:	2201      	movs	r2, #1
 800e640:	2109      	movs	r1, #9
 800e642:	68a0      	ldr	r0, [r4, #8]
 800e644:	f7ff ff9c 	bl	800e580 <std>
 800e648:	2202      	movs	r2, #2
 800e64a:	2112      	movs	r1, #18
 800e64c:	68e0      	ldr	r0, [r4, #12]
 800e64e:	f7ff ff97 	bl	800e580 <std>
 800e652:	2301      	movs	r3, #1
 800e654:	61a3      	str	r3, [r4, #24]
 800e656:	bd10      	pop	{r4, pc}
 800e658:	0800fa6c 	.word	0x0800fa6c
 800e65c:	0800e5c9 	.word	0x0800e5c9

0800e660 <__sfp>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <__sfp+0x70>)
 800e664:	4607      	mov	r7, r0
 800e666:	681e      	ldr	r6, [r3, #0]
 800e668:	69b3      	ldr	r3, [r6, #24]
 800e66a:	b913      	cbnz	r3, 800e672 <__sfp+0x12>
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ffc7 	bl	800e600 <__sinit>
 800e672:	3648      	adds	r6, #72	; 0x48
 800e674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e678:	3b01      	subs	r3, #1
 800e67a:	d503      	bpl.n	800e684 <__sfp+0x24>
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	b133      	cbz	r3, 800e68e <__sfp+0x2e>
 800e680:	6836      	ldr	r6, [r6, #0]
 800e682:	e7f7      	b.n	800e674 <__sfp+0x14>
 800e684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e688:	b16d      	cbz	r5, 800e6a6 <__sfp+0x46>
 800e68a:	3468      	adds	r4, #104	; 0x68
 800e68c:	e7f4      	b.n	800e678 <__sfp+0x18>
 800e68e:	2104      	movs	r1, #4
 800e690:	4638      	mov	r0, r7
 800e692:	f7ff ff9f 	bl	800e5d4 <__sfmoreglue>
 800e696:	6030      	str	r0, [r6, #0]
 800e698:	2800      	cmp	r0, #0
 800e69a:	d1f1      	bne.n	800e680 <__sfp+0x20>
 800e69c:	230c      	movs	r3, #12
 800e69e:	4604      	mov	r4, r0
 800e6a0:	603b      	str	r3, [r7, #0]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <__sfp+0x74>)
 800e6a8:	6665      	str	r5, [r4, #100]	; 0x64
 800e6aa:	e9c4 5500 	strd	r5, r5, [r4]
 800e6ae:	60a5      	str	r5, [r4, #8]
 800e6b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6c0:	f7ff f9f8 	bl	800dab4 <memset>
 800e6c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6cc:	e7e9      	b.n	800e6a2 <__sfp+0x42>
 800e6ce:	bf00      	nop
 800e6d0:	0800fa6c 	.word	0x0800fa6c
 800e6d4:	ffff0001 	.word	0xffff0001

0800e6d8 <_fwalk_reent>:
 800e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	2600      	movs	r6, #0
 800e6e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6e6:	b914      	cbnz	r4, 800e6ee <_fwalk_reent+0x16>
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e6f2:	3f01      	subs	r7, #1
 800e6f4:	d501      	bpl.n	800e6fa <_fwalk_reent+0x22>
 800e6f6:	6824      	ldr	r4, [r4, #0]
 800e6f8:	e7f5      	b.n	800e6e6 <_fwalk_reent+0xe>
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d907      	bls.n	800e710 <_fwalk_reent+0x38>
 800e700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e704:	3301      	adds	r3, #1
 800e706:	d003      	beq.n	800e710 <_fwalk_reent+0x38>
 800e708:	4629      	mov	r1, r5
 800e70a:	4640      	mov	r0, r8
 800e70c:	47c8      	blx	r9
 800e70e:	4306      	orrs	r6, r0
 800e710:	3568      	adds	r5, #104	; 0x68
 800e712:	e7ee      	b.n	800e6f2 <_fwalk_reent+0x1a>

0800e714 <__swhatbuf_r>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	460e      	mov	r6, r1
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	b096      	sub	sp, #88	; 0x58
 800e71e:	2900      	cmp	r1, #0
 800e720:	4614      	mov	r4, r2
 800e722:	461d      	mov	r5, r3
 800e724:	da07      	bge.n	800e736 <__swhatbuf_r+0x22>
 800e726:	2300      	movs	r3, #0
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	89b3      	ldrh	r3, [r6, #12]
 800e72c:	061a      	lsls	r2, r3, #24
 800e72e:	d410      	bmi.n	800e752 <__swhatbuf_r+0x3e>
 800e730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e734:	e00e      	b.n	800e754 <__swhatbuf_r+0x40>
 800e736:	466a      	mov	r2, sp
 800e738:	f000 fa9c 	bl	800ec74 <_fstat_r>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dbf2      	blt.n	800e726 <__swhatbuf_r+0x12>
 800e740:	9a01      	ldr	r2, [sp, #4]
 800e742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e74a:	425a      	negs	r2, r3
 800e74c:	415a      	adcs	r2, r3
 800e74e:	602a      	str	r2, [r5, #0]
 800e750:	e7ee      	b.n	800e730 <__swhatbuf_r+0x1c>
 800e752:	2340      	movs	r3, #64	; 0x40
 800e754:	2000      	movs	r0, #0
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	b016      	add	sp, #88	; 0x58
 800e75a:	bd70      	pop	{r4, r5, r6, pc}

0800e75c <__smakebuf_r>:
 800e75c:	898b      	ldrh	r3, [r1, #12]
 800e75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e760:	079d      	lsls	r5, r3, #30
 800e762:	4606      	mov	r6, r0
 800e764:	460c      	mov	r4, r1
 800e766:	d507      	bpl.n	800e778 <__smakebuf_r+0x1c>
 800e768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	6123      	str	r3, [r4, #16]
 800e770:	2301      	movs	r3, #1
 800e772:	6163      	str	r3, [r4, #20]
 800e774:	b002      	add	sp, #8
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	ab01      	add	r3, sp, #4
 800e77a:	466a      	mov	r2, sp
 800e77c:	f7ff ffca 	bl	800e714 <__swhatbuf_r>
 800e780:	9900      	ldr	r1, [sp, #0]
 800e782:	4605      	mov	r5, r0
 800e784:	4630      	mov	r0, r6
 800e786:	f7ff f9e9 	bl	800db5c <_malloc_r>
 800e78a:	b948      	cbnz	r0, 800e7a0 <__smakebuf_r+0x44>
 800e78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d4ef      	bmi.n	800e774 <__smakebuf_r+0x18>
 800e794:	f023 0303 	bic.w	r3, r3, #3
 800e798:	f043 0302 	orr.w	r3, r3, #2
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	e7e3      	b.n	800e768 <__smakebuf_r+0xc>
 800e7a0:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <__smakebuf_r+0x7c>)
 800e7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	6020      	str	r0, [r4, #0]
 800e7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	6120      	str	r0, [r4, #16]
 800e7b2:	6163      	str	r3, [r4, #20]
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	b15b      	cbz	r3, 800e7d0 <__smakebuf_r+0x74>
 800e7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 fa6b 	bl	800ec98 <_isatty_r>
 800e7c2:	b128      	cbz	r0, 800e7d0 <__smakebuf_r+0x74>
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	f023 0303 	bic.w	r3, r3, #3
 800e7ca:	f043 0301 	orr.w	r3, r3, #1
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	431d      	orrs	r5, r3
 800e7d4:	81a5      	strh	r5, [r4, #12]
 800e7d6:	e7cd      	b.n	800e774 <__smakebuf_r+0x18>
 800e7d8:	0800e5c9 	.word	0x0800e5c9

0800e7dc <memchr>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	b2c9      	uxtb	r1, r1
 800e7e0:	4402      	add	r2, r0
 800e7e2:	4290      	cmp	r0, r2
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	d101      	bne.n	800e7ec <memchr+0x10>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e003      	b.n	800e7f4 <memchr+0x18>
 800e7ec:	781c      	ldrb	r4, [r3, #0]
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	428c      	cmp	r4, r1
 800e7f2:	d1f6      	bne.n	800e7e2 <memchr+0x6>
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	bd10      	pop	{r4, pc}

0800e7f8 <memmove>:
 800e7f8:	4288      	cmp	r0, r1
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	eb01 0302 	add.w	r3, r1, r2
 800e800:	d807      	bhi.n	800e812 <memmove+0x1a>
 800e802:	1e42      	subs	r2, r0, #1
 800e804:	4299      	cmp	r1, r3
 800e806:	d00a      	beq.n	800e81e <memmove+0x26>
 800e808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e80c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e810:	e7f8      	b.n	800e804 <memmove+0xc>
 800e812:	4283      	cmp	r3, r0
 800e814:	d9f5      	bls.n	800e802 <memmove+0xa>
 800e816:	1881      	adds	r1, r0, r2
 800e818:	1ad2      	subs	r2, r2, r3
 800e81a:	42d3      	cmn	r3, r2
 800e81c:	d100      	bne.n	800e820 <memmove+0x28>
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e824:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e828:	e7f7      	b.n	800e81a <memmove+0x22>

0800e82a <__malloc_lock>:
 800e82a:	4770      	bx	lr

0800e82c <__malloc_unlock>:
 800e82c:	4770      	bx	lr

0800e82e <_realloc_r>:
 800e82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e830:	4607      	mov	r7, r0
 800e832:	4614      	mov	r4, r2
 800e834:	460e      	mov	r6, r1
 800e836:	b921      	cbnz	r1, 800e842 <_realloc_r+0x14>
 800e838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e83c:	4611      	mov	r1, r2
 800e83e:	f7ff b98d 	b.w	800db5c <_malloc_r>
 800e842:	b922      	cbnz	r2, 800e84e <_realloc_r+0x20>
 800e844:	f7ff f93e 	bl	800dac4 <_free_r>
 800e848:	4625      	mov	r5, r4
 800e84a:	4628      	mov	r0, r5
 800e84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84e:	f000 fa45 	bl	800ecdc <_malloc_usable_size_r>
 800e852:	42a0      	cmp	r0, r4
 800e854:	d20f      	bcs.n	800e876 <_realloc_r+0x48>
 800e856:	4621      	mov	r1, r4
 800e858:	4638      	mov	r0, r7
 800e85a:	f7ff f97f 	bl	800db5c <_malloc_r>
 800e85e:	4605      	mov	r5, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d0f2      	beq.n	800e84a <_realloc_r+0x1c>
 800e864:	4631      	mov	r1, r6
 800e866:	4622      	mov	r2, r4
 800e868:	f7ff f919 	bl	800da9e <memcpy>
 800e86c:	4631      	mov	r1, r6
 800e86e:	4638      	mov	r0, r7
 800e870:	f7ff f928 	bl	800dac4 <_free_r>
 800e874:	e7e9      	b.n	800e84a <_realloc_r+0x1c>
 800e876:	4635      	mov	r5, r6
 800e878:	e7e7      	b.n	800e84a <_realloc_r+0x1c>

0800e87a <__ssputs_r>:
 800e87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e87e:	688e      	ldr	r6, [r1, #8]
 800e880:	4682      	mov	sl, r0
 800e882:	429e      	cmp	r6, r3
 800e884:	460c      	mov	r4, r1
 800e886:	4690      	mov	r8, r2
 800e888:	4699      	mov	r9, r3
 800e88a:	d837      	bhi.n	800e8fc <__ssputs_r+0x82>
 800e88c:	898a      	ldrh	r2, [r1, #12]
 800e88e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e892:	d031      	beq.n	800e8f8 <__ssputs_r+0x7e>
 800e894:	2302      	movs	r3, #2
 800e896:	6825      	ldr	r5, [r4, #0]
 800e898:	6909      	ldr	r1, [r1, #16]
 800e89a:	1a6f      	subs	r7, r5, r1
 800e89c:	6965      	ldr	r5, [r4, #20]
 800e89e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8a2:	fb95 f5f3 	sdiv	r5, r5, r3
 800e8a6:	f109 0301 	add.w	r3, r9, #1
 800e8aa:	443b      	add	r3, r7
 800e8ac:	429d      	cmp	r5, r3
 800e8ae:	bf38      	it	cc
 800e8b0:	461d      	movcc	r5, r3
 800e8b2:	0553      	lsls	r3, r2, #21
 800e8b4:	d530      	bpl.n	800e918 <__ssputs_r+0x9e>
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7ff f950 	bl	800db5c <_malloc_r>
 800e8bc:	4606      	mov	r6, r0
 800e8be:	b950      	cbnz	r0, 800e8d6 <__ssputs_r+0x5c>
 800e8c0:	230c      	movs	r3, #12
 800e8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c6:	f8ca 3000 	str.w	r3, [sl]
 800e8ca:	89a3      	ldrh	r3, [r4, #12]
 800e8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d6:	463a      	mov	r2, r7
 800e8d8:	6921      	ldr	r1, [r4, #16]
 800e8da:	f7ff f8e0 	bl	800da9e <memcpy>
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	6126      	str	r6, [r4, #16]
 800e8ec:	443e      	add	r6, r7
 800e8ee:	6026      	str	r6, [r4, #0]
 800e8f0:	464e      	mov	r6, r9
 800e8f2:	6165      	str	r5, [r4, #20]
 800e8f4:	1bed      	subs	r5, r5, r7
 800e8f6:	60a5      	str	r5, [r4, #8]
 800e8f8:	454e      	cmp	r6, r9
 800e8fa:	d900      	bls.n	800e8fe <__ssputs_r+0x84>
 800e8fc:	464e      	mov	r6, r9
 800e8fe:	4632      	mov	r2, r6
 800e900:	4641      	mov	r1, r8
 800e902:	6820      	ldr	r0, [r4, #0]
 800e904:	f7ff ff78 	bl	800e7f8 <memmove>
 800e908:	68a3      	ldr	r3, [r4, #8]
 800e90a:	2000      	movs	r0, #0
 800e90c:	1b9b      	subs	r3, r3, r6
 800e90e:	60a3      	str	r3, [r4, #8]
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	441e      	add	r6, r3
 800e914:	6026      	str	r6, [r4, #0]
 800e916:	e7dc      	b.n	800e8d2 <__ssputs_r+0x58>
 800e918:	462a      	mov	r2, r5
 800e91a:	f7ff ff88 	bl	800e82e <_realloc_r>
 800e91e:	4606      	mov	r6, r0
 800e920:	2800      	cmp	r0, #0
 800e922:	d1e2      	bne.n	800e8ea <__ssputs_r+0x70>
 800e924:	6921      	ldr	r1, [r4, #16]
 800e926:	4650      	mov	r0, sl
 800e928:	f7ff f8cc 	bl	800dac4 <_free_r>
 800e92c:	e7c8      	b.n	800e8c0 <__ssputs_r+0x46>
	...

0800e930 <_svfiprintf_r>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	461d      	mov	r5, r3
 800e936:	898b      	ldrh	r3, [r1, #12]
 800e938:	b09d      	sub	sp, #116	; 0x74
 800e93a:	061f      	lsls	r7, r3, #24
 800e93c:	4680      	mov	r8, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	4616      	mov	r6, r2
 800e942:	d50f      	bpl.n	800e964 <_svfiprintf_r+0x34>
 800e944:	690b      	ldr	r3, [r1, #16]
 800e946:	b96b      	cbnz	r3, 800e964 <_svfiprintf_r+0x34>
 800e948:	2140      	movs	r1, #64	; 0x40
 800e94a:	f7ff f907 	bl	800db5c <_malloc_r>
 800e94e:	6020      	str	r0, [r4, #0]
 800e950:	6120      	str	r0, [r4, #16]
 800e952:	b928      	cbnz	r0, 800e960 <_svfiprintf_r+0x30>
 800e954:	230c      	movs	r3, #12
 800e956:	f8c8 3000 	str.w	r3, [r8]
 800e95a:	f04f 30ff 	mov.w	r0, #4294967295
 800e95e:	e0c8      	b.n	800eaf2 <_svfiprintf_r+0x1c2>
 800e960:	2340      	movs	r3, #64	; 0x40
 800e962:	6163      	str	r3, [r4, #20]
 800e964:	2300      	movs	r3, #0
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	2320      	movs	r3, #32
 800e96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e96e:	2330      	movs	r3, #48	; 0x30
 800e970:	f04f 0b01 	mov.w	fp, #1
 800e974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e978:	9503      	str	r5, [sp, #12]
 800e97a:	4637      	mov	r7, r6
 800e97c:	463d      	mov	r5, r7
 800e97e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e982:	b10b      	cbz	r3, 800e988 <_svfiprintf_r+0x58>
 800e984:	2b25      	cmp	r3, #37	; 0x25
 800e986:	d13e      	bne.n	800ea06 <_svfiprintf_r+0xd6>
 800e988:	ebb7 0a06 	subs.w	sl, r7, r6
 800e98c:	d00b      	beq.n	800e9a6 <_svfiprintf_r+0x76>
 800e98e:	4653      	mov	r3, sl
 800e990:	4632      	mov	r2, r6
 800e992:	4621      	mov	r1, r4
 800e994:	4640      	mov	r0, r8
 800e996:	f7ff ff70 	bl	800e87a <__ssputs_r>
 800e99a:	3001      	adds	r0, #1
 800e99c:	f000 80a4 	beq.w	800eae8 <_svfiprintf_r+0x1b8>
 800e9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a2:	4453      	add	r3, sl
 800e9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a6:	783b      	ldrb	r3, [r7, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 809d 	beq.w	800eae8 <_svfiprintf_r+0x1b8>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9b8:	9304      	str	r3, [sp, #16]
 800e9ba:	9307      	str	r3, [sp, #28]
 800e9bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e9c2:	462f      	mov	r7, r5
 800e9c4:	2205      	movs	r2, #5
 800e9c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e9ca:	4850      	ldr	r0, [pc, #320]	; (800eb0c <_svfiprintf_r+0x1dc>)
 800e9cc:	f7ff ff06 	bl	800e7dc <memchr>
 800e9d0:	9b04      	ldr	r3, [sp, #16]
 800e9d2:	b9d0      	cbnz	r0, 800ea0a <_svfiprintf_r+0xda>
 800e9d4:	06d9      	lsls	r1, r3, #27
 800e9d6:	bf44      	itt	mi
 800e9d8:	2220      	movmi	r2, #32
 800e9da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9de:	071a      	lsls	r2, r3, #28
 800e9e0:	bf44      	itt	mi
 800e9e2:	222b      	movmi	r2, #43	; 0x2b
 800e9e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9e8:	782a      	ldrb	r2, [r5, #0]
 800e9ea:	2a2a      	cmp	r2, #42	; 0x2a
 800e9ec:	d015      	beq.n	800ea1a <_svfiprintf_r+0xea>
 800e9ee:	462f      	mov	r7, r5
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	250a      	movs	r5, #10
 800e9f4:	9a07      	ldr	r2, [sp, #28]
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9fc:	3b30      	subs	r3, #48	; 0x30
 800e9fe:	2b09      	cmp	r3, #9
 800ea00:	d94d      	bls.n	800ea9e <_svfiprintf_r+0x16e>
 800ea02:	b1b8      	cbz	r0, 800ea34 <_svfiprintf_r+0x104>
 800ea04:	e00f      	b.n	800ea26 <_svfiprintf_r+0xf6>
 800ea06:	462f      	mov	r7, r5
 800ea08:	e7b8      	b.n	800e97c <_svfiprintf_r+0x4c>
 800ea0a:	4a40      	ldr	r2, [pc, #256]	; (800eb0c <_svfiprintf_r+0x1dc>)
 800ea0c:	463d      	mov	r5, r7
 800ea0e:	1a80      	subs	r0, r0, r2
 800ea10:	fa0b f000 	lsl.w	r0, fp, r0
 800ea14:	4318      	orrs	r0, r3
 800ea16:	9004      	str	r0, [sp, #16]
 800ea18:	e7d3      	b.n	800e9c2 <_svfiprintf_r+0x92>
 800ea1a:	9a03      	ldr	r2, [sp, #12]
 800ea1c:	1d11      	adds	r1, r2, #4
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	9103      	str	r1, [sp, #12]
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	db01      	blt.n	800ea2a <_svfiprintf_r+0xfa>
 800ea26:	9207      	str	r2, [sp, #28]
 800ea28:	e004      	b.n	800ea34 <_svfiprintf_r+0x104>
 800ea2a:	4252      	negs	r2, r2
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	9207      	str	r2, [sp, #28]
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	783b      	ldrb	r3, [r7, #0]
 800ea36:	2b2e      	cmp	r3, #46	; 0x2e
 800ea38:	d10c      	bne.n	800ea54 <_svfiprintf_r+0x124>
 800ea3a:	787b      	ldrb	r3, [r7, #1]
 800ea3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea3e:	d133      	bne.n	800eaa8 <_svfiprintf_r+0x178>
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	3702      	adds	r7, #2
 800ea44:	1d1a      	adds	r2, r3, #4
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	9203      	str	r2, [sp, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	bfb8      	it	lt
 800ea4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	4d2e      	ldr	r5, [pc, #184]	; (800eb10 <_svfiprintf_r+0x1e0>)
 800ea56:	2203      	movs	r2, #3
 800ea58:	7839      	ldrb	r1, [r7, #0]
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f7ff febe 	bl	800e7dc <memchr>
 800ea60:	b138      	cbz	r0, 800ea72 <_svfiprintf_r+0x142>
 800ea62:	2340      	movs	r3, #64	; 0x40
 800ea64:	1b40      	subs	r0, r0, r5
 800ea66:	fa03 f000 	lsl.w	r0, r3, r0
 800ea6a:	9b04      	ldr	r3, [sp, #16]
 800ea6c:	3701      	adds	r7, #1
 800ea6e:	4303      	orrs	r3, r0
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	7839      	ldrb	r1, [r7, #0]
 800ea74:	2206      	movs	r2, #6
 800ea76:	4827      	ldr	r0, [pc, #156]	; (800eb14 <_svfiprintf_r+0x1e4>)
 800ea78:	1c7e      	adds	r6, r7, #1
 800ea7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea7e:	f7ff fead 	bl	800e7dc <memchr>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d038      	beq.n	800eaf8 <_svfiprintf_r+0x1c8>
 800ea86:	4b24      	ldr	r3, [pc, #144]	; (800eb18 <_svfiprintf_r+0x1e8>)
 800ea88:	bb13      	cbnz	r3, 800ead0 <_svfiprintf_r+0x1a0>
 800ea8a:	9b03      	ldr	r3, [sp, #12]
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	f023 0307 	bic.w	r3, r3, #7
 800ea92:	3308      	adds	r3, #8
 800ea94:	9303      	str	r3, [sp, #12]
 800ea96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea98:	444b      	add	r3, r9
 800ea9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea9c:	e76d      	b.n	800e97a <_svfiprintf_r+0x4a>
 800ea9e:	fb05 3202 	mla	r2, r5, r2, r3
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	460f      	mov	r7, r1
 800eaa6:	e7a6      	b.n	800e9f6 <_svfiprintf_r+0xc6>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	250a      	movs	r5, #10
 800eaac:	4619      	mov	r1, r3
 800eaae:	3701      	adds	r7, #1
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	4638      	mov	r0, r7
 800eab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eab8:	3a30      	subs	r2, #48	; 0x30
 800eaba:	2a09      	cmp	r2, #9
 800eabc:	d903      	bls.n	800eac6 <_svfiprintf_r+0x196>
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0c8      	beq.n	800ea54 <_svfiprintf_r+0x124>
 800eac2:	9105      	str	r1, [sp, #20]
 800eac4:	e7c6      	b.n	800ea54 <_svfiprintf_r+0x124>
 800eac6:	fb05 2101 	mla	r1, r5, r1, r2
 800eaca:	2301      	movs	r3, #1
 800eacc:	4607      	mov	r7, r0
 800eace:	e7f0      	b.n	800eab2 <_svfiprintf_r+0x182>
 800ead0:	ab03      	add	r3, sp, #12
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	4622      	mov	r2, r4
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <_svfiprintf_r+0x1ec>)
 800ead8:	a904      	add	r1, sp, #16
 800eada:	4640      	mov	r0, r8
 800eadc:	f3af 8000 	nop.w
 800eae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eae4:	4681      	mov	r9, r0
 800eae6:	d1d6      	bne.n	800ea96 <_svfiprintf_r+0x166>
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	065b      	lsls	r3, r3, #25
 800eaec:	f53f af35 	bmi.w	800e95a <_svfiprintf_r+0x2a>
 800eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaf2:	b01d      	add	sp, #116	; 0x74
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	ab03      	add	r3, sp, #12
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4622      	mov	r2, r4
 800eafe:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <_svfiprintf_r+0x1ec>)
 800eb00:	a904      	add	r1, sp, #16
 800eb02:	4640      	mov	r0, r8
 800eb04:	f7ff fa38 	bl	800df78 <_printf_i>
 800eb08:	e7ea      	b.n	800eae0 <_svfiprintf_r+0x1b0>
 800eb0a:	bf00      	nop
 800eb0c:	0800fa70 	.word	0x0800fa70
 800eb10:	0800fa76 	.word	0x0800fa76
 800eb14:	0800fa7a 	.word	0x0800fa7a
 800eb18:	00000000 	.word	0x00000000
 800eb1c:	0800e87b 	.word	0x0800e87b

0800eb20 <_raise_r>:
 800eb20:	291f      	cmp	r1, #31
 800eb22:	b538      	push	{r3, r4, r5, lr}
 800eb24:	4604      	mov	r4, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	d904      	bls.n	800eb34 <_raise_r+0x14>
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb36:	b112      	cbz	r2, 800eb3e <_raise_r+0x1e>
 800eb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb3c:	b94b      	cbnz	r3, 800eb52 <_raise_r+0x32>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f000 f830 	bl	800eba4 <_getpid_r>
 800eb44:	462a      	mov	r2, r5
 800eb46:	4601      	mov	r1, r0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4e:	f000 b817 	b.w	800eb80 <_kill_r>
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d00a      	beq.n	800eb6c <_raise_r+0x4c>
 800eb56:	1c59      	adds	r1, r3, #1
 800eb58:	d103      	bne.n	800eb62 <_raise_r+0x42>
 800eb5a:	2316      	movs	r3, #22
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	2001      	movs	r0, #1
 800eb60:	e7e7      	b.n	800eb32 <_raise_r+0x12>
 800eb62:	2400      	movs	r4, #0
 800eb64:	4628      	mov	r0, r5
 800eb66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb6a:	4798      	blx	r3
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e7e0      	b.n	800eb32 <_raise_r+0x12>

0800eb70 <raise>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <raise+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f7ff bfd3 	b.w	800eb20 <_raise_r>
 800eb7a:	bf00      	nop
 800eb7c:	20000128 	.word	0x20000128

0800eb80 <_kill_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	2300      	movs	r3, #0
 800eb84:	4c06      	ldr	r4, [pc, #24]	; (800eba0 <_kill_r+0x20>)
 800eb86:	4605      	mov	r5, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	6023      	str	r3, [r4, #0]
 800eb8e:	f000 f8df 	bl	800ed50 <_kill>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	d102      	bne.n	800eb9c <_kill_r+0x1c>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	b103      	cbz	r3, 800eb9c <_kill_r+0x1c>
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	20007814 	.word	0x20007814

0800eba4 <_getpid_r>:
 800eba4:	f000 b8c4 	b.w	800ed30 <_getpid>

0800eba8 <__sread>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	460c      	mov	r4, r1
 800ebac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb0:	f000 f89c 	bl	800ecec <_read_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	bfab      	itete	ge
 800ebb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebba:	89a3      	ldrhlt	r3, [r4, #12]
 800ebbc:	181b      	addge	r3, r3, r0
 800ebbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebc2:	bfac      	ite	ge
 800ebc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebc6:	81a3      	strhlt	r3, [r4, #12]
 800ebc8:	bd10      	pop	{r4, pc}

0800ebca <__swrite>:
 800ebca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebce:	461f      	mov	r7, r3
 800ebd0:	898b      	ldrh	r3, [r1, #12]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	05db      	lsls	r3, r3, #23
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	4616      	mov	r6, r2
 800ebda:	d505      	bpl.n	800ebe8 <__swrite+0x1e>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe4:	f000 f868 	bl	800ecb8 <_lseek_r>
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	4632      	mov	r2, r6
 800ebec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfe:	f000 b817 	b.w	800ec30 <_write_r>

0800ec02 <__sseek>:
 800ec02:	b510      	push	{r4, lr}
 800ec04:	460c      	mov	r4, r1
 800ec06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0a:	f000 f855 	bl	800ecb8 <_lseek_r>
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	89a3      	ldrh	r3, [r4, #12]
 800ec12:	bf15      	itete	ne
 800ec14:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec1e:	81a3      	strheq	r3, [r4, #12]
 800ec20:	bf18      	it	ne
 800ec22:	81a3      	strhne	r3, [r4, #12]
 800ec24:	bd10      	pop	{r4, pc}

0800ec26 <__sclose>:
 800ec26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2a:	f000 b813 	b.w	800ec54 <_close_r>
	...

0800ec30 <_write_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4605      	mov	r5, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	4611      	mov	r1, r2
 800ec38:	2200      	movs	r2, #0
 800ec3a:	4c05      	ldr	r4, [pc, #20]	; (800ec50 <_write_r+0x20>)
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f000 f8ac 	bl	800ed9c <_write>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_write_r+0x1e>
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_write_r+0x1e>
 800ec4c:	602b      	str	r3, [r5, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	20007814 	.word	0x20007814

0800ec54 <_close_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	2300      	movs	r3, #0
 800ec58:	4c05      	ldr	r4, [pc, #20]	; (800ec70 <_close_r+0x1c>)
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	f000 f856 	bl	800ed10 <_close>
 800ec64:	1c43      	adds	r3, r0, #1
 800ec66:	d102      	bne.n	800ec6e <_close_r+0x1a>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	b103      	cbz	r3, 800ec6e <_close_r+0x1a>
 800ec6c:	602b      	str	r3, [r5, #0]
 800ec6e:	bd38      	pop	{r3, r4, r5, pc}
 800ec70:	20007814 	.word	0x20007814

0800ec74 <_fstat_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	2300      	movs	r3, #0
 800ec78:	4c06      	ldr	r4, [pc, #24]	; (800ec94 <_fstat_r+0x20>)
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	4611      	mov	r1, r2
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	f000 f84d 	bl	800ed20 <_fstat>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d102      	bne.n	800ec90 <_fstat_r+0x1c>
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	b103      	cbz	r3, 800ec90 <_fstat_r+0x1c>
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop
 800ec94:	20007814 	.word	0x20007814

0800ec98 <_isatty_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	4c05      	ldr	r4, [pc, #20]	; (800ecb4 <_isatty_r+0x1c>)
 800ec9e:	4605      	mov	r5, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	f000 f84c 	bl	800ed40 <_isatty>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	d102      	bne.n	800ecb2 <_isatty_r+0x1a>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	b103      	cbz	r3, 800ecb2 <_isatty_r+0x1a>
 800ecb0:	602b      	str	r3, [r5, #0]
 800ecb2:	bd38      	pop	{r3, r4, r5, pc}
 800ecb4:	20007814 	.word	0x20007814

0800ecb8 <_lseek_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4605      	mov	r5, r0
 800ecbc:	4608      	mov	r0, r1
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4c05      	ldr	r4, [pc, #20]	; (800ecd8 <_lseek_r+0x20>)
 800ecc4:	6022      	str	r2, [r4, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f000 f84a 	bl	800ed60 <_lseek>
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	d102      	bne.n	800ecd6 <_lseek_r+0x1e>
 800ecd0:	6823      	ldr	r3, [r4, #0]
 800ecd2:	b103      	cbz	r3, 800ecd6 <_lseek_r+0x1e>
 800ecd4:	602b      	str	r3, [r5, #0]
 800ecd6:	bd38      	pop	{r3, r4, r5, pc}
 800ecd8:	20007814 	.word	0x20007814

0800ecdc <_malloc_usable_size_r>:
 800ecdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece0:	1f18      	subs	r0, r3, #4
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	bfbc      	itt	lt
 800ece6:	580b      	ldrlt	r3, [r1, r0]
 800ece8:	18c0      	addlt	r0, r0, r3
 800ecea:	4770      	bx	lr

0800ecec <_read_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4605      	mov	r5, r0
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4c05      	ldr	r4, [pc, #20]	; (800ed0c <_read_r+0x20>)
 800ecf8:	6022      	str	r2, [r4, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f000 f838 	bl	800ed70 <_read>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d102      	bne.n	800ed0a <_read_r+0x1e>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	b103      	cbz	r3, 800ed0a <_read_r+0x1e>
 800ed08:	602b      	str	r3, [r5, #0]
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
 800ed0c:	20007814 	.word	0x20007814

0800ed10 <_close>:
 800ed10:	2258      	movs	r2, #88	; 0x58
 800ed12:	4b02      	ldr	r3, [pc, #8]	; (800ed1c <_close+0xc>)
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	4770      	bx	lr
 800ed1c:	20007814 	.word	0x20007814

0800ed20 <_fstat>:
 800ed20:	2258      	movs	r2, #88	; 0x58
 800ed22:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <_fstat+0xc>)
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	4770      	bx	lr
 800ed2c:	20007814 	.word	0x20007814

0800ed30 <_getpid>:
 800ed30:	2258      	movs	r2, #88	; 0x58
 800ed32:	4b02      	ldr	r3, [pc, #8]	; (800ed3c <_getpid+0xc>)
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	4770      	bx	lr
 800ed3c:	20007814 	.word	0x20007814

0800ed40 <_isatty>:
 800ed40:	2258      	movs	r2, #88	; 0x58
 800ed42:	4b02      	ldr	r3, [pc, #8]	; (800ed4c <_isatty+0xc>)
 800ed44:	2000      	movs	r0, #0
 800ed46:	601a      	str	r2, [r3, #0]
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20007814 	.word	0x20007814

0800ed50 <_kill>:
 800ed50:	2258      	movs	r2, #88	; 0x58
 800ed52:	4b02      	ldr	r3, [pc, #8]	; (800ed5c <_kill+0xc>)
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	4770      	bx	lr
 800ed5c:	20007814 	.word	0x20007814

0800ed60 <_lseek>:
 800ed60:	2258      	movs	r2, #88	; 0x58
 800ed62:	4b02      	ldr	r3, [pc, #8]	; (800ed6c <_lseek+0xc>)
 800ed64:	f04f 30ff 	mov.w	r0, #4294967295
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	4770      	bx	lr
 800ed6c:	20007814 	.word	0x20007814

0800ed70 <_read>:
 800ed70:	2258      	movs	r2, #88	; 0x58
 800ed72:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <_read+0xc>)
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4770      	bx	lr
 800ed7c:	20007814 	.word	0x20007814

0800ed80 <_sbrk>:
 800ed80:	4b04      	ldr	r3, [pc, #16]	; (800ed94 <_sbrk+0x14>)
 800ed82:	4602      	mov	r2, r0
 800ed84:	6819      	ldr	r1, [r3, #0]
 800ed86:	b909      	cbnz	r1, 800ed8c <_sbrk+0xc>
 800ed88:	4903      	ldr	r1, [pc, #12]	; (800ed98 <_sbrk+0x18>)
 800ed8a:	6019      	str	r1, [r3, #0]
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	4402      	add	r2, r0
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	4770      	bx	lr
 800ed94:	20003a18 	.word	0x20003a18
 800ed98:	20007818 	.word	0x20007818

0800ed9c <_write>:
 800ed9c:	2258      	movs	r2, #88	; 0x58
 800ed9e:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <_write+0xc>)
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	4770      	bx	lr
 800eda8:	20007814 	.word	0x20007814

0800edac <_exit>:
 800edac:	e7fe      	b.n	800edac <_exit>
	...

0800edb0 <_init>:
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb2:	bf00      	nop
 800edb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb6:	bc08      	pop	{r3}
 800edb8:	469e      	mov	lr, r3
 800edba:	4770      	bx	lr

0800edbc <_fini>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	bf00      	nop
 800edc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc2:	bc08      	pop	{r3}
 800edc4:	469e      	mov	lr, r3
 800edc6:	4770      	bx	lr

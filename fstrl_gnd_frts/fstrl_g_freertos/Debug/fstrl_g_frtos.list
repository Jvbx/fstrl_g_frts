
fstrl_g_frtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d00  0800edc8  0800edc8  0001edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fac8  0800fac8  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800fac8  0800fac8  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fac8  0800fac8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fac8  0800fac8  0001fac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800facc  0800facc  0001facc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800fad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067d8  20000188  0800fc58  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00003000  20006960  0800fc58  00026960  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067373  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b915  00000000  00000000  00087524  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000211d5  00000000  00000000  00092e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002528  00000000  00000000  000b4010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ec0  00000000  00000000  000b6538  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000299a5  00000000  00000000  000b93f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00035818  00000000  00000000  000e2d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a2e52  00000000  00000000  001185b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001bb407  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072ac  00000000  00000000  001bb484  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         000000cc  00000000  00000000  001c2730  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001c27fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000188 	.word	0x20000188
 800020c:	00000000 	.word	0x00000000
 8000210:	0800edb0 	.word	0x0800edb0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000018c 	.word	0x2000018c
 800022c:	0800edb0 	.word	0x0800edb0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__popcountsi2>:
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	0883      	lsrs	r3, r0, #2
 800024a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800024e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000252:	4418      	add	r0, r3
 8000254:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000258:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800025c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000260:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000264:	0e00      	lsrs	r0, r0, #24
 8000266:	4770      	bx	lr

08000268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(const void * argument)
{
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	b0bb      	sub	sp, #236	; 0xec
  osThreadSuspendAll();
 800026c:	f008 f840 	bl	80082f0 <osThreadSuspendAll>
/* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000270:	f00d f98e 	bl	800d590 <MX_USB_DEVICE_Init>

  /* init code for FATFS */
  MX_FATFS_Init();
 8000274:	f006 fcb2 	bl	8006bdc <MX_FATFS_Init>

  /* USER CODE BEGIN StartDefaultTask */
  //инициализация функции микросекунных задержек
   DWT_Delay_Init();
 8000278:	f006 fc8e 	bl	8006b98 <DWT_Delay_Init>

   //инициализация дисплея
   LCD1602A_Init();
 800027c:	f002 f952 	bl	8002524 <LCD1602A_Init>
   LCD1602A_DisplayControl(ON, OFF, OFF);
 8000280:	2200      	movs	r2, #0
 8000282:	4611      	mov	r1, r2
 8000284:	2001      	movs	r0, #1
 8000286:	f002 f86b 	bl	8002360 <LCD1602A_DisplayControl>

   //инициализация spi-nand
   gd5f_init(&spi_nand_gd5f);
 800028a:	4c51      	ldr	r4, [pc, #324]	; (80003d0 <StartDefaultTask+0x168>)
 800028c:	4620      	mov	r0, r4
 800028e:	f001 fea9 	bl	8001fe4 <gd5f_init>
   gd5f_reset(&spi_nand_gd5f);
 8000292:	4620      	mov	r0, r4
 8000294:	f001 fd5c 	bl	8001d50 <gd5f_reset>
   gd5f_get_features(&spi_nand_gd5f);
 8000298:	4620      	mov	r0, r4
 800029a:	f001 fc73 	bl	8001b84 <gd5f_get_features>



   char outbuff[20] = {};
 800029e:	2300      	movs	r3, #0
 80002a0:	9335      	str	r3, [sp, #212]	; 0xd4
 80002a2:	9336      	str	r3, [sp, #216]	; 0xd8
 80002a4:	9337      	str	r3, [sp, #220]	; 0xdc
 80002a6:	9338      	str	r3, [sp, #224]	; 0xe0
 80002a8:	9339      	str	r3, [sp, #228]	; 0xe4

extern const struct lfs_config cfg;
lfs_t      lfs;
lfs_file_t file;

   volatile int32_t err = lfs_mount(&lfs, &cfg);
 80002aa:	494a      	ldr	r1, [pc, #296]	; (80003d4 <StartDefaultTask+0x16c>)
 80002ac:	a817      	add	r0, sp, #92	; 0x5c
 80002ae:	f00b fb7b 	bl	800b9a8 <lfs_mount>
 80002b2:	9001      	str	r0, [sp, #4]
         if (err < 0) // если есть ошибка монтирования
 80002b4:	9b01      	ldr	r3, [sp, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db60      	blt.n	800037c <StartDefaultTask+0x114>
             LCD1602A_SetCursorPos(1, 1);
             LCD1602A_PrintStr("Formatting...");
             err = lfs_format(&lfs, &cfg);
             err = lfs_mount(&lfs, &cfg);
         }
         LL_mDelay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f006 fc4f 	bl	8006b60 <LL_mDelay>
         LCD1602A_SetCursorPos(0, 1);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2000      	movs	r0, #0
 80002c6:	f002 f821 	bl	800230c <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 80002ca:	4d43      	ldr	r5, [pc, #268]	; (80003d8 <StartDefaultTask+0x170>)
 80002cc:	4628      	mov	r0, r5
 80002ce:	f002 f943 	bl	8002558 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(0, 1);
 80002d2:	2101      	movs	r1, #1
 80002d4:	2000      	movs	r0, #0
 80002d6:	f002 f819 	bl	800230c <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("LFS Mount OK...");
 80002da:	4840      	ldr	r0, [pc, #256]	; (80003dc <StartDefaultTask+0x174>)
 80002dc:	f002 f93c 	bl	8002558 <LCD1602A_PrintStr>
         // прочитать текущее значение кол-ва загрузок
         uint32_t boot_count = 0;
 80002e0:	2400      	movs	r4, #0
 80002e2:	9400      	str	r4, [sp, #0]
         err = lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80002e4:	f240 1303 	movw	r3, #259	; 0x103
 80002e8:	4a3d      	ldr	r2, [pc, #244]	; (80003e0 <StartDefaultTask+0x178>)
 80002ea:	a902      	add	r1, sp, #8
 80002ec:	a817      	add	r0, sp, #92	; 0x5c
 80002ee:	f00d f865 	bl	800d3bc <lfs_file_open>
 80002f2:	9001      	str	r0, [sp, #4]
         err = lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 80002f4:	2304      	movs	r3, #4
 80002f6:	466a      	mov	r2, sp
 80002f8:	a902      	add	r1, sp, #8
 80002fa:	a817      	add	r0, sp, #92	; 0x5c
 80002fc:	f00c f85e 	bl	800c3bc <lfs_file_read>
 8000300:	9001      	str	r0, [sp, #4]

         // обновить счетчик загрузок
         boot_count += 1;
 8000302:	9b00      	ldr	r3, [sp, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	9300      	str	r3, [sp, #0]
         // перейти в начало файла
         err = lfs_file_rewind(&lfs, &file);
 8000308:	a902      	add	r1, sp, #8
 800030a:	a817      	add	r0, sp, #92	; 0x5c
 800030c:	f00c f90b 	bl	800c526 <lfs_file_rewind>
 8000310:	9001      	str	r0, [sp, #4]
         // произвести запись
         err = lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8000312:	2304      	movs	r3, #4
 8000314:	466a      	mov	r2, sp
 8000316:	a902      	add	r1, sp, #8
 8000318:	a817      	add	r0, sp, #92	; 0x5c
 800031a:	f00b fecf 	bl	800c0bc <lfs_file_write>
 800031e:	9001      	str	r0, [sp, #4]

         // закрыть файл, окончательно производится дозапись на носитель
         err = lfs_file_close(&lfs, &file);
 8000320:	a902      	add	r1, sp, #8
 8000322:	a817      	add	r0, sp, #92	; 0x5c
 8000324:	f00c ff09 	bl	800d13a <lfs_file_close>
 8000328:	9001      	str	r0, [sp, #4]

         // размонтировать файловую систему
         err = lfs_unmount(&lfs);
 800032a:	a817      	add	r0, sp, #92	; 0x5c
 800032c:	f00b fb38 	bl	800b9a0 <lfs_unmount>
 8000330:	9001      	str	r0, [sp, #4]

         // печать значения счетчика включений
         sprintf(outbuff, "boot_count: %ld", boot_count);
 8000332:	9a00      	ldr	r2, [sp, #0]
 8000334:	492b      	ldr	r1, [pc, #172]	; (80003e4 <StartDefaultTask+0x17c>)
 8000336:	a835      	add	r0, sp, #212	; 0xd4
 8000338:	f00d ff58 	bl	800e1ec <siprintf>
         LCD1602A_SetCursorPos(1, 1);
 800033c:	2101      	movs	r1, #1
 800033e:	4608      	mov	r0, r1
 8000340:	f001 ffe4 	bl	800230c <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("                 ");
 8000344:	4628      	mov	r0, r5
 8000346:	f002 f907 	bl	8002558 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 1);
 800034a:	2101      	movs	r1, #1
 800034c:	4608      	mov	r0, r1
 800034e:	f001 ffdd 	bl	800230c <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr(outbuff);
 8000352:	a835      	add	r0, sp, #212	; 0xd4
 8000354:	f002 f900 	bl	8002558 <LCD1602A_PrintStr>

         LL_mDelay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f006 fc00 	bl	8006b60 <LL_mDelay>
         LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000360:	f001 ffe1 	bl	8002326 <LCD1602A_ClearScreen>
         LCD1602A_SetCursorPos(0, 1); //Установка курсора
 8000364:	2101      	movs	r1, #1
 8000366:	4620      	mov	r0, r4
 8000368:	f001 ffd0 	bl	800230c <LCD1602A_SetCursorPos>
         LCD1602A_PrintStr("Starting OS");
 800036c:	481e      	ldr	r0, [pc, #120]	; (80003e8 <StartDefaultTask+0x180>)
 800036e:	f002 f8f3 	bl	8002558 <LCD1602A_PrintStr>
         LCD1602A_SetCursorPos(1, 0);
 8000372:	4621      	mov	r1, r4
 8000374:	2001      	movs	r0, #1
 8000376:	f001 ffc9 	bl	800230c <LCD1602A_SetCursorPos>
         for (uint8_t i = 0; i < 16; i++) {
 800037a:	e021      	b.n	80003c0 <StartDefaultTask+0x158>
             LCD1602A_SetCursorPos(0, 1);
 800037c:	2101      	movs	r1, #1
 800037e:	2000      	movs	r0, #0
 8000380:	f001 ffc4 	bl	800230c <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Mount FAIL...");
 8000384:	4819      	ldr	r0, [pc, #100]	; (80003ec <StartDefaultTask+0x184>)
 8000386:	f002 f8e7 	bl	8002558 <LCD1602A_PrintStr>
             LCD1602A_SetCursorPos(1, 1);
 800038a:	2101      	movs	r1, #1
 800038c:	4608      	mov	r0, r1
 800038e:	f001 ffbd 	bl	800230c <LCD1602A_SetCursorPos>
             LCD1602A_PrintStr("Formatting...");
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <StartDefaultTask+0x188>)
 8000394:	f002 f8e0 	bl	8002558 <LCD1602A_PrintStr>
             err = lfs_format(&lfs, &cfg);
 8000398:	4c0e      	ldr	r4, [pc, #56]	; (80003d4 <StartDefaultTask+0x16c>)
 800039a:	4621      	mov	r1, r4
 800039c:	a817      	add	r0, sp, #92	; 0x5c
 800039e:	f00d f817 	bl	800d3d0 <lfs_format>
 80003a2:	9001      	str	r0, [sp, #4]
             err = lfs_mount(&lfs, &cfg);
 80003a4:	4621      	mov	r1, r4
 80003a6:	a817      	add	r0, sp, #92	; 0x5c
 80003a8:	f00b fafe 	bl	800b9a8 <lfs_mount>
 80003ac:	9001      	str	r0, [sp, #4]
 80003ae:	e784      	b.n	80002ba <StartDefaultTask+0x52>
             LCD1602A_PrintStr("*");
 80003b0:	4810      	ldr	r0, [pc, #64]	; (80003f4 <StartDefaultTask+0x18c>)
 80003b2:	f002 f8d1 	bl	8002558 <LCD1602A_PrintStr>
             LL_mDelay(50);
 80003b6:	2032      	movs	r0, #50	; 0x32
 80003b8:	f006 fbd2 	bl	8006b60 <LL_mDelay>
         for (uint8_t i = 0; i < 16; i++) {
 80003bc:	3401      	adds	r4, #1
 80003be:	b2e4      	uxtb	r4, r4
 80003c0:	2c0f      	cmp	r4, #15
 80003c2:	d9f5      	bls.n	80003b0 <StartDefaultTask+0x148>
         }


         osThreadResumeAll();
 80003c4:	f007 ff99 	bl	80082fa <osThreadResumeAll>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f007 feb2 	bl	8008132 <osDelay>
 80003ce:	e7fb      	b.n	80003c8 <StartDefaultTask+0x160>
 80003d0:	20005bd4 	.word	0x20005bd4
 80003d4:	0800ef44 	.word	0x0800ef44
 80003d8:	0800ee78 	.word	0x0800ee78
 80003dc:	0800ee8c 	.word	0x0800ee8c
 80003e0:	0800ee9c 	.word	0x0800ee9c
 80003e4:	0800eea8 	.word	0x0800eea8
 80003e8:	0800eeb8 	.word	0x0800eeb8
 80003ec:	0800ee58 	.word	0x0800ee58
 80003f0:	0800ee68 	.word	0x0800ee68
 80003f4:	0800eec4 	.word	0x0800eec4

080003f8 <Start_tsk_LEDx_blink>:
* @param argument: Not used
* @retval None
*/
/* Header_Start_tsk_LEDx_blink */
void Start_tsk_LEDx_blink(const void * argument)
{
 80003f8:	b538      	push	{r3, r4, r5, lr}
 80003fa:	4605      	mov	r5, r0
 80003fc:	e03d      	b.n	800047a <Start_tsk_LEDx_blink+0x82>
  /* Infinite loop */
  for(;;)
  {
      if (arg == 0)
          {
          if(osSemaphoreWait(sm_LCD_Bus_readyHandle , 0) == osOK) {
 80003fe:	2100      	movs	r1, #0
 8000400:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 8000402:	6818      	ldr	r0, [r3, #0]
 8000404:	f007 fef8 	bl	80081f8 <osSemaphoreWait>
 8000408:	b1a8      	cbz	r0, 8000436 <Start_tsk_LEDx_blink+0x3e>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
          LCD1602A_PrintStr("LED1Task_enter" + '\0');
          } osSemaphoreRelease(sm_LCD_Bus_readyHandle);
 800040a:	4c2e      	ldr	r4, [pc, #184]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 800040c:	6820      	ldr	r0, [r4, #0]
 800040e:	f007 ff2d 	bl	800826c <osSemaphoreRelease>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000412:	4a2d      	ldr	r2, [pc, #180]	; (80004c8 <Start_tsk_LEDx_blink+0xd0>)
 8000414:	68d3      	ldr	r3, [r2, #12]
 8000416:	f083 0302 	eor.w	r3, r3, #2
 800041a:	60d3      	str	r3, [r2, #12]
          //uint8_t flag1 = 1;
          LED1_TOGGLE();
          //flag1 = 0;
          osDelay(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f007 fe88 	bl	8008132 <osDelay>
          if(osSemaphoreWait(sm_LCD_Bus_readyHandle , 0) == osOK) {
 8000422:	2100      	movs	r1, #0
 8000424:	6820      	ldr	r0, [r4, #0]
 8000426:	f007 fee7 	bl	80081f8 <osSemaphoreWait>
 800042a:	b170      	cbz	r0, 800044a <Start_tsk_LEDx_blink+0x52>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
          LCD1602A_PrintStr("LED1Task_exit" + '\0');
          } osSemaphoreRelease(sm_LCD_Bus_readyHandle);
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	f007 ff1c 	bl	800826c <osSemaphoreRelease>
 8000434:	e021      	b.n	800047a <Start_tsk_LEDx_blink+0x82>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 8000436:	f001 ff76 	bl	8002326 <LCD1602A_ClearScreen>
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
 800043a:	2101      	movs	r1, #1
 800043c:	2000      	movs	r0, #0
 800043e:	f001 ff65 	bl	800230c <LCD1602A_SetCursorPos>
          LCD1602A_PrintStr("LED1Task_enter" + '\0');
 8000442:	4822      	ldr	r0, [pc, #136]	; (80004cc <Start_tsk_LEDx_blink+0xd4>)
 8000444:	f002 f888 	bl	8002558 <LCD1602A_PrintStr>
 8000448:	e7df      	b.n	800040a <Start_tsk_LEDx_blink+0x12>
          LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 800044a:	f001 ff6c 	bl	8002326 <LCD1602A_ClearScreen>
          LCD1602A_SetCursorPos(0, 1); //Установка курсора
 800044e:	2101      	movs	r1, #1
 8000450:	2000      	movs	r0, #0
 8000452:	f001 ff5b 	bl	800230c <LCD1602A_SetCursorPos>
          LCD1602A_PrintStr("LED1Task_exit" + '\0');
 8000456:	481e      	ldr	r0, [pc, #120]	; (80004d0 <Start_tsk_LEDx_blink+0xd8>)
 8000458:	f002 f87e 	bl	8002558 <LCD1602A_PrintStr>
 800045c:	e7e6      	b.n	800042c <Start_tsk_LEDx_blink+0x34>
          //taskYIELD();
          } else
                {
              if(osSemaphoreWait(sm_LCD_Bus_readyHandle, 0) == osOK) {
                               LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 800045e:	f001 ff62 	bl	8002326 <LCD1602A_ClearScreen>
                               LCD1602A_SetCursorPos(1, 1); //Установка курсора
 8000462:	2101      	movs	r1, #1
 8000464:	4608      	mov	r0, r1
 8000466:	f001 ff51 	bl	800230c <LCD1602A_SetCursorPos>
                               LCD1602A_PrintStr("LED2Task_enter" + '\0');
 800046a:	481a      	ldr	r0, [pc, #104]	; (80004d4 <Start_tsk_LEDx_blink+0xdc>)
 800046c:	f002 f874 	bl	8002558 <LCD1602A_PrintStr>
 8000470:	e00c      	b.n	800048c <Start_tsk_LEDx_blink+0x94>
                 osDelay(230);
                 if(osSemaphoreWait(sm_LCD_Bus_readyHandle, 0) == osOK) {
                 LCD1602A_ClearScreen(); //Очистка дисплея от мусора
                 LCD1602A_SetCursorPos(1, 1); //Установка курсора
                 LCD1602A_PrintStr("LED2Task_exit" + '\0');
                 } osSemaphoreRelease(sm_LCD_Bus_readyHandle);
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 8000474:	6818      	ldr	r0, [r3, #0]
 8000476:	f007 fef9 	bl	800826c <osSemaphoreRelease>
      if (arg == 0)
 800047a:	2d00      	cmp	r5, #0
 800047c:	d0bf      	beq.n	80003fe <Start_tsk_LEDx_blink+0x6>
              if(osSemaphoreWait(sm_LCD_Bus_readyHandle, 0) == osOK) {
 800047e:	2100      	movs	r1, #0
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	f007 feb8 	bl	80081f8 <osSemaphoreWait>
 8000488:	2800      	cmp	r0, #0
 800048a:	d0e8      	beq.n	800045e <Start_tsk_LEDx_blink+0x66>
                               } osSemaphoreRelease(sm_LCD_Bus_readyHandle);
 800048c:	4c0d      	ldr	r4, [pc, #52]	; (80004c4 <Start_tsk_LEDx_blink+0xcc>)
 800048e:	6820      	ldr	r0, [r4, #0]
 8000490:	f007 feec 	bl	800826c <osSemaphoreRelease>
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <Start_tsk_LEDx_blink+0xd0>)
 8000496:	68d3      	ldr	r3, [r2, #12]
 8000498:	f083 0304 	eor.w	r3, r3, #4
 800049c:	60d3      	str	r3, [r2, #12]
                 osDelay(230);
 800049e:	20e6      	movs	r0, #230	; 0xe6
 80004a0:	f007 fe47 	bl	8008132 <osDelay>
                 if(osSemaphoreWait(sm_LCD_Bus_readyHandle, 0) == osOK) {
 80004a4:	2100      	movs	r1, #0
 80004a6:	6820      	ldr	r0, [r4, #0]
 80004a8:	f007 fea6 	bl	80081f8 <osSemaphoreWait>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d1e0      	bne.n	8000472 <Start_tsk_LEDx_blink+0x7a>
                 LCD1602A_ClearScreen(); //Очистка дисплея от мусора
 80004b0:	f001 ff39 	bl	8002326 <LCD1602A_ClearScreen>
                 LCD1602A_SetCursorPos(1, 1); //Установка курсора
 80004b4:	2101      	movs	r1, #1
 80004b6:	4608      	mov	r0, r1
 80004b8:	f001 ff28 	bl	800230c <LCD1602A_SetCursorPos>
                 LCD1602A_PrintStr("LED2Task_exit" + '\0');
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <Start_tsk_LEDx_blink+0xe0>)
 80004be:	f002 f84b 	bl	8002558 <LCD1602A_PrintStr>
 80004c2:	e7d6      	b.n	8000472 <Start_tsk_LEDx_blink+0x7a>
 80004c4:	20003ecc 	.word	0x20003ecc
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	0800eec8 	.word	0x0800eec8
 80004d0:	0800eed8 	.word	0x0800eed8
 80004d4:	0800eee8 	.word	0x0800eee8
 80004d8:	0800eef8 	.word	0x0800eef8

080004dc <Start_SpiNand_wrkr>:
* @param argument: Not used
* @retval None
*/
/* Header_Start_SpiNand_wrkr */
void Start_SpiNand_wrkr(const void * argument)
{
 80004dc:	e7fe      	b.n	80004dc <Start_SpiNand_wrkr>
	...

080004e0 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e0:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_CRC_Init+0x1c>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80004f4:	9b01      	ldr	r3, [sp, #4]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);

}
 80004f6:	b002      	add	sp, #8
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000500:	b500      	push	{lr}
 8000502:	b083      	sub	sp, #12
  SET_BIT(RCC->AHBENR, Periphs);
 8000504:	4bb2      	ldr	r3, [pc, #712]	; (80007d0 <MX_DMA_Init+0x2d0>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	f042 0202 	orr.w	r2, r2, #2
 800050c:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	f002 0202 	and.w	r2, r2, #2
 8000514:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000516:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000528:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800052a:	4baa      	ldr	r3, [pc, #680]	; (80007d4 <MX_DMA_Init+0x2d4>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000532:	f022 0210 	bic.w	r2, r2, #16
 8000536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800053a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000546:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f022 0220 	bic.w	r2, r2, #32
 800054e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000556:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800055e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800056a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000576:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000582:	f022 0210 	bic.w	r2, r2, #16
 8000586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800058a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000592:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000596:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f022 0220 	bic.w	r2, r2, #32
 800059e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80005b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80005be:	601a      	str	r2, [r3, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b85      	ldr	r3, [pc, #532]	; (80007d8 <MX_DMA_Init+0x2d8>)
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c8:	f1c2 0307 	rsb	r3, r2, #7
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	bf28      	it	cs
 80005d0:	2304      	movcs	r3, #4
 80005d2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d4:	1d13      	adds	r3, r2, #4
 80005d6:	2b06      	cmp	r3, #6
 80005d8:	f240 80e9 	bls.w	80007ae <MX_DMA_Init+0x2ae>
 80005dc:	3a03      	subs	r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	408b      	lsls	r3, r1
 80005e4:	43db      	mvns	r3, r3
 80005e6:	f003 0305 	and.w	r3, r3, #5
 80005ea:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4a7a      	ldr	r2, [pc, #488]	; (80007dc <MX_DMA_Init+0x2dc>)
 80005f2:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005fa:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b76      	ldr	r3, [pc, #472]	; (80007d8 <MX_DMA_Init+0x2d8>)
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	f1c2 0307 	rsb	r3, r2, #7
 8000608:	2b04      	cmp	r3, #4
 800060a:	bf28      	it	cs
 800060c:	2304      	movcs	r3, #4
 800060e:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000610:	1d13      	adds	r3, r2, #4
 8000612:	2b06      	cmp	r3, #6
 8000614:	f240 80cd 	bls.w	80007b2 <MX_DMA_Init+0x2b2>
 8000618:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	408b      	lsls	r3, r1
 8000620:	43db      	mvns	r3, r3
 8000622:	f003 0305 	and.w	r3, r3, #5
 8000626:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4a6b      	ldr	r2, [pc, #428]	; (80007dc <MX_DMA_Init+0x2dc>)
 800062e:	f882 330c 	strb.w	r3, [r2, #780]	; 0x30c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b67      	ldr	r3, [pc, #412]	; (80007d8 <MX_DMA_Init+0x2d8>)
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	f1c2 0307 	rsb	r3, r2, #7
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
 800064a:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064c:	1d13      	adds	r3, r2, #4
 800064e:	2b06      	cmp	r3, #6
 8000650:	f240 80b1 	bls.w	80007b6 <MX_DMA_Init+0x2b6>
 8000654:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	408b      	lsls	r3, r1
 800065c:	43db      	mvns	r3, r3
 800065e:	f003 0305 	and.w	r3, r3, #5
 8000662:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4a5c      	ldr	r2, [pc, #368]	; (80007dc <MX_DMA_Init+0x2dc>)
 800066a:	f882 330d 	strb.w	r3, [r2, #781]	; 0x30d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <MX_DMA_Init+0x2d8>)
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	f1c2 0307 	rsb	r3, r2, #7
 8000680:	2b04      	cmp	r3, #4
 8000682:	bf28      	it	cs
 8000684:	2304      	movcs	r3, #4
 8000686:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	1d13      	adds	r3, r2, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	f240 8095 	bls.w	80007ba <MX_DMA_Init+0x2ba>
 8000690:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	408b      	lsls	r3, r1
 8000698:	43db      	mvns	r3, r3
 800069a:	f003 0305 	and.w	r3, r3, #5
 800069e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4a4d      	ldr	r2, [pc, #308]	; (80007dc <MX_DMA_Init+0x2dc>)
 80006a6:	f882 330e 	strb.w	r3, [r2, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b49      	ldr	r3, [pc, #292]	; (80007d8 <MX_DMA_Init+0x2d8>)
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	f1c2 0307 	rsb	r3, r2, #7
 80006bc:	2b04      	cmp	r3, #4
 80006be:	bf28      	it	cs
 80006c0:	2304      	movcs	r3, #4
 80006c2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c4:	1d13      	adds	r3, r2, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d979      	bls.n	80007be <MX_DMA_Init+0x2be>
 80006ca:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	408b      	lsls	r3, r1
 80006d2:	43db      	mvns	r3, r3
 80006d4:	f003 0305 	and.w	r3, r3, #5
 80006d8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4a3f      	ldr	r2, [pc, #252]	; (80007dc <MX_DMA_Init+0x2dc>)
 80006e0:	f882 330f 	strb.w	r3, [r2, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e8:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ea:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <MX_DMA_Init+0x2d8>)
 80006ec:	68da      	ldr	r2, [r3, #12]
 80006ee:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f2:	f1c2 0307 	rsb	r3, r2, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	1d13      	adds	r3, r2, #4
 8000700:	2b06      	cmp	r3, #6
 8000702:	d95e      	bls.n	80007c2 <MX_DMA_Init+0x2c2>
 8000704:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	408b      	lsls	r3, r1
 800070c:	43db      	mvns	r3, r3
 800070e:	f003 0305 	and.w	r3, r3, #5
 8000712:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4a30      	ldr	r2, [pc, #192]	; (80007dc <MX_DMA_Init+0x2dc>)
 800071a:	f882 3310 	strb.w	r3, [r2, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800071e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000722:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_DMA_Init+0x2d8>)
 8000726:	68da      	ldr	r2, [r3, #12]
 8000728:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	f1c2 0307 	rsb	r3, r2, #7
 8000730:	2b04      	cmp	r3, #4
 8000732:	bf28      	it	cs
 8000734:	2304      	movcs	r3, #4
 8000736:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000738:	1d13      	adds	r3, r2, #4
 800073a:	2b06      	cmp	r3, #6
 800073c:	d943      	bls.n	80007c6 <MX_DMA_Init+0x2c6>
 800073e:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	408b      	lsls	r3, r1
 8000746:	43db      	mvns	r3, r3
 8000748:	f003 0305 	and.w	r3, r3, #5
 800074c:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_DMA_Init+0x2dc>)
 8000754:	f882 3311 	strb.w	r3, [r2, #785]	; 0x311
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800075c:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_DMA_Init+0x2d8>)
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000766:	f1c2 0307 	rsb	r3, r2, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	1d13      	adds	r3, r2, #4
 8000774:	2b06      	cmp	r3, #6
 8000776:	d928      	bls.n	80007ca <MX_DMA_Init+0x2ca>
 8000778:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	408b      	lsls	r3, r1
 8000780:	43db      	mvns	r3, r3
 8000782:	f003 0305 	and.w	r3, r3, #5
 8000786:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_DMA_Init+0x2dc>)
 800078e:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000796:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	203b      	movs	r0, #59	; 0x3b
 800079e:	f001 ff57 	bl	8002650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80007a2:	203b      	movs	r0, #59	; 0x3b
 80007a4:	f001 ff9a 	bl	80026dc <HAL_NVIC_EnableIRQ>

}
 80007a8:	b003      	add	sp, #12
 80007aa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	2200      	movs	r2, #0
 80007b0:	e715      	b.n	80005de <MX_DMA_Init+0xde>
 80007b2:	2200      	movs	r2, #0
 80007b4:	e731      	b.n	800061a <MX_DMA_Init+0x11a>
 80007b6:	2200      	movs	r2, #0
 80007b8:	e74d      	b.n	8000656 <MX_DMA_Init+0x156>
 80007ba:	2200      	movs	r2, #0
 80007bc:	e769      	b.n	8000692 <MX_DMA_Init+0x192>
 80007be:	2200      	movs	r2, #0
 80007c0:	e784      	b.n	80006cc <MX_DMA_Init+0x1cc>
 80007c2:	2200      	movs	r2, #0
 80007c4:	e79f      	b.n	8000706 <MX_DMA_Init+0x206>
 80007c6:	2200      	movs	r2, #0
 80007c8:	e7ba      	b.n	8000740 <MX_DMA_Init+0x240>
 80007ca:	2200      	movs	r2, #0
 80007cc:	e7d5      	b.n	800077a <MX_DMA_Init+0x27a>
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40020008 	.word	0x40020008
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <tmTestTimer_clbck>:
void tmTestTimer_clbck(const void * argument)
{
  /* USER CODE BEGIN tmTestTimer_clbck */

  /* USER CODE END tmTestTimer_clbck */
}
 80007e0:	4770      	bx	lr

080007e2 <configureTimerForRunTimeStats>:
}
 80007e2:	4770      	bx	lr

080007e4 <getRunTimeCounterValue>:
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	4770      	bx	lr

080007e8 <vApplicationMallocFailedHook>:
}
 80007e8:	4770      	bx	lr
	...

080007ec <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer   = &xIdleTaskTCBBuffer;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <vApplicationGetIdleTaskMemory+0x10>)
 80007ee:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <vApplicationGetIdleTaskMemory+0x14>)
 80007f2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = configMINIMAL_STACK_SIZE;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	4770      	bx	lr
 80007fc:	200005a4 	.word	0x200005a4
 8000800:	200001a4 	.word	0x200001a4

08000804 <vApplicationGetTimerTaskMemory>:
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <vApplicationGetTimerTaskMemory+0x10>)
 8000806:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <vApplicationGetTimerTaskMemory+0x14>)
 800080a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800080c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000810:	6013      	str	r3, [r2, #0]
}
 8000812:	4770      	bx	lr
 8000814:	20000e08 	.word	0x20000e08
 8000818:	20000608 	.word	0x20000608

0800081c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	b0b1      	sub	sp, #196	; 0xc4
  osMutexStaticDef(mt_SPI1_free, &mt_SPI1_freeControlBlock);
 8000820:	2500      	movs	r5, #0
 8000822:	952e      	str	r5, [sp, #184]	; 0xb8
 8000824:	4b46      	ldr	r3, [pc, #280]	; (8000940 <MX_FREERTOS_Init+0x124>)
 8000826:	932f      	str	r3, [sp, #188]	; 0xbc
  mt_SPI1_freeHandle = osMutexCreate(osMutex(mt_SPI1_free));
 8000828:	a82e      	add	r0, sp, #184	; 0xb8
 800082a:	f007 fcad 	bl	8008188 <osMutexCreate>
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <MX_FREERTOS_Init+0x128>)
 8000830:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_SPI2_free, &mt_SPI2_freeControlBlock);
 8000832:	952c      	str	r5, [sp, #176]	; 0xb0
 8000834:	4b44      	ldr	r3, [pc, #272]	; (8000948 <MX_FREERTOS_Init+0x12c>)
 8000836:	932d      	str	r3, [sp, #180]	; 0xb4
  mt_SPI2_freeHandle = osMutexCreate(osMutex(mt_SPI2_free));
 8000838:	a82c      	add	r0, sp, #176	; 0xb0
 800083a:	f007 fca5 	bl	8008188 <osMutexCreate>
 800083e:	4b43      	ldr	r3, [pc, #268]	; (800094c <MX_FREERTOS_Init+0x130>)
 8000840:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_LCD_free, &mt_LCD_freeControlBlock);
 8000842:	952a      	str	r5, [sp, #168]	; 0xa8
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_FREERTOS_Init+0x134>)
 8000846:	932b      	str	r3, [sp, #172]	; 0xac
  mt_LCD_freeHandle = osMutexCreate(osMutex(mt_LCD_free));
 8000848:	a82a      	add	r0, sp, #168	; 0xa8
 800084a:	f007 fc9d 	bl	8008188 <osMutexCreate>
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <MX_FREERTOS_Init+0x138>)
 8000850:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART1_free, &mt_UART1_freeControlBlock);
 8000852:	9528      	str	r5, [sp, #160]	; 0xa0
 8000854:	4b40      	ldr	r3, [pc, #256]	; (8000958 <MX_FREERTOS_Init+0x13c>)
 8000856:	9329      	str	r3, [sp, #164]	; 0xa4
  mt_UART1_freeHandle = osMutexCreate(osMutex(mt_UART1_free));
 8000858:	a828      	add	r0, sp, #160	; 0xa0
 800085a:	f007 fc95 	bl	8008188 <osMutexCreate>
 800085e:	4b3f      	ldr	r3, [pc, #252]	; (800095c <MX_FREERTOS_Init+0x140>)
 8000860:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_UART2_free, &mt_UART2_freeControlBlock);
 8000862:	9526      	str	r5, [sp, #152]	; 0x98
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <MX_FREERTOS_Init+0x144>)
 8000866:	9327      	str	r3, [sp, #156]	; 0x9c
  mt_UART2_freeHandle = osMutexCreate(osMutex(mt_UART2_free));
 8000868:	a826      	add	r0, sp, #152	; 0x98
 800086a:	f007 fc8d 	bl	8008188 <osMutexCreate>
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <MX_FREERTOS_Init+0x148>)
 8000870:	6018      	str	r0, [r3, #0]
  osMutexStaticDef(mt_NAND_FLASH, &mt_NAND_FLASHControlBlock);
 8000872:	9524      	str	r5, [sp, #144]	; 0x90
 8000874:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_FREERTOS_Init+0x14c>)
 8000876:	9325      	str	r3, [sp, #148]	; 0x94
  mt_NAND_FLASHHandle = osMutexCreate(osMutex(mt_NAND_FLASH));
 8000878:	a824      	add	r0, sp, #144	; 0x90
 800087a:	f007 fc85 	bl	8008188 <osMutexCreate>
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <MX_FREERTOS_Init+0x150>)
 8000880:	6018      	str	r0, [r3, #0]
  osSemaphoreStaticDef(sm_LCD_Bus_ready, &sm_LCD_Bus_readyControlBlock);
 8000882:	9522      	str	r5, [sp, #136]	; 0x88
 8000884:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <MX_FREERTOS_Init+0x154>)
 8000886:	9323      	str	r3, [sp, #140]	; 0x8c
  sm_LCD_Bus_readyHandle = osSemaphoreCreate(osSemaphore(sm_LCD_Bus_ready), 1);
 8000888:	2101      	movs	r1, #1
 800088a:	a822      	add	r0, sp, #136	; 0x88
 800088c:	f007 fc87 	bl	800819e <osSemaphoreCreate>
 8000890:	4b38      	ldr	r3, [pc, #224]	; (8000974 <MX_FREERTOS_Init+0x158>)
 8000892:	6018      	str	r0, [r3, #0]
  osTimerStaticDef(tmTestTimer, tmTestTimer_clbck, &tmTestTimerControlBlock);
 8000894:	4c38      	ldr	r4, [pc, #224]	; (8000978 <MX_FREERTOS_Init+0x15c>)
 8000896:	ab20      	add	r3, sp, #128	; 0x80
 8000898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
  tmTestTimerHandle = osTimerCreate(osTimer(tmTestTimer), osTimerPeriodic, NULL);
 80008a0:	462a      	mov	r2, r5
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 fc4d 	bl	8008144 <osTimerCreate>
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_FREERTOS_Init+0x160>)
 80008ac:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(msgto_SpiNand_wrkr, 16, uint8_t, msgto_SpiNand_wrkrBuffer, &msgto_SpiNand_wrkrControlBlock);
 80008ae:	ae1c      	add	r6, sp, #112	; 0x70
 80008b0:	f104 0308 	add.w	r3, r4, #8
 80008b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  msgto_SpiNand_wrkrHandle = osMessageCreate(osMessageQ(msgto_SpiNand_wrkr), NULL);
 80008ba:	4629      	mov	r1, r5
 80008bc:	4630      	mov	r0, r6
 80008be:	f007 fd03 	bl	80082c8 <osMessageCreate>
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_FREERTOS_Init+0x164>)
 80008c4:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80008c6:	ae15      	add	r6, sp, #84	; 0x54
 80008c8:	f104 0718 	add.w	r7, r4, #24
 80008cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80008ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008d0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80008d4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008d8:	4629      	mov	r1, r5
 80008da:	a815      	add	r0, sp, #84	; 0x54
 80008dc:	f007 fbf3 	bl	80080c6 <osThreadCreate>
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_FREERTOS_Init+0x168>)
 80008e2:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tskSpiNand_wrkr, Start_SpiNand_wrkr, osPriorityNormal, 0, 1024, tskSpiNand_wrkrBuffer, &tskSpiNand_wrkrControlBlock);
 80008e4:	ae0e      	add	r6, sp, #56	; 0x38
 80008e6:	f104 0734 	add.w	r7, r4, #52	; 0x34
 80008ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80008ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80008f2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tskSpiNand_wrkrHandle = osThreadCreate(osThread(tskSpiNand_wrkr), NULL);
 80008f6:	4629      	mov	r1, r5
 80008f8:	a80e      	add	r0, sp, #56	; 0x38
 80008fa:	f007 fbe4 	bl	80080c6 <osThreadCreate>
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_FREERTOS_Init+0x16c>)
 8000900:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED1_blink, Start_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED1_blinkBuffer, &tsk_LED1_blinkControlBlock);
 8000902:	ae07      	add	r6, sp, #28
 8000904:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8000908:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800090a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800090c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000910:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tsk_LED1_blinkHandle = osThreadCreate(osThread(tsk_LED1_blink), NULL);
 8000914:	4629      	mov	r1, r5
 8000916:	a807      	add	r0, sp, #28
 8000918:	f007 fbd5 	bl	80080c6 <osThreadCreate>
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_FREERTOS_Init+0x170>)
 800091e:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(tsk_LED2_blink, Start_tsk_LEDx_blink, osPriorityNormal, 0, 256, tsk_LED2_blinkBuffer, &tsk_LED2_blinkControlBlock);
 8000920:	466d      	mov	r5, sp
 8000922:	346c      	adds	r4, #108	; 0x6c
 8000924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000928:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800092c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  tsk_LED2_blinkHandle = osThreadCreate(osThread(tsk_LED2_blink), (void*) 1);
 8000930:	2101      	movs	r1, #1
 8000932:	4668      	mov	r0, sp
 8000934:	f007 fbc7 	bl	80080c6 <osThreadCreate>
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_FREERTOS_Init+0x174>)
 800093a:	6018      	str	r0, [r3, #0]
}
 800093c:	b031      	add	sp, #196	; 0xc4
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000940:	20004378 	.word	0x20004378
 8000944:	20003ed0 	.word	0x20003ed0
 8000948:	200054e4 	.word	0x200054e4
 800094c:	2000568c 	.word	0x2000568c
 8000950:	20003ed8 	.word	0x20003ed8
 8000954:	20005690 	.word	0x20005690
 8000958:	200055a0 	.word	0x200055a0
 800095c:	20005a98 	.word	0x20005a98
 8000960:	20004328 	.word	0x20004328
 8000964:	20005548 	.word	0x20005548
 8000968:	20005a9c 	.word	0x20005a9c
 800096c:	20005544 	.word	0x20005544
 8000970:	2000554c 	.word	0x2000554c
 8000974:	20003ecc 	.word	0x20003ecc
 8000978:	0800edc8 	.word	0x0800edc8
 800097c:	2000442c 	.word	0x2000442c
 8000980:	20005624 	.word	0x20005624
 8000984:	20003ed4 	.word	0x20003ed4
 8000988:	2000559c 	.word	0x2000559c
 800098c:	20005a94 	.word	0x20005a94
 8000990:	200055f0 	.word	0x200055f0

08000994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000998:	b08d      	sub	sp, #52	; 0x34

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800099a:	2400      	movs	r4, #0
 800099c:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	9405      	str	r4, [sp, #20]
 80009a0:	9406      	str	r4, [sp, #24]
 80009a2:	9407      	str	r4, [sp, #28]
 80009a4:	9408      	str	r4, [sp, #32]
 80009a6:	9409      	str	r4, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a8:	4b7a      	ldr	r3, [pc, #488]	; (8000b94 <MX_GPIO_Init+0x200>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	f042 0210 	orr.w	r2, r2, #16
 80009b0:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009b2:	699a      	ldr	r2, [r3, #24]
 80009b4:	f002 0210 	and.w	r2, r2, #16
 80009b8:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80009ba:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	f042 0220 	orr.w	r2, r2, #32
 80009c2:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	f002 0220 	and.w	r2, r2, #32
 80009ca:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80009cc:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009ce:	699a      	ldr	r2, [r3, #24]
 80009d0:	f042 0204 	orr.w	r2, r2, #4
 80009d4:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	f002 0204 	and.w	r2, r2, #4
 80009dc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80009de:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	f042 0208 	orr.w	r2, r2, #8
 80009e6:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009f0:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80009f2:	4f69      	ldr	r7, [pc, #420]	; (8000b98 <MX_GPIO_Init+0x204>)
 80009f4:	f248 0303 	movw	r3, #32771	; 0x8003
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8000bb4 <MX_GPIO_Init+0x220>
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	f8c8 3014 	str.w	r3, [r8, #20]
 8000a04:	4e65      	ldr	r6, [pc, #404]	; (8000b9c <MX_GPIO_Init+0x208>)
 8000a06:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8000a0a:	6173      	str	r3, [r6, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	2350      	movs	r3, #80	; 0x50
 8000a12:	f8c8 3010 	str.w	r3, [r8, #16]
 8000a16:	f04f 0902 	mov.w	r9, #2
 8000a1a:	f8c6 9010 	str.w	r9, [r6, #16]
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000a1e:	4a60      	ldr	r2, [pc, #384]	; (8000ba0 <MX_GPIO_Init+0x20c>)
 8000a20:	6891      	ldr	r1, [r2, #8]
 8000a22:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a2a:	fa93 f3a3 	rbit	r3, r3
 8000a2e:	fab3 f383 	clz	r3, r3
 8000a32:	fa09 f303 	lsl.w	r3, r9, r3
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6093      	str	r3, [r2, #8]
 8000a3a:	6953      	ldr	r3, [r2, #20]
 8000a3c:	f023 030f 	bic.w	r3, r3, #15
 8000a40:	f04f 0a0f 	mov.w	sl, #15
 8000a44:	fa9a f1aa 	rbit	r1, sl
 8000a48:	fab1 f181 	clz	r1, r1
 8000a4c:	2501      	movs	r5, #1
 8000a4e:	fa05 f101 	lsl.w	r1, r5, r1
 8000a52:	430b      	orrs	r3, r1
 8000a54:	6153      	str	r3, [r2, #20]

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000a56:	f04f 0b08 	mov.w	fp, #8
 8000a5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a5e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a62:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a66:	a80a      	add	r0, sp, #40	; 0x28
 8000a68:	f004 f8e2 	bl	8004c30 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a72:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000a76:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a7a:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a7e:	a80a      	add	r0, sp, #40	; 0x28
 8000a80:	f004 f8d6 	bl	8004c30 <LL_EXTI_Init>
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000a84:	f8d8 1000 	ldr.w	r1, [r8]
 8000a88:	f640 0308 	movw	r3, #2056	; 0x808
 8000a8c:	fa93 f2a3 	rbit	r2, r3
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	fa02 f209 	lsl.w	r2, r2, r9
 8000a98:	fa0a f202 	lsl.w	r2, sl, r2
 8000a9c:	ea21 0202 	bic.w	r2, r1, r2
 8000aa0:	fa93 f3a3 	rbit	r3, r3
 8000aa4:	fab3 f383 	clz	r3, r3
 8000aa8:	fa03 f309 	lsl.w	r3, r3, r9
 8000aac:	2104      	movs	r1, #4
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	f8c8 3000 	str.w	r3, [r8]
 8000ab8:	6872      	ldr	r2, [r6, #4]
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x210>)
 8000abc:	fa93 f0a3 	rbit	r0, r3
 8000ac0:	fab0 f080 	clz	r0, r0
 8000ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8000ac8:	fa0a fa00 	lsl.w	sl, sl, r0
 8000acc:	ea22 020a 	bic.w	r2, r2, sl
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	fa03 f309 	lsl.w	r3, r3, r9
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6073      	str	r3, [r6, #4]

  /**/
  LL_GPIO_SetPinMode(NRF24_IRQ_GPIO_Port, NRF24_IRQ_Pin, LL_GPIO_MODE_FLOATING);

  /**/
  GPIO_InitStruct.Pin = E32_M0_Pin|E32_M1_Pin;
 8000ae4:	f240 3303 	movw	r3, #771	; 0x303
 8000ae8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aec:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000af0:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	a905      	add	r1, sp, #20
 8000af4:	4638      	mov	r0, r7
 8000af6:	f004 f929 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_DSCNT_Pin;
 8000afa:	f241 0310 	movw	r3, #4112	; 0x1010
 8000afe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000b02:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b04:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(USB_DSCNT_GPIO_Port, &GPIO_InitStruct);
 8000b06:	a905      	add	r1, sp, #20
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f004 f91f 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FLASH_CSN_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8000b0e:	f24d 03d0 	movw	r3, #53456	; 0xd0d0
 8000b12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b14:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b16:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b1a:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	a905      	add	r1, sp, #20
 8000b1e:	4640      	mov	r0, r8
 8000b20:	f004 f914 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRF24_PWR_EN_Pin;
 8000b24:	f242 0320 	movw	r3, #8224	; 0x2020
 8000b28:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b2a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b2c:	f04f 0a03 	mov.w	sl, #3
 8000b30:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b34:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(NRF24_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	a905      	add	r1, sp, #20
 8000b38:	4640      	mov	r0, r8
 8000b3a:	f004 f907 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = E32_PWR_EN_Pin|LED1_Pin|LED2_Pin;
 8000b3e:	f240 7307 	movw	r3, #1799	; 0x707
 8000b42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b46:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b4a:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	a905      	add	r1, sp, #20
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f004 f8fc 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDIO_SW_IN_Pin;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x214>)
 8000b56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b58:	f8cd b018 	str.w	fp, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b5c:	9509      	str	r5, [sp, #36]	; 0x24
  LL_GPIO_Init(SDIO_SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	a905      	add	r1, sp, #20
 8000b60:	4638      	mov	r0, r7
 8000b62:	f004 f8f3 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RW_Pin;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_GPIO_Init+0x218>)
 8000b68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b6a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b6c:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b70:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8000b72:	a905      	add	r1, sp, #20
 8000b74:	4638      	mov	r0, r7
 8000b76:	f004 f8e9 	bl	8004d4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin 
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_GPIO_Init+0x21c>)
 8000b7c:	9305      	str	r3, [sp, #20]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b7e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b80:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b84:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	a905      	add	r1, sp, #20
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f004 f8df 	bl	8004d4c <LL_GPIO_Init>

}
 8000b8e:	b00d      	add	sp, #52	; 0x34
 8000b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	04100010 	.word	0x04100010
 8000ba8:	04010001 	.word	0x04010001
 8000bac:	04800080 	.word	0x04800080
 8000bb0:	0403f0f3 	.word	0x0403f0f3
 8000bb4:	40011000 	.word	0x40011000

08000bb8 <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	b08f      	sub	sp, #60	; 0x3c
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9408      	str	r4, [sp, #32]
 8000bc0:	9409      	str	r4, [sp, #36]	; 0x24
 8000bc2:	940a      	str	r4, [sp, #40]	; 0x28
 8000bc4:	940b      	str	r4, [sp, #44]	; 0x2c
 8000bc6:	940c      	str	r4, [sp, #48]	; 0x30
 8000bc8:	940d      	str	r4, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bcc:	4d20      	ldr	r5, [pc, #128]	; (8000c50 <MX_I2C2_Init+0x98>)
 8000bce:	69ab      	ldr	r3, [r5, #24]
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd6:	69ab      	ldr	r3, [r5, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000bde:	9b02      	ldr	r3, [sp, #8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
  /**I2C2 GPIO Configuration  
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_I2C2_Init+0x9c>)
 8000be2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000be4:	2309      	movs	r3, #9
 8000be6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000bec:	2304      	movs	r3, #4
 8000bee:	9306      	str	r3, [sp, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	a903      	add	r1, sp, #12
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <MX_I2C2_Init+0xa0>)
 8000bf4:	f004 f8aa 	bl	8004d4c <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bf8:	69eb      	ldr	r3, [r5, #28]
 8000bfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bfe:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c00:	69eb      	ldr	r3, [r5, #28]
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c06:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c08:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000c0a:	f5a5 35dc 	sub.w	r5, r5, #112640	; 0x1b800
 8000c0e:	68eb      	ldr	r3, [r5, #12]
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000c16:	682b      	ldr	r3, [r5, #0]
 8000c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c1c:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c24:	602b      	str	r3, [r5, #0]
  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
  LL_I2C_DisableGeneralCall(I2C2);
  LL_I2C_EnableClockStretching(I2C2);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000c26:	9408      	str	r4, [sp, #32]
  I2C_InitStruct.ClockSpeed = 400000;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_I2C2_Init+0xa4>)
 8000c2a:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000c2c:	940a      	str	r4, [sp, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000c2e:	940b      	str	r4, [sp, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c3a:	930d      	str	r3, [sp, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000c3c:	a908      	add	r1, sp, #32
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f004 f958 	bl	8004ef4 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000c44:	68eb      	ldr	r3, [r5, #12]
 8000c46:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000c4a:	60eb      	str	r3, [r5, #12]
  LL_I2C_SetOwnAddress2(I2C2, 0);

}
 8000c4c:	b00f      	add	sp, #60	; 0x3c
 8000c4e:	bd30      	pop	{r4, r5, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	040c000c 	.word	0x040c000c
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	00061a80 	.word	0x00061a80

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c62:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <SystemClock_Config+0xec>)
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f023 0307 	bic.w	r3, r3, #7
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c70:	6813      	ldr	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c72:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <SystemClock_Config+0xf0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
    Error_Handler();  
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c86:	d0fa      	beq.n	8000c7e <SystemClock_Config+0x1e>
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c88:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <SystemClock_Config+0xf4>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c90:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <SystemClock_Config+0xf0>)
 8000c94:	6a1a      	ldr	r2, [r3, #32]
 8000c96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c9a:	621a      	str	r2, [r3, #32]
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000c9c:	6a1a      	ldr	r2, [r3, #32]
 8000c9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ca2:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000ca4:	6a1a      	ldr	r2, [r3, #32]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	621a      	str	r2, [r3, #32]
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <SystemClock_Config+0xf0>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
  LL_RCC_ForceBackupDomainReset();
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000cb0:	f013 0f02 	tst.w	r3, #2
 8000cb4:	d0fa      	beq.n	8000cac <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <SystemClock_Config+0xf0>)
 8000cb8:	6a1a      	ldr	r2, [r3, #32]
 8000cba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cc2:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cc4:	6a1a      	ldr	r2, [r3, #32]
 8000cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cca:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000cd2:	601a      	str	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000cda:	f442 1288 	orr.w	r2, r2, #1114112	; 0x110000
 8000cde:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ce6:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <SystemClock_Config+0xf0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cf0:	d0fa      	beq.n	8000ce8 <SystemClock_Config+0x88>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <SystemClock_Config+0xf0>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cfa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d06:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000d0e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	f022 0203 	bic.w	r2, r2, #3
 8000d16:	f042 0202 	orr.w	r2, r2, #2
 8000d1a:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <SystemClock_Config+0xf0>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d1f9      	bne.n	8000d1c <SystemClock_Config+0xbc>
  {
  
  }
  LL_Init1msTick(72000000);
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <SystemClock_Config+0xf8>)
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f005 ff08 	bl	8006b40 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SystemClock_Config+0xfc>)
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6013      	str	r3, [r2, #0]
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(72000000);
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f005 ff26 	bl	8006b8c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <SystemClock_Config+0xf0>)
 8000d42:	6853      	ldr	r3, [r2, #4]
 8000d44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d48:	6053      	str	r3, [r2, #4]
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 8000d4a:	bd10      	pop	{r4, pc}
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40007000 	.word	0x40007000
 8000d58:	044aa200 	.word	0x044aa200
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <main>:
{
 8000d60:	b508      	push	{r3, lr}
  HAL_Init();
 8000d62:	f001 fc1f 	bl	80025a4 <HAL_Init>
  SystemClock_Config();
 8000d66:	f7ff ff7b 	bl	8000c60 <SystemClock_Config>
  MX_GPIO_Init();
 8000d6a:	f7ff fe13 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6e:	f7ff fbc7 	bl	8000500 <MX_DMA_Init>
  MX_SPI2_Init();
 8000d72:	f000 f979 	bl	8001068 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000d76:	f000 f865 	bl	8000e44 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8000d7a:	f000 fb45 	bl	8001408 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d7e:	f000 fc01 	bl	8001584 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d82:	f000 f8e1 	bl	8000f48 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d86:	f7ff ff17 	bl	8000bb8 <MX_I2C2_Init>
  MX_CRC_Init();
 8000d8a:	f7ff fba9 	bl	80004e0 <MX_CRC_Init>
  MX_TIM7_Init();
 8000d8e:	f000 fad3 	bl	8001338 <MX_TIM7_Init>
  MX_RTC_Init();
 8000d92:	f000 f813 	bl	8000dbc <MX_RTC_Init>
  MX_FREERTOS_Init();
 8000d96:	f7ff fd41 	bl	800081c <MX_FREERTOS_Init>
  osKernelStart();
 8000d9a:	f007 f98f 	bl	80080bc <osKernelStart>
 8000d9e:	e7fe      	b.n	8000d9e <main+0x3e>

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da2:	6802      	ldr	r2, [r0, #0]
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d000      	beq.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000daa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000dac:	f001 fc0c 	bl	80025c8 <HAL_IncTick>
}
 8000db0:	e7fb      	b.n	8000daa <HAL_TIM_PeriodElapsedCallback+0xa>
 8000db2:	bf00      	nop
 8000db4:	40001000 	.word	0x40001000

08000db8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	4770      	bx	lr

08000dba <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dba:	4770      	bx	lr

08000dbc <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8000dbc:	b530      	push	{r4, r5, lr}
 8000dbe:	b085      	sub	sp, #20
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	9402      	str	r4, [sp, #8]
 8000dc4:	9403      	str	r4, [sp, #12]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8000dc6:	f8ad 4004 	strh.w	r4, [sp, #4]
 8000dca:	f88d 4006 	strb.w	r4, [sp, #6]
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <MX_RTC_Init+0x7c>)
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_RTC_Init+0x80>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000de0:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000de2:	69da      	ldr	r2, [r3, #28]
 8000de4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000de8:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000dea:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000dec:	6a1a      	ldr	r2, [r3, #32]
 8000dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df2:	621a      	str	r2, [r3, #32]
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();

  /** Initialize RTC and set the Time and Date 
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	9302      	str	r3, [sp, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000dfa:	4d11      	ldr	r5, [pc, #68]	; (8000e40 <MX_RTC_Init+0x84>)
 8000dfc:	a902      	add	r1, sp, #8
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f004 faee 	bl	80053e0 <LL_RTC_Init>
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8000e04:	68aa      	ldr	r2, [r5, #8]
 8000e06:	f022 020f 	bic.w	r2, r2, #15
 8000e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8000e12:	68eb      	ldr	r3, [r5, #12]
 8000e14:	0c1b      	lsrs	r3, r3, #16
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	60eb      	str	r3, [r5, #12]
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
  /** Initialize RTC and set the Time and Date 
  */
  RTC_TimeStruct.Hours = 0;
 8000e1c:	f88d 4004 	strb.w	r4, [sp, #4]
  RTC_TimeStruct.Minutes = 0;
 8000e20:	f88d 4005 	strb.w	r4, [sp, #5]
  RTC_TimeStruct.Seconds = 0;
 8000e24:	f88d 4006 	strb.w	r4, [sp, #6]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 8000e28:	aa01      	add	r2, sp, #4
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f004 f9ff 	bl	8005230 <LL_RTC_TIME_Init>

}
 8000e32:	b005      	add	sp, #20
 8000e34:	bd30      	pop	{r4, r5, pc}
 8000e36:	bf00      	nop
 8000e38:	40007000 	.word	0x40007000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40002800 	.word	0x40002800

08000e44 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_SDIO_SD_Init+0x20>)
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <MX_SDIO_SD_Init+0x24>)
 8000e48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e4e:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8000e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e54:	60d9      	str	r1, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e56:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	619a      	str	r2, [r3, #24]

}
 8000e62:	4770      	bx	lr
 8000e64:	20005b50 	.word	0x20005b50
 8000e68:	40018000 	.word	0x40018000

08000e6c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	2300      	movs	r3, #0
 8000e72:	9304      	str	r3, [sp, #16]
 8000e74:	9305      	str	r3, [sp, #20]
 8000e76:	9306      	str	r3, [sp, #24]
 8000e78:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDIO)
 8000e7a:	6802      	ldr	r2, [r0, #0]
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <HAL_SD_MspInit+0xc8>)
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d001      	beq.n	8000e86 <HAL_SD_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000e82:	b008      	add	sp, #32
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
 8000e86:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e88:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	f042 0210 	orr.w	r2, r2, #16
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	f002 0210 	and.w	r2, r2, #16
 8000eac:	9202      	str	r2, [sp, #8]
 8000eae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	f042 0220 	orr.w	r2, r2, #32
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000ec2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ec6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2602      	movs	r6, #2
 8000eca:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2503      	movs	r5, #3
 8000ece:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	a904      	add	r1, sp, #16
 8000ed2:	4819      	ldr	r0, [pc, #100]	; (8000f38 <HAL_SD_MspInit+0xcc>)
 8000ed4:	f001 ff10 	bl	8002cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ede:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee0:	a904      	add	r1, sp, #16
 8000ee2:	4816      	ldr	r0, [pc, #88]	; (8000f3c <HAL_SD_MspInit+0xd0>)
 8000ee4:	f001 ff08 	bl	8002cf8 <HAL_GPIO_Init>
    hdma_sdio.Instance = DMA2_Channel4;
 8000ee8:	4815      	ldr	r0, [pc, #84]	; (8000f40 <HAL_SD_MspInit+0xd4>)
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_SD_MspInit+0xd8>)
 8000eec:	6003      	str	r3, [r0, #0]
    hdma_sdio.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	6043      	str	r3, [r0, #4]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6083      	str	r3, [r0, #8]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	60c2      	str	r2, [r0, #12]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efe:	6102      	str	r2, [r0, #16]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	6142      	str	r2, [r0, #20]
    hdma_sdio.Init.Mode = DMA_NORMAL;
 8000f06:	6183      	str	r3, [r0, #24]
    hdma_sdio.Init.Priority = DMA_PRIORITY_HIGH;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8000f0e:	f001 fbfb 	bl	8002708 <HAL_DMA_Init>
 8000f12:	b960      	cbnz	r0, 8000f2e <HAL_SD_MspInit+0xc2>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_SD_MspInit+0xd4>)
 8000f16:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000f18:	625c      	str	r4, [r3, #36]	; 0x24
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8000f1a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2031      	movs	r0, #49	; 0x31
 8000f22:	f001 fb95 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f26:	2031      	movs	r0, #49	; 0x31
 8000f28:	f001 fbd8 	bl	80026dc <HAL_NVIC_EnableIRQ>
}
 8000f2c:	e7a9      	b.n	8000e82 <HAL_SD_MspInit+0x16>
      Error_Handler();
 8000f2e:	f7ff ff43 	bl	8000db8 <Error_Handler>
 8000f32:	e7ef      	b.n	8000f14 <HAL_SD_MspInit+0xa8>
 8000f34:	40018000 	.word	0x40018000
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	20005aec 	.word	0x20005aec
 8000f44:	40020444 	.word	0x40020444

08000f48 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f48:	b530      	push	{r4, r5, lr}
 8000f4a:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f4c:	2228      	movs	r2, #40	; 0x28
 8000f4e:	2100      	movs	r1, #0
 8000f50:	a808      	add	r0, sp, #32
 8000f52:	f00c fdaf 	bl	800dab4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2400      	movs	r4, #0
 8000f58:	9406      	str	r4, [sp, #24]
 8000f5a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <MX_SPI1_Init+0x110>)
 8000f5e:	699a      	ldr	r2, [r3, #24]
 8000f60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f64:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f6c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f6e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	f042 0204 	orr.w	r2, r2, #4
 8000f76:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f80:	9b01      	ldr	r3, [sp, #4]
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = FLASH_SPI1_SCK_Pin|FLASH_SPI1_MOSI_Pin;
 8000f82:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000f86:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f88:	2309      	movs	r3, #9
 8000f8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	4d32      	ldr	r5, [pc, #200]	; (800105c <MX_SPI1_Init+0x114>)
 8000f92:	a903      	add	r1, sp, #12
 8000f94:	4628      	mov	r0, r5
 8000f96:	f003 fed9 	bl	8004d4c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FLASH_SPI1_MISO_Pin;
 8000f9a:	f244 0340 	movw	r3, #16448	; 0x4040
 8000f9e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(FLASH_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	a903      	add	r1, sp, #12
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f003 fed0 	bl	8004d4c <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_SPI1_Init+0x118>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fb4:	f022 0210 	bic.w	r2, r2, #16
 8000fb8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000fc0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f022 0220 	bic.w	r2, r2, #32
 8000fc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fe0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000fe8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000fea:	3314      	adds	r3, #20
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ff2:	f022 0210 	bic.w	r2, r2, #16
 8000ff6:	f042 0210 	orr.w	r2, r2, #16
 8000ffa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001002:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f022 0220 	bic.w	r2, r2, #32
 800100a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001012:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800101a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001022:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800102a:	601a      	str	r2, [r3, #0]

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800102c:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800102e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001032:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001034:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001036:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001038:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800103a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103e:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001040:	2308      	movs	r3, #8
 8001042:	930e      	str	r3, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001044:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001046:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 8001048:	230a      	movs	r3, #10
 800104a:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800104c:	a908      	add	r1, sp, #32
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_SPI1_Init+0x11c>)
 8001050:	f004 fe90 	bl	8005d74 <LL_SPI_Init>

}
 8001054:	b013      	add	sp, #76	; 0x4c
 8001056:	bd30      	pop	{r4, r5, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800
 8001060:	4002001c 	.word	0x4002001c
 8001064:	40013000 	.word	0x40013000

08001068 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001068:	b530      	push	{r4, r5, lr}
 800106a:	b093      	sub	sp, #76	; 0x4c
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800106c:	2228      	movs	r2, #40	; 0x28
 800106e:	2100      	movs	r1, #0
 8001070:	a808      	add	r0, sp, #32
 8001072:	f00c fd1f 	bl	800dab4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	2400      	movs	r4, #0
 8001078:	9406      	str	r4, [sp, #24]
 800107a:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_SPI2_Init+0x8c>)
 800107e:	69da      	ldr	r2, [r3, #28]
 8001080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001084:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001086:	69da      	ldr	r2, [r3, #28]
 8001088:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800108c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800108e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	f042 0208 	orr.w	r2, r2, #8
 8001096:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010a0:	9b01      	ldr	r3, [sp, #4]
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = NRF24_SPI2_SCK_Pin|NRF24_SPI2_MOSI_Pin;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_SPI2_Init+0x90>)
 80010a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010a6:	2309      	movs	r3, #9
 80010a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	4d13      	ldr	r5, [pc, #76]	; (80010fc <MX_SPI2_Init+0x94>)
 80010b0:	a903      	add	r1, sp, #12
 80010b2:	4628      	mov	r0, r5
 80010b4:	f003 fe4a 	bl	8004d4c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_SPI2_MISO_Pin;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SPI2_Init+0x98>)
 80010ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80010bc:	2304      	movs	r3, #4
 80010be:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(NRF24_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 80010c0:	a903      	add	r1, sp, #12
 80010c2:	4628      	mov	r0, r5
 80010c4:	f003 fe42 	bl	8004d4c <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010c8:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010ce:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d0:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80010d2:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80010d4:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010da:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80010dc:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010de:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010e0:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 80010e2:	230a      	movs	r3, #10
 80010e4:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80010e6:	a908      	add	r1, sp, #32
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_SPI2_Init+0x9c>)
 80010ea:	f004 fe43 	bl	8005d74 <LL_SPI_Init>

}
 80010ee:	b013      	add	sp, #76	; 0x4c
 80010f0:	bd30      	pop	{r4, r5, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	04a000a0 	.word	0x04a000a0
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	04400040 	.word	0x04400040
 8001104:	40003800 	.word	0x40003800

08001108 <gd5f_block_device_sync>:
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
return LFS_ERR_OK;
}


static int gd5f_block_device_sync(const struct lfs_config *c){
 8001108:	b508      	push	{r3, lr}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <gd5f_block_device_sync+0x14>)
 800110c:	f000 fd3a 	bl	8001b84 <gd5f_get_features>
 8001110:	b908      	cbnz	r0, 8001116 <gd5f_block_device_sync+0xe>
return LFS_ERR_OK;
 8001112:	2000      	movs	r0, #0
}
 8001114:	bd08      	pop	{r3, pc}
if  (gd5f_get_features(&spi_nand_gd5f) != GD5F_OK) {return LFS_ERR_IO;}
 8001116:	f06f 0004 	mvn.w	r0, #4
 800111a:	e7fb      	b.n	8001114 <gd5f_block_device_sync+0xc>
 800111c:	20005bd4 	.word	0x20005bd4

08001120 <gd5f_block_device_erase>:
static int gd5f_block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8001120:	b508      	push	{r3, lr}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 8001122:	4804      	ldr	r0, [pc, #16]	; (8001134 <gd5f_block_device_erase+0x14>)
 8001124:	f000 fed7 	bl	8001ed6 <gd5f_blockerase>
 8001128:	b908      	cbnz	r0, 800112e <gd5f_block_device_erase+0xe>
return LFS_ERR_OK;
 800112a:	2000      	movs	r0, #0
}
 800112c:	bd08      	pop	{r3, pc}
if  (gd5f_blockerase(&spi_nand_gd5f, block) != GD5F_OK) {return LFS_ERR_IO;}
 800112e:	f06f 0004 	mvn.w	r0, #4
 8001132:	e7fb      	b.n	800112c <gd5f_block_device_erase+0xc>
 8001134:	20005bd4 	.word	0x20005bd4

08001138 <gd5f_block_device_prog>:
static int gd5f_block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 800113c:	0189      	lsls	r1, r1, #6
 800113e:	b289      	uxth	r1, r1
 8001140:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 8001144:	4401      	add	r1, r0
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001146:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001150:	b289      	uxth	r1, r1
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <gd5f_block_device_prog+0x30>)
 8001154:	f000 fe59 	bl	8001e0a <gd5f_random_write_page>
 8001158:	b918      	cbnz	r0, 8001162 <gd5f_block_device_prog+0x2a>
return LFS_ERR_OK;
 800115a:	2000      	movs	r0, #0
}
 800115c:	b003      	add	sp, #12
 800115e:	f85d fb04 	ldr.w	pc, [sp], #4
if  (gd5f_random_write_page(&spi_nand_gd5f, page_num, column_num, (uint8_t*) buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001162:	f06f 0004 	mvn.w	r0, #4
 8001166:	e7f9      	b.n	800115c <gd5f_block_device_prog+0x24>
 8001168:	20005bd4 	.word	0x20005bd4

0800116c <gd5f_block_device_read>:
static int gd5f_block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800116c:	b500      	push	{lr}
 800116e:	b083      	sub	sp, #12
uint16_t page_num = (block * LFS_PHYSICAL_PAGES_PER_BLOCK) + (off/LFS_PHYSICAL_PAGESIZE_TOTAL);
 8001170:	0189      	lsls	r1, r1, #6
 8001172:	b289      	uxth	r1, r1
 8001174:	f3c2 20cf 	ubfx	r0, r2, #11, #16
 8001178:	4401      	add	r1, r0
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 800117a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800117e:	9000      	str	r0, [sp, #0]
 8001180:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001184:	b289      	uxth	r1, r1
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <gd5f_block_device_read+0x30>)
 8001188:	f000 fe05 	bl	8001d96 <gd5f_random_read_page>
 800118c:	b918      	cbnz	r0, 8001196 <gd5f_block_device_read+0x2a>
return LFS_ERR_OK;
 800118e:	2000      	movs	r0, #0
}
 8001190:	b003      	add	sp, #12
 8001192:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_random_read_page(&spi_nand_gd5f, page_num, column_num, buffer, size) != GD5F_OK) {return LFS_ERR_IO;}
 8001196:	f06f 0004 	mvn.w	r0, #4
 800119a:	e7f9      	b.n	8001190 <gd5f_block_device_read+0x24>
 800119c:	20005bd4 	.word	0x20005bd4

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b500      	push	{lr}
 80011a2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_MspInit+0x5c>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	f002 0201 	and.w	r2, r2, #1
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011be:	61da      	str	r2, [r3, #28]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	210f      	movs	r1, #15
 80011ce:	f06f 0001 	mvn.w	r0, #1
 80011d2:	f001 fa3d 	bl	8002650 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	4608      	mov	r0, r1
 80011dc:	f001 fa38 	bl	8002650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011e0:	2005      	movs	r0, #5
 80011e2:	f001 fa7b 	bl	80026dc <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_MspInit+0x60>)
 80011e8:	6853      	ldr	r3, [r2, #4]
 80011ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	b003      	add	sp, #12
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b500      	push	{lr}
 8001206:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8001208:	2200      	movs	r2, #0
 800120a:	4601      	mov	r1, r0
 800120c:	2036      	movs	r0, #54	; 0x36
 800120e:	f001 fa1f 	bl	8002650 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8001212:	2036      	movs	r0, #54	; 0x36
 8001214:	f001 fa62 	bl	80026dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_InitTick+0x6c>)
 800121a:	69da      	ldr	r2, [r3, #28]
 800121c:	f042 0210 	orr.w	r2, r2, #16
 8001220:	61da      	str	r2, [r3, #28]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122c:	a902      	add	r1, sp, #8
 800122e:	a803      	add	r0, sp, #12
 8001230:	f002 fbca 	bl	80039c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001234:	f002 fbb8 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8001238:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <HAL_InitTick+0x70>)
 800123c:	fba0 2303 	umull	r2, r3, r0, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <HAL_InitTick+0x74>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_InitTick+0x78>)
 8001248:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800124a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001250:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001258:	f003 fc80 	bl	8004b5c <HAL_TIM_Base_Init>
 800125c:	b118      	cbz	r0, 8001266 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
}
 8001260:	b009      	add	sp, #36	; 0x24
 8001262:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <HAL_InitTick+0x74>)
 8001268:	f003 fb34 	bl	80048d4 <HAL_TIM_Base_Start_IT>
 800126c:	e7f8      	b.n	8001260 <HAL_InitTick+0x5c>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	431bde83 	.word	0x431bde83
 8001278:	20005bec 	.word	0x20005bec
 800127c:	40001000 	.word	0x40001000

08001280 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001280:	4770      	bx	lr

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler>

0800128a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	4770      	bx	lr

0800128c <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800128c:	4770      	bx	lr

0800128e <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128e:	4770      	bx	lr

08001290 <DMA1_Channel2_IRQHandler>:
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001290:	4770      	bx	lr

08001292 <DMA1_Channel3_IRQHandler>:
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001292:	4770      	bx	lr

08001294 <DMA1_Channel4_IRQHandler>:
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001294:	4770      	bx	lr

08001296 <DMA1_Channel5_IRQHandler>:
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001296:	4770      	bx	lr

08001298 <DMA1_Channel6_IRQHandler>:
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001298:	4770      	bx	lr

0800129a <DMA1_Channel7_IRQHandler>:
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800129a:	4770      	bx	lr

0800129c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800129c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80012a0:	f002 fa43 	bl	800372a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012a4:	bd08      	pop	{r3, pc}
 80012a6:	bf00      	nop
 80012a8:	200064fc 	.word	0x200064fc

080012ac <USART1_IRQHandler>:

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ac:	4770      	bx	lr

080012ae <USART2_IRQHandler>:

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ae:	4770      	bx	lr

080012b0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80012b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80012b2:	4802      	ldr	r0, [pc, #8]	; (80012bc <SDIO_IRQHandler+0xc>)
 80012b4:	f003 fa1e 	bl	80046f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80012b8:	bd08      	pop	{r3, pc}
 80012ba:	bf00      	nop
 80012bc:	20005b50 	.word	0x20005b50

080012c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80012c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM6_IRQHandler+0xc>)
 80012c4:	f003 fb40 	bl	8004948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80012c8:	bd08      	pop	{r3, pc}
 80012ca:	bf00      	nop
 80012cc:	20005bec 	.word	0x20005bec

080012d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	TIM_Delay_Callback();
 80012d2:	f001 f951 	bl	8002578 <TIM_Delay_Callback>
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012d6:	bd08      	pop	{r3, pc}

080012d8 <DMA2_Channel1_IRQHandler>:
  /* USER CODE END DMA2_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80012d8:	4770      	bx	lr
	...

080012dc <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80012dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA2_Channel4_5_IRQHandler+0xc>)
 80012e0:	f001 fb94 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80012e4:	bd08      	pop	{r3, pc}
 80012e6:	bf00      	nop
 80012e8:	20005aec 	.word	0x20005aec

080012ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <SystemInit+0x40>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <SystemInit+0x44>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001308:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001310:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001318:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800131a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800131e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SystemInit+0x48>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
#endif 
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	f8ff0000 	.word	0xf8ff0000
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001338:	b510      	push	{r4, lr}
 800133a:	b086      	sub	sp, #24
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	9303      	str	r3, [sp, #12]
 8001344:	9304      	str	r3, [sp, #16]
 8001346:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800134c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001360:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <MX_TIM7_Init+0xc0>)
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136a:	f1c2 0307 	rsb	r3, r2, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	1d13      	adds	r3, r2, #4
 8001378:	2b06      	cmp	r3, #6
 800137a:	d93b      	bls.n	80013f4 <MX_TIM7_Init+0xbc>
 800137c:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	408b      	lsls	r3, r1
 8001384:	43db      	mvns	r3, r3
 8001386:	f003 0305 	and.w	r3, r3, #5
 800138a:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <MX_TIM7_Init+0xc4>)
 8001392:	f882 3337 	strb.w	r3, [r2, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001396:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800139a:	6053      	str	r3, [r2, #4]

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(TIM7_IRQn);

  TIM_InitStruct.Prescaler = ((SystemCoreClock/1000000) - 1);
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM7_Init+0xc8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f102 42c8 	add.w	r2, r2, #1677721600	; 0x64000000
 80013a4:	f5a2 0265 	sub.w	r2, r2, #15007744	; 0xe50000
 80013a8:	f2a2 227d 	subw	r2, r2, #637	; 0x27d
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80013b8:	2300      	movs	r3, #0
 80013ba:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 0xFFFF;
 80013bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c0:	9303      	str	r3, [sp, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80013c2:	4c10      	ldr	r4, [pc, #64]	; (8001404 <MX_TIM7_Init+0xcc>)
 80013c4:	a901      	add	r1, sp, #4
 80013c6:	4620      	mov	r0, r4
 80013c8:	f004 fd90 	bl	8005eec <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80013e8:	68a3      	ldr	r3, [r4, #8]
 80013ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013ee:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM7);
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_UPDATE);
  LL_TIM_DisableMasterSlaveMode(TIM7);

}
 80013f0:	b006      	add	sp, #24
 80013f2:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f4:	2200      	movs	r2, #0
 80013f6:	e7c2      	b.n	800137e <MX_TIM7_Init+0x46>
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	20000000 	.word	0x20000000
 8001404:	40001400 	.word	0x40001400

08001408 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001408:	b510      	push	{r4, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800140c:	2300      	movs	r3, #0
 800140e:	9308      	str	r3, [sp, #32]
 8001410:	9309      	str	r3, [sp, #36]	; 0x24
 8001412:	930a      	str	r3, [sp, #40]	; 0x28
 8001414:	930b      	str	r3, [sp, #44]	; 0x2c
 8001416:	930c      	str	r3, [sp, #48]	; 0x30
 8001418:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	9306      	str	r3, [sp, #24]
 800141c:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 800141e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001422:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800142c:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001434:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001436:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	f042 0204 	orr.w	r2, r2, #4
 800143e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001448:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <MX_USART1_UART_Init+0x160>)
 800144c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800144e:	2309      	movs	r3, #9
 8001450:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	4c45      	ldr	r4, [pc, #276]	; (800156c <MX_USART1_UART_Init+0x164>)
 8001458:	a903      	add	r1, sp, #12
 800145a:	4620      	mov	r0, r4
 800145c:	f003 fc76 	bl	8004d4c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <MX_USART1_UART_Init+0x168>)
 8001462:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001464:	2304      	movs	r3, #4
 8001466:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	a903      	add	r1, sp, #12
 800146a:	4620      	mov	r0, r4
 800146c:	f003 fc6e 	bl	8004d4c <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <MX_USART1_UART_Init+0x16c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001478:	f022 0210 	bic.w	r2, r2, #16
 800147c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001484:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f022 0220 	bic.w	r2, r2, #32
 800148c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001494:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800149c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80014ae:	3b14      	subs	r3, #20
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014b6:	f022 0210 	bic.w	r2, r2, #16
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f022 0220 	bic.w	r2, r2, #32
 80014ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014ee:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_USART1_UART_Init+0x170>)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	f1c2 0307 	rsb	r3, r2, #7
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	bf28      	it	cs
 8001500:	2304      	movcs	r3, #4
 8001502:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001504:	1d13      	adds	r3, r2, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d92b      	bls.n	8001562 <MX_USART1_UART_Init+0x15a>
 800150a:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	408b      	lsls	r3, r1
 8001512:	43db      	mvns	r3, r3
 8001514:	f003 0305 	and.w	r3, r3, #5
 8001518:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <MX_USART1_UART_Init+0x174>)
 8001520:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001524:	2320      	movs	r3, #32
 8001526:	6053      	str	r3, [r2, #4]

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART1_IRQn);

  USART_InitStruct.BaudRate = 115200;
 8001528:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800152c:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800152e:	2300      	movs	r3, #0
 8001530:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001532:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001534:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001536:	220c      	movs	r2, #12
 8001538:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800153a:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800153c:	4c10      	ldr	r4, [pc, #64]	; (8001580 <MX_USART1_UART_Init+0x178>)
 800153e:	a908      	add	r1, sp, #32
 8001540:	4620      	mov	r0, r4
 8001542:	f004 fd65 	bl	8006010 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001546:	6923      	ldr	r3, [r4, #16]
 8001548:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800154c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800154e:	6963      	ldr	r3, [r4, #20]
 8001550:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001554:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001556:	68e3      	ldr	r3, [r4, #12]
 8001558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800155c:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 800155e:	b00e      	add	sp, #56	; 0x38
 8001560:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	2200      	movs	r2, #0
 8001564:	e7d2      	b.n	800150c <MX_USART1_UART_Init+0x104>
 8001566:	bf00      	nop
 8001568:	04020002 	.word	0x04020002
 800156c:	40010800 	.word	0x40010800
 8001570:	04040004 	.word	0x04040004
 8001574:	40020058 	.word	0x40020058
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	e000e100 	.word	0xe000e100
 8001580:	40013800 	.word	0x40013800

08001584 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001584:	b510      	push	{r4, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001588:	2300      	movs	r3, #0
 800158a:	9308      	str	r3, [sp, #32]
 800158c:	9309      	str	r3, [sp, #36]	; 0x24
 800158e:	930a      	str	r3, [sp, #40]	; 0x28
 8001590:	930b      	str	r3, [sp, #44]	; 0x2c
 8001592:	930c      	str	r3, [sp, #48]	; 0x30
 8001594:	930d      	str	r3, [sp, #52]	; 0x34

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	9306      	str	r3, [sp, #24]
 8001598:	9307      	str	r3, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 800159a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800159e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015a8:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	f042 0204 	orr.w	r2, r2, #4
 80015ba:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015c4:	9b01      	ldr	r3, [sp, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80015c6:	f240 4304 	movw	r3, #1028	; 0x404
 80015ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015cc:	2309      	movs	r3, #9
 80015ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	4c44      	ldr	r4, [pc, #272]	; (80016e8 <MX_USART2_UART_Init+0x164>)
 80015d6:	a903      	add	r1, sp, #12
 80015d8:	4620      	mov	r0, r4
 80015da:	f003 fbb7 	bl	8004d4c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80015de:	f640 0308 	movw	r3, #2056	; 0x808
 80015e2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015e4:	2304      	movs	r3, #4
 80015e6:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	a903      	add	r1, sp, #12
 80015ea:	4620      	mov	r0, r4
 80015ec:	f003 fbae 	bl	8004d4c <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <MX_USART2_UART_Init+0x168>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015f8:	f022 0210 	bic.w	r2, r2, #16
 80015fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001604:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f022 0220 	bic.w	r2, r2, #32
 800160c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001614:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001624:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800162c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800162e:	3314      	adds	r3, #20
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001636:	f022 0210 	bic.w	r2, r2, #16
 800163a:	f042 0210 	orr.w	r2, r2, #16
 800163e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001646:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f022 0220 	bic.w	r2, r2, #32
 800164e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001656:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001666:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800166e:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_USART2_UART_Init+0x16c>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	f1c2 0307 	rsb	r3, r2, #7
 800167c:	2b04      	cmp	r3, #4
 800167e:	bf28      	it	cs
 8001680:	2304      	movcs	r3, #4
 8001682:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001684:	1d13      	adds	r3, r2, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d92b      	bls.n	80016e2 <MX_USART2_UART_Init+0x15e>
 800168a:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	408b      	lsls	r3, r1
 8001692:	43db      	mvns	r3, r3
 8001694:	f003 0305 	and.w	r3, r3, #5
 8001698:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_USART2_UART_Init+0x170>)
 80016a0:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	6053      	str	r3, [r2, #4]

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(USART2_IRQn);

  USART_InitStruct.BaudRate = 115200;
 80016a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016ac:	9308      	str	r3, [sp, #32]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80016ae:	2300      	movs	r3, #0
 80016b0:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80016b2:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80016b4:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016b6:	220c      	movs	r2, #12
 80016b8:	920c      	str	r2, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016ba:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80016bc:	4c0e      	ldr	r4, [pc, #56]	; (80016f8 <MX_USART2_UART_Init+0x174>)
 80016be:	a908      	add	r1, sp, #32
 80016c0:	4620      	mov	r0, r4
 80016c2:	f004 fca5 	bl	8006010 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016c6:	6923      	ldr	r3, [r4, #16]
 80016c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016cc:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80016ce:	6963      	ldr	r3, [r4, #20]
 80016d0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80016d4:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016d6:	68e3      	ldr	r3, [r4, #12]
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART2);
  LL_USART_Enable(USART2);

}
 80016de:	b00e      	add	sp, #56	; 0x38
 80016e0:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	2200      	movs	r2, #0
 80016e4:	e7d2      	b.n	800168c <MX_USART2_UART_Init+0x108>
 80016e6:	bf00      	nop
 80016e8:	40010800 	.word	0x40010800
 80016ec:	4002006c 	.word	0x4002006c
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	40004400 	.word	0x40004400

080016fc <gd5f_spi_sendbyte>:



GD5F_RESULT gd5f_spi_sendbyte(gd5f* dev,           // device handler
                            uint8_t databyte)
{
 80016fc:	b430      	push	{r4, r5}
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 80016fe:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001706:	d103      	bne.n	8001710 <gd5f_spi_sendbyte+0x14>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170e:	601a      	str	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001710:	6882      	ldr	r2, [r0, #8]
 8001712:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001714:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001718:	6153      	str	r3, [r2, #20]
     gd5f_spi_start(dev);
     GD5F_WAIT_TX_EMPTY();
 800171a:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 800171c:	6804      	ldr	r4, [r0, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	f013 0f02 	tst.w	r3, #2
 8001724:	d104      	bne.n	8001730 <gd5f_spi_sendbyte+0x34>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001726:	1e53      	subs	r3, r2, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	b1b2      	cbz	r2, 800175a <gd5f_spi_sendbyte+0x5e>
 800172c:	461a      	mov	r2, r3
 800172e:	e7f5      	b.n	800171c <gd5f_spi_sendbyte+0x20>
		return GD5F_OK;
 8001730:	2500      	movs	r5, #0
     GD5F_WAIT_TX_EMPTY();
 8001732:	b1ad      	cbz	r5, 8001760 <gd5f_spi_sendbyte+0x64>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001734:	6882      	ldr	r2, [r0, #8]
 8001736:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001738:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800173c:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800173e:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001746:	d076      	beq.n	8001836 <gd5f_spi_sendbyte+0x13a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800174e:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 8001750:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     databyte = LL_SPI_ReceiveData8(dev->hw_config.spi);
     GD5F_WAIT_TX_EMPTY();
     GD5F_WAIT_SPI_BUSY();
     gd5f_spi_stop(dev);
  return GD5F_OK;
}
 8001754:	4628      	mov	r0, r5
 8001756:	bc30      	pop	{r4, r5}
 8001758:	4770      	bx	lr
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800175a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800175e:	e7e8      	b.n	8001732 <gd5f_spi_sendbyte+0x36>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  SPIx->DR = TxData;
 8001760:	60e1      	str	r1, [r4, #12]
     GD5F_WAIT_RX_NOT_EMPTY();
 8001762:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 8001764:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001766:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001768:	688b      	ldr	r3, [r1, #8]
 800176a:	f013 0f01 	tst.w	r3, #1
 800176e:	d106      	bne.n	800177e <gd5f_spi_sendbyte+0x82>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001770:	1e53      	subs	r3, r2, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	b10a      	cbz	r2, 800177a <gd5f_spi_sendbyte+0x7e>
 8001776:	461a      	mov	r2, r3
 8001778:	e7f5      	b.n	8001766 <gd5f_spi_sendbyte+0x6a>
 800177a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_RX_NOT_EMPTY();
 800177e:	b185      	cbz	r5, 80017a2 <gd5f_spi_sendbyte+0xa6>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001780:	6882      	ldr	r2, [r0, #8]
 8001782:	68c3      	ldr	r3, [r0, #12]
 8001784:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001788:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800178a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001792:	d053      	beq.n	800183c <gd5f_spi_sendbyte+0x140>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179a:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_RX_NOT_EMPTY();
 800179c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80017a0:	e7d8      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
  return (uint8_t)(READ_REG(SPIx->DR));
 80017a2:	68cb      	ldr	r3, [r1, #12]
	uint16_t timeleft = timeout_us;
 80017a4:	4622      	mov	r2, r4
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80017a6:	688b      	ldr	r3, [r1, #8]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 80017a8:	f013 0f02 	tst.w	r3, #2
 80017ac:	d106      	bne.n	80017bc <gd5f_spi_sendbyte+0xc0>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80017ae:	1e53      	subs	r3, r2, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b10a      	cbz	r2, 80017b8 <gd5f_spi_sendbyte+0xbc>
 80017b4:	461a      	mov	r2, r3
 80017b6:	e7f6      	b.n	80017a6 <gd5f_spi_sendbyte+0xaa>
 80017b8:	f06f 055f 	mvn.w	r5, #95	; 0x5f
     GD5F_WAIT_TX_EMPTY();
 80017bc:	b185      	cbz	r5, 80017e0 <gd5f_spi_sendbyte+0xe4>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80017be:	6882      	ldr	r2, [r0, #8]
 80017c0:	68c3      	ldr	r3, [r0, #12]
 80017c2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80017c6:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80017c8:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017d0:	d037      	beq.n	8001842 <gd5f_spi_sendbyte+0x146>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017d8:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_TX_EMPTY();
 80017da:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80017de:	e7b9      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 80017e0:	688b      	ldr	r3, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 80017e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017e6:	d004      	beq.n	80017f2 <gd5f_spi_sendbyte+0xf6>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80017e8:	1e63      	subs	r3, r4, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b194      	cbz	r4, 8001814 <gd5f_spi_sendbyte+0x118>
 80017ee:	461c      	mov	r4, r3
 80017f0:	e7f6      	b.n	80017e0 <gd5f_spi_sendbyte+0xe4>
        dev->gd5f_busy = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75c3      	strb	r3, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80017f6:	6882      	ldr	r2, [r0, #8]
 80017f8:	68c3      	ldr	r3, [r0, #12]
 80017fa:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80017fe:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001800:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001808:	d0a4      	beq.n	8001754 <gd5f_spi_sendbyte+0x58>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e79f      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001814:	6882      	ldr	r2, [r0, #8]
 8001816:	68c3      	ldr	r3, [r0, #12]
 8001818:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800181c:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 800181e:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001826:	d00f      	beq.n	8001848 <gd5f_spi_sendbyte+0x14c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182e:	601a      	str	r2, [r3, #0]
     GD5F_WAIT_SPI_BUSY();
 8001830:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001834:	e78e      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 8001836:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800183a:	e78b      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_RX_NOT_EMPTY();
 800183c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001840:	e788      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_TX_EMPTY();
 8001842:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001846:	e785      	b.n	8001754 <gd5f_spi_sendbyte+0x58>
     GD5F_WAIT_SPI_BUSY();
 8001848:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800184c:	e782      	b.n	8001754 <gd5f_spi_sendbyte+0x58>

0800184e <gd5f_write_enable>:



GD5F_RESULT gd5f_write_enable(gd5f* dev)
{
 800184e:	b508      	push	{r3, lr}
	return gd5f_spi_sendbyte(dev, GD5F_WRITE_ENABLE);
 8001850:	2106      	movs	r1, #6
 8001852:	f7ff ff53 	bl	80016fc <gd5f_spi_sendbyte>
}
 8001856:	bd08      	pop	{r3, pc}

08001858 <gd5f_cmd>:
                  uint32_t address,
                   uint8_t addrlen,
                   uint8_t *databuf,
                  uint16_t datalen,
                   uint8_t noreadback)
{
 8001858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800185c:	af00      	add	r7, sp, #0
 800185e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8001862:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
 8001866:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
    uint8_t  cmd_len = (addrlen + 1);
 800186a:	1c5c      	adds	r4, r3, #1
 800186c:	b2e4      	uxtb	r4, r4
    uint8_t  cmdbuf[cmd_len];
 800186e:	1de5      	adds	r5, r4, #7
 8001870:	f405 75fc 	and.w	r5, r5, #504	; 0x1f8
 8001874:	ebad 0d05 	sub.w	sp, sp, r5
 8001878:	466d      	mov	r5, sp
    cmdbuf[0] = cmd;
 800187a:	f88d 1000 	strb.w	r1, [sp]
if (!LL_SPI_IsEnabled(dev->hw_config.spi))
 800187e:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001880:	f8d1 8000 	ldr.w	r8, [r1]
 8001884:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001888:	d105      	bne.n	8001896 <gd5f_cmd+0x3e>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800188a:	f8d1 8000 	ldr.w	r8, [r1]
 800188e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8001892:	f8c1 8000 	str.w	r8, [r1]
    LL_GPIO_ResetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001896:	68c1      	ldr	r1, [r0, #12]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001898:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800189c:	6886      	ldr	r6, [r0, #8]
 800189e:	6171      	str	r1, [r6, #20]

    gd5f_spi_start(dev);


     switch (addrlen) {
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	f200 8154 	bhi.w	8001b4e <gd5f_cmd+0x2f6>
 80018a6:	e8df f003 	tbb	[pc, r3]
 80018aa:	1009      	.short	0x1009
 80018ac:	020b      	.short	0x020b
        case 3: {
                cmdbuf[1] = (uint8_t)((address & BYTE_2_MASK32) >> 16);
 80018ae:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80018b2:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 80018b4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80018b8:	70ab      	strb	r3, [r5, #2]
                cmdbuf[3] = (uint8_t)((address) & BYTE_0_MASK32);
 80018ba:	70ea      	strb	r2, [r5, #3]
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018bc:	2100      	movs	r1, #0
 80018be:	e038      	b.n	8001932 <gd5f_cmd+0xda>
                break;}
        case 2: {
                cmdbuf[1] = (uint8_t)((address & BYTE_1_MASK32) >> 8);
 80018c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80018c4:	706b      	strb	r3, [r5, #1]
                cmdbuf[2] = (uint8_t)((address) & BYTE_0_MASK32);
 80018c6:	70aa      	strb	r2, [r5, #2]
                break;}
 80018c8:	e7f8      	b.n	80018bc <gd5f_cmd+0x64>
        case 1: {
                cmdbuf[1] = (uint8_t)((address) & BYTE_0_MASK32);
 80018ca:	706a      	strb	r2, [r5, #1]
                break;}
 80018cc:	e7f6      	b.n	80018bc <gd5f_cmd+0x64>
		return GD5F_OK;
 80018ce:	f04f 0900 	mov.w	r9, #0

     //uint8_t  spi_rsp = 0;
     //transmitting command opcode and address if needed
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
            {
               GD5F_WAIT_TX_EMPTY();
 80018d2:	f1b9 0f00 	cmp.w	r9, #0
 80018d6:	d10f      	bne.n	80018f8 <gd5f_cmd+0xa0>
               LL_SPI_TransmitData8(dev->hw_config.spi, cmdbuf[curr_byte_num]);
 80018d8:	5c6b      	ldrb	r3, [r5, r1]
  SPIx->DR = TxData;
 80018da:	60f3      	str	r3, [r6, #12]
               GD5F_WAIT_RX_NOT_EMPTY();
 80018dc:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 80018de:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80018e0:	68b3      	ldr	r3, [r6, #8]
 80018e2:	f013 0f01 	tst.w	r3, #1
 80018e6:	d11e      	bne.n	8001926 <gd5f_cmd+0xce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018e8:	1e53      	subs	r3, r2, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b1ca      	cbz	r2, 8001922 <gd5f_cmd+0xca>
 80018ee:	461a      	mov	r2, r3
 80018f0:	e7f5      	b.n	80018de <gd5f_cmd+0x86>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80018f2:	f06f 095f 	mvn.w	r9, #95	; 0x5f
 80018f6:	e7ec      	b.n	80018d2 <gd5f_cmd+0x7a>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80018f8:	6882      	ldr	r2, [r0, #8]
 80018fa:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80018fc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001900:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001902:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f012 0f40 	tst.w	r2, #64	; 0x40
 800190a:	f000 8123 	beq.w	8001b54 <gd5f_cmd+0x2fc>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001914:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_TX_EMPTY();
 8001916:	f06f 035f 	mvn.w	r3, #95	; 0x5f
GD5F_WAIT_TX_EMPTY();
GD5F_WAIT_SPI_BUSY();

gd5f_spi_stop(dev);
return GD5F_OK;
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001922:	f06f 095f 	mvn.w	r9, #95	; 0x5f
               GD5F_WAIT_RX_NOT_EMPTY();
 8001926:	f1b9 0f00 	cmp.w	r9, #0
 800192a:	d110      	bne.n	800194e <gd5f_cmd+0xf6>
  return (uint8_t)(READ_REG(SPIx->DR));
 800192c:	68f3      	ldr	r3, [r6, #12]
     for (uint8_t curr_byte_num = 0; curr_byte_num < cmd_len; curr_byte_num++)
 800192e:	3101      	adds	r1, #1
 8001930:	b2c9      	uxtb	r1, r1
 8001932:	42a1      	cmp	r1, r4
 8001934:	d21d      	bcs.n	8001972 <gd5f_cmd+0x11a>
               GD5F_WAIT_TX_EMPTY();
 8001936:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001938:	6806      	ldr	r6, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800193a:	68b3      	ldr	r3, [r6, #8]
 800193c:	f013 0f02 	tst.w	r3, #2
 8001940:	d1c5      	bne.n	80018ce <gd5f_cmd+0x76>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001942:	1e53      	subs	r3, r2, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	2a00      	cmp	r2, #0
 8001948:	d0d3      	beq.n	80018f2 <gd5f_cmd+0x9a>
 800194a:	461a      	mov	r2, r3
 800194c:	e7f4      	b.n	8001938 <gd5f_cmd+0xe0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 800194e:	6882      	ldr	r2, [r0, #8]
 8001950:	68c3      	ldr	r3, [r0, #12]
 8001952:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001956:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001958:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001960:	f000 80fb 	beq.w	8001b5a <gd5f_cmd+0x302>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196a:	601a      	str	r2, [r3, #0]
               GD5F_WAIT_RX_NOT_EMPTY();
 800196c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001970:	e7d3      	b.n	800191a <gd5f_cmd+0xc2>
     if (noreadback) {
 8001972:	f1be 0f00 	cmp.w	lr, #0
 8001976:	d14c      	bne.n	8001a12 <gd5f_cmd+0x1ba>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001978:	2400      	movs	r4, #0
 800197a:	e07b      	b.n	8001a74 <gd5f_cmd+0x21c>
		return GD5F_OK;
 800197c:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 800197e:	b985      	cbnz	r5, 80019a2 <gd5f_cmd+0x14a>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 8001980:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 8001984:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001986:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001988:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 800198a:	688b      	ldr	r3, [r1, #8]
 800198c:	f013 0f01 	tst.w	r3, #1
 8001990:	d11b      	bne.n	80019ca <gd5f_cmd+0x172>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001992:	1e53      	subs	r3, r2, #1
 8001994:	b29b      	uxth	r3, r3
 8001996:	b1b2      	cbz	r2, 80019c6 <gd5f_cmd+0x16e>
 8001998:	461a      	mov	r2, r3
 800199a:	e7f5      	b.n	8001988 <gd5f_cmd+0x130>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 800199c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 80019a0:	e7ed      	b.n	800197e <gd5f_cmd+0x126>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80019a2:	6882      	ldr	r2, [r0, #8]
 80019a4:	68c3      	ldr	r3, [r0, #12]
 80019a6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80019aa:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80019ac:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019b4:	f000 80d4 	beq.w	8001b60 <gd5f_cmd+0x308>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019be:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 80019c0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80019c4:	e7a9      	b.n	800191a <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80019c6:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 80019ca:	b985      	cbnz	r5, 80019ee <gd5f_cmd+0x196>
  return (uint8_t)(READ_REG(SPIx->DR));
 80019cc:	68cb      	ldr	r3, [r1, #12]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 80019ce:	3401      	adds	r4, #1
 80019d0:	b2a4      	uxth	r4, r4
 80019d2:	4564      	cmp	r4, ip
 80019d4:	d26d      	bcs.n	8001ab2 <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 80019d6:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 80019d8:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80019da:	688b      	ldr	r3, [r1, #8]
 80019dc:	f013 0f02 	tst.w	r3, #2
 80019e0:	d1cc      	bne.n	800197c <gd5f_cmd+0x124>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 80019e2:	1e53      	subs	r3, r2, #1
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d0d8      	beq.n	800199c <gd5f_cmd+0x144>
 80019ea:	461a      	mov	r2, r3
 80019ec:	e7f4      	b.n	80019d8 <gd5f_cmd+0x180>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 80019ee:	6882      	ldr	r2, [r0, #8]
 80019f0:	68c3      	ldr	r3, [r0, #12]
 80019f2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80019f6:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 80019f8:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a00:	f000 80b1 	beq.w	8001b66 <gd5f_cmd+0x30e>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0a:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001a0c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001a10:	e783      	b.n	800191a <gd5f_cmd+0xc2>
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001a12:	2400      	movs	r4, #0
 8001a14:	e7dd      	b.n	80019d2 <gd5f_cmd+0x17a>
		return GD5F_OK;
 8001a16:	2500      	movs	r5, #0
                GD5F_WAIT_TX_EMPTY();
 8001a18:	b995      	cbnz	r5, 8001a40 <gd5f_cmd+0x1e8>
                LL_SPI_TransmitData8(dev->hw_config.spi, databuf[curr_byte_num]);
 8001a1a:	eb0a 0e04 	add.w	lr, sl, r4
 8001a1e:	f81a 3004 	ldrb.w	r3, [sl, r4]
  SPIx->DR = TxData;
 8001a22:	60cb      	str	r3, [r1, #12]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001a24:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_RXNE(dev->hw_config.spi) == 0)  {
 8001a26:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8001a28:	688b      	ldr	r3, [r1, #8]
 8001a2a:	f013 0f01 	tst.w	r3, #1
 8001a2e:	d11b      	bne.n	8001a68 <gd5f_cmd+0x210>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a30:	1e53      	subs	r3, r2, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b1b2      	cbz	r2, 8001a64 <gd5f_cmd+0x20c>
 8001a36:	461a      	mov	r2, r3
 8001a38:	e7f5      	b.n	8001a26 <gd5f_cmd+0x1ce>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a3a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8001a3e:	e7eb      	b.n	8001a18 <gd5f_cmd+0x1c0>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a40:	6882      	ldr	r2, [r0, #8]
 8001a42:	68c3      	ldr	r3, [r0, #12]
 8001a44:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001a48:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a4a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a52:	f000 808b 	beq.w	8001b6c <gd5f_cmd+0x314>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5c:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_TX_EMPTY();
 8001a5e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001a62:	e75a      	b.n	800191a <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a64:	f06f 055f 	mvn.w	r5, #95	; 0x5f
                GD5F_WAIT_RX_NOT_EMPTY();
 8001a68:	b995      	cbnz	r5, 8001a90 <gd5f_cmd+0x238>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a6a:	68cb      	ldr	r3, [r1, #12]
                databuf[curr_byte_num] = LL_SPI_ReceiveData8(dev->hw_config.spi);
 8001a6c:	f88e 3000 	strb.w	r3, [lr]
         for (uint16_t curr_byte_num = 0; curr_byte_num < datalen; curr_byte_num++)
 8001a70:	3401      	adds	r4, #1
 8001a72:	b2a4      	uxth	r4, r4
 8001a74:	4564      	cmp	r4, ip
 8001a76:	d21c      	bcs.n	8001ab2 <gd5f_cmd+0x25a>
                GD5F_WAIT_TX_EMPTY();
 8001a78:	8882      	ldrh	r2, [r0, #4]
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001a7a:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001a7c:	688b      	ldr	r3, [r1, #8]
 8001a7e:	f013 0f02 	tst.w	r3, #2
 8001a82:	d1c8      	bne.n	8001a16 <gd5f_cmd+0x1be>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001a84:	1e53      	subs	r3, r2, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d0d6      	beq.n	8001a3a <gd5f_cmd+0x1e2>
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	e7f4      	b.n	8001a7a <gd5f_cmd+0x222>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001a90:	6882      	ldr	r2, [r0, #8]
 8001a92:	68c3      	ldr	r3, [r0, #12]
 8001a94:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001a98:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001a9a:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001aa2:	d066      	beq.n	8001b72 <gd5f_cmd+0x31a>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aaa:	601a      	str	r2, [r3, #0]
                GD5F_WAIT_RX_NOT_EMPTY();
 8001aac:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001ab0:	e733      	b.n	800191a <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001ab2:	8884      	ldrh	r4, [r0, #4]
	uint16_t timeleft = timeout_us;
 8001ab4:	4622      	mov	r2, r4
		while (LL_SPI_IsActiveFlag_TXE(dev->hw_config.spi) == 0)  {
 8001ab6:	6801      	ldr	r1, [r0, #0]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 8001ab8:	688b      	ldr	r3, [r1, #8]
 8001aba:	f013 0f02 	tst.w	r3, #2
 8001abe:	d104      	bne.n	8001aca <gd5f_cmd+0x272>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001ac0:	1e53      	subs	r3, r2, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b1a2      	cbz	r2, 8001af0 <gd5f_cmd+0x298>
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	e7f5      	b.n	8001ab6 <gd5f_cmd+0x25e>
		return GD5F_OK;
 8001aca:	2300      	movs	r3, #0
GD5F_WAIT_TX_EMPTY();
 8001acc:	b19b      	cbz	r3, 8001af6 <gd5f_cmd+0x29e>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001ace:	6882      	ldr	r2, [r0, #8]
 8001ad0:	68c3      	ldr	r3, [r0, #12]
 8001ad2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001ad6:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001ad8:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ae0:	d04a      	beq.n	8001b78 <gd5f_cmd+0x320>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae8:	601a      	str	r2, [r3, #0]
GD5F_WAIT_TX_EMPTY();
 8001aea:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001aee:	e714      	b.n	800191a <gd5f_cmd+0xc2>
			if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001af0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001af4:	e7ea      	b.n	8001acc <gd5f_cmd+0x274>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8001af6:	688a      	ldr	r2, [r1, #8]
    while (LL_SPI_IsActiveFlag_BSY(dev->hw_config.spi) > 0)  {
 8001af8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001afc:	d004      	beq.n	8001b08 <gd5f_cmd+0x2b0>
            if ((timeleft--) == 0) return GD5F_SPI_TIMEOUT;
 8001afe:	1e62      	subs	r2, r4, #1
 8001b00:	b292      	uxth	r2, r2
 8001b02:	b19c      	cbz	r4, 8001b2c <gd5f_cmd+0x2d4>
 8001b04:	4614      	mov	r4, r2
 8001b06:	e7f6      	b.n	8001af6 <gd5f_cmd+0x29e>
        dev->gd5f_busy = 0;
 8001b08:	2200      	movs	r2, #0
 8001b0a:	75c2      	strb	r2, [r0, #23]
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001b0c:	6881      	ldr	r1, [r0, #8]
 8001b0e:	68c2      	ldr	r2, [r0, #12]
 8001b10:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001b14:	610a      	str	r2, [r1, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001b16:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b1e:	f43f aefc 	beq.w	800191a <gd5f_cmd+0xc2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b22:	6811      	ldr	r1, [r2, #0]
 8001b24:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	e6f6      	b.n	800191a <gd5f_cmd+0xc2>
    LL_GPIO_SetOutputPin(dev->hw_config.csn_port, dev->hw_config.csn_pin);
 8001b2c:	6882      	ldr	r2, [r0, #8]
 8001b2e:	68c3      	ldr	r3, [r0, #12]
 8001b30:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001b34:	6113      	str	r3, [r2, #16]
if (LL_SPI_IsEnabled(dev->hw_config.spi))
 8001b36:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b3e:	d01e      	beq.n	8001b7e <gd5f_cmd+0x326>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b46:	601a      	str	r2, [r3, #0]
GD5F_WAIT_SPI_BUSY();
 8001b48:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b4c:	e6e5      	b.n	800191a <gd5f_cmd+0xc2>
        return GD5F_INVALID_ARGUMENT;
 8001b4e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001b52:	e6e2      	b.n	800191a <gd5f_cmd+0xc2>
               GD5F_WAIT_TX_EMPTY();
 8001b54:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b58:	e6df      	b.n	800191a <gd5f_cmd+0xc2>
               GD5F_WAIT_RX_NOT_EMPTY();
 8001b5a:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b5e:	e6dc      	b.n	800191a <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001b60:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b64:	e6d9      	b.n	800191a <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b66:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b6a:	e6d6      	b.n	800191a <gd5f_cmd+0xc2>
                GD5F_WAIT_TX_EMPTY();
 8001b6c:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b70:	e6d3      	b.n	800191a <gd5f_cmd+0xc2>
                GD5F_WAIT_RX_NOT_EMPTY();
 8001b72:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b76:	e6d0      	b.n	800191a <gd5f_cmd+0xc2>
GD5F_WAIT_TX_EMPTY();
 8001b78:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b7c:	e6cd      	b.n	800191a <gd5f_cmd+0xc2>
GD5F_WAIT_SPI_BUSY();
 8001b7e:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8001b82:	e6ca      	b.n	800191a <gd5f_cmd+0xc2>

08001b84 <gd5f_get_features>:




GD5F_RESULT gd5f_get_features(gd5f* dev)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	4605      	mov	r5, r0
volatile GD5F_RESULT res = 0;
 8001b8a:	2600      	movs	r6, #0
 8001b8c:	f88d 6017 	strb.w	r6, [sp, #23]

 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_PROTECTION, 1, &dev->registers.protection,  1, 0);
 8001b90:	9602      	str	r6, [sp, #8]
 8001b92:	2401      	movs	r4, #1
 8001b94:	9401      	str	r4, [sp, #4]
 8001b96:	f100 0310 	add.w	r3, r0, #16
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	22a0      	movs	r2, #160	; 0xa0
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	f7ff fe59 	bl	8001858 <gd5f_cmd>
 8001ba6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	4318      	orrs	r0, r3
 8001bae:	b240      	sxtb	r0, r0
 8001bb0:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_1,  1, &dev->registers.feature_1,   1, 0);
 8001bb4:	9602      	str	r6, [sp, #8]
 8001bb6:	9401      	str	r4, [sp, #4]
 8001bb8:	f105 0313 	add.w	r3, r5, #19
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	22b0      	movs	r2, #176	; 0xb0
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fe47 	bl	8001858 <gd5f_cmd>
 8001bca:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	4318      	orrs	r0, r3
 8001bd2:	b240      	sxtb	r0, r0
 8001bd4:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_1,   1, &dev->registers.status_1,    1, 0);
 8001bd8:	9602      	str	r6, [sp, #8]
 8001bda:	9401      	str	r4, [sp, #4]
 8001bdc:	f105 0311 	add.w	r3, r5, #17
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4623      	mov	r3, r4
 8001be4:	22c0      	movs	r2, #192	; 0xc0
 8001be6:	210f      	movs	r1, #15
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7ff fe35 	bl	8001858 <gd5f_cmd>
 8001bee:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	4318      	orrs	r0, r3
 8001bf6:	b240      	sxtb	r0, r0
 8001bf8:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_FEATURE_2,  1, &dev->registers.feature_2,   1, 0);
 8001bfc:	9602      	str	r6, [sp, #8]
 8001bfe:	9401      	str	r4, [sp, #4]
 8001c00:	f105 0314 	add.w	r3, r5, #20
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4623      	mov	r3, r4
 8001c08:	22d0      	movs	r2, #208	; 0xd0
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f7ff fe23 	bl	8001858 <gd5f_cmd>
 8001c12:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	4318      	orrs	r0, r3
 8001c1a:	b240      	sxtb	r0, r0
 8001c1c:	f88d 0017 	strb.w	r0, [sp, #23]
 res |= gd5f_cmd(dev, GD5F_GET_FEATURES, GD5F_STATUS_2,   1, &dev->registers.status_2,    1, 0);
 8001c20:	9602      	str	r6, [sp, #8]
 8001c22:	9401      	str	r4, [sp, #4]
 8001c24:	f105 0312 	add.w	r3, r5, #18
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	22f0      	movs	r2, #240	; 0xf0
 8001c2e:	210f      	movs	r1, #15
 8001c30:	4628      	mov	r0, r5
 8001c32:	f7ff fe11 	bl	8001858 <gd5f_cmd>
 8001c36:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	4318      	orrs	r0, r3
 8001c3e:	b240      	sxtb	r0, r0
 8001c40:	f88d 0017 	strb.w	r0, [sp, #23]
return res;
 8001c44:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 8001c48:	b240      	sxtb	r0, r0
 8001c4a:	b006      	add	sp, #24
 8001c4c:	bd70      	pop	{r4, r5, r6, pc}

08001c4e <gd5f_get_feature>:

GD5F_RESULT gd5f_get_feature(gd5f* dev, GD5F_FEATURE_REGS feature_reg, uint8_t* feature_byte)
{
 8001c4e:	b570      	push	{r4, r5, r6, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	4606      	mov	r6, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	4615      	mov	r5, r2
volatile GD5F_RESULT res = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f88d 3017 	strb.w	r3, [sp, #23]

res = gd5f_cmd(dev, GD5F_GET_FEATURES, feature_reg, 1, feature_byte, 1, 0);
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9200      	str	r2, [sp, #0]
 8001c66:	460a      	mov	r2, r1
 8001c68:	210f      	movs	r1, #15
 8001c6a:	f7ff fdf5 	bl	8001858 <gd5f_cmd>
 8001c6e:	f88d 0017 	strb.w	r0, [sp, #23]
if (res != GD5F_OK) return res;
 8001c72:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	b94b      	cbnz	r3, 8001c8e <gd5f_get_feature+0x40>

    switch (feature_reg) {
 8001c7a:	2cc0      	cmp	r4, #192	; 0xc0
 8001c7c:	d019      	beq.n	8001cb2 <gd5f_get_feature+0x64>
 8001c7e:	d80b      	bhi.n	8001c98 <gd5f_get_feature+0x4a>
 8001c80:	2ca0      	cmp	r4, #160	; 0xa0
 8001c82:	d010      	beq.n	8001ca6 <gd5f_get_feature+0x58>
 8001c84:	2cb0      	cmp	r4, #176	; 0xb0
 8001c86:	d11a      	bne.n	8001cbe <gd5f_get_feature+0x70>
             dev->registers.protection = *feature_byte;
             break;
            }
        case GD5F_FEATURE_1:
            {
             dev->registers.feature_1 = *feature_byte;
 8001c88:	782b      	ldrb	r3, [r5, #0]
 8001c8a:	74f3      	strb	r3, [r6, #19]
             break;
 8001c8c:	e00d      	b.n	8001caa <gd5f_get_feature+0x5c>
if (res != GD5F_OK) return res;
 8001c8e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001c92:	b240      	sxtb	r0, r0
        default:{
        return GD5F_INVALID_ARGUMENT;
        break;}
    }
return res;
}
 8001c94:	b006      	add	sp, #24
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
    switch (feature_reg) {
 8001c98:	2cd0      	cmp	r4, #208	; 0xd0
 8001c9a:	d00d      	beq.n	8001cb8 <gd5f_get_feature+0x6a>
 8001c9c:	2cf0      	cmp	r4, #240	; 0xf0
 8001c9e:	d10e      	bne.n	8001cbe <gd5f_get_feature+0x70>
            dev->registers.status_2 = *feature_byte;
 8001ca0:	782b      	ldrb	r3, [r5, #0]
 8001ca2:	74b3      	strb	r3, [r6, #18]
            break;
 8001ca4:	e001      	b.n	8001caa <gd5f_get_feature+0x5c>
             dev->registers.protection = *feature_byte;
 8001ca6:	782b      	ldrb	r3, [r5, #0]
 8001ca8:	7433      	strb	r3, [r6, #16]
return res;
 8001caa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001cae:	b240      	sxtb	r0, r0
 8001cb0:	e7f0      	b.n	8001c94 <gd5f_get_feature+0x46>
            dev->registers.status_1 = *feature_byte;
 8001cb2:	782b      	ldrb	r3, [r5, #0]
 8001cb4:	7473      	strb	r3, [r6, #17]
            break;
 8001cb6:	e7f8      	b.n	8001caa <gd5f_get_feature+0x5c>
            dev->registers.feature_2 = *feature_byte;
 8001cb8:	782b      	ldrb	r3, [r5, #0]
 8001cba:	7533      	strb	r3, [r6, #20]
            break;
 8001cbc:	e7f5      	b.n	8001caa <gd5f_get_feature+0x5c>
        return GD5F_INVALID_ARGUMENT;
 8001cbe:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001cc2:	e7e7      	b.n	8001c94 <gd5f_get_feature+0x46>

08001cc4 <gd5f_is_busy>:
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
   return res;
}

uint8_t gd5f_is_busy(gd5f* dev)
{
 8001cc4:	b500      	push	{lr}
 8001cc6:	b083      	sub	sp, #12
uint8_t feature_byte = 0;
 8001cc8:	aa02      	add	r2, sp, #8
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f802 3d01 	strb.w	r3, [r2, #-1]!
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001cd0:	21c0      	movs	r1, #192	; 0xc0
 8001cd2:	f7ff ffbc 	bl	8001c4e <gd5f_get_feature>
 8001cd6:	b930      	cbnz	r0, 8001ce6 <gd5f_is_busy+0x22>
return (feature_byte & GD5F_STATUS_1_OIP);
 8001cd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001cdc:	f000 0001 	and.w	r0, r0, #1
}
 8001ce0:	b003      	add	sp, #12
 8001ce2:	f85d fb04 	ldr.w	pc, [sp], #4
if (gd5f_get_feature(dev, GD5F_STATUS_1, &feature_byte) != GD5F_OK) {return 0xFF;}
 8001ce6:	20ff      	movs	r0, #255	; 0xff
 8001ce8:	e7fa      	b.n	8001ce0 <gd5f_is_busy+0x1c>
	...

08001cec <gd5f_wait_busy>:

GD5F_RESULT gd5f_wait_busy(gd5f* dev)
{
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	4605      	mov	r5, r0
uint8_t is_not_timeout = 1;
volatile uint32_t microseconds = GD5F_OP_TIMEOUT;
 8001cf2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cf6:	9301      	str	r3, [sp, #4]
uint32_t clk_cycle_start = DWT->CYCCNT;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <gd5f_wait_busy+0x58>)
 8001cfa:	685e      	ldr	r6, [r3, #4]
microseconds *= (SystemCoreClock / 1000000);
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <gd5f_wait_busy+0x5c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <gd5f_wait_busy+0x60>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	9a01      	ldr	r2, [sp, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	9301      	str	r3, [sp, #4]
dev->gd5f_busy = 1;
 8001d10:	2401      	movs	r4, #1
 8001d12:	75c4      	strb	r4, [r0, #23]

while(gd5f_is_busy(dev) && is_not_timeout) {
 8001d14:	e007      	b.n	8001d26 <gd5f_wait_busy+0x3a>
    is_not_timeout = ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <gd5f_wait_busy+0x58>)
 8001d18:	685c      	ldr	r4, [r3, #4]
 8001d1a:	1ba4      	subs	r4, r4, r6
 8001d1c:	9b01      	ldr	r3, [sp, #4]
 8001d1e:	429c      	cmp	r4, r3
 8001d20:	bf2c      	ite	cs
 8001d22:	2400      	movcs	r4, #0
 8001d24:	2401      	movcc	r4, #1
while(gd5f_is_busy(dev) && is_not_timeout) {
 8001d26:	4628      	mov	r0, r5
 8001d28:	f7ff ffcc 	bl	8001cc4 <gd5f_is_busy>
 8001d2c:	b108      	cbz	r0, 8001d32 <gd5f_wait_busy+0x46>
 8001d2e:	2c00      	cmp	r4, #0
 8001d30:	d1f1      	bne.n	8001d16 <gd5f_wait_busy+0x2a>
    }

if (is_not_timeout) {
 8001d32:	b11c      	cbz	r4, 8001d3c <gd5f_wait_busy+0x50>
    dev->gd5f_busy = 0;
 8001d34:	2000      	movs	r0, #0
 8001d36:	75e8      	strb	r0, [r5, #23]
    return GD5F_OK;
    }
return GD5F_DEV_TIMEOUT;
}
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
return GD5F_DEV_TIMEOUT;
 8001d3c:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001d40:	e7fa      	b.n	8001d38 <gd5f_wait_busy+0x4c>
 8001d42:	bf00      	nop
 8001d44:	e0001000 	.word	0xe0001000
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <gd5f_reset>:
GD5F_RESULT gd5f_reset(gd5f* dev){
 8001d50:	b510      	push	{r4, lr}
 8001d52:	4604      	mov	r4, r0
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001d54:	21ff      	movs	r1, #255	; 0xff
 8001d56:	f7ff fcd1 	bl	80016fc <gd5f_spi_sendbyte>
 8001d5a:	b948      	cbnz	r0, 8001d70 <gd5f_reset+0x20>
    GD5F_WAIT_BUSY();
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ffc5 	bl	8001cec <gd5f_wait_busy>
 8001d62:	4603      	mov	r3, r0
 8001d64:	b908      	cbnz	r0, 8001d6a <gd5f_reset+0x1a>
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd10      	pop	{r4, pc}
    GD5F_WAIT_BUSY();
 8001d6a:	f06f 037b 	mvn.w	r3, #123	; 0x7b
 8001d6e:	e7fa      	b.n	8001d66 <gd5f_reset+0x16>
	if (gd5f_spi_sendbyte(dev, GD5F_RESET) != GD5F_OK) return GD5F_ERROR;
 8001d70:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d74:	e7f7      	b.n	8001d66 <gd5f_reset+0x16>

08001d76 <gd5f_get_id>:


GD5F_RESULT gd5f_get_id(gd5f* dev)
{
 8001d76:	b500      	push	{lr}
 8001d78:	b085      	sub	sp, #20
return gd5f_cmd(dev, GD5F_READ_ID, GD5F_ID_ADDR_MID_DID, 1, (uint8_t*)&dev->devid, 2, 0);
 8001d7a:	f100 0315 	add.w	r3, r0, #21
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	2102      	movs	r1, #2
 8001d84:	9101      	str	r1, [sp, #4]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	219f      	movs	r1, #159	; 0x9f
 8001d8c:	f7ff fd64 	bl	8001858 <gd5f_cmd>
}
 8001d90:	b005      	add	sp, #20
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4

08001d96 <gd5f_random_read_page>:
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^
//       block number (0..1023)  | page num in block (0..63)
//

GD5F_RESULT gd5f_random_read_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *rxbuf, uint16_t datalen)
{
 8001d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460f      	mov	r7, r1
 8001da0:	4615      	mov	r5, r2
 8001da2:	4698      	mov	r8, r3
 8001da4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 GD5F_WAIT_BUSY();
 8001da8:	f7ff ffa0 	bl	8001cec <gd5f_wait_busy>
 8001dac:	bb08      	cbnz	r0, 8001df2 <gd5f_random_read_page+0x5c>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001dae:	2301      	movs	r3, #1
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2303      	movs	r3, #3
 8001dba:	463a      	mov	r2, r7
 8001dbc:	2113      	movs	r1, #19
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff fd4a 	bl	8001858 <gd5f_cmd>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001dc4:	b9c0      	cbnz	r0, 8001df8 <gd5f_random_read_page+0x62>
 GD5F_WAIT_BUSY();
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff ff90 	bl	8001cec <gd5f_wait_busy>
 8001dcc:	b9b8      	cbnz	r0, 8001dfe <gd5f_random_read_page+0x68>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001dce:	1973      	adds	r3, r6, r5
 8001dd0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001dd4:	da16      	bge.n	8001e04 <gd5f_random_read_page+0x6e>
return gd5f_cmd(dev, GD5F_PAGE_READ_FROM_CACHE, (byte_addr << 8), 3, rxbuf, datalen, 0);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	9601      	str	r6, [sp, #4]
 8001ddc:	f8cd 8000 	str.w	r8, [sp]
 8001de0:	2303      	movs	r3, #3
 8001de2:	022a      	lsls	r2, r5, #8
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff fd36 	bl	8001858 <gd5f_cmd>
 return gd5f_read_from_cache(dev, start_bytenum, rxbuf, datalen);
 gd5f_get_features(dev);
}
 8001dec:	b004      	add	sp, #16
 8001dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 GD5F_WAIT_BUSY();
 8001df2:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001df6:	e7f9      	b.n	8001dec <gd5f_random_read_page+0x56>
 if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001df8:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001dfc:	e7f6      	b.n	8001dec <gd5f_random_read_page+0x56>
 GD5F_WAIT_BUSY();
 8001dfe:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001e02:	e7f3      	b.n	8001dec <gd5f_random_read_page+0x56>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001e04:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 8001e08:	e7f0      	b.n	8001dec <gd5f_random_read_page+0x56>

08001e0a <gd5f_random_write_page>:

GD5F_RESULT gd5f_random_write_page(gd5f* dev, uint32_t page_num, uint16_t start_bytenum, uint8_t *txbuf, uint16_t datalen)
{
 8001e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	4616      	mov	r6, r2
 8001e16:	4698      	mov	r8, r3
 8001e18:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    GD5F_WAIT_BUSY();
 8001e1c:	f7ff ff66 	bl	8001cec <gd5f_wait_busy>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d13d      	bne.n	8001ea0 <gd5f_random_write_page+0x96>
return gd5f_cmd(dev, GD5F_PAGE_READ_TO_CACHE, pageaddress, 3, NULL, 0, 1);
 8001e24:	2301      	movs	r3, #1
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2303      	movs	r3, #3
 8001e30:	462a      	mov	r2, r5
 8001e32:	2113      	movs	r1, #19
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fd0f 	bl	8001858 <gd5f_cmd>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e3a:	bba0      	cbnz	r0, 8001ea6 <gd5f_random_write_page+0x9c>
    GD5F_WAIT_BUSY();
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff55 	bl	8001cec <gd5f_wait_busy>
 8001e42:	bb98      	cbnz	r0, 8001eac <gd5f_random_write_page+0xa2>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fd02 	bl	800184e <gd5f_write_enable>
 8001e4a:	bb90      	cbnz	r0, 8001eb2 <gd5f_random_write_page+0xa8>
    GD5F_WAIT_BUSY();
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff ff4d 	bl	8001cec <gd5f_wait_busy>
 8001e52:	bb88      	cbnz	r0, 8001eb8 <gd5f_random_write_page+0xae>
if ((datalen + byte_addr) > 2175) {return GD5F_INVALID_ARGUMENT;}
 8001e54:	19bb      	adds	r3, r7, r6
 8001e56:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
 8001e5a:	da30      	bge.n	8001ebe <gd5f_random_write_page+0xb4>
return gd5f_cmd(dev, GD5F_PROGRAM_LOAD_RANDOM_DATA, byte_addr, 2, txbuf, datalen, 1);
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	9701      	str	r7, [sp, #4]
 8001e62:	f8cd 8000 	str.w	r8, [sp]
 8001e66:	2302      	movs	r3, #2
 8001e68:	4632      	mov	r2, r6
 8001e6a:	2184      	movs	r1, #132	; 0x84
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fcf3 	bl	8001858 <gd5f_cmd>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e72:	bb38      	cbnz	r0, 8001ec4 <gd5f_random_write_page+0xba>
return gd5f_cmd(dev, GD5F_PROGRAM_EXECUTE, pageaddress, 3, NULL, 0, 1);
 8001e74:	2301      	movs	r3, #1
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2303      	movs	r3, #3
 8001e80:	462a      	mov	r2, r5
 8001e82:	2110      	movs	r1, #16
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff fce7 	bl	8001858 <gd5f_cmd>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001e8a:	b9f0      	cbnz	r0, 8001eca <gd5f_random_write_page+0xc0>
    GD5F_WAIT_BUSY();
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff ff2d 	bl	8001cec <gd5f_wait_busy>
 8001e92:	b9e8      	cbnz	r0, 8001ed0 <gd5f_random_write_page+0xc6>
    return gd5f_wait_busy(dev);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff29 	bl	8001cec <gd5f_wait_busy>
    gd5f_get_features(dev);
}
 8001e9a:	b004      	add	sp, #16
 8001e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GD5F_WAIT_BUSY();
 8001ea0:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ea4:	e7f9      	b.n	8001e9a <gd5f_random_write_page+0x90>
    if (gd5f_read_to_cache(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001ea6:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001eaa:	e7f6      	b.n	8001e9a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001eac:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001eb0:	e7f3      	b.n	8001e9a <gd5f_random_write_page+0x90>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001eb2:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001eb6:	e7f0      	b.n	8001e9a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001eb8:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ebc:	e7ed      	b.n	8001e9a <gd5f_random_write_page+0x90>
    if (gd5f_program_load_random(dev, start_bytenum, txbuf, datalen) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001ebe:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ec2:	e7ea      	b.n	8001e9a <gd5f_random_write_page+0x90>
 8001ec4:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ec8:	e7e7      	b.n	8001e9a <gd5f_random_write_page+0x90>
    if (gd5f_program_execute(dev, page_num) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001eca:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ece:	e7e4      	b.n	8001e9a <gd5f_random_write_page+0x90>
    GD5F_WAIT_BUSY();
 8001ed0:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001ed4:	e7e1      	b.n	8001e9a <gd5f_random_write_page+0x90>

08001ed6 <gd5f_blockerase>:
    GD5F_WAIT_BUSY();
    return gd5f_get_features(dev);
}

GD5F_RESULT gd5f_blockerase(gd5f* dev, uint32_t block_num)
{
 8001ed6:	b530      	push	{r4, r5, lr}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	4605      	mov	r5, r0
 8001edc:	460c      	mov	r4, r1
    GD5F_WAIT_BUSY();
 8001ede:	f7ff ff05 	bl	8001cec <gd5f_wait_busy>
 8001ee2:	b9c8      	cbnz	r0, 8001f18 <gd5f_blockerase+0x42>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f7ff fcb2 	bl	800184e <gd5f_write_enable>
 8001eea:	b9c0      	cbnz	r0, 8001f1e <gd5f_blockerase+0x48>
    GD5F_WAIT_BUSY();
 8001eec:	4628      	mov	r0, r5
 8001eee:	f7ff fefd 	bl	8001cec <gd5f_wait_busy>
 8001ef2:	b9b8      	cbnz	r0, 8001f24 <gd5f_blockerase+0x4e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001ef4:	01a2      	lsls	r2, r4, #6
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	2301      	movs	r3, #1
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2303      	movs	r3, #3
 8001f04:	21d8      	movs	r1, #216	; 0xd8
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fca6 	bl	8001858 <gd5f_cmd>
 8001f0c:	b968      	cbnz	r0, 8001f2a <gd5f_blockerase+0x54>
    return gd5f_wait_busy(dev);
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f7ff feec 	bl	8001cec <gd5f_wait_busy>
}
 8001f14:	b005      	add	sp, #20
 8001f16:	bd30      	pop	{r4, r5, pc}
    GD5F_WAIT_BUSY();
 8001f18:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f1c:	e7fa      	b.n	8001f14 <gd5f_blockerase+0x3e>
    if (gd5f_write_enable(dev) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001f1e:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f22:	e7f7      	b.n	8001f14 <gd5f_blockerase+0x3e>
    GD5F_WAIT_BUSY();
 8001f24:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f28:	e7f4      	b.n	8001f14 <gd5f_blockerase+0x3e>
    if (gd5f_cmd(dev, GD5F_BLOCK_ERASE, ((block_num << 6) & 0x0000FFC0), 3, NULL, 0, 1) != GD5F_OK) {return GD5F_DEV_TIMEOUT;}
 8001f2a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f2e:	e7f1      	b.n	8001f14 <gd5f_blockerase+0x3e>

08001f30 <gd5f_unblock>:

GD5F_RESULT gd5f_unblock(gd5f* dev)
{
 8001f30:	b510      	push	{r4, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 8001f36:	f7ff fed9 	bl	8001cec <gd5f_wait_busy>
 8001f3a:	b9f0      	cbnz	r0, 8001f7a <gd5f_unblock+0x4a>
gd5f_get_features(dev);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff fe21 	bl	8001b84 <gd5f_get_features>
uint8_t feature_byte = 0x00; //dev->registers.protection & ((~(GD5F_PROTECTION_BP0|GD5F_PROTECTION_BP1|GD5F_PROTECTION_BP2))&(~GD5F_PROTECTION_RESERVED));
 8001f42:	2300      	movs	r3, #0
 8001f44:	f88d 3017 	strb.w	r3, [sp, #23]
   volatile GD5F_RESULT res = 0;
 8001f48:	f88d 3016 	strb.w	r3, [sp, #22]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9302      	str	r3, [sp, #8]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	f10d 0217 	add.w	r2, sp, #23
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	22a0      	movs	r2, #160	; 0xa0
 8001f5a:	211f      	movs	r1, #31
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff fc7b 	bl	8001858 <gd5f_cmd>
 8001f62:	f88d 0016 	strb.w	r0, [sp, #22]
   return res;
 8001f66:	f89d 3016 	ldrb.w	r3, [sp, #22]
gd5f_set_feature(dev, GD5F_PROTECTION, &feature_byte);

gd5f_get_features(dev);
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fe0a 	bl	8001b84 <gd5f_get_features>
return gd5f_wait_busy(dev);
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff febb 	bl	8001cec <gd5f_wait_busy>
}
 8001f76:	b006      	add	sp, #24
 8001f78:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 8001f7a:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001f7e:	e7fa      	b.n	8001f76 <gd5f_unblock+0x46>

08001f80 <gd5f_ecc_on>:
gd5f_get_features(dev);
return gd5f_wait_busy(dev);
}

GD5F_RESULT gd5f_ecc_on(gd5f* dev)
{
 8001f80:	b510      	push	{r4, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	4604      	mov	r4, r0
GD5F_WAIT_BUSY();
 8001f86:	f7ff feb1 	bl	8001cec <gd5f_wait_busy>
 8001f8a:	bb20      	cbnz	r0, 8001fd6 <gd5f_ecc_on+0x56>
gd5f_get_features(dev);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fdf9 	bl	8001b84 <gd5f_get_features>
dev->registers.feature_1 |= GD5F_FEATURE_1_ECC_EN;
 8001f92:	7ce3      	ldrb	r3, [r4, #19]
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	4622      	mov	r2, r4
 8001f9a:	f802 3f13 	strb.w	r3, [r2, #19]!
   volatile GD5F_RESULT res = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f88d 3017 	strb.w	r3, [sp, #23]
    res =  gd5f_cmd(dev, GD5F_SET_FEATURES, feature_reg, 1, feature_byte, 1, 1);
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	22b0      	movs	r2, #176	; 0xb0
 8001fae:	211f      	movs	r1, #31
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fc51 	bl	8001858 <gd5f_cmd>
 8001fb6:	f88d 0017 	strb.w	r0, [sp, #23]
   return res;
 8001fba:	f89d 3017 	ldrb.w	r3, [sp, #23]
gd5f_set_feature(dev, GD5F_FEATURE_1, &dev->registers.feature_1);
GD5F_WAIT_BUSY();
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff fe94 	bl	8001cec <gd5f_wait_busy>
 8001fc4:	b950      	cbnz	r0, 8001fdc <gd5f_ecc_on+0x5c>
gd5f_get_features(dev);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fddc 	bl	8001b84 <gd5f_get_features>
return gd5f_wait_busy(dev);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff fe8d 	bl	8001cec <gd5f_wait_busy>
}
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd10      	pop	{r4, pc}
GD5F_WAIT_BUSY();
 8001fd6:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001fda:	e7fa      	b.n	8001fd2 <gd5f_ecc_on+0x52>
GD5F_WAIT_BUSY();
 8001fdc:	f06f 007b 	mvn.w	r0, #123	; 0x7b
 8001fe0:	e7f7      	b.n	8001fd2 <gd5f_ecc_on+0x52>
	...

08001fe4 <gd5f_init>:
{
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	4604      	mov	r4, r0
volatile GD5F_RESULT res = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f88d 3007 	strb.w	r3, [sp, #7]
    dev->hw_config.spi = SPI1;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <gd5f_init+0x60>)
 8001ff2:	6003      	str	r3, [r0, #0]
    dev->hw_config.csn_port = FLASH_CSN_GPIO_Port;
 8001ff4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001ff8:	6083      	str	r3, [r0, #8]
    dev->hw_config.csn_pin = FLASH_CSN_Pin;
 8001ffa:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ffe:	60c3      	str	r3, [r0, #12]
    dev->hw_config.spi_retry_count = GD5F_OP_TIMEOUT;
 8002000:	f242 7310 	movw	r3, #10000	; 0x2710
 8002004:	6043      	str	r3, [r0, #4]
    res |= gd5f_get_id(dev);
 8002006:	f7ff feb6 	bl	8001d76 <gd5f_get_id>
 800200a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800200e:	b25b      	sxtb	r3, r3
 8002010:	4318      	orrs	r0, r3
 8002012:	b240      	sxtb	r0, r0
 8002014:	f88d 0007 	strb.w	r0, [sp, #7]
    res |= gd5f_get_features(dev);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fdb3 	bl	8001b84 <gd5f_get_features>
 800201e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4318      	orrs	r0, r3
 8002026:	b240      	sxtb	r0, r0
 8002028:	f88d 0007 	strb.w	r0, [sp, #7]
    gd5f_unblock(dev);
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff7f 	bl	8001f30 <gd5f_unblock>
    gd5f_ecc_on(dev);
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff ffa4 	bl	8001f80 <gd5f_ecc_on>
	return res;
 8002038:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800203c:	b240      	sxtb	r0, r0
 800203e:	b002      	add	sp, #8
 8002040:	bd10      	pop	{r4, pc}
 8002042:	bf00      	nop
 8002044:	40013000 	.word	0x40013000

08002048 <LCD1602A_WaitReady>:
{
	LL_GPIO_ResetOutputPin(LCD_DATA_PORT, LCD_BUS_MASK);
}

void LCD1602A_WaitReady(void)
{
 8002048:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800204a:	4a59      	ldr	r2, [pc, #356]	; (80021b0 <LCD1602A_WaitReady+0x168>)
 800204c:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002050:	6153      	str	r3, [r2, #20]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	6151      	str	r1, [r2, #20]
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002056:	6810      	ldr	r0, [r2, #0]
 8002058:	f248 0380 	movw	r3, #32896	; 0x8080
 800205c:	fa93 f4a3 	rbit	r4, r3
 8002060:	fab4 f484 	clz	r4, r4
 8002064:	00a4      	lsls	r4, r4, #2
 8002066:	250f      	movs	r5, #15
 8002068:	fa05 f404 	lsl.w	r4, r5, r4
 800206c:	ea20 0004 	bic.w	r0, r0, r4
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	2408      	movs	r4, #8
 800207c:	fa04 f303 	lsl.w	r3, r4, r3
 8002080:	4303      	orrs	r3, r0
 8002082:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002084:	68d0      	ldr	r0, [r2, #12]
 8002086:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800208a:	fa91 f3a1 	rbit	r3, r1
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4303      	orrs	r3, r0
 800209a:	60d3      	str	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <LCD1602A_WaitReady+0x16c>)
 800209e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020a2:	611a      	str	r2, [r3, #16]
	uint8_t Busy_Flag = 0xFF;
	uint16_t retrycount = 0xFFFF;
 80020a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <LCD1602A_WaitReady+0x168>)
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	611a      	str	r2, [r3, #16]
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 80020b2:	685d      	ldr	r5, [r3, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020b4:	f001 fc72 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80020b8:	4a40      	ldr	r2, [pc, #256]	; (80021bc <LCD1602A_WaitReady+0x174>)
 80020ba:	fba2 3200 	umull	r3, r2, r2, r0
 80020be:	0c92      	lsrs	r2, r2, #18
 80020c0:	0052      	lsls	r2, r2, #1

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	1b5b      	subs	r3, r3, r5
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d3fa      	bcc.n	80020c2 <LCD1602A_WaitReady+0x7a>
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <LCD1602A_WaitReady+0x168>)
 80020ce:	689d      	ldr	r5, [r3, #8]
 80020d0:	43ed      	mvns	r5, r5
 80020d2:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020da:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 80020de:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80020e0:	f001 fc5c 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <LCD1602A_WaitReady+0x174>)
 80020e6:	fba3 3000 	umull	r3, r0, r3, r0
 80020ea:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	1b9b      	subs	r3, r3, r6
 80020f2:	4283      	cmp	r3, r0
 80020f4:	d3fa      	bcc.n	80020ec <LCD1602A_WaitReady+0xa4>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020f6:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <LCD1602A_WaitReady+0x168>)
 80020f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fc:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 8002100:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002102:	f001 fc4b 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <LCD1602A_WaitReady+0x174>)
 8002108:	fba2 3200 	umull	r3, r2, r2, r0
 800210c:	0c92      	lsrs	r2, r2, #18
 800210e:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	1b9b      	subs	r3, r3, r6
 8002116:	4293      	cmp	r3, r2
 8002118:	d3fa      	bcc.n	8002110 <LCD1602A_WaitReady+0xc8>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <LCD1602A_WaitReady+0x168>)
 800211c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002120:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 8002124:	685e      	ldr	r6, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002126:	f001 fc39 	bl	800399c <HAL_RCC_GetHCLKFreq>
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <LCD1602A_WaitReady+0x174>)
 800212c:	fba3 3000 	umull	r3, r0, r3, r0
 8002130:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <LCD1602A_WaitReady+0x170>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	1b9b      	subs	r3, r3, r6
 8002138:	4283      	cmp	r3, r0
 800213a:	d3fa      	bcc.n	8002132 <LCD1602A_WaitReady+0xea>
			LCD1602A_Delay_us(2);
			Busy_Flag = (LL_GPIO_IsInputPinSet(LCD_PORT_D7, LCD_PIN_D7) > 0);
			LCD1602A_ResetPins(LCD_PORT_E, LCD_PIN_E);
			LCD1602A_Delay_us(1);
			LCD1602A_E_Strobe();
			retrycount --;
 800213c:	3c01      	subs	r4, #1
 800213e:	b2a4      	uxth	r4, r4
		}
	while (Busy_Flag && retrycount);
 8002140:	b90d      	cbnz	r5, 8002146 <LCD1602A_WaitReady+0xfe>
 8002142:	2c00      	cmp	r4, #0
 8002144:	d1b0      	bne.n	80020a8 <LCD1602A_WaitReady+0x60>
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <LCD1602A_WaitReady+0x168>)
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f248 0180 	movw	r1, #32896	; 0x8080
 800214e:	fa91 f0a1 	rbit	r0, r1
 8002152:	fab0 f080 	clz	r0, r0
 8002156:	0080      	lsls	r0, r0, #2
 8002158:	240f      	movs	r4, #15
 800215a:	fa04 f000 	lsl.w	r0, r4, r0
 800215e:	ea23 0300 	bic.w	r3, r3, r0
 8002162:	fa91 f0a1 	rbit	r0, r1
 8002166:	fab0 f080 	clz	r0, r0
 800216a:	0080      	lsls	r0, r0, #2
 800216c:	2401      	movs	r4, #1
 800216e:	fa04 f000 	lsl.w	r0, r4, r0
 8002172:	4303      	orrs	r3, r0
 8002174:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002176:	2480      	movs	r4, #128	; 0x80
 8002178:	6154      	str	r4, [r2, #20]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800217a:	68d0      	ldr	r0, [r2, #12]
 800217c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002180:	fa94 f4a4 	rbit	r4, r4
 8002184:	60d0      	str	r0, [r2, #12]
 8002186:	fa91 f0a1 	rbit	r0, r1
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800218a:	fab0 f080 	clz	r0, r0
 800218e:	0080      	lsls	r0, r0, #2
 8002190:	2404      	movs	r4, #4
 8002192:	fa04 f000 	lsl.w	r0, r4, r0
 8002196:	ea23 0300 	bic.w	r3, r3, r0
 800219a:	fa91 f1a1 	rbit	r1, r1
 800219e:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021a0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80021a4:	6153      	str	r3, [r2, #20]
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <LCD1602A_WaitReady+0x16c>)
 80021a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ac:	615a      	str	r2, [r3, #20]
	LCD1602A_SetPinDataOut(LCD_PORT_D7, LCD_PIN_D7);
	LCD1602A_ResetPins(LCD_DATA_PORT, LCD_PIN_MASK);
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
}
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40010800 	.word	0x40010800
 80021b8:	e0001000 	.word	0xe0001000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <LCD1602A_SendByte>:


//---Отсылка байта в дисплей---//

void LCD1602A_SendByte(char databyte, uint8_t isData)
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4604      	mov	r4, r0
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <LCD1602A_SendByte+0xc4>)
 80021c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80021d4:	615a      	str	r2, [r3, #20]

	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
	if (isData) LCD1602A_SetPins(LCD_PORT_RS, LCD_PIN_RS);
 80021d6:	b111      	cbz	r1, 80021de <LCD1602A_SendByte+0x1e>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <LCD1602A_SendByte+0xc8>)
 80021e4:	6113      	str	r3, [r2, #16]
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	6113      	str	r3, [r2, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <LCD1602A_SendByte+0xcc>)
 80021ee:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80021f0:	f001 fbd4 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <LCD1602A_SendByte+0xd0>)
 80021f6:	fba2 3200 	umull	r3, r2, r2, r0
 80021fa:	0c92      	lsrs	r2, r2, #18
 80021fc:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	1b5b      	subs	r3, r3, r5
 8002204:	4293      	cmp	r3, r2
 8002206:	d3fa      	bcc.n	80021fe <LCD1602A_SendByte+0x3e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <LCD1602A_SendByte+0xc8>)
 800220a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220e:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002212:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002214:	f001 fbc2 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <LCD1602A_SendByte+0xd0>)
 800221a:	fba3 3000 	umull	r3, r0, r3, r0
 800221e:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	1b5b      	subs	r3, r3, r5
 8002226:	4283      	cmp	r3, r0
 8002228:	d3fa      	bcc.n	8002220 <LCD1602A_SendByte+0x60>
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <LCD1602A_SendByte+0xc8>)
 800222c:	22f0      	movs	r2, #240	; 0xf0
 800222e:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002230:	0124      	lsls	r4, r4, #4
 8002232:	b2e4      	uxtb	r4, r4
 8002234:	611c      	str	r4, [r3, #16]
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <LCD1602A_SendByte+0xcc>)
 800223e:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002240:	f001 fbac 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <LCD1602A_SendByte+0xd0>)
 8002246:	fba2 3200 	umull	r3, r2, r2, r0
 800224a:	0c92      	lsrs	r2, r2, #18
 800224c:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	1b1b      	subs	r3, r3, r4
 8002254:	4293      	cmp	r3, r2
 8002256:	d3fa      	bcc.n	800224e <LCD1602A_SendByte+0x8e>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <LCD1602A_SendByte+0xc8>)
 800225a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225e:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002262:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002264:	f001 fb9a 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <LCD1602A_SendByte+0xd0>)
 800226a:	fba3 3000 	umull	r3, r0, r3, r0
 800226e:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <LCD1602A_SendByte+0xcc>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	1b1b      	subs	r3, r3, r4
 8002276:	4283      	cmp	r3, r0
 8002278:	d3fa      	bcc.n	8002270 <LCD1602A_SendByte+0xb0>
 800227a:	4b03      	ldr	r3, [pc, #12]	; (8002288 <LCD1602A_SendByte+0xc8>)
 800227c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8002280:	615a      	str	r2, [r3, #20]
	LCD1602A_ClearDataBus();
    //second halfbyte
	LCD1602A_SetPins(LCD_DATA_PORT, (((databyte & 0x0F) << 4U) << 8U));
	LCD1602A_E_Strobe();
	LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	40010800 	.word	0x40010800
 8002288:	40010c00 	.word	0x40010c00
 800228c:	e0001000 	.word	0xe0001000
 8002290:	431bde83 	.word	0x431bde83

08002294 <LCD1602A_SendCmdHalfByte>:

void LCD1602A_SendCmdHalfByte(char cmdbyte)
{
 8002294:	b510      	push	{r4, lr}
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <LCD1602A_SendCmdHalfByte+0x68>)
 8002298:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80022a6:	615a      	str	r2, [r3, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80022a8:	0100      	lsls	r0, r0, #4
 80022aa:	b2c0      	uxtb	r0, r0
 80022ac:	6118      	str	r0, [r3, #16]
 80022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b2:	611a      	str	r2, [r3, #16]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022b6:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80022b8:	f001 fb70 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80022bc:	4a11      	ldr	r2, [pc, #68]	; (8002304 <LCD1602A_SendCmdHalfByte+0x70>)
 80022be:	fba2 3200 	umull	r3, r2, r2, r0
 80022c2:	0c92      	lsrs	r2, r2, #18
 80022c4:	0052      	lsls	r2, r2, #1
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	1b1b      	subs	r3, r3, r4
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d3fa      	bcc.n	80022c6 <LCD1602A_SendCmdHalfByte+0x32>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <LCD1602A_SendCmdHalfByte+0x74>)
 80022d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d6:	615a      	str	r2, [r3, #20]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022da:	685c      	ldr	r4, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80022dc:	f001 fb5e 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <LCD1602A_SendCmdHalfByte+0x70>)
 80022e2:	fba3 3000 	umull	r3, r0, r3, r0
 80022e6:	0c80      	lsrs	r0, r0, #18
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <LCD1602A_SendCmdHalfByte+0x6c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	1b1b      	subs	r3, r3, r4
 80022ee:	4283      	cmp	r3, r0
 80022f0:	d3fa      	bcc.n	80022e8 <LCD1602A_SendCmdHalfByte+0x54>
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <LCD1602A_SendCmdHalfByte+0x74>)
 80022f4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80022f8:	615a      	str	r2, [r3, #20]

    //second halfbyte, lower half only 0b----XXXX
    LCD1602A_SetPins(LCD_DATA_PORT, (((cmdbyte & 0x0F) << 4U) << 8U));
    LCD1602A_E_Strobe();
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);
}
 80022fa:	bd10      	pop	{r4, pc}
 80022fc:	40010800 	.word	0x40010800
 8002300:	e0001000 	.word	0xe0001000
 8002304:	431bde83 	.word	0x431bde83
 8002308:	40010c00 	.word	0x40010c00

0800230c <LCD1602A_SetCursorPos>:
{
	LCD1602A_SendByte(databyte, DATA);
}

void LCD1602A_SetCursorPos(char Row, char Col)
{
 800230c:	b510      	push	{r4, lr}
	   char address;
	   if (Row == 0)
 800230e:	4604      	mov	r4, r0
 8002310:	b100      	cbz	r0, 8002314 <LCD1602A_SetCursorPos+0x8>
	   address = 0;
	   else
	   address = 0x40;
 8002312:	2440      	movs	r4, #64	; 0x40
	   address |= Col;
 8002314:	430c      	orrs	r4, r1
	   LCD1602A_WaitReady();
 8002316:	f7ff fe97 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 800231a:	2100      	movs	r1, #0
 800231c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 8002320:	f7ff ff4e 	bl	80021c0 <LCD1602A_SendByte>
	   LCD1602A_SendCmd((LCD_SET_DDRAM_ADDR | address));
}
 8002324:	bd10      	pop	{r4, pc}

08002326 <LCD1602A_ClearScreen>:


//---Очистка дисплея---//
void LCD1602A_ClearScreen(void)
{
 8002326:	b508      	push	{r3, lr}
	LCD1602A_WaitReady();
 8002328:	f7ff fe8e 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 800232c:	2100      	movs	r1, #0
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ff46 	bl	80021c0 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_CLEAR_DISPLAY);
	LCD1602A_WaitReady();
 8002334:	f7ff fe88 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002338:	2100      	movs	r1, #0
 800233a:	2002      	movs	r0, #2
 800233c:	f7ff ff40 	bl	80021c0 <LCD1602A_SendByte>
	LCD1602A_SendCmd(LCD_RETURN_HOME);
	LCD1602A_WaitReady();
 8002340:	f7ff fe82 	bl	8002048 <LCD1602A_WaitReady>
}
 8002344:	bd08      	pop	{r3, pc}

08002346 <LCD1602A_EntryModeSet>:


void LCD1602A_EntryModeSet(uint8_t left_to_right, uint8_t shift_all_display)
{
 8002346:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_ENTRY_MODE_SET|(left_to_right << LCD_SHIFT_RIGHT)|(shift_all_display));
 8002348:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 800234c:	b2e4      	uxtb	r4, r4
 800234e:	f044 0404 	orr.w	r4, r4, #4
	LCD1602A_WaitReady();
 8002352:	f7ff fe79 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002356:	2100      	movs	r1, #0
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff ff31 	bl	80021c0 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 800235e:	bd10      	pop	{r4, pc}

08002360 <LCD1602A_DisplayControl>:

void LCD1602A_DisplayControl(uint8_t display_state, uint8_t cursor_show, uint8_t cursor_blink)
{
 8002360:	b510      	push	{r4, lr}
	uint8_t lcd_cmd = (LCD_DISPLAY_CONTROL|(display_state << LCD_DISPLAY_ON)|(cursor_show << LCD_CURSOR_SHOW)|(cursor_blink));
 8002362:	0080      	lsls	r0, r0, #2
 8002364:	f040 0008 	orr.w	r0, r0, #8
 8002368:	b240      	sxtb	r0, r0
 800236a:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 800236e:	b249      	sxtb	r1, r1
 8002370:	430a      	orrs	r2, r1
 8002372:	b2d4      	uxtb	r4, r2
	LCD1602A_WaitReady();
 8002374:	f7ff fe68 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(cmdbyte, CMD);
 8002378:	2100      	movs	r1, #0
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ff20 	bl	80021c0 <LCD1602A_SendByte>
	LCD1602A_SendCmd(lcd_cmd);
}
 8002380:	bd10      	pop	{r4, pc}

08002382 <LCD1602A_FunctionSet>:




void LCD1602A_FunctionSet(uint8_t display_8bit, uint8_t two_lines, uint8_t bigfont)
{
 8002382:	b508      	push	{r3, lr}
	uint8_t lcd_cmd = (LCD_FUNCTION_SET|(display_8bit << LCD_8_BIT_MODE)|(two_lines << LCD_2_LINES)|(bigfont << LCD_FONT_SIZE_BIG));
 8002384:	0100      	lsls	r0, r0, #4
 8002386:	f040 0020 	orr.w	r0, r0, #32
 800238a:	b240      	sxtb	r0, r0
 800238c:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 8002390:	b240      	sxtb	r0, r0
 8002392:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
	LCD1602A_SendByte(cmdbyte, CMD);
 8002396:	2100      	movs	r1, #0
 8002398:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800239c:	f7ff ff10 	bl	80021c0 <LCD1602A_SendByte>
    LCD1602A_SendCmd(lcd_cmd);
}
 80023a0:	bd08      	pop	{r3, pc}

080023a2 <LCD1602A_DDRAM_Set>:
	uint8_t lcd_cmd = (LCD_SET_SGRAM_ADDR|(cgram_address & LCD_SGRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}

void LCD1602A_DDRAM_Set(uint8_t cgram_address)
{
 80023a2:	b508      	push	{r3, lr}
	LCD1602A_SendByte(cmdbyte, CMD);
 80023a4:	2100      	movs	r1, #0
 80023a6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80023aa:	f7ff ff09 	bl	80021c0 <LCD1602A_SendByte>
	uint8_t lcd_cmd = (LCD_SET_DDRAM_ADDR|(cgram_address & LCD_DDRAM_MASK));
    LCD1602A_SendCmd(lcd_cmd);
}
 80023ae:	bd08      	pop	{r3, pc}

080023b0 <LCD1602A_4BIT_Preinit>:




void LCD1602A_4BIT_Preinit(void)
{
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <LCD1602A_4BIT_Preinit+0x168>)
 80023b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023b8:	615a      	str	r2, [r3, #20]
 80023ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023be:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80023c2:	615a      	str	r2, [r3, #20]
	LCD1602A_ResetPins(LCD_PORT_RW, LCD_PIN_RW);
    LCD1602A_ResetPins(LCD_OUT_PORT, LCD_PIN_MASK);

	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f7ff ff65 	bl	8002294 <LCD1602A_SendCmdHalfByte>
 80023ca:	f241 0404 	movw	r4, #4100	; 0x1004
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80023d0:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023d2:	f001 fae3 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80023d6:	4b52      	ldr	r3, [pc, #328]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 80023d8:	fba3 3000 	umull	r3, r0, r3, r0
 80023dc:	0c80      	lsrs	r0, r0, #18
 80023de:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	1b5b      	subs	r3, r3, r5
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	d3fa      	bcc.n	80023e2 <LCD1602A_4BIT_Preinit+0x32>
	LCD1602A_Delay_us(4100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 80023ec:	2003      	movs	r0, #3
 80023ee:	f7ff ff51 	bl	8002294 <LCD1602A_SendCmdHalfByte>
 80023f2:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80023f6:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023f8:	f001 fad0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80023fc:	4b48      	ldr	r3, [pc, #288]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 80023fe:	fba3 3000 	umull	r3, r0, r3, r0
 8002402:	0c80      	lsrs	r0, r0, #18
 8002404:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002408:	4b44      	ldr	r3, [pc, #272]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	1b5b      	subs	r3, r3, r5
 800240e:	42a3      	cmp	r3, r4
 8002410:	d3fa      	bcc.n	8002408 <LCD1602A_4BIT_Preinit+0x58>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_STAGE_0);
 8002412:	2003      	movs	r0, #3
 8002414:	f7ff ff3e 	bl	8002294 <LCD1602A_SendCmdHalfByte>
 8002418:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 800241c:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800241e:	f001 fabd 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 8002424:	fba3 3000 	umull	r3, r0, r3, r0
 8002428:	0c80      	lsrs	r0, r0, #18
 800242a:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	1b5b      	subs	r3, r3, r5
 8002434:	42a3      	cmp	r3, r4
 8002436:	d3fa      	bcc.n	800242e <LCD1602A_4BIT_Preinit+0x7e>
	LCD1602A_Delay_us(100);
	LCD1602A_SendCmdHalfByte(LCD_INIT_4_BIT);
 8002438:	2002      	movs	r0, #2
 800243a:	f7ff ff2b 	bl	8002294 <LCD1602A_SendCmdHalfByte>
 800243e:	2464      	movs	r4, #100	; 0x64
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 8002442:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002444:	f001 faaa 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 800244a:	fba3 3000 	umull	r3, r0, r3, r0
 800244e:	0c80      	lsrs	r0, r0, #18
 8002450:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	1b5b      	subs	r3, r3, r5
 800245a:	42a3      	cmp	r3, r4
 800245c:	d3fa      	bcc.n	8002454 <LCD1602A_4BIT_Preinit+0xa4>
	LCD1602A_Delay_us(100);
	LCD1602A_FunctionSet(OFF, ON, OFF);
 800245e:	2200      	movs	r2, #0
 8002460:	2101      	movs	r1, #1
 8002462:	4610      	mov	r0, r2
 8002464:	f7ff ff8d 	bl	8002382 <LCD1602A_FunctionSet>
 8002468:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800246a:	4b2c      	ldr	r3, [pc, #176]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 800246c:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800246e:	f001 fa95 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 8002474:	fba3 3000 	umull	r3, r0, r3, r0
 8002478:	0c80      	lsrs	r0, r0, #18
 800247a:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	1b5b      	subs	r3, r3, r5
 8002484:	42a3      	cmp	r3, r4
 8002486:	d3fa      	bcc.n	800247e <LCD1602A_4BIT_Preinit+0xce>
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, OFF, OFF);
 8002488:	2200      	movs	r2, #0
 800248a:	4611      	mov	r1, r2
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff ff67 	bl	8002360 <LCD1602A_DisplayControl>
 8002492:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 8002496:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002498:	f001 fa80 	bl	800399c <HAL_RCC_GetHCLKFreq>
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 800249e:	fba3 3000 	umull	r3, r0, r3, r0
 80024a2:	0c80      	lsrs	r0, r0, #18
 80024a4:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1b5b      	subs	r3, r3, r5
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	d3fa      	bcc.n	80024a8 <LCD1602A_4BIT_Preinit+0xf8>
	LCD1602A_SendByte(cmdbyte, CMD);
 80024b2:	2100      	movs	r1, #0
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe83 	bl	80021c0 <LCD1602A_SendByte>
 80024ba:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80024be:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80024c0:	f001 fa6c 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 80024c6:	fba3 3000 	umull	r3, r0, r3, r0
 80024ca:	0c80      	lsrs	r0, r0, #18
 80024cc:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	1b5b      	subs	r3, r3, r5
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	d3fa      	bcc.n	80024d0 <LCD1602A_4BIT_Preinit+0x120>
	LCD1602A_Delay_us(80);
	LCD1602A_SendCmd(0x01);
	LCD1602A_Delay_us(80);
	LCD1602A_DisplayControl(ON, ON, ON);
 80024da:	2201      	movs	r2, #1
 80024dc:	4611      	mov	r1, r2
 80024de:	4610      	mov	r0, r2
 80024e0:	f7ff ff3e 	bl	8002360 <LCD1602A_DisplayControl>
 80024e4:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80024e8:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80024ea:	f001 fa57 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <LCD1602A_4BIT_Preinit+0x170>)
 80024f0:	fba3 3000 	umull	r3, r0, r3, r0
 80024f4:	0c80      	lsrs	r0, r0, #18
 80024f6:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <LCD1602A_4BIT_Preinit+0x16c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	1b5b      	subs	r3, r3, r5
 8002500:	42a3      	cmp	r3, r4
 8002502:	d3fa      	bcc.n	80024fa <LCD1602A_4BIT_Preinit+0x14a>
	LCD1602A_Delay_us(80);
	LCD1602A_EntryModeSet(ON, OFF);
 8002504:	2100      	movs	r1, #0
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff ff1d 	bl	8002346 <LCD1602A_EntryModeSet>
	LCD1602A_DDRAM_Set(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff ff48 	bl	80023a2 <LCD1602A_DDRAM_Set>
	LCD1602A_WaitReady();
 8002512:	f7ff fd99 	bl	8002048 <LCD1602A_WaitReady>
}
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	40010800 	.word	0x40010800
 800251c:	e0001000 	.word	0xe0001000
 8002520:	431bde83 	.word	0x431bde83

08002524 <LCD1602A_Init>:


void LCD1602A_Init(void)
{
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	f64e 2460 	movw	r4, #60000	; 0xea60
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <LCD1602A_Init+0x2c>)
 800252c:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800252e:	f001 fa35 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <LCD1602A_Init+0x30>)
 8002534:	fba3 3000 	umull	r3, r0, r3, r0
 8002538:	0c80      	lsrs	r0, r0, #18
 800253a:	fb04 f400 	mul.w	r4, r4, r0
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <LCD1602A_Init+0x2c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	1b5b      	subs	r3, r3, r5
 8002544:	42a3      	cmp	r3, r4
 8002546:	d3fa      	bcc.n	800253e <LCD1602A_Init+0x1a>
	LCD1602A_Delay_us(60000);
	LCD1602A_4BIT_Preinit();
 8002548:	f7ff ff32 	bl	80023b0 <LCD1602A_4BIT_Preinit>
}
 800254c:	bd38      	pop	{r3, r4, r5, pc}
 800254e:	bf00      	nop
 8002550:	e0001000 	.word	0xe0001000
 8002554:	431bde83 	.word	0x431bde83

08002558 <LCD1602A_PrintStr>:


//---Печать строки---//

void LCD1602A_PrintStr(char *Text)
{
 8002558:	b510      	push	{r4, lr}
 800255a:	4604      	mov	r4, r0
	 char *c;
	    c = Text;
	    while ((c != 0) && (*c != 0))
 800255c:	e006      	b.n	800256c <LCD1602A_PrintStr+0x14>
	    {
	    	LCD1602A_WaitReady();
 800255e:	f7ff fd73 	bl	8002048 <LCD1602A_WaitReady>
	LCD1602A_SendByte(databyte, DATA);
 8002562:	2101      	movs	r1, #1
 8002564:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002568:	f7ff fe2a 	bl	80021c0 <LCD1602A_SendByte>
	    while ((c != 0) && (*c != 0))
 800256c:	b114      	cbz	r4, 8002574 <LCD1602A_PrintStr+0x1c>
 800256e:	7823      	ldrb	r3, [r4, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f4      	bne.n	800255e <LCD1602A_PrintStr+0x6>
	    	LCD1602A_SendData(*c);
	        c++;
	    }
}
 8002574:	bd10      	pop	{r4, pc}
	...

08002578 <TIM_Delay_Callback>:
    }
    
}
 void TIM_Delay_Callback(void)
{
    tim_wait = 0;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <TIM_Delay_Callback+0x24>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <TIM_Delay_Callback+0x28>)
 8002580:	691b      	ldr	r3, [r3, #16]
    if(LL_TIM_IsActiveFlag_UPDATE(TIM_DELAY))
 8002582:	f013 0f01 	tst.w	r3, #1
 8002586:	d007      	beq.n	8002598 <TIM_Delay_Callback+0x20>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <TIM_Delay_Callback+0x28>)
 800258a:	f06f 0201 	mvn.w	r2, #1
 800258e:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]
      {
          LL_TIM_ClearFlag_UPDATE(TIM_DELAY);
          LL_TIM_DisableIT_UPDATE(TIM_DELAY);
      }
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200012f0 	.word	0x200012f0
 80025a0:	40001400 	.word	0x40001400

080025a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a4:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x20>)
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 f82f 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fe24 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7fe fdf0 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80025c0:	2000      	movs	r0, #0
 80025c2:	bd08      	pop	{r3, pc}
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <HAL_IncTick+0x10>)
 80025ca:	6811      	ldr	r1, [r2, #0]
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_IncTick+0x14>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	440b      	add	r3, r1
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20005c2c 	.word	0x20005c2c
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025e0:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_GetTick+0x8>)
 80025e2:	6818      	ldr	r0, [r3, #0]
}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20005c2c 	.word	0x20005c2c

080025ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff fff6 	bl	80025e0 <HAL_GetTick>
 80025f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80025fa:	d002      	beq.n	8002602 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_Delay+0x24>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002602:	f7ff ffed 	bl	80025e0 <HAL_GetTick>
 8002606:	1b40      	subs	r0, r0, r5
 8002608:	42a0      	cmp	r0, r4
 800260a:	d3fa      	bcc.n	8002602 <HAL_Delay+0x16>
  {
  }
}
 800260c:	bd38      	pop	{r3, r4, r5, pc}
 800260e:	bf00      	nop
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002618:	1ec3      	subs	r3, r0, #3
 800261a:	2b04      	cmp	r3, #4
 800261c:	d80f      	bhi.n	800263e <HAL_NVIC_SetPriorityGrouping+0x2a>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002620:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800262a:	0224      	lsls	r4, r4, #8
 800262c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8002632:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800263a:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800263c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800263e:	21a2      	movs	r1, #162	; 0xa2
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8002642:	f7fe fbba 	bl	8000dba <assert_failed>
 8002646:	e7ea      	b.n	800261e <HAL_NVIC_SetPriorityGrouping+0xa>
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	0800efa4 	.word	0x0800efa4

08002650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4605      	mov	r5, r0
 8002654:	460c      	mov	r4, r1
 8002656:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002658:	2a0f      	cmp	r2, #15
 800265a:	d825      	bhi.n	80026a8 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800265c:	2c0f      	cmp	r4, #15
 800265e:	d828      	bhi.n	80026b2 <HAL_NVIC_SetPriority+0x62>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_NVIC_SetPriority+0x80>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	f1c3 0207 	rsb	r2, r3, #7
 800266c:	2a04      	cmp	r2, #4
 800266e:	bf28      	it	cs
 8002670:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	1d19      	adds	r1, r3, #4
 8002674:	2906      	cmp	r1, #6
 8002676:	d921      	bls.n	80026bc <HAL_NVIC_SetPriority+0x6c>
 8002678:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	ea24 0402 	bic.w	r4, r4, r2
 8002686:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) < 0)
 8002692:	2d00      	cmp	r5, #0
 8002694:	db14      	blt.n	80026c0 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	0124      	lsls	r4, r4, #4
 8002698:	b2e4      	uxtb	r4, r4
 800269a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 800269e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80026a2:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80026a8:	21ba      	movs	r1, #186	; 0xba
 80026aa:	480a      	ldr	r0, [pc, #40]	; (80026d4 <HAL_NVIC_SetPriority+0x84>)
 80026ac:	f7fe fb85 	bl	8000dba <assert_failed>
 80026b0:	e7d4      	b.n	800265c <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80026b2:	21bb      	movs	r1, #187	; 0xbb
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <HAL_NVIC_SetPriority+0x84>)
 80026b6:	f7fe fb80 	bl	8000dba <assert_failed>
 80026ba:	e7d1      	b.n	8002660 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026bc:	2300      	movs	r3, #0
 80026be:	e7dc      	b.n	800267a <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	f005 050f 	and.w	r5, r5, #15
 80026c4:	0124      	lsls	r4, r4, #4
 80026c6:	b2e4      	uxtb	r4, r4
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_NVIC_SetPriority+0x88>)
 80026ca:	555c      	strb	r4, [r3, r5]
 80026cc:	e7eb      	b.n	80026a6 <HAL_NVIC_SetPriority+0x56>
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	0800efa4 	.word	0x0800efa4
 80026d8:	e000ed14 	.word	0xe000ed14

080026dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026de:	1e04      	subs	r4, r0, #0
 80026e0:	db08      	blt.n	80026f4 <HAL_NVIC_EnableIRQ+0x18>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026e2:	f004 021f 	and.w	r2, r4, #31
 80026e6:	0964      	lsrs	r4, r4, #5
 80026e8:	2301      	movs	r3, #1
 80026ea:	4093      	lsls	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_NVIC_EnableIRQ+0x24>)
 80026ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026f2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026f4:	21ce      	movs	r1, #206	; 0xce
 80026f6:	4803      	ldr	r0, [pc, #12]	; (8002704 <HAL_NVIC_EnableIRQ+0x28>)
 80026f8:	f7fe fb5f 	bl	8000dba <assert_failed>
 80026fc:	e7f1      	b.n	80026e2 <HAL_NVIC_EnableIRQ+0x6>
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100
 8002704:	0800efa4 	.word	0x0800efa4

08002708 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002708:	2800      	cmp	r0, #0
 800270a:	f000 80b8 	beq.w	800287e <HAL_DMA_Init+0x176>
{
 800270e:	b510      	push	{r4, lr}
 8002710:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002712:	6803      	ldr	r3, [r0, #0]
 8002714:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_DMA_Init+0x17c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 800271a:	3214      	adds	r2, #20
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002720:	3214      	adds	r2, #20
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002726:	3214      	adds	r2, #20
 8002728:	4293      	cmp	r3, r2
 800272a:	d01c      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 800272c:	3214      	adds	r2, #20
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002732:	3214      	adds	r2, #20
 8002734:	4293      	cmp	r3, r2
 8002736:	d016      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002738:	3214      	adds	r2, #20
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 800273e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002742:	4293      	cmp	r3, r2
 8002744:	d00f      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002746:	3214      	adds	r2, #20
 8002748:	4293      	cmp	r3, r2
 800274a:	d00c      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 800274c:	3214      	adds	r2, #20
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002752:	3214      	adds	r2, #20
 8002754:	4293      	cmp	r3, r2
 8002756:	d006      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 8002758:	3214      	adds	r2, #20
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <HAL_DMA_Init+0x5e>
 800275e:	21aa      	movs	r1, #170	; 0xaa
 8002760:	4849      	ldr	r0, [pc, #292]	; (8002888 <HAL_DMA_Init+0x180>)
 8002762:	f7fe fb2a 	bl	8000dba <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	b123      	cbz	r3, 8002774 <HAL_DMA_Init+0x6c>
 800276a:	2b10      	cmp	r3, #16
 800276c:	d002      	beq.n	8002774 <HAL_DMA_Init+0x6c>
 800276e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002772:	d156      	bne.n	8002822 <HAL_DMA_Init+0x11a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002774:	68a3      	ldr	r3, [r4, #8]
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d001      	beq.n	800277e <HAL_DMA_Init+0x76>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d156      	bne.n	800282c <HAL_DMA_Init+0x124>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800277e:	68e3      	ldr	r3, [r4, #12]
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d001      	beq.n	8002788 <HAL_DMA_Init+0x80>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d156      	bne.n	8002836 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	b12b      	cbz	r3, 8002798 <HAL_DMA_Init+0x90>
 800278c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002790:	d002      	beq.n	8002798 <HAL_DMA_Init+0x90>
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d153      	bne.n	8002840 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002798:	6963      	ldr	r3, [r4, #20]
 800279a:	b12b      	cbz	r3, 80027a8 <HAL_DMA_Init+0xa0>
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	d002      	beq.n	80027a8 <HAL_DMA_Init+0xa0>
 80027a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a6:	d150      	bne.n	800284a <HAL_DMA_Init+0x142>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80027a8:	69a3      	ldr	r3, [r4, #24]
 80027aa:	b10b      	cbz	r3, 80027b0 <HAL_DMA_Init+0xa8>
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d151      	bne.n	8002854 <HAL_DMA_Init+0x14c>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80027b0:	69e3      	ldr	r3, [r4, #28]
 80027b2:	b143      	cbz	r3, 80027c6 <HAL_DMA_Init+0xbe>
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d005      	beq.n	80027c6 <HAL_DMA_Init+0xbe>
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027be:	d002      	beq.n	80027c6 <HAL_DMA_Init+0xbe>
 80027c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c4:	d14b      	bne.n	800285e <HAL_DMA_Init+0x156>

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027c6:	6822      	ldr	r2, [r4, #0]
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_DMA_Init+0x184>)
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d84c      	bhi.n	8002868 <HAL_DMA_Init+0x160>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_DMA_Init+0x188>)
 80027d0:	4413      	add	r3, r2
 80027d2:	4a30      	ldr	r2, [pc, #192]	; (8002894 <HAL_DMA_Init+0x18c>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	6423      	str	r3, [r4, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_DMA_Init+0x190>)
 80027e0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e8:	6821      	ldr	r1, [r4, #0]
 80027ea:	680a      	ldr	r2, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ec:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80027f0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f4:	6863      	ldr	r3, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	68a0      	ldr	r0, [r4, #8]
  tmp |=  hdma->Init.Direction        |
 80027f8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	68e0      	ldr	r0, [r4, #12]
 80027fc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	6960      	ldr	r0, [r4, #20]
 8002804:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002806:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	69e0      	ldr	r0, [r4, #28]
 800280c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800280e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002810:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002812:	2000      	movs	r0, #0
 8002814:	63a0      	str	r0, [r4, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	2301      	movs	r3, #1
 8002818:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800281c:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8002820:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002822:	21ab      	movs	r1, #171	; 0xab
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <HAL_DMA_Init+0x180>)
 8002826:	f7fe fac8 	bl	8000dba <assert_failed>
 800282a:	e7a3      	b.n	8002774 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800282c:	21ac      	movs	r1, #172	; 0xac
 800282e:	4816      	ldr	r0, [pc, #88]	; (8002888 <HAL_DMA_Init+0x180>)
 8002830:	f7fe fac3 	bl	8000dba <assert_failed>
 8002834:	e7a3      	b.n	800277e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002836:	21ad      	movs	r1, #173	; 0xad
 8002838:	4813      	ldr	r0, [pc, #76]	; (8002888 <HAL_DMA_Init+0x180>)
 800283a:	f7fe fabe 	bl	8000dba <assert_failed>
 800283e:	e7a3      	b.n	8002788 <HAL_DMA_Init+0x80>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002840:	21ae      	movs	r1, #174	; 0xae
 8002842:	4811      	ldr	r0, [pc, #68]	; (8002888 <HAL_DMA_Init+0x180>)
 8002844:	f7fe fab9 	bl	8000dba <assert_failed>
 8002848:	e7a6      	b.n	8002798 <HAL_DMA_Init+0x90>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800284a:	21af      	movs	r1, #175	; 0xaf
 800284c:	480e      	ldr	r0, [pc, #56]	; (8002888 <HAL_DMA_Init+0x180>)
 800284e:	f7fe fab4 	bl	8000dba <assert_failed>
 8002852:	e7a9      	b.n	80027a8 <HAL_DMA_Init+0xa0>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002854:	21b0      	movs	r1, #176	; 0xb0
 8002856:	480c      	ldr	r0, [pc, #48]	; (8002888 <HAL_DMA_Init+0x180>)
 8002858:	f7fe faaf 	bl	8000dba <assert_failed>
 800285c:	e7a8      	b.n	80027b0 <HAL_DMA_Init+0xa8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800285e:	21b1      	movs	r1, #177	; 0xb1
 8002860:	4809      	ldr	r0, [pc, #36]	; (8002888 <HAL_DMA_Init+0x180>)
 8002862:	f7fe faaa 	bl	8000dba <assert_failed>
 8002866:	e7ae      	b.n	80027c6 <HAL_DMA_Init+0xbe>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_DMA_Init+0x194>)
 800286a:	4413      	add	r3, r2
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_DMA_Init+0x18c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	6423      	str	r3, [r4, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_DMA_Init+0x198>)
 800287a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800287c:	e7b1      	b.n	80027e2 <HAL_DMA_Init+0xda>
    return HAL_ERROR;
 800287e:	2001      	movs	r0, #1
}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40020008 	.word	0x40020008
 8002888:	0800efe0 	.word	0x0800efe0
 800288c:	40020407 	.word	0x40020407
 8002890:	bffdfff8 	.word	0xbffdfff8
 8002894:	cccccccd 	.word	0xcccccccd
 8002898:	40020000 	.word	0x40020000
 800289c:	bffdfbf8 	.word	0xbffdfbf8
 80028a0:	40020400 	.word	0x40020400

080028a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028a6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ae:	2304      	movs	r3, #4
 80028b0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80028b2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80028b4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	6802      	ldr	r2, [r0, #0]
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	f023 030e 	bic.w	r3, r3, #14
 80028be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80028c0:	6802      	ldr	r2, [r0, #0]
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ca:	6803      	ldr	r3, [r0, #0]
 80028cc:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <HAL_DMA_Abort_IT+0x158>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d94e      	bls.n	8002970 <HAL_DMA_Abort_IT+0xcc>
 80028d2:	3a78      	subs	r2, #120	; 0x78
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d024      	beq.n	8002922 <HAL_DMA_Abort_IT+0x7e>
 80028d8:	3214      	adds	r2, #20
 80028da:	4293      	cmp	r3, r2
 80028dc:	d030      	beq.n	8002940 <HAL_DMA_Abort_IT+0x9c>
 80028de:	3214      	adds	r2, #20
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d02f      	beq.n	8002944 <HAL_DMA_Abort_IT+0xa0>
 80028e4:	3214      	adds	r2, #20
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02f      	beq.n	800294a <HAL_DMA_Abort_IT+0xa6>
 80028ea:	3214      	adds	r2, #20
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d02f      	beq.n	8002950 <HAL_DMA_Abort_IT+0xac>
 80028f0:	3214      	adds	r2, #20
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02f      	beq.n	8002956 <HAL_DMA_Abort_IT+0xb2>
 80028f6:	3214      	adds	r2, #20
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02f      	beq.n	800295c <HAL_DMA_Abort_IT+0xb8>
 80028fc:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002900:	4293      	cmp	r3, r2
 8002902:	d02e      	beq.n	8002962 <HAL_DMA_Abort_IT+0xbe>
 8002904:	3214      	adds	r2, #20
 8002906:	4293      	cmp	r3, r2
 8002908:	d02d      	beq.n	8002966 <HAL_DMA_Abort_IT+0xc2>
 800290a:	3214      	adds	r2, #20
 800290c:	4293      	cmp	r3, r2
 800290e:	d02c      	beq.n	800296a <HAL_DMA_Abort_IT+0xc6>
 8002910:	3214      	adds	r2, #20
 8002912:	4293      	cmp	r3, r2
 8002914:	d002      	beq.n	800291c <HAL_DMA_Abort_IT+0x78>
 8002916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800291a:	e003      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 800291c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002920:	e000      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002922:	2201      	movs	r2, #1
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_DMA_Abort_IT+0x15c>)
 8002926:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002928:	2301      	movs	r3, #1
 800292a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800292e:	2300      	movs	r3, #0
 8002930:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002934:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002936:	2b00      	cmp	r3, #0
 8002938:	d05e      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x154>
      hdma->XferAbortCallback(hdma);
 800293a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2000      	movs	r0, #0
 800293e:	e7b9      	b.n	80028b4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002940:	2210      	movs	r2, #16
 8002942:	e7ef      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	e7ec      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 800294a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800294e:	e7e9      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002954:	e7e6      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800295a:	e7e3      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 800295c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002960:	e7e0      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002962:	2201      	movs	r2, #1
 8002964:	e7de      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002966:	2210      	movs	r2, #16
 8002968:	e7dc      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	e7d9      	b.n	8002924 <HAL_DMA_Abort_IT+0x80>
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_DMA_Abort_IT+0x160>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d024      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x11c>
 8002976:	3214      	adds	r2, #20
 8002978:	4293      	cmp	r3, r2
 800297a:	d025      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x124>
 800297c:	3214      	adds	r2, #20
 800297e:	4293      	cmp	r3, r2
 8002980:	d024      	beq.n	80029cc <HAL_DMA_Abort_IT+0x128>
 8002982:	3214      	adds	r2, #20
 8002984:	4293      	cmp	r3, r2
 8002986:	d024      	beq.n	80029d2 <HAL_DMA_Abort_IT+0x12e>
 8002988:	3214      	adds	r2, #20
 800298a:	4293      	cmp	r3, r2
 800298c:	d024      	beq.n	80029d8 <HAL_DMA_Abort_IT+0x134>
 800298e:	3214      	adds	r2, #20
 8002990:	4293      	cmp	r3, r2
 8002992:	d024      	beq.n	80029de <HAL_DMA_Abort_IT+0x13a>
 8002994:	3214      	adds	r2, #20
 8002996:	4293      	cmp	r3, r2
 8002998:	d024      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x140>
 800299a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d023      	beq.n	80029ea <HAL_DMA_Abort_IT+0x146>
 80029a2:	3214      	adds	r2, #20
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_Abort_IT+0x14a>
 80029a8:	3214      	adds	r2, #20
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d021      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x14e>
 80029ae:	3214      	adds	r2, #20
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d002      	beq.n	80029ba <HAL_DMA_Abort_IT+0x116>
 80029b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b8:	e003      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029be:	e000      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029c0:	2201      	movs	r2, #1
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_DMA_Abort_IT+0x164>)
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e7af      	b.n	8002928 <HAL_DMA_Abort_IT+0x84>
 80029c8:	2210      	movs	r2, #16
 80029ca:	e7fa      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d0:	e7f7      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d6:	e7f4      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029dc:	e7f1      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029e2:	e7ee      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e8:	e7eb      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029ea:	2201      	movs	r2, #1
 80029ec:	e7e9      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029ee:	2210      	movs	r2, #16
 80029f0:	e7e7      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	e7e4      	b.n	80029c2 <HAL_DMA_Abort_IT+0x11e>
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2000      	movs	r0, #0
 80029fa:	e75b      	b.n	80028b4 <HAL_DMA_Abort_IT+0x10>
 80029fc:	40020080 	.word	0x40020080
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020008 	.word	0x40020008
 8002a08:	40020000 	.word	0x40020000

08002a0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a10:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002a12:	6804      	ldr	r4, [r0, #0]
 8002a14:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a16:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a18:	2304      	movs	r3, #4
 8002a1a:	408b      	lsls	r3, r1
 8002a1c:	4213      	tst	r3, r2
 8002a1e:	f000 809b 	beq.w	8002b58 <HAL_DMA_IRQHandler+0x14c>
 8002a22:	f015 0f04 	tst.w	r5, #4
 8002a26:	f000 8097 	beq.w	8002b58 <HAL_DMA_IRQHandler+0x14c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f013 0f20 	tst.w	r3, #32
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x2e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	4aaa      	ldr	r2, [pc, #680]	; (8002ce8 <HAL_DMA_IRQHandler+0x2dc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d946      	bls.n	8002ad0 <HAL_DMA_IRQHandler+0xc4>
 8002a42:	3a78      	subs	r2, #120	; 0x78
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d024      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x86>
 8002a48:	3214      	adds	r2, #20
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d028      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x94>
 8002a4e:	3214      	adds	r2, #20
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d027      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x98>
 8002a54:	3214      	adds	r2, #20
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x9e>
 8002a5a:	3214      	adds	r2, #20
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d027      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0xa4>
 8002a60:	3214      	adds	r2, #20
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d027      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xaa>
 8002a66:	3214      	adds	r2, #20
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_IRQHandler+0xb0>
 8002a6c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d026      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xb6>
 8002a74:	3214      	adds	r2, #20
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d025      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0xba>
 8002a7a:	3214      	adds	r2, #20
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d024      	beq.n	8002aca <HAL_DMA_IRQHandler+0xbe>
 8002a80:	3214      	adds	r2, #20
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d002      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x80>
 8002a86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a8a:	e003      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002a8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002a92:	2204      	movs	r2, #4
 8002a94:	4b95      	ldr	r3, [pc, #596]	; (8002cec <HAL_DMA_IRQHandler+0x2e0>)
 8002a96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a9a:	b103      	cbz	r3, 8002a9e <HAL_DMA_IRQHandler+0x92>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a9c:	4798      	blx	r3
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	e7f7      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa8:	e7f4      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aae:	e7f1      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002ab0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ab4:	e7ee      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002ab6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aba:	e7eb      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac0:	e7e8      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	e7e6      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	e7e4      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ace:	e7e1      	b.n	8002a94 <HAL_DMA_IRQHandler+0x88>
 8002ad0:	4a87      	ldr	r2, [pc, #540]	; (8002cf0 <HAL_DMA_IRQHandler+0x2e4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d024      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x114>
 8002ad6:	3214      	adds	r2, #20
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d025      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x11c>
 8002adc:	3214      	adds	r2, #20
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d024      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x120>
 8002ae2:	3214      	adds	r2, #20
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d024      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x126>
 8002ae8:	3214      	adds	r2, #20
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d024      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x12c>
 8002aee:	3214      	adds	r2, #20
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d024      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x132>
 8002af4:	3214      	adds	r2, #20
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d024      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x138>
 8002afa:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d023      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x13e>
 8002b02:	3214      	adds	r2, #20
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x142>
 8002b08:	3214      	adds	r2, #20
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d021      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x146>
 8002b0e:	3214      	adds	r2, #20
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d002      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x10e>
 8002b14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b18:	e003      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b20:	2204      	movs	r2, #4
 8002b22:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <HAL_DMA_IRQHandler+0x2e8>)
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e7b7      	b.n	8002a98 <HAL_DMA_IRQHandler+0x8c>
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	e7fa      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b30:	e7f7      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b36:	e7f4      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b3c:	e7f1      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b3e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b42:	e7ee      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b48:	e7eb      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	e7e9      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	e7e7      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
 8002b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b56:	e7e4      	b.n	8002b22 <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b58:	2302      	movs	r3, #2
 8002b5a:	408b      	lsls	r3, r1
 8002b5c:	4213      	tst	r3, r2
 8002b5e:	f000 80a3 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x29c>
 8002b62:	f015 0f02 	tst.w	r5, #2
 8002b66:	f000 809f 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x29c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f013 0f20 	tst.w	r3, #32
 8002b70:	d106      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b80:	6803      	ldr	r3, [r0, #0]
 8002b82:	4a59      	ldr	r2, [pc, #356]	; (8002ce8 <HAL_DMA_IRQHandler+0x2dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d94b      	bls.n	8002c20 <HAL_DMA_IRQHandler+0x214>
 8002b88:	3a78      	subs	r2, #120	; 0x78
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d024      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1cc>
 8002b8e:	3214      	adds	r2, #20
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d02d      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x1e4>
 8002b94:	3214      	adds	r2, #20
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x1e8>
 8002b9a:	3214      	adds	r2, #20
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d02c      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1ee>
 8002ba0:	3214      	adds	r2, #20
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02c      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x1f4>
 8002ba6:	3214      	adds	r2, #20
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1fa>
 8002bac:	3214      	adds	r2, #20
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x200>
 8002bb2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x206>
 8002bba:	3214      	adds	r2, #20
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d02a      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x20a>
 8002bc0:	3214      	adds	r2, #20
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d029      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x20e>
 8002bc6:	3214      	adds	r2, #20
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d002      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x1c6>
 8002bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bd0:	e003      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd6:	e000      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_DMA_IRQHandler+0x2e0>)
 8002bdc:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002bde:	2300      	movs	r3, #0
 8002be0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f43f af59 	beq.w	8002a9e <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 8002bec:	4798      	blx	r3
 8002bee:	e756      	b.n	8002a9e <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	e7f2      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf8:	e7ef      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bfe:	e7ec      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c04:	e7e9      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c0a:	e7e6      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c10:	e7e3      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c12:	2202      	movs	r2, #2
 8002c14:	e7e1      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c16:	2220      	movs	r2, #32
 8002c18:	e7df      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	e7dc      	b.n	8002bda <HAL_DMA_IRQHandler+0x1ce>
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_IRQHandler+0x2e4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d024      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x264>
 8002c26:	3214      	adds	r2, #20
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d025      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x26c>
 8002c2c:	3214      	adds	r2, #20
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d024      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x270>
 8002c32:	3214      	adds	r2, #20
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d024      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x276>
 8002c38:	3214      	adds	r2, #20
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d024      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x27c>
 8002c3e:	3214      	adds	r2, #20
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d024      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x282>
 8002c44:	3214      	adds	r2, #20
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d024      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x288>
 8002c4a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d023      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x28e>
 8002c52:	3214      	adds	r2, #20
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x292>
 8002c58:	3214      	adds	r2, #20
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d021      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x296>
 8002c5e:	3214      	adds	r2, #20
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d002      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x25e>
 8002c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c68:	e003      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c70:	2202      	movs	r2, #2
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_DMA_IRQHandler+0x2e8>)
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	e7b2      	b.n	8002bde <HAL_DMA_IRQHandler+0x1d2>
 8002c78:	2220      	movs	r2, #32
 8002c7a:	e7fa      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c80:	e7f7      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c86:	e7f4      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c8c:	e7f1      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c92:	e7ee      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c98:	e7eb      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	e7e9      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	e7e7      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
 8002ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca6:	e7e4      	b.n	8002c72 <HAL_DMA_IRQHandler+0x266>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ca8:	2308      	movs	r3, #8
 8002caa:	fa03 f101 	lsl.w	r1, r3, r1
 8002cae:	4211      	tst	r1, r2
 8002cb0:	f43f aef5 	beq.w	8002a9e <HAL_DMA_IRQHandler+0x92>
 8002cb4:	f015 0f08 	tst.w	r5, #8
 8002cb8:	f43f aef1 	beq.w	8002a9e <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	f023 030e 	bic.w	r3, r3, #14
 8002cc2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002cc6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002cc8:	2301      	movs	r3, #1
 8002cca:	fa03 f202 	lsl.w	r2, r3, r2
 8002cce:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cd0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002cdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f43f aedd 	beq.w	8002a9e <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 8002ce4:	4798      	blx	r3
  return;
 8002ce6:	e6da      	b.n	8002a9e <HAL_DMA_IRQHandler+0x92>
 8002ce8:	40020080 	.word	0x40020080
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40020008 	.word	0x40020008
 8002cf4:	40020000 	.word	0x40020000

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	4680      	mov	r8, r0
 8002d00:	460f      	mov	r7, r1
  uint32_t config = 0x00U;
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002d02:	4bba      	ldr	r3, [pc, #744]	; (8002fec <HAL_GPIO_Init+0x2f4>)
 8002d04:	4298      	cmp	r0, r3
 8002d06:	d01b      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d14:	4298      	cmp	r0, r3
 8002d16:	d013      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d00f      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d24:	4298      	cmp	r0, r3
 8002d26:	d00b      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d007      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x48>
 8002d38:	21cd      	movs	r1, #205	; 0xcd
 8002d3a:	48ad      	ldr	r0, [pc, #692]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002d3c:	f7fe f83d 	bl	8000dba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	b112      	cbz	r2, 8002d4c <HAL_GPIO_Init+0x54>
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	b11b      	cbz	r3, 8002d54 <HAL_GPIO_Init+0x5c>
 8002d4c:	21ce      	movs	r1, #206	; 0xce
 8002d4e:	48a8      	ldr	r0, [pc, #672]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002d50:	f7fe f833 	bl	8000dba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d91e      	bls.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d5a:	2b11      	cmp	r3, #17
 8002d5c:	d01c      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d01a      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d018      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d66:	4aa3      	ldr	r2, [pc, #652]	; (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d015      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d6c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d011      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d74:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00d      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d7c:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d84:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d005      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d8c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d001      	beq.n	8002d98 <HAL_GPIO_Init+0xa0>
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d103      	bne.n	8002da0 <HAL_GPIO_Init+0xa8>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d98:	f04f 0900 	mov.w	r9, #0
 8002d9c:	464e      	mov	r6, r9
 8002d9e:	e0e2      	b.n	8002f66 <HAL_GPIO_Init+0x26e>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002da0:	21cf      	movs	r1, #207	; 0xcf
 8002da2:	4893      	ldr	r0, [pc, #588]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002da4:	f7fe f809 	bl	8000dba <assert_failed>
 8002da8:	e7f6      	b.n	8002d98 <HAL_GPIO_Init+0xa0>
      switch (GPIO_Init->Mode)
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d068      	beq.n	8002e80 <HAL_GPIO_Init+0x188>
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d86f      	bhi.n	8002e9a <HAL_GPIO_Init+0x1a2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dba:	f8d7 900c 	ldr.w	r9, [r7, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dbe:	2cff      	cmp	r4, #255	; 0xff
 8002dc0:	f200 80a0 	bhi.w	8002f04 <HAL_GPIO_Init+0x20c>
 8002dc4:	4640      	mov	r0, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002dc6:	2cff      	cmp	r4, #255	; 0xff
 8002dc8:	f200 809f 	bhi.w	8002f0a <HAL_GPIO_Init+0x212>
 8002dcc:	00b2      	lsls	r2, r6, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dce:	6803      	ldr	r3, [r0, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	4091      	lsls	r1, r2
 8002dd4:	ea23 0301 	bic.w	r3, r3, r1
 8002dd8:	fa09 f202 	lsl.w	r2, r9, r2
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002de6:	f000 80bd 	beq.w	8002f64 <HAL_GPIO_Init+0x26c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dea:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_GPIO_Init+0x300>)
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	619a      	str	r2, [r3, #24]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8002dfe:	08b2      	lsrs	r2, r6, #2
 8002e00:	1c91      	adds	r1, r2, #2
 8002e02:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002e04:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002e08:	f006 0303 	and.w	r3, r6, #3
 8002e0c:	0099      	lsls	r1, r3, #2
 8002e0e:	230f      	movs	r3, #15
 8002e10:	408b      	lsls	r3, r1
 8002e12:	ea20 0003 	bic.w	r0, r0, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e16:	4b75      	ldr	r3, [pc, #468]	; (8002fec <HAL_GPIO_Init+0x2f4>)
 8002e18:	4598      	cmp	r8, r3
 8002e1a:	d07c      	beq.n	8002f16 <HAL_GPIO_Init+0x21e>
 8002e1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e20:	4598      	cmp	r8, r3
 8002e22:	f000 80df 	beq.w	8002fe4 <HAL_GPIO_Init+0x2ec>
 8002e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2a:	4598      	cmp	r8, r3
 8002e2c:	f000 80dc 	beq.w	8002fe8 <HAL_GPIO_Init+0x2f0>
 8002e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e34:	4598      	cmp	r8, r3
 8002e36:	f000 80e9 	beq.w	800300c <HAL_GPIO_Init+0x314>
 8002e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e3e:	4598      	cmp	r8, r3
 8002e40:	f000 80e6 	beq.w	8003010 <HAL_GPIO_Init+0x318>
 8002e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e48:	4598      	cmp	r8, r3
 8002e4a:	d062      	beq.n	8002f12 <HAL_GPIO_Init+0x21a>
 8002e4c:	2306      	movs	r3, #6
 8002e4e:	e063      	b.n	8002f18 <HAL_GPIO_Init+0x220>
      switch (GPIO_Init->Mode)
 8002e50:	4a6b      	ldr	r2, [pc, #428]	; (8003000 <HAL_GPIO_Init+0x308>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d014      	beq.n	8002e80 <HAL_GPIO_Init+0x188>
 8002e56:	d90b      	bls.n	8002e70 <HAL_GPIO_Init+0x178>
 8002e58:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <HAL_GPIO_Init+0x30c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d010      	beq.n	8002e80 <HAL_GPIO_Init+0x188>
 8002e5e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00c      	beq.n	8002e80 <HAL_GPIO_Init+0x188>
 8002e66:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d1a7      	bne.n	8002dbe <HAL_GPIO_Init+0xc6>
 8002e6e:	e007      	b.n	8002e80 <HAL_GPIO_Init+0x188>
 8002e70:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x188>
 8002e78:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d19e      	bne.n	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d82d      	bhi.n	8002ee2 <HAL_GPIO_Init+0x1ea>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d038      	beq.n	8002efe <HAL_GPIO_Init+0x206>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d02e      	beq.n	8002eee <HAL_GPIO_Init+0x1f6>
            GPIOx->BRR = ioposition;
 8002e90:	f8c8 5014 	str.w	r5, [r8, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	f04f 0908 	mov.w	r9, #8
 8002e98:	e791      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e9a:	21e5      	movs	r1, #229	; 0xe5
 8002e9c:	4854      	ldr	r0, [pc, #336]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002e9e:	f7fd ff8c 	bl	8000dba <assert_failed>
 8002ea2:	e78a      	b.n	8002dba <HAL_GPIO_Init+0xc2>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ea4:	21ec      	movs	r1, #236	; 0xec
 8002ea6:	4852      	ldr	r0, [pc, #328]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002ea8:	f7fd ff87 	bl	8000dba <assert_failed>
 8002eac:	e096      	b.n	8002fdc <HAL_GPIO_Init+0x2e4>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d803      	bhi.n	8002ebe <HAL_GPIO_Init+0x1c6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f103 0908 	add.w	r9, r3, #8
          break;
 8002ebc:	e77f      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ebe:	21f3      	movs	r1, #243	; 0xf3
 8002ec0:	484b      	ldr	r0, [pc, #300]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002ec2:	f7fd ff7a 	bl	8000dba <assert_failed>
 8002ec6:	e7f6      	b.n	8002eb6 <HAL_GPIO_Init+0x1be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d803      	bhi.n	8002ed8 <HAL_GPIO_Init+0x1e0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f103 090c 	add.w	r9, r3, #12
          break;
 8002ed6:	e772      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ed8:	21fa      	movs	r1, #250	; 0xfa
 8002eda:	4845      	ldr	r0, [pc, #276]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002edc:	f7fd ff6d 	bl	8000dba <assert_failed>
 8002ee0:	e7f6      	b.n	8002ed0 <HAL_GPIO_Init+0x1d8>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002ee2:	f240 1107 	movw	r1, #263	; 0x107
 8002ee6:	4842      	ldr	r0, [pc, #264]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002ee8:	f7fd ff67 	bl	8000dba <assert_failed>
 8002eec:	e7cb      	b.n	8002e86 <HAL_GPIO_Init+0x18e>
            GPIOx->BSRR = ioposition;
 8002eee:	f8c8 5010 	str.w	r5, [r8, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef2:	f04f 0908 	mov.w	r9, #8
 8002ef6:	e762      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ef8:	f04f 0900 	mov.w	r9, #0
 8002efc:	e75f      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002efe:	f04f 0904 	mov.w	r9, #4
 8002f02:	e75c      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f04:	f108 0004 	add.w	r0, r8, #4
 8002f08:	e75d      	b.n	8002dc6 <HAL_GPIO_Init+0xce>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002f0a:	f1a6 0208 	sub.w	r2, r6, #8
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	e75d      	b.n	8002dce <HAL_GPIO_Init+0xd6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f12:	2305      	movs	r3, #5
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x220>
 8002f16:	2300      	movs	r3, #0
 8002f18:	408b      	lsls	r3, r1
 8002f1a:	4303      	orrs	r3, r0
        AFIO->EXTICR[position >> 2U] = temp;
 8002f1c:	3202      	adds	r2, #2
 8002f1e:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f2a:	d073      	beq.n	8003014 <HAL_GPIO_Init+0x31c>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f2c:	4a36      	ldr	r2, [pc, #216]	; (8003008 <HAL_GPIO_Init+0x310>)
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	4323      	orrs	r3, r4
 8002f32:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f3a:	d071      	beq.n	8003020 <HAL_GPIO_Init+0x328>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <HAL_GPIO_Init+0x310>)
 8002f3e:	6853      	ldr	r3, [r2, #4]
 8002f40:	4323      	orrs	r3, r4
 8002f42:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002f4a:	d06f      	beq.n	800302c <HAL_GPIO_Init+0x334>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <HAL_GPIO_Init+0x310>)
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	4323      	orrs	r3, r4
 8002f52:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002f5a:	d06d      	beq.n	8003038 <HAL_GPIO_Init+0x340>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_GPIO_Init+0x310>)
 8002f5e:	68d3      	ldr	r3, [r2, #12]
 8002f60:	431c      	orrs	r4, r3
 8002f62:	60d4      	str	r4, [r2, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002f64:	3601      	adds	r6, #1
 8002f66:	2e0f      	cmp	r6, #15
 8002f68:	d86c      	bhi.n	8003044 <HAL_GPIO_Init+0x34c>
    ioposition = (0x01U << position);
 8002f6a:	2501      	movs	r5, #1
 8002f6c:	40b5      	lsls	r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6e:	683c      	ldr	r4, [r7, #0]
 8002f70:	402c      	ands	r4, r5
    if (iocurrent == ioposition)
 8002f72:	42a5      	cmp	r5, r4
 8002f74:	d1f6      	bne.n	8002f64 <HAL_GPIO_Init+0x26c>
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_GPIO_Init+0x2f4>)
 8002f78:	4598      	cmp	r8, r3
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f80:	4598      	cmp	r8, r3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f88:	4598      	cmp	r8, r3
 8002f8a:	d013      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f90:	4598      	cmp	r8, r3
 8002f92:	d00f      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f98:	4598      	cmp	r8, r3
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa0:	4598      	cmp	r8, r3
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa8:	4598      	cmp	r8, r3
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2bc>
 8002fac:	21dd      	movs	r1, #221	; 0xdd
 8002fae:	4810      	ldr	r0, [pc, #64]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002fb0:	f7fd ff03 	bl	8000dba <assert_failed>
      switch (GPIO_Init->Mode)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d086      	beq.n	8002ec8 <HAL_GPIO_Init+0x1d0>
 8002fba:	f63f af49 	bhi.w	8002e50 <HAL_GPIO_Init+0x158>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	f43f af75 	beq.w	8002eae <HAL_GPIO_Init+0x1b6>
 8002fc4:	f67f aef1 	bls.w	8002daa <HAL_GPIO_Init+0xb2>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d095      	beq.n	8002ef8 <HAL_GPIO_Init+0x200>
 8002fcc:	2b11      	cmp	r3, #17
 8002fce:	f47f aef6 	bne.w	8002dbe <HAL_GPIO_Init+0xc6>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	f63f af64 	bhi.w	8002ea4 <HAL_GPIO_Init+0x1ac>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f103 0904 	add.w	r9, r3, #4
          break;
 8002fe2:	e6ec      	b.n	8002dbe <HAL_GPIO_Init+0xc6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e797      	b.n	8002f18 <HAL_GPIO_Init+0x220>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e795      	b.n	8002f18 <HAL_GPIO_Init+0x220>
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	0800f018 	.word	0x0800f018
 8002ff4:	10110000 	.word	0x10110000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010000 	.word	0x40010000
 8003000:	10210000 	.word	0x10210000
 8003004:	10310000 	.word	0x10310000
 8003008:	40010400 	.word	0x40010400
 800300c:	2303      	movs	r3, #3
 800300e:	e783      	b.n	8002f18 <HAL_GPIO_Init+0x220>
 8003010:	2304      	movs	r3, #4
 8003012:	e781      	b.n	8002f18 <HAL_GPIO_Init+0x220>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_GPIO_Init+0x354>)
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	ea23 0304 	bic.w	r3, r3, r4
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e789      	b.n	8002f34 <HAL_GPIO_Init+0x23c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_GPIO_Init+0x354>)
 8003022:	6853      	ldr	r3, [r2, #4]
 8003024:	ea23 0304 	bic.w	r3, r3, r4
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	e78b      	b.n	8002f44 <HAL_GPIO_Init+0x24c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_GPIO_Init+0x354>)
 800302e:	6893      	ldr	r3, [r2, #8]
 8003030:	ea23 0304 	bic.w	r3, r3, r4
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	e78d      	b.n	8002f54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_GPIO_Init+0x354>)
 800303a:	68d3      	ldr	r3, [r2, #12]
 800303c:	ea23 0404 	bic.w	r4, r3, r4
 8003040:	60d4      	str	r4, [r2, #12]
 8003042:	e78f      	b.n	8002f64 <HAL_GPIO_Init+0x26c>
        }
      }
    }
  }
}
 8003044:	b003      	add	sp, #12
 8003046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800304a:	bf00      	nop
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003054:	460c      	mov	r4, r1
 8003056:	b121      	cbz	r1, 8003062 <HAL_GPIO_ReadPin+0x12>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	68ab      	ldr	r3, [r5, #8]
 800305a:	421c      	tst	r4, r3
 800305c:	d107      	bne.n	800306e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003060:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003062:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003066:	4803      	ldr	r0, [pc, #12]	; (8003074 <HAL_GPIO_ReadPin+0x24>)
 8003068:	f7fd fea7 	bl	8000dba <assert_failed>
 800306c:	e7f4      	b.n	8003058 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_SET;
 800306e:	2001      	movs	r0, #1
 8003070:	e7f6      	b.n	8003060 <HAL_GPIO_ReadPin+0x10>
 8003072:	bf00      	nop
 8003074:	0800f018 	.word	0x0800f018

08003078 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003078:	2800      	cmp	r0, #0
 800307a:	d06f      	beq.n	800315c <HAL_PCD_Init+0xe4>
{
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b087      	sub	sp, #28
 8003080:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003082:	6802      	ldr	r2, [r0, #0]
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_PCD_Init+0xe8>)
 8003086:	429a      	cmp	r2, r3
 8003088:	d003      	beq.n	8003092 <HAL_PCD_Init+0x1a>
 800308a:	219f      	movs	r1, #159	; 0x9f
 800308c:	4835      	ldr	r0, [pc, #212]	; (8003164 <HAL_PCD_Init+0xec>)
 800308e:	f7fd fe94 	bl	8000dba <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8003092:	f894 3429 	ldrb.w	r3, [r4, #1065]	; 0x429
 8003096:	b1c3      	cbz	r3, 80030ca <HAL_PCD_Init+0x52>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003098:	2303      	movs	r3, #3
 800309a:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	f003 f8a1 	bl	80061e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80030a4:	4625      	mov	r5, r4
 80030a6:	f855 7b10 	ldr.w	r7, [r5], #16
 80030aa:	466e      	mov	r6, sp
 80030ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	6033      	str	r3, [r6, #0]
 80030b4:	1d23      	adds	r3, r4, #4
 80030b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b8:	4638      	mov	r0, r7
 80030ba:	f003 f885 	bl	80061c8 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80030be:	2100      	movs	r1, #0
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	f003 f89a 	bl	80061fa <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	e016      	b.n	80030f8 <HAL_PCD_Init+0x80>
    hpcd->Lock = HAL_UNLOCKED;
 80030ca:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 80030ce:	4620      	mov	r0, r4
 80030d0:	f00a fb66 	bl	800d7a0 <HAL_PCD_MspInit>
 80030d4:	e7e0      	b.n	8003098 <HAL_PCD_Init+0x20>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80030d6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80030da:	2101      	movs	r1, #1
 80030dc:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 80030e0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80030e4:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80030e6:	2100      	movs	r1, #0
 80030e8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80030ec:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80030ee:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	0152      	lsls	r2, r2, #5
 80030f4:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 80030f6:	3301      	adds	r3, #1
 80030f8:	2b0e      	cmp	r3, #14
 80030fa:	d9ec      	bls.n	80030d6 <HAL_PCD_Init+0x5e>
  }
 
  for (index = 0U; index < 15U ; index++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	e012      	b.n	8003126 <HAL_PCD_Init+0xae>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8003100:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003104:	2100      	movs	r1, #0
 8003106:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 800310a:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800310e:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8003110:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8003114:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8003118:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800311c:	f103 0212 	add.w	r2, r3, #18
 8003120:	0152      	lsls	r2, r2, #5
 8003122:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8003124:	3301      	adds	r3, #1
 8003126:	2b0e      	cmp	r3, #14
 8003128:	d9ea      	bls.n	8003100 <HAL_PCD_Init+0x88>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800312a:	4625      	mov	r5, r4
 800312c:	f855 7b10 	ldr.w	r7, [r5], #16
 8003130:	466e      	mov	r6, sp
 8003132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003134:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	6033      	str	r3, [r6, #0]
 800313a:	1d23      	adds	r3, r4, #4
 800313c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313e:	4638      	mov	r0, r7
 8003140:	f003 f85d 	bl	80061fe <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8003144:	2500      	movs	r5, #0
 8003146:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800314a:	2301      	movs	r3, #1
 800314c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	f003 fb6c 	bl	800682e <USB_DevDisconnect>
  return HAL_OK;
 8003156:	4628      	mov	r0, r5
}
 8003158:	b007      	add	sp, #28
 800315a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
}
 800315e:	4770      	bx	lr
 8003160:	40005c00 	.word	0x40005c00
 8003164:	0800f054 	.word	0x0800f054

08003168 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8003168:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 800316c:	2b01      	cmp	r3, #1
 800316e:	d010      	beq.n	8003192 <HAL_PCD_Start+0x2a>
{
 8003170:	b510      	push	{r4, lr}
 8003172:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003174:	2101      	movs	r1, #1
 8003176:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800317a:	f00a fc1c 	bl	800d9b6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	f003 fb53 	bl	800682a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003184:	6820      	ldr	r0, [r4, #0]
 8003186:	f003 f826 	bl	80061d6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800318a:	2000      	movs	r0, #0
 800318c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8003190:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003192:	2002      	movs	r0, #2
}
 8003194:	4770      	bx	lr

08003196 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8003196:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 800319a:	2b01      	cmp	r3, #1
 800319c:	d00d      	beq.n	80031ba <HAL_PCD_SetAddress+0x24>
{
 800319e:	b510      	push	{r4, lr}
 80031a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80031a2:	2301      	movs	r3, #1
 80031a4:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80031a8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80031ac:	6800      	ldr	r0, [r0, #0]
 80031ae:	f003 fb36 	bl	800681e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80031b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80031ba:	2002      	movs	r0, #2
}
 80031bc:	4770      	bx	lr

080031be <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80031be:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80031c0:	b24d      	sxtb	r5, r1
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	db1c      	blt.n	8003200 <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80031c6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80031ca:	0164      	lsls	r4, r4, #5
 80031cc:	f504 740a 	add.w	r4, r4, #552	; 0x228
 80031d0:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 80031d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80031d6:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80031d8:	0fed      	lsrs	r5, r5, #31
 80031da:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 80031dc:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 80031de:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 80031e0:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d011      	beq.n	800320c <HAL_PCD_EP_Open+0x4e>
 80031e8:	4605      	mov	r5, r0
 80031ea:	2301      	movs	r3, #1
 80031ec:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80031f0:	4621      	mov	r1, r4
 80031f2:	6800      	ldr	r0, [r0, #0]
 80031f4:	f003 f81d 	bl	8006232 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003200:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003204:	0164      	lsls	r4, r4, #5
 8003206:	3428      	adds	r4, #40	; 0x28
 8003208:	4404      	add	r4, r0
 800320a:	e7e2      	b.n	80031d2 <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 800320c:	2002      	movs	r0, #2
 800320e:	e7f6      	b.n	80031fe <HAL_PCD_EP_Open+0x40>

08003210 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8003210:	b24a      	sxtb	r2, r1
 8003212:	2a00      	cmp	r2, #0
 8003214:	db1b      	blt.n	800324e <HAL_PCD_EP_Close+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003216:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003220:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8003222:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003226:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8003228:	0fd2      	lsrs	r2, r2, #31
 800322a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800322c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8003230:	2a01      	cmp	r2, #1
 8003232:	d012      	beq.n	800325a <HAL_PCD_EP_Close+0x4a>
{  
 8003234:	b510      	push	{r4, lr}
 8003236:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003238:	2201      	movs	r2, #1
 800323a:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800323e:	4619      	mov	r1, r3
 8003240:	6800      	ldr	r0, [r0, #0]
 8003242:	f003 f98a 	bl	800655a <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003246:	2000      	movs	r0, #0
 8003248:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800324c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800324e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003252:	015b      	lsls	r3, r3, #5
 8003254:	3328      	adds	r3, #40	; 0x28
 8003256:	4403      	add	r3, r0
 8003258:	e7e3      	b.n	8003222 <HAL_PCD_EP_Close+0x12>
  __HAL_LOCK(hpcd);
 800325a:	2002      	movs	r0, #2
}
 800325c:	4770      	bx	lr

0800325e <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800325e:	b570      	push	{r4, r5, r6, lr}
 8003260:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8003264:	016c      	lsls	r4, r5, #5
 8003266:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800326a:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800326c:	4404      	add	r4, r0
 800326e:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8003272:	f105 0212 	add.w	r2, r5, #18
 8003276:	0152      	lsls	r2, r2, #5
 8003278:	1886      	adds	r6, r0, r2
 800327a:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 8003280:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 8003284:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 8003288:	b125      	cbz	r5, 8003294 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	f003 faeb 	bl	8006866 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003290:	2000      	movs	r0, #0
 8003292:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8003294:	6800      	ldr	r0, [r0, #0]
 8003296:	f003 fae6 	bl	8006866 <USB_EPStartXfer>
 800329a:	e7f9      	b.n	8003290 <HAL_PCD_EP_Receive+0x32>

0800329c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800329c:	f001 010f 	and.w	r1, r1, #15
 80032a0:	3112      	adds	r1, #18
 80032a2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80032a6:	8888      	ldrh	r0, [r1, #4]
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032aa:	b570      	push	{r4, r5, r6, lr}
 80032ac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80032b0:	016c      	lsls	r4, r5, #5
 80032b2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80032b6:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80032b8:	4404      	add	r4, r0
 80032ba:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80032bc:	1caa      	adds	r2, r5, #2
 80032be:	0152      	lsls	r2, r2, #5
 80032c0:	1886      	adds	r6, r0, r2
 80032c2:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 80032ce:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 80032d2:	b125      	cbz	r5, 80032de <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80032d4:	6800      	ldr	r0, [r0, #0]
 80032d6:	f003 fac6 	bl	8006866 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80032da:	2000      	movs	r0, #0
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80032de:	6800      	ldr	r0, [r0, #0]
 80032e0:	f003 fac1 	bl	8006866 <USB_EPStartXfer>
 80032e4:	e7f9      	b.n	80032da <HAL_PCD_EP_Transmit+0x30>

080032e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032e6:	b570      	push	{r4, r5, r6, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 80032f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003302:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003306:	f000 820d 	beq.w	8003724 <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800330a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 800330e:	f015 050f 	ands.w	r5, r5, #15
 8003312:	f040 80c2 	bne.w	800349a <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8003316:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800331a:	f013 0f10 	tst.w	r3, #16
 800331e:	d050      	beq.n	80033c2 <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003320:	8803      	ldrh	r3, [r0, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003328:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800332c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003330:	d179      	bne.n	8003426 <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003332:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003336:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800333a:	d0dc      	beq.n	80032f6 <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800333c:	8803      	ldrh	r3, [r0, #0]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	051b      	lsls	r3, r3, #20
 8003344:	0d1b      	lsrs	r3, r3, #20
 8003346:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800334e:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8003352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003356:	3306      	adds	r3, #6
 8003358:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800335c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003364:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 8003368:	2b00      	cmp	r3, #0
 800336a:	d17c      	bne.n	8003466 <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800336c:	2100      	movs	r1, #0
 800336e:	4620      	mov	r0, r4
 8003370:	f00a fa3e 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800337a:	3206      	adds	r2, #6
 800337c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003380:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 8003384:	293e      	cmp	r1, #62	; 0x3e
 8003386:	d97c      	bls.n	8003482 <PCD_EP_ISR_Handler+0x19c>
 8003388:	f3c1 124f 	ubfx	r2, r1, #5, #16
 800338c:	f011 0f1f 	tst.w	r1, #31
 8003390:	d101      	bne.n	8003396 <PCD_EP_ISR_Handler+0xb0>
 8003392:	3a01      	subs	r2, #1
 8003394:	b292      	uxth	r2, r2
 8003396:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800339a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800339e:	b292      	uxth	r2, r2
 80033a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	8813      	ldrh	r3, [r2, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	8013      	strh	r3, [r2, #0]
 80033c0:	e799      	b.n	80032f6 <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033c2:	8803      	ldrh	r3, [r0, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80033d8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80033dc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80033e0:	3302      	adds	r3, #2
 80033e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80033e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80033ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ee:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80033f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033f2:	4413      	add	r3, r2
 80033f4:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033f6:	2100      	movs	r1, #0
 80033f8:	4620      	mov	r0, r4
 80033fa:	f00a fa03 	bl	800d804 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80033fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	f43f af77 	beq.w	80032f6 <PCD_EP_ISR_Handler+0x10>
 8003408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	f47f af73 	bne.w	80032f6 <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003410:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341a:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003424:	e767      	b.n	80032f6 <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003426:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800342a:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800342e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003432:	3306      	adds	r3, #6
 8003434:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003438:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800343c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003440:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8003444:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8003448:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 800344c:	f003 fb68 	bl	8006b20 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	8813      	ldrh	r3, [r2, #0]
 8003454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003458:	051b      	lsls	r3, r3, #20
 800345a:	0d1b      	lsrs	r3, r3, #20
 800345c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800345e:	4620      	mov	r0, r4
 8003460:	f00a f9be 	bl	800d7e0 <HAL_PCD_SetupStageCallback>
 8003464:	e747      	b.n	80032f6 <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003466:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 800346a:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800346e:	f003 fb57 	bl	8006b20 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003472:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8003476:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 800347a:	4413      	add	r3, r2
 800347c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 8003480:	e774      	b.n	800336c <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003482:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8003486:	f011 0f01 	tst.w	r1, #1
 800348a:	d001      	beq.n	8003490 <PCD_EP_ISR_Handler+0x1aa>
 800348c:	3201      	adds	r2, #1
 800348e:	b292      	uxth	r2, r2
 8003490:	0292      	lsls	r2, r2, #10
 8003492:	b292      	uxth	r2, r2
 8003494:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003498:	e784      	b.n	80033a4 <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800349a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80034a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80034ac:	d135      	bne.n	800351a <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80034b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034b6:	f43f af1e 	beq.w	80032f6 <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80034d0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80034d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 80b2 	bne.w	8003642 <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034e4:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80034e8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80034ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034f0:	3302      	adds	r3, #2
 80034f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80034fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fe:	1caa      	adds	r2, r5, #2
 8003500:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8003504:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80c6 	beq.w	8003698 <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800350c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003510:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8003512:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003514:	f003 f992 	bl	800683c <USB_WritePMA>
 8003518:	e0be      	b.n	8003698 <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800351a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	051b      	lsls	r3, r3, #20
 8003524:	0d1b      	lsrs	r3, r3, #20
 8003526:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800352a:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800352e:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8003532:	b9d3      	cbnz	r3, 800356a <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003534:	6820      	ldr	r0, [r4, #0]
 8003536:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800353a:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800353e:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8003542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003546:	3306      	adds	r3, #6
 8003548:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800354c:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8003550:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8003554:	b386      	cbz	r6, 80035b8 <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003556:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800355a:	4633      	mov	r3, r6
 800355c:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8003560:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8003564:	f003 fadc 	bl	8006b20 <USB_ReadPMA>
 8003568:	e026      	b.n	80035b8 <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003570:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 8003574:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003578:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800357c:	d042      	beq.n	8003604 <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003586:	3302      	adds	r3, #2
 8003588:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800358c:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8003590:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8003594:	bb66      	cbnz	r6, 80035f0 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800359c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80035a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80035a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a8:	051b      	lsls	r3, r3, #20
 80035aa:	0d1b      	lsrs	r3, r3, #20
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 80035b8:	f105 0312 	add.w	r3, r5, #18
 80035bc:	015b      	lsls	r3, r3, #5
 80035be:	18e1      	adds	r1, r4, r3
 80035c0:	684a      	ldr	r2, [r1, #4]
 80035c2:	4432      	add	r2, r6
 80035c4:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 80035c6:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80035ca:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 80035ce:	4432      	add	r2, r6
 80035d0:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035d4:	58e3      	ldr	r3, [r4, r3]
 80035d6:	b11b      	cbz	r3, 80035e0 <PCD_EP_ISR_Handler+0x2fa>
 80035d8:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 80035dc:	428e      	cmp	r6, r1
 80035de:	d228      	bcs.n	8003632 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035e0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80035e4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80035e8:	4620      	mov	r0, r4
 80035ea:	f00a f901 	bl	800d7f0 <HAL_PCD_DataOutStageCallback>
 80035ee:	e75e      	b.n	80034ae <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035f0:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80035f4:	4633      	mov	r3, r6
 80035f6:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 80035fa:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80035fe:	f003 fa8f 	bl	8006b20 <USB_ReadPMA>
 8003602:	e7c8      	b.n	8003596 <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003604:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800360c:	3306      	adds	r3, #6
 800360e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003612:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8003616:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 800361a:	2e00      	cmp	r6, #0
 800361c:	d0bb      	beq.n	8003596 <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800361e:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003622:	4633      	mov	r3, r6
 8003624:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8003628:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800362c:	f003 fa78 	bl	8006b20 <USB_ReadPMA>
 8003630:	e7b1      	b.n	8003596 <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003632:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8003636:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fe0f 	bl	800325e <HAL_PCD_EP_Receive>
 8003640:	e735      	b.n	80034ae <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8003648:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800364c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003650:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003654:	d046      	beq.n	80036e4 <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003656:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800365a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800365e:	3302      	adds	r3, #2
 8003660:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003664:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366c:	1caa      	adds	r2, r5, #2
 800366e:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8003672:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8003674:	bb7b      	cbnz	r3, 80036d6 <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800367c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003680:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003688:	051b      	lsls	r3, r3, #20
 800368a:	0d1b      	lsrs	r3, r3, #20
 800368c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003698:	6822      	ldr	r2, [r4, #0]
 800369a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800369e:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 80036a2:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80036a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80036aa:	3302      	adds	r3, #2
 80036ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80036b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80036b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80036b8:	1cab      	adds	r3, r5, #2
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	18e1      	adds	r1, r4, r3
 80036be:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 80036c0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80036c2:	440a      	add	r2, r1
 80036c4:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80036c6:	58e3      	ldr	r3, [r4, r3]
 80036c8:	bb23      	cbnz	r3, 8003714 <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ca:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80036ce:	4620      	mov	r0, r4
 80036d0:	f00a f898 	bl	800d804 <HAL_PCD_DataInStageCallback>
 80036d4:	e60f      	b.n	80032f6 <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80036d6:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80036da:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80036dc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80036de:	f003 f8ad 	bl	800683c <USB_WritePMA>
 80036e2:	e7c8      	b.n	8003676 <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80036e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036ec:	3306      	adds	r3, #6
 80036ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80036f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fa:	1caa      	adds	r2, r5, #2
 80036fc:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8003700:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0b7      	beq.n	8003676 <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003706:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800370a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800370c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800370e:	f003 f895 	bl	800683c <USB_WritePMA>
 8003712:	e7b0      	b.n	8003676 <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003714:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8003718:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff fdc4 	bl	80032aa <HAL_PCD_EP_Transmit>
 8003722:	e5e8      	b.n	80032f6 <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 8003724:	2000      	movs	r0, #0
 8003726:	b002      	add	sp, #8
 8003728:	bd70      	pop	{r4, r5, r6, pc}

0800372a <HAL_PCD_IRQHandler>:
{ 
 800372a:	b510      	push	{r4, lr}
 800372c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800372e:	6800      	ldr	r0, [r0, #0]
 8003730:	f003 f87f 	bl	8006832 <USB_ReadInterrupts>
 8003734:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003738:	d145      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	f003 f879 	bl	8006832 <USB_ReadInterrupts>
 8003740:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8003744:	d143      	bne.n	80037ce <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	f003 f873 	bl	8006832 <USB_ReadInterrupts>
 800374c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003750:	d008      	beq.n	8003764 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003758:	b29b      	uxth	r3, r3
 800375a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375e:	b29b      	uxth	r3, r3
 8003760:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	f003 f864 	bl	8006832 <USB_ReadInterrupts>
 800376a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800376e:	d008      	beq.n	8003782 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003776:	b29b      	uxth	r3, r3
 8003778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800377c:	b29b      	uxth	r3, r3
 800377e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	f003 f855 	bl	8006832 <USB_ReadInterrupts>
 8003788:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800378c:	d130      	bne.n	80037f0 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f003 f84f 	bl	8006832 <USB_ReadInterrupts>
 8003794:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003798:	d149      	bne.n	800382e <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	f003 f849 	bl	8006832 <USB_ReadInterrupts>
 80037a0:	f410 7f00 	tst.w	r0, #512	; 0x200
 80037a4:	d164      	bne.n	8003870 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	f003 f843 	bl	8006832 <USB_ReadInterrupts>
 80037ac:	f410 7f80 	tst.w	r0, #256	; 0x100
 80037b0:	d008      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80037c4:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff fd8d 	bl	80032e6 <PCD_EP_ISR_Handler>
 80037cc:	e7b5      	b.n	800373a <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f00a f81e 	bl	800d822 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80037e6:	2100      	movs	r1, #0
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff fcd4 	bl	8003196 <HAL_PCD_SetAddress>
 80037ee:	e7aa      	b.n	8003746 <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003808:	b29b      	uxth	r3, r3
 800380a:	f023 0308 	bic.w	r3, r3, #8
 800380e:	b29b      	uxth	r3, r3
 8003810:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003814:	4620      	mov	r0, r4
 8003816:	f00a f825 	bl	800d864 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003826:	b29b      	uxth	r3, r3
 8003828:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800382c:	e7af      	b.n	800378e <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003842:	b29b      	uxth	r3, r3
 8003844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003848:	b29b      	uxth	r3, r3
 800384a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	f002 ffe8 	bl	8006832 <USB_ReadInterrupts>
 8003862:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003866:	d198      	bne.n	800379a <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8003868:	4620      	mov	r0, r4
 800386a:	f009 ffeb 	bl	800d844 <HAL_PCD_SuspendCallback>
 800386e:	e794      	b.n	800379a <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003876:	b29b      	uxth	r3, r3
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	b29b      	uxth	r3, r3
 800387e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003882:	4620      	mov	r0, r4
 8003884:	f009 ffc7 	bl	800d816 <HAL_PCD_SOFCallback>
 8003888:	e78d      	b.n	80037a6 <HAL_PCD_IRQHandler+0x7c>

0800388a <HAL_PCD_EP_SetStall>:
{
 800388a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800388c:	b24a      	sxtb	r2, r1
 800388e:	2a00      	cmp	r2, #0
 8003890:	db1b      	blt.n	80038ca <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8003892:	014b      	lsls	r3, r1, #5
 8003894:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003898:	4403      	add	r3, r0
  ep->is_stall = 1U;
 800389a:	2401      	movs	r4, #1
 800389c:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800389e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80038a2:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80038a4:	0fd2      	lsrs	r2, r2, #31
 80038a6:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 80038a8:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80038ac:	42a2      	cmp	r2, r4
 80038ae:	d018      	beq.n	80038e2 <HAL_PCD_EP_SetStall+0x58>
 80038b0:	4604      	mov	r4, r0
 80038b2:	2201      	movs	r2, #1
 80038b4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80038b8:	4619      	mov	r1, r3
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	f002 ff2f 	bl	800671e <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80038c0:	b14d      	cbz	r5, 80038d6 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 80038c2:	2000      	movs	r0, #0
 80038c4:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 80038c8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80038ca:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	3328      	adds	r3, #40	; 0x28
 80038d2:	4403      	add	r3, r0
 80038d4:	e7e1      	b.n	800389a <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038d6:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	f002 ffac 	bl	8006838 <USB_EP0_OutStart>
 80038e0:	e7ef      	b.n	80038c2 <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 80038e2:	2002      	movs	r0, #2
 80038e4:	e7f0      	b.n	80038c8 <HAL_PCD_EP_SetStall+0x3e>

080038e6 <HAL_PCD_EP_ClrStall>:
{
 80038e6:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80038e8:	b24a      	sxtb	r2, r1
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	db1a      	blt.n	8003924 <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 80038ee:	014b      	lsls	r3, r1, #5
 80038f0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80038f4:	4403      	add	r3, r0
  ep->is_stall = 0U;
 80038f6:	2400      	movs	r4, #0
 80038f8:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80038fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038fe:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8003900:	0fd2      	lsrs	r2, r2, #31
 8003902:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8003904:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8003908:	2a01      	cmp	r2, #1
 800390a:	d011      	beq.n	8003930 <HAL_PCD_EP_ClrStall+0x4a>
 800390c:	4604      	mov	r4, r0
 800390e:	2201      	movs	r2, #1
 8003910:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8003914:	4619      	mov	r1, r3
 8003916:	6800      	ldr	r0, [r0, #0]
 8003918:	f002 ff38 	bl	800678c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800391c:	2000      	movs	r0, #0
 800391e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003922:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003924:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	3328      	adds	r3, #40	; 0x28
 800392c:	4403      	add	r3, r0
 800392e:	e7e2      	b.n	80038f6 <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8003930:	2002      	movs	r0, #2
 8003932:	e7f6      	b.n	8003922 <HAL_PCD_EP_ClrStall+0x3c>

08003934 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8003934:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8003938:	2b01      	cmp	r3, #1
 800393a:	d014      	beq.n	8003966 <HAL_PCD_EP_Flush+0x32>
{
 800393c:	b510      	push	{r4, lr}
 800393e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003940:	2301      	movs	r3, #1
 8003942:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  if ((ep_addr & 0x80U) == 0x80U)
 8003946:	f011 0f80 	tst.w	r1, #128	; 0x80
 800394a:	d106      	bne.n	800395a <HAL_PCD_EP_Flush+0x26>
    USB_FlushRxFifo(hpcd->Instance);
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f002 fc6e 	bl	800622e <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd); 
 8003952:	2000      	movs	r0, #0
 8003954:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8003958:	bd10      	pop	{r4, pc}
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 800395a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	f002 fc63 	bl	800622a <USB_FlushTxFifo>
 8003964:	e7f5      	b.n	8003952 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8003966:	2002      	movs	r0, #2
}
 8003968:	4770      	bx	lr

0800396a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800396a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800396e:	d00c      	beq.n	800398a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003970:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003974:	0149      	lsls	r1, r1, #5
 8003976:	3128      	adds	r1, #40	; 0x28
 8003978:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800397a:	b15a      	cbz	r2, 8003994 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800397c:	2201      	movs	r2, #1
 800397e:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8003980:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8003986:	2000      	movs	r0, #0
 8003988:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800398a:	0149      	lsls	r1, r1, #5
 800398c:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8003990:	4401      	add	r1, r0
 8003992:	e7f2      	b.n	800397a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8003994:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8003996:	808b      	strh	r3, [r1, #4]
 8003998:	e7f5      	b.n	8003986 <HAL_PCDEx_PMAConfig+0x1c>
	...

0800399c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800399c:	4b01      	ldr	r3, [pc, #4]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039aa:	f7ff fff7 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039b6:	4a03      	ldr	r2, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
}    
 80039ba:	40d8      	lsrs	r0, r3
 80039bc:	bd08      	pop	{r3, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800ef9c 	.word	0x0800ef9c

080039c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80039cc:	4604      	mov	r4, r0
 80039ce:	b1d0      	cbz	r0, 8003a06 <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != NULL);
 80039d0:	b1fd      	cbz	r5, 8003a12 <HAL_RCC_GetClockConfig+0x4a>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039d2:	230f      	movs	r3, #15
 80039d4:	6023      	str	r3, [r4, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_GetClockConfig+0x58>)
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	6062      	str	r2, [r4, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80039e6:	60a2      	str	r2, [r4, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80039ee:	60e2      	str	r2, [r4, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	08db      	lsrs	r3, r3, #3
 80039f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f8:	6123      	str	r3, [r4, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_GetClockConfig+0x5c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	602b      	str	r3, [r5, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8003a04:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != NULL);
 8003a06:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8003a0a:	4807      	ldr	r0, [pc, #28]	; (8003a28 <HAL_RCC_GetClockConfig+0x60>)
 8003a0c:	f7fd f9d5 	bl	8000dba <assert_failed>
 8003a10:	e7de      	b.n	80039d0 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != NULL);
 8003a12:	f240 5131 	movw	r1, #1329	; 0x531
 8003a16:	4804      	ldr	r0, [pc, #16]	; (8003a28 <HAL_RCC_GetClockConfig+0x60>)
 8003a18:	f7fd f9cf 	bl	8000dba <assert_failed>
 8003a1c:	e7d9      	b.n	80039d2 <HAL_RCC_GetClockConfig+0xa>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40022000 	.word	0x40022000
 8003a28:	0800f08c 	.word	0x0800f08c

08003a2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	f002 f8b6 	bl	8005ba8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	b110      	cbz	r0, 8003a46 <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8003a40:	4628      	mov	r0, r5
 8003a42:	b002      	add	sp, #8
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	f002 f8c1 	bl	8005bce <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	b310      	cbz	r0, 8003a96 <SD_PowerON+0x6a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003a50:	2300      	movs	r3, #0
 8003a52:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 8003a54:	462e      	mov	r6, r5
    while(validvoltage == 0U)
 8003a56:	b9de      	cbnz	r6, 8003a90 <SD_PowerON+0x64>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003a58:	9b01      	ldr	r3, [sp, #4]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	9201      	str	r2, [sp, #4]
 8003a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d044      	beq.n	8003af0 <SD_PowerON+0xc4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003a66:	2100      	movs	r1, #0
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	f002 f8c7 	bl	8005bfc <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d141      	bne.n	8003af6 <SD_PowerON+0xca>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003a72:	2100      	movs	r1, #0
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	f002 f8d9 	bl	8005c2c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d13d      	bne.n	8003afc <SD_PowerON+0xd0>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a80:	2100      	movs	r1, #0
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	f001 fe6e 	bl	8005764 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003a88:	0fc0      	lsrs	r0, r0, #31
 8003a8a:	d0e4      	beq.n	8003a56 <SD_PowerON+0x2a>
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	e7e2      	b.n	8003a56 <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8003a90:	2300      	movs	r3, #0
 8003a92:	6463      	str	r3, [r4, #68]	; 0x44
 8003a94:	e7d4      	b.n	8003a40 <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a96:	2301      	movs	r3, #1
 8003a98:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0U, validvoltage = 0U;
 8003a9a:	4605      	mov	r5, r0
    while(validvoltage == 0U)
 8003a9c:	b9ed      	cbnz	r5, 8003ada <SD_PowerON+0xae>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003a9e:	9b01      	ldr	r3, [sp, #4]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	9201      	str	r2, [sp, #4]
 8003aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02a      	beq.n	8003b02 <SD_PowerON+0xd6>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003aac:	2100      	movs	r1, #0
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	f002 f8a4 	bl	8005bfc <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1c2      	bne.n	8003a40 <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003aba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	f002 f8b4 	bl	8005c2c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d1ba      	bne.n	8003a40 <SD_PowerON+0x14>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003aca:	2100      	movs	r1, #0
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	f001 fe49 	bl	8005764 <SDIO_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ad2:	0fc3      	lsrs	r3, r0, #31
 8003ad4:	d0e2      	beq.n	8003a9c <SD_PowerON+0x70>
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	e7e0      	b.n	8003a9c <SD_PowerON+0x70>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003ada:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003ade:	d103      	bne.n	8003ae8 <SD_PowerON+0xbc>
      hsd->SdCard.CardType = CARD_SDSC;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003ae4:	4635      	mov	r5, r6
 8003ae6:	e7ab      	b.n	8003a40 <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003aec:	4635      	mov	r5, r6
 8003aee:	e7a7      	b.n	8003a40 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003af0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003af4:	e7a4      	b.n	8003a40 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003af6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003afa:	e7a1      	b.n	8003a40 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003afc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003b00:	e79e      	b.n	8003a40 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b02:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003b06:	e79b      	b.n	8003a40 <SD_PowerON+0x14>

08003b08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003b0c:	6a86      	ldr	r6, [r0, #40]	; 0x28
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003b0e:	2400      	movs	r4, #0
 8003b10:	e005      	b.n	8003b1e <SD_Read_IT+0x16>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003b12:	6828      	ldr	r0, [r5, #0]
 8003b14:	f001 fdce 	bl	80056b4 <SDIO_ReadFIFO>
 8003b18:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for(count = 0U; count < 8U; count++)
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	2c07      	cmp	r4, #7
 8003b20:	d9f7      	bls.n	8003b12 <SD_Read_IT+0xa>
  }
  
  hsd->pRxBuffPtr += 8U;
 8003b22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b24:	3320      	adds	r3, #32
 8003b26:	62ab      	str	r3, [r5, #40]	; 0x28
  
  return HAL_OK;
}
 8003b28:	2000      	movs	r0, #0
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}

08003b2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4605      	mov	r5, r0
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003b30:	6a06      	ldr	r6, [r0, #32]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003b32:	2400      	movs	r4, #0
 8003b34:	e005      	b.n	8003b42 <SD_Write_IT+0x16>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003b36:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8003b3a:	6828      	ldr	r0, [r5, #0]
 8003b3c:	f001 fdbd 	bl	80056ba <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003b40:	3401      	adds	r4, #1
 8003b42:	2c07      	cmp	r4, #7
 8003b44:	d9f7      	bls.n	8003b36 <SD_Write_IT+0xa>
  }
  
  hsd->pTxBuffPtr += 8U;
 8003b46:	6a2b      	ldr	r3, [r5, #32]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	622b      	str	r3, [r5, #32]
  
  return HAL_OK;
}
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}

08003b50 <SD_FindSCR>:
{
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	b088      	sub	sp, #32
 8003b56:	4604      	mov	r4, r0
 8003b58:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8003b5a:	f7fe fd41 	bl	80025e0 <HAL_GetTick>
 8003b5e:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8003b60:	2300      	movs	r3, #0
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003b66:	2108      	movs	r1, #8
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	f001 ff73 	bl	8005a54 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8003b6e:	4605      	mov	r5, r0
 8003b70:	b118      	cbz	r0, 8003b7a <SD_FindSCR+0x2a>
}
 8003b72:	4628      	mov	r0, r5
 8003b74:	b008      	add	sp, #32
 8003b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003b7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b7c:	0409      	lsls	r1, r1, #16
 8003b7e:	6820      	ldr	r0, [r4, #0]
 8003b80:	f002 f83c 	bl	8005bfc <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8003b84:	4605      	mov	r5, r0
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d1f3      	bne.n	8003b72 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003b90:	2308      	movs	r3, #8
 8003b92:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003b94:	2330      	movs	r3, #48	; 0x30
 8003b96:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8003ba4:	a902      	add	r1, sp, #8
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	f001 fef2 	bl	8005990 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	f002 f86e 	bl	8005c8e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1dc      	bne.n	8003b72 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8003bb8:	4680      	mov	r8, r0
 8003bba:	e005      	b.n	8003bc8 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003bbc:	f7fe fd10 	bl	80025e0 <HAL_GetTick>
 8003bc0:	1b80      	subs	r0, r0, r6
 8003bc2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bc6:	d043      	beq.n	8003c50 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003bcc:	f240 432a 	movw	r3, #1066	; 0x42a
 8003bd0:	421a      	tst	r2, r3
 8003bd2:	d10a      	bne.n	8003bea <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bd6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003bda:	d0ef      	beq.n	8003bbc <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003bdc:	f001 fd6a 	bl	80056b4 <SDIO_ReadFIFO>
 8003be0:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8003be4:	f108 0801 	add.w	r8, r8, #1
 8003be8:	e7e8      	b.n	8003bbc <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003bea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bec:	f013 0f08 	tst.w	r3, #8
 8003bf0:	d125      	bne.n	8003c3e <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bf2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bf4:	f013 0f02 	tst.w	r3, #2
 8003bf8:	d124      	bne.n	8003c44 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003bfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bfc:	f013 0f20 	tst.w	r3, #32
 8003c00:	d123      	bne.n	8003c4a <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c02:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003c06:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003c08:	9a00      	ldr	r2, [sp, #0]
 8003c0a:	0213      	lsls	r3, r2, #8
 8003c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003c14:	0a11      	lsrs	r1, r2, #8
 8003c16:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003c1a:	430b      	orrs	r3, r1
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003c1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003c20:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003c22:	9a01      	ldr	r2, [sp, #4]
 8003c24:	0213      	lsls	r3, r2, #8
 8003c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003c2e:	0a11      	lsrs	r1, r2, #8
 8003c30:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003c34:	430b      	orrs	r3, r1
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003c36:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003c3a:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 8003c3c:	e799      	b.n	8003b72 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003c3e:	2508      	movs	r5, #8
 8003c40:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003c42:	e796      	b.n	8003b72 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003c44:	2502      	movs	r5, #2
 8003c46:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c48:	e793      	b.n	8003b72 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003c4a:	2520      	movs	r5, #32
 8003c4c:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003c4e:	e790      	b.n	8003b72 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8003c50:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003c54:	e78d      	b.n	8003b72 <SD_FindSCR+0x22>

08003c56 <SD_WideBus_Enable>:
{
 8003c56:	b510      	push	{r4, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	9100      	str	r1, [sp, #0]
 8003c60:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c62:	6800      	ldr	r0, [r0, #0]
 8003c64:	f001 fd7e 	bl	8005764 <SDIO_GetResponse>
 8003c68:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003c6c:	d116      	bne.n	8003c9c <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003c6e:	4669      	mov	r1, sp
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ff6d 	bl	8003b50 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003c76:	4603      	mov	r3, r0
 8003c78:	b990      	cbnz	r0, 8003ca0 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c7a:	9b01      	ldr	r3, [sp, #4]
 8003c7c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003c80:	d011      	beq.n	8003ca6 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c82:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c84:	0409      	lsls	r1, r1, #16
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	f001 ffb8 	bl	8005bfc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b938      	cbnz	r0, 8003ca0 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003c90:	2102      	movs	r1, #2
 8003c92:	6820      	ldr	r0, [r4, #0]
 8003c94:	f001 ffe3 	bl	8005c5e <SDMMC_CmdBusWidth>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	e001      	b.n	8003ca0 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003caa:	e7f9      	b.n	8003ca0 <SD_WideBus_Enable+0x4a>

08003cac <SD_WideBus_Disable>:
{
 8003cac:	b510      	push	{r4, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	9100      	str	r1, [sp, #0]
 8003cb6:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cb8:	6800      	ldr	r0, [r0, #0]
 8003cba:	f001 fd53 	bl	8005764 <SDIO_GetResponse>
 8003cbe:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003cc2:	d116      	bne.n	8003cf2 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8003cc4:	4669      	mov	r1, sp
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff ff42 	bl	8003b50 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b990      	cbnz	r0, 8003cf6 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003cd6:	d011      	beq.n	8003cfc <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cd8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003cda:	0409      	lsls	r1, r1, #16
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	f001 ff8d 	bl	8005bfc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b938      	cbnz	r0, 8003cf6 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	f001 ffb8 	bl	8005c5e <SDMMC_CmdBusWidth>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	e001      	b.n	8003cf6 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d00:	e7f9      	b.n	8003cf6 <SD_WideBus_Disable+0x4a>

08003d02 <SD_SendStatus>:
{
 8003d02:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8003d04:	b181      	cbz	r1, 8003d28 <SD_SendStatus+0x26>
 8003d06:	460d      	mov	r5, r1
 8003d08:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d0a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003d0c:	0409      	lsls	r1, r1, #16
 8003d0e:	6800      	ldr	r0, [r0, #0]
 8003d10:	f002 f817 	bl	8005d42 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8003d14:	4606      	mov	r6, r0
 8003d16:	b108      	cbz	r0, 8003d1c <SD_SendStatus+0x1a>
}
 8003d18:	4630      	mov	r0, r6
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	6820      	ldr	r0, [r4, #0]
 8003d20:	f001 fd20 	bl	8005764 <SDIO_GetResponse>
 8003d24:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8003d26:	e7f7      	b.n	8003d18 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8003d28:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8003d2c:	e7f4      	b.n	8003d18 <SD_SendStatus+0x16>

08003d2e <HAL_SD_ReadBlocks>:
{
 8003d2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d32:	b087      	sub	sp, #28
 8003d34:	4604      	mov	r4, r0
 8003d36:	460d      	mov	r5, r1
 8003d38:	4616      	mov	r6, r2
 8003d3a:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fe fc50 	bl	80025e0 <HAL_GetTick>
  if(NULL == pData)
 8003d40:	b16d      	cbz	r5, 8003d5e <HAL_SD_ReadBlocks+0x30>
 8003d42:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8003d44:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d00d      	beq.n	8003d6a <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d54:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
}
 8003d58:	b007      	add	sp, #28
 8003d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d64:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
 8003d68:	e7f6      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d6e:	19f3      	adds	r3, r6, r7
 8003d70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d81b      	bhi.n	8003dae <HAL_SD_ReadBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 8003d76:	2303      	movs	r3, #3
 8003d78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d000      	beq.n	8003d8a <HAL_SD_ReadBlocks+0x5c>
      BlockAdd *= 512U;
 8003d88:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	f001 fe60 	bl	8005a54 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d94:	4603      	mov	r3, r0
 8003d96:	b180      	cbz	r0, 8003dba <HAL_SD_ReadBlocks+0x8c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003d9e:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003da0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003da2:	4318      	orrs	r0, r3
 8003da4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003da6:	2001      	movs	r0, #1
 8003da8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003dac:	e7d4      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003db4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
 8003db8:	e7ce      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003dc0:	027b      	lsls	r3, r7, #9
 8003dc2:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dc4:	2390      	movs	r3, #144	; 0x90
 8003dc6:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8003dd4:	4669      	mov	r1, sp
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	f001 fdda 	bl	8005990 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003ddc:	2f01      	cmp	r7, #1
 8003dde:	d915      	bls.n	8003e0c <HAL_SD_ReadBlocks+0xde>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003de0:	2302      	movs	r3, #2
 8003de2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003de4:	4631      	mov	r1, r6
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	f001 fe64 	bl	8005ab4 <SDMMC_CmdReadMultiBlock>
 8003dec:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dee:	f1b9 0f00 	cmp.w	r9, #0
 8003df2:	d025      	beq.n	8003e40 <HAL_SD_ReadBlocks+0x112>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dfe:	ea43 0309 	orr.w	r3, r3, r9
 8003e02:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e04:	2001      	movs	r0, #1
 8003e06:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003e0a:	e7a5      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003e10:	4631      	mov	r1, r6
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	f001 fe36 	bl	8005a84 <SDMMC_CmdReadSingleBlock>
 8003e18:	4681      	mov	r9, r0
 8003e1a:	e7e8      	b.n	8003dee <HAL_SD_ReadBlocks+0xc0>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	f001 fc49 	bl	80056b4 <SDIO_ReadFIFO>
 8003e22:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
        for(count = 0U; count < 8U; count++)
 8003e26:	3601      	adds	r6, #1
 8003e28:	2e07      	cmp	r6, #7
 8003e2a:	d9f7      	bls.n	8003e1c <HAL_SD_ReadBlocks+0xee>
        tempbuff += 8U;
 8003e2c:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e30:	b193      	cbz	r3, 8003e58 <HAL_SD_ReadBlocks+0x12a>
 8003e32:	f7fe fbd5 	bl	80025e0 <HAL_GetTick>
 8003e36:	eba0 0008 	sub.w	r0, r0, r8
 8003e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e3c:	4298      	cmp	r0, r3
 8003e3e:	d20b      	bcs.n	8003e58 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003e44:	f240 332a 	movw	r3, #810	; 0x32a
 8003e48:	421a      	tst	r2, r3
 8003e4a:	d112      	bne.n	8003e72 <HAL_SD_ReadBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e4e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003e52:	d0ec      	beq.n	8003e2e <HAL_SD_ReadBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 8003e54:	464e      	mov	r6, r9
 8003e56:	e7e7      	b.n	8003e28 <HAL_SD_ReadBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e66:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003e6e:	2003      	movs	r0, #3
 8003e70:	e772      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e78:	d007      	beq.n	8003e8a <HAL_SD_ReadBlocks+0x15c>
 8003e7a:	2f01      	cmp	r7, #1
 8003e7c:	d905      	bls.n	8003e8a <HAL_SD_ReadBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d002      	beq.n	8003e8a <HAL_SD_ReadBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e84:	f001 fe5e 	bl	8005b44 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e88:	bb50      	cbnz	r0, 8003ee0 <HAL_SD_ReadBlocks+0x1b2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8e:	f012 0f08 	tst.w	r2, #8
 8003e92:	d130      	bne.n	8003ef6 <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e96:	f012 0f02 	tst.w	r2, #2
 8003e9a:	d137      	bne.n	8003f0c <HAL_SD_ReadBlocks+0x1de>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9e:	f012 0f20 	tst.w	r2, #32
 8003ea2:	d13e      	bne.n	8003f22 <HAL_SD_ReadBlocks+0x1f4>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8003ea4:	6820      	ldr	r0, [r4, #0]
 8003ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ea8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003eac:	d044      	beq.n	8003f38 <HAL_SD_ReadBlocks+0x20a>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8003eae:	f001 fc01 	bl	80056b4 <SDIO_ReadFIFO>
 8003eb2:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eb8:	b133      	cbz	r3, 8003ec8 <HAL_SD_ReadBlocks+0x19a>
 8003eba:	f7fe fb91 	bl	80025e0 <HAL_GetTick>
 8003ebe:	eba0 0008 	sub.w	r0, r0, r8
 8003ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ec4:	4298      	cmp	r0, r3
 8003ec6:	d3ed      	bcc.n	8003ea4 <HAL_SD_ReadBlocks+0x176>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ed0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8003ede:	e73b      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003ee6:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eea:	4303      	orrs	r3, r0
 8003eec:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 8003ef4:	e730      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003efc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f04:	2001      	movs	r0, #1
 8003f06:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003f0a:	e725      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f0c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003f20:	e71a      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f2a:	f043 0320 	orr.w	r3, r3, #32
 8003f2e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f30:	2001      	movs	r0, #1
 8003f32:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003f36:	e70f      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f38:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003f3c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003f44:	2000      	movs	r0, #0
 8003f46:	e707      	b.n	8003d58 <HAL_SD_ReadBlocks+0x2a>

08003f48 <HAL_SD_WriteBlocks>:
{
 8003f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	4604      	mov	r4, r0
 8003f50:	460d      	mov	r5, r1
 8003f52:	4616      	mov	r6, r2
 8003f54:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003f56:	f7fe fb43 	bl	80025e0 <HAL_GetTick>
  if(NULL == pData)
 8003f5a:	b16d      	cbz	r5, 8003f78 <HAL_SD_WriteBlocks+0x30>
 8003f5c:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8003f5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d00d      	beq.n	8003f84 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f6e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
}
 8003f72:	b007      	add	sp, #28
 8003f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f7e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003f80:	2001      	movs	r0, #1
 8003f82:	e7f6      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f88:	19f3      	adds	r3, r6, r7
 8003f8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d828      	bhi.n	8003fe2 <HAL_SD_WriteBlocks+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 8003f90:	2303      	movs	r3, #3
 8003f92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d000      	beq.n	8003fa4 <HAL_SD_WriteBlocks+0x5c>
      BlockAdd *= 512U;
 8003fa2:	0276      	lsls	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	f001 fd53 	bl	8005a54 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fae:	4603      	mov	r3, r0
 8003fb0:	b9e8      	cbnz	r0, 8003fee <HAL_SD_WriteBlocks+0xa6>
    if(NumberOfBlocks > 1U)
 8003fb2:	2f01      	cmp	r7, #1
 8003fb4:	d926      	bls.n	8004004 <HAL_SD_WriteBlocks+0xbc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003fba:	4631      	mov	r1, r6
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	f001 fda9 	bl	8005b14 <SDMMC_CmdWriteMultiBlock>
 8003fc2:	4681      	mov	r9, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fc4:	f1b9 0f00 	cmp.w	r9, #0
 8003fc8:	d024      	beq.n	8004014 <HAL_SD_WriteBlocks+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd4:	ea43 0309 	orr.w	r3, r3, r9
 8003fd8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003fe0:	e7c7      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
 8003fec:	e7c1      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8003ff4:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ff6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003ff8:	4318      	orrs	r0, r3
 8003ffa:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004002:	e7b6      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004004:	2310      	movs	r3, #16
 8004006:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004008:	4631      	mov	r1, r6
 800400a:	6820      	ldr	r0, [r4, #0]
 800400c:	f001 fd6a 	bl	8005ae4 <SDMMC_CmdWriteSingleBlock>
 8004010:	4681      	mov	r9, r0
 8004012:	e7d7      	b.n	8003fc4 <HAL_SD_WriteBlocks+0x7c>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800401a:	027b      	lsls	r3, r7, #9
 800401c:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800401e:	2390      	movs	r3, #144	; 0x90
 8004020:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004022:	2300      	movs	r3, #0
 8004024:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004026:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004028:	2301      	movs	r3, #1
 800402a:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 800402c:	4669      	mov	r1, sp
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	f001 fcae 	bl	8005990 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004034:	e011      	b.n	800405a <HAL_SD_WriteBlocks+0x112>
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8004036:	eb05 0186 	add.w	r1, r5, r6, lsl #2
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	f001 fb3d 	bl	80056ba <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004040:	3601      	adds	r6, #1
 8004042:	2e07      	cmp	r6, #7
 8004044:	d9f7      	bls.n	8004036 <HAL_SD_WriteBlocks+0xee>
        tempbuff += 8U;
 8004046:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800404a:	b193      	cbz	r3, 8004072 <HAL_SD_WriteBlocks+0x12a>
 800404c:	f7fe fac8 	bl	80025e0 <HAL_GetTick>
 8004050:	eba0 0008 	sub.w	r0, r0, r8
 8004054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004056:	4298      	cmp	r0, r3
 8004058:	d20b      	bcs.n	8004072 <HAL_SD_WriteBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800405e:	f240 331a 	movw	r3, #794	; 0x31a
 8004062:	421a      	tst	r2, r3
 8004064:	d112      	bne.n	800408c <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8004066:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004068:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800406c:	d0ec      	beq.n	8004048 <HAL_SD_WriteBlocks+0x100>
        for(count = 0U; count < 8U; count++)
 800406e:	464e      	mov	r6, r9
 8004070:	e7e7      	b.n	8004042 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800407a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800407c:	ea43 0309 	orr.w	r3, r3, r9
 8004080:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004082:	2301      	movs	r3, #1
 8004084:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004088:	2003      	movs	r0, #3
 800408a:	e772      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800408c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800408e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004092:	d007      	beq.n	80040a4 <HAL_SD_WriteBlocks+0x15c>
 8004094:	2f01      	cmp	r7, #1
 8004096:	d905      	bls.n	80040a4 <HAL_SD_WriteBlocks+0x15c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004098:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800409a:	2b03      	cmp	r3, #3
 800409c:	d002      	beq.n	80040a4 <HAL_SD_WriteBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800409e:	f001 fd51 	bl	8005b44 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80040a2:	b9b8      	cbnz	r0, 80040d4 <HAL_SD_WriteBlocks+0x18c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a8:	f012 0f08 	tst.w	r2, #8
 80040ac:	d11d      	bne.n	80040ea <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80040ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b0:	f012 0f02 	tst.w	r2, #2
 80040b4:	d124      	bne.n	8004100 <HAL_SD_WriteBlocks+0x1b8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	f012 0f10 	tst.w	r2, #16
 80040bc:	d02b      	beq.n	8004116 <HAL_SD_WriteBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040c6:	f043 0310 	orr.w	r3, r3, #16
 80040ca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040cc:	2001      	movs	r0, #1
 80040ce:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80040d2:	e74e      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80040da:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80040dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040de:	4303      	orrs	r3, r0
 80040e0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80040e2:	2001      	movs	r0, #1
 80040e4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          return HAL_ERROR;
 80040e8:	e743      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040f8:	2001      	movs	r0, #1
 80040fa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80040fe:	e738      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004100:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8004106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800410e:	2001      	movs	r0, #1
 8004110:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004114:	e72d      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004116:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800411c:	2301      	movs	r3, #1
 800411e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8004122:	2000      	movs	r0, #0
 8004124:	e725      	b.n	8003f72 <HAL_SD_WriteBlocks+0x2a>

08004126 <HAL_SD_ErrorCallback>:
}
 8004126:	4770      	bx	lr

08004128 <HAL_SD_GetCardCSD>:
{
 8004128:	b430      	push	{r4, r5}
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800412a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800412c:	0f9a      	lsrs	r2, r3, #30
 800412e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004130:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004134:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8004136:	f3c3 6301 	ubfx	r3, r3, #24, #2
 800413a:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800413c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8004140:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004142:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8004146:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004148:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800414c:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800414e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004156:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800415a:	88cc      	ldrh	r4, [r1, #6]
 800415c:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8004160:	4322      	orrs	r2, r4
 8004162:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800416a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800416e:	09da      	lsrs	r2, r3, #7
 8004170:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8004172:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8004176:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8004178:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800417c:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800417e:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8004182:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8004184:	2200      	movs	r2, #0
 8004186:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004188:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800418a:	2a00      	cmp	r2, #0
 800418c:	f040 8092 	bne.w	80042b4 <HAL_SD_GetCardCSD+0x18c>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8004190:	029b      	lsls	r3, r3, #10
 8004192:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004196:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004198:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp) << 2U;
 800419a:	690a      	ldr	r2, [r1, #16]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80041a6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80041a8:	690a      	ldr	r2, [r1, #16]
 80041aa:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80041ae:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80041b0:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 80041b4:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80041b6:	f3c3 6302 	ubfx	r3, r3, #24, #3
 80041ba:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80041bc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80041be:	f3c2 4307 	ubfx	r3, r2, #16, #8
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80041c2:	f3c2 5442 	ubfx	r4, r2, #21, #3
 80041c6:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80041c8:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80041cc:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	f003 0306 	and.w	r3, r3, #6
 80041d4:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80041d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80041d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80041dc:	7e0c      	ldrb	r4, [r1, #24]
 80041de:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80041e2:	4322      	orrs	r2, r4
 80041e4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041e6:	690a      	ldr	r2, [r1, #16]
 80041e8:	3201      	adds	r2, #1
 80041ea:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80041ec:	7e0c      	ldrb	r4, [r1, #24]
 80041ee:	3402      	adds	r4, #2
 80041f0:	fa02 f404 	lsl.w	r4, r2, r4
 80041f4:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80041f6:	7a0a      	ldrb	r2, [r1, #8]
 80041f8:	b2d5      	uxtb	r5, r2
 80041fa:	2201      	movs	r2, #1
 80041fc:	40aa      	lsls	r2, r5
 80041fe:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8004200:	0a52      	lsrs	r2, r2, #9
 8004202:	fb02 f204 	mul.w	r2, r2, r4
 8004206:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420c:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800420e:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8004212:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800421a:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800421c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800421e:	7e8a      	ldrb	r2, [r1, #26]
 8004220:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8004224:	4322      	orrs	r2, r4
 8004226:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8004228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422c:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800422e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004230:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004232:	0fdc      	lsrs	r4, r3, #31
 8004234:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004236:	f3c3 7441 	ubfx	r4, r3, #29, #2
 800423a:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800423c:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8004240:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004242:	0093      	lsls	r3, r2, #2
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800424a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800424c:	7fca      	ldrb	r2, [r1, #31]
 800424e:	f3c3 5481 	ubfx	r4, r3, #22, #2
 8004252:	4322      	orrs	r2, r4
 8004254:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004256:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800425a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 800425e:	2200      	movs	r2, #0
 8004260:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8004264:	f3c3 4300 	ubfx	r3, r3, #16, #1
 8004268:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800426c:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800426e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8004272:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8004276:	f3c3 3480 	ubfx	r4, r3, #14, #1
 800427a:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800427e:	f3c3 3440 	ubfx	r4, r3, #13, #1
 8004282:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8004286:	f3c3 3400 	ubfx	r4, r3, #12, #1
 800428a:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800428e:	f3c3 2481 	ubfx	r4, r3, #10, #2
 8004292:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8004296:	f3c3 2301 	ubfx	r3, r3, #8, #2
 800429a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800429e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80042a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80042a4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 80042ae:	4610      	mov	r0, r2
}
 80042b0:	bc30      	pop	{r4, r5}
 80042b2:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042b4:	2a01      	cmp	r2, #1
 80042b6:	d00c      	beq.n	80042d2 <HAL_SD_GetCardCSD+0x1aa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80042b8:	6803      	ldr	r3, [r0, #0]
 80042ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042c8:	2201      	movs	r2, #1
 80042ca:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 80042ce:	4610      	mov	r0, r2
 80042d0:	e7ee      	b.n	80042b0 <HAL_SD_GetCardCSD+0x188>
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80042d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80042da:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80042dc:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8U);
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042e6:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80042e8:	690a      	ldr	r2, [r1, #16]
 80042ea:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
 80042f2:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80042f6:	690a      	ldr	r2, [r1, #16]
 80042f8:	3201      	adds	r2, #1
 80042fa:	0292      	lsls	r2, r2, #10
 80042fc:	6542      	str	r2, [r0, #84]	; 0x54
 80042fe:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004304:	6582      	str	r2, [r0, #88]	; 0x58
 8004306:	6602      	str	r2, [r0, #96]	; 0x60
 8004308:	e781      	b.n	800420e <HAL_SD_GetCardCSD+0xe6>

0800430a <SD_InitCard>:
{
 800430a:	b570      	push	{r4, r5, r6, lr}
 800430c:	b090      	sub	sp, #64	; 0x40
 800430e:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8004310:	2301      	movs	r3, #1
 8004312:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004316:	6800      	ldr	r0, [r0, #0]
 8004318:	f001 f9d8 	bl	80056cc <SDIO_GetPowerState>
 800431c:	2800      	cmp	r0, #0
 800431e:	d06a      	beq.n	80043f6 <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004322:	2b03      	cmp	r3, #3
 8004324:	d143      	bne.n	80043ae <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004328:	2b03      	cmp	r3, #3
 800432a:	d15b      	bne.n	80043e4 <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800432c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800432e:	2b03      	cmp	r3, #3
 8004330:	d01d      	beq.n	800436e <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004332:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8004336:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004338:	0409      	lsls	r1, r1, #16
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	f001 fcd4 	bl	8005ce8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004340:	4605      	mov	r5, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d159      	bne.n	80043fa <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004346:	2100      	movs	r1, #0
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	f001 fa0b 	bl	8005764 <SDIO_GetResponse>
 800434e:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004350:	2104      	movs	r1, #4
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	f001 fa06 	bl	8005764 <SDIO_GetResponse>
 8004358:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800435a:	2108      	movs	r1, #8
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	f001 fa01 	bl	8005764 <SDIO_GetResponse>
 8004362:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004364:	210c      	movs	r1, #12
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	f001 f9fc 	bl	8005764 <SDIO_GetResponse>
 800436c:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800436e:	2104      	movs	r1, #4
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	f001 f9f7 	bl	8005764 <SDIO_GetResponse>
 8004376:	0d00      	lsrs	r0, r0, #20
 8004378:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800437a:	a905      	add	r1, sp, #20
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff fed3 	bl	8004128 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004382:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004384:	0412      	lsls	r2, r2, #16
 8004386:	2300      	movs	r3, #0
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	f001 fbf5 	bl	8005b78 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800438e:	4605      	mov	r5, r0
 8004390:	bb98      	cbnz	r0, 80043fa <SD_InitCard+0xf0>
  SDIO_Init(hsd->Instance, hsd->Init);
 8004392:	4623      	mov	r3, r4
 8004394:	f853 6b10 	ldr.w	r6, [r3], #16
 8004398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800439c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80043a0:	3404      	adds	r4, #4
 80043a2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80043a6:	4630      	mov	r0, r6
 80043a8:	f001 f918 	bl	80055dc <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80043ac:	e025      	b.n	80043fa <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	f001 fc85 	bl	8005cbe <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	4605      	mov	r5, r0
 80043b6:	bb00      	cbnz	r0, 80043fa <SD_InitCard+0xf0>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043b8:	2100      	movs	r1, #0
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	f001 f9d2 	bl	8005764 <SDIO_GetResponse>
 80043c0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80043c2:	2104      	movs	r1, #4
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	f001 f9cd 	bl	8005764 <SDIO_GetResponse>
 80043ca:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80043cc:	2108      	movs	r1, #8
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	f001 f9c8 	bl	8005764 <SDIO_GetResponse>
 80043d4:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80043d6:	210c      	movs	r1, #12
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	f001 f9c3 	bl	8005764 <SDIO_GetResponse>
 80043de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80043e2:	e7a0      	b.n	8004326 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80043e4:	f10d 0112 	add.w	r1, sp, #18
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	f001 fc92 	bl	8005d12 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ee:	4605      	mov	r5, r0
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d09b      	beq.n	800432c <SD_InitCard+0x22>
 80043f4:	e001      	b.n	80043fa <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043f6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80043fa:	4628      	mov	r0, r5
 80043fc:	b010      	add	sp, #64	; 0x40
 80043fe:	bd70      	pop	{r4, r5, r6, pc}

08004400 <HAL_SD_InitCard>:
{
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004406:	2400      	movs	r4, #0
 8004408:	9404      	str	r4, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800440a:	9405      	str	r4, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800440c:	9406      	str	r4, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800440e:	9407      	str	r4, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004410:	9408      	str	r4, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004412:	23c3      	movs	r3, #195	; 0xc3
 8004414:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8004416:	ab0a      	add	r3, sp, #40	; 0x28
 8004418:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800441c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004420:	ab04      	add	r3, sp, #16
 8004422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004424:	6828      	ldr	r0, [r5, #0]
 8004426:	f001 f8d9 	bl	80055dc <SDIO_Init>
  __HAL_SD_DISABLE(hsd); 
 800442a:	4e12      	ldr	r6, [pc, #72]	; (8004474 <HAL_SD_InitCard+0x74>)
 800442c:	6034      	str	r4, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 800442e:	6828      	ldr	r0, [r5, #0]
 8004430:	f001 f948 	bl	80056c4 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004434:	2301      	movs	r3, #1
 8004436:	6033      	str	r3, [r6, #0]
  HAL_Delay(2U);
 8004438:	2002      	movs	r0, #2
 800443a:	f7fe f8d7 	bl	80025ec <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800443e:	4628      	mov	r0, r5
 8004440:	f7ff faf4 	bl	8003a2c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004444:	b140      	cbz	r0, 8004458 <HAL_SD_InitCard+0x58>
 8004446:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 8004448:	2001      	movs	r0, #1
 800444a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800444e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004450:	4313      	orrs	r3, r2
 8004452:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8004454:	b00a      	add	sp, #40	; 0x28
 8004456:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SD_InitCard(hsd);
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff ff56 	bl	800430a <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800445e:	4602      	mov	r2, r0
 8004460:	b130      	cbz	r0, 8004470 <HAL_SD_InitCard+0x70>
    hsd->State = HAL_SD_STATE_READY;
 8004462:	2001      	movs	r0, #1
 8004464:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004468:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800446a:	4313      	orrs	r3, r2
 800446c:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800446e:	e7f1      	b.n	8004454 <HAL_SD_InitCard+0x54>
  return HAL_OK;
 8004470:	2000      	movs	r0, #0
 8004472:	e7ef      	b.n	8004454 <HAL_SD_InitCard+0x54>
 8004474:	423000a0 	.word	0x423000a0

08004478 <HAL_SD_Init>:
  if(hsd == NULL)
 8004478:	2800      	cmp	r0, #0
 800447a:	d062      	beq.n	8004542 <HAL_SD_Init+0xca>
{
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));
 8004480:	6802      	ldr	r2, [r0, #0]
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_SD_Init+0xd0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d004      	beq.n	8004492 <HAL_SD_Init+0x1a>
 8004488:	f240 1137 	movw	r1, #311	; 0x137
 800448c:	482f      	ldr	r0, [pc, #188]	; (800454c <HAL_SD_Init+0xd4>)
 800448e:	f7fc fc94 	bl	8000dba <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	b113      	cbz	r3, 800449c <HAL_SD_Init+0x24>
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449a:	d129      	bne.n	80044f0 <HAL_SD_Init+0x78>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800449c:	68a3      	ldr	r3, [r4, #8]
 800449e:	b113      	cbz	r3, 80044a6 <HAL_SD_Init+0x2e>
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a4:	d12a      	bne.n	80044fc <HAL_SD_Init+0x84>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 80044a6:	68e3      	ldr	r3, [r4, #12]
 80044a8:	b113      	cbz	r3, 80044b0 <HAL_SD_Init+0x38>
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ae:	d12b      	bne.n	8004508 <HAL_SD_Init+0x90>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 80044b0:	6923      	ldr	r3, [r4, #16]
 80044b2:	b12b      	cbz	r3, 80044c0 <HAL_SD_Init+0x48>
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b8:	d002      	beq.n	80044c0 <HAL_SD_Init+0x48>
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d129      	bne.n	8004514 <HAL_SD_Init+0x9c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 80044c0:	6963      	ldr	r3, [r4, #20]
 80044c2:	b113      	cbz	r3, 80044ca <HAL_SD_Init+0x52>
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c8:	d12a      	bne.n	8004520 <HAL_SD_Init+0xa8>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 80044ca:	69a3      	ldr	r3, [r4, #24]
 80044cc:	2bff      	cmp	r3, #255	; 0xff
 80044ce:	d82d      	bhi.n	800452c <HAL_SD_Init+0xb4>
  if(hsd->State == HAL_SD_STATE_RESET)
 80044d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80044d4:	b383      	cbz	r3, 8004538 <HAL_SD_Init+0xc0>
  hsd->State = HAL_SD_STATE_BUSY;
 80044d6:	2303      	movs	r3, #3
 80044d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff ff8f 	bl	8004400 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e2:	2000      	movs	r0, #0
 80044e4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80044e6:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80044ee:	bd10      	pop	{r4, pc}
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 80044f0:	f44f 719c 	mov.w	r1, #312	; 0x138
 80044f4:	4815      	ldr	r0, [pc, #84]	; (800454c <HAL_SD_Init+0xd4>)
 80044f6:	f7fc fc60 	bl	8000dba <assert_failed>
 80044fa:	e7cf      	b.n	800449c <HAL_SD_Init+0x24>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 80044fc:	f240 1139 	movw	r1, #313	; 0x139
 8004500:	4812      	ldr	r0, [pc, #72]	; (800454c <HAL_SD_Init+0xd4>)
 8004502:	f7fc fc5a 	bl	8000dba <assert_failed>
 8004506:	e7ce      	b.n	80044a6 <HAL_SD_Init+0x2e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004508:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800450c:	480f      	ldr	r0, [pc, #60]	; (800454c <HAL_SD_Init+0xd4>)
 800450e:	f7fc fc54 	bl	8000dba <assert_failed>
 8004512:	e7cd      	b.n	80044b0 <HAL_SD_Init+0x38>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 8004514:	f240 113b 	movw	r1, #315	; 0x13b
 8004518:	480c      	ldr	r0, [pc, #48]	; (800454c <HAL_SD_Init+0xd4>)
 800451a:	f7fc fc4e 	bl	8000dba <assert_failed>
 800451e:	e7cf      	b.n	80044c0 <HAL_SD_Init+0x48>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8004520:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004524:	4809      	ldr	r0, [pc, #36]	; (800454c <HAL_SD_Init+0xd4>)
 8004526:	f7fc fc48 	bl	8000dba <assert_failed>
 800452a:	e7ce      	b.n	80044ca <HAL_SD_Init+0x52>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 800452c:	f240 113d 	movw	r1, #317	; 0x13d
 8004530:	4806      	ldr	r0, [pc, #24]	; (800454c <HAL_SD_Init+0xd4>)
 8004532:	f7fc fc42 	bl	8000dba <assert_failed>
 8004536:	e7cb      	b.n	80044d0 <HAL_SD_Init+0x58>
    hsd->Lock = HAL_UNLOCKED;
 8004538:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 800453a:	4620      	mov	r0, r4
 800453c:	f7fc fc96 	bl	8000e6c <HAL_SD_MspInit>
 8004540:	e7c9      	b.n	80044d6 <HAL_SD_Init+0x5e>
    return HAL_ERROR;
 8004542:	2001      	movs	r0, #1
}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40018000 	.word	0x40018000
 800454c:	0800f0c4 	.word	0x0800f0c4

08004550 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004550:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004552:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004554:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004556:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004558:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800455a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800455c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800455e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004560:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004562:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004564:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004566:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004568:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800456a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800456c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800456e:	61cb      	str	r3, [r1, #28]
}
 8004570:	2000      	movs	r0, #0
 8004572:	4770      	bx	lr

08004574 <HAL_SD_ConfigWideBusOperation>:
{
 8004574:	b530      	push	{r4, r5, lr}
 8004576:	b08b      	sub	sp, #44	; 0x2c
 8004578:	4604      	mov	r4, r0
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 800457a:	460d      	mov	r5, r1
 800457c:	b129      	cbz	r1, 800458a <HAL_SD_ConfigWideBusOperation+0x16>
 800457e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004582:	d002      	beq.n	800458a <HAL_SD_ConfigWideBusOperation+0x16>
 8004584:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004588:	d111      	bne.n	80045ae <HAL_SD_ConfigWideBusOperation+0x3a>
  hsd->State = HAL_SD_STATE_BUSY;
 800458a:	2303      	movs	r3, #3
 800458c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004592:	2b03      	cmp	r3, #3
 8004594:	d024      	beq.n	80045e0 <HAL_SD_ConfigWideBusOperation+0x6c>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004596:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800459a:	d00e      	beq.n	80045ba <HAL_SD_ConfigWideBusOperation+0x46>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800459c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80045a0:	d010      	beq.n	80045c4 <HAL_SD_ConfigWideBusOperation+0x50>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80045a2:	b1b5      	cbz	r5, 80045d2 <HAL_SD_ConfigWideBusOperation+0x5e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80045ac:	e01c      	b.n	80045e8 <HAL_SD_ConfigWideBusOperation+0x74>
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 80045ae:	f240 71ba 	movw	r1, #1978	; 0x7ba
 80045b2:	4820      	ldr	r0, [pc, #128]	; (8004634 <HAL_SD_ConfigWideBusOperation+0xc0>)
 80045b4:	f7fc fc01 	bl	8000dba <assert_failed>
 80045b8:	e7e7      	b.n	800458a <HAL_SD_ConfigWideBusOperation+0x16>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80045c2:	e011      	b.n	80045e8 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Enable(hsd);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7ff fb46 	bl	8003c56 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80045ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045cc:	4318      	orrs	r0, r3
 80045ce:	63a0      	str	r0, [r4, #56]	; 0x38
 80045d0:	e00a      	b.n	80045e8 <HAL_SD_ConfigWideBusOperation+0x74>
      errorstate = SD_WideBus_Disable(hsd);
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff fb6a 	bl	8003cac <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80045d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045da:	4318      	orrs	r0, r3
 80045dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80045de:	e003      	b.n	80045e8 <HAL_SD_ConfigWideBusOperation+0x74>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80045e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ea:	b143      	cbz	r3, 80045fe <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045f4:	2001      	movs	r0, #1
 80045f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80045fa:	b00b      	add	sp, #44	; 0x2c
 80045fc:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004606:	68e3      	ldr	r3, [r4, #12]
 8004608:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 800460a:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800460c:	6963      	ldr	r3, [r4, #20]
 800460e:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004610:	69a3      	ldr	r3, [r4, #24]
 8004612:	9309      	str	r3, [sp, #36]	; 0x24
    SDIO_Init(hsd->Instance, Init);
 8004614:	ab0a      	add	r3, sp, #40	; 0x28
 8004616:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800461a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800461e:	ab04      	add	r3, sp, #16
 8004620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	f000 ffda 	bl	80055dc <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004628:	2301      	movs	r3, #1
 800462a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800462e:	2000      	movs	r0, #0
 8004630:	e7e3      	b.n	80045fa <HAL_SD_ConfigWideBusOperation+0x86>
 8004632:	bf00      	nop
 8004634:	0800f0c4 	.word	0x0800f0c4

08004638 <HAL_SD_GetCardState>:
{
 8004638:	b510      	push	{r4, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800463e:	a902      	add	r1, sp, #8
 8004640:	2300      	movs	r3, #0
 8004642:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8004646:	f7ff fb5c 	bl	8003d02 <SD_SendStatus>
  if(errorstate != HAL_OK)
 800464a:	b118      	cbz	r0, 8004654 <HAL_SD_GetCardState+0x1c>
 800464c:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 800464e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004650:	4318      	orrs	r0, r3
 8004652:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004654:	9801      	ldr	r0, [sp, #4]
 8004656:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800465a:	b002      	add	sp, #8
 800465c:	bd10      	pop	{r4, pc}

0800465e <SD_DMATxAbort>:
{
 800465e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004660:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmatx != NULL)
 8004662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004664:	b10b      	cbz	r3, 800466a <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 800466a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800466c:	b103      	cbz	r3, 8004670 <SD_DMATxAbort+0x12>
}
 800466e:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ffe1 	bl	8004638 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004676:	2300      	movs	r3, #0
 8004678:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800467a:	2301      	movs	r3, #1
 800467c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004680:	3805      	subs	r0, #5
 8004682:	b2c0      	uxtb	r0, r0
 8004684:	4298      	cmp	r0, r3
 8004686:	d8f2      	bhi.n	800466e <SD_DMATxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	f001 fa5b 	bl	8005b44 <SDMMC_CmdStopTransfer>
 800468e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004690:	4318      	orrs	r0, r3
 8004692:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004696:	b91b      	cbnz	r3, 80046a0 <SD_DMATxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff fd44 	bl	8004126 <HAL_SD_ErrorCallback>
}
 800469e:	e7e6      	b.n	800466e <SD_DMATxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 80046a0:	4620      	mov	r0, r4
 80046a2:	f002 fadc 	bl	8006c5e <HAL_SD_AbortCallback>
 80046a6:	e7e2      	b.n	800466e <SD_DMATxAbort+0x10>

080046a8 <SD_DMARxAbort>:
{
 80046a8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if(hsd->hdmarx != NULL)
 80046ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046ae:	b10b      	cbz	r3, 80046b4 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 80046b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046b6:	b103      	cbz	r3, 80046ba <SD_DMARxAbort+0x12>
}
 80046b8:	bd10      	pop	{r4, pc}
    CardState = HAL_SD_GetCardState(hsd);
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ffbc 	bl	8004638 <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046ca:	3805      	subs	r0, #5
 80046cc:	b2c0      	uxtb	r0, r0
 80046ce:	4298      	cmp	r0, r3
 80046d0:	d8f2      	bhi.n	80046b8 <SD_DMARxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	f001 fa36 	bl	8005b44 <SDMMC_CmdStopTransfer>
 80046d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046da:	4318      	orrs	r0, r3
 80046dc:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e0:	b91b      	cbnz	r3, 80046ea <SD_DMARxAbort+0x42>
        HAL_SD_ErrorCallback(hsd);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7ff fd1f 	bl	8004126 <HAL_SD_ErrorCallback>
}
 80046e8:	e7e6      	b.n	80046b8 <SD_DMARxAbort+0x10>
        HAL_SD_AbortCallback(hsd);
 80046ea:	4620      	mov	r0, r4
 80046ec:	f002 fab7 	bl	8006c5e <HAL_SD_AbortCallback>
 80046f0:	e7e2      	b.n	80046b8 <SD_DMARxAbort+0x10>
	...

080046f4 <HAL_SD_IRQHandler>:
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80046f8:	6803      	ldr	r3, [r0, #0]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004700:	d061      	beq.n	80047c6 <HAL_SD_IRQHandler+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004708:	6802      	ldr	r2, [r0, #0]
 800470a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800470c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004710:	f023 0302 	bic.w	r3, r3, #2
 8004714:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004716:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004718:	f013 0f08 	tst.w	r3, #8
 800471c:	d02a      	beq.n	8004774 <HAL_SD_IRQHandler+0x80>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800471e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004720:	f013 0f02 	tst.w	r3, #2
 8004724:	d103      	bne.n	800472e <HAL_SD_IRQHandler+0x3a>
 8004726:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004728:	f013 0f20 	tst.w	r3, #32
 800472c:	d004      	beq.n	8004738 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	f001 fa08 	bl	8005b44 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004734:	4603      	mov	r3, r0
 8004736:	b990      	cbnz	r0, 800475e <HAL_SD_IRQHandler+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004740:	2301      	movs	r3, #1
 8004742:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004748:	f013 0f01 	tst.w	r3, #1
 800474c:	d103      	bne.n	8004756 <HAL_SD_IRQHandler+0x62>
 800474e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004750:	f013 0f02 	tst.w	r3, #2
 8004754:	d00a      	beq.n	800476c <HAL_SD_IRQHandler+0x78>
        HAL_SD_RxCpltCallback(hsd);
 8004756:	4620      	mov	r0, r4
 8004758:	f002 fa8b 	bl	8006c72 <HAL_SD_RxCpltCallback>
}
 800475c:	bd10      	pop	{r4, pc}
          hsd->ErrorCode |= errorstate;
 800475e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004760:	4313      	orrs	r3, r2
 8004762:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff fcde 	bl	8004126 <HAL_SD_ErrorCallback>
 800476a:	e7e5      	b.n	8004738 <HAL_SD_IRQHandler+0x44>
        HAL_SD_TxCpltCallback(hsd);
 800476c:	4620      	mov	r0, r4
 800476e:	f002 fa7b 	bl	8006c68 <HAL_SD_TxCpltCallback>
 8004772:	e7f3      	b.n	800475c <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004776:	f013 0f80 	tst.w	r3, #128	; 0x80
 800477a:	d0ef      	beq.n	800475c <HAL_SD_IRQHandler+0x68>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800477c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800477e:	f013 0f20 	tst.w	r3, #32
 8004782:	d113      	bne.n	80047ac <HAL_SD_IRQHandler+0xb8>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004786:	f013 0f01 	tst.w	r3, #1
 800478a:	d1e7      	bne.n	800475c <HAL_SD_IRQHandler+0x68>
 800478c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800478e:	f013 0f02 	tst.w	r3, #2
 8004792:	d1e3      	bne.n	800475c <HAL_SD_IRQHandler+0x68>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004798:	f023 0308 	bic.w	r3, r3, #8
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800479e:	2301      	movs	r3, #1
 80047a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80047a4:	4620      	mov	r0, r4
 80047a6:	f002 fa5f 	bl	8006c68 <HAL_SD_TxCpltCallback>
 80047aa:	e7d7      	b.n	800475c <HAL_SD_IRQHandler+0x68>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047ac:	6800      	ldr	r0, [r0, #0]
 80047ae:	f001 f9c9 	bl	8005b44 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80047b2:	4603      	mov	r3, r0
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d0e5      	beq.n	8004784 <HAL_SD_IRQHandler+0x90>
          hsd->ErrorCode |= errorstate;
 80047b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047ba:	4313      	orrs	r3, r2
 80047bc:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80047be:	4620      	mov	r0, r4
 80047c0:	f7ff fcb1 	bl	8004126 <HAL_SD_ErrorCallback>
 80047c4:	e7de      	b.n	8004784 <HAL_SD_IRQHandler+0x90>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80047cc:	d14c      	bne.n	8004868 <HAL_SD_IRQHandler+0x174>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80047d4:	d14e      	bne.n	8004874 <HAL_SD_IRQHandler+0x180>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80047d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047d8:	f240 223a 	movw	r2, #570	; 0x23a
 80047dc:	4211      	tst	r1, r2
 80047de:	d0bd      	beq.n	800475c <HAL_SD_IRQHandler+0x68>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80047e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e2:	f012 0f02 	tst.w	r2, #2
 80047e6:	d003      	beq.n	80047f0 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80047e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80047ea:	f042 0202 	orr.w	r2, r2, #2
 80047ee:	6382      	str	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80047f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f2:	f012 0f08 	tst.w	r2, #8
 80047f6:	d003      	beq.n	8004800 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80047f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	f012 0f20 	tst.w	r2, #32
 8004806:	d003      	beq.n	8004810 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8004808:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800480a:	f042 0220 	orr.w	r2, r2, #32
 800480e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8004810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004812:	f012 0f10 	tst.w	r2, #16
 8004816:	d003      	beq.n	8004820 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800481a:	f042 0210 	orr.w	r2, r2, #16
 800481e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004826:	d003      	beq.n	8004830 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800483a:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800483e:	f023 0302 	bic.w	r3, r3, #2
 8004842:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004846:	f013 0f80 	tst.w	r3, #128	; 0x80
 800484a:	d030      	beq.n	80048ae <HAL_SD_IRQHandler+0x1ba>
      if(hsd->hdmatx != NULL)
 800484c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800484e:	b1bb      	cbz	r3, 8004880 <HAL_SD_IRQHandler+0x18c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_SD_IRQHandler+0x1d4>)
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004854:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004856:	f7fe f825 	bl	80028a4 <HAL_DMA_Abort_IT>
 800485a:	2800      	cmp	r0, #0
 800485c:	f43f af7e 	beq.w	800475c <HAL_SD_IRQHandler+0x68>
          SD_DMATxAbort(hsd->hdmatx);
 8004860:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004862:	f7ff fefc 	bl	800465e <SD_DMATxAbort>
 8004866:	e779      	b.n	800475c <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8004868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800486e:	f7ff f95d 	bl	8003b2c <SD_Write_IT>
 8004872:	e773      	b.n	800475c <HAL_SD_IRQHandler+0x68>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8004874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800487a:	f7ff f945 	bl	8003b08 <SD_Read_IT>
 800487e:	e76d      	b.n	800475c <HAL_SD_IRQHandler+0x68>
      else if(hsd->hdmarx != NULL)
 8004880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004882:	b15b      	cbz	r3, 800489c <HAL_SD_IRQHandler+0x1a8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004884:	4a11      	ldr	r2, [pc, #68]	; (80048cc <HAL_SD_IRQHandler+0x1d8>)
 8004886:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004888:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800488a:	f7fe f80b 	bl	80028a4 <HAL_DMA_Abort_IT>
 800488e:	2800      	cmp	r0, #0
 8004890:	f43f af64 	beq.w	800475c <HAL_SD_IRQHandler+0x68>
          SD_DMARxAbort(hsd->hdmarx);
 8004894:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004896:	f7ff ff07 	bl	80046a8 <SD_DMARxAbort>
 800489a:	e75f      	b.n	800475c <HAL_SD_IRQHandler+0x68>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800489c:	2300      	movs	r3, #0
 800489e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80048a6:	4620      	mov	r0, r4
 80048a8:	f002 f9d9 	bl	8006c5e <HAL_SD_AbortCallback>
 80048ac:	e756      	b.n	800475c <HAL_SD_IRQHandler+0x68>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80048ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048b0:	f013 0f08 	tst.w	r3, #8
 80048b4:	f43f af52 	beq.w	800475c <HAL_SD_IRQHandler+0x68>
      hsd->State = HAL_SD_STATE_READY;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fc31 	bl	8004126 <HAL_SD_ErrorCallback>
}
 80048c4:	e74a      	b.n	800475c <HAL_SD_IRQHandler+0x68>
 80048c6:	bf00      	nop
 80048c8:	0800465f 	.word	0x0800465f
 80048cc:	080046a9 	.word	0x080046a9

080048d0 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80048d8:	6803      	ldr	r3, [r0, #0]
 80048da:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_TIM_Base_Start_IT+0x64>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d01f      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 80048e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d018      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 80048ee:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d014      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 80048f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d010      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 80048fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004902:	4293      	cmp	r3, r2
 8004904:	d00c      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 8004906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490a:	4293      	cmp	r3, r2
 800490c:	d008      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 800490e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x4c>
 8004916:	f240 1161 	movw	r1, #353	; 0x161
 800491a:	4808      	ldr	r0, [pc, #32]	; (800493c <HAL_TIM_Base_Start_IT+0x68>)
 800491c:	f7fc fa4d 	bl	8000dba <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	68d3      	ldr	r3, [r2, #12]
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8004934:	2000      	movs	r0, #0
 8004936:	bd10      	pop	{r4, pc}
 8004938:	40012c00 	.word	0x40012c00
 800493c:	0800f0fc 	.word	0x0800f0fc

08004940 <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_IRQHandler>:
{
 8004948:	b510      	push	{r4, lr}
 800494a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	6803      	ldr	r3, [r0, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	f012 0f02 	tst.w	r2, #2
 8004954:	d011      	beq.n	800497a <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	f012 0f02 	tst.w	r2, #2
 800495c:	d00d      	beq.n	800497a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495e:	f06f 0202 	mvn.w	r2, #2
 8004962:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004964:	2301      	movs	r3, #1
 8004966:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	6803      	ldr	r3, [r0, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f013 0f03 	tst.w	r3, #3
 8004970:	d070      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004972:	f7ff ffe6 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	2300      	movs	r3, #0
 8004978:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	f012 0f04 	tst.w	r2, #4
 8004982:	d012      	beq.n	80049aa <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	f012 0f04 	tst.w	r2, #4
 800498a:	d00e      	beq.n	80049aa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800498c:	f06f 0204 	mvn.w	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004992:	2302      	movs	r3, #2
 8004994:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800499e:	d05f      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff ffce 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	2300      	movs	r3, #0
 80049a8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	f012 0f08 	tst.w	r2, #8
 80049b2:	d012      	beq.n	80049da <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	f012 0f08 	tst.w	r2, #8
 80049ba:	d00e      	beq.n	80049da <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049bc:	f06f 0208 	mvn.w	r2, #8
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c2:	2304      	movs	r3, #4
 80049c4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f013 0f03 	tst.w	r3, #3
 80049ce:	d04e      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff ffb6 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	2300      	movs	r3, #0
 80049d8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	f012 0f10 	tst.w	r2, #16
 80049e2:	d012      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	f012 0f10 	tst.w	r2, #16
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	f06f 0210 	mvn.w	r2, #16
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f2:	2308      	movs	r3, #8
 80049f4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80049fe:	d03d      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7ff ff9e 	bl	8004942 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	2300      	movs	r3, #0
 8004a08:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	f012 0f01 	tst.w	r2, #1
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	f012 0f01 	tst.w	r2, #1
 8004a1a:	d136      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a2c:	d134      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a36:	d003      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a3e:	d132      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	f012 0f20 	tst.w	r2, #32
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	f012 0f20 	tst.w	r2, #32
 8004a50:	d130      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x16c>
}
 8004a52:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	f7ff ff74 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff ff73 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a5e:	e78a      	b.n	8004976 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ff6d 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff ff6c 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a6c:	e79b      	b.n	80049a6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff ff66 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7ff ff65 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a7a:	e7ac      	b.n	80049d6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7ff ff5f 	bl	8004940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7ff ff5e 	bl	8004944 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a88:	e7bd      	b.n	8004a06 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8a:	f06f 0201 	mvn.w	r2, #1
 8004a8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7fc f985 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
 8004a96:	e7c1      	b.n	8004a1c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 f8c5 	bl	8004c2e <HAL_TIMEx_BreakCallback>
 8004aa4:	e7c3      	b.n	8004a2e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aaa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ff4a 	bl	8004946 <HAL_TIM_TriggerCallback>
 8004ab2:	e7c5      	b.n	8004a40 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab4:	f06f 0220 	mvn.w	r2, #32
 8004ab8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004aba:	4620      	mov	r0, r4
 8004abc:	f000 f8b6 	bl	8004c2c <HAL_TIMEx_CommutationCallback>
}
 8004ac0:	e7c7      	b.n	8004a52 <HAL_TIM_IRQHandler+0x10a>
	...

08004ac4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8004ac4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac6:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <TIM_Base_SetConfig+0x94>)
 8004ac8:	4290      	cmp	r0, r2
 8004aca:	d012      	beq.n	8004af2 <TIM_Base_SetConfig+0x2e>
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d00e      	beq.n	8004af2 <TIM_Base_SetConfig+0x2e>
 8004ad4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0x2e>
 8004ada:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004ade:	4290      	cmp	r0, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0x2e>
 8004ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae6:	4290      	cmp	r0, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0x2e>
 8004aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aee:	4290      	cmp	r0, r2
 8004af0:	d103      	bne.n	8004afa <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004af6:	684a      	ldr	r2, [r1, #4]
 8004af8:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <TIM_Base_SetConfig+0x94>)
 8004afc:	4290      	cmp	r0, r2
 8004afe:	d012      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b04:	4290      	cmp	r0, r2
 8004b06:	d00e      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b0e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004b12:	4290      	cmp	r0, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b1a:	4290      	cmp	r0, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b22:	4290      	cmp	r0, r2
 8004b24:	d103      	bne.n	8004b2e <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2a:	68ca      	ldr	r2, [r1, #12]
 8004b2c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004b32:	694a      	ldr	r2, [r1, #20]
 8004b34:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004b36:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	688b      	ldr	r3, [r1, #8]
 8004b3a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004b3c:	680b      	ldr	r3, [r1, #0]
 8004b3e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <TIM_Base_SetConfig+0x94>)
 8004b42:	4298      	cmp	r0, r3
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0x8a>
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	d101      	bne.n	8004b52 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b4e:	690b      	ldr	r3, [r1, #16]
 8004b50:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004b52:	2301      	movs	r3, #1
 8004b54:	6143      	str	r3, [r0, #20]
}
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00

08004b5c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d05e      	beq.n	8004c1e <HAL_TIM_Base_Init+0xc2>
{
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004b64:	6803      	ldr	r3, [r0, #0]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	; (8004c24 <HAL_TIM_Base_Init+0xc8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01e      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d01a      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d017      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b7a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00f      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_Base_Init+0x4e>
 8004ba2:	21d9      	movs	r1, #217	; 0xd9
 8004ba4:	4820      	ldr	r0, [pc, #128]	; (8004c28 <HAL_TIM_Base_Init+0xcc>)
 8004ba6:	f7fc f908 	bl	8000dba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	b13b      	cbz	r3, 8004bbe <HAL_TIM_Base_Init+0x62>
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d005      	beq.n	8004bbe <HAL_TIM_Base_Init+0x62>
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_Base_Init+0x62>
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d001      	beq.n	8004bbe <HAL_TIM_Base_Init+0x62>
 8004bba:	2b60      	cmp	r3, #96	; 0x60
 8004bbc:	d11a      	bne.n	8004bf4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	b12b      	cbz	r3, 8004bce <HAL_TIM_Base_Init+0x72>
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d002      	beq.n	8004bce <HAL_TIM_Base_Init+0x72>
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bcc:	d117      	bne.n	8004bfe <HAL_TIM_Base_Init+0xa2>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	b10b      	cbz	r3, 8004bd6 <HAL_TIM_Base_Init+0x7a>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d118      	bne.n	8004c08 <HAL_TIM_Base_Init+0xac>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bda:	b1d3      	cbz	r3, 8004c12 <HAL_TIM_Base_Init+0xb6>
  htim->State= HAL_TIM_STATE_BUSY;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be2:	1d21      	adds	r1, r4, #4
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	f7ff ff6d 	bl	8004ac4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004bf0:	2000      	movs	r0, #0
}
 8004bf2:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004bf4:	21da      	movs	r1, #218	; 0xda
 8004bf6:	480c      	ldr	r0, [pc, #48]	; (8004c28 <HAL_TIM_Base_Init+0xcc>)
 8004bf8:	f7fc f8df 	bl	8000dba <assert_failed>
 8004bfc:	e7df      	b.n	8004bbe <HAL_TIM_Base_Init+0x62>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004bfe:	21db      	movs	r1, #219	; 0xdb
 8004c00:	4809      	ldr	r0, [pc, #36]	; (8004c28 <HAL_TIM_Base_Init+0xcc>)
 8004c02:	f7fc f8da 	bl	8000dba <assert_failed>
 8004c06:	e7e2      	b.n	8004bce <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004c08:	21dc      	movs	r1, #220	; 0xdc
 8004c0a:	4807      	ldr	r0, [pc, #28]	; (8004c28 <HAL_TIM_Base_Init+0xcc>)
 8004c0c:	f7fc f8d5 	bl	8000dba <assert_failed>
 8004c10:	e7e1      	b.n	8004bd6 <HAL_TIM_Base_Init+0x7a>
    htim->Lock = HAL_UNLOCKED;
 8004c12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff fe5a 	bl	80048d0 <HAL_TIM_Base_MspInit>
 8004c1c:	e7de      	b.n	8004bdc <HAL_TIM_Base_Init+0x80>
    return HAL_ERROR;
 8004c1e:	2001      	movs	r0, #1
}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	0800f0fc 	.word	0x0800f0fc

08004c2c <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2e:	4770      	bx	lr

08004c30 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4604      	mov	r4, r0
  ErrorStatus status = SUCCESS;
  /* Check the parameters */
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 8004c34:	6803      	ldr	r3, [r0, #0]
 8004c36:	0cdb      	lsrs	r3, r3, #19
 8004c38:	04db      	lsls	r3, r3, #19
 8004c3a:	b9b3      	cbnz	r3, 8004c6a <LL_EXTI_Init+0x3a>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8004c3c:	7923      	ldrb	r3, [r4, #4]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d818      	bhi.n	8004c74 <LL_EXTI_Init+0x44>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 8004c42:	7963      	ldrb	r3, [r4, #5]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d81a      	bhi.n	8004c7e <LL_EXTI_Init+0x4e>

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004c48:	7923      	ldrb	r3, [r4, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d06b      	beq.n	8004d26 <LL_EXTI_Init+0xf6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 8004c4e:	79a3      	ldrb	r3, [r4, #6]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d819      	bhi.n	8004c88 <LL_EXTI_Init+0x58>

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d072      	beq.n	8004d40 <LL_EXTI_Init+0x110>
    {
      switch (EXTI_InitStruct->Mode)
 8004c5a:	7962      	ldrb	r2, [r4, #5]
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	d02d      	beq.n	8004cbc <LL_EXTI_Init+0x8c>
 8004c60:	b1ba      	cbz	r2, 8004c92 <LL_EXTI_Init+0x62>
 8004c62:	2a02      	cmp	r2, #2
 8004c64:	d035      	beq.n	8004cd2 <LL_EXTI_Init+0xa2>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 8004c66:	2000      	movs	r0, #0
 8004c68:	e01d      	b.n	8004ca6 <LL_EXTI_Init+0x76>
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
 8004c6a:	217d      	movs	r1, #125	; 0x7d
 8004c6c:	4835      	ldr	r0, [pc, #212]	; (8004d44 <LL_EXTI_Init+0x114>)
 8004c6e:	f7fc f8a4 	bl	8000dba <assert_failed>
 8004c72:	e7e3      	b.n	8004c3c <LL_EXTI_Init+0xc>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8004c74:	217e      	movs	r1, #126	; 0x7e
 8004c76:	4833      	ldr	r0, [pc, #204]	; (8004d44 <LL_EXTI_Init+0x114>)
 8004c78:	f7fc f89f 	bl	8000dba <assert_failed>
 8004c7c:	e7e1      	b.n	8004c42 <LL_EXTI_Init+0x12>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 8004c7e:	217f      	movs	r1, #127	; 0x7f
 8004c80:	4830      	ldr	r0, [pc, #192]	; (8004d44 <LL_EXTI_Init+0x114>)
 8004c82:	f7fc f89a 	bl	8000dba <assert_failed>
 8004c86:	e7df      	b.n	8004c48 <LL_EXTI_Init+0x18>
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 8004c88:	2184      	movs	r1, #132	; 0x84
 8004c8a:	482e      	ldr	r0, [pc, #184]	; (8004d44 <LL_EXTI_Init+0x114>)
 8004c8c:	f7fc f895 	bl	8000dba <assert_failed>
 8004c90:	e7e0      	b.n	8004c54 <LL_EXTI_Init+0x24>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004c92:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004c94:	6851      	ldr	r1, [r2, #4]
 8004c96:	ea21 0303 	bic.w	r3, r1, r3
 8004c9a:	6053      	str	r3, [r2, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004c9c:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004c9e:	6811      	ldr	r1, [r2, #0]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6013      	str	r3, [r2, #0]
  ErrorStatus status = SUCCESS;
 8004ca4:	2001      	movs	r0, #1
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004ca6:	79a3      	ldrb	r3, [r4, #6]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d048      	beq.n	8004d3e <LL_EXTI_Init+0x10e>
      {
        switch (EXTI_InitStruct->Trigger)
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d025      	beq.n	8004cfc <LL_EXTI_Init+0xcc>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d02e      	beq.n	8004d12 <LL_EXTI_Init+0xe2>
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d016      	beq.n	8004ce6 <LL_EXTI_Init+0xb6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status = ERROR;
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e040      	b.n	8004d3e <LL_EXTI_Init+0x10e>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004cbe:	6811      	ldr	r1, [r2, #0]
 8004cc0:	ea21 0303 	bic.w	r3, r1, r3
 8004cc4:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004cc6:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004cc8:	6851      	ldr	r1, [r2, #4]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e7e9      	b.n	8004ca6 <LL_EXTI_Init+0x76>
  SET_BIT(EXTI->IMR, ExtiLine);
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6013      	str	r3, [r2, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004cda:	6823      	ldr	r3, [r4, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004cdc:	6851      	ldr	r1, [r2, #4]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6053      	str	r3, [r2, #4]
  ErrorStatus status = SUCCESS;
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	e7df      	b.n	8004ca6 <LL_EXTI_Init+0x76>
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004ce6:	6821      	ldr	r1, [r4, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	ea22 0201 	bic.w	r2, r2, r1
 8004cf0:	60da      	str	r2, [r3, #12]
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004cf2:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	e020      	b.n	8004d3e <LL_EXTI_Init+0x10e>
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004cfc:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	ea22 0201 	bic.w	r2, r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d08:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004d0a:	68d9      	ldr	r1, [r3, #12]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e015      	b.n	8004d3e <LL_EXTI_Init+0x10e>
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d12:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d1c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004d1e:	68d9      	ldr	r1, [r3, #12]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]
 8004d24:	e00b      	b.n	8004d3e <LL_EXTI_Init+0x10e>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004d26:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <LL_EXTI_Init+0x118>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	ea22 0201 	bic.w	r2, r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004d32:	6821      	ldr	r1, [r4, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	ea22 0201 	bic.w	r2, r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  ErrorStatus status = SUCCESS;
 8004d3c:	2001      	movs	r0, #1
  }
  return status;
}
 8004d3e:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8004d40:	2001      	movs	r0, #1
 8004d42:	e7fc      	b.n	8004d3e <LL_EXTI_Init+0x10e>
 8004d44:	0800f134 	.word	0x0800f134
 8004d48:	40010400 	.word	0x40010400

08004d4c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4607      	mov	r7, r0
 8004d52:	460e      	mov	r6, r1
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004d54:	4b65      	ldr	r3, [pc, #404]	; (8004eec <LL_GPIO_Init+0x1a0>)
 8004d56:	4298      	cmp	r0, r3
 8004d58:	d01b      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	d017      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	4298      	cmp	r0, r3
 8004d68:	d013      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	d00f      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d76:	4298      	cmp	r0, r3
 8004d78:	d00b      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7e:	4298      	cmp	r0, r3
 8004d80:	d007      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d86:	4298      	cmp	r0, r3
 8004d88:	d003      	beq.n	8004d92 <LL_GPIO_Init+0x46>
 8004d8a:	21b2      	movs	r1, #178	; 0xb2
 8004d8c:	4858      	ldr	r0, [pc, #352]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004d8e:	f7fc f814 	bl	8000dba <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8004d92:	6833      	ldr	r3, [r6, #0]
 8004d94:	f033 427b 	bics.w	r2, r3, #4211081216	; 0xfb000000
 8004d98:	d002      	beq.n	8004da0 <LL_GPIO_Init+0x54>
 8004d9a:	f013 4f7b 	tst.w	r3, #4211081216	; 0xfb000000
 8004d9e:	d003      	beq.n	8004da8 <LL_GPIO_Init+0x5c>
 8004da0:	21b3      	movs	r1, #179	; 0xb3
 8004da2:	4853      	ldr	r0, [pc, #332]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004da4:	f7fc f809 	bl	8000dba <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	f3c3 280f 	ubfx	r8, r3, #8, #16
 8004dae:	fa98 f5a8 	rbit	r5, r8
  pinpos = POSITION_VAL(pinmask);
 8004db2:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8004db6:	e06a      	b.n	8004e8e <LL_GPIO_Init+0x142>
      {
        currentpin = (0x00000101U << pinpos);
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8004db8:	f1a5 0308 	sub.w	r3, r5, #8
 8004dbc:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 8004dc0:	409c      	lsls	r4, r3
 8004dc2:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8004dc6:	e06f      	b.n	8004ea8 <LL_GPIO_Init+0x15c>
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004dc8:	6933      	ldr	r3, [r6, #16]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d87c      	bhi.n	8004ec8 <LL_GPIO_Init+0x17c>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004dce:	6871      	ldr	r1, [r6, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004dd0:	ea4f 6914 	mov.w	r9, r4, lsr #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004dd4:	f857 3009 	ldr.w	r3, [r7, r9]
 8004dd8:	fa94 f2a4 	rbit	r2, r4
 8004ddc:	fab2 f282 	clz	r2, r2
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	200f      	movs	r0, #15
 8004de4:	fa00 f202 	lsl.w	r2, r0, r2
 8004de8:	ea23 0302 	bic.w	r3, r3, r2
 8004dec:	fa94 f2a4 	rbit	r2, r4
 8004df0:	fab2 f282 	clz	r2, r2
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f847 3009 	str.w	r3, [r7, r9]

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004e00:	6932      	ldr	r2, [r6, #16]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	0a23      	lsrs	r3, r4, #8
 8004e06:	ea21 0103 	bic.w	r1, r1, r3
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	430b      	orrs	r3, r1
 8004e18:	60fb      	str	r3, [r7, #12]

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004e1a:	6873      	ldr	r3, [r6, #4]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <LL_GPIO_Init+0xd8>
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	d133      	bne.n	8004e8c <LL_GPIO_Init+0x140>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8004e24:	68b3      	ldr	r3, [r6, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d852      	bhi.n	8004ed2 <LL_GPIO_Init+0x186>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004e2c:	68f3      	ldr	r3, [r6, #12]
 8004e2e:	b10b      	cbz	r3, 8004e34 <LL_GPIO_Init+0xe8>
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d153      	bne.n	8004edc <LL_GPIO_Init+0x190>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004e34:	68b1      	ldr	r1, [r6, #8]
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004e36:	f857 3009 	ldr.w	r3, [r7, r9]
 8004e3a:	fa94 f2a4 	rbit	r2, r4
 8004e3e:	fab2 f282 	clz	r2, r2
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	2003      	movs	r0, #3
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	ea23 0302 	bic.w	r3, r3, r2
 8004e4e:	fa94 f2a4 	rbit	r2, r4
 8004e52:	fab2 f282 	clz	r2, r2
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	f847 2009 	str.w	r2, [r7, r9]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004e62:	68f3      	ldr	r3, [r6, #12]
 8004e64:	fa94 f1a4 	rbit	r1, r4
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004e68:	fab1 f181 	clz	r1, r1
 8004e6c:	0089      	lsls	r1, r1, #2
 8004e6e:	2004      	movs	r0, #4
 8004e70:	fa00 f101 	lsl.w	r1, r0, r1
 8004e74:	ea22 0201 	bic.w	r2, r2, r1
 8004e78:	fa94 f4a4 	rbit	r4, r4
 8004e7c:	fab4 f484 	clz	r4, r4
 8004e80:	00a4      	lsls	r4, r4, #2
 8004e82:	fa03 f404 	lsl.w	r4, r3, r4
 8004e86:	4314      	orrs	r4, r2
 8004e88:	f847 4009 	str.w	r4, [r7, r9]
      }
    }
    pinpos++;
 8004e8c:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0U)
 8004e8e:	fa38 f305 	lsrs.w	r3, r8, r5
 8004e92:	d028      	beq.n	8004ee6 <LL_GPIO_Init+0x19a>
    if ((pinmask & (1U << pinpos)) != 0U)
 8004e94:	2301      	movs	r3, #1
 8004e96:	40ab      	lsls	r3, r5
 8004e98:	ea13 0f08 	tst.w	r3, r8
 8004e9c:	d0f6      	beq.n	8004e8c <LL_GPIO_Init+0x140>
      if (pinpos < GPIO_PIN_MASK_POS)
 8004e9e:	2d07      	cmp	r5, #7
 8004ea0:	d88a      	bhi.n	8004db8 <LL_GPIO_Init+0x6c>
        currentpin = (0x00000101U << pinpos);
 8004ea2:	f240 1401 	movw	r4, #257	; 0x101
 8004ea6:	40ac      	lsls	r4, r5
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8004ea8:	6873      	ldr	r3, [r6, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d08c      	beq.n	8004dc8 <LL_GPIO_Init+0x7c>
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d08a      	beq.n	8004dc8 <LL_GPIO_Init+0x7c>
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d088      	beq.n	8004dc8 <LL_GPIO_Init+0x7c>
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d086      	beq.n	8004dc8 <LL_GPIO_Init+0x7c>
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	d084      	beq.n	8004dc8 <LL_GPIO_Init+0x7c>
 8004ebe:	21cc      	movs	r1, #204	; 0xcc
 8004ec0:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004ec2:	f7fb ff7a 	bl	8000dba <assert_failed>
 8004ec6:	e77f      	b.n	8004dc8 <LL_GPIO_Init+0x7c>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8004ec8:	21cd      	movs	r1, #205	; 0xcd
 8004eca:	4809      	ldr	r0, [pc, #36]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004ecc:	f7fb ff75 	bl	8000dba <assert_failed>
 8004ed0:	e77d      	b.n	8004dce <LL_GPIO_Init+0x82>
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8004ed2:	21d8      	movs	r1, #216	; 0xd8
 8004ed4:	4806      	ldr	r0, [pc, #24]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004ed6:	f7fb ff70 	bl	8000dba <assert_failed>
 8004eda:	e7a7      	b.n	8004e2c <LL_GPIO_Init+0xe0>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8004edc:	21d9      	movs	r1, #217	; 0xd9
 8004ede:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <LL_GPIO_Init+0x1a4>)
 8004ee0:	f7fb ff6b 	bl	8000dba <assert_failed>
 8004ee4:	e7a6      	b.n	8004e34 <LL_GPIO_Init+0xe8>
  }
  return (SUCCESS);
}
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eec:	40010800 	.word	0x40010800
 8004ef0:	0800f16c 	.word	0x0800f16c

08004ef4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	4604      	mov	r4, r0
 8004efa:	460d      	mov	r5, r1
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
 8004efc:	4b60      	ldr	r3, [pc, #384]	; (8005080 <LL_I2C_Init+0x18c>)
 8004efe:	4298      	cmp	r0, r3
 8004f00:	d007      	beq.n	8004f12 <LL_I2C_Init+0x1e>
 8004f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f06:	4298      	cmp	r0, r3
 8004f08:	d003      	beq.n	8004f12 <LL_I2C_Init+0x1e>
 8004f0a:	2197      	movs	r1, #151	; 0x97
 8004f0c:	485d      	ldr	r0, [pc, #372]	; (8005084 <LL_I2C_Init+0x190>)
 8004f0e:	f7fb ff54 	bl	8000dba <assert_failed>

  /* Check the I2C parameters from I2C_InitStruct */
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	b12b      	cbz	r3, 8004f22 <LL_I2C_Init+0x2e>
 8004f16:	2b1a      	cmp	r3, #26
 8004f18:	d003      	beq.n	8004f22 <LL_I2C_Init+0x2e>
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d001      	beq.n	8004f22 <LL_I2C_Init+0x2e>
 8004f1e:	2b12      	cmp	r3, #18
 8004f20:	d16f      	bne.n	8005002 <LL_I2C_Init+0x10e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 8004f22:	686b      	ldr	r3, [r5, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	4a58      	ldr	r2, [pc, #352]	; (8005088 <LL_I2C_Init+0x194>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d86f      	bhi.n	800500c <LL_I2C_Init+0x118>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8004f2c:	68ab      	ldr	r3, [r5, #8]
 8004f2e:	b113      	cbz	r3, 8004f36 <LL_I2C_Init+0x42>
 8004f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f34:	d16f      	bne.n	8005016 <LL_I2C_Init+0x122>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8004f36:	68eb      	ldr	r3, [r5, #12]
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d270      	bcs.n	8005020 <LL_I2C_Init+0x12c>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 8004f3e:	692b      	ldr	r3, [r5, #16]
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f44:	d001      	beq.n	8004f4a <LL_I2C_Init+0x56>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d16f      	bne.n	800502a <LL_I2C_Init+0x136>
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
 8004f4a:	696b      	ldr	r3, [r5, #20]
 8004f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f50:	d006      	beq.n	8004f60 <LL_I2C_Init+0x6c>
 8004f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f56:	d003      	beq.n	8004f60 <LL_I2C_Init+0x6c>
 8004f58:	219f      	movs	r1, #159	; 0x9f
 8004f5a:	484a      	ldr	r0, [pc, #296]	; (8005084 <LL_I2C_Init+0x190>)
 8004f5c:	f7fb ff2d 	bl	8000dba <assert_failed>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6023      	str	r3, [r4, #0]

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004f68:	4668      	mov	r0, sp
 8004f6a:	f000 f8ed 	bl	8005148 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004f6e:	9a02      	ldr	r2, [sp, #8]
 8004f70:	686b      	ldr	r3, [r5, #4]
 8004f72:	68ae      	ldr	r6, [r5, #8]
{
  register uint32_t freqrange = 0x0U;
  register uint32_t clockconfig = 0x0U;

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004f74:	4945      	ldr	r1, [pc, #276]	; (800508c <LL_I2C_Init+0x198>)
 8004f76:	fba1 0102 	umull	r0, r1, r1, r2
 8004f7a:	0c89      	lsrs	r1, r1, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004f7c:	6860      	ldr	r0, [r4, #4]
 8004f7e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004f82:	4308      	orrs	r0, r1
 8004f84:	6060      	str	r0, [r4, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004f86:	6a20      	ldr	r0, [r4, #32]
 8004f88:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004f8c:	4f40      	ldr	r7, [pc, #256]	; (8005090 <LL_I2C_Init+0x19c>)
 8004f8e:	42bb      	cmp	r3, r7
 8004f90:	d850      	bhi.n	8005034 <LL_I2C_Init+0x140>
 8004f92:	3101      	adds	r1, #1
 8004f94:	4301      	orrs	r1, r0
 8004f96:	6221      	str	r1, [r4, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004f98:	493d      	ldr	r1, [pc, #244]	; (8005090 <LL_I2C_Init+0x19c>)
 8004f9a:	428b      	cmp	r3, r1
 8004f9c:	d966      	bls.n	800506c <LL_I2C_Init+0x178>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	d152      	bne.n	8005048 <LL_I2C_Init+0x154>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004fa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004faa:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d056      	beq.n	8005060 <LL_I2C_Init+0x16c>
 8004fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fb6:	ea46 0302 	orr.w	r3, r6, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004fba:	69e2      	ldr	r2, [r4, #28]
 8004fbc:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8004fc0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	61e2      	str	r2, [r4, #28]
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004fc8:	68ea      	ldr	r2, [r5, #12]
 8004fca:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60a3      	str	r3, [r4, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004fdc:	682b      	ldr	r3, [r5, #0]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	f022 021a 	bic.w	r2, r2, #26
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	6023      	str	r3, [r4, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004ff0:	692b      	ldr	r3, [r5, #16]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	6023      	str	r3, [r4, #0]

  return SUCCESS;
}
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	b005      	add	sp, #20
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
 8005002:	219a      	movs	r1, #154	; 0x9a
 8005004:	481f      	ldr	r0, [pc, #124]	; (8005084 <LL_I2C_Init+0x190>)
 8005006:	f7fb fed8 	bl	8000dba <assert_failed>
 800500a:	e78a      	b.n	8004f22 <LL_I2C_Init+0x2e>
  assert_param(IS_LL_I2C_CLOCK_SPEED(I2C_InitStruct->ClockSpeed));
 800500c:	219b      	movs	r1, #155	; 0x9b
 800500e:	481d      	ldr	r0, [pc, #116]	; (8005084 <LL_I2C_Init+0x190>)
 8005010:	f7fb fed3 	bl	8000dba <assert_failed>
 8005014:	e78a      	b.n	8004f2c <LL_I2C_Init+0x38>
  assert_param(IS_LL_I2C_DUTY_CYCLE(I2C_InitStruct->DutyCycle));
 8005016:	219c      	movs	r1, #156	; 0x9c
 8005018:	481a      	ldr	r0, [pc, #104]	; (8005084 <LL_I2C_Init+0x190>)
 800501a:	f7fb fece 	bl	8000dba <assert_failed>
 800501e:	e78a      	b.n	8004f36 <LL_I2C_Init+0x42>
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
 8005020:	219d      	movs	r1, #157	; 0x9d
 8005022:	4818      	ldr	r0, [pc, #96]	; (8005084 <LL_I2C_Init+0x190>)
 8005024:	f7fb fec9 	bl	8000dba <assert_failed>
 8005028:	e789      	b.n	8004f3e <LL_I2C_Init+0x4a>
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
 800502a:	219e      	movs	r1, #158	; 0x9e
 800502c:	4815      	ldr	r0, [pc, #84]	; (8005084 <LL_I2C_Init+0x190>)
 800502e:	f7fb fec4 	bl	8000dba <assert_failed>
 8005032:	e78a      	b.n	8004f4a <LL_I2C_Init+0x56>
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8005034:	f44f 7796 	mov.w	r7, #300	; 0x12c
 8005038:	fb07 f101 	mul.w	r1, r7, r1
 800503c:	4f15      	ldr	r7, [pc, #84]	; (8005094 <LL_I2C_Init+0x1a0>)
 800503e:	fba7 7101 	umull	r7, r1, r7, r1
 8005042:	0989      	lsrs	r1, r1, #6
 8005044:	3101      	adds	r1, #1
 8005046:	e7a5      	b.n	8004f94 <LL_I2C_Init+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005048:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800504c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005050:	fbb2 f2f3 	udiv	r2, r2, r3
 8005054:	f3c2 030b 	ubfx	r3, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005058:	b12b      	cbz	r3, 8005066 <LL_I2C_Init+0x172>
 800505a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505e:	e7aa      	b.n	8004fb6 <LL_I2C_Init+0xc2>
 8005060:	f248 0201 	movw	r2, #32769	; 0x8001
 8005064:	e7a7      	b.n	8004fb6 <LL_I2C_Init+0xc2>
 8005066:	f248 0201 	movw	r2, #32769	; 0x8001
 800506a:	e7a4      	b.n	8004fb6 <LL_I2C_Init+0xc2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005072:	f3c3 020b 	ubfx	r2, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005076:	2a03      	cmp	r2, #3
 8005078:	d89f      	bhi.n	8004fba <LL_I2C_Init+0xc6>
 800507a:	2304      	movs	r3, #4
 800507c:	e79d      	b.n	8004fba <LL_I2C_Init+0xc6>
 800507e:	bf00      	nop
 8005080:	40005400 	.word	0x40005400
 8005084:	0800f1a4 	.word	0x0800f1a4
 8005088:	00061a7f 	.word	0x00061a7f
 800508c:	431bde83 	.word	0x431bde83
 8005090:	000186a0 	.word	0x000186a0
 8005094:	10624dd3 	.word	0x10624dd3

08005098 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <RCC_GetHCLKClockFreq+0x10>)
 800509a:	685b      	ldr	r3, [r3, #4]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800509c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80050a0:	4a02      	ldr	r2, [pc, #8]	; (80050ac <RCC_GetHCLKClockFreq+0x14>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80050a4:	40d8      	lsrs	r0, r3
 80050a6:	4770      	bx	lr
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800ef8c 	.word	0x0800ef8c

080050b0 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <RCC_GetPCLK1ClockFreq+0x10>)
 80050b2:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80050b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80050b8:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <RCC_GetPCLK1ClockFreq+0x14>)
 80050ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80050bc:	40d8      	lsrs	r0, r3
 80050be:	4770      	bx	lr
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800ef9c 	.word	0x0800ef9c

080050c8 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <RCC_GetPCLK2ClockFreq+0x10>)
 80050ca:	685b      	ldr	r3, [r3, #4]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80050cc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80050d0:	4a02      	ldr	r2, [pc, #8]	; (80050dc <RCC_GetPCLK2ClockFreq+0x14>)
 80050d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80050d4:	40d8      	lsrs	r0, r3
 80050d6:	4770      	bx	lr
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800ef9c 	.word	0x0800ef9c

080050e0 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80050e8:	b17b      	cbz	r3, 800510a <RCC_PLL_GetFreqDomain_SYS+0x2a>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80050ec:	6858      	ldr	r0, [r3, #4]
 80050ee:	f3c0 4040 	ubfx	r0, r0, #17, #1
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80050f2:	3001      	adds	r0, #1
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <RCC_PLL_GetFreqDomain_SYS+0x34>)
 80050f6:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80050fc:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80050fe:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8005102:	3302      	adds	r3, #2
}
 8005104:	fb00 f003 	mul.w	r0, r0, r3
 8005108:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 800510a:	4803      	ldr	r0, [pc, #12]	; (8005118 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 800510c:	e7f5      	b.n	80050fa <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	00b71b00 	.word	0x00b71b00
 8005118:	003d0900 	.word	0x003d0900

0800511c <RCC_GetSystemClockFreq>:
{
 800511c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <RCC_GetSystemClockFreq+0x20>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005126:	2b04      	cmp	r3, #4
 8005128:	d006      	beq.n	8005138 <RCC_GetSystemClockFreq+0x1c>
 800512a:	2b08      	cmp	r3, #8
 800512c:	d001      	beq.n	8005132 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 800512e:	4804      	ldr	r0, [pc, #16]	; (8005140 <RCC_GetSystemClockFreq+0x24>)
}
 8005130:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005132:	f7ff ffd5 	bl	80050e0 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8005136:	e7fb      	b.n	8005130 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <RCC_GetSystemClockFreq+0x28>)
  return frequency;
 800513a:	e7f9      	b.n	8005130 <RCC_GetSystemClockFreq+0x14>
 800513c:	40021000 	.word	0x40021000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	00b71b00 	.word	0x00b71b00

08005148 <LL_RCC_GetSystemClocksFreq>:
{
 8005148:	b510      	push	{r4, lr}
 800514a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800514c:	f7ff ffe6 	bl	800511c <RCC_GetSystemClockFreq>
 8005150:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005152:	f7ff ffa1 	bl	8005098 <RCC_GetHCLKClockFreq>
 8005156:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005158:	f7ff ffaa 	bl	80050b0 <RCC_GetPCLK1ClockFreq>
 800515c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800515e:	6860      	ldr	r0, [r4, #4]
 8005160:	f7ff ffb2 	bl	80050c8 <RCC_GetPCLK2ClockFreq>
 8005164:	60e0      	str	r0, [r4, #12]
}
 8005166:	bd10      	pop	{r4, pc}

08005168 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8005168:	b510      	push	{r4, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800516e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005172:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <LL_RTC_EnterInitMode+0x58>)
 8005176:	4298      	cmp	r0, r3
 8005178:	d004      	beq.n	8005184 <LL_RTC_EnterInitMode+0x1c>
 800517a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800517e:	4811      	ldr	r0, [pc, #68]	; (80051c4 <LL_RTC_EnterInitMode+0x5c>)
 8005180:	f7fb fe1b 	bl	8000dba <assert_failed>
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 800518a:	2001      	movs	r0, #1

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 800518c:	9a01      	ldr	r2, [sp, #4]
 800518e:	b182      	cbz	r2, 80051b2 <LL_RTC_EnterInitMode+0x4a>
 8005190:	b97b      	cbnz	r3, 80051b2 <LL_RTC_EnterInitMode+0x4a>
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <LL_RTC_EnterInitMode+0x60>)
 8005194:	681b      	ldr	r3, [r3, #0]
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8005196:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800519a:	d002      	beq.n	80051a2 <LL_RTC_EnterInitMode+0x3a>
      {
        timeout --;
 800519c:	9b01      	ldr	r3, [sp, #4]
 800519e:	3b01      	subs	r3, #1
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
      }
      tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
      if (timeout == 0U)
 80051a8:	9a01      	ldr	r2, [sp, #4]
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d1ee      	bne.n	800518c <LL_RTC_EnterInitMode+0x24>
      {
        status = ERROR;
 80051ae:	2000      	movs	r0, #0
 80051b0:	e7ec      	b.n	800518c <LL_RTC_EnterInitMode+0x24>
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	f043 0310 	orr.w	r3, r3, #16
 80051b8:	6063      	str	r3, [r4, #4]

   /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
  
  return status;
}
 80051ba:	b002      	add	sp, #8
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	40002800 	.word	0x40002800
 80051c4:	0800f1dc 	.word	0x0800f1dc
 80051c8:	e000e010 	.word	0xe000e010

080051cc <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80051d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d6:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;
  
  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <LL_RTC_ExitInitMode+0x58>)
 80051da:	4298      	cmp	r0, r3
 80051dc:	d004      	beq.n	80051e8 <LL_RTC_ExitInitMode+0x1c>
 80051de:	f240 11a7 	movw	r1, #423	; 0x1a7
 80051e2:	4811      	ldr	r0, [pc, #68]	; (8005228 <LL_RTC_ExitInitMode+0x5c>)
 80051e4:	f7fb fde9 	bl	8000dba <assert_failed>
 CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
  ErrorStatus status = SUCCESS;
 80051f6:	2001      	movs	r0, #1
  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
  
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
  while ((timeout != 0U) && (tmp != 1U))
 80051f8:	9a01      	ldr	r2, [sp, #4]
 80051fa:	b182      	cbz	r2, 800521e <LL_RTC_ExitInitMode+0x52>
 80051fc:	b97b      	cbnz	r3, 800521e <LL_RTC_ExitInitMode+0x52>
 80051fe:	4b0b      	ldr	r3, [pc, #44]	; (800522c <LL_RTC_ExitInitMode+0x60>)
 8005200:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8005202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005206:	d002      	beq.n	800520e <LL_RTC_ExitInitMode+0x42>
    {
      timeout --;
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	f3c3 1340 	ubfx	r3, r3, #5, #1
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
    if (timeout == 0U)
 8005214:	9a01      	ldr	r2, [sp, #4]
 8005216:	2a00      	cmp	r2, #0
 8005218:	d1ee      	bne.n	80051f8 <LL_RTC_ExitInitMode+0x2c>
    {
      status = ERROR;
 800521a:	2000      	movs	r0, #0
 800521c:	e7ec      	b.n	80051f8 <LL_RTC_ExitInitMode+0x2c>
    }
  }
  return status;
}
 800521e:	b002      	add	sp, #8
 8005220:	bd10      	pop	{r4, pc}
 8005222:	bf00      	nop
 8005224:	40002800 	.word	0x40002800
 8005228:	0800f1dc 	.word	0x0800f1dc
 800522c:	e000e010 	.word	0xe000e010

08005230 <LL_RTC_TIME_Init>:
{
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4605      	mov	r5, r0
 8005234:	460e      	mov	r6, r1
 8005236:	4614      	mov	r4, r2
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8005238:	4b4e      	ldr	r3, [pc, #312]	; (8005374 <LL_RTC_TIME_Init+0x144>)
 800523a:	4298      	cmp	r0, r3
 800523c:	d003      	beq.n	8005246 <LL_RTC_TIME_Init+0x16>
 800523e:	21f0      	movs	r1, #240	; 0xf0
 8005240:	484d      	ldr	r0, [pc, #308]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 8005242:	f7fb fdba 	bl	8000dba <assert_failed>
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 8005246:	2e01      	cmp	r6, #1
 8005248:	d83e      	bhi.n	80052c8 <LL_RTC_TIME_Init+0x98>
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800524a:	2e00      	cmp	r6, #0
 800524c:	d150      	bne.n	80052f0 <LL_RTC_TIME_Init+0xc0>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 800524e:	7823      	ldrb	r3, [r4, #0]
 8005250:	2b17      	cmp	r3, #23
 8005252:	d83e      	bhi.n	80052d2 <LL_RTC_TIME_Init+0xa2>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 8005254:	7863      	ldrb	r3, [r4, #1]
 8005256:	2b3b      	cmp	r3, #59	; 0x3b
 8005258:	d840      	bhi.n	80052dc <LL_RTC_TIME_Init+0xac>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 800525a:	78a3      	ldrb	r3, [r4, #2]
 800525c:	2b3b      	cmp	r3, #59	; 0x3b
 800525e:	d842      	bhi.n	80052e6 <LL_RTC_TIME_Init+0xb6>
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8005260:	4628      	mov	r0, r5
 8005262:	f7ff ff81 	bl	8005168 <LL_RTC_EnterInitMode>
 8005266:	4607      	mov	r7, r0
 8005268:	b348      	cbz	r0, 80052be <LL_RTC_TIME_Init+0x8e>
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800526a:	2e00      	cmp	r6, #0
 800526c:	d170      	bne.n	8005350 <LL_RTC_TIME_Init+0x120>
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 800526e:	7823      	ldrb	r3, [r4, #0]
 8005270:	091a      	lsrs	r2, r3, #4
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800527a:	0051      	lsls	r1, r2, #1
 800527c:	440b      	add	r3, r1
 800527e:	b2db      	uxtb	r3, r3
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)) * 60U) + \
 8005280:	7862      	ldrb	r2, [r4, #1]
 8005282:	0911      	lsrs	r1, r2, #4
 8005284:	f002 020f 	and.w	r2, r2, #15
 8005288:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800528c:	0048      	lsls	r0, r1, #1
 800528e:	4402      	add	r2, r0
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005296:	0091      	lsls	r1, r2, #2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 8005298:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800529c:	fb02 1303 	mla	r3, r2, r3, r1
              ((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds))));
 80052a0:	78a2      	ldrb	r2, [r4, #2]
 80052a2:	0911      	lsrs	r1, r2, #4
 80052a4:	f002 020f 	and.w	r2, r2, #15
 80052a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80052ac:	0048      	lsls	r0, r1, #1
 80052ae:	4402      	add	r2, r0
 80052b0:	b2d2      	uxtb	r2, r2
     counter_time = (((uint32_t)(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)) * 3600U) + \
 80052b2:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 80052b4:	0c1a      	lsrs	r2, r3, #16
 80052b6:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 80052bc:	2701      	movs	r7, #1
  LL_RTC_ExitInitMode(RTCx);
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff ff84 	bl	80051cc <LL_RTC_ExitInitMode>
}
 80052c4:	4638      	mov	r0, r7
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));
 80052c8:	21f1      	movs	r1, #241	; 0xf1
 80052ca:	482b      	ldr	r0, [pc, #172]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 80052cc:	f7fb fd75 	bl	8000dba <assert_failed>
 80052d0:	e7bb      	b.n	800524a <LL_RTC_TIME_Init+0x1a>
    assert_param(IS_LL_RTC_HOUR24(RTC_TimeStruct->Hours));
 80052d2:	21f5      	movs	r1, #245	; 0xf5
 80052d4:	4828      	ldr	r0, [pc, #160]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 80052d6:	f7fb fd70 	bl	8000dba <assert_failed>
 80052da:	e7bb      	b.n	8005254 <LL_RTC_TIME_Init+0x24>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
 80052dc:	21f6      	movs	r1, #246	; 0xf6
 80052de:	4826      	ldr	r0, [pc, #152]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 80052e0:	f7fb fd6b 	bl	8000dba <assert_failed>
 80052e4:	e7b9      	b.n	800525a <LL_RTC_TIME_Init+0x2a>
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
 80052e6:	21f7      	movs	r1, #247	; 0xf7
 80052e8:	4823      	ldr	r0, [pc, #140]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 80052ea:	f7fb fd66 	bl	8000dba <assert_failed>
 80052ee:	e7b7      	b.n	8005260 <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 80052f0:	7823      	ldrb	r3, [r4, #0]
 80052f2:	091a      	lsrs	r2, r3, #4
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80052fc:	0051      	lsls	r1, r2, #1
 80052fe:	440b      	add	r3, r1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b17      	cmp	r3, #23
 8005304:	d81a      	bhi.n	800533c <LL_RTC_TIME_Init+0x10c>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 8005306:	7863      	ldrb	r3, [r4, #1]
 8005308:	091a      	lsrs	r2, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005312:	0051      	lsls	r1, r2, #1
 8005314:	440b      	add	r3, r1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b3b      	cmp	r3, #59	; 0x3b
 800531a:	d814      	bhi.n	8005346 <LL_RTC_TIME_Init+0x116>
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
 800531c:	78a3      	ldrb	r3, [r4, #2]
 800531e:	091a      	lsrs	r2, r3, #4
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005328:	0051      	lsls	r1, r2, #1
 800532a:	440b      	add	r3, r1
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b3b      	cmp	r3, #59	; 0x3b
 8005330:	d996      	bls.n	8005260 <LL_RTC_TIME_Init+0x30>
 8005332:	21fd      	movs	r1, #253	; 0xfd
 8005334:	4810      	ldr	r0, [pc, #64]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 8005336:	f7fb fd40 	bl	8000dba <assert_failed>
 800533a:	e791      	b.n	8005260 <LL_RTC_TIME_Init+0x30>
    assert_param(IS_LL_RTC_HOUR24(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
 800533c:	21fb      	movs	r1, #251	; 0xfb
 800533e:	480e      	ldr	r0, [pc, #56]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 8005340:	f7fb fd3b 	bl	8000dba <assert_failed>
 8005344:	e7df      	b.n	8005306 <LL_RTC_TIME_Init+0xd6>
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
 8005346:	21fc      	movs	r1, #252	; 0xfc
 8005348:	480b      	ldr	r0, [pc, #44]	; (8005378 <LL_RTC_TIME_Init+0x148>)
 800534a:	f7fb fd36 	bl	8000dba <assert_failed>
 800534e:	e7e5      	b.n	800531c <LL_RTC_TIME_Init+0xec>
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8005350:	7823      	ldrb	r3, [r4, #0]
                        ((uint32_t)RTC_TimeStruct->Minutes * 60U) + \
 8005352:	7862      	ldrb	r2, [r4, #1]
 8005354:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8005358:	0091      	lsls	r1, r2, #2
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 800535a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800535e:	fb02 1303 	mla	r3, r2, r3, r1
                        ((uint32_t)RTC_TimeStruct->Seconds));
 8005362:	78a2      	ldrb	r2, [r4, #2]
    counter_time = (uint32_t)(((uint32_t)RTC_TimeStruct->Hours * 3600U) + \
 8005364:	4413      	add	r3, r2
    WRITE_REG(RTCx->CNTH, (TimeCounter >> 16U));
 8005366:	0c1a      	lsrs	r2, r3, #16
 8005368:	61aa      	str	r2, [r5, #24]
    WRITE_REG(RTCx->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800536a:	b29b      	uxth	r3, r3
 800536c:	61eb      	str	r3, [r5, #28]
    status = SUCCESS;
 800536e:	2701      	movs	r7, #1
 8005370:	e7a5      	b.n	80052be <LL_RTC_TIME_Init+0x8e>
 8005372:	bf00      	nop
 8005374:	40002800 	.word	0x40002800
 8005378:	0800f1dc 	.word	0x0800f1dc

0800537c <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800537c:	b510      	push	{r4, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	4604      	mov	r4, r0
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8005382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005386:	9301      	str	r3, [sp, #4]
  ErrorStatus status = SUCCESS;
  uint32_t tmp = 0U;

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <LL_RTC_WaitForSynchro+0x58>)
 800538a:	4298      	cmp	r0, r3
 800538c:	d004      	beq.n	8005398 <LL_RTC_WaitForSynchro+0x1c>
 800538e:	f240 2101 	movw	r1, #513	; 0x201
 8005392:	4811      	ldr	r0, [pc, #68]	; (80053d8 <LL_RTC_WaitForSynchro+0x5c>)
 8005394:	f7fb fd11 	bl	8000dba <assert_failed>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	f023 0308 	bic.w	r3, r3, #8
 800539e:	6063      	str	r3, [r4, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  ErrorStatus status = SUCCESS;
 80053a6:	2001      	movs	r0, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 80053a8:	9a01      	ldr	r2, [sp, #4]
 80053aa:	b182      	cbz	r2, 80053ce <LL_RTC_WaitForSynchro+0x52>
 80053ac:	b17b      	cbz	r3, 80053ce <LL_RTC_WaitForSynchro+0x52>
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <LL_RTC_WaitForSynchro+0x60>)
 80053b0:	681b      	ldr	r3, [r3, #0]
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80053b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80053b6:	d002      	beq.n	80053be <LL_RTC_WaitForSynchro+0x42>
    {
      timeout--;
 80053b8:	9b01      	ldr	r3, [sp, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    if (timeout == 0U)
 80053c4:	9a01      	ldr	r2, [sp, #4]
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d1ee      	bne.n	80053a8 <LL_RTC_WaitForSynchro+0x2c>
    {
      status = ERROR;
 80053ca:	2000      	movs	r0, #0
 80053cc:	e7ec      	b.n	80053a8 <LL_RTC_WaitForSynchro+0x2c>
    }
  }

  return (status);
}
 80053ce:	b002      	add	sp, #8
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	bf00      	nop
 80053d4:	40002800 	.word	0x40002800
 80053d8:	0800f1dc 	.word	0x0800f1dc
 80053dc:	e000e010 	.word	0xe000e010

080053e0 <LL_RTC_Init>:
{
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4604      	mov	r4, r0
 80053e4:	460d      	mov	r5, r1
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
 80053e6:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <LL_RTC_Init+0xb8>)
 80053e8:	4298      	cmp	r0, r3
 80053ea:	d003      	beq.n	80053f4 <LL_RTC_Init+0x14>
 80053ec:	21ae      	movs	r1, #174	; 0xae
 80053ee:	482b      	ldr	r0, [pc, #172]	; (800549c <LL_RTC_Init+0xbc>)
 80053f0:	f7fb fce3 	bl	8000dba <assert_failed>
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fa:	d210      	bcs.n	800541e <LL_RTC_Init+0x3e>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 80053fc:	686b      	ldr	r3, [r5, #4]
 80053fe:	b13b      	cbz	r3, 8005410 <LL_RTC_Init+0x30>
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d005      	beq.n	8005410 <LL_RTC_Init+0x30>
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d002      	beq.n	8005410 <LL_RTC_Init+0x30>
 800540a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540e:	d10b      	bne.n	8005428 <LL_RTC_Init+0x48>
  if(LL_RTC_WaitForSynchro(RTCx) != ERROR)
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff ffb3 	bl	800537c <LL_RTC_WaitForSynchro>
 8005416:	4603      	mov	r3, r0
 8005418:	b958      	cbnz	r0, 8005432 <LL_RTC_Init+0x52>
}
 800541a:	4618      	mov	r0, r3
 800541c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
 800541e:	21af      	movs	r1, #175	; 0xaf
 8005420:	481e      	ldr	r0, [pc, #120]	; (800549c <LL_RTC_Init+0xbc>)
 8005422:	f7fb fcca 	bl	8000dba <assert_failed>
 8005426:	e7e9      	b.n	80053fc <LL_RTC_Init+0x1c>
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
 8005428:	21b0      	movs	r1, #176	; 0xb0
 800542a:	481c      	ldr	r0, [pc, #112]	; (800549c <LL_RTC_Init+0xbc>)
 800542c:	f7fb fcc5 	bl	8000dba <assert_failed>
 8005430:	e7ee      	b.n	8005410 <LL_RTC_Init+0x30>
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff fe98 	bl	8005168 <LL_RTC_EnterInitMode>
 8005438:	4603      	mov	r3, r0
 800543a:	2800      	cmp	r0, #0
 800543c:	d0ed      	beq.n	800541a <LL_RTC_Init+0x3a>
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	6063      	str	r3, [r4, #4]
      if(RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 8005456:	686b      	ldr	r3, [r5, #4]
 8005458:	b123      	cbz	r3, 8005464 <LL_RTC_Init+0x84>
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800545a:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <LL_RTC_Init+0xc0>)
 800545c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	6313      	str	r3, [r2, #48]	; 0x30
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 8005464:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 8005466:	490e      	ldr	r1, [pc, #56]	; (80054a0 <LL_RTC_Init+0xc0>)
 8005468:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800546a:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 800546e:	4313      	orrs	r3, r2
 8005470:	62cb      	str	r3, [r1, #44]	; 0x2c
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8005472:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 8005474:	68a2      	ldr	r2, [r4, #8]
 8005476:	f022 020f 	bic.w	r2, r2, #15
 800547a:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800547e:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 8005480:	68e3      	ldr	r3, [r4, #12]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	b289      	uxth	r1, r1
 8005488:	430b      	orrs	r3, r1
 800548a:	60e3      	str	r3, [r4, #12]
      LL_RTC_ExitInitMode(RTCx);      
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fe9d 	bl	80051cc <LL_RTC_ExitInitMode>
      status = SUCCESS;
 8005492:	2301      	movs	r3, #1
 8005494:	e7c1      	b.n	800541a <LL_RTC_Init+0x3a>
 8005496:	bf00      	nop
 8005498:	40002800 	.word	0x40002800
 800549c:	0800f1dc 	.word	0x0800f1dc
 80054a0:	40006c00 	.word	0x40006c00

080054a4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <SDMMC_GetCmdError+0x34>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <SDMMC_GetCmdError+0x38>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	0a5a      	lsrs	r2, r3, #9
 80054b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80054b4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	b14b      	cbz	r3, 80054d0 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054bc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80054be:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054c4:	d0f8      	beq.n	80054b8 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80054c6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80054ca:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054cc:	2000      	movs	r0, #0
 80054ce:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80054d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000000 	.word	0x20000000
 80054dc:	10624dd3 	.word	0x10624dd3

080054e0 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <SDMMC_GetCmdResp2+0x54>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a14      	ldr	r2, [pc, #80]	; (8005538 <SDMMC_GetCmdResp2+0x58>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a5a      	lsrs	r2, r3, #9
 80054ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80054f0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	b1cb      	cbz	r3, 800552c <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80054f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80054fa:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80054fc:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005500:	d0f8      	beq.n	80054f4 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005502:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005504:	f013 0f04 	tst.w	r3, #4
 8005508:	d108      	bne.n	800551c <SDMMC_GetCmdResp2+0x3c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800550a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800550c:	f013 0f01 	tst.w	r3, #1
 8005510:	d108      	bne.n	8005524 <SDMMC_GetCmdResp2+0x44>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005512:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005516:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005518:	2000      	movs	r0, #0
 800551a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800551c:	2304      	movs	r3, #4
 800551e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005520:	4618      	mov	r0, r3
 8005522:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005524:	2301      	movs	r3, #1
 8005526:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005528:	4618      	mov	r0, r3
 800552a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800552c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000000 	.word	0x20000000
 8005538:	10624dd3 	.word	0x10624dd3

0800553c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <SDMMC_GetCmdResp3+0x44>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a10      	ldr	r2, [pc, #64]	; (8005584 <SDMMC_GetCmdResp3+0x48>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	0a5a      	lsrs	r2, r3, #9
 8005548:	f241 3388 	movw	r3, #5000	; 0x1388
 800554c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	b18b      	cbz	r3, 8005578 <SDMMC_GetCmdResp3+0x3c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005554:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8005556:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005558:	f011 0f45 	tst.w	r1, #69	; 0x45
 800555c:	d0f8      	beq.n	8005550 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800555e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005560:	f013 0f04 	tst.w	r3, #4
 8005564:	d104      	bne.n	8005570 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005566:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800556a:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800556c:	2000      	movs	r0, #0
 800556e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005570:	2304      	movs	r3, #4
 8005572:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005574:	4618      	mov	r0, r3
 8005576:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005578:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000000 	.word	0x20000000
 8005584:	10624dd3 	.word	0x10624dd3

08005588 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <SDMMC_GetCmdResp7+0x4c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <SDMMC_GetCmdResp7+0x50>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0a5a      	lsrs	r2, r3, #9
 8005594:	f241 3388 	movw	r3, #5000	; 0x1388
 8005598:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	b1a3      	cbz	r3, 80055ca <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80055a0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80055a2:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80055a4:	f011 0f45 	tst.w	r1, #69	; 0x45
 80055a8:	d0f8      	beq.n	800559c <SDMMC_GetCmdResp7+0x14>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055ac:	f013 0f04 	tst.w	r3, #4
 80055b0:	d107      	bne.n	80055c2 <SDMMC_GetCmdResp7+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80055b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80055b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055b8:	d00a      	beq.n	80055d0 <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80055be:	2000      	movs	r0, #0
 80055c0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80055c2:	2340      	movs	r3, #64	; 0x40
 80055c4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055c6:	2004      	movs	r0, #4
 80055c8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80055ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80055ce:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 80055d0:	2000      	movs	r0, #0
  
}
 80055d2:	4770      	bx	lr
 80055d4:	20000000 	.word	0x20000000
 80055d8:	10624dd3 	.word	0x10624dd3

080055dc <SDIO_Init>:
{
 80055dc:	b084      	sub	sp, #16
 80055de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e2:	4606      	mov	r6, r0
 80055e4:	a809      	add	r0, sp, #36	; 0x24
 80055e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 80055ea:	4b30      	ldr	r3, [pc, #192]	; (80056ac <SDIO_Init+0xd0>)
 80055ec:	429e      	cmp	r6, r3
 80055ee:	d003      	beq.n	80055f8 <SDIO_Init+0x1c>
 80055f0:	21e7      	movs	r1, #231	; 0xe7
 80055f2:	482f      	ldr	r0, [pc, #188]	; (80056b0 <SDIO_Init+0xd4>)
 80055f4:	f7fb fbe1 	bl	8000dba <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 80055f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055fc:	f1b9 0f00 	cmp.w	r9, #0
 8005600:	d002      	beq.n	8005608 <SDIO_Init+0x2c>
 8005602:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8005606:	d133      	bne.n	8005670 <SDIO_Init+0x94>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8005608:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800560c:	f1ba 0f00 	cmp.w	sl, #0
 8005610:	d002      	beq.n	8005618 <SDIO_Init+0x3c>
 8005612:	f5ba 6f80 	cmp.w	sl, #1024	; 0x400
 8005616:	d130      	bne.n	800567a <SDIO_Init+0x9e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8005618:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800561c:	f1b8 0f00 	cmp.w	r8, #0
 8005620:	d002      	beq.n	8005628 <SDIO_Init+0x4c>
 8005622:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8005626:	d12d      	bne.n	8005684 <SDIO_Init+0xa8>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8005628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800562a:	b12d      	cbz	r5, 8005638 <SDIO_Init+0x5c>
 800562c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005630:	d002      	beq.n	8005638 <SDIO_Init+0x5c>
 8005632:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005636:	d12a      	bne.n	800568e <SDIO_Init+0xb2>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8005638:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800563a:	b117      	cbz	r7, 8005642 <SDIO_Init+0x66>
 800563c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8005640:	d12a      	bne.n	8005698 <SDIO_Init+0xbc>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 8005642:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005644:	2cff      	cmp	r4, #255	; 0xff
 8005646:	d82c      	bhi.n	80056a2 <SDIO_Init+0xc6>
  tmpreg |= (Init.ClockEdge           |\
 8005648:	ea49 090a 	orr.w	r9, r9, sl
             Init.ClockBypass         |\
 800564c:	ea48 0809 	orr.w	r8, r8, r9
             Init.ClockPowerSave      |\
 8005650:	ea45 0508 	orr.w	r5, r5, r8
             Init.BusWide             |\
 8005654:	433d      	orrs	r5, r7
             Init.HardwareFlowControl |\
 8005656:	432c      	orrs	r4, r5
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005658:	6873      	ldr	r3, [r6, #4]
 800565a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800565e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005662:	431c      	orrs	r4, r3
 8005664:	6074      	str	r4, [r6, #4]
}
 8005666:	2000      	movs	r0, #0
 8005668:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	b004      	add	sp, #16
 800566e:	4770      	bx	lr
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8005670:	21e8      	movs	r1, #232	; 0xe8
 8005672:	480f      	ldr	r0, [pc, #60]	; (80056b0 <SDIO_Init+0xd4>)
 8005674:	f7fb fba1 	bl	8000dba <assert_failed>
 8005678:	e7c6      	b.n	8005608 <SDIO_Init+0x2c>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 800567a:	21e9      	movs	r1, #233	; 0xe9
 800567c:	480c      	ldr	r0, [pc, #48]	; (80056b0 <SDIO_Init+0xd4>)
 800567e:	f7fb fb9c 	bl	8000dba <assert_failed>
 8005682:	e7c9      	b.n	8005618 <SDIO_Init+0x3c>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8005684:	21ea      	movs	r1, #234	; 0xea
 8005686:	480a      	ldr	r0, [pc, #40]	; (80056b0 <SDIO_Init+0xd4>)
 8005688:	f7fb fb97 	bl	8000dba <assert_failed>
 800568c:	e7cc      	b.n	8005628 <SDIO_Init+0x4c>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 800568e:	21eb      	movs	r1, #235	; 0xeb
 8005690:	4807      	ldr	r0, [pc, #28]	; (80056b0 <SDIO_Init+0xd4>)
 8005692:	f7fb fb92 	bl	8000dba <assert_failed>
 8005696:	e7cf      	b.n	8005638 <SDIO_Init+0x5c>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8005698:	21ec      	movs	r1, #236	; 0xec
 800569a:	4805      	ldr	r0, [pc, #20]	; (80056b0 <SDIO_Init+0xd4>)
 800569c:	f7fb fb8d 	bl	8000dba <assert_failed>
 80056a0:	e7cf      	b.n	8005642 <SDIO_Init+0x66>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 80056a2:	21ed      	movs	r1, #237	; 0xed
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <SDIO_Init+0xd4>)
 80056a6:	f7fb fb88 	bl	8000dba <assert_failed>
 80056aa:	e7cd      	b.n	8005648 <SDIO_Init+0x6c>
 80056ac:	40018000 	.word	0x40018000
 80056b0:	0800f214 	.word	0x0800f214

080056b4 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80056b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80056b8:	4770      	bx	lr

080056ba <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80056ba:	680b      	ldr	r3, [r1, #0]
 80056bc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr

080056c4 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80056c4:	2303      	movs	r3, #3
 80056c6:	6003      	str	r3, [r0, #0]
}
 80056c8:	2000      	movs	r0, #0
 80056ca:	4770      	bx	lr

080056cc <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80056cc:	6800      	ldr	r0, [r0, #0]
}
 80056ce:	f000 0003 	and.w	r0, r0, #3
 80056d2:	4770      	bx	lr

080056d4 <SDIO_SendCommand>:
{
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4605      	mov	r5, r0
 80056d8:	460c      	mov	r4, r1
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 80056da:	684b      	ldr	r3, [r1, #4]
 80056dc:	2b3f      	cmp	r3, #63	; 0x3f
 80056de:	d829      	bhi.n	8005734 <SDIO_SendCommand+0x60>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 80056e0:	68a3      	ldr	r3, [r4, #8]
 80056e2:	b11b      	cbz	r3, 80056ec <SDIO_SendCommand+0x18>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d001      	beq.n	80056ec <SDIO_SendCommand+0x18>
 80056e8:	2bc0      	cmp	r3, #192	; 0xc0
 80056ea:	d129      	bne.n	8005740 <SDIO_SendCommand+0x6c>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	b12b      	cbz	r3, 80056fc <SDIO_SendCommand+0x28>
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d002      	beq.n	80056fc <SDIO_SendCommand+0x28>
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fa:	d127      	bne.n	800574c <SDIO_SendCommand+0x78>
  assert_param(IS_SDIO_CPSM(Command->CPSM));
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	b13b      	cbz	r3, 8005710 <SDIO_SendCommand+0x3c>
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d004      	beq.n	8005710 <SDIO_SendCommand+0x3c>
 8005706:	f44f 71bb 	mov.w	r1, #374	; 0x176
 800570a:	4813      	ldr	r0, [pc, #76]	; (8005758 <SDIO_SendCommand+0x84>)
 800570c:	f7fb fb55 	bl	8000dba <assert_failed>
  SDIOx->ARG = Command->Argument;
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005714:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 8005716:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005718:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800571a:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 800571c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800571e:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 8005720:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005722:	68ea      	ldr	r2, [r5, #12]
 8005724:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005728:	f022 020f 	bic.w	r2, r2, #15
 800572c:	4313      	orrs	r3, r2
 800572e:	60eb      	str	r3, [r5, #12]
}
 8005730:	2000      	movs	r0, #0
 8005732:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 8005734:	f240 1173 	movw	r1, #371	; 0x173
 8005738:	4807      	ldr	r0, [pc, #28]	; (8005758 <SDIO_SendCommand+0x84>)
 800573a:	f7fb fb3e 	bl	8000dba <assert_failed>
 800573e:	e7cf      	b.n	80056e0 <SDIO_SendCommand+0xc>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 8005740:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005744:	4804      	ldr	r0, [pc, #16]	; (8005758 <SDIO_SendCommand+0x84>)
 8005746:	f7fb fb38 	bl	8000dba <assert_failed>
 800574a:	e7cf      	b.n	80056ec <SDIO_SendCommand+0x18>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 800574c:	f240 1175 	movw	r1, #373	; 0x175
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <SDIO_SendCommand+0x84>)
 8005752:	f7fb fb32 	bl	8000dba <assert_failed>
 8005756:	e7d1      	b.n	80056fc <SDIO_SendCommand+0x28>
 8005758:	0800f214 	.word	0x0800f214

0800575c <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 800575c:	6900      	ldr	r0, [r0, #16]
}
 800575e:	b2c0      	uxtb	r0, r0
 8005760:	4770      	bx	lr
	...

08005764 <SDIO_GetResponse>:
{
 8005764:	b530      	push	{r4, r5, lr}
 8005766:	b083      	sub	sp, #12
 8005768:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDIO_RESP(Response));
 800576e:	460d      	mov	r5, r1
 8005770:	b151      	cbz	r1, 8005788 <SDIO_GetResponse+0x24>
 8005772:	2904      	cmp	r1, #4
 8005774:	d008      	beq.n	8005788 <SDIO_GetResponse+0x24>
 8005776:	2908      	cmp	r1, #8
 8005778:	d006      	beq.n	8005788 <SDIO_GetResponse+0x24>
 800577a:	290c      	cmp	r1, #12
 800577c:	d004      	beq.n	8005788 <SDIO_GetResponse+0x24>
 800577e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005782:	4805      	ldr	r0, [pc, #20]	; (8005798 <SDIO_GetResponse+0x34>)
 8005784:	f7fb fb19 	bl	8000dba <assert_failed>
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005788:	3414      	adds	r4, #20
 800578a:	442c      	add	r4, r5
 800578c:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
}  
 8005792:	b003      	add	sp, #12
 8005794:	bd30      	pop	{r4, r5, pc}
 8005796:	bf00      	nop
 8005798:	0800f214 	.word	0x0800f214

0800579c <SDMMC_GetCmdResp1>:
{
 800579c:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800579e:	4b51      	ldr	r3, [pc, #324]	; (80058e4 <SDMMC_GetCmdResp1+0x148>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4c51      	ldr	r4, [pc, #324]	; (80058e8 <SDMMC_GetCmdResp1+0x14c>)
 80057a4:	fba4 4303 	umull	r4, r3, r4, r3
 80057a8:	0a5b      	lsrs	r3, r3, #9
 80057aa:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80057ae:	1e53      	subs	r3, r2, #1
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d05e      	beq.n	8005872 <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80057b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 80057b6:	461a      	mov	r2, r3
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80057b8:	f014 0f45 	tst.w	r4, #69	; 0x45
 80057bc:	d0f7      	beq.n	80057ae <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057c0:	f013 0f04 	tst.w	r3, #4
 80057c4:	d107      	bne.n	80057d6 <SDMMC_GetCmdResp1+0x3a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057c8:	f013 0f01 	tst.w	r3, #1
 80057cc:	d007      	beq.n	80057de <SDMMC_GetCmdResp1+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057ce:	2301      	movs	r3, #1
 80057d0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057d2:	4618      	mov	r0, r3
 80057d4:	e04f      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057d6:	2304      	movs	r3, #4
 80057d8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057da:	4618      	mov	r0, r3
 80057dc:	e04b      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
 80057de:	460d      	mov	r5, r1
 80057e0:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057e2:	f7ff ffbb 	bl	800575c <SDIO_GetCommandResponse>
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	d001      	beq.n	80057ee <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057ea:	2001      	movs	r0, #1
 80057ec:	e043      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80057ee:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80057f2:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057f4:	2100      	movs	r1, #0
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff ffb4 	bl	8005764 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80057fc:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <SDMMC_GetCmdResp1+0x150>)
 80057fe:	4003      	ands	r3, r0
 8005800:	b3d3      	cbz	r3, 8005878 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005802:	2800      	cmp	r0, #0
 8005804:	db3a      	blt.n	800587c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005806:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800580a:	d13a      	bne.n	8005882 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800580c:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8005810:	d139      	bne.n	8005886 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005812:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8005816:	d138      	bne.n	800588a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005818:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800581c:	d138      	bne.n	8005890 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800581e:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005822:	d138      	bne.n	8005896 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005824:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005828:	d138      	bne.n	800589c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800582a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800582e:	d138      	bne.n	80058a2 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005830:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005834:	d138      	bne.n	80058a8 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005836:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800583a:	d138      	bne.n	80058ae <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800583c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005840:	d138      	bne.n	80058b4 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005842:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8005846:	d138      	bne.n	80058ba <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005848:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800584c:	d138      	bne.n	80058c0 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800584e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8005852:	d138      	bne.n	80058c6 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005854:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005858:	d138      	bne.n	80058cc <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800585a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800585e:	d138      	bne.n	80058d2 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005860:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8005864:	d138      	bne.n	80058d8 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005866:	f010 0f08 	tst.w	r0, #8
 800586a:	d038      	beq.n	80058de <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800586c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005870:	e001      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 8005872:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005876:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8005878:	2000      	movs	r0, #0
 800587a:	e7fc      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800587c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005880:	e7f9      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005882:	2040      	movs	r0, #64	; 0x40
 8005884:	e7f7      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005886:	2080      	movs	r0, #128	; 0x80
 8005888:	e7f5      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800588a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800588e:	e7f2      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005890:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005894:	e7ef      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005896:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800589a:	e7ec      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800589c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058a0:	e7e9      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058a6:	e7e6      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80058ac:	e7e3      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80058b2:	e7e0      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 80058b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058b8:	e7dd      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80058be:	e7da      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80058c0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80058c4:	e7d7      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80058c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058ca:	e7d4      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80058cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80058d0:	e7d1      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80058d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80058d6:	e7ce      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 80058d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80058dc:	e7cb      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80058e2:	e7c8      	b.n	8005876 <SDMMC_GetCmdResp1+0xda>
 80058e4:	20000000 	.word	0x20000000
 80058e8:	10624dd3 	.word	0x10624dd3
 80058ec:	fdffe008 	.word	0xfdffe008

080058f0 <SDMMC_GetCmdResp6>:
{
 80058f0:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058f2:	4b25      	ldr	r3, [pc, #148]	; (8005988 <SDMMC_GetCmdResp6+0x98>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4c25      	ldr	r4, [pc, #148]	; (800598c <SDMMC_GetCmdResp6+0x9c>)
 80058f8:	fba4 4303 	umull	r4, r3, r4, r3
 80058fc:	0a5c      	lsrs	r4, r3, #9
 80058fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005902:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8005906:	1e5c      	subs	r4, r3, #1
 8005908:	b3a3      	cbz	r3, 8005974 <SDMMC_GetCmdResp6+0x84>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800590a:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 800590c:	4623      	mov	r3, r4
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800590e:	f015 0f45 	tst.w	r5, #69	; 0x45
 8005912:	d0f8      	beq.n	8005906 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005914:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005916:	f013 0f04 	tst.w	r3, #4
 800591a:	d107      	bne.n	800592c <SDMMC_GetCmdResp6+0x3c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800591c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800591e:	f013 0f01 	tst.w	r3, #1
 8005922:	d007      	beq.n	8005934 <SDMMC_GetCmdResp6+0x44>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005924:	2301      	movs	r3, #1
 8005926:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005928:	4618      	mov	r0, r3
 800592a:	e025      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800592c:	2304      	movs	r3, #4
 800592e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005930:	4618      	mov	r0, r3
 8005932:	e021      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
 8005934:	4616      	mov	r6, r2
 8005936:	460d      	mov	r5, r1
 8005938:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800593a:	f7ff ff0f 	bl	800575c <SDIO_GetCommandResponse>
 800593e:	42a8      	cmp	r0, r5
 8005940:	d001      	beq.n	8005946 <SDMMC_GetCmdResp6+0x56>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005942:	2001      	movs	r0, #1
 8005944:	e018      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005946:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800594a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800594c:	2100      	movs	r1, #0
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff ff08 	bl	8005764 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005954:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8005958:	d008      	beq.n	800596c <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800595a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800595e:	d10c      	bne.n	800597a <SDMMC_GetCmdResp6+0x8a>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005960:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005964:	d00c      	beq.n	8005980 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005966:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800596a:	e005      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800596c:	0c00      	lsrs	r0, r0, #16
 800596e:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8005970:	2000      	movs	r0, #0
 8005972:	e001      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
      return SDMMC_ERROR_TIMEOUT;
 8005974:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005978:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800597a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800597e:	e7fb      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005980:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005984:	e7f8      	b.n	8005978 <SDMMC_GetCmdResp6+0x88>
 8005986:	bf00      	nop
 8005988:	20000000 	.word	0x20000000
 800598c:	10624dd3 	.word	0x10624dd3

08005990 <SDIO_ConfigData>:
{
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4605      	mov	r5, r0
 8005994:	460c      	mov	r4, r1
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8005996:	684b      	ldr	r3, [r1, #4]
 8005998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800599c:	d23f      	bcs.n	8005a1e <SDIO_ConfigData+0x8e>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	b1db      	cbz	r3, 80059da <SDIO_ConfigData+0x4a>
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d019      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d017      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d015      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d013      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059b2:	2b50      	cmp	r3, #80	; 0x50
 80059b4:	d011      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059b6:	2b60      	cmp	r3, #96	; 0x60
 80059b8:	d00f      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059ba:	2b70      	cmp	r3, #112	; 0x70
 80059bc:	d00d      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d00b      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059c2:	2b90      	cmp	r3, #144	; 0x90
 80059c4:	d009      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059c6:	2ba0      	cmp	r3, #160	; 0xa0
 80059c8:	d007      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059ca:	2bb0      	cmp	r3, #176	; 0xb0
 80059cc:	d005      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059ce:	2bc0      	cmp	r3, #192	; 0xc0
 80059d0:	d003      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059d2:	2bd0      	cmp	r3, #208	; 0xd0
 80059d4:	d001      	beq.n	80059da <SDIO_ConfigData+0x4a>
 80059d6:	2be0      	cmp	r3, #224	; 0xe0
 80059d8:	d127      	bne.n	8005a2a <SDIO_ConfigData+0x9a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	b10b      	cbz	r3, 80059e2 <SDIO_ConfigData+0x52>
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d129      	bne.n	8005a36 <SDIO_ConfigData+0xa6>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	b10b      	cbz	r3, 80059ea <SDIO_ConfigData+0x5a>
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d12b      	bne.n	8005a42 <SDIO_ConfigData+0xb2>
  assert_param(IS_SDIO_DPSM(Data->DPSM));
 80059ea:	6963      	ldr	r3, [r4, #20]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d904      	bls.n	80059fa <SDIO_ConfigData+0x6a>
 80059f0:	f240 11bb 	movw	r1, #443	; 0x1bb
 80059f4:	4816      	ldr	r0, [pc, #88]	; (8005a50 <SDIO_ConfigData+0xc0>)
 80059f6:	f7fb f9e0 	bl	8000dba <assert_failed>
  SDIOx->DTIMER = Data->DataTimeOut;
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	626b      	str	r3, [r5, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a02:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 8005a04:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a06:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8005a08:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 8005a0a:	4313      	orrs	r3, r2
                       Data->DPSM);
 8005a0c:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8005a0e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005a10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005a12:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8005a16:	4313      	orrs	r3, r2
 8005a18:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8005a1e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8005a22:	480b      	ldr	r0, [pc, #44]	; (8005a50 <SDIO_ConfigData+0xc0>)
 8005a24:	f7fb f9c9 	bl	8000dba <assert_failed>
 8005a28:	e7b9      	b.n	800599e <SDIO_ConfigData+0xe>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 8005a2a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005a2e:	4808      	ldr	r0, [pc, #32]	; (8005a50 <SDIO_ConfigData+0xc0>)
 8005a30:	f7fb f9c3 	bl	8000dba <assert_failed>
 8005a34:	e7d1      	b.n	80059da <SDIO_ConfigData+0x4a>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 8005a36:	f240 11b9 	movw	r1, #441	; 0x1b9
 8005a3a:	4805      	ldr	r0, [pc, #20]	; (8005a50 <SDIO_ConfigData+0xc0>)
 8005a3c:	f7fb f9bd 	bl	8000dba <assert_failed>
 8005a40:	e7cf      	b.n	80059e2 <SDIO_ConfigData+0x52>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 8005a42:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8005a46:	4802      	ldr	r0, [pc, #8]	; (8005a50 <SDIO_ConfigData+0xc0>)
 8005a48:	f7fb f9b7 	bl	8000dba <assert_failed>
 8005a4c:	e7cd      	b.n	80059ea <SDIO_ConfigData+0x5a>
 8005a4e:	bf00      	nop
 8005a50:	0800f214 	.word	0x0800f214

08005a54 <SDMMC_CmdBlockLength>:
{
 8005a54:	b530      	push	{r4, r5, lr}
 8005a56:	b087      	sub	sp, #28
 8005a58:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005a5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005a5c:	2410      	movs	r4, #16
 8005a5e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a64:	2300      	movs	r3, #0
 8005a66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a6e:	a901      	add	r1, sp, #4
 8005a70:	f7ff fe30 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff fe8e 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005a80:	b007      	add	sp, #28
 8005a82:	bd30      	pop	{r4, r5, pc}

08005a84 <SDMMC_CmdReadSingleBlock>:
{
 8005a84:	b530      	push	{r4, r5, lr}
 8005a86:	b087      	sub	sp, #28
 8005a88:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005a8c:	2411      	movs	r4, #17
 8005a8e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a94:	2300      	movs	r3, #0
 8005a96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a9c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a9e:	a901      	add	r1, sp, #4
 8005aa0:	f7ff fe18 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7ff fe76 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005ab0:	b007      	add	sp, #28
 8005ab2:	bd30      	pop	{r4, r5, pc}

08005ab4 <SDMMC_CmdReadMultiBlock>:
{
 8005ab4:	b530      	push	{r4, r5, lr}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005aba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005abc:	2412      	movs	r4, #18
 8005abe:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005acc:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ace:	a901      	add	r1, sp, #4
 8005ad0:	f7ff fe00 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff fe5e 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005ae0:	b007      	add	sp, #28
 8005ae2:	bd30      	pop	{r4, r5, pc}

08005ae4 <SDMMC_CmdWriteSingleBlock>:
{
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005aea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005aec:	2418      	movs	r4, #24
 8005aee:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005af4:	2300      	movs	r3, #0
 8005af6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afc:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005afe:	a901      	add	r1, sp, #4
 8005b00:	f7ff fde8 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7ff fe46 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005b10:	b007      	add	sp, #28
 8005b12:	bd30      	pop	{r4, r5, pc}

08005b14 <SDMMC_CmdWriteMultiBlock>:
{
 8005b14:	b530      	push	{r4, r5, lr}
 8005b16:	b087      	sub	sp, #28
 8005b18:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005b1a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005b1c:	2419      	movs	r4, #25
 8005b1e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b24:	2300      	movs	r3, #0
 8005b26:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b2e:	a901      	add	r1, sp, #4
 8005b30:	f7ff fdd0 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7ff fe2e 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005b40:	b007      	add	sp, #28
 8005b42:	bd30      	pop	{r4, r5, pc}

08005b44 <SDMMC_CmdStopTransfer>:
{
 8005b44:	b530      	push	{r4, r5, lr}
 8005b46:	b087      	sub	sp, #28
 8005b48:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005b4e:	240c      	movs	r4, #12
 8005b50:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b52:	2240      	movs	r2, #64	; 0x40
 8005b54:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b56:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b5e:	a901      	add	r1, sp, #4
 8005b60:	f7ff fdb8 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8005b64:	4a03      	ldr	r2, [pc, #12]	; (8005b74 <SDMMC_CmdStopTransfer+0x30>)
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff fe17 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005b6e:	b007      	add	sp, #28
 8005b70:	bd30      	pop	{r4, r5, pc}
 8005b72:	bf00      	nop
 8005b74:	05f5e100 	.word	0x05f5e100

08005b78 <SDMMC_CmdSelDesel>:
{
 8005b78:	b530      	push	{r4, r5, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b7e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b80:	2407      	movs	r4, #7
 8005b82:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b84:	2340      	movs	r3, #64	; 0x40
 8005b86:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b90:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b92:	a901      	add	r1, sp, #4
 8005b94:	f7ff fd9e 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7ff fdfc 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005ba4:	b007      	add	sp, #28
 8005ba6:	bd30      	pop	{r4, r5, pc}

08005ba8 <SDMMC_CmdGoIdleState>:
{
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005bb2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005bb4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bb6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bbc:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bbe:	a901      	add	r1, sp, #4
 8005bc0:	f7ff fd88 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fc6d 	bl	80054a4 <SDMMC_GetCmdError>
}
 8005bca:	b006      	add	sp, #24
 8005bcc:	bd10      	pop	{r4, pc}

08005bce <SDMMC_CmdOperCond>:
{
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005bd4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005bd8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005bda:	2308      	movs	r3, #8
 8005bdc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bde:	2340      	movs	r3, #64	; 0x40
 8005be0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005be2:	2300      	movs	r3, #0
 8005be4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bea:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bec:	a901      	add	r1, sp, #4
 8005bee:	f7ff fd71 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7ff fcc8 	bl	8005588 <SDMMC_GetCmdResp7>
}
 8005bf8:	b006      	add	sp, #24
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <SDMMC_CmdAppCommand>:
{
 8005bfc:	b530      	push	{r4, r5, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c02:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c04:	2437      	movs	r4, #55	; 0x37
 8005c06:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c14:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c16:	a901      	add	r1, sp, #4
 8005c18:	f7ff fd5c 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7ff fdba 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005c28:	b007      	add	sp, #28
 8005c2a:	bd30      	pop	{r4, r5, pc}

08005c2c <SDMMC_CmdAppOperCommand>:
{
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005c32:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c3a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c3c:	2329      	movs	r3, #41	; 0x29
 8005c3e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c44:	2300      	movs	r3, #0
 8005c46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c4e:	a901      	add	r1, sp, #4
 8005c50:	f7ff fd40 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff fc71 	bl	800553c <SDMMC_GetCmdResp3>
}
 8005c5a:	b006      	add	sp, #24
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <SDMMC_CmdBusWidth>:
{
 8005c5e:	b530      	push	{r4, r5, lr}
 8005c60:	b087      	sub	sp, #28
 8005c62:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005c64:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005c66:	2406      	movs	r4, #6
 8005c68:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c76:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c78:	a901      	add	r1, sp, #4
 8005c7a:	f7ff fd2b 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f7ff fd89 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005c8a:	b007      	add	sp, #28
 8005c8c:	bd30      	pop	{r4, r5, pc}

08005c8e <SDMMC_CmdSendSCR>:
{
 8005c8e:	b530      	push	{r4, r5, lr}
 8005c90:	b087      	sub	sp, #28
 8005c92:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005c98:	2433      	movs	r4, #51	; 0x33
 8005c9a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c9c:	2240      	movs	r2, #64	; 0x40
 8005c9e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ca0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca6:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ca8:	a901      	add	r1, sp, #4
 8005caa:	f7ff fd13 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f7ff fd71 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005cba:	b007      	add	sp, #28
 8005cbc:	bd30      	pop	{r4, r5, pc}

08005cbe <SDMMC_CmdSendCID>:
{
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005cc8:	2202      	movs	r2, #2
 8005cca:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005ccc:	22c0      	movs	r2, #192	; 0xc0
 8005cce:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cd0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd6:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd8:	a901      	add	r1, sp, #4
 8005cda:	f7ff fcfb 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7ff fbfe 	bl	80054e0 <SDMMC_GetCmdResp2>
}
 8005ce4:	b006      	add	sp, #24
 8005ce6:	bd10      	pop	{r4, pc}

08005ce8 <SDMMC_CmdSendCSD>:
{
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005cee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005cf0:	2309      	movs	r3, #9
 8005cf2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005cf4:	23c0      	movs	r3, #192	; 0xc0
 8005cf6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d00:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d02:	a901      	add	r1, sp, #4
 8005d04:	f7ff fce6 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7ff fbe9 	bl	80054e0 <SDMMC_GetCmdResp2>
}
 8005d0e:	b006      	add	sp, #24
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <SDMMC_CmdSetRelAdd>:
{
 8005d12:	b570      	push	{r4, r5, r6, lr}
 8005d14:	b086      	sub	sp, #24
 8005d16:	4605      	mov	r5, r0
 8005d18:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d1e:	2403      	movs	r4, #3
 8005d20:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d22:	2240      	movs	r2, #64	; 0x40
 8005d24:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d26:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d2c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d2e:	a901      	add	r1, sp, #4
 8005d30:	f7ff fcd0 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005d34:	4632      	mov	r2, r6
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff fdd9 	bl	80058f0 <SDMMC_GetCmdResp6>
}
 8005d3e:	b006      	add	sp, #24
 8005d40:	bd70      	pop	{r4, r5, r6, pc}

08005d42 <SDMMC_CmdSendStatus>:
{
 8005d42:	b530      	push	{r4, r5, lr}
 8005d44:	b087      	sub	sp, #28
 8005d46:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005d48:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005d4a:	240d      	movs	r4, #13
 8005d4c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d52:	2300      	movs	r3, #0
 8005d54:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d5c:	a901      	add	r1, sp, #4
 8005d5e:	f7ff fcb9 	bl	80056d4 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff fd17 	bl	800579c <SDMMC_GetCmdResp1>
}
 8005d6e:	b007      	add	sp, #28
 8005d70:	bd30      	pop	{r4, r5, pc}
	...

08005d74 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4605      	mov	r5, r0
 8005d78:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 8005d7a:	4b5a      	ldr	r3, [pc, #360]	; (8005ee4 <LL_SPI_Init+0x170>)
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	d00b      	beq.n	8005d98 <LL_SPI_Init+0x24>
 8005d80:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8005d84:	4298      	cmp	r0, r3
 8005d86:	d007      	beq.n	8005d98 <LL_SPI_Init+0x24>
 8005d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8c:	4298      	cmp	r0, r3
 8005d8e:	d003      	beq.n	8005d98 <LL_SPI_Init+0x24>
 8005d90:	21c7      	movs	r1, #199	; 0xc7
 8005d92:	4855      	ldr	r0, [pc, #340]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005d94:	f7fb f811 	bl	8000dba <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	b143      	cbz	r3, 8005dae <LL_SPI_Init+0x3a>
 8005d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da0:	d005      	beq.n	8005dae <LL_SPI_Init+0x3a>
 8005da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da6:	d002      	beq.n	8005dae <LL_SPI_Init+0x3a>
 8005da8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dac:	d15c      	bne.n	8005e68 <LL_SPI_Init+0xf4>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db4:	d001      	beq.n	8005dba <LL_SPI_Init+0x46>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d15b      	bne.n	8005e72 <LL_SPI_Init+0xfe>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	b113      	cbz	r3, 8005dc4 <LL_SPI_Init+0x50>
 8005dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc2:	d15b      	bne.n	8005e7c <LL_SPI_Init+0x108>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8005dc4:	68e3      	ldr	r3, [r4, #12]
 8005dc6:	b10b      	cbz	r3, 8005dcc <LL_SPI_Init+0x58>
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d15c      	bne.n	8005e86 <LL_SPI_Init+0x112>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d85e      	bhi.n	8005e90 <LL_SPI_Init+0x11c>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8005dd2:	6963      	ldr	r3, [r4, #20]
 8005dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd8:	d003      	beq.n	8005de2 <LL_SPI_Init+0x6e>
 8005dda:	b113      	cbz	r3, 8005de2 <LL_SPI_Init+0x6e>
 8005ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de0:	d15b      	bne.n	8005e9a <LL_SPI_Init+0x126>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8005de2:	69a3      	ldr	r3, [r4, #24]
 8005de4:	b16b      	cbz	r3, 8005e02 <LL_SPI_Init+0x8e>
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d00b      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d009      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005dee:	2b18      	cmp	r3, #24
 8005df0:	d007      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d005      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005df6:	2b28      	cmp	r3, #40	; 0x28
 8005df8:	d003      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005dfa:	2b30      	cmp	r3, #48	; 0x30
 8005dfc:	d001      	beq.n	8005e02 <LL_SPI_Init+0x8e>
 8005dfe:	2b38      	cmp	r3, #56	; 0x38
 8005e00:	d150      	bne.n	8005ea4 <LL_SPI_Init+0x130>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8005e02:	69e3      	ldr	r3, [r4, #28]
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d001      	beq.n	8005e0c <LL_SPI_Init+0x98>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d150      	bne.n	8005eae <LL_SPI_Init+0x13a>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8005e0c:	6a23      	ldr	r3, [r4, #32]
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d001      	beq.n	8005e18 <LL_SPI_Init+0xa4>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d14f      	bne.n	8005eb8 <LL_SPI_Init+0x144>
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8005e18:	682b      	ldr	r3, [r5, #0]

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005e1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e1e:	d15b      	bne.n	8005ed8 <LL_SPI_Init+0x164>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005e20:	682a      	ldr	r2, [r5, #0]
 8005e22:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005e26:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	68a1      	ldr	r1, [r4, #8]
 8005e32:	430b      	orrs	r3, r1
 8005e34:	68e1      	ldr	r1, [r4, #12]
 8005e36:	430b      	orrs	r3, r1
 8005e38:	6921      	ldr	r1, [r4, #16]
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6961      	ldr	r1, [r4, #20]
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	69a1      	ldr	r1, [r4, #24]
 8005e42:	430b      	orrs	r3, r1
 8005e44:	69e1      	ldr	r1, [r4, #28]
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6a21      	ldr	r1, [r4, #32]
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	602b      	str	r3, [r5, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8005e50:	686b      	ldr	r3, [r5, #4]
 8005e52:	f023 0304 	bic.w	r3, r3, #4
 8005e56:	8ae2      	ldrh	r2, [r4, #22]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	606b      	str	r3, [r5, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005e5c:	6a23      	ldr	r3, [r4, #32]
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e62:	d02e      	beq.n	8005ec2 <LL_SPI_Init+0x14e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8005e64:	2001      	movs	r0, #1
 8005e66:	e038      	b.n	8005eda <LL_SPI_Init+0x166>
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8005e68:	21ca      	movs	r1, #202	; 0xca
 8005e6a:	481f      	ldr	r0, [pc, #124]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e6c:	f7fa ffa5 	bl	8000dba <assert_failed>
 8005e70:	e79d      	b.n	8005dae <LL_SPI_Init+0x3a>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8005e72:	21cb      	movs	r1, #203	; 0xcb
 8005e74:	481c      	ldr	r0, [pc, #112]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e76:	f7fa ffa0 	bl	8000dba <assert_failed>
 8005e7a:	e79e      	b.n	8005dba <LL_SPI_Init+0x46>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8005e7c:	21cc      	movs	r1, #204	; 0xcc
 8005e7e:	481a      	ldr	r0, [pc, #104]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e80:	f7fa ff9b 	bl	8000dba <assert_failed>
 8005e84:	e79e      	b.n	8005dc4 <LL_SPI_Init+0x50>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8005e86:	21cd      	movs	r1, #205	; 0xcd
 8005e88:	4817      	ldr	r0, [pc, #92]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e8a:	f7fa ff96 	bl	8000dba <assert_failed>
 8005e8e:	e79d      	b.n	8005dcc <LL_SPI_Init+0x58>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8005e90:	21ce      	movs	r1, #206	; 0xce
 8005e92:	4815      	ldr	r0, [pc, #84]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e94:	f7fa ff91 	bl	8000dba <assert_failed>
 8005e98:	e79b      	b.n	8005dd2 <LL_SPI_Init+0x5e>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8005e9a:	21cf      	movs	r1, #207	; 0xcf
 8005e9c:	4812      	ldr	r0, [pc, #72]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005e9e:	f7fa ff8c 	bl	8000dba <assert_failed>
 8005ea2:	e79e      	b.n	8005de2 <LL_SPI_Init+0x6e>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8005ea4:	21d0      	movs	r1, #208	; 0xd0
 8005ea6:	4810      	ldr	r0, [pc, #64]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005ea8:	f7fa ff87 	bl	8000dba <assert_failed>
 8005eac:	e7a9      	b.n	8005e02 <LL_SPI_Init+0x8e>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8005eae:	21d1      	movs	r1, #209	; 0xd1
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005eb2:	f7fa ff82 	bl	8000dba <assert_failed>
 8005eb6:	e7a9      	b.n	8005e0c <LL_SPI_Init+0x98>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8005eb8:	21d2      	movs	r1, #210	; 0xd2
 8005eba:	480b      	ldr	r0, [pc, #44]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005ebc:	f7fa ff7d 	bl	8000dba <assert_failed>
 8005ec0:	e7aa      	b.n	8005e18 <LL_SPI_Init+0xa4>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8005ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec4:	b11b      	cbz	r3, 8005ece <LL_SPI_Init+0x15a>
 8005ec6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005ec8:	612b      	str	r3, [r5, #16]
    status = SUCCESS;
 8005eca:	2001      	movs	r0, #1
 8005ecc:	e005      	b.n	8005eda <LL_SPI_Init+0x166>
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8005ece:	21f5      	movs	r1, #245	; 0xf5
 8005ed0:	4805      	ldr	r0, [pc, #20]	; (8005ee8 <LL_SPI_Init+0x174>)
 8005ed2:	f7fa ff72 	bl	8000dba <assert_failed>
 8005ed6:	e7f6      	b.n	8005ec6 <LL_SPI_Init+0x152>
  ErrorStatus status = ERROR;
 8005ed8:	2000      	movs	r0, #0
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eda:	69eb      	ldr	r3, [r5, #28]
 8005edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee0:	61eb      	str	r3, [r5, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	40013000 	.word	0x40013000
 8005ee8:	0800f250 	.word	0x0800f250

08005eec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	460d      	mov	r5, r1
  uint32_t tmpcr1 = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 8005ef2:	4b45      	ldr	r3, [pc, #276]	; (8006008 <LL_TIM_Init+0x11c>)
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	d01f      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	4298      	cmp	r0, r3
 8005efe:	d01b      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f04:	d018      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f06:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8005f0a:	4298      	cmp	r0, r3
 8005f0c:	d014      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f12:	4298      	cmp	r0, r3
 8005f14:	d010      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1a:	4298      	cmp	r0, r3
 8005f1c:	d00c      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f22:	4298      	cmp	r0, r3
 8005f24:	d008      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f2a:	4298      	cmp	r0, r3
 8005f2c:	d004      	beq.n	8005f38 <LL_TIM_Init+0x4c>
 8005f2e:	f240 1159 	movw	r1, #345	; 0x159
 8005f32:	4836      	ldr	r0, [pc, #216]	; (800600c <LL_TIM_Init+0x120>)
 8005f34:	f7fa ff41 	bl	8000dba <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8005f38:	686b      	ldr	r3, [r5, #4]
 8005f3a:	b13b      	cbz	r3, 8005f4c <LL_TIM_Init+0x60>
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d005      	beq.n	8005f4c <LL_TIM_Init+0x60>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d003      	beq.n	8005f4c <LL_TIM_Init+0x60>
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d001      	beq.n	8005f4c <LL_TIM_Init+0x60>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d150      	bne.n	8005fee <LL_TIM_Init+0x102>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8005f4c:	68eb      	ldr	r3, [r5, #12]
 8005f4e:	b12b      	cbz	r3, 8005f5c <LL_TIM_Init+0x70>
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d002      	beq.n	8005f5c <LL_TIM_Init+0x70>
 8005f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f5a:	d14e      	bne.n	8005ffa <LL_TIM_Init+0x10e>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005f5c:	6823      	ldr	r3, [r4, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <LL_TIM_Init+0x11c>)
 8005f60:	4294      	cmp	r4, r2
 8005f62:	d012      	beq.n	8005f8a <LL_TIM_Init+0x9e>
 8005f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f68:	4294      	cmp	r4, r2
 8005f6a:	d00e      	beq.n	8005f8a <LL_TIM_Init+0x9e>
 8005f6c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005f70:	d00b      	beq.n	8005f8a <LL_TIM_Init+0x9e>
 8005f72:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005f76:	4294      	cmp	r4, r2
 8005f78:	d007      	beq.n	8005f8a <LL_TIM_Init+0x9e>
 8005f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f7e:	4294      	cmp	r4, r2
 8005f80:	d003      	beq.n	8005f8a <LL_TIM_Init+0x9e>
 8005f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f86:	4294      	cmp	r4, r2
 8005f88:	d103      	bne.n	8005f92 <LL_TIM_Init+0xa6>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	686a      	ldr	r2, [r5, #4]
 8005f90:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <LL_TIM_Init+0x11c>)
 8005f94:	4294      	cmp	r4, r2
 8005f96:	d012      	beq.n	8005fbe <LL_TIM_Init+0xd2>
 8005f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f9c:	4294      	cmp	r4, r2
 8005f9e:	d00e      	beq.n	8005fbe <LL_TIM_Init+0xd2>
 8005fa0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005fa4:	d00b      	beq.n	8005fbe <LL_TIM_Init+0xd2>
 8005fa6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d007      	beq.n	8005fbe <LL_TIM_Init+0xd2>
 8005fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fb2:	4294      	cmp	r4, r2
 8005fb4:	d003      	beq.n	8005fbe <LL_TIM_Init+0xd2>
 8005fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fba:	4294      	cmp	r4, r2
 8005fbc:	d103      	bne.n	8005fc6 <LL_TIM_Init+0xda>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	68ea      	ldr	r2, [r5, #12]
 8005fc4:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005fc6:	6023      	str	r3, [r4, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005fc8:	68ab      	ldr	r3, [r5, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005fca:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005fcc:	882b      	ldrh	r3, [r5, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005fce:	62a3      	str	r3, [r4, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <LL_TIM_Init+0x11c>)
 8005fd2:	429c      	cmp	r4, r3
 8005fd4:	d003      	beq.n	8005fde <LL_TIM_Init+0xf2>
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d101      	bne.n	8005fe2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005fde:	7c2b      	ldrb	r3, [r5, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005fe0:	6323      	str	r3, [r4, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005fe2:	6963      	ldr	r3, [r4, #20]
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6163      	str	r3, [r4, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8005fea:	2001      	movs	r0, #1
 8005fec:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8005fee:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005ff2:	4806      	ldr	r0, [pc, #24]	; (800600c <LL_TIM_Init+0x120>)
 8005ff4:	f7fa fee1 	bl	8000dba <assert_failed>
 8005ff8:	e7a8      	b.n	8005f4c <LL_TIM_Init+0x60>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8005ffa:	f240 115b 	movw	r1, #347	; 0x15b
 8005ffe:	4803      	ldr	r0, [pc, #12]	; (800600c <LL_TIM_Init+0x120>)
 8006000:	f7fa fedb 	bl	8000dba <assert_failed>
 8006004:	e7aa      	b.n	8005f5c <LL_TIM_Init+0x70>
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	0800f288 	.word	0x0800f288

08006010 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006010:	b530      	push	{r4, r5, lr}
 8006012:	b085      	sub	sp, #20
 8006014:	4605      	mov	r5, r0
 8006016:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8006018:	4b63      	ldr	r3, [pc, #396]	; (80061a8 <LL_USART_Init+0x198>)
 800601a:	4298      	cmp	r0, r3
 800601c:	d013      	beq.n	8006046 <LL_USART_Init+0x36>
 800601e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006022:	4298      	cmp	r0, r3
 8006024:	d00f      	beq.n	8006046 <LL_USART_Init+0x36>
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	4298      	cmp	r0, r3
 800602c:	d00b      	beq.n	8006046 <LL_USART_Init+0x36>
 800602e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006032:	4298      	cmp	r0, r3
 8006034:	d007      	beq.n	8006046 <LL_USART_Init+0x36>
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	4298      	cmp	r0, r3
 800603c:	d003      	beq.n	8006046 <LL_USART_Init+0x36>
 800603e:	21da      	movs	r1, #218	; 0xda
 8006040:	485a      	ldr	r0, [pc, #360]	; (80061ac <LL_USART_Init+0x19c>)
 8006042:	f7fa feba 	bl	8000dba <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	4b59      	ldr	r3, [pc, #356]	; (80061b0 <LL_USART_Init+0x1a0>)
 800604a:	429a      	cmp	r2, r3
 800604c:	d831      	bhi.n	80060b2 <LL_USART_Init+0xa2>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	b113      	cbz	r3, 8006058 <LL_USART_Init+0x48>
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006056:	d131      	bne.n	80060bc <LL_USART_Init+0xac>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d006      	beq.n	800606e <LL_USART_Init+0x5e>
 8006060:	b12b      	cbz	r3, 800606e <LL_USART_Init+0x5e>
 8006062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006066:	d002      	beq.n	800606e <LL_USART_Init+0x5e>
 8006068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606c:	d12b      	bne.n	80060c6 <LL_USART_Init+0xb6>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	b12b      	cbz	r3, 800607e <LL_USART_Init+0x6e>
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006076:	d002      	beq.n	800607e <LL_USART_Init+0x6e>
 8006078:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800607c:	d128      	bne.n	80060d0 <LL_USART_Init+0xc0>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b12b      	cbz	r3, 800608e <LL_USART_Init+0x7e>
 8006082:	2b04      	cmp	r3, #4
 8006084:	d003      	beq.n	800608e <LL_USART_Init+0x7e>
 8006086:	2b08      	cmp	r3, #8
 8006088:	d001      	beq.n	800608e <LL_USART_Init+0x7e>
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d125      	bne.n	80060da <LL_USART_Init+0xca>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 800608e:	6963      	ldr	r3, [r4, #20]
 8006090:	b143      	cbz	r3, 80060a4 <LL_USART_Init+0x94>
 8006092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006096:	d005      	beq.n	80060a4 <LL_USART_Init+0x94>
 8006098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609c:	d002      	beq.n	80060a4 <LL_USART_Init+0x94>
 800609e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a2:	d11f      	bne.n	80060e4 <LL_USART_Init+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80060a4:	68eb      	ldr	r3, [r5, #12]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80060a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80060aa:	d020      	beq.n	80060ee <LL_USART_Init+0xde>
  ErrorStatus status = ERROR;
 80060ac:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80060ae:	b005      	add	sp, #20
 80060b0:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 80060b2:	21db      	movs	r1, #219	; 0xdb
 80060b4:	483d      	ldr	r0, [pc, #244]	; (80061ac <LL_USART_Init+0x19c>)
 80060b6:	f7fa fe80 	bl	8000dba <assert_failed>
 80060ba:	e7c8      	b.n	800604e <LL_USART_Init+0x3e>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 80060bc:	21dc      	movs	r1, #220	; 0xdc
 80060be:	483b      	ldr	r0, [pc, #236]	; (80061ac <LL_USART_Init+0x19c>)
 80060c0:	f7fa fe7b 	bl	8000dba <assert_failed>
 80060c4:	e7c8      	b.n	8006058 <LL_USART_Init+0x48>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 80060c6:	21dd      	movs	r1, #221	; 0xdd
 80060c8:	4838      	ldr	r0, [pc, #224]	; (80061ac <LL_USART_Init+0x19c>)
 80060ca:	f7fa fe76 	bl	8000dba <assert_failed>
 80060ce:	e7ce      	b.n	800606e <LL_USART_Init+0x5e>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 80060d0:	21de      	movs	r1, #222	; 0xde
 80060d2:	4836      	ldr	r0, [pc, #216]	; (80061ac <LL_USART_Init+0x19c>)
 80060d4:	f7fa fe71 	bl	8000dba <assert_failed>
 80060d8:	e7d1      	b.n	800607e <LL_USART_Init+0x6e>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 80060da:	21df      	movs	r1, #223	; 0xdf
 80060dc:	4833      	ldr	r0, [pc, #204]	; (80061ac <LL_USART_Init+0x19c>)
 80060de:	f7fa fe6c 	bl	8000dba <assert_failed>
 80060e2:	e7d4      	b.n	800608e <LL_USART_Init+0x7e>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 80060e4:	21e0      	movs	r1, #224	; 0xe0
 80060e6:	4831      	ldr	r0, [pc, #196]	; (80061ac <LL_USART_Init+0x19c>)
 80060e8:	f7fa fe67 	bl	8000dba <assert_failed>
 80060ec:	e7da      	b.n	80060a4 <LL_USART_Init+0x94>
    MODIFY_REG(USARTx->CR1,
 80060ee:	68eb      	ldr	r3, [r5, #12]
 80060f0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060f4:	f023 030c 	bic.w	r3, r3, #12
 80060f8:	6862      	ldr	r2, [r4, #4]
 80060fa:	68e1      	ldr	r1, [r4, #12]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	6921      	ldr	r1, [r4, #16]
 8006100:	430a      	orrs	r2, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	60eb      	str	r3, [r5, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006106:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006108:	692a      	ldr	r2, [r5, #16]
 800610a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800610e:	4313      	orrs	r3, r2
 8006110:	612b      	str	r3, [r5, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006112:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006114:	696a      	ldr	r2, [r5, #20]
 8006116:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800611a:	4313      	orrs	r3, r2
 800611c:	616b      	str	r3, [r5, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800611e:	4668      	mov	r0, sp
 8006120:	f7ff f812 	bl	8005148 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <LL_USART_Init+0x198>)
 8006126:	429d      	cmp	r5, r3
 8006128:	d00d      	beq.n	8006146 <LL_USART_Init+0x136>
    else if (USARTx == USART2)
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <LL_USART_Init+0x1a4>)
 800612c:	429d      	cmp	r5, r3
 800612e:	d02f      	beq.n	8006190 <LL_USART_Init+0x180>
    else if (USARTx == USART3)
 8006130:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <LL_USART_Init+0x1a8>)
 8006132:	429d      	cmp	r5, r3
 8006134:	d02e      	beq.n	8006194 <LL_USART_Init+0x184>
    else if (USARTx == UART4)
 8006136:	4b21      	ldr	r3, [pc, #132]	; (80061bc <LL_USART_Init+0x1ac>)
 8006138:	429d      	cmp	r5, r3
 800613a:	d02d      	beq.n	8006198 <LL_USART_Init+0x188>
    else if (USARTx == UART5)
 800613c:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <LL_USART_Init+0x1b0>)
 800613e:	429d      	cmp	r5, r3
 8006140:	d02c      	beq.n	800619c <LL_USART_Init+0x18c>
  ErrorStatus status = ERROR;
 8006142:	2000      	movs	r0, #0
 8006144:	e7b3      	b.n	80060ae <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006146:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006148:	b353      	cbz	r3, 80061a0 <LL_USART_Init+0x190>
        && (USART_InitStruct->BaudRate != 0U))
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	b352      	cbz	r2, 80061a4 <LL_USART_Init+0x194>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800614e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	fbb3 f3f2 	udiv	r3, r3, r2
 800615c:	4c19      	ldr	r4, [pc, #100]	; (80061c4 <LL_USART_Init+0x1b4>)
 800615e:	fba4 2003 	umull	r2, r0, r4, r3
 8006162:	0940      	lsrs	r0, r0, #5
 8006164:	0102      	lsls	r2, r0, #4
 8006166:	b291      	uxth	r1, r2
 8006168:	2264      	movs	r2, #100	; 0x64
 800616a:	fb02 3210 	mls	r2, r2, r0, r3
 800616e:	0113      	lsls	r3, r2, #4
 8006170:	3332      	adds	r3, #50	; 0x32
 8006172:	fba4 2303 	umull	r2, r3, r4, r3
 8006176:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800617a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800617e:	440a      	add	r2, r1
 8006180:	b292      	uxth	r2, r2
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	4413      	add	r3, r2
 8006188:	b29b      	uxth	r3, r3
 800618a:	60ab      	str	r3, [r5, #8]
      status = SUCCESS;
 800618c:	2001      	movs	r0, #1
 800618e:	e78e      	b.n	80060ae <LL_USART_Init+0x9e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	e7d9      	b.n	8006148 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	e7d7      	b.n	8006148 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	e7d5      	b.n	8006148 <LL_USART_Init+0x138>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800619c:	9b02      	ldr	r3, [sp, #8]
 800619e:	e7d3      	b.n	8006148 <LL_USART_Init+0x138>
  ErrorStatus status = ERROR;
 80061a0:	2000      	movs	r0, #0
 80061a2:	e784      	b.n	80060ae <LL_USART_Init+0x9e>
 80061a4:	2000      	movs	r0, #0
 80061a6:	e782      	b.n	80060ae <LL_USART_Init+0x9e>
 80061a8:	40013800 	.word	0x40013800
 80061ac:	0800f2c0 	.word	0x0800f2c0
 80061b0:	00989680 	.word	0x00989680
 80061b4:	40004400 	.word	0x40004400
 80061b8:	40004800 	.word	0x40004800
 80061bc:	40004c00 	.word	0x40004c00
 80061c0:	40005000 	.word	0x40005000
 80061c4:	51eb851f 	.word	0x51eb851f

080061c8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061c8:	b084      	sub	sp, #16
 80061ca:	a801      	add	r0, sp, #4
 80061cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80061d0:	2000      	movs	r0, #0
 80061d2:	b004      	add	sp, #16
 80061d4:	4770      	bx	lr

080061d6 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80061d6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80061da:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80061de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80061e2:	2000      	movs	r0, #0
 80061e4:	4770      	bx	lr

080061e6 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80061e6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80061ea:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80061ee:	045b      	lsls	r3, r3, #17
 80061f0:	0c5b      	lsrs	r3, r3, #17
 80061f2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80061f6:	2000      	movs	r0, #0
 80061f8:	4770      	bx	lr

080061fa <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80061fa:	2000      	movs	r0, #0
 80061fc:	4770      	bx	lr

080061fe <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061fe:	b084      	sub	sp, #16
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	ac05      	add	r4, sp, #20
 8006204:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006208:	2301      	movs	r3, #1
 800620a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800620e:	2400      	movs	r4, #0
 8006210:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006214:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006218:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800621c:	f7ff ffdb 	bl	80061d6 <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 8006220:	4620      	mov	r0, r4
 8006222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006226:	b004      	add	sp, #16
 8006228:	4770      	bx	lr

0800622a <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800622a:	2000      	movs	r0, #0
 800622c:	4770      	bx	lr

0800622e <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800622e:	2000      	movs	r0, #0
 8006230:	4770      	bx	lr

08006232 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006232:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8006234:	78cb      	ldrb	r3, [r1, #3]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d80f      	bhi.n	800625a <USB_ActivateEndpoint+0x28>
 800623a:	e8df f003 	tbb	[pc, r3]
 800623e:	6d02      	.short	0x6d02
 8006240:	6054      	.short	0x6054
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8006242:	780a      	ldrb	r2, [r1, #0]
 8006244:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006256:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800625a:	780a      	ldrb	r2, [r1, #0]
 800625c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006264:	051b      	lsls	r3, r3, #20
 8006266:	0d1b      	lsrs	r3, r3, #20
 8006268:	4313      	orrs	r3, r2
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8006276:	7a8b      	ldrb	r3, [r1, #10]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 80af 	bne.w	80063dc <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 800627e:	784b      	ldrb	r3, [r1, #1]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d056      	beq.n	8006332 <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006284:	888a      	ldrh	r2, [r1, #4]
 8006286:	0852      	lsrs	r2, r2, #1
 8006288:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800628c:	780c      	ldrb	r4, [r1, #0]
 800628e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006292:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006296:	0052      	lsls	r2, r2, #1
 8006298:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800629c:	780a      	ldrb	r2, [r1, #0]
 800629e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062a6:	d00b      	beq.n	80062c0 <USB_ActivateEndpoint+0x8e>
 80062a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062b0:	051b      	lsls	r3, r3, #20
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80062c0:	780a      	ldrb	r2, [r1, #0]
 80062c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d0:	f083 0320 	eor.w	r3, r3, #32
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80062e0:	2000      	movs	r0, #0
 80062e2:	bc10      	pop	{r4}
 80062e4:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80062e6:	780a      	ldrb	r2, [r1, #0]
 80062e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80062fc:	e7ad      	b.n	800625a <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80062fe:	780a      	ldrb	r2, [r1, #0]
 8006300:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006312:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8006316:	e7a0      	b.n	800625a <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8006318:	780a      	ldrb	r2, [r1, #0]
 800631a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800632c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8006330:	e793      	b.n	800625a <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006332:	888a      	ldrh	r2, [r1, #4]
 8006334:	0852      	lsrs	r2, r2, #1
 8006336:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800633a:	780c      	ldrb	r4, [r1, #0]
 800633c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006340:	3304      	adds	r3, #4
 8006342:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006346:	0052      	lsls	r2, r2, #1
 8006348:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800634c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006350:	780a      	ldrb	r2, [r1, #0]
 8006352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006356:	3306      	adds	r3, #6
 8006358:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800635c:	690c      	ldr	r4, [r1, #16]
 800635e:	2c3e      	cmp	r4, #62	; 0x3e
 8006360:	d930      	bls.n	80063c4 <USB_ActivateEndpoint+0x192>
 8006362:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8006366:	f014 0f1f 	tst.w	r4, #31
 800636a:	d101      	bne.n	8006370 <USB_ActivateEndpoint+0x13e>
 800636c:	3a01      	subs	r2, #1
 800636e:	b292      	uxth	r2, r2
 8006370:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006374:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006378:	b292      	uxth	r2, r2
 800637a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800637e:	780a      	ldrb	r2, [r1, #0]
 8006380:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006384:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006388:	d00b      	beq.n	80063a2 <USB_ActivateEndpoint+0x170>
 800638a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800638e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	0d1b      	lsrs	r3, r3, #20
 8006396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a2:	780a      	ldrb	r2, [r1, #0]
 80063a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80063c2:	e78d      	b.n	80062e0 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063c4:	f3c4 024f 	ubfx	r2, r4, #1, #16
 80063c8:	f014 0f01 	tst.w	r4, #1
 80063cc:	d001      	beq.n	80063d2 <USB_ActivateEndpoint+0x1a0>
 80063ce:	3201      	adds	r2, #1
 80063d0:	b292      	uxth	r2, r2
 80063d2:	0292      	lsls	r2, r2, #10
 80063d4:	b292      	uxth	r2, r2
 80063d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80063da:	e7d0      	b.n	800637e <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80063dc:	780a      	ldrb	r2, [r1, #0]
 80063de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80063e2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80063e6:	051b      	lsls	r3, r3, #20
 80063e8:	0d1b      	lsrs	r3, r3, #20
 80063ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80063f6:	88ca      	ldrh	r2, [r1, #6]
 80063f8:	0852      	lsrs	r2, r2, #1
 80063fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80063fe:	780c      	ldrb	r4, [r1, #0]
 8006400:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006404:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006408:	0052      	lsls	r2, r2, #1
 800640a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800640e:	890a      	ldrh	r2, [r1, #8]
 8006410:	0852      	lsrs	r2, r2, #1
 8006412:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006416:	780c      	ldrb	r4, [r1, #0]
 8006418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800641c:	3304      	adds	r3, #4
 800641e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006422:	0052      	lsls	r2, r2, #1
 8006424:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 8006428:	784b      	ldrb	r3, [r1, #1]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d14b      	bne.n	80064c6 <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800642e:	780a      	ldrb	r2, [r1, #0]
 8006430:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006434:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006438:	d00b      	beq.n	8006452 <USB_ActivateEndpoint+0x220>
 800643a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800643e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006442:	051b      	lsls	r3, r3, #20
 8006444:	0d1b      	lsrs	r3, r3, #20
 8006446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006452:	780a      	ldrb	r2, [r1, #0]
 8006454:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800645c:	d00b      	beq.n	8006476 <USB_ActivateEndpoint+0x244>
 800645e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006466:	051b      	lsls	r3, r3, #20
 8006468:	0d1b      	lsrs	r3, r3, #20
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006472:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006476:	780a      	ldrb	r2, [r1, #0]
 8006478:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800647c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006480:	051b      	lsls	r3, r3, #20
 8006482:	0d1b      	lsrs	r3, r3, #20
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800648c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006490:	780a      	ldrb	r2, [r1, #0]
 8006492:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80064a4:	f248 0480 	movw	r4, #32896	; 0x8080
 80064a8:	4323      	orrs	r3, r4
 80064aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ae:	780a      	ldrb	r2, [r1, #0]
 80064b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064be:	4323      	orrs	r3, r4
 80064c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80064c4:	e70c      	b.n	80062e0 <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c6:	780a      	ldrb	r2, [r1, #0]
 80064c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80064d0:	d00b      	beq.n	80064ea <USB_ActivateEndpoint+0x2b8>
 80064d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064da:	051b      	lsls	r3, r3, #20
 80064dc:	0d1b      	lsrs	r3, r3, #20
 80064de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ea:	780a      	ldrb	r2, [r1, #0]
 80064ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064f4:	d00b      	beq.n	800650e <USB_ActivateEndpoint+0x2dc>
 80064f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fe:	051b      	lsls	r3, r3, #20
 8006500:	0d1b      	lsrs	r3, r3, #20
 8006502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800650a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800650e:	780a      	ldrb	r2, [r1, #0]
 8006510:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006518:	051b      	lsls	r3, r3, #20
 800651a:	0d1b      	lsrs	r3, r3, #20
 800651c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006524:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006528:	780b      	ldrb	r3, [r1, #0]
 800652a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800652e:	b292      	uxth	r2, r2
 8006530:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006538:	f248 0480 	movw	r4, #32896	; 0x8080
 800653c:	4322      	orrs	r2, r4
 800653e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006542:	780a      	ldrb	r2, [r1, #0]
 8006544:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	4323      	orrs	r3, r4
 8006554:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006558:	e6c2      	b.n	80062e0 <USB_ActivateEndpoint+0xae>

0800655a <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 800655a:	7a8b      	ldrb	r3, [r1, #10]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d144      	bne.n	80065ea <USB_DeactivateEndpoint+0x90>
  {
    if (ep->is_in)
 8006560:	784b      	ldrb	r3, [r1, #1]
 8006562:	b30b      	cbz	r3, 80065a8 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006564:	780a      	ldrb	r2, [r1, #0]
 8006566:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800656a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800656e:	d00b      	beq.n	8006588 <USB_DeactivateEndpoint+0x2e>
 8006570:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006578:	051b      	lsls	r3, r3, #20
 800657a:	0d1b      	lsrs	r3, r3, #20
 800657c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006584:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8006588:	780a      	ldrb	r2, [r1, #0]
 800658a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80065a4:	2000      	movs	r0, #0
 80065a6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a8:	780a      	ldrb	r2, [r1, #0]
 80065aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80065b2:	d00b      	beq.n	80065cc <USB_DeactivateEndpoint+0x72>
 80065b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	0d1b      	lsrs	r3, r3, #20
 80065c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065cc:	780a      	ldrb	r2, [r1, #0]
 80065ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80065e8:	e7dc      	b.n	80065a4 <USB_DeactivateEndpoint+0x4a>
{
 80065ea:	b410      	push	{r4}
    if (ep->is_in==0)
 80065ec:	784b      	ldrb	r3, [r1, #1]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d14b      	bne.n	800668a <USB_DeactivateEndpoint+0x130>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f2:	780a      	ldrb	r2, [r1, #0]
 80065f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065f8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80065fc:	d00b      	beq.n	8006616 <USB_DeactivateEndpoint+0xbc>
 80065fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006606:	051b      	lsls	r3, r3, #20
 8006608:	0d1b      	lsrs	r3, r3, #20
 800660a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006616:	780a      	ldrb	r2, [r1, #0]
 8006618:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800661c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006620:	d00b      	beq.n	800663a <USB_DeactivateEndpoint+0xe0>
 8006622:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	051b      	lsls	r3, r3, #20
 800662c:	0d1b      	lsrs	r3, r3, #20
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006636:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800663a:	780a      	ldrb	r2, [r1, #0]
 800663c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006644:	051b      	lsls	r3, r3, #20
 8006646:	0d1b      	lsrs	r3, r3, #20
 8006648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006650:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006654:	780b      	ldrb	r3, [r1, #0]
 8006656:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800665a:	b292      	uxth	r2, r2
 800665c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006660:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006664:	f248 0480 	movw	r4, #32896	; 0x8080
 8006668:	4322      	orrs	r2, r4
 800666a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800666e:	780a      	ldrb	r2, [r1, #0]
 8006670:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667e:	4323      	orrs	r3, r4
 8006680:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006684:	2000      	movs	r0, #0
 8006686:	bc10      	pop	{r4}
 8006688:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800668a:	780a      	ldrb	r2, [r1, #0]
 800668c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006690:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006694:	d00b      	beq.n	80066ae <USB_DeactivateEndpoint+0x154>
 8006696:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800669a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669e:	051b      	lsls	r3, r3, #20
 80066a0:	0d1b      	lsrs	r3, r3, #20
 80066a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ae:	780a      	ldrb	r2, [r1, #0]
 80066b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066b8:	d00b      	beq.n	80066d2 <USB_DeactivateEndpoint+0x178>
 80066ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	051b      	lsls	r3, r3, #20
 80066c4:	0d1b      	lsrs	r3, r3, #20
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80066d2:	780a      	ldrb	r2, [r1, #0]
 80066d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	0d1b      	lsrs	r3, r3, #20
 80066e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ec:	780b      	ldrb	r3, [r1, #0]
 80066ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80066f2:	b292      	uxth	r2, r2
 80066f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	f248 0480 	movw	r4, #32896	; 0x8080
 8006700:	4322      	orrs	r2, r4
 8006702:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006706:	780a      	ldrb	r2, [r1, #0]
 8006708:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	4323      	orrs	r3, r4
 8006718:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800671c:	e7b2      	b.n	8006684 <USB_DeactivateEndpoint+0x12a>

0800671e <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800671e:	780a      	ldrb	r2, [r1, #0]
 8006720:	b18a      	cbz	r2, 8006746 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 8006722:	784b      	ldrb	r3, [r1, #1]
 8006724:	bb13      	cbnz	r3, 800676c <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8006726:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800672a:	b29b      	uxth	r3, r3
 800672c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006734:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006744:	e010      	b.n	8006768 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8006746:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006754:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006758:	f083 0310 	eor.w	r3, r3, #16
 800675c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8006768:	2000      	movs	r0, #0
 800676a:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800676c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677a:	f083 0310 	eor.w	r3, r3, #16
 800677e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006786:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800678a:	e7ed      	b.n	8006768 <USB_EPSetStall+0x4a>

0800678c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 800678c:	784b      	ldrb	r3, [r1, #1]
 800678e:	b31b      	cbz	r3, 80067d8 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006790:	780a      	ldrb	r2, [r1, #0]
 8006792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006796:	f013 0f40 	tst.w	r3, #64	; 0x40
 800679a:	d00b      	beq.n	80067b4 <USB_EPClearStall+0x28>
 800679c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a4:	051b      	lsls	r3, r3, #20
 80067a6:	0d1b      	lsrs	r3, r3, #20
 80067a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80067b4:	780a      	ldrb	r2, [r1, #0]
 80067b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 80067d4:	2000      	movs	r0, #0
 80067d6:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d8:	780a      	ldrb	r2, [r1, #0]
 80067da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80067e2:	d00b      	beq.n	80067fc <USB_EPClearStall+0x70>
 80067e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ec:	051b      	lsls	r3, r3, #20
 80067ee:	0d1b      	lsrs	r3, r3, #20
 80067f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fc:	780a      	ldrb	r2, [r1, #0]
 80067fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800681c:	e7da      	b.n	80067d4 <USB_EPClearStall+0x48>

0800681e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800681e:	b911      	cbnz	r1, 8006826 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8006826:	2000      	movs	r0, #0
 8006828:	4770      	bx	lr

0800682a <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800682a:	2000      	movs	r0, #0
 800682c:	4770      	bx	lr

0800682e <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800682e:	2000      	movs	r0, #0
 8006830:	4770      	bx	lr

08006832 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8006832:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006836:	4770      	bx	lr

08006838 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006838:	2000      	movs	r0, #0
 800683a:	4770      	bx	lr

0800683c <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800683c:	3301      	adds	r3, #1
 800683e:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8006840:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8006848:	b163      	cbz	r3, 8006864 <USB_WritePMA+0x28>
{
 800684a:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800684c:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800684e:	7848      	ldrb	r0, [r1, #1]
 8006850:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8006854:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8006858:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 800685a:	3b01      	subs	r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f5      	bne.n	800684c <USB_WritePMA+0x10>
  }
}
 8006860:	bc10      	pop	{r4}
 8006862:	4770      	bx	lr
 8006864:	4770      	bx	lr

08006866 <USB_EPStartXfer>:
{
 8006866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8006868:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800686a:	784d      	ldrb	r5, [r1, #1]
 800686c:	2d01      	cmp	r5, #1
 800686e:	d034      	beq.n	80068da <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 8006870:	690b      	ldr	r3, [r1, #16]
 8006872:	4293      	cmp	r3, r2
 8006874:	f080 80ea 	bcs.w	8006a4c <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 800687c:	7a8a      	ldrb	r2, [r1, #10]
 800687e:	2a00      	cmp	r2, #0
 8006880:	f040 80f4 	bne.w	8006a6c <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006884:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006888:	780c      	ldrb	r4, [r1, #0]
 800688a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800688e:	3206      	adds	r2, #6
 8006890:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006894:	2b3e      	cmp	r3, #62	; 0x3e
 8006896:	f240 80dd 	bls.w	8006a54 <USB_EPStartXfer+0x1ee>
 800689a:	f3c3 144f 	ubfx	r4, r3, #5, #16
 800689e:	f013 0f1f 	tst.w	r3, #31
 80068a2:	d101      	bne.n	80068a8 <USB_EPStartXfer+0x42>
 80068a4:	3c01      	subs	r4, #1
 80068a6:	b2a4      	uxth	r4, r4
 80068a8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80068ac:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80068b0:	b2a4      	uxth	r4, r4
 80068b2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068b6:	780a      	ldrb	r2, [r1, #0]
 80068b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80068d6:	2000      	movs	r0, #0
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80068da:	690f      	ldr	r7, [r1, #16]
 80068dc:	4297      	cmp	r7, r2
 80068de:	d225      	bcs.n	800692c <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 80068e0:	1bd2      	subs	r2, r2, r7
 80068e2:	618a      	str	r2, [r1, #24]
 80068e4:	460e      	mov	r6, r1
 80068e6:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 80068e8:	7a8b      	ldrb	r3, [r1, #10]
 80068ea:	b31b      	cbz	r3, 8006934 <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80068ec:	780b      	ldrb	r3, [r1, #0]
 80068ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80068f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80068f6:	d069      	beq.n	80069cc <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	d137      	bne.n	800696c <USB_EPStartXfer+0x106>
 80068fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006904:	3306      	adds	r3, #6
 8006906:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800690a:	2f3e      	cmp	r7, #62	; 0x3e
 800690c:	d922      	bls.n	8006954 <USB_EPStartXfer+0xee>
 800690e:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8006912:	f017 0f1f 	tst.w	r7, #31
 8006916:	d101      	bne.n	800691c <USB_EPStartXfer+0xb6>
 8006918:	3a01      	subs	r2, #1
 800691a:	b292      	uxth	r2, r2
 800691c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8006920:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006924:	b292      	uxth	r2, r2
 8006926:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800692a:	e028      	b.n	800697e <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 800692c:	2300      	movs	r3, #0
 800692e:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006930:	4617      	mov	r7, r2
 8006932:	e7d7      	b.n	80068e4 <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8006934:	b2bb      	uxth	r3, r7
 8006936:	888a      	ldrh	r2, [r1, #4]
 8006938:	6949      	ldr	r1, [r1, #20]
 800693a:	f7ff ff7f 	bl	800683c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800693e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8006942:	7832      	ldrb	r2, [r6, #0]
 8006944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006948:	3302      	adds	r3, #2
 800694a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800694e:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8006952:	e02a      	b.n	80069aa <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006954:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8006958:	f017 0f01 	tst.w	r7, #1
 800695c:	d001      	beq.n	8006962 <USB_EPStartXfer+0xfc>
 800695e:	3201      	adds	r2, #1
 8006960:	b292      	uxth	r2, r2
 8006962:	0292      	lsls	r2, r2, #10
 8006964:	b292      	uxth	r2, r2
 8006966:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800696a:	e008      	b.n	800697e <USB_EPStartXfer+0x118>
 800696c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006974:	3302      	adds	r3, #2
 8006976:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800697a:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 800697e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8006980:	b2bb      	uxth	r3, r7
 8006982:	6971      	ldr	r1, [r6, #20]
 8006984:	4620      	mov	r0, r4
 8006986:	f7ff ff59 	bl	800683c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800698a:	7873      	ldrb	r3, [r6, #1]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d14d      	bne.n	8006a2c <USB_EPStartXfer+0x1c6>
 8006990:	7832      	ldrb	r2, [r6, #0]
 8006992:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699a:	051b      	lsls	r3, r3, #20
 800699c:	0d1b      	lsrs	r3, r3, #20
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069aa:	7832      	ldrb	r2, [r6, #0]
 80069ac:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ba:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80069ca:	e784      	b.n	80068d6 <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069cc:	bb1d      	cbnz	r5, 8006a16 <USB_EPStartXfer+0x1b0>
 80069ce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80069d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069d6:	3302      	adds	r3, #2
 80069d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80069dc:	2f3e      	cmp	r7, #62	; 0x3e
 80069de:	d90e      	bls.n	80069fe <USB_EPStartXfer+0x198>
 80069e0:	f3c7 124f 	ubfx	r2, r7, #5, #16
 80069e4:	f017 0f1f 	tst.w	r7, #31
 80069e8:	d101      	bne.n	80069ee <USB_EPStartXfer+0x188>
 80069ea:	3a01      	subs	r2, #1
 80069ec:	b292      	uxth	r2, r2
 80069ee:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80069f2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80069f6:	b292      	uxth	r2, r2
 80069f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80069fc:	e014      	b.n	8006a28 <USB_EPStartXfer+0x1c2>
 80069fe:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8006a02:	f017 0f01 	tst.w	r7, #1
 8006a06:	d001      	beq.n	8006a0c <USB_EPStartXfer+0x1a6>
 8006a08:	3201      	adds	r2, #1
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	0292      	lsls	r2, r2, #10
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8006a14:	e008      	b.n	8006a28 <USB_EPStartXfer+0x1c2>
 8006a16:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006a1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a1e:	3302      	adds	r3, #2
 8006a20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006a24:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8006a28:	88f2      	ldrh	r2, [r6, #6]
 8006a2a:	e7a9      	b.n	8006980 <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d1bc      	bne.n	80069aa <USB_EPStartXfer+0x144>
 8006a30:	7832      	ldrb	r2, [r6, #0]
 8006a32:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	051b      	lsls	r3, r3, #20
 8006a3c:	0d1b      	lsrs	r3, r3, #20
 8006a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006a4a:	e7ae      	b.n	80069aa <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8006a50:	4613      	mov	r3, r2
 8006a52:	e713      	b.n	800687c <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a54:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006a58:	f013 0f01 	tst.w	r3, #1
 8006a5c:	d001      	beq.n	8006a62 <USB_EPStartXfer+0x1fc>
 8006a5e:	3401      	adds	r4, #1
 8006a60:	b2a4      	uxth	r4, r4
 8006a62:	02a4      	lsls	r4, r4, #10
 8006a64:	b2a4      	uxth	r4, r4
 8006a66:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006a6a:	e724      	b.n	80068b6 <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a6c:	b9bd      	cbnz	r5, 8006a9e <USB_EPStartXfer+0x238>
 8006a6e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006a72:	780c      	ldrb	r4, [r1, #0]
 8006a74:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006a78:	3202      	adds	r2, #2
 8006a7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006a7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a80:	d928      	bls.n	8006ad4 <USB_EPStartXfer+0x26e>
 8006a82:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006a86:	f013 0f1f 	tst.w	r3, #31
 8006a8a:	d101      	bne.n	8006a90 <USB_EPStartXfer+0x22a>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	b2a4      	uxth	r4, r4
 8006a90:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006a94:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006a98:	b2a4      	uxth	r4, r4
 8006a9a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006a9e:	784a      	ldrb	r2, [r1, #1]
 8006aa0:	bb82      	cbnz	r2, 8006b04 <USB_EPStartXfer+0x29e>
 8006aa2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006aa6:	780c      	ldrb	r4, [r1, #0]
 8006aa8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006aac:	3206      	adds	r2, #6
 8006aae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab4:	d91a      	bls.n	8006aec <USB_EPStartXfer+0x286>
 8006ab6:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8006aba:	f013 0f1f 	tst.w	r3, #31
 8006abe:	d101      	bne.n	8006ac4 <USB_EPStartXfer+0x25e>
 8006ac0:	3c01      	subs	r4, #1
 8006ac2:	b2a4      	uxth	r4, r4
 8006ac4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8006ac8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8006acc:	b2a4      	uxth	r4, r4
 8006ace:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006ad2:	e6f0      	b.n	80068b6 <USB_EPStartXfer+0x50>
 8006ad4:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006ad8:	f013 0f01 	tst.w	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <USB_EPStartXfer+0x27c>
 8006ade:	3401      	adds	r4, #1
 8006ae0:	b2a4      	uxth	r4, r4
 8006ae2:	02a4      	lsls	r4, r4, #10
 8006ae4:	b2a4      	uxth	r4, r4
 8006ae6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006aea:	e7d8      	b.n	8006a9e <USB_EPStartXfer+0x238>
 8006aec:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8006af0:	f013 0f01 	tst.w	r3, #1
 8006af4:	d001      	beq.n	8006afa <USB_EPStartXfer+0x294>
 8006af6:	3401      	adds	r4, #1
 8006af8:	b2a4      	uxth	r4, r4
 8006afa:	02a4      	lsls	r4, r4, #10
 8006afc:	b2a4      	uxth	r4, r4
 8006afe:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8006b02:	e6d8      	b.n	80068b6 <USB_EPStartXfer+0x50>
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	f47f aed6 	bne.w	80068b6 <USB_EPStartXfer+0x50>
 8006b0a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006b0e:	780c      	ldrb	r4, [r1, #0]
 8006b10:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006b14:	3202      	adds	r2, #2
 8006b16:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006b1a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8006b1e:	e6ca      	b.n	80068b6 <USB_EPStartXfer+0x50>

08006b20 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8006b20:	3301      	adds	r3, #1
 8006b22:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8006b24:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8006b2c:	e004      	b.n	8006b38 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8006b2e:	6810      	ldr	r0, [r2, #0]
 8006b30:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8006b34:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8006b36:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f8      	bne.n	8006b2e <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8006b3c:	4770      	bx	lr
	...

08006b40 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <LL_Init1msTick+0x18>)
 8006b42:	fba3 3000 	umull	r3, r0, r3, r0
 8006b46:	0980      	lsrs	r0, r0, #6
 8006b48:	3801      	subs	r0, #1
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <LL_Init1msTick+0x1c>)
 8006b4c:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b52:	2205      	movs	r2, #5
 8006b54:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8006b56:	4770      	bx	lr
 8006b58:	10624dd3 	.word	0x10624dd3
 8006b5c:	e000e010 	.word	0xe000e010

08006b60 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006b60:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <LL_mDelay+0x28>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006b68:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8006b6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b6e:	d000      	beq.n	8006b72 <LL_mDelay+0x12>
  {
    Delay++;
 8006b70:	3001      	adds	r0, #1
  }

  while (Delay)
 8006b72:	b130      	cbz	r0, 8006b82 <LL_mDelay+0x22>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <LL_mDelay+0x28>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006b7c:	d0f9      	beq.n	8006b72 <LL_mDelay+0x12>
    {
      Delay--;
 8006b7e:	3801      	subs	r0, #1
 8006b80:	e7f7      	b.n	8006b72 <LL_mDelay+0x12>
    }
  }
}
 8006b82:	b002      	add	sp, #8
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	e000e010 	.word	0xe000e010

08006b8c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006b8c:	4b01      	ldr	r3, [pc, #4]	; (8006b94 <LL_SetSystemCoreClock+0x8>)
 8006b8e:	6018      	str	r0, [r3, #0]
}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000000 	.word	0x20000000

08006b98 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8006b98:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <DWT_Delay_Init+0x3c>)
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006ba0:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006ba8:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8006baa:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <DWT_Delay_Init+0x40>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8006bc0:	bf00      	nop
     __ASM volatile ("NOP");
 8006bc2:	bf00      	nop
  __ASM volatile ("NOP");
 8006bc4:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	b90b      	cbnz	r3, 8006bce <DWT_Delay_Init+0x36>
     {
       return 0; /*clock cycle counter started*/
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8006bca:	2001      	movs	r0, #1
  }
}
 8006bcc:	4770      	bx	lr
       return 0; /*clock cycle counter started*/
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	e000edf0 	.word	0xe000edf0
 8006bd8:	e0001000 	.word	0xe0001000

08006bdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006bdc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006bde:	4903      	ldr	r1, [pc, #12]	; (8006bec <MX_FATFS_Init+0x10>)
 8006be0:	4803      	ldr	r0, [pc, #12]	; (8006bf0 <MX_FATFS_Init+0x14>)
 8006be2:	f001 f9d9 	bl	8007f98 <FATFS_LinkDriver>
 8006be6:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <MX_FATFS_Init+0x18>)
 8006be8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006bea:	bd08      	pop	{r3, pc}
 8006bec:	20005c34 	.word	0x20005c34
 8006bf0:	0800f314 	.word	0x0800f314
 8006bf4:	20005c30 	.word	0x20005c30

08006bf8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006bf8:	b500      	push	{lr}
 8006bfa:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	460a      	mov	r2, r1
 8006c02:	4601      	mov	r1, r0
 8006c04:	4803      	ldr	r0, [pc, #12]	; (8006c14 <BSP_SD_ReadBlocks+0x1c>)
 8006c06:	f7fd f892 	bl	8003d2e <HAL_SD_ReadBlocks>
 8006c0a:	b100      	cbz	r0, 8006c0e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006c0c:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006c0e:	b003      	add	sp, #12
 8006c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c14:	20005b50 	.word	0x20005b50

08006c18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006c18:	b500      	push	{lr}
 8006c1a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	460a      	mov	r2, r1
 8006c22:	4601      	mov	r1, r0
 8006c24:	4803      	ldr	r0, [pc, #12]	; (8006c34 <BSP_SD_WriteBlocks+0x1c>)
 8006c26:	f7fd f98f 	bl	8003f48 <HAL_SD_WriteBlocks>
 8006c2a:	b100      	cbz	r0, 8006c2e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8006c2c:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 8006c2e:	b003      	add	sp, #12
 8006c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c34:	20005b50 	.word	0x20005b50

08006c38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006c38:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c3a:	4803      	ldr	r0, [pc, #12]	; (8006c48 <BSP_SD_GetCardState+0x10>)
 8006c3c:	f7fd fcfc 	bl	8004638 <HAL_SD_GetCardState>
}
 8006c40:	3804      	subs	r0, #4
 8006c42:	bf18      	it	ne
 8006c44:	2001      	movne	r0, #1
 8006c46:	bd08      	pop	{r3, pc}
 8006c48:	20005b50 	.word	0x20005b50

08006c4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c4c:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <BSP_SD_GetCardInfo+0xc>)
 8006c52:	f7fd fc7d 	bl	8004550 <HAL_SD_GetCardInfo>
}
 8006c56:	bd08      	pop	{r3, pc}
 8006c58:	20005b50 	.word	0x20005b50

08006c5c <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006c5c:	4770      	bx	lr

08006c5e <HAL_SD_AbortCallback>:
{
 8006c5e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006c60:	f7ff fffc 	bl	8006c5c <BSP_SD_AbortCallback>
}
 8006c64:	bd08      	pop	{r3, pc}

08006c66 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 8006c66:	4770      	bx	lr

08006c68 <HAL_SD_TxCpltCallback>:
{
 8006c68:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006c6a:	f7ff fffc 	bl	8006c66 <BSP_SD_WriteCpltCallback>
}
 8006c6e:	bd08      	pop	{r3, pc}

08006c70 <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 8006c70:	4770      	bx	lr

08006c72 <HAL_SD_RxCpltCallback>:
{
 8006c72:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006c74:	f7ff fffc 	bl	8006c70 <BSP_SD_ReadCpltCallback>
}
 8006c78:	bd08      	pop	{r3, pc}

08006c7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006c7a:	b500      	push	{lr}
 8006c7c:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006c84:	f000 f824 	bl	8006cd0 <BSP_PlatformIsDetected>
 8006c88:	b910      	cbnz	r0, 8006c90 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8006c90:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006c94:	b003      	add	sp, #12
 8006c96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006c9c <BSP_SD_Init>:
{
 8006c9c:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006c9e:	f7ff ffec 	bl	8006c7a <BSP_SD_IsDetected>
 8006ca2:	2801      	cmp	r0, #1
 8006ca4:	d002      	beq.n	8006cac <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8006ca6:	2401      	movs	r4, #1
}
 8006ca8:	4620      	mov	r0, r4
 8006caa:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8006cac:	4807      	ldr	r0, [pc, #28]	; (8006ccc <BSP_SD_Init+0x30>)
 8006cae:	f7fd fbe3 	bl	8004478 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d1f7      	bne.n	8006ca8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006cbc:	4803      	ldr	r0, [pc, #12]	; (8006ccc <BSP_SD_Init+0x30>)
 8006cbe:	f7fd fc59 	bl	8004574 <HAL_SD_ConfigWideBusOperation>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8006cc6:	2401      	movs	r4, #1
 8006cc8:	e7ee      	b.n	8006ca8 <BSP_SD_Init+0xc>
 8006cca:	bf00      	nop
 8006ccc:	20005b50 	.word	0x20005b50

08006cd0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006cd0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cd6:	4804      	ldr	r0, [pc, #16]	; (8006ce8 <BSP_PlatformIsDetected+0x18>)
 8006cd8:	f7fc f9ba 	bl	8003050 <HAL_GPIO_ReadPin>
 8006cdc:	b108      	cbz	r0, 8006ce2 <BSP_PlatformIsDetected+0x12>
    {
        status = SD_NOT_PRESENT;
 8006cde:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8006ce0:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e7fc      	b.n	8006ce0 <BSP_PlatformIsDetected+0x10>
 8006ce6:	bf00      	nop
 8006ce8:	40010800 	.word	0x40010800

08006cec <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8006cec:	2320      	movs	r3, #32
 8006cee:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8006cf0:	4800      	ldr	r0, [pc, #0]	; (8006cf4 <USBD_MSC_GetHSCfgDesc+0x8>)
 8006cf2:	4770      	bx	lr
 8006cf4:	20000060 	.word	0x20000060

08006cf8 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8006cfc:	4800      	ldr	r0, [pc, #0]	; (8006d00 <USBD_MSC_GetFSCfgDesc+0x8>)
 8006cfe:	4770      	bx	lr
 8006d00:	20000040 	.word	0x20000040

08006d04 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8006d04:	2320      	movs	r3, #32
 8006d06:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8006d08:	4800      	ldr	r0, [pc, #0]	; (8006d0c <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8006d0a:	4770      	bx	lr
 8006d0c:	2000008c 	.word	0x2000008c

08006d10 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8006d10:	230a      	movs	r3, #10
 8006d12:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8006d14:	4800      	ldr	r0, [pc, #0]	; (8006d18 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8006d16:	4770      	bx	lr
 8006d18:	20000080 	.word	0x20000080

08006d1c <USBD_MSC_Init>:
{
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006d20:	7c03      	ldrb	r3, [r0, #16]
 8006d22:	b9c3      	cbnz	r3, 8006d56 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8006d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d28:	2202      	movs	r2, #2
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	f006 fde2 	bl	800d8f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8006d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d34:	2202      	movs	r2, #2
 8006d36:	2181      	movs	r1, #129	; 0x81
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f006 fddb 	bl	800d8f4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8006d3e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006d42:	f006 fe33 	bl	800d9ac <USBD_static_malloc>
 8006d46:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8006d4a:	b180      	cbz	r0, 8006d6e <USBD_MSC_Init+0x52>
    MSC_BOT_Init(pdev); 
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f8f3 	bl	8006f38 <MSC_BOT_Init>
    ret = 0;
 8006d52:	2000      	movs	r0, #0
}
 8006d54:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8006d56:	2340      	movs	r3, #64	; 0x40
 8006d58:	2202      	movs	r2, #2
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	f006 fdca 	bl	800d8f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	2202      	movs	r2, #2
 8006d64:	2181      	movs	r1, #129	; 0x81
 8006d66:	4620      	mov	r0, r4
 8006d68:	f006 fdc4 	bl	800d8f4 <USBD_LL_OpenEP>
 8006d6c:	e7e7      	b.n	8006d3e <USBD_MSC_Init+0x22>
    ret = 1; 
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7f0      	b.n	8006d54 <USBD_MSC_Init+0x38>

08006d72 <USBD_MSC_DeInit>:
{
 8006d72:	b510      	push	{r4, lr}
 8006d74:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8006d76:	2101      	movs	r1, #1
 8006d78:	f006 fdc7 	bl	800d90a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8006d7c:	2181      	movs	r1, #129	; 0x81
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f006 fdc3 	bl	800d90a <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 f903 	bl	8006f90 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8006d8a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8006d8e:	b120      	cbz	r0, 8006d9a <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8006d90:	f006 fe10 	bl	800d9b4 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	bd10      	pop	{r4, pc}

08006d9e <USBD_MSC_Setup>:
{
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	4605      	mov	r5, r0
 8006da2:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8006da4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da8:	780b      	ldrb	r3, [r1, #0]
 8006daa:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8006dae:	d035      	beq.n	8006e1c <USBD_MSC_Setup+0x7e>
 8006db0:	2a20      	cmp	r2, #32
 8006db2:	d178      	bne.n	8006ea6 <USBD_MSC_Setup+0x108>
    switch (req->bRequest)
 8006db4:	784a      	ldrb	r2, [r1, #1]
 8006db6:	2afe      	cmp	r2, #254	; 0xfe
 8006db8:	d005      	beq.n	8006dc6 <USBD_MSC_Setup+0x28>
 8006dba:	2aff      	cmp	r2, #255	; 0xff
 8006dbc:	d01d      	beq.n	8006dfa <USBD_MSC_Setup+0x5c>
       USBD_CtlError(pdev , req);
 8006dbe:	f000 fe43 	bl	8007a48 <USBD_CtlError>
       return USBD_FAIL; 
 8006dc2:	2002      	movs	r0, #2
 8006dc4:	e070      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 8006dc6:	884a      	ldrh	r2, [r1, #2]
 8006dc8:	b98a      	cbnz	r2, 8006dee <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006dca:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006dcc:	2a01      	cmp	r2, #1
 8006dce:	d10e      	bne.n	8006dee <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8006dd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dd4:	d00b      	beq.n	8006dee <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006dd6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	4798      	blx	r3
 8006dde:	6030      	str	r0, [r6, #0]
        USBD_CtlSendData (pdev,
 8006de0:	2201      	movs	r2, #1
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	f001 f87d 	bl	8007ee4 <USBD_CtlSendData>
  return 0;
 8006dea:	2000      	movs	r0, #0
      break;
 8006dec:	e05c      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006dee:	4621      	mov	r1, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fe29 	bl	8007a48 <USBD_CtlError>
         return USBD_FAIL; 
 8006df6:	2002      	movs	r0, #2
 8006df8:	e056      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
      if((req->wValue  == 0) && 
 8006dfa:	884a      	ldrh	r2, [r1, #2]
 8006dfc:	b942      	cbnz	r2, 8006e10 <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 8006dfe:	88ca      	ldrh	r2, [r1, #6]
      if((req->wValue  == 0) && 
 8006e00:	b932      	cbnz	r2, 8006e10 <USBD_MSC_Setup+0x72>
         (req->wLength == 0) &&
 8006e02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e06:	d103      	bne.n	8006e10 <USBD_MSC_Setup+0x72>
         MSC_BOT_Reset(pdev);
 8006e08:	f000 f8b5 	bl	8006f76 <MSC_BOT_Reset>
  return 0;
 8006e0c:	2000      	movs	r0, #0
      break;
 8006e0e:	e04b      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
         USBD_CtlError(pdev , req);
 8006e10:	4621      	mov	r1, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 fe18 	bl	8007a48 <USBD_CtlError>
         return USBD_FAIL; 
 8006e18:	2002      	movs	r0, #2
 8006e1a:	e045      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
    switch (req->bRequest)
 8006e1c:	784b      	ldrb	r3, [r1, #1]
 8006e1e:	2b0a      	cmp	r3, #10
 8006e20:	d005      	beq.n	8006e2e <USBD_MSC_Setup+0x90>
 8006e22:	2b0b      	cmp	r3, #11
 8006e24:	d009      	beq.n	8006e3a <USBD_MSC_Setup+0x9c>
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00b      	beq.n	8006e42 <USBD_MSC_Setup+0xa4>
  return 0;
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e03c      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
      USBD_CtlSendData (pdev,
 8006e2e:	2201      	movs	r2, #1
 8006e30:	1d31      	adds	r1, r6, #4
 8006e32:	f001 f857 	bl	8007ee4 <USBD_CtlSendData>
  return 0;
 8006e36:	2000      	movs	r0, #0
      break;
 8006e38:	e036      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
      hmsc->interface = (uint8_t)(req->wValue);
 8006e3a:	788b      	ldrb	r3, [r1, #2]
 8006e3c:	6073      	str	r3, [r6, #4]
  return 0;
 8006e3e:	2000      	movs	r0, #0
      break;
 8006e40:	e032      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006e42:	7909      	ldrb	r1, [r1, #4]
 8006e44:	f006 fd69 	bl	800d91a <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8006e48:	7921      	ldrb	r1, [r4, #4]
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f006 fd5d 	bl	800d90a <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8006e50:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	db0e      	blt.n	8006e76 <USBD_MSC_Setup+0xd8>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006e58:	7c2b      	ldrb	r3, [r5, #16]
 8006e5a:	b9eb      	cbnz	r3, 8006e98 <USBD_MSC_Setup+0xfa>
          USBD_LL_OpenEP(pdev,
 8006e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e60:	2202      	movs	r2, #2
 8006e62:	2101      	movs	r1, #1
 8006e64:	4628      	mov	r0, r5
 8006e66:	f006 fd45 	bl	800d8f4 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006e6a:	7921      	ldrb	r1, [r4, #4]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f93a 	bl	80070e6 <MSC_BOT_CplClrFeature>
  return 0;
 8006e72:	2000      	movs	r0, #0
      break;
 8006e74:	e018      	b.n	8006ea8 <USBD_MSC_Setup+0x10a>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006e76:	7c2b      	ldrb	r3, [r5, #16]
 8006e78:	b93b      	cbnz	r3, 8006e8a <USBD_MSC_Setup+0xec>
          USBD_LL_OpenEP(pdev,
 8006e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7e:	2202      	movs	r2, #2
 8006e80:	2181      	movs	r1, #129	; 0x81
 8006e82:	4628      	mov	r0, r5
 8006e84:	f006 fd36 	bl	800d8f4 <USBD_LL_OpenEP>
 8006e88:	e7ef      	b.n	8006e6a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	2181      	movs	r1, #129	; 0x81
 8006e90:	4628      	mov	r0, r5
 8006e92:	f006 fd2f 	bl	800d8f4 <USBD_LL_OpenEP>
 8006e96:	e7e8      	b.n	8006e6a <USBD_MSC_Setup+0xcc>
          USBD_LL_OpenEP(pdev,
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f006 fd28 	bl	800d8f4 <USBD_LL_OpenEP>
 8006ea4:	e7e1      	b.n	8006e6a <USBD_MSC_Setup+0xcc>
  return 0;
 8006ea6:	2000      	movs	r0, #0
}
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}

08006eaa <USBD_MSC_DataIn>:
{
 8006eaa:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8006eac:	f000 f892 	bl	8006fd4 <MSC_BOT_DataIn>
}
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bd08      	pop	{r3, pc}

08006eb4 <USBD_MSC_DataOut>:
{
 8006eb4:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8006eb6:	f000 f8fd 	bl	80070b4 <MSC_BOT_DataOut>
}
 8006eba:	2000      	movs	r0, #0
 8006ebc:	bd08      	pop	{r3, pc}

08006ebe <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8006ebe:	b109      	cbz	r1, 8006ec4 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8006ec0:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	4770      	bx	lr

08006ec8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006ecc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8006ed0:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8006ed4:	b923      	cbnz	r3, 8006ee0 <MSC_BOT_Abort+0x18>
      (hmsc->cbw.dDataLength != 0) &&
 8006ed6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0) && 
 8006eda:	b10b      	cbz	r3, 8006ee0 <MSC_BOT_Abort+0x18>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 8006edc:	7a63      	ldrb	r3, [r4, #9]
      (hmsc->cbw.dDataLength != 0) &&
 8006ede:	b13b      	cbz	r3, 8006ef0 <MSC_BOT_Abort+0x28>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ee0:	2181      	movs	r1, #129	; 0x81
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f006 fd21 	bl	800d92a <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006ee8:	7a63      	ldrb	r3, [r4, #9]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d004      	beq.n	8006ef8 <MSC_BOT_Abort+0x30>
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	f006 fd1a 	bl	800d92a <USBD_LL_StallEP>
 8006ef6:	e7f3      	b.n	8006ee0 <MSC_BOT_Abort+0x18>
    USBD_LL_PrepareReceive (pdev,
 8006ef8:	231f      	movs	r3, #31
 8006efa:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006efe:	2101      	movs	r1, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	f006 fd45 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8006f06:	e7f2      	b.n	8006eee <MSC_BOT_Abort+0x26>

08006f08 <MSC_BOT_SendData>:
{
 8006f08:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006f0a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8006f0e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006f12:	4293      	cmp	r3, r2
 8006f14:	bf28      	it	cs
 8006f16:	4613      	movcs	r3, r2
 8006f18:	b29b      	uxth	r3, r3
  hmsc->csw.dDataResidue -= len;
 8006f1a:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	f8c4 2234 	str.w	r2, [r4, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006f24:	2200      	movs	r2, #0
 8006f26:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	7222      	strb	r2, [r4, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8006f2e:	460a      	mov	r2, r1
 8006f30:	2181      	movs	r1, #129	; 0x81
 8006f32:	f006 fd25 	bl	800d980 <USBD_LL_Transmit>
}
 8006f36:	bd10      	pop	{r4, pc}

08006f38 <MSC_BOT_Init>:
{
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f3c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f40:	2000      	movs	r0, #0
 8006f42:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006f44:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8006f46:	f885 025d 	strb.w	r0, [r5, #605]	; 0x25d
  hmsc->scsi_sense_head = 0;
 8006f4a:	f885 025c 	strb.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8006f4e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006f56:	2101      	movs	r1, #1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f006 fcde 	bl	800d91a <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006f5e:	2181      	movs	r1, #129	; 0x81
 8006f60:	4620      	mov	r0, r4
 8006f62:	f006 fcda 	bl	800d91a <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8006f66:	231f      	movs	r3, #31
 8006f68:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f006 fd0e 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8006f74:	bd38      	pop	{r3, r4, r5, pc}

08006f76 <MSC_BOT_Reset>:
{
 8006f76:	b508      	push	{r3, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8006f78:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8006f80:	2101      	movs	r1, #1
 8006f82:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8006f84:	231f      	movs	r3, #31
 8006f86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f8a:	f006 fd01 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8006f8e:	bd08      	pop	{r3, pc}

08006f90 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006f90:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f94:	2200      	movs	r2, #0
 8006f96:	721a      	strb	r2, [r3, #8]
}
 8006f98:	4770      	bx	lr
	...

08006f9c <MSC_BOT_SendCSW>:
{
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8006fa0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <MSC_BOT_SendCSW+0x34>)
 8006fa6:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006faa:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8006fb2:	230d      	movs	r3, #13
 8006fb4:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 8006fb8:	2181      	movs	r1, #129	; 0x81
 8006fba:	f006 fce1 	bl	800d980 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8006fbe:	231f      	movs	r3, #31
 8006fc0:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f006 fce2 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	53425355 	.word	0x53425355

08006fd4 <MSC_BOT_DataIn>:
{
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8006fd8:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8006fdc:	7a0b      	ldrb	r3, [r1, #8]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d006      	beq.n	8006ff0 <MSC_BOT_DataIn+0x1c>
 8006fe2:	d304      	bcc.n	8006fee <MSC_BOT_DataIn+0x1a>
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d802      	bhi.n	8006fee <MSC_BOT_DataIn+0x1a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8006fe8:	2100      	movs	r1, #0
 8006fea:	f7ff ffd7 	bl	8006f9c <MSC_BOT_SendCSW>
}
 8006fee:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8006ff0:	f201 221b 	addw	r2, r1, #539	; 0x21b
 8006ff4:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 8006ff8:	f000 fb69 	bl	80076ce <SCSI_ProcessCmd>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	daf6      	bge.n	8006fee <MSC_BOT_DataIn+0x1a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007000:	2101      	movs	r1, #1
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff ffca 	bl	8006f9c <MSC_BOT_SendCSW>
 8007008:	e7f1      	b.n	8006fee <MSC_BOT_DataIn+0x1a>
	...

0800700c <MSC_BOT_CBW_Decode>:
{
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4605      	mov	r5, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007010:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007014:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007018:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800701c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007020:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007024:	2101      	movs	r1, #1
 8007026:	f006 fcbb 	bl	800d9a0 <USBD_LL_GetRxDataSize>
 800702a:	281f      	cmp	r0, #31
 800702c:	d104      	bne.n	8007038 <MSC_BOT_CBW_Decode+0x2c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800702e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007032:	4b1f      	ldr	r3, [pc, #124]	; (80070b0 <MSC_BOT_CBW_Decode+0xa4>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d00c      	beq.n	8007052 <MSC_BOT_CBW_Decode+0x46>
    SCSI_SenseCode(pdev,
 8007038:	2320      	movs	r3, #32
 800703a:	2205      	movs	r2, #5
 800703c:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8007040:	4628      	mov	r0, r5
 8007042:	f000 f8e9 	bl	8007218 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8007046:	2302      	movs	r3, #2
 8007048:	7263      	strb	r3, [r4, #9]
    MSC_BOT_Abort(pdev);
 800704a:	4628      	mov	r0, r5
 800704c:	f7ff ff3c 	bl	8006ec8 <MSC_BOT_Abort>
}
 8007050:	bd38      	pop	{r3, r4, r5, pc}
        (hmsc->cbw.bLUN > 1) || 
 8007052:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007056:	2901      	cmp	r1, #1
 8007058:	d8ee      	bhi.n	8007038 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 800705a:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1) || 
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0ea      	beq.n	8007038 <MSC_BOT_CBW_Decode+0x2c>
          (hmsc->cbw.bCBLength < 1) || 
 8007062:	2b10      	cmp	r3, #16
 8007064:	d8e8      	bhi.n	8007038 <MSC_BOT_CBW_Decode+0x2c>
    if(SCSI_ProcessCmd(pdev,
 8007066:	f204 221b 	addw	r2, r4, #539	; 0x21b
 800706a:	4628      	mov	r0, r5
 800706c:	f000 fb2f 	bl	80076ce <SCSI_ProcessCmd>
 8007070:	2800      	cmp	r0, #0
 8007072:	db0b      	blt.n	800708c <MSC_BOT_CBW_Decode+0x80>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8007074:	7a23      	ldrb	r3, [r4, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007076:	3b01      	subs	r3, #1
 8007078:	b2db      	uxtb	r3, r3
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800707a:	2b02      	cmp	r3, #2
 800707c:	d9e8      	bls.n	8007050 <MSC_BOT_CBW_Decode+0x44>
      if (hmsc->bot_data_length > 0)
 800707e:	8962      	ldrh	r2, [r4, #10]
 8007080:	b982      	cbnz	r2, 80070a4 <MSC_BOT_CBW_Decode+0x98>
        MSC_BOT_SendCSW (pdev,
 8007082:	2100      	movs	r1, #0
 8007084:	4628      	mov	r0, r5
 8007086:	f7ff ff89 	bl	8006f9c <MSC_BOT_SendCSW>
}
 800708a:	e7e1      	b.n	8007050 <MSC_BOT_CBW_Decode+0x44>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800708c:	7a23      	ldrb	r3, [r4, #8]
 800708e:	2b05      	cmp	r3, #5
 8007090:	d003      	beq.n	800709a <MSC_BOT_CBW_Decode+0x8e>
        MSC_BOT_Abort(pdev);
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff ff18 	bl	8006ec8 <MSC_BOT_Abort>
 8007098:	e7da      	b.n	8007050 <MSC_BOT_CBW_Decode+0x44>
       MSC_BOT_SendCSW (pdev,
 800709a:	2101      	movs	r1, #1
 800709c:	4628      	mov	r0, r5
 800709e:	f7ff ff7d 	bl	8006f9c <MSC_BOT_SendCSW>
 80070a2:	e7d5      	b.n	8007050 <MSC_BOT_CBW_Decode+0x44>
        MSC_BOT_SendData(pdev,
 80070a4:	f104 010c 	add.w	r1, r4, #12
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff ff2d 	bl	8006f08 <MSC_BOT_SendData>
 80070ae:	e7cf      	b.n	8007050 <MSC_BOT_CBW_Decode+0x44>
 80070b0:	43425355 	.word	0x43425355

080070b4 <MSC_BOT_DataOut>:
{
 80070b4:	b510      	push	{r4, lr}
 80070b6:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80070b8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 80070bc:	7a1a      	ldrb	r2, [r3, #8]
 80070be:	b112      	cbz	r2, 80070c6 <MSC_BOT_DataOut+0x12>
 80070c0:	2a01      	cmp	r2, #1
 80070c2:	d003      	beq.n	80070cc <MSC_BOT_DataOut+0x18>
}
 80070c4:	bd10      	pop	{r4, pc}
    MSC_BOT_CBW_Decode(pdev);
 80070c6:	f7ff ffa1 	bl	800700c <MSC_BOT_CBW_Decode>
    break;
 80070ca:	e7fb      	b.n	80070c4 <MSC_BOT_DataOut+0x10>
    if(SCSI_ProcessCmd(pdev,
 80070cc:	f203 221b 	addw	r2, r3, #539	; 0x21b
 80070d0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070d4:	f000 fafb 	bl	80076ce <SCSI_ProcessCmd>
 80070d8:	2800      	cmp	r0, #0
 80070da:	daf3      	bge.n	80070c4 <MSC_BOT_DataOut+0x10>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80070dc:	2101      	movs	r1, #1
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ff5c 	bl	8006f9c <MSC_BOT_SendCSW>
}
 80070e4:	e7ee      	b.n	80070c4 <MSC_BOT_DataOut+0x10>

080070e6 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80070e6:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80070e8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 80070ec:	7a63      	ldrb	r3, [r4, #9]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d003      	beq.n	80070fa <MSC_BOT_CplClrFeature+0x14>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80070f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80070f6:	d106      	bne.n	8007106 <MSC_BOT_CplClrFeature+0x20>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 80070f8:	bd10      	pop	{r4, pc}
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80070fa:	2181      	movs	r1, #129	; 0x81
 80070fc:	f006 fc15 	bl	800d92a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8007100:	2300      	movs	r3, #0
 8007102:	7263      	strb	r3, [r4, #9]
 8007104:	e7f8      	b.n	80070f8 <MSC_BOT_CplClrFeature+0x12>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007106:	2b01      	cmp	r3, #1
 8007108:	d0f6      	beq.n	80070f8 <MSC_BOT_CplClrFeature+0x12>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800710a:	2101      	movs	r1, #1
 800710c:	f7ff ff46 	bl	8006f9c <MSC_BOT_SendCSW>
}
 8007110:	e7f2      	b.n	80070f8 <MSC_BOT_CplClrFeature+0x12>
	...

08007114 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007114:	b410      	push	{r4}
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007116:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if (params[1] & 0x01)/*Evpd is set*/
 800711a:	7853      	ldrb	r3, [r2, #1]
 800711c:	f013 0f01 	tst.w	r3, #1
 8007120:	d10d      	bne.n	800713e <SCSI_Inquiry+0x2a>
    len = LENGTH_INQUIRY_PAGE00;
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007122:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007126:	69d8      	ldr	r0, [r3, #28]
 8007128:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800712c:	008b      	lsls	r3, r1, #2
 800712e:	4418      	add	r0, r3
    len = pPage[4] + 5;
 8007130:	7901      	ldrb	r1, [r0, #4]
 8007132:	3105      	adds	r1, #5
    
    if (params[4] <= len)
 8007134:	7913      	ldrb	r3, [r2, #4]
 8007136:	428b      	cmp	r3, r1
 8007138:	d903      	bls.n	8007142 <SCSI_Inquiry+0x2e>
    len = pPage[4] + 5;
 800713a:	460b      	mov	r3, r1
 800713c:	e001      	b.n	8007142 <SCSI_Inquiry+0x2e>
    len = LENGTH_INQUIRY_PAGE00;
 800713e:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8007140:	4806      	ldr	r0, [pc, #24]	; (800715c <SCSI_Inquiry+0x48>)
    {
      len = params[4];
    }
  }
  hmsc->bot_data_length = len;
 8007142:	8163      	strh	r3, [r4, #10]
  
  while (len) 
 8007144:	e004      	b.n	8007150 <SCSI_Inquiry+0x3c>
  {
    len--;
 8007146:	3b01      	subs	r3, #1
 8007148:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 800714a:	5cc1      	ldrb	r1, [r0, r3]
 800714c:	18e2      	adds	r2, r4, r3
 800714e:	7311      	strb	r1, [r2, #12]
  while (len) 
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f8      	bne.n	8007146 <SCSI_Inquiry+0x32>
  }
  return 0;
}
 8007154:	2000      	movs	r0, #0
 8007156:	bc10      	pop	{r4}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	0800f30c 	.word	0x0800f30c

08007160 <SCSI_ModeSense6>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007160:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  uint16_t len = 8 ;
  hmsc->bot_data_length = len;
 8007164:	2308      	movs	r3, #8
 8007166:	8143      	strh	r3, [r0, #10]
  
  while (len) 
 8007168:	e005      	b.n	8007176 <SCSI_ModeSense6+0x16>
  {
    len--;
 800716a:	3b01      	subs	r3, #1
 800716c:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800716e:	4a04      	ldr	r2, [pc, #16]	; (8007180 <SCSI_ModeSense6+0x20>)
 8007170:	5cd1      	ldrb	r1, [r2, r3]
 8007172:	18c2      	adds	r2, r0, r3
 8007174:	7311      	strb	r1, [r2, #12]
  while (len) 
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f7      	bne.n	800716a <SCSI_ModeSense6+0xa>
  }
  return 0;
}
 800717a:	2000      	movs	r0, #0
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	0800f304 	.word	0x0800f304

08007184 <SCSI_ModeSense10>:
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  uint16_t len = 8;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007184:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->bot_data_length = len;
 8007188:	2308      	movs	r3, #8
 800718a:	8143      	strh	r3, [r0, #10]

  while (len) 
 800718c:	e005      	b.n	800719a <SCSI_ModeSense10+0x16>
  {
    len--;
 800718e:	3b01      	subs	r3, #1
 8007190:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <SCSI_ModeSense10+0x20>)
 8007194:	5cd1      	ldrb	r1, [r2, r3]
 8007196:	18c2      	adds	r2, r0, r3
 8007198:	7311      	strb	r1, [r2, #12]
  while (len) 
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f7      	bne.n	800718e <SCSI_ModeSense10+0xa>
  }
  return 0;
}
 800719e:	2000      	movs	r0, #0
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	0800f2fc 	.word	0x0800f2fc

080071a8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80071a8:	b410      	push	{r4}
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80071aa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80071ae:	2300      	movs	r3, #0
 80071b0:	e004      	b.n	80071bc <SCSI_RequestSense+0x14>
  {
    hmsc->bot_data[i] = 0;
 80071b2:	18e1      	adds	r1, r4, r3
 80071b4:	2000      	movs	r0, #0
 80071b6:	7308      	strb	r0, [r1, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80071b8:	3301      	adds	r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b11      	cmp	r3, #17
 80071be:	d9f8      	bls.n	80071b2 <SCSI_RequestSense+0xa>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 80071c0:	2370      	movs	r3, #112	; 0x70
 80071c2:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80071c4:	230c      	movs	r3, #12
 80071c6:	74e3      	strb	r3, [r4, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80071c8:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 80071cc:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 80071d0:	428b      	cmp	r3, r1
 80071d2:	d00f      	beq.n	80071f4 <SCSI_RequestSense+0x4c>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80071d4:	f103 0147 	add.w	r1, r3, #71	; 0x47
 80071d8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80071dc:	7908      	ldrb	r0, [r1, #4]
 80071de:	73a0      	strb	r0, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80071e0:	7a48      	ldrb	r0, [r1, #9]
 80071e2:	7620      	strb	r0, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80071e4:	7a09      	ldrb	r1, [r1, #8]
 80071e6:	7661      	strb	r1, [r4, #25]
    hmsc->scsi_sense_head++;
 80071e8:	3301      	adds	r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d008      	beq.n	8007206 <SCSI_RequestSense+0x5e>
    {
      hmsc->scsi_sense_head = 0;
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80071f4:	2312      	movs	r3, #18
 80071f6:	8163      	strh	r3, [r4, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80071f8:	7913      	ldrb	r3, [r2, #4]
 80071fa:	2b12      	cmp	r3, #18
 80071fc:	d800      	bhi.n	8007200 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data_length = params[4];
 80071fe:	8163      	strh	r3, [r4, #10]
  }
  return 0;
}
 8007200:	2000      	movs	r0, #0
 8007202:	bc10      	pop	{r4}
 8007204:	4770      	bx	lr
      hmsc->scsi_sense_head = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
 800720c:	e7f2      	b.n	80071f4 <SCSI_RequestSense+0x4c>

0800720e <SCSI_StartStopUnit>:
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 800720e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hmsc->bot_data_length = 0;
 8007212:	2000      	movs	r0, #0
 8007214:	8158      	strh	r0, [r3, #10]
  return 0;
}
 8007216:	4770      	bx	lr

08007218 <SCSI_SenseCode>:
{
 8007218:	b410      	push	{r4}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800721a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800721e:	f894 125d 	ldrb.w	r1, [r4, #605]	; 0x25d
 8007222:	f101 0047 	add.w	r0, r1, #71	; 0x47
 8007226:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800722a:	7102      	strb	r2, [r0, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	6083      	str	r3, [r0, #8]
  hmsc->scsi_sense_tail++;
 8007230:	3101      	adds	r1, #1
 8007232:	b2c9      	uxtb	r1, r1
 8007234:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007238:	2904      	cmp	r1, #4
 800723a:	d001      	beq.n	8007240 <SCSI_SenseCode+0x28>
}
 800723c:	bc10      	pop	{r4}
 800723e:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
}
 8007246:	e7f9      	b.n	800723c <SCSI_SenseCode+0x24>

08007248 <SCSI_TestUnitReady>:
{
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800724c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8007250:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007254:	b95b      	cbnz	r3, 800726e <SCSI_TestUnitReady+0x26>
 8007256:	460e      	mov	r6, r1
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007258:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	4608      	mov	r0, r1
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	b960      	cbnz	r0, 8007280 <SCSI_TestUnitReady+0x38>
  hmsc->bot_data_length = 0;
 8007266:	2200      	movs	r2, #0
 8007268:	816a      	strh	r2, [r5, #10]
}
 800726a:	4618      	mov	r0, r3
 800726c:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 800726e:	2320      	movs	r3, #32
 8007270:	2205      	movs	r2, #5
 8007272:	f895 1219 	ldrb.w	r1, [r5, #537]	; 0x219
 8007276:	f7ff ffcf 	bl	8007218 <SCSI_SenseCode>
    return -1;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	e7f4      	b.n	800726a <SCSI_TestUnitReady+0x22>
    SCSI_SenseCode(pdev,
 8007280:	233a      	movs	r3, #58	; 0x3a
 8007282:	2202      	movs	r2, #2
 8007284:	4631      	mov	r1, r6
 8007286:	4620      	mov	r0, r4
 8007288:	f7ff ffc6 	bl	8007218 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800728c:	2305      	movs	r3, #5
 800728e:	722b      	strb	r3, [r5, #8]
    return -1;
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	e7e9      	b.n	800726a <SCSI_TestUnitReady+0x22>

08007296 <SCSI_ReadFormatCapacity>:
{
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	4605      	mov	r5, r0
 800729c:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800729e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  for(i=0 ; i < 12 ; i++) 
 80072a2:	2300      	movs	r3, #0
 80072a4:	e004      	b.n	80072b0 <SCSI_ReadFormatCapacity+0x1a>
    hmsc->bot_data[i] = 0;
 80072a6:	18e2      	adds	r2, r4, r3
 80072a8:	2100      	movs	r1, #0
 80072aa:	7311      	strb	r1, [r2, #12]
  for(i=0 ; i < 12 ; i++) 
 80072ac:	3301      	adds	r3, #1
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b0b      	cmp	r3, #11
 80072b2:	d9f8      	bls.n	80072a6 <SCSI_ReadFormatCapacity+0x10>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80072b4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f10d 0206 	add.w	r2, sp, #6
 80072be:	4669      	mov	r1, sp
 80072c0:	4630      	mov	r0, r6
 80072c2:	4798      	blx	r3
 80072c4:	4601      	mov	r1, r0
 80072c6:	b9d8      	cbnz	r0, 8007300 <SCSI_ReadFormatCapacity+0x6a>
    hmsc->bot_data[3] = 0x08;
 80072c8:	2308      	movs	r3, #8
 80072ca:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80072cc:	9a00      	ldr	r2, [sp, #0]
 80072ce:	1e53      	subs	r3, r2, #1
 80072d0:	0e18      	lsrs	r0, r3, #24
 80072d2:	7420      	strb	r0, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 80072d4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80072d8:	7460      	strb	r0, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 80072da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80072de:	74a3      	strb	r3, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 80072e0:	3a01      	subs	r2, #1
 80072e2:	74e2      	strb	r2, [r4, #19]
    hmsc->bot_data[8] = 0x02;
 80072e4:	2302      	movs	r3, #2
 80072e6:	7523      	strb	r3, [r4, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80072e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80072ec:	2200      	movs	r2, #0
 80072ee:	7562      	strb	r2, [r4, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80072f0:	0a1a      	lsrs	r2, r3, #8
 80072f2:	75a2      	strb	r2, [r4, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80072f4:	75e3      	strb	r3, [r4, #23]
    hmsc->bot_data_length = 12;
 80072f6:	230c      	movs	r3, #12
 80072f8:	8163      	strh	r3, [r4, #10]
}
 80072fa:	4608      	mov	r0, r1
 80072fc:	b002      	add	sp, #8
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8007300:	233a      	movs	r3, #58	; 0x3a
 8007302:	2202      	movs	r2, #2
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	f7ff ff86 	bl	8007218 <SCSI_SenseCode>
    return -1;
 800730c:	f04f 31ff 	mov.w	r1, #4294967295
 8007310:	e7f3      	b.n	80072fa <SCSI_ReadFormatCapacity+0x64>

08007312 <SCSI_ReadCapacity10>:
{
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	4605      	mov	r5, r0
 8007316:	460e      	mov	r6, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007318:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800731c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f204 225e 	addw	r2, r4, #606	; 0x25e
 8007326:	f504 7118 	add.w	r1, r4, #608	; 0x260
 800732a:	4630      	mov	r0, r6
 800732c:	4798      	blx	r3
 800732e:	b9c8      	cbnz	r0, 8007364 <SCSI_ReadCapacity10+0x52>
 8007330:	4601      	mov	r1, r0
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8007332:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 8007336:	1e53      	subs	r3, r2, #1
 8007338:	0e18      	lsrs	r0, r3, #24
 800733a:	7320      	strb	r0, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 800733c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8007340:	7360      	strb	r0, [r4, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8007342:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007346:	73a3      	strb	r3, [r4, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8007348:	3a01      	subs	r2, #1
 800734a:	73e2      	strb	r2, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800734c:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 8007350:	2200      	movs	r2, #0
 8007352:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007354:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007356:	0a1a      	lsrs	r2, r3, #8
 8007358:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800735a:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data_length = 8;
 800735c:	2308      	movs	r3, #8
 800735e:	8163      	strh	r3, [r4, #10]
}
 8007360:	4608      	mov	r0, r1
 8007362:	bd70      	pop	{r4, r5, r6, pc}
    SCSI_SenseCode(pdev,
 8007364:	233a      	movs	r3, #58	; 0x3a
 8007366:	2202      	movs	r2, #2
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	f7ff ff54 	bl	8007218 <SCSI_SenseCode>
    return -1;
 8007370:	f04f 31ff 	mov.w	r1, #4294967295
 8007374:	e7f4      	b.n	8007360 <SCSI_ReadCapacity10+0x4e>

08007376 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8007376:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007378:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800737c:	4413      	add	r3, r2
 800737e:	f8d4 4260 	ldr.w	r4, [r4, #608]	; 0x260
 8007382:	42a3      	cmp	r3, r4
 8007384:	d801      	bhi.n	800738a <SCSI_CheckAddressRange+0x14>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
  }
  return 0;
 8007386:	2000      	movs	r0, #0
}
 8007388:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev,
 800738a:	2321      	movs	r3, #33	; 0x21
 800738c:	2205      	movs	r2, #5
 800738e:	f7ff ff43 	bl	8007218 <SCSI_SenseCode>
    return -1;
 8007392:	f04f 30ff 	mov.w	r0, #4294967295
 8007396:	e7f7      	b.n	8007388 <SCSI_CheckAddressRange+0x12>

08007398 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4606      	mov	r6, r0
 800739e:	4688      	mov	r8, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 80073a0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80073a4:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 80073a8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80073ac:	bf28      	it	cs
 80073ae:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80073b2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80073b6:	f8d3 9010 	ldr.w	r9, [r3, #16]
                              hmsc->bot_data, 
 80073ba:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80073be:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 80073c2:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 80073c6:	fbb5 f3f2 	udiv	r3, r5, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80073d0:	4639      	mov	r1, r7
 80073d2:	4640      	mov	r0, r8
 80073d4:	47c8      	blx	r9
 80073d6:	2800      	cmp	r0, #0
 80073d8:	db1a      	blt.n	8007410 <SCSI_ProcessRead+0x78>
                   UNRECOVERED_READ_ERROR);
    return -1; 
  }
  
  
  USBD_LL_Transmit (pdev, 
 80073da:	b2ab      	uxth	r3, r5
 80073dc:	463a      	mov	r2, r7
 80073de:	2181      	movs	r1, #129	; 0x81
 80073e0:	4630      	mov	r0, r6
 80073e2:	f006 facd 	bl	800d980 <USBD_LL_Transmit>
             MSC_EPIN_ADDR,
             hmsc->bot_data,
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 80073e6:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 80073ea:	442b      	add	r3, r5
 80073ec:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 80073f0:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 80073f4:	1b5b      	subs	r3, r3, r5
 80073f6:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80073fa:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 80073fe:	1b55      	subs	r5, r2, r5
 8007400:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8007404:	b96b      	cbnz	r3, 8007422 <SCSI_ProcessRead+0x8a>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007406:	2303      	movs	r3, #3
 8007408:	7223      	strb	r3, [r4, #8]
  }
  return 0;
 800740a:	2000      	movs	r0, #0
}
 800740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8007410:	2311      	movs	r3, #17
 8007412:	2204      	movs	r2, #4
 8007414:	4641      	mov	r1, r8
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff fefe 	bl	8007218 <SCSI_SenseCode>
    return -1; 
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	e7f4      	b.n	800740c <SCSI_ProcessRead+0x74>
  return 0;
 8007422:	2000      	movs	r0, #0
 8007424:	e7f2      	b.n	800740c <SCSI_ProcessRead+0x74>

08007426 <SCSI_Read10>:
{
 8007426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007428:	4606      	mov	r6, r0
 800742a:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800742c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8007430:	7a23      	ldrb	r3, [r4, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d137      	bne.n	80074a6 <SCSI_Read10+0x80>
 8007436:	4615      	mov	r5, r2
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8007438:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 800743c:	2b00      	cmp	r3, #0
 800743e:	da3a      	bge.n	80074b6 <SCSI_Read10+0x90>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007440:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	4608      	mov	r0, r1
 8007448:	4798      	blx	r3
 800744a:	2800      	cmp	r0, #0
 800744c:	d13c      	bne.n	80074c8 <SCSI_Read10+0xa2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800744e:	78ab      	ldrb	r3, [r5, #2]
      (params[3] << 16) | \
 8007450:	78ea      	ldrb	r2, [r5, #3]
 8007452:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007454:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 8007458:	792b      	ldrb	r3, [r5, #4]
      (params[3] << 16) | \
 800745a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 800745e:	796b      	ldrb	r3, [r5, #5]
        (params[4] <<  8) | \
 8007460:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8007462:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8007466:	79e9      	ldrb	r1, [r5, #7]
      params[8];  
 8007468:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800746a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800746e:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8007472:	4639      	mov	r1, r7
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff ff7e 	bl	8007376 <SCSI_CheckAddressRange>
 800747a:	2800      	cmp	r0, #0
 800747c:	db37      	blt.n	80074ee <SCSI_Read10+0xc8>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800747e:	2302      	movs	r3, #2
 8007480:	7223      	strb	r3, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8007482:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8007486:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 800748a:	fb01 f202 	mul.w	r2, r1, r2
 800748e:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8007492:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8007496:	fb03 f301 	mul.w	r3, r3, r1
 800749a:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800749e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d119      	bne.n	80074da <SCSI_Read10+0xb4>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 80074a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074aa:	8163      	strh	r3, [r4, #10]
  return SCSI_ProcessRead(pdev, lun);
 80074ac:	4639      	mov	r1, r7
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ff72 	bl	8007398 <SCSI_ProcessRead>
}
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SCSI_SenseCode(pdev,
 80074b6:	2320      	movs	r3, #32
 80074b8:	2205      	movs	r2, #5
 80074ba:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80074be:	f7ff feab 	bl	8007218 <SCSI_SenseCode>
      return -1;
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	e7f5      	b.n	80074b4 <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 80074c8:	233a      	movs	r3, #58	; 0x3a
 80074ca:	2202      	movs	r2, #2
 80074cc:	4639      	mov	r1, r7
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff fea2 	bl	8007218 <SCSI_SenseCode>
      return -1;
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e7ec      	b.n	80074b4 <SCSI_Read10+0x8e>
      SCSI_SenseCode(pdev,
 80074da:	2320      	movs	r3, #32
 80074dc:	2205      	movs	r2, #5
 80074de:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff fe98 	bl	8007218 <SCSI_SenseCode>
      return -1;
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e7e2      	b.n	80074b4 <SCSI_Read10+0x8e>
      return -1; /* error */
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e7df      	b.n	80074b4 <SCSI_Read10+0x8e>

080074f4 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	4606      	mov	r6, r0
 80074fa:	4688      	mov	r8, r1
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80074fc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8007500:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
 8007504:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007508:	bf28      	it	cs
 800750a:	f44f 7500 	movcs.w	r5, #512	; 0x200
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800750e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007512:	f8d3 9014 	ldr.w	r9, [r3, #20]
                              hmsc->bot_data, 
 8007516:	f104 070c 	add.w	r7, r4, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800751a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 800751e:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
                              len / hmsc->scsi_blk_size) < 0)
 8007522:	fbb5 f3f2 	udiv	r3, r5, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8007526:	b29b      	uxth	r3, r3
 8007528:	fbb1 f2f2 	udiv	r2, r1, r2
 800752c:	4639      	mov	r1, r7
 800752e:	4640      	mov	r0, r8
 8007530:	47c8      	blx	r9
 8007532:	2800      	cmp	r0, #0
 8007534:	db1d      	blt.n	8007572 <SCSI_ProcessWrite+0x7e>
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8007536:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 800753a:	442b      	add	r3, r5
 800753c:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8007540:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 8007544:	1b5b      	subs	r3, r3, r5
 8007546:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800754a:	f8d4 2234 	ldr.w	r2, [r4, #564]	; 0x234
 800754e:	1b55      	subs	r5, r2, r5
 8007550:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8007554:	b1b3      	cbz	r3, 8007584 <SCSI_ProcessWrite+0x90>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8007556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755a:	bf28      	it	cs
 800755c:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8007560:	b29b      	uxth	r3, r3
 8007562:	463a      	mov	r2, r7
 8007564:	2101      	movs	r1, #1
 8007566:	4630      	mov	r0, r6
 8007568:	f006 fa12 	bl	800d990 <USBD_LL_PrepareReceive>
  }
  
  return 0;
 800756c:	2000      	movs	r0, #0
}
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev,
 8007572:	2303      	movs	r3, #3
 8007574:	2204      	movs	r2, #4
 8007576:	4641      	mov	r1, r8
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fe4d 	bl	8007218 <SCSI_SenseCode>
    return -1; 
 800757e:	f04f 30ff 	mov.w	r0, #4294967295
 8007582:	e7f4      	b.n	800756e <SCSI_ProcessWrite+0x7a>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007584:	2100      	movs	r1, #0
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff fd08 	bl	8006f9c <MSC_BOT_SendCSW>
  return 0;
 800758c:	2000      	movs	r0, #0
 800758e:	e7ee      	b.n	800756e <SCSI_ProcessWrite+0x7a>

08007590 <SCSI_Write10>:
{
 8007590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4605      	mov	r5, r0
 8007596:	460f      	mov	r7, r1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007598:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800759c:	7a23      	ldrb	r3, [r4, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d172      	bne.n	8007688 <SCSI_Write10+0xf8>
 80075a2:	4616      	mov	r6, r2
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 80075a4:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	db48      	blt.n	800763e <SCSI_Write10+0xae>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80075ac:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4608      	mov	r0, r1
 80075b4:	4798      	blx	r3
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d14a      	bne.n	8007650 <SCSI_Write10+0xc0>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 80075ba:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4638      	mov	r0, r7
 80075c2:	4798      	blx	r3
 80075c4:	4680      	mov	r8, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d14b      	bne.n	8007662 <SCSI_Write10+0xd2>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075ca:	78b3      	ldrb	r3, [r6, #2]
      (params[3] << 16) | \
 80075cc:	78f2      	ldrb	r2, [r6, #3]
 80075ce:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075d0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
        (params[4] <<  8) | \
 80075d4:	7933      	ldrb	r3, [r6, #4]
      (params[3] << 16) | \
 80075d6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
          params[5];
 80075da:	7973      	ldrb	r3, [r6, #5]
        (params[4] <<  8) | \
 80075dc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80075de:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80075e2:	79f1      	ldrb	r1, [r6, #7]
      params[8];  
 80075e4:	7a33      	ldrb	r3, [r6, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80075e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075ea:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if(SCSI_CheckAddressRange(pdev,
 80075ee:	4639      	mov	r1, r7
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7ff fec0 	bl	8007376 <SCSI_CheckAddressRange>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	db4a      	blt.n	8007690 <SCSI_Write10+0x100>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80075fa:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 80075fe:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8007602:	fb01 f202 	mul.w	r2, r1, r2
 8007606:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800760a:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
 800760e:	fb03 f301 	mul.w	r3, r3, r1
 8007612:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8007616:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800761a:	4293      	cmp	r3, r2
 800761c:	d12a      	bne.n	8007674 <SCSI_Write10+0xe4>
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 800761e:	2101      	movs	r1, #1
 8007620:	7221      	strb	r1, [r4, #8]
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8007622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007626:	bf28      	it	cs
 8007628:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 800762c:	b29b      	uxth	r3, r3
 800762e:	f104 020c 	add.w	r2, r4, #12
 8007632:	4628      	mov	r0, r5
 8007634:	f006 f9ac 	bl	800d990 <USBD_LL_PrepareReceive>
}
 8007638:	4640      	mov	r0, r8
 800763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SCSI_SenseCode(pdev,
 800763e:	2320      	movs	r3, #32
 8007640:	2205      	movs	r2, #5
 8007642:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8007646:	f7ff fde7 	bl	8007218 <SCSI_SenseCode>
      return -1;
 800764a:	f04f 38ff 	mov.w	r8, #4294967295
 800764e:	e7f3      	b.n	8007638 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8007650:	233a      	movs	r3, #58	; 0x3a
 8007652:	2202      	movs	r2, #2
 8007654:	4639      	mov	r1, r7
 8007656:	4628      	mov	r0, r5
 8007658:	f7ff fdde 	bl	8007218 <SCSI_SenseCode>
      return -1;
 800765c:	f04f 38ff 	mov.w	r8, #4294967295
 8007660:	e7ea      	b.n	8007638 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8007662:	2327      	movs	r3, #39	; 0x27
 8007664:	2202      	movs	r2, #2
 8007666:	4639      	mov	r1, r7
 8007668:	4628      	mov	r0, r5
 800766a:	f7ff fdd5 	bl	8007218 <SCSI_SenseCode>
      return -1;
 800766e:	f04f 38ff 	mov.w	r8, #4294967295
 8007672:	e7e1      	b.n	8007638 <SCSI_Write10+0xa8>
      SCSI_SenseCode(pdev,
 8007674:	2320      	movs	r3, #32
 8007676:	2205      	movs	r2, #5
 8007678:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff fdcb 	bl	8007218 <SCSI_SenseCode>
      return -1;
 8007682:	f04f 38ff 	mov.w	r8, #4294967295
 8007686:	e7d7      	b.n	8007638 <SCSI_Write10+0xa8>
    return SCSI_ProcessWrite(pdev, lun);
 8007688:	f7ff ff34 	bl	80074f4 <SCSI_ProcessWrite>
 800768c:	4680      	mov	r8, r0
 800768e:	e7d3      	b.n	8007638 <SCSI_Write10+0xa8>
      return -1; /* error */      
 8007690:	f04f 38ff 	mov.w	r8, #4294967295
 8007694:	e7d0      	b.n	8007638 <SCSI_Write10+0xa8>

08007696 <SCSI_Verify10>:
{
 8007696:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007698:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 800769c:	7853      	ldrb	r3, [r2, #1]
 800769e:	f013 0f02 	tst.w	r3, #2
 80076a2:	d10a      	bne.n	80076ba <SCSI_Verify10+0x24>
  if(SCSI_CheckAddressRange(pdev,
 80076a4:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 80076a8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 80076ac:	f7ff fe63 	bl	8007376 <SCSI_CheckAddressRange>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	db09      	blt.n	80076c8 <SCSI_Verify10+0x32>
  hmsc->bot_data_length = 0;
 80076b4:	2000      	movs	r0, #0
 80076b6:	8160      	strh	r0, [r4, #10]
}
 80076b8:	bd10      	pop	{r4, pc}
    SCSI_SenseCode (pdev,
 80076ba:	2324      	movs	r3, #36	; 0x24
 80076bc:	2205      	movs	r2, #5
 80076be:	f7ff fdab 	bl	8007218 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e7f7      	b.n	80076b8 <SCSI_Verify10+0x22>
    return -1; /* error */      
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e7f4      	b.n	80076b8 <SCSI_Verify10+0x22>

080076ce <SCSI_ProcessCmd>:
{
 80076ce:	b508      	push	{r3, lr}
  switch (params[0])
 80076d0:	7813      	ldrb	r3, [r2, #0]
 80076d2:	2b5a      	cmp	r3, #90	; 0x5a
 80076d4:	d853      	bhi.n	800777e <SCSI_ProcessCmd+0xb0>
 80076d6:	e8df f003 	tbb	[pc, r3]
 80076da:	522e      	.short	0x522e
 80076dc:	52523152 	.word	0x52523152
 80076e0:	52525252 	.word	0x52525252
 80076e4:	52525252 	.word	0x52525252
 80076e8:	52525252 	.word	0x52525252
 80076ec:	52525234 	.word	0x52525234
 80076f0:	52525252 	.word	0x52525252
 80076f4:	5252373d 	.word	0x5252373d
 80076f8:	5252523a 	.word	0x5252523a
 80076fc:	46524352 	.word	0x46524352
 8007700:	52495252 	.word	0x52495252
 8007704:	5252524c 	.word	0x5252524c
 8007708:	52524f52 	.word	0x52524f52
 800770c:	52525252 	.word	0x52525252
 8007710:	52525252 	.word	0x52525252
 8007714:	52525252 	.word	0x52525252
 8007718:	52525252 	.word	0x52525252
 800771c:	52525252 	.word	0x52525252
 8007720:	52525252 	.word	0x52525252
 8007724:	52525252 	.word	0x52525252
 8007728:	52525252 	.word	0x52525252
 800772c:	52525252 	.word	0x52525252
 8007730:	52525252 	.word	0x52525252
 8007734:	40          	.byte	0x40
 8007735:	00          	.byte	0x00
    return SCSI_TestUnitReady(pdev, lun, params);
 8007736:	f7ff fd87 	bl	8007248 <SCSI_TestUnitReady>
}
 800773a:	bd08      	pop	{r3, pc}
    return SCSI_RequestSense (pdev, lun, params);
 800773c:	f7ff fd34 	bl	80071a8 <SCSI_RequestSense>
 8007740:	e7fb      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_Inquiry(pdev, lun, params);
 8007742:	f7ff fce7 	bl	8007114 <SCSI_Inquiry>
 8007746:	e7f8      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 8007748:	f7ff fd61 	bl	800720e <SCSI_StartStopUnit>
 800774c:	e7f5      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_StartStopUnit(pdev, lun, params);
 800774e:	f7ff fd5e 	bl	800720e <SCSI_StartStopUnit>
 8007752:	e7f2      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense6 (pdev, lun, params);
 8007754:	f7ff fd04 	bl	8007160 <SCSI_ModeSense6>
 8007758:	e7ef      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_ModeSense10 (pdev, lun, params);
 800775a:	f7ff fd13 	bl	8007184 <SCSI_ModeSense10>
 800775e:	e7ec      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 8007760:	f7ff fd99 	bl	8007296 <SCSI_ReadFormatCapacity>
 8007764:	e7e9      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_ReadCapacity10(pdev, lun, params);
 8007766:	f7ff fdd4 	bl	8007312 <SCSI_ReadCapacity10>
 800776a:	e7e6      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_Read10(pdev, lun, params); 
 800776c:	f7ff fe5b 	bl	8007426 <SCSI_Read10>
 8007770:	e7e3      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_Write10(pdev, lun, params);
 8007772:	f7ff ff0d 	bl	8007590 <SCSI_Write10>
 8007776:	e7e0      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    return SCSI_Verify10(pdev, lun, params);
 8007778:	f7ff ff8d 	bl	8007696 <SCSI_Verify10>
 800777c:	e7dd      	b.n	800773a <SCSI_ProcessCmd+0x6c>
    SCSI_SenseCode(pdev, 
 800777e:	2320      	movs	r3, #32
 8007780:	2205      	movs	r2, #5
 8007782:	f7ff fd49 	bl	8007218 <SCSI_SenseCode>
    return -1;
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	e7d6      	b.n	800773a <SCSI_ProcessCmd+0x6c>

0800778c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800778c:	b198      	cbz	r0, 80077b6 <USBD_Init+0x2a>
{
 800778e:	b508      	push	{r3, lr}
 8007790:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007792:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8007796:	b110      	cbz	r0, 800779e <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8007798:	2000      	movs	r0, #0
 800779a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800779e:	b109      	cbz	r1, 80077a4 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80077a0:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 80077a4:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80077ac:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80077ae:	f006 f85f 	bl	800d870 <USBD_LL_Init>
  
  return USBD_OK; 
 80077b2:	2000      	movs	r0, #0
}
 80077b4:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80077b6:	2002      	movs	r0, #2
}
 80077b8:	4770      	bx	lr

080077ba <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80077ba:	b119      	cbz	r1, 80077c4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80077bc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80077c0:	2000      	movs	r0, #0
 80077c2:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80077c4:	2002      	movs	r0, #2
  }
  
  return status;
}
 80077c6:	4770      	bx	lr

080077c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80077c8:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80077ca:	f006 f88b 	bl	800d8e4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80077ce:	2000      	movs	r0, #0
 80077d0:	bd08      	pop	{r3, pc}

080077d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077d2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80077d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80077d8:	b133      	cbz	r3, 80077e8 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4798      	blx	r3
 80077de:	b908      	cbnz	r0, 80077e4 <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 80077e0:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 80077e2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80077e4:	2002      	movs	r0, #2
 80077e6:	e7fc      	b.n	80077e2 <USBD_SetClassConfig+0x10>
 80077e8:	2002      	movs	r0, #2
 80077ea:	e7fa      	b.n	80077e2 <USBD_SetClassConfig+0x10>

080077ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077ec:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80077ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4798      	blx	r3
  return USBD_OK;
}
 80077f6:	2000      	movs	r0, #0
 80077f8:	bd08      	pop	{r3, pc}

080077fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077fa:	b538      	push	{r3, r4, r5, lr}
 80077fc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077fe:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8007802:	4628      	mov	r0, r5
 8007804:	f000 f90c 	bl	8007a20 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8007808:	2301      	movs	r3, #1
 800780a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800780e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8007812:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8007816:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 800781a:	f001 031f 	and.w	r3, r1, #31
 800781e:	2b01      	cmp	r3, #1
 8007820:	d00e      	beq.n	8007840 <USBD_LL_SetupStage+0x46>
 8007822:	b13b      	cbz	r3, 8007834 <USBD_LL_SetupStage+0x3a>
 8007824:	2b02      	cmp	r3, #2
 8007826:	d010      	beq.n	800784a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007828:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800782c:	4620      	mov	r0, r4
 800782e:	f006 f87c 	bl	800d92a <USBD_LL_StallEP>
    break;
 8007832:	e003      	b.n	800783c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8007834:	4629      	mov	r1, r5
 8007836:	4620      	mov	r0, r4
 8007838:	f000 fa6b 	bl	8007d12 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800783c:	2000      	movs	r0, #0
 800783e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8007840:	4629      	mov	r1, r5
 8007842:	4620      	mov	r0, r4
 8007844:	f000 fa89 	bl	8007d5a <USBD_StdItfReq>
    break;
 8007848:	e7f8      	b.n	800783c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800784a:	4629      	mov	r1, r5
 800784c:	4620      	mov	r0, r4
 800784e:	f000 faa0 	bl	8007d92 <USBD_StdEPReq>
    break;
 8007852:	e7f3      	b.n	800783c <USBD_LL_SetupStage+0x42>

08007854 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8007854:	b510      	push	{r4, lr}
 8007856:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8007858:	bb21      	cbnz	r1, 80078a4 <USBD_LL_DataOutStage+0x50>
 800785a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800785c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8007860:	2a03      	cmp	r2, #3
 8007862:	d001      	beq.n	8007868 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8007864:	2000      	movs	r0, #0
 8007866:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8007868:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800786c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007870:	4291      	cmp	r1, r2
 8007872:	d80c      	bhi.n	800788e <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007874:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	b123      	cbz	r3, 8007886 <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800787c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007880:	2a03      	cmp	r2, #3
 8007882:	d100      	bne.n	8007886 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 8007884:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fb49 	bl	8007f1e <USBD_CtlSendStatus>
 800788c:	e7ea      	b.n	8007864 <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 800788e:	1a89      	subs	r1, r1, r2
 8007890:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8007894:	428a      	cmp	r2, r1
 8007896:	bf28      	it	cs
 8007898:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 800789a:	b292      	uxth	r2, r2
 800789c:	4619      	mov	r1, r3
 800789e:	f000 fb36 	bl	8007f0e <USBD_CtlContinueRx>
 80078a2:	e7df      	b.n	8007864 <USBD_LL_DataOutStage+0x10>
 80078a4:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 80078a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0d9      	beq.n	8007864 <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078b0:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80078b4:	2903      	cmp	r1, #3
 80078b6:	d1d5      	bne.n	8007864 <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 80078b8:	4611      	mov	r1, r2
 80078ba:	4798      	blx	r3
 80078bc:	e7d2      	b.n	8007864 <USBD_LL_DataOutStage+0x10>

080078be <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80078be:	b510      	push	{r4, lr}
 80078c0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d146      	bne.n	8007954 <USBD_LL_DataInStage+0x96>
 80078c6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80078c8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80078cc:	2a02      	cmp	r2, #2
 80078ce:	d005      	beq.n	80078dc <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80078d0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d039      	beq.n	800794c <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80078d8:	2000      	movs	r0, #0
 80078da:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80078dc:	69c1      	ldr	r1, [r0, #28]
 80078de:	6a02      	ldr	r2, [r0, #32]
 80078e0:	4291      	cmp	r1, r2
 80078e2:	d819      	bhi.n	8007918 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 80078e4:	6981      	ldr	r1, [r0, #24]
 80078e6:	fbb1 f3f2 	udiv	r3, r1, r2
 80078ea:	fb02 1313 	mls	r3, r2, r3, r1
 80078ee:	b92b      	cbnz	r3, 80078fc <USBD_LL_DataInStage+0x3e>
 80078f0:	428a      	cmp	r2, r1
 80078f2:	d803      	bhi.n	80078fc <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 80078f4:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d31a      	bcc.n	8007932 <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80078fc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	b12b      	cbz	r3, 8007910 <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007904:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007908:	2a03      	cmp	r2, #3
 800790a:	d101      	bne.n	8007910 <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 800790c:	4620      	mov	r0, r4
 800790e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fb0f 	bl	8007f34 <USBD_CtlReceiveStatus>
 8007916:	e7db      	b.n	80078d0 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8007918:	1a8a      	subs	r2, r1, r2
 800791a:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 800791c:	b292      	uxth	r2, r2
 800791e:	4619      	mov	r1, r3
 8007920:	f000 faed 	bl	8007efe <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8007924:	2300      	movs	r3, #0
 8007926:	461a      	mov	r2, r3
 8007928:	4619      	mov	r1, r3
 800792a:	4620      	mov	r0, r4
 800792c:	f006 f830 	bl	800d990 <USBD_LL_PrepareReceive>
 8007930:	e7ce      	b.n	80078d0 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	4611      	mov	r1, r2
 8007936:	f000 fae2 	bl	8007efe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800793a:	2100      	movs	r1, #0
 800793c:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8007940:	460b      	mov	r3, r1
 8007942:	460a      	mov	r2, r1
 8007944:	4620      	mov	r0, r4
 8007946:	f006 f823 	bl	800d990 <USBD_LL_PrepareReceive>
 800794a:	e7c1      	b.n	80078d0 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8007952:	e7c1      	b.n	80078d8 <USBD_LL_DataInStage+0x1a>
 8007954:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8007956:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0bb      	beq.n	80078d8 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007960:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8007964:	2903      	cmp	r1, #3
 8007966:	d1b7      	bne.n	80078d8 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8007968:	4611      	mov	r1, r2
 800796a:	4798      	blx	r3
 800796c:	e7b4      	b.n	80078d8 <USBD_LL_DataInStage+0x1a>

0800796e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800796e:	b538      	push	{r3, r4, r5, lr}
 8007970:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007972:	2340      	movs	r3, #64	; 0x40
 8007974:	2200      	movs	r2, #0
 8007976:	4611      	mov	r1, r2
 8007978:	f005 ffbc 	bl	800d8f4 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800797c:	2540      	movs	r5, #64	; 0x40
 800797e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007982:	462b      	mov	r3, r5
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	4620      	mov	r0, r4
 800798a:	f005 ffb3 	bl	800d8f4 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800798e:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007990:	2301      	movs	r3, #1
 8007992:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8007996:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800799a:	b12b      	cbz	r3, 80079a8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800799c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	7921      	ldrb	r1, [r4, #4]
 80079a4:	4620      	mov	r0, r4
 80079a6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80079a8:	2000      	movs	r0, #0
 80079aa:	bd38      	pop	{r3, r4, r5, pc}

080079ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80079ac:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80079ae:	2000      	movs	r0, #0
 80079b0:	4770      	bx	lr

080079b2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80079b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80079b6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80079ba:	2304      	movs	r3, #4
 80079bc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80079c0:	2000      	movs	r0, #0
 80079c2:	4770      	bx	lr

080079c4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80079c4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80079c8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80079cc:	2000      	movs	r0, #0
 80079ce:	4770      	bx	lr

080079d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80079d0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d001      	beq.n	80079de <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80079da:	2000      	movs	r0, #0
 80079dc:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 80079de:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0f8      	beq.n	80079da <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80079e8:	4798      	blx	r3
 80079ea:	e7f6      	b.n	80079da <USBD_LL_SOF+0xa>

080079ec <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 80079ec:	2300      	movs	r3, #0

    while (*buf != '\0') 
 80079ee:	e002      	b.n	80079f6 <USBD_GetLen+0xa>
    {
        len++;
 80079f0:	3301      	adds	r3, #1
 80079f2:	b2db      	uxtb	r3, r3
        buf++;
 80079f4:	3001      	adds	r0, #1
    while (*buf != '\0') 
 80079f6:	7802      	ldrb	r2, [r0, #0]
 80079f8:	2a00      	cmp	r2, #0
 80079fa:	d1f9      	bne.n	80079f0 <USBD_GetLen+0x4>
    }

    return len;
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	4770      	bx	lr

08007a00 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a00:	884b      	ldrh	r3, [r1, #2]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10b      	bne.n	8007a1e <USBD_SetFeature+0x1e>
{
 8007a06:	b510      	push	{r4, lr}
 8007a08:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8007a0a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007a0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fa81 	bl	8007f1e <USBD_CtlSendStatus>
}
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	4770      	bx	lr

08007a20 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007a20:	780b      	ldrb	r3, [r1, #0]
 8007a22:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007a24:	784b      	ldrb	r3, [r1, #1]
 8007a26:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007a28:	788b      	ldrb	r3, [r1, #2]
 8007a2a:	78ca      	ldrb	r2, [r1, #3]
 8007a2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a30:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007a32:	790b      	ldrb	r3, [r1, #4]
 8007a34:	794a      	ldrb	r2, [r1, #5]
 8007a36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a3a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007a3c:	798b      	ldrb	r3, [r1, #6]
 8007a3e:	79ca      	ldrb	r2, [r1, #7]
 8007a40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a44:	80c3      	strh	r3, [r0, #6]
}
 8007a46:	4770      	bx	lr

08007a48 <USBD_CtlError>:
{
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007a4c:	2180      	movs	r1, #128	; 0x80
 8007a4e:	f005 ff6c 	bl	800d92a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007a52:	2100      	movs	r1, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	f005 ff68 	bl	800d92a <USBD_LL_StallEP>
}
 8007a5a:	bd10      	pop	{r4, pc}

08007a5c <USBD_GetDescriptor>:
{
 8007a5c:	b530      	push	{r4, r5, lr}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 8007a64:	884a      	ldrh	r2, [r1, #2]
 8007a66:	0a13      	lsrs	r3, r2, #8
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	2b06      	cmp	r3, #6
 8007a6c:	f200 8081 	bhi.w	8007b72 <USBD_GetDescriptor+0x116>
 8007a70:	e8df f003 	tbb	[pc, r3]
 8007a74:	7f271304 	.word	0x7f271304
 8007a78:	637f      	.short	0x637f
 8007a7a:	70          	.byte	0x70
 8007a7b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a7c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f10d 0106 	add.w	r1, sp, #6
 8007a86:	7c00      	ldrb	r0, [r0, #16]
 8007a88:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8007a8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007a8e:	b112      	cbz	r2, 8007a96 <USBD_GetDescriptor+0x3a>
 8007a90:	88eb      	ldrh	r3, [r5, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d171      	bne.n	8007b7a <USBD_GetDescriptor+0x11e>
}
 8007a96:	b003      	add	sp, #12
 8007a98:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007a9a:	7c03      	ldrb	r3, [r0, #16]
 8007a9c:	b943      	cbnz	r3, 8007ab0 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007a9e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f10d 0006 	add.w	r0, sp, #6
 8007aa8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	7043      	strb	r3, [r0, #1]
 8007aae:	e7ec      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ab0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	f10d 0006 	add.w	r0, sp, #6
 8007aba:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007abc:	2302      	movs	r3, #2
 8007abe:	7043      	strb	r3, [r0, #1]
 8007ac0:	e7e3      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	2a05      	cmp	r2, #5
 8007ac6:	d834      	bhi.n	8007b32 <USBD_GetDescriptor+0xd6>
 8007ac8:	e8df f002 	tbb	[pc, r2]
 8007acc:	1b130b03 	.word	0x1b130b03
 8007ad0:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007ad2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f10d 0106 	add.w	r1, sp, #6
 8007adc:	7c00      	ldrb	r0, [r0, #16]
 8007ade:	4798      	blx	r3
      break;
 8007ae0:	e7d3      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ae2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f10d 0106 	add.w	r1, sp, #6
 8007aec:	7c00      	ldrb	r0, [r0, #16]
 8007aee:	4798      	blx	r3
      break;
 8007af0:	e7cb      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f10d 0106 	add.w	r1, sp, #6
 8007afc:	7c00      	ldrb	r0, [r0, #16]
 8007afe:	4798      	blx	r3
      break;
 8007b00:	e7c3      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b02:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f10d 0106 	add.w	r1, sp, #6
 8007b0c:	7c00      	ldrb	r0, [r0, #16]
 8007b0e:	4798      	blx	r3
      break;
 8007b10:	e7bb      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b12:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f10d 0106 	add.w	r1, sp, #6
 8007b1c:	7c00      	ldrb	r0, [r0, #16]
 8007b1e:	4798      	blx	r3
      break;
 8007b20:	e7b3      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b22:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f10d 0106 	add.w	r1, sp, #6
 8007b2c:	7c00      	ldrb	r0, [r0, #16]
 8007b2e:	4798      	blx	r3
      break;
 8007b30:	e7ab      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7ff ff88 	bl	8007a48 <USBD_CtlError>
      return;
 8007b38:	e7ad      	b.n	8007a96 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007b3a:	7c03      	ldrb	r3, [r0, #16]
 8007b3c:	b933      	cbnz	r3, 8007b4c <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b44:	f10d 0006 	add.w	r0, sp, #6
 8007b48:	4798      	blx	r3
      break;
 8007b4a:	e79e      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7ff ff7b 	bl	8007a48 <USBD_CtlError>
      return;
 8007b52:	e7a0      	b.n	8007a96 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007b54:	7c03      	ldrb	r3, [r0, #16]
 8007b56:	b943      	cbnz	r3, 8007b6a <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f10d 0006 	add.w	r0, sp, #6
 8007b62:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b64:	2307      	movs	r3, #7
 8007b66:	7043      	strb	r3, [r0, #1]
      break; 
 8007b68:	e78f      	b.n	8007a8a <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7ff ff6c 	bl	8007a48 <USBD_CtlError>
      return;
 8007b70:	e791      	b.n	8007a96 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7ff ff68 	bl	8007a48 <USBD_CtlError>
    return;
 8007b78:	e78d      	b.n	8007a96 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	bf28      	it	cs
 8007b7e:	461a      	movcs	r2, r3
 8007b80:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8007b84:	4601      	mov	r1, r0
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 f9ac 	bl	8007ee4 <USBD_CtlSendData>
 8007b8c:	e783      	b.n	8007a96 <USBD_GetDescriptor+0x3a>

08007b8e <USBD_SetAddress>:
{
 8007b8e:	b538      	push	{r3, r4, r5, lr}
 8007b90:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007b92:	888b      	ldrh	r3, [r1, #4]
 8007b94:	b9e3      	cbnz	r3, 8007bd0 <USBD_SetAddress+0x42>
 8007b96:	88cb      	ldrh	r3, [r1, #6]
 8007b98:	b9d3      	cbnz	r3, 8007bd0 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007b9a:	788d      	ldrb	r5, [r1, #2]
 8007b9c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007ba0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d00c      	beq.n	8007bc2 <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 8007ba8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8007bac:	4629      	mov	r1, r5
 8007bae:	f005 fedf 	bl	800d970 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 f9b3 	bl	8007f1e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8007bb8:	b135      	cbz	r5, 8007bc8 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007bc0:	e009      	b.n	8007bd6 <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 8007bc2:	f7ff ff41 	bl	8007a48 <USBD_CtlError>
 8007bc6:	e006      	b.n	8007bd6 <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007bce:	e002      	b.n	8007bd6 <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f7ff ff39 	bl	8007a48 <USBD_CtlError>
}
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}

08007bd8 <USBD_SetConfig>:
{
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4604      	mov	r4, r0
 8007bdc:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8007bde:	7889      	ldrb	r1, [r1, #2]
 8007be0:	4b25      	ldr	r3, [pc, #148]	; (8007c78 <USBD_SetConfig+0xa0>)
 8007be2:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007be4:	2902      	cmp	r1, #2
 8007be6:	d809      	bhi.n	8007bfc <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8007be8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d009      	beq.n	8007c04 <USBD_SetConfig+0x2c>
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d01c      	beq.n	8007c2e <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	f7ff ff27 	bl	8007a48 <USBD_CtlError>
      break;
 8007bfa:	e002      	b.n	8007c02 <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	f7ff ff23 	bl	8007a48 <USBD_CtlError>
}
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8007c04:	b181      	cbz	r1, 8007c28 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8007c06:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007c0e:	f7ff fde0 	bl	80077d2 <USBD_SetClassConfig>
 8007c12:	2802      	cmp	r0, #2
 8007c14:	d003      	beq.n	8007c1e <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f981 	bl	8007f1e <USBD_CtlSendStatus>
 8007c1c:	e7f1      	b.n	8007c02 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff ff11 	bl	8007a48 <USBD_CtlError>
          return;
 8007c26:	e7ec      	b.n	8007c02 <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 8007c28:	f000 f979 	bl	8007f1e <USBD_CtlSendStatus>
 8007c2c:	e7e9      	b.n	8007c02 <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 8007c2e:	b189      	cbz	r1, 8007c54 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 8007c30:	6843      	ldr	r3, [r0, #4]
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d01d      	beq.n	8007c72 <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007c36:	b2d9      	uxtb	r1, r3
 8007c38:	f7ff fdd8 	bl	80077ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <USBD_SetConfig+0xa0>)
 8007c3e:	7819      	ldrb	r1, [r3, #0]
 8007c40:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff fdc5 	bl	80077d2 <USBD_SetClassConfig>
 8007c48:	2802      	cmp	r0, #2
 8007c4a:	d00d      	beq.n	8007c68 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f966 	bl	8007f1e <USBD_CtlSendStatus>
 8007c52:	e7d6      	b.n	8007c02 <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c54:	2302      	movs	r3, #2
 8007c56:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007c5a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007c5c:	f7ff fdc6 	bl	80077ec <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 f95c 	bl	8007f1e <USBD_CtlSendStatus>
 8007c66:	e7cc      	b.n	8007c02 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7ff feec 	bl	8007a48 <USBD_CtlError>
          return;
 8007c70:	e7c7      	b.n	8007c02 <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 8007c72:	f000 f954 	bl	8007f1e <USBD_CtlSendStatus>
 8007c76:	e7c4      	b.n	8007c02 <USBD_SetConfig+0x2a>
 8007c78:	200012f1 	.word	0x200012f1

08007c7c <USBD_GetConfig>:
{
 8007c7c:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 8007c7e:	88cb      	ldrh	r3, [r1, #6]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d108      	bne.n	8007c96 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8007c84:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d007      	beq.n	8007c9c <USBD_GetConfig+0x20>
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d00d      	beq.n	8007cac <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8007c90:	f7ff feda 	bl	8007a48 <USBD_CtlError>
}
 8007c94:	e001      	b.n	8007c9a <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 8007c96:	f7ff fed7 	bl	8007a48 <USBD_CtlError>
}
 8007c9a:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f000 f91d 	bl	8007ee4 <USBD_CtlSendData>
      break;
 8007caa:	e7f6      	b.n	8007c9a <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 8007cac:	2201      	movs	r2, #1
 8007cae:	1d01      	adds	r1, r0, #4
 8007cb0:	f000 f918 	bl	8007ee4 <USBD_CtlSendData>
      break;
 8007cb4:	e7f1      	b.n	8007c9a <USBD_GetConfig+0x1e>

08007cb6 <USBD_GetStatus>:
{
 8007cb6:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8007cb8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007cbc:	3b02      	subs	r3, #2
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d80c      	bhi.n	8007cdc <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8007cc6:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007cca:	b10b      	cbz	r3, 8007cd0 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007ccc:	2303      	movs	r3, #3
 8007cce:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f100 010c 	add.w	r1, r0, #12
 8007cd6:	f000 f905 	bl	8007ee4 <USBD_CtlSendData>
}
 8007cda:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8007cdc:	f7ff feb4 	bl	8007a48 <USBD_CtlError>
}
 8007ce0:	e7fb      	b.n	8007cda <USBD_GetStatus+0x24>

08007ce2 <USBD_ClrFeature>:
{
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8007ce6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007cea:	3b02      	subs	r3, #2
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d80d      	bhi.n	8007d0c <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007cf0:	884b      	ldrh	r3, [r1, #2]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d109      	bne.n	8007d0a <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007cfc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f90a 	bl	8007f1e <USBD_CtlSendStatus>
}
 8007d0a:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8007d0c:	f7ff fe9c 	bl	8007a48 <USBD_CtlError>
}
 8007d10:	e7fb      	b.n	8007d0a <USBD_ClrFeature+0x28>

08007d12 <USBD_StdDevReq>:
{
 8007d12:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8007d14:	784b      	ldrb	r3, [r1, #1]
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d81c      	bhi.n	8007d54 <USBD_StdDevReq+0x42>
 8007d1a:	e8df f003 	tbb	[pc, r3]
 8007d1e:	1812      	.short	0x1812
 8007d20:	091b151b 	.word	0x091b151b
 8007d24:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 8007d28:	f7ff fe98 	bl	8007a5c <USBD_GetDescriptor>
}
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 8007d30:	f7ff ff2d 	bl	8007b8e <USBD_SetAddress>
    break;
 8007d34:	e7fa      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8007d36:	f7ff ff4f 	bl	8007bd8 <USBD_SetConfig>
    break;
 8007d3a:	e7f7      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8007d3c:	f7ff ff9e 	bl	8007c7c <USBD_GetConfig>
    break;
 8007d40:	e7f4      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 8007d42:	f7ff ffb8 	bl	8007cb6 <USBD_GetStatus>
    break;
 8007d46:	e7f1      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8007d48:	f7ff fe5a 	bl	8007a00 <USBD_SetFeature>
    break;
 8007d4c:	e7ee      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 8007d4e:	f7ff ffc8 	bl	8007ce2 <USBD_ClrFeature>
    break;
 8007d52:	e7eb      	b.n	8007d2c <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8007d54:	f7ff fe78 	bl	8007a48 <USBD_CtlError>
    break;
 8007d58:	e7e8      	b.n	8007d2c <USBD_StdDevReq+0x1a>

08007d5a <USBD_StdItfReq>:
{
 8007d5a:	b538      	push	{r3, r4, r5, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8007d60:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d111      	bne.n	8007d8c <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8007d68:	790b      	ldrb	r3, [r1, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d80b      	bhi.n	8007d86 <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 8007d6e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007d76:	88eb      	ldrh	r3, [r5, #6]
 8007d78:	b10b      	cbz	r3, 8007d7e <USBD_StdItfReq+0x24>
}
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f8cd 	bl	8007f1e <USBD_CtlSendStatus>
 8007d84:	e7f9      	b.n	8007d7a <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 8007d86:	f7ff fe5f 	bl	8007a48 <USBD_CtlError>
 8007d8a:	e7f6      	b.n	8007d7a <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 8007d8c:	f7ff fe5c 	bl	8007a48 <USBD_CtlError>
    break;
 8007d90:	e7f3      	b.n	8007d7a <USBD_StdItfReq+0x20>

08007d92 <USBD_StdEPReq>:
{
 8007d92:	b538      	push	{r3, r4, r5, lr}
 8007d94:	4605      	mov	r5, r0
 8007d96:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8007d98:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8007d9a:	780b      	ldrb	r3, [r1, #0]
 8007d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d105      	bne.n	8007db0 <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 8007da4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	4798      	blx	r3
}
 8007dac:	2000      	movs	r0, #0
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8007db2:	7863      	ldrb	r3, [r4, #1]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d025      	beq.n	8007e04 <USBD_StdEPReq+0x72>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d047      	beq.n	8007e4c <USBD_StdEPReq+0xba>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d1f5      	bne.n	8007dac <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8007dc0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d005      	beq.n	8007dd4 <USBD_StdEPReq+0x42>
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d00a      	beq.n	8007de2 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8007dcc:	4621      	mov	r1, r4
 8007dce:	f7ff fe3b 	bl	8007a48 <USBD_CtlError>
      break;    
 8007dd2:	e7eb      	b.n	8007dac <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	d0e9      	beq.n	8007dac <USBD_StdEPReq+0x1a>
 8007dd8:	2980      	cmp	r1, #128	; 0x80
 8007dda:	d0e7      	beq.n	8007dac <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007ddc:	f005 fda5 	bl	800d92a <USBD_LL_StallEP>
 8007de0:	e7e4      	b.n	8007dac <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007de2:	8863      	ldrh	r3, [r4, #2]
 8007de4:	b923      	cbnz	r3, 8007df0 <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007de6:	b119      	cbz	r1, 8007df0 <USBD_StdEPReq+0x5e>
 8007de8:	2980      	cmp	r1, #128	; 0x80
 8007dea:	d001      	beq.n	8007df0 <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8007dec:	f005 fd9d 	bl	800d92a <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8007df0:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 f88e 	bl	8007f1e <USBD_CtlSendStatus>
      break;
 8007e02:	e7d3      	b.n	8007dac <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8007e04:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d005      	beq.n	8007e18 <USBD_StdEPReq+0x86>
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d00a      	beq.n	8007e26 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8007e10:	4621      	mov	r1, r4
 8007e12:	f7ff fe19 	bl	8007a48 <USBD_CtlError>
      break;    
 8007e16:	e7c9      	b.n	8007dac <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	d0c7      	beq.n	8007dac <USBD_StdEPReq+0x1a>
 8007e1c:	2980      	cmp	r1, #128	; 0x80
 8007e1e:	d0c5      	beq.n	8007dac <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007e20:	f005 fd83 	bl	800d92a <USBD_LL_StallEP>
 8007e24:	e7c2      	b.n	8007dac <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007e26:	8863      	ldrh	r3, [r4, #2]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1bf      	bne.n	8007dac <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 8007e2c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007e30:	d103      	bne.n	8007e3a <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 8007e32:	4628      	mov	r0, r5
 8007e34:	f000 f873 	bl	8007f1e <USBD_CtlSendStatus>
 8007e38:	e7b8      	b.n	8007dac <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007e3a:	f005 fd7e 	bl	800d93a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007e3e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	4798      	blx	r3
 8007e4a:	e7f2      	b.n	8007e32 <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8007e4c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d005      	beq.n	8007e60 <USBD_StdEPReq+0xce>
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d009      	beq.n	8007e6c <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8007e58:	4621      	mov	r1, r4
 8007e5a:	f7ff fdf5 	bl	8007a48 <USBD_CtlError>
      break;
 8007e5e:	e7a5      	b.n	8007dac <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 8007e60:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007e64:	d0a2      	beq.n	8007dac <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8007e66:	f005 fd60 	bl	800d92a <USBD_LL_StallEP>
 8007e6a:	e79f      	b.n	8007dac <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007e6c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007e70:	d111      	bne.n	8007e96 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007e72:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007e76:	3410      	adds	r4, #16
 8007e78:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8007e7c:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f005 fd63 	bl	800d94a <USBD_LL_IsStallEP>
 8007e84:	b170      	cbz	r0, 8007ea4 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8007e86:	2301      	movs	r3, #1
 8007e88:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 f828 	bl	8007ee4 <USBD_CtlSendData>
      break;
 8007e94:	e78a      	b.n	8007dac <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007e96:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8007ea0:	3404      	adds	r4, #4
 8007ea2:	e7ec      	b.n	8007e7e <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	e7ef      	b.n	8007e8a <USBD_StdEPReq+0xf8>

08007eaa <USBD_GetString>:
  if (desc != NULL) 
 8007eaa:	b1d0      	cbz	r0, 8007ee2 <USBD_GetString+0x38>
{
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	460d      	mov	r5, r1
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007eb4:	f7ff fd9a 	bl	80079ec <USBD_GetLen>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	0040      	lsls	r0, r0, #1
 8007ebc:	b280      	uxth	r0, r0
 8007ebe:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8007ec0:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	706b      	strb	r3, [r5, #1]
 8007ec6:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8007ec8:	e007      	b.n	8007eda <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8007eca:	3401      	adds	r4, #1
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8007eda:	7821      	ldrb	r1, [r4, #0]
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d1f4      	bne.n	8007eca <USBD_GetString+0x20>
}
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	4770      	bx	lr

08007ee4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8007eee:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8007ef0:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f005 fd43 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007efa:	2000      	movs	r0, #0
 8007efc:	bd10      	pop	{r4, pc}

08007efe <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007efe:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007f00:	4613      	mov	r3, r2
 8007f02:	460a      	mov	r2, r1
 8007f04:	2100      	movs	r1, #0
 8007f06:	f005 fd3b 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bd08      	pop	{r3, pc}

08007f0e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007f0e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8007f10:	4613      	mov	r3, r2
 8007f12:	460a      	mov	r2, r1
 8007f14:	2100      	movs	r1, #0
 8007f16:	f005 fd3b 	bl	800d990 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bd08      	pop	{r3, pc}

08007f1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007f1e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f20:	2304      	movs	r3, #4
 8007f22:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007f26:	2300      	movs	r3, #0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f005 fd28 	bl	800d980 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007f30:	2000      	movs	r0, #0
 8007f32:	bd08      	pop	{r3, pc}

08007f34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007f34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007f36:	2305      	movs	r3, #5
 8007f38:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	f005 fd25 	bl	800d990 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8007f46:	2000      	movs	r0, #0
 8007f48:	bd08      	pop	{r3, pc}
	...

08007f4c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <FATFS_LinkDriverEx+0x48>)
 8007f4e:	7a5b      	ldrb	r3, [r3, #9]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d901      	bls.n	8007f5a <FATFS_LinkDriverEx+0xe>
  uint8_t ret = 1;
 8007f56:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 8007f58:	4770      	bx	lr
{
 8007f5a:	b430      	push	{r4, r5}
    disk.is_initialized[disk.nbr] = 0;
 8007f5c:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <FATFS_LinkDriverEx+0x48>)
 8007f5e:	7a65      	ldrb	r5, [r4, #9]
 8007f60:	b2ed      	uxtb	r5, r5
 8007f62:	2300      	movs	r3, #0
 8007f64:	5563      	strb	r3, [r4, r5]
    disk.drv[disk.nbr] = drv;  
 8007f66:	7a65      	ldrb	r5, [r4, #9]
 8007f68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f6c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8007f6e:	7a60      	ldrb	r0, [r4, #9]
 8007f70:	4420      	add	r0, r4
 8007f72:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8007f74:	7a62      	ldrb	r2, [r4, #9]
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	1c50      	adds	r0, r2, #1
 8007f7a:	b2c0      	uxtb	r0, r0
 8007f7c:	7260      	strb	r0, [r4, #9]
    path[0] = DiskNum + '0';
 8007f7e:	3230      	adds	r2, #48	; 0x30
 8007f80:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007f82:	223a      	movs	r2, #58	; 0x3a
 8007f84:	704a      	strb	r2, [r1, #1]
    path[2] = '/';
 8007f86:	222f      	movs	r2, #47	; 0x2f
 8007f88:	708a      	strb	r2, [r1, #2]
    path[3] = 0;
 8007f8a:	70cb      	strb	r3, [r1, #3]
    ret = 0;
 8007f8c:	4618      	mov	r0, r3
}
 8007f8e:	bc30      	pop	{r4, r5}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	200012f4 	.word	0x200012f4

08007f98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007f98:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7ff ffd6 	bl	8007f4c <FATFS_LinkDriverEx>
}
 8007fa0:	bd08      	pop	{r3, pc}
	...

08007fa4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007fa4:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <SD_initialize+0x20>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8007fac:	f7fe fe76 	bl	8006c9c <BSP_SD_Init>
 8007fb0:	b920      	cbnz	r0, 8007fbc <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8007fb2:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <SD_initialize+0x20>)
 8007fb4:	7813      	ldrb	r3, [r2, #0]
 8007fb6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007fba:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8007fbc:	4b01      	ldr	r3, [pc, #4]	; (8007fc4 <SD_initialize+0x20>)
 8007fbe:	7818      	ldrb	r0, [r3, #0]
}
 8007fc0:	bd08      	pop	{r3, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200000ac 	.word	0x200000ac

08007fc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007fc8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <SD_status+0x20>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007fd0:	f7fe fe32 	bl	8006c38 <BSP_SD_GetCardState>
 8007fd4:	b920      	cbnz	r0, 8007fe0 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8007fd6:	4a04      	ldr	r2, [pc, #16]	; (8007fe8 <SD_status+0x20>)
 8007fd8:	7813      	ldrb	r3, [r2, #0]
 8007fda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007fde:	7013      	strb	r3, [r2, #0]
  }
  
  return Stat;
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <SD_status+0x20>)
 8007fe2:	7818      	ldrb	r0, [r3, #0]
}
 8007fe4:	bd08      	pop	{r3, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200000ac 	.word	0x200000ac

08007fec <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8007ff4:	4b07      	ldr	r3, [pc, #28]	; (8008014 <SD_read+0x28>)
 8007ff6:	f7fe fdff 	bl	8006bf8 <BSP_SD_ReadBlocks>
 8007ffa:	b938      	cbnz	r0, 800800c <SD_read+0x20>
  uint32_t timeout = 100000;
 8007ffc:	4c06      	ldr	r4, [pc, #24]	; (8008018 <SD_read+0x2c>)
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007ffe:	f7fe fe1b 	bl	8006c38 <BSP_SD_GetCardState>
 8008002:	b120      	cbz	r0, 800800e <SD_read+0x22>
    {
      if (timeout-- == 0)
 8008004:	1e63      	subs	r3, r4, #1
 8008006:	b11c      	cbz	r4, 8008010 <SD_read+0x24>
 8008008:	461c      	mov	r4, r3
 800800a:	e7f8      	b.n	8007ffe <SD_read+0x12>
  DRESULT res = RES_ERROR;
 800800c:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }
  
  return res;
}
 800800e:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 8008010:	2001      	movs	r0, #1
 8008012:	e7fc      	b.n	800800e <SD_read+0x22>
 8008014:	05f5e100 	.word	0x05f5e100
 8008018:	000186a0 	.word	0x000186a0

0800801c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800801c:	b510      	push	{r4, lr}
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <SD_write+0x28>)
 8008026:	f7fe fdf7 	bl	8006c18 <BSP_SD_WriteBlocks>
 800802a:	b938      	cbnz	r0, 800803c <SD_write+0x20>
  uint32_t timeout = 100000;
 800802c:	4c06      	ldr	r4, [pc, #24]	; (8008048 <SD_write+0x2c>)
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800802e:	f7fe fe03 	bl	8006c38 <BSP_SD_GetCardState>
 8008032:	b120      	cbz	r0, 800803e <SD_write+0x22>
    {
      if (timeout-- == 0)
 8008034:	1e63      	subs	r3, r4, #1
 8008036:	b11c      	cbz	r4, 8008040 <SD_write+0x24>
 8008038:	461c      	mov	r4, r3
 800803a:	e7f8      	b.n	800802e <SD_write+0x12>
  DRESULT res = RES_ERROR;
 800803c:	2001      	movs	r0, #1
    }    
    res = RES_OK;
  }
  
  return res;
}
 800803e:	bd10      	pop	{r4, pc}
        return RES_ERROR;
 8008040:	2001      	movs	r0, #1
 8008042:	e7fc      	b.n	800803e <SD_write+0x22>
 8008044:	05f5e100 	.word	0x05f5e100
 8008048:	000186a0 	.word	0x000186a0

0800804c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800804c:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <SD_ioctl+0x54>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f013 0f01 	tst.w	r3, #1
 8008054:	d120      	bne.n	8008098 <SD_ioctl+0x4c>
{
 8008056:	b510      	push	{r4, lr}
 8008058:	b088      	sub	sp, #32
 800805a:	4614      	mov	r4, r2
  
  switch (cmd)
 800805c:	2903      	cmp	r1, #3
 800805e:	d81d      	bhi.n	800809c <SD_ioctl+0x50>
 8008060:	e8df f001 	tbb	[pc, r1]
 8008064:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008068:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 800806a:	b008      	add	sp, #32
 800806c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800806e:	4668      	mov	r0, sp
 8008070:	f7fe fdec 	bl	8006c4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008074:	9b06      	ldr	r3, [sp, #24]
 8008076:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008078:	2000      	movs	r0, #0
    break;
 800807a:	e7f6      	b.n	800806a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800807c:	4668      	mov	r0, sp
 800807e:	f7fe fde5 	bl	8006c4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8008086:	2000      	movs	r0, #0
    break;
 8008088:	e7ef      	b.n	800806a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800808a:	4668      	mov	r0, sp
 800808c:	f7fe fdde 	bl	8006c4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8008090:	9b07      	ldr	r3, [sp, #28]
 8008092:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008094:	2000      	movs	r0, #0
    break;
 8008096:	e7e8      	b.n	800806a <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008098:	2003      	movs	r0, #3
}
 800809a:	4770      	bx	lr
    res = RES_PARERR;
 800809c:	2004      	movs	r0, #4
 800809e:	e7e4      	b.n	800806a <SD_ioctl+0x1e>
 80080a0:	200000ac 	.word	0x200000ac

080080a4 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80080a4:	2884      	cmp	r0, #132	; 0x84
 80080a6:	d001      	beq.n	80080ac <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80080a8:	3003      	adds	r0, #3
 80080aa:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080ac:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80080ae:	4770      	bx	lr

080080b0 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b0:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80080b4:	3000      	adds	r0, #0
 80080b6:	bf18      	it	ne
 80080b8:	2001      	movne	r0, #1
 80080ba:	4770      	bx	lr

080080bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080bc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80080be:	f000 ffd5 	bl	800906c <vTaskStartScheduler>
  
  return osOK;
}
 80080c2:	2000      	movs	r0, #0
 80080c4:	bd08      	pop	{r3, pc}

080080c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080ca:	b087      	sub	sp, #28
 80080cc:	4604      	mov	r4, r0
 80080ce:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80080d0:	6945      	ldr	r5, [r0, #20]
 80080d2:	b1a5      	cbz	r5, 80080fe <osThreadCreate+0x38>
 80080d4:	6986      	ldr	r6, [r0, #24]
 80080d6:	b196      	cbz	r6, 80080fe <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080d8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80080dc:	f8d0 9000 	ldr.w	r9, [r0]
 80080e0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80080e4:	f7ff ffde 	bl	80080a4 <makeFreeRtosPriority>
 80080e8:	6922      	ldr	r2, [r4, #16]
 80080ea:	9602      	str	r6, [sp, #8]
 80080ec:	9501      	str	r5, [sp, #4]
 80080ee:	9000      	str	r0, [sp, #0]
 80080f0:	463b      	mov	r3, r7
 80080f2:	4649      	mov	r1, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	f000 ff5b 	bl	8008fb0 <xTaskCreateStatic>
 80080fa:	9005      	str	r0, [sp, #20]
 80080fc:	e013      	b.n	8008126 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080fe:	6865      	ldr	r5, [r4, #4]
 8008100:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008102:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008106:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800810a:	f7ff ffcb 	bl	80080a4 <makeFreeRtosPriority>
 800810e:	ab05      	add	r3, sp, #20
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	9000      	str	r0, [sp, #0]
 8008114:	463b      	mov	r3, r7
 8008116:	fa1f f288 	uxth.w	r2, r8
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	f000 ff72 	bl	8009006 <xTaskCreate>
 8008122:	2801      	cmp	r0, #1
 8008124:	d103      	bne.n	800812e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008126:	9805      	ldr	r0, [sp, #20]
}
 8008128:	b007      	add	sp, #28
 800812a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800812e:	2000      	movs	r0, #0
 8008130:	e7fa      	b.n	8008128 <osThreadCreate+0x62>

08008132 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008132:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008134:	4603      	mov	r3, r0
 8008136:	b900      	cbnz	r0, 800813a <osDelay+0x8>
 8008138:	2301      	movs	r3, #1
 800813a:	4618      	mov	r0, r3
 800813c:	f001 f8f6 	bl	800932c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008140:	2000      	movs	r0, #0
 8008142:	bd08      	pop	{r3, pc}

08008144 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008144:	b510      	push	{r4, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800814a:	6844      	ldr	r4, [r0, #4]
 800814c:	b16c      	cbz	r4, 800816a <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 800814e:	2901      	cmp	r1, #1
 8008150:	d009      	beq.n	8008166 <osTimerCreate+0x22>
 8008152:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008154:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008156:	9401      	str	r4, [sp, #4]
 8008158:	9100      	str	r1, [sp, #0]
 800815a:	2101      	movs	r1, #1
 800815c:	4809      	ldr	r0, [pc, #36]	; (8008184 <osTimerCreate+0x40>)
 800815e:	f001 fc2b 	bl	80099b8 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8008162:	b002      	add	sp, #8
 8008164:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008166:	2201      	movs	r2, #1
 8008168:	e7f4      	b.n	8008154 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 800816a:	2901      	cmp	r1, #1
 800816c:	d007      	beq.n	800817e <osTimerCreate+0x3a>
 800816e:	2200      	movs	r2, #0
                      (TaskFunction_t)timer_def->ptimer);
 8008170:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8008172:	9100      	str	r1, [sp, #0]
 8008174:	2101      	movs	r1, #1
 8008176:	4803      	ldr	r0, [pc, #12]	; (8008184 <osTimerCreate+0x40>)
 8008178:	f001 fc02 	bl	8009980 <xTimerCreate>
 800817c:	e7f1      	b.n	8008162 <osTimerCreate+0x1e>
 800817e:	2201      	movs	r2, #1
 8008180:	e7f6      	b.n	8008170 <osTimerCreate+0x2c>
 8008182:	bf00      	nop
 8008184:	0800f3e4 	.word	0x0800f3e4

08008188 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008188:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800818a:	6841      	ldr	r1, [r0, #4]
 800818c:	b119      	cbz	r1, 8008196 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800818e:	2001      	movs	r0, #1
 8008190:	f000 fb81 	bl	8008896 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008194:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008196:	2001      	movs	r0, #1
 8008198:	f000 fb72 	bl	8008880 <xQueueCreateMutex>
 800819c:	e7fa      	b.n	8008194 <osMutexCreate+0xc>

0800819e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800819e:	b510      	push	{r4, lr}
 80081a0:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80081a2:	6842      	ldr	r2, [r0, #4]
 80081a4:	b192      	cbz	r2, 80081cc <osSemaphoreCreate+0x2e>
    if (count == 1) {
 80081a6:	2901      	cmp	r1, #1
 80081a8:	d006      	beq.n	80081b8 <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80081aa:	4608      	mov	r0, r1
 80081ac:	f000 fa58 	bl	8008660 <xQueueCreateCountingSemaphoreStatic>
 80081b0:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 80081b2:	4620      	mov	r0, r4
 80081b4:	b002      	add	sp, #8
 80081b6:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80081b8:	2303      	movs	r3, #3
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	4611      	mov	r1, r2
 80081c2:	2001      	movs	r0, #1
 80081c4:	f000 f9dd 	bl	8008582 <xQueueGenericCreateStatic>
 80081c8:	4604      	mov	r4, r0
 80081ca:	e7f2      	b.n	80081b2 <osSemaphoreCreate+0x14>
    if (count == 1) {
 80081cc:	2901      	cmp	r1, #1
 80081ce:	d004      	beq.n	80081da <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateCounting(count, count);
 80081d0:	4608      	mov	r0, r1
 80081d2:	f000 fa6a 	bl	80086aa <xQueueCreateCountingSemaphore>
 80081d6:	4604      	mov	r4, r0
 80081d8:	e7eb      	b.n	80081b2 <osSemaphoreCreate+0x14>
      vSemaphoreCreateBinary(sema);
 80081da:	2203      	movs	r2, #3
 80081dc:	2100      	movs	r1, #0
 80081de:	2001      	movs	r0, #1
 80081e0:	f000 fa17 	bl	8008612 <xQueueGenericCreate>
 80081e4:	4604      	mov	r4, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0e3      	beq.n	80081b2 <osSemaphoreCreate+0x14>
 80081ea:	2300      	movs	r3, #0
 80081ec:	461a      	mov	r2, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	f000 fa7c 	bl	80086ec <xQueueGenericSend>
 80081f4:	e7dd      	b.n	80081b2 <osSemaphoreCreate+0x14>
	...

080081f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80081f8:	b530      	push	{r4, r5, lr}
 80081fa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80081fc:	2300      	movs	r3, #0
 80081fe:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8008200:	b360      	cbz	r0, 800825c <osSemaphoreWait+0x64>
 8008202:	460c      	mov	r4, r1
 8008204:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8008206:	f1b1 3fff 	cmp.w	r1, #4294967295
 800820a:	d002      	beq.n	8008212 <osSemaphoreWait+0x1a>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800820c:	b919      	cbnz	r1, 8008216 <osSemaphoreWait+0x1e>
  ticks = 0;
 800820e:	461c      	mov	r4, r3
 8008210:	e001      	b.n	8008216 <osSemaphoreWait+0x1e>
    ticks = portMAX_DELAY;
 8008212:	f04f 34ff 	mov.w	r4, #4294967295
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8008216:	f7ff ff4b 	bl	80080b0 <inHandlerMode>
 800821a:	b190      	cbz	r0, 8008242 <osSemaphoreWait+0x4a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800821c:	aa01      	add	r2, sp, #4
 800821e:	2100      	movs	r1, #0
 8008220:	4628      	mov	r0, r5
 8008222:	f000 fcd9 	bl	8008bd8 <xQueueReceiveFromISR>
 8008226:	2801      	cmp	r0, #1
 8008228:	d11a      	bne.n	8008260 <osSemaphoreWait+0x68>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	b1d3      	cbz	r3, 8008264 <osSemaphoreWait+0x6c>
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <osSemaphoreWait+0x70>)
 8008230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800823e:	2000      	movs	r0, #0
 8008240:	e008      	b.n	8008254 <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008242:	2300      	movs	r3, #0
 8008244:	4622      	mov	r2, r4
 8008246:	4619      	mov	r1, r3
 8008248:	4628      	mov	r0, r5
 800824a:	f000 fbf3 	bl	8008a34 <xQueueGenericReceive>
 800824e:	2801      	cmp	r0, #1
 8008250:	d102      	bne.n	8008258 <osSemaphoreWait+0x60>
  return osOK;
 8008252:	2000      	movs	r0, #0
}
 8008254:	b003      	add	sp, #12
 8008256:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 8008258:	20ff      	movs	r0, #255	; 0xff
 800825a:	e7fb      	b.n	8008254 <osSemaphoreWait+0x5c>
    return osErrorParameter;
 800825c:	2080      	movs	r0, #128	; 0x80
 800825e:	e7f9      	b.n	8008254 <osSemaphoreWait+0x5c>
      return osErrorOS;
 8008260:	20ff      	movs	r0, #255	; 0xff
 8008262:	e7f7      	b.n	8008254 <osSemaphoreWait+0x5c>
  return osOK;
 8008264:	2000      	movs	r0, #0
 8008266:	e7f5      	b.n	8008254 <osSemaphoreWait+0x5c>
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800826c:	b510      	push	{r4, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8008272:	2300      	movs	r3, #0
 8008274:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8008276:	f7ff ff1b 	bl	80080b0 <inHandlerMode>
 800827a:	b188      	cbz	r0, 80082a0 <osSemaphoreRelease+0x34>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800827c:	a901      	add	r1, sp, #4
 800827e:	4620      	mov	r0, r4
 8008280:	f000 fb7e 	bl	8008980 <xQueueGiveFromISR>
 8008284:	2801      	cmp	r0, #1
 8008286:	d116      	bne.n	80082b6 <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	b1b3      	cbz	r3, 80082ba <osSemaphoreRelease+0x4e>
 800828c:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <osSemaphoreRelease+0x58>)
 800828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800829c:	2000      	movs	r0, #0
 800829e:	e008      	b.n	80082b2 <osSemaphoreRelease+0x46>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80082a0:	2300      	movs	r3, #0
 80082a2:	461a      	mov	r2, r3
 80082a4:	4619      	mov	r1, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 fa20 	bl	80086ec <xQueueGenericSend>
 80082ac:	2801      	cmp	r0, #1
 80082ae:	d106      	bne.n	80082be <osSemaphoreRelease+0x52>
  osStatus result = osOK;
 80082b0:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 80082b2:	b002      	add	sp, #8
 80082b4:	bd10      	pop	{r4, pc}
      return osErrorOS;
 80082b6:	20ff      	movs	r0, #255	; 0xff
 80082b8:	e7fb      	b.n	80082b2 <osSemaphoreRelease+0x46>
  osStatus result = osOK;
 80082ba:	2000      	movs	r0, #0
 80082bc:	e7f9      	b.n	80082b2 <osSemaphoreRelease+0x46>
      result = osErrorOS;
 80082be:	20ff      	movs	r0, #255	; 0xff
 80082c0:	e7f7      	b.n	80082b2 <osSemaphoreRelease+0x46>
 80082c2:	bf00      	nop
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80082c8:	b510      	push	{r4, lr}
 80082ca:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80082cc:	6882      	ldr	r2, [r0, #8]
 80082ce:	b10a      	cbz	r2, 80082d4 <osMessageCreate+0xc>
 80082d0:	68c3      	ldr	r3, [r0, #12]
 80082d2:	b933      	cbnz	r3, 80082e2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082d4:	2200      	movs	r2, #0
 80082d6:	6841      	ldr	r1, [r0, #4]
 80082d8:	6800      	ldr	r0, [r0, #0]
 80082da:	f000 f99a 	bl	8008612 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80082de:	b002      	add	sp, #8
 80082e0:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80082e2:	6841      	ldr	r1, [r0, #4]
 80082e4:	6800      	ldr	r0, [r0, #0]
 80082e6:	2400      	movs	r4, #0
 80082e8:	9400      	str	r4, [sp, #0]
 80082ea:	f000 f94a 	bl	8008582 <xQueueGenericCreateStatic>
 80082ee:	e7f6      	b.n	80082de <osMessageCreate+0x16>

080082f0 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 80082f0:	b508      	push	{r3, lr}
  vTaskSuspendAll();
 80082f2:	f000 ff07 	bl	8009104 <vTaskSuspendAll>
  
  return osOK;
}
 80082f6:	2000      	movs	r0, #0
 80082f8:	bd08      	pop	{r3, pc}

080082fa <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 80082fa:	b508      	push	{r3, lr}
  if (xTaskResumeAll() == pdTRUE)
 80082fc:	f000 ff9c 	bl	8009238 <xTaskResumeAll>
 8008300:	2801      	cmp	r0, #1
 8008302:	d101      	bne.n	8008308 <osThreadResumeAll+0xe>
    return osOK;
 8008304:	2000      	movs	r0, #0
  else
    return osErrorOS;
  
}
 8008306:	bd08      	pop	{r3, pc}
    return osErrorOS;
 8008308:	20ff      	movs	r0, #255	; 0xff
 800830a:	e7fc      	b.n	8008306 <osThreadResumeAll+0xc>

0800830c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830c:	f100 0308 	add.w	r3, r0, #8
 8008310:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008312:	f04f 32ff 	mov.w	r2, #4294967295
 8008316:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008318:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800831a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008320:	4770      	bx	lr

08008322 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008326:	4770      	bx	lr

08008328 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008328:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800832a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008334:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008336:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008338:	6803      	ldr	r3, [r0, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	6003      	str	r3, [r0, #0]
}
 800833e:	4770      	bx	lr

08008340 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008340:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008342:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008344:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008348:	d002      	beq.n	8008350 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834a:	f100 0208 	add.w	r2, r0, #8
 800834e:	e002      	b.n	8008356 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008350:	6902      	ldr	r2, [r0, #16]
 8008352:	e004      	b.n	800835e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008354:	461a      	mov	r2, r3
 8008356:	6853      	ldr	r3, [r2, #4]
 8008358:	681c      	ldr	r4, [r3, #0]
 800835a:	42ac      	cmp	r4, r5
 800835c:	d9fa      	bls.n	8008354 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800835e:	6853      	ldr	r3, [r2, #4]
 8008360:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008362:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008364:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008366:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008368:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800836a:	6803      	ldr	r3, [r0, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	6003      	str	r3, [r0, #0]
}
 8008370:	bc30      	pop	{r4, r5}
 8008372:	4770      	bx	lr

08008374 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008374:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008376:	6842      	ldr	r2, [r0, #4]
 8008378:	6881      	ldr	r1, [r0, #8]
 800837a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800837c:	6882      	ldr	r2, [r0, #8]
 800837e:	6841      	ldr	r1, [r0, #4]
 8008380:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	4282      	cmp	r2, r0
 8008386:	d005      	beq.n	8008394 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008388:	2200      	movs	r2, #0
 800838a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	3801      	subs	r0, #1
 8008390:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8008392:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008394:	6882      	ldr	r2, [r0, #8]
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	e7f6      	b.n	8008388 <uxListRemove+0x14>

0800839a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800839a:	b510      	push	{r4, lr}
 800839c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800839e:	f001 fcf9 	bl	8009d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d004      	beq.n	80083b4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80083aa:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80083ac:	f001 fd14 	bl	8009dd8 <vPortExitCritical>

	return xReturn;
}
 80083b0:	4620      	mov	r0, r4
 80083b2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80083b4:	2401      	movs	r4, #1
 80083b6:	e7f9      	b.n	80083ac <prvIsQueueFull+0x12>

080083b8 <prvIsQueueEmpty>:
{
 80083b8:	b510      	push	{r4, lr}
 80083ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80083bc:	f001 fcea 	bl	8009d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083c2:	b123      	cbz	r3, 80083ce <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80083c4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80083c6:	f001 fd07 	bl	8009dd8 <vPortExitCritical>
}
 80083ca:	4620      	mov	r0, r4
 80083cc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80083ce:	2401      	movs	r4, #1
 80083d0:	e7f9      	b.n	80083c6 <prvIsQueueEmpty+0xe>

080083d2 <prvCopyDataToQueue>:
{
 80083d2:	b570      	push	{r4, r5, r6, lr}
 80083d4:	4604      	mov	r4, r0
 80083d6:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80083dc:	b95a      	cbnz	r2, 80083f6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083de:	6803      	ldr	r3, [r0, #0]
 80083e0:	b11b      	cbz	r3, 80083ea <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80083e2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80083e4:	3501      	adds	r5, #1
 80083e6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80083ea:	6840      	ldr	r0, [r0, #4]
 80083ec:	f001 f9a4 	bl	8009738 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	6063      	str	r3, [r4, #4]
 80083f4:	e7f6      	b.n	80083e4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80083f6:	b96e      	cbnz	r6, 8008414 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80083f8:	6880      	ldr	r0, [r0, #8]
 80083fa:	f005 fb50 	bl	800da9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80083fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	4413      	add	r3, r2
 8008404:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008406:	6862      	ldr	r2, [r4, #4]
 8008408:	4293      	cmp	r3, r2
 800840a:	d319      	bcc.n	8008440 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008410:	2000      	movs	r0, #0
 8008412:	e7e7      	b.n	80083e4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	68c0      	ldr	r0, [r0, #12]
 8008416:	f005 fb42 	bl	800da9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800841a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800841c:	4252      	negs	r2, r2
 800841e:	68e3      	ldr	r3, [r4, #12]
 8008420:	4413      	add	r3, r2
 8008422:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	428b      	cmp	r3, r1
 8008428:	d202      	bcs.n	8008430 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	441a      	add	r2, r3
 800842e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008430:	2e02      	cmp	r6, #2
 8008432:	d001      	beq.n	8008438 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008434:	2000      	movs	r0, #0
 8008436:	e7d5      	b.n	80083e4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008438:	b125      	cbz	r5, 8008444 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800843a:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800843c:	2000      	movs	r0, #0
 800843e:	e7d1      	b.n	80083e4 <prvCopyDataToQueue+0x12>
 8008440:	2000      	movs	r0, #0
 8008442:	e7cf      	b.n	80083e4 <prvCopyDataToQueue+0x12>
 8008444:	2000      	movs	r0, #0
 8008446:	e7cd      	b.n	80083e4 <prvCopyDataToQueue+0x12>

08008448 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008448:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800844a:	b172      	cbz	r2, 800846a <prvCopyDataFromQueue+0x22>
{
 800844c:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800844e:	68c3      	ldr	r3, [r0, #12]
 8008450:	4413      	add	r3, r2
 8008452:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008454:	6844      	ldr	r4, [r0, #4]
 8008456:	42a3      	cmp	r3, r4
 8008458:	d301      	bcc.n	800845e <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800845a:	6803      	ldr	r3, [r0, #0]
 800845c:	60c3      	str	r3, [r0, #12]
 800845e:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008460:	68c1      	ldr	r1, [r0, #12]
 8008462:	4620      	mov	r0, r4
 8008464:	f005 fb1b 	bl	800da9e <memcpy>
}
 8008468:	bd10      	pop	{r4, pc}
 800846a:	4770      	bx	lr

0800846c <prvUnlockQueue>:
{
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008470:	f001 fc90 	bl	8009d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008474:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008478:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800847a:	e003      	b.n	8008484 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800847c:	f001 f8f6 	bl	800966c <vTaskMissedYield>
			--cTxLock;
 8008480:	3c01      	subs	r4, #1
 8008482:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008484:	2c00      	cmp	r4, #0
 8008486:	dd08      	ble.n	800849a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008488:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800848a:	b133      	cbz	r3, 800849a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800848c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008490:	f001 f842 	bl	8009518 <xTaskRemoveFromEventList>
 8008494:	2800      	cmp	r0, #0
 8008496:	d0f3      	beq.n	8008480 <prvUnlockQueue+0x14>
 8008498:	e7f0      	b.n	800847c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800849a:	23ff      	movs	r3, #255	; 0xff
 800849c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80084a0:	f001 fc9a 	bl	8009dd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80084a4:	f001 fc76 	bl	8009d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80084a8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80084ac:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ae:	e003      	b.n	80084b8 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80084b0:	f001 f8dc 	bl	800966c <vTaskMissedYield>
				--cRxLock;
 80084b4:	3c01      	subs	r4, #1
 80084b6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	dd08      	ble.n	80084ce <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084bc:	692b      	ldr	r3, [r5, #16]
 80084be:	b133      	cbz	r3, 80084ce <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c0:	f105 0010 	add.w	r0, r5, #16
 80084c4:	f001 f828 	bl	8009518 <xTaskRemoveFromEventList>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0f3      	beq.n	80084b4 <prvUnlockQueue+0x48>
 80084cc:	e7f0      	b.n	80084b0 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80084ce:	23ff      	movs	r3, #255	; 0xff
 80084d0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80084d4:	f001 fc80 	bl	8009dd8 <vPortExitCritical>
}
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080084dc <xQueueGenericReset>:
{
 80084dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80084de:	b940      	cbnz	r0, 80084f2 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericReset+0x14>
 80084f2:	4604      	mov	r4, r0
 80084f4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80084f6:	f001 fc4d 	bl	8009d94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80084fa:	6821      	ldr	r1, [r4, #0]
 80084fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80084fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008500:	fb03 1002 	mla	r0, r3, r2, r1
 8008504:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008506:	2000      	movs	r0, #0
 8008508:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800850a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800850c:	3a01      	subs	r2, #1
 800850e:	fb02 1303 	mla	r3, r2, r3, r1
 8008512:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008514:	23ff      	movs	r3, #255	; 0xff
 8008516:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800851a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800851e:	b9a5      	cbnz	r5, 800854a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	b91b      	cbnz	r3, 800852c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008524:	f001 fc58 	bl	8009dd8 <vPortExitCritical>
}
 8008528:	2001      	movs	r0, #1
 800852a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800852c:	f104 0010 	add.w	r0, r4, #16
 8008530:	f000 fff2 	bl	8009518 <xTaskRemoveFromEventList>
 8008534:	2800      	cmp	r0, #0
 8008536:	d0f5      	beq.n	8008524 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008538:	4b08      	ldr	r3, [pc, #32]	; (800855c <xQueueGenericReset+0x80>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	e7ec      	b.n	8008524 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800854a:	f104 0010 	add.w	r0, r4, #16
 800854e:	f7ff fedd 	bl	800830c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008552:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008556:	f7ff fed9 	bl	800830c <vListInitialise>
 800855a:	e7e3      	b.n	8008524 <xQueueGenericReset+0x48>
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <prvInitialiseNewQueue>:
{
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	461d      	mov	r5, r3
 8008564:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008566:	460b      	mov	r3, r1
 8008568:	b149      	cbz	r1, 800857e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800856a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800856c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800856e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008570:	2101      	movs	r1, #1
 8008572:	4620      	mov	r0, r4
 8008574:	f7ff ffb2 	bl	80084dc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008578:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800857c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800857e:	6024      	str	r4, [r4, #0]
 8008580:	e7f4      	b.n	800856c <prvInitialiseNewQueue+0xc>

08008582 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008582:	b940      	cbnz	r0, 8008596 <xQueueGenericCreateStatic+0x14>
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	e7fe      	b.n	8008594 <xQueueGenericCreateStatic+0x12>
	{
 8008596:	b510      	push	{r4, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800859c:	b153      	cbz	r3, 80085b4 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800859e:	b192      	cbz	r2, 80085c6 <xQueueGenericCreateStatic+0x44>
 80085a0:	b989      	cbnz	r1, 80085c6 <xQueueGenericCreateStatic+0x44>
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	e7fe      	b.n	80085b2 <xQueueGenericCreateStatic+0x30>
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	e7fe      	b.n	80085c4 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085c6:	b94a      	cbnz	r2, 80085dc <xQueueGenericCreateStatic+0x5a>
 80085c8:	b141      	cbz	r1, 80085dc <xQueueGenericCreateStatic+0x5a>
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	e7fe      	b.n	80085da <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085dc:	2050      	movs	r0, #80	; 0x50
 80085de:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085e0:	9803      	ldr	r0, [sp, #12]
 80085e2:	2850      	cmp	r0, #80	; 0x50
 80085e4:	d008      	beq.n	80085f8 <xQueueGenericCreateStatic+0x76>
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	e7fe      	b.n	80085f6 <xQueueGenericCreateStatic+0x74>
 80085f8:	4620      	mov	r0, r4
 80085fa:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008602:	9400      	str	r4, [sp, #0]
 8008604:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008608:	f7ff ffaa 	bl	8008560 <prvInitialiseNewQueue>
	}
 800860c:	4620      	mov	r0, r4
 800860e:	b004      	add	sp, #16
 8008610:	bd10      	pop	{r4, pc}

08008612 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008612:	b940      	cbnz	r0, 8008626 <xQueueGenericCreate+0x14>
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	e7fe      	b.n	8008624 <xQueueGenericCreate+0x12>
	{
 8008626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008628:	b083      	sub	sp, #12
 800862a:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800862c:	b111      	cbz	r1, 8008634 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862e:	fb01 f000 	mul.w	r0, r1, r0
 8008632:	e000      	b.n	8008636 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008634:	2000      	movs	r0, #0
 8008636:	4617      	mov	r7, r2
 8008638:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800863a:	3050      	adds	r0, #80	; 0x50
 800863c:	f001 fd0c 	bl	800a058 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008640:	4605      	mov	r5, r0
 8008642:	b150      	cbz	r0, 800865a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008644:	2300      	movs	r3, #0
 8008646:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800864a:	9000      	str	r0, [sp, #0]
 800864c:	463b      	mov	r3, r7
 800864e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008652:	4621      	mov	r1, r4
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff ff83 	bl	8008560 <prvInitialiseNewQueue>
	}
 800865a:	4628      	mov	r0, r5
 800865c:	b003      	add	sp, #12
 800865e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008660 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8008660:	b940      	cbnz	r0, 8008674 <xQueueCreateCountingSemaphoreStatic+0x14>
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	e7fe      	b.n	8008672 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008674:	4288      	cmp	r0, r1
 8008676:	d208      	bcs.n	800868a <xQueueCreateCountingSemaphoreStatic+0x2a>
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	e7fe      	b.n	8008688 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 800868a:	b510      	push	{r4, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	4613      	mov	r3, r2
 8008690:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008692:	2202      	movs	r2, #2
 8008694:	9200      	str	r2, [sp, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	4611      	mov	r1, r2
 800869a:	f7ff ff72 	bl	8008582 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800869e:	4603      	mov	r3, r0
 80086a0:	b100      	cbz	r0, 80086a4 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086a2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80086a4:	4618      	mov	r0, r3
 80086a6:	b002      	add	sp, #8
 80086a8:	bd10      	pop	{r4, pc}

080086aa <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80086aa:	b940      	cbnz	r0, 80086be <xQueueCreateCountingSemaphore+0x14>
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	e7fe      	b.n	80086bc <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086be:	4288      	cmp	r0, r1
 80086c0:	d208      	bcs.n	80086d4 <xQueueCreateCountingSemaphore+0x2a>
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	e7fe      	b.n	80086d2 <xQueueCreateCountingSemaphore+0x28>
	{
 80086d4:	b510      	push	{r4, lr}
 80086d6:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086d8:	2202      	movs	r2, #2
 80086da:	2100      	movs	r1, #0
 80086dc:	f7ff ff99 	bl	8008612 <xQueueGenericCreate>
		if( xHandle != NULL )
 80086e0:	4603      	mov	r3, r0
 80086e2:	b100      	cbz	r0, 80086e6 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086e4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80086e6:	4618      	mov	r0, r3
 80086e8:	bd10      	pop	{r4, pc}
	...

080086ec <xQueueGenericSend>:
{
 80086ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ee:	b085      	sub	sp, #20
 80086f0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80086f2:	b160      	cbz	r0, 800870e <xQueueGenericSend+0x22>
 80086f4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f6:	b999      	cbnz	r1, 8008720 <xQueueGenericSend+0x34>
 80086f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80086fa:	b18a      	cbz	r2, 8008720 <xQueueGenericSend+0x34>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	e7fe      	b.n	800870c <xQueueGenericSend+0x20>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	e7fe      	b.n	800871e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008720:	2b02      	cmp	r3, #2
 8008722:	d10b      	bne.n	800873c <xQueueGenericSend+0x50>
 8008724:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008726:	2a01      	cmp	r2, #1
 8008728:	d008      	beq.n	800873c <xQueueGenericSend+0x50>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	e7fe      	b.n	800873a <xQueueGenericSend+0x4e>
 800873c:	461e      	mov	r6, r3
 800873e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008740:	f000 ff9a 	bl	8009678 <xTaskGetSchedulerState>
 8008744:	b950      	cbnz	r0, 800875c <xQueueGenericSend+0x70>
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	b153      	cbz	r3, 8008760 <xQueueGenericSend+0x74>
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	e7fe      	b.n	800875a <xQueueGenericSend+0x6e>
 800875c:	2500      	movs	r5, #0
 800875e:	e03a      	b.n	80087d6 <xQueueGenericSend+0xea>
 8008760:	2500      	movs	r5, #0
 8008762:	e038      	b.n	80087d6 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008764:	4632      	mov	r2, r6
 8008766:	4639      	mov	r1, r7
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff fe32 	bl	80083d2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008770:	b94b      	cbnz	r3, 8008786 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008772:	b1a8      	cbz	r0, 80087a0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008774:	4b3b      	ldr	r3, [pc, #236]	; (8008864 <xQueueGenericSend+0x178>)
 8008776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	e00c      	b.n	80087a0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008786:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800878a:	f000 fec5 	bl	8009518 <xTaskRemoveFromEventList>
 800878e:	b138      	cbz	r0, 80087a0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008790:	4b34      	ldr	r3, [pc, #208]	; (8008864 <xQueueGenericSend+0x178>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087a0:	f001 fb1a 	bl	8009dd8 <vPortExitCritical>
				return pdPASS;
 80087a4:	2001      	movs	r0, #1
}
 80087a6:	b005      	add	sp, #20
 80087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80087aa:	f001 fb15 	bl	8009dd8 <vPortExitCritical>
					return errQUEUE_FULL;
 80087ae:	2000      	movs	r0, #0
 80087b0:	e7f9      	b.n	80087a6 <xQueueGenericSend+0xba>
					vTaskSetTimeOutState( &xTimeOut );
 80087b2:	a802      	add	r0, sp, #8
 80087b4:	f000 fef6 	bl	80095a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087b8:	2501      	movs	r5, #1
 80087ba:	e019      	b.n	80087f0 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 80087bc:	2300      	movs	r3, #0
 80087be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80087c2:	e021      	b.n	8008808 <xQueueGenericSend+0x11c>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ca:	e023      	b.n	8008814 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7ff fe4d 	bl	800846c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087d2:	f000 fd31 	bl	8009238 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80087d6:	f001 fadd 	bl	8009d94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087de:	429a      	cmp	r2, r3
 80087e0:	d3c0      	bcc.n	8008764 <xQueueGenericSend+0x78>
 80087e2:	2e02      	cmp	r6, #2
 80087e4:	d0be      	beq.n	8008764 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0de      	beq.n	80087aa <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	d0e0      	beq.n	80087b2 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80087f0:	f001 faf2 	bl	8009dd8 <vPortExitCritical>
		vTaskSuspendAll();
 80087f4:	f000 fc86 	bl	8009104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087f8:	f001 facc 	bl	8009d94 <vPortEnterCritical>
 80087fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008800:	b25b      	sxtb	r3, r3
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d0d9      	beq.n	80087bc <xQueueGenericSend+0xd0>
 8008808:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800880c:	b25b      	sxtb	r3, r3
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d0d7      	beq.n	80087c4 <xQueueGenericSend+0xd8>
 8008814:	f001 fae0 	bl	8009dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008818:	a901      	add	r1, sp, #4
 800881a:	a802      	add	r0, sp, #8
 800881c:	f000 fed8 	bl	80095d0 <xTaskCheckForTimeOut>
 8008820:	b9c8      	cbnz	r0, 8008856 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff fdb9 	bl	800839a <prvIsQueueFull>
 8008828:	2800      	cmp	r0, #0
 800882a:	d0cf      	beq.n	80087cc <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800882c:	9901      	ldr	r1, [sp, #4]
 800882e:	f104 0010 	add.w	r0, r4, #16
 8008832:	f000 fe3d 	bl	80094b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff fe18 	bl	800846c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800883c:	f000 fcfc 	bl	8009238 <xTaskResumeAll>
 8008840:	2800      	cmp	r0, #0
 8008842:	d1c8      	bne.n	80087d6 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008844:	4b07      	ldr	r3, [pc, #28]	; (8008864 <xQueueGenericSend+0x178>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	e7bf      	b.n	80087d6 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008856:	4620      	mov	r0, r4
 8008858:	f7ff fe08 	bl	800846c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800885c:	f000 fcec 	bl	8009238 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008860:	2000      	movs	r0, #0
 8008862:	e7a0      	b.n	80087a6 <xQueueGenericSend+0xba>
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008868:	b148      	cbz	r0, 800887e <prvInitialiseMutex+0x16>
	{
 800886a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800886c:	2100      	movs	r1, #0
 800886e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008870:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008872:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008874:	460b      	mov	r3, r1
 8008876:	460a      	mov	r2, r1
 8008878:	f7ff ff38 	bl	80086ec <xQueueGenericSend>
	}
 800887c:	bd08      	pop	{r3, pc}
 800887e:	4770      	bx	lr

08008880 <xQueueCreateMutex>:
	{
 8008880:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008882:	4602      	mov	r2, r0
 8008884:	2100      	movs	r1, #0
 8008886:	2001      	movs	r0, #1
 8008888:	f7ff fec3 	bl	8008612 <xQueueGenericCreate>
 800888c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800888e:	f7ff ffeb 	bl	8008868 <prvInitialiseMutex>
	}
 8008892:	4620      	mov	r0, r4
 8008894:	bd10      	pop	{r4, pc}

08008896 <xQueueCreateMutexStatic>:
	{
 8008896:	b510      	push	{r4, lr}
 8008898:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800889a:	9000      	str	r0, [sp, #0]
 800889c:	460b      	mov	r3, r1
 800889e:	2200      	movs	r2, #0
 80088a0:	4611      	mov	r1, r2
 80088a2:	2001      	movs	r0, #1
 80088a4:	f7ff fe6d 	bl	8008582 <xQueueGenericCreateStatic>
 80088a8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80088aa:	f7ff ffdd 	bl	8008868 <prvInitialiseMutex>
	}
 80088ae:	4620      	mov	r0, r4
 80088b0:	b002      	add	sp, #8
 80088b2:	bd10      	pop	{r4, pc}

080088b4 <xQueueGenericSendFromISR>:
{
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80088b8:	b160      	cbz	r0, 80088d4 <xQueueGenericSendFromISR+0x20>
 80088ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088bc:	b999      	cbnz	r1, 80088e6 <xQueueGenericSendFromISR+0x32>
 80088be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80088c0:	b188      	cbz	r0, 80088e6 <xQueueGenericSendFromISR+0x32>
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	e7fe      	b.n	80088d2 <xQueueGenericSendFromISR+0x1e>
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	e7fe      	b.n	80088e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d10b      	bne.n	8008902 <xQueueGenericSendFromISR+0x4e>
 80088ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80088ec:	2801      	cmp	r0, #1
 80088ee:	d008      	beq.n	8008902 <xQueueGenericSendFromISR+0x4e>
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	e7fe      	b.n	8008900 <xQueueGenericSendFromISR+0x4c>
 8008902:	461f      	mov	r7, r3
 8008904:	4690      	mov	r8, r2
 8008906:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008908:	f001 fb1c 	bl	8009f44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800890c:	f3ef 8611 	mrs	r6, BASEPRI
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008924:	429a      	cmp	r2, r3
 8008926:	d303      	bcc.n	8008930 <xQueueGenericSendFromISR+0x7c>
 8008928:	2f02      	cmp	r7, #2
 800892a:	d001      	beq.n	8008930 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800892c:	2000      	movs	r0, #0
 800892e:	e00f      	b.n	8008950 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008930:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008934:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008936:	463a      	mov	r2, r7
 8008938:	4649      	mov	r1, r9
 800893a:	4620      	mov	r0, r4
 800893c:	f7ff fd49 	bl	80083d2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008940:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008944:	d008      	beq.n	8008958 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008946:	1c6b      	adds	r3, r5, #1
 8008948:	b25b      	sxtb	r3, r3
 800894a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800894e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008950:	f386 8811 	msr	BASEPRI, r6
}
 8008954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800895a:	b15b      	cbz	r3, 8008974 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008960:	f000 fdda 	bl	8009518 <xTaskRemoveFromEventList>
 8008964:	b140      	cbz	r0, 8008978 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	d007      	beq.n	800897c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800896c:	2001      	movs	r0, #1
 800896e:	f8c8 0000 	str.w	r0, [r8]
 8008972:	e7ed      	b.n	8008950 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8008974:	2001      	movs	r0, #1
 8008976:	e7eb      	b.n	8008950 <xQueueGenericSendFromISR+0x9c>
 8008978:	2001      	movs	r0, #1
 800897a:	e7e9      	b.n	8008950 <xQueueGenericSendFromISR+0x9c>
 800897c:	2001      	movs	r0, #1
 800897e:	e7e7      	b.n	8008950 <xQueueGenericSendFromISR+0x9c>

08008980 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008980:	b160      	cbz	r0, 800899c <xQueueGiveFromISR+0x1c>
{
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008986:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008988:	b18b      	cbz	r3, 80089ae <xQueueGiveFromISR+0x2e>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	e7fe      	b.n	800899a <xQueueGiveFromISR+0x1a>
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	e7fe      	b.n	80089ac <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80089ae:	6803      	ldr	r3, [r0, #0]
 80089b0:	b32b      	cbz	r3, 80089fe <xQueueGiveFromISR+0x7e>
 80089b2:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b4:	f001 fac6 	bl	8009f44 <vPortValidateInterruptPriority>
	__asm volatile
 80089b8:	f3ef 8511 	mrs	r5, BASEPRI
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d926      	bls.n	8008a22 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80089d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089d8:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80089da:	3201      	adds	r2, #1
 80089dc:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d118      	bne.n	8008a16 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e6:	b1f3      	cbz	r3, 8008a26 <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089ec:	f000 fd94 	bl	8009518 <xTaskRemoveFromEventList>
 80089f0:	b1d8      	cbz	r0, 8008a2a <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80089f2:	b1e6      	cbz	r6, 8008a2e <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089f4:	2001      	movs	r0, #1
 80089f6:	6030      	str	r0, [r6, #0]
	__asm volatile
 80089f8:	f385 8811 	msr	BASEPRI, r5
}
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80089fe:	6843      	ldr	r3, [r0, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0d6      	beq.n	80089b2 <xQueueGiveFromISR+0x32>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	e7fe      	b.n	8008a14 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a16:	3301      	adds	r3, #1
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008a1e:	2001      	movs	r0, #1
 8008a20:	e7ea      	b.n	80089f8 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8008a22:	2000      	movs	r0, #0
 8008a24:	e7e8      	b.n	80089f8 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8008a26:	2001      	movs	r0, #1
 8008a28:	e7e6      	b.n	80089f8 <xQueueGiveFromISR+0x78>
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	e7e4      	b.n	80089f8 <xQueueGiveFromISR+0x78>
 8008a2e:	2001      	movs	r0, #1
 8008a30:	e7e2      	b.n	80089f8 <xQueueGiveFromISR+0x78>
	...

08008a34 <xQueueGenericReceive>:
{
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008a3c:	b160      	cbz	r0, 8008a58 <xQueueGenericReceive+0x24>
 8008a3e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a40:	b999      	cbnz	r1, 8008a6a <xQueueGenericReceive+0x36>
 8008a42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008a44:	b18a      	cbz	r2, 8008a6a <xQueueGenericReceive+0x36>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	e7fe      	b.n	8008a56 <xQueueGenericReceive+0x22>
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	e7fe      	b.n	8008a68 <xQueueGenericReceive+0x34>
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a6e:	f000 fe03 	bl	8009678 <xTaskGetSchedulerState>
 8008a72:	b950      	cbnz	r0, 8008a8a <xQueueGenericReceive+0x56>
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	b153      	cbz	r3, 8008a8e <xQueueGenericReceive+0x5a>
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericReceive+0x54>
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	e05f      	b.n	8008b4e <xQueueGenericReceive+0x11a>
 8008a8e:	2600      	movs	r6, #0
 8008a90:	e05d      	b.n	8008b4e <xQueueGenericReceive+0x11a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8008a92:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a94:	4641      	mov	r1, r8
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff fcd6 	bl	8008448 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8008a9c:	b9df      	cbnz	r7, 8008ad6 <xQueueGenericReceive+0xa2>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8008a9e:	3d01      	subs	r5, #1
 8008aa0:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	b913      	cbnz	r3, 8008aac <xQueueGenericReceive+0x78>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008aa6:	f000 fe9f 	bl	80097e8 <pvTaskIncrementMutexHeldCount>
 8008aaa:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	b163      	cbz	r3, 8008aca <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ab0:	f104 0010 	add.w	r0, r4, #16
 8008ab4:	f000 fd30 	bl	8009518 <xTaskRemoveFromEventList>
 8008ab8:	b138      	cbz	r0, 8008aca <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8008aba:	4b46      	ldr	r3, [pc, #280]	; (8008bd4 <xQueueGenericReceive+0x1a0>)
 8008abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008aca:	f001 f985 	bl	8009dd8 <vPortExitCritical>
				return pdPASS;
 8008ace:	2001      	movs	r0, #1
}
 8008ad0:	b004      	add	sp, #16
 8008ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8008ad6:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f5      	beq.n	8008aca <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ade:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ae2:	f000 fd19 	bl	8009518 <xTaskRemoveFromEventList>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0ef      	beq.n	8008aca <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8008aea:	4b3a      	ldr	r3, [pc, #232]	; (8008bd4 <xQueueGenericReceive+0x1a0>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	e7e6      	b.n	8008aca <xQueueGenericReceive+0x96>
					taskEXIT_CRITICAL();
 8008afc:	f001 f96c 	bl	8009dd8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008b00:	2000      	movs	r0, #0
 8008b02:	e7e5      	b.n	8008ad0 <xQueueGenericReceive+0x9c>
					vTaskSetTimeOutState( &xTimeOut );
 8008b04:	a802      	add	r0, sp, #8
 8008b06:	f000 fd4d 	bl	80095a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b0a:	2601      	movs	r6, #1
 8008b0c:	e029      	b.n	8008b62 <xQueueGenericReceive+0x12e>
		prvLockQueue( pxQueue );
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b14:	e031      	b.n	8008b7a <xQueueGenericReceive+0x146>
 8008b16:	2300      	movs	r3, #0
 8008b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b1c:	e033      	b.n	8008b86 <xQueueGenericReceive+0x152>
						taskENTER_CRITICAL();
 8008b1e:	f001 f939 	bl	8009d94 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008b22:	6860      	ldr	r0, [r4, #4]
 8008b24:	f000 fdb8 	bl	8009698 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8008b28:	f001 f956 	bl	8009dd8 <vPortExitCritical>
 8008b2c:	e03b      	b.n	8008ba6 <xQueueGenericReceive+0x172>
				prvUnlockQueue( pxQueue );
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f7ff fc9c 	bl	800846c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b34:	f000 fb80 	bl	8009238 <xTaskResumeAll>
 8008b38:	e009      	b.n	8008b4e <xQueueGenericReceive+0x11a>
			prvUnlockQueue( pxQueue );
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7ff fc96 	bl	800846c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b40:	f000 fb7a 	bl	8009238 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7ff fc37 	bl	80083b8 <prvIsQueueEmpty>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d140      	bne.n	8008bd0 <xQueueGenericReceive+0x19c>
		taskENTER_CRITICAL();
 8008b4e:	f001 f921 	bl	8009d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	d19c      	bne.n	8008a92 <xQueueGenericReceive+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0ce      	beq.n	8008afc <xQueueGenericReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	d0d0      	beq.n	8008b04 <xQueueGenericReceive+0xd0>
		taskEXIT_CRITICAL();
 8008b62:	f001 f939 	bl	8009dd8 <vPortExitCritical>
		vTaskSuspendAll();
 8008b66:	f000 facd 	bl	8009104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6a:	f001 f913 	bl	8009d94 <vPortEnterCritical>
 8008b6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b78:	d0c9      	beq.n	8008b0e <xQueueGenericReceive+0xda>
 8008b7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d0c7      	beq.n	8008b16 <xQueueGenericReceive+0xe2>
 8008b86:	f001 f927 	bl	8009dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8a:	a901      	add	r1, sp, #4
 8008b8c:	a802      	add	r0, sp, #8
 8008b8e:	f000 fd1f 	bl	80095d0 <xTaskCheckForTimeOut>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1d1      	bne.n	8008b3a <xQueueGenericReceive+0x106>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff fc0e 	bl	80083b8 <prvIsQueueEmpty>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0c6      	beq.n	8008b2e <xQueueGenericReceive+0xfa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0bb      	beq.n	8008b1e <xQueueGenericReceive+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ba6:	9901      	ldr	r1, [sp, #4]
 8008ba8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bac:	f000 fc80 	bl	80094b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7ff fc5b 	bl	800846c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bb6:	f000 fb3f 	bl	8009238 <xTaskResumeAll>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d1c7      	bne.n	8008b4e <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <xQueueGenericReceive+0x1a0>)
 8008bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	e7be      	b.n	8008b4e <xQueueGenericReceive+0x11a>
				return errQUEUE_EMPTY;
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e77d      	b.n	8008ad0 <xQueueGenericReceive+0x9c>
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <xQueueReceiveFromISR>:
{
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008bdc:	b160      	cbz	r0, 8008bf8 <xQueueReceiveFromISR+0x20>
 8008bde:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008be0:	b999      	cbnz	r1, 8008c0a <xQueueReceiveFromISR+0x32>
 8008be2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008be4:	b18b      	cbz	r3, 8008c0a <xQueueReceiveFromISR+0x32>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	e7fe      	b.n	8008bf6 <xQueueReceiveFromISR+0x1e>
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	e7fe      	b.n	8008c08 <xQueueReceiveFromISR+0x30>
 8008c0a:	4617      	mov	r7, r2
 8008c0c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0e:	f001 f999 	bl	8009f44 <vPortValidateInterruptPriority>
	__asm volatile
 8008c12:	f3ef 8611 	mrs	r6, BASEPRI
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c26:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	d01d      	beq.n	8008c6c <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c30:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008c34:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c36:	4649      	mov	r1, r9
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff fc05 	bl	8008448 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8008c3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008c42:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008c44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008c48:	d005      	beq.n	8008c56 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c4a:	1c6b      	adds	r3, r5, #1
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8008c52:	2001      	movs	r0, #1
 8008c54:	e00b      	b.n	8008c6e <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	b16b      	cbz	r3, 8008c76 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c5a:	f104 0010 	add.w	r0, r4, #16
 8008c5e:	f000 fc5b 	bl	8009518 <xTaskRemoveFromEventList>
 8008c62:	b150      	cbz	r0, 8008c7a <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8008c64:	b15f      	cbz	r7, 8008c7e <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c66:	2001      	movs	r0, #1
 8008c68:	6038      	str	r0, [r7, #0]
 8008c6a:	e000      	b.n	8008c6e <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8008c6c:	2000      	movs	r0, #0
	__asm volatile
 8008c6e:	f386 8811 	msr	BASEPRI, r6
}
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 8008c76:	2001      	movs	r0, #1
 8008c78:	e7f9      	b.n	8008c6e <xQueueReceiveFromISR+0x96>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e7f7      	b.n	8008c6e <xQueueReceiveFromISR+0x96>
 8008c7e:	2001      	movs	r0, #1
 8008c80:	e7f5      	b.n	8008c6e <xQueueReceiveFromISR+0x96>
	...

08008c84 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c84:	2300      	movs	r3, #0
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	d80c      	bhi.n	8008ca4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <vQueueAddToRegistry+0x24>)
 8008c8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c90:	b10a      	cbz	r2, 8008c96 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c92:	3301      	adds	r3, #1
 8008c94:	e7f7      	b.n	8008c86 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c96:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <vQueueAddToRegistry+0x24>)
 8008c98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ca0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ca2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20006098 	.word	0x20006098

08008cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cb4:	f001 f86e 	bl	8009d94 <vPortEnterCritical>
 8008cb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d00d      	beq.n	8008ce0 <vQueueWaitForMessageRestricted+0x34>
 8008cc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d00b      	beq.n	8008ce8 <vQueueWaitForMessageRestricted+0x3c>
 8008cd0:	f001 f882 	bl	8009dd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cd6:	b15b      	cbz	r3, 8008cf0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7ff fbc7 	bl	800846c <prvUnlockQueue>
	}
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ce6:	e7ed      	b.n	8008cc4 <vQueueWaitForMessageRestricted+0x18>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cee:	e7ef      	b.n	8008cd0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cf8:	f000 fbf2 	bl	80094e0 <vTaskPlaceOnEventListRestricted>
 8008cfc:	e7ec      	b.n	8008cd8 <vQueueWaitForMessageRestricted+0x2c>
	...

08008d00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d00:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <prvResetNextTaskUnblockTime+0x24>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	b13b      	cbz	r3, 8008d18 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d08:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <prvResetNextTaskUnblockTime+0x24>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <prvResetNextTaskUnblockTime+0x28>)
 8008d14:	601a      	str	r2, [r3, #0]
	}
}
 8008d16:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d18:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <prvResetNextTaskUnblockTime+0x28>)
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20001304 	.word	0x20001304
 8008d28:	200013dc 	.word	0x200013dc

08008d2c <prvInitialiseNewTask>:
{
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	4681      	mov	r9, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	4617      	mov	r7, r2
 8008d36:	469a      	mov	sl, r3
 8008d38:	9e08      	ldr	r6, [sp, #32]
 8008d3a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d40:	0092      	lsls	r2, r2, #2
 8008d42:	21a5      	movs	r1, #165	; 0xa5
 8008d44:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008d46:	f004 feb5 	bl	800dab4 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d4c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008d50:	3a01      	subs	r2, #1
 8008d52:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008d56:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2b0f      	cmp	r3, #15
 8008d5e:	d807      	bhi.n	8008d70 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d60:	5ce9      	ldrb	r1, [r5, r3]
 8008d62:	18e2      	adds	r2, r4, r3
 8008d64:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8008d68:	5cea      	ldrb	r2, [r5, r3]
 8008d6a:	b10a      	cbz	r2, 8008d70 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	e7f5      	b.n	8008d5c <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d70:	2300      	movs	r3, #0
 8008d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d76:	2e06      	cmp	r6, #6
 8008d78:	d900      	bls.n	8008d7c <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d7a:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008d7c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008d7e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d80:	2500      	movs	r5, #0
 8008d82:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d84:	1d20      	adds	r0, r4, #4
 8008d86:	f7ff facc 	bl	8008322 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d8a:	f104 0018 	add.w	r0, r4, #24
 8008d8e:	f7ff fac8 	bl	8008322 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d92:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d94:	f1c6 0607 	rsb	r6, r6, #7
 8008d98:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d9a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008d9c:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008d9e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8008da0:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008da2:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008da6:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008daa:	4652      	mov	r2, sl
 8008dac:	4649      	mov	r1, r9
 8008dae:	4638      	mov	r0, r7
 8008db0:	f000 ffc6 	bl	8009d40 <pxPortInitialiseStack>
 8008db4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008db6:	f1b8 0f00 	cmp.w	r8, #0
 8008dba:	d001      	beq.n	8008dc0 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dbc:	f8c8 4000 	str.w	r4, [r8]
}
 8008dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008dc4 <prvInitialiseTaskLists>:
{
 8008dc4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	e007      	b.n	8008dda <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008dce:	0093      	lsls	r3, r2, #2
 8008dd0:	480e      	ldr	r0, [pc, #56]	; (8008e0c <prvInitialiseTaskLists+0x48>)
 8008dd2:	4418      	add	r0, r3
 8008dd4:	f7ff fa9a 	bl	800830c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dd8:	3401      	adds	r4, #1
 8008dda:	2c06      	cmp	r4, #6
 8008ddc:	d9f5      	bls.n	8008dca <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008dde:	4d0c      	ldr	r5, [pc, #48]	; (8008e10 <prvInitialiseTaskLists+0x4c>)
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7ff fa93 	bl	800830c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008de6:	4c0b      	ldr	r4, [pc, #44]	; (8008e14 <prvInitialiseTaskLists+0x50>)
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff fa8f 	bl	800830c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dee:	480a      	ldr	r0, [pc, #40]	; (8008e18 <prvInitialiseTaskLists+0x54>)
 8008df0:	f7ff fa8c 	bl	800830c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008df4:	4809      	ldr	r0, [pc, #36]	; (8008e1c <prvInitialiseTaskLists+0x58>)
 8008df6:	f7ff fa89 	bl	800830c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008dfa:	4809      	ldr	r0, [pc, #36]	; (8008e20 <prvInitialiseTaskLists+0x5c>)
 8008dfc:	f7ff fa86 	bl	800830c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <prvInitialiseTaskLists+0x60>)
 8008e02:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e04:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <prvInitialiseTaskLists+0x64>)
 8008e06:	601c      	str	r4, [r3, #0]
}
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	bf00      	nop
 8008e0c:	2000130c 	.word	0x2000130c
 8008e10:	200013b4 	.word	0x200013b4
 8008e14:	200013c8 	.word	0x200013c8
 8008e18:	200013e4 	.word	0x200013e4
 8008e1c:	20001410 	.word	0x20001410
 8008e20:	200013fc 	.word	0x200013fc
 8008e24:	20001304 	.word	0x20001304
 8008e28:	20001308 	.word	0x20001308

08008e2c <prvAddNewTaskToReadyList>:
{
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008e30:	f000 ffb0 	bl	8009d94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008e34:	4a21      	ldr	r2, [pc, #132]	; (8008ebc <prvAddNewTaskToReadyList+0x90>)
 8008e36:	6813      	ldr	r3, [r2, #0]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e3c:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <prvAddNewTaskToReadyList+0x94>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	b15b      	cbz	r3, 8008e5a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008e42:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <prvAddNewTaskToReadyList+0x98>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	b96b      	cbnz	r3, 8008e64 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <prvAddNewTaskToReadyList+0x94>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d807      	bhi.n	8008e64 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <prvAddNewTaskToReadyList+0x94>)
 8008e56:	601c      	str	r4, [r3, #0]
 8008e58:	e004      	b.n	8008e64 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8008e5a:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <prvAddNewTaskToReadyList+0x94>)
 8008e5c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d027      	beq.n	8008eb4 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <prvAddNewTaskToReadyList+0x9c>)
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e6c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008e6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e70:	2201      	movs	r2, #1
 8008e72:	409a      	lsls	r2, r3
 8008e74:	4915      	ldr	r1, [pc, #84]	; (8008ecc <prvAddNewTaskToReadyList+0xa0>)
 8008e76:	6808      	ldr	r0, [r1, #0]
 8008e78:	4302      	orrs	r2, r0
 8008e7a:	600a      	str	r2, [r1, #0]
 8008e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008e80:	009a      	lsls	r2, r3, #2
 8008e82:	1d21      	adds	r1, r4, #4
 8008e84:	4812      	ldr	r0, [pc, #72]	; (8008ed0 <prvAddNewTaskToReadyList+0xa4>)
 8008e86:	4410      	add	r0, r2
 8008e88:	f7ff fa4e 	bl	8008328 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008e8c:	f000 ffa4 	bl	8009dd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <prvAddNewTaskToReadyList+0x98>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b16b      	cbz	r3, 8008eb2 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <prvAddNewTaskToReadyList+0x94>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d207      	bcs.n	8008eb2 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8008ea2:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <prvAddNewTaskToReadyList+0xa8>)
 8008ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	f3bf 8f6f 	isb	sy
}
 8008eb2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8008eb4:	f7ff ff86 	bl	8008dc4 <prvInitialiseTaskLists>
 8008eb8:	e7d4      	b.n	8008e64 <prvAddNewTaskToReadyList+0x38>
 8008eba:	bf00      	nop
 8008ebc:	2000139c 	.word	0x2000139c
 8008ec0:	20001300 	.word	0x20001300
 8008ec4:	200013f8 	.word	0x200013f8
 8008ec8:	200013ac 	.word	0x200013ac
 8008ecc:	200013b0 	.word	0x200013b0
 8008ed0:	2000130c 	.word	0x2000130c
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <prvDeleteTCB>:
	{
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008edc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8008ee0:	b933      	cbnz	r3, 8008ef0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8008ee2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008ee4:	f001 f946 	bl	800a174 <vPortFree>
				vPortFree( pxTCB );
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f001 f943 	bl	800a174 <vPortFree>
	}
 8008eee:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d00a      	beq.n	8008f0a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d0fa      	beq.n	8008eee <prvDeleteTCB+0x16>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	e7fe      	b.n	8008f08 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8008f0a:	f001 f933 	bl	800a174 <vPortFree>
 8008f0e:	e7ee      	b.n	8008eee <prvDeleteTCB+0x16>

08008f10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f16:	4b1f      	ldr	r3, [pc, #124]	; (8008f94 <prvAddCurrentTaskToDelayedList+0x84>)
 8008f18:	681d      	ldr	r5, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008f1a:	4b1f      	ldr	r3, [pc, #124]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	3004      	adds	r0, #4
 8008f28:	f7ff fa24 	bl	8008374 <uxListRemove>
 8008f2c:	b950      	cbnz	r0, 8008f44 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008f2e:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f34:	2301      	movs	r3, #1
 8008f36:	fa03 f202 	lsl.w	r2, r3, r2
 8008f3a:	4918      	ldr	r1, [pc, #96]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x8c>)
 8008f3c:	680b      	ldr	r3, [r1, #0]
 8008f3e:	ea23 0302 	bic.w	r3, r3, r2
 8008f42:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f48:	d013      	beq.n	8008f72 <prvAddCurrentTaskToDelayedList+0x62>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f4a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f4c:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008f52:	42a5      	cmp	r5, r4
 8008f54:	d816      	bhi.n	8008f84 <prvAddCurrentTaskToDelayedList+0x74>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f56:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	3104      	adds	r1, #4
 8008f60:	f7ff f9ee 	bl	8008340 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d912      	bls.n	8008f92 <prvAddCurrentTaskToDelayedList+0x82>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f6e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f70:	e00f      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0x82>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f72:	2e00      	cmp	r6, #0
 8008f74:	d0e9      	beq.n	8008f4a <prvAddCurrentTaskToDelayedList+0x3a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	3104      	adds	r1, #4
 8008f7c:	480a      	ldr	r0, [pc, #40]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f7e:	f7ff f9d3 	bl	8008328 <vListInsertEnd>
 8008f82:	e006      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f84:	4b09      	ldr	r3, [pc, #36]	; (8008fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x88>)
 8008f8a:	6819      	ldr	r1, [r3, #0]
 8008f8c:	3104      	adds	r1, #4
 8008f8e:	f7ff f9d7 	bl	8008340 <vListInsert>
}
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	20001424 	.word	0x20001424
 8008f98:	20001300 	.word	0x20001300
 8008f9c:	200013b0 	.word	0x200013b0
 8008fa0:	20001304 	.word	0x20001304
 8008fa4:	200013dc 	.word	0x200013dc
 8008fa8:	200013fc 	.word	0x200013fc
 8008fac:	20001308 	.word	0x20001308

08008fb0 <xTaskCreateStatic>:
	{
 8008fb0:	b530      	push	{r4, r5, lr}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008fb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8008fb8:	b14d      	cbz	r5, 8008fce <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008fba:	b98c      	cbnz	r4, 8008fe0 <xTaskCreateStatic+0x30>
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	e7fe      	b.n	8008fcc <xTaskCreateStatic+0x1c>
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	e7fe      	b.n	8008fde <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fe0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fe2:	2502      	movs	r5, #2
 8008fe4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fe8:	2500      	movs	r5, #0
 8008fea:	9503      	str	r5, [sp, #12]
 8008fec:	9402      	str	r4, [sp, #8]
 8008fee:	ad05      	add	r5, sp, #20
 8008ff0:	9501      	str	r5, [sp, #4]
 8008ff2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008ff4:	9500      	str	r5, [sp, #0]
 8008ff6:	f7ff fe99 	bl	8008d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff ff16 	bl	8008e2c <prvAddNewTaskToReadyList>
	}
 8009000:	9805      	ldr	r0, [sp, #20]
 8009002:	b007      	add	sp, #28
 8009004:	bd30      	pop	{r4, r5, pc}

08009006 <xTaskCreate>:
	{
 8009006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800900a:	b085      	sub	sp, #20
 800900c:	4607      	mov	r7, r0
 800900e:	4688      	mov	r8, r1
 8009010:	4615      	mov	r5, r2
 8009012:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009014:	0090      	lsls	r0, r2, #2
 8009016:	f001 f81f 	bl	800a058 <pvPortMalloc>
			if( pxStack != NULL )
 800901a:	b308      	cbz	r0, 8009060 <xTaskCreate+0x5a>
 800901c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800901e:	2064      	movs	r0, #100	; 0x64
 8009020:	f001 f81a 	bl	800a058 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009024:	4604      	mov	r4, r0
 8009026:	b1b8      	cbz	r0, 8009058 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8009028:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800902a:	b1e4      	cbz	r4, 8009066 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800902c:	2300      	movs	r3, #0
 800902e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	9402      	str	r4, [sp, #8]
 8009036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	464b      	mov	r3, r9
 8009040:	462a      	mov	r2, r5
 8009042:	4641      	mov	r1, r8
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fe71 	bl	8008d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff feee 	bl	8008e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009050:	2001      	movs	r0, #1
	}
 8009052:	b005      	add	sp, #20
 8009054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009058:	4630      	mov	r0, r6
 800905a:	f001 f88b 	bl	800a174 <vPortFree>
 800905e:	e7e4      	b.n	800902a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e7f5      	b.n	8009052 <xTaskCreate+0x4c>
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800906a:	e7f2      	b.n	8009052 <xTaskCreate+0x4c>

0800906c <vTaskStartScheduler>:
{
 800906c:	b510      	push	{r4, lr}
 800906e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009070:	2400      	movs	r4, #0
 8009072:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009074:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009076:	aa07      	add	r2, sp, #28
 8009078:	a906      	add	r1, sp, #24
 800907a:	a805      	add	r0, sp, #20
 800907c:	f7f7 fbb6 	bl	80007ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	9b06      	ldr	r3, [sp, #24]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	9400      	str	r4, [sp, #0]
 800908a:	4623      	mov	r3, r4
 800908c:	9a07      	ldr	r2, [sp, #28]
 800908e:	4918      	ldr	r1, [pc, #96]	; (80090f0 <vTaskStartScheduler+0x84>)
 8009090:	4818      	ldr	r0, [pc, #96]	; (80090f4 <vTaskStartScheduler+0x88>)
 8009092:	f7ff ff8d 	bl	8008fb0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009096:	b140      	cbz	r0, 80090aa <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8009098:	f000 fc40 	bl	800991c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800909c:	2801      	cmp	r0, #1
 800909e:	d006      	beq.n	80090ae <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090a4:	d01a      	beq.n	80090dc <vTaskStartScheduler+0x70>
}
 80090a6:	b008      	add	sp, #32
 80090a8:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80090aa:	2000      	movs	r0, #0
 80090ac:	e7f6      	b.n	800909c <vTaskStartScheduler+0x30>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <vTaskStartScheduler+0x8c>)
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <vTaskStartScheduler+0x90>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80090cc:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <vTaskStartScheduler+0x94>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80090d2:	f7f7 fb86 	bl	80007e2 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80090d6:	f000 fee9 	bl	8009eac <xPortStartScheduler>
 80090da:	e7e4      	b.n	80090a6 <vTaskStartScheduler+0x3a>
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	e7fe      	b.n	80090ec <vTaskStartScheduler+0x80>
 80090ee:	bf00      	nop
 80090f0:	0800f328 	.word	0x0800f328
 80090f4:	080093d5 	.word	0x080093d5
 80090f8:	200013dc 	.word	0x200013dc
 80090fc:	200013f8 	.word	0x200013f8
 8009100:	20001424 	.word	0x20001424

08009104 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009104:	4a02      	ldr	r2, [pc, #8]	; (8009110 <vTaskSuspendAll+0xc>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	3301      	adds	r3, #1
 800910a:	6013      	str	r3, [r2, #0]
}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	200013a8 	.word	0x200013a8

08009114 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009114:	4b01      	ldr	r3, [pc, #4]	; (800911c <xTaskGetTickCount+0x8>)
 8009116:	6818      	ldr	r0, [r3, #0]
}
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20001424 	.word	0x20001424

08009120 <xTaskIncrementTick>:
{
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009122:	4b3a      	ldr	r3, [pc, #232]	; (800920c <xTaskIncrementTick+0xec>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d164      	bne.n	80091f4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800912a:	4b39      	ldr	r3, [pc, #228]	; (8009210 <xTaskIncrementTick+0xf0>)
 800912c:	681d      	ldr	r5, [r3, #0]
 800912e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009130:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8009132:	b9c5      	cbnz	r5, 8009166 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009134:	4b37      	ldr	r3, [pc, #220]	; (8009214 <xTaskIncrementTick+0xf4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	b143      	cbz	r3, 800914e <xTaskIncrementTick+0x2e>
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	e7fe      	b.n	800914c <xTaskIncrementTick+0x2c>
 800914e:	4a31      	ldr	r2, [pc, #196]	; (8009214 <xTaskIncrementTick+0xf4>)
 8009150:	6811      	ldr	r1, [r2, #0]
 8009152:	4b31      	ldr	r3, [pc, #196]	; (8009218 <xTaskIncrementTick+0xf8>)
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	6010      	str	r0, [r2, #0]
 8009158:	6019      	str	r1, [r3, #0]
 800915a:	4a30      	ldr	r2, [pc, #192]	; (800921c <xTaskIncrementTick+0xfc>)
 800915c:	6813      	ldr	r3, [r2, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	f7ff fdcd 	bl	8008d00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009166:	4b2e      	ldr	r3, [pc, #184]	; (8009220 <xTaskIncrementTick+0x100>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	42ab      	cmp	r3, r5
 800916c:	d938      	bls.n	80091e0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800916e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009170:	4b2c      	ldr	r3, [pc, #176]	; (8009224 <xTaskIncrementTick+0x104>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800917a:	009a      	lsls	r2, r3, #2
 800917c:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <xTaskIncrementTick+0x108>)
 800917e:	589b      	ldr	r3, [r3, r2]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d93c      	bls.n	80091fe <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009184:	2401      	movs	r4, #1
 8009186:	e03a      	b.n	80091fe <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009188:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800918a:	4b22      	ldr	r3, [pc, #136]	; (8009214 <xTaskIncrementTick+0xf4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	b343      	cbz	r3, 80091e4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009192:	4b20      	ldr	r3, [pc, #128]	; (8009214 <xTaskIncrementTick+0xf4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800919a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800919c:	429d      	cmp	r5, r3
 800919e:	d326      	bcc.n	80091ee <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091a0:	1d37      	adds	r7, r6, #4
 80091a2:	4638      	mov	r0, r7
 80091a4:	f7ff f8e6 	bl	8008374 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80091aa:	b11b      	cbz	r3, 80091b4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ac:	f106 0018 	add.w	r0, r6, #24
 80091b0:	f7ff f8e0 	bl	8008374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80091b6:	2201      	movs	r2, #1
 80091b8:	409a      	lsls	r2, r3
 80091ba:	491c      	ldr	r1, [pc, #112]	; (800922c <xTaskIncrementTick+0x10c>)
 80091bc:	6808      	ldr	r0, [r1, #0]
 80091be:	4302      	orrs	r2, r0
 80091c0:	600a      	str	r2, [r1, #0]
 80091c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091c6:	009a      	lsls	r2, r3, #2
 80091c8:	4639      	mov	r1, r7
 80091ca:	4817      	ldr	r0, [pc, #92]	; (8009228 <xTaskIncrementTick+0x108>)
 80091cc:	4410      	add	r0, r2
 80091ce:	f7ff f8ab 	bl	8008328 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80091d4:	4b13      	ldr	r3, [pc, #76]	; (8009224 <xTaskIncrementTick+0x104>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d2d4      	bcs.n	8009188 <xTaskIncrementTick+0x68>
 80091de:	e7d4      	b.n	800918a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80091e0:	2400      	movs	r4, #0
 80091e2:	e7d2      	b.n	800918a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <xTaskIncrementTick+0x100>)
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	601a      	str	r2, [r3, #0]
					break;
 80091ec:	e7c0      	b.n	8009170 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80091ee:	4a0c      	ldr	r2, [pc, #48]	; (8009220 <xTaskIncrementTick+0x100>)
 80091f0:	6013      	str	r3, [r2, #0]
						break;
 80091f2:	e7bd      	b.n	8009170 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80091f4:	4a0e      	ldr	r2, [pc, #56]	; (8009230 <xTaskIncrementTick+0x110>)
 80091f6:	6813      	ldr	r3, [r2, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80091fc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80091fe:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <xTaskIncrementTick+0x114>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	b103      	cbz	r3, 8009206 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009204:	2401      	movs	r4, #1
}
 8009206:	4620      	mov	r0, r4
 8009208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920a:	bf00      	nop
 800920c:	200013a8 	.word	0x200013a8
 8009210:	20001424 	.word	0x20001424
 8009214:	20001304 	.word	0x20001304
 8009218:	20001308 	.word	0x20001308
 800921c:	200013e0 	.word	0x200013e0
 8009220:	200013dc 	.word	0x200013dc
 8009224:	20001300 	.word	0x20001300
 8009228:	2000130c 	.word	0x2000130c
 800922c:	200013b0 	.word	0x200013b0
 8009230:	200013a4 	.word	0x200013a4
 8009234:	20001428 	.word	0x20001428

08009238 <xTaskResumeAll>:
{
 8009238:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800923a:	4b33      	ldr	r3, [pc, #204]	; (8009308 <xTaskResumeAll+0xd0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	b943      	cbnz	r3, 8009252 <xTaskResumeAll+0x1a>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	e7fe      	b.n	8009250 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009252:	f000 fd9f 	bl	8009d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009256:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <xTaskResumeAll+0xd0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	3a01      	subs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d14d      	bne.n	8009300 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009264:	4b29      	ldr	r3, [pc, #164]	; (800930c <xTaskResumeAll+0xd4>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	b923      	cbnz	r3, 8009274 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800926a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800926c:	f000 fdb4 	bl	8009dd8 <vPortExitCritical>
}
 8009270:	4620      	mov	r0, r4
 8009272:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8009274:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009276:	4b26      	ldr	r3, [pc, #152]	; (8009310 <xTaskResumeAll+0xd8>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	b31b      	cbz	r3, 80092c4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800927c:	4b24      	ldr	r3, [pc, #144]	; (8009310 <xTaskResumeAll+0xd8>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009282:	f104 0018 	add.w	r0, r4, #24
 8009286:	f7ff f875 	bl	8008374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800928a:	1d25      	adds	r5, r4, #4
 800928c:	4628      	mov	r0, r5
 800928e:	f7ff f871 	bl	8008374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009294:	2201      	movs	r2, #1
 8009296:	409a      	lsls	r2, r3
 8009298:	491e      	ldr	r1, [pc, #120]	; (8009314 <xTaskResumeAll+0xdc>)
 800929a:	6808      	ldr	r0, [r1, #0]
 800929c:	4302      	orrs	r2, r0
 800929e:	600a      	str	r2, [r1, #0]
 80092a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092a4:	009a      	lsls	r2, r3, #2
 80092a6:	4629      	mov	r1, r5
 80092a8:	481b      	ldr	r0, [pc, #108]	; (8009318 <xTaskResumeAll+0xe0>)
 80092aa:	4410      	add	r0, r2
 80092ac:	f7ff f83c 	bl	8008328 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80092b2:	4b1a      	ldr	r3, [pc, #104]	; (800931c <xTaskResumeAll+0xe4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d3dc      	bcc.n	8009276 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80092bc:	4b18      	ldr	r3, [pc, #96]	; (8009320 <xTaskResumeAll+0xe8>)
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e7d8      	b.n	8009276 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80092c4:	b10c      	cbz	r4, 80092ca <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80092c6:	f7ff fd1b 	bl	8008d00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092ca:	4b16      	ldr	r3, [pc, #88]	; (8009324 <xTaskResumeAll+0xec>)
 80092cc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092ce:	b154      	cbz	r4, 80092e6 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 80092d0:	f7ff ff26 	bl	8009120 <xTaskIncrementTick>
 80092d4:	b110      	cbz	r0, 80092dc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80092d6:	4b12      	ldr	r3, [pc, #72]	; (8009320 <xTaskResumeAll+0xe8>)
 80092d8:	2201      	movs	r2, #1
 80092da:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092dc:	3c01      	subs	r4, #1
 80092de:	d1f7      	bne.n	80092d0 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 80092e0:	4b10      	ldr	r3, [pc, #64]	; (8009324 <xTaskResumeAll+0xec>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80092e6:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <xTaskResumeAll+0xe8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	b15b      	cbz	r3, 8009304 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 80092ec:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <xTaskResumeAll+0xf0>)
 80092ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80092fc:	2401      	movs	r4, #1
 80092fe:	e7b5      	b.n	800926c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009300:	2400      	movs	r4, #0
 8009302:	e7b3      	b.n	800926c <xTaskResumeAll+0x34>
 8009304:	2400      	movs	r4, #0
 8009306:	e7b1      	b.n	800926c <xTaskResumeAll+0x34>
 8009308:	200013a8 	.word	0x200013a8
 800930c:	2000139c 	.word	0x2000139c
 8009310:	200013e4 	.word	0x200013e4
 8009314:	200013b0 	.word	0x200013b0
 8009318:	2000130c 	.word	0x2000130c
 800931c:	20001300 	.word	0x20001300
 8009320:	20001428 	.word	0x20001428
 8009324:	200013a4 	.word	0x200013a4
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <vTaskDelay>:
	{
 800932c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800932e:	b1a8      	cbz	r0, 800935c <vTaskDelay+0x30>
 8009330:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <vTaskDelay+0x44>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	b143      	cbz	r3, 800934a <vTaskDelay+0x1e>
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	e7fe      	b.n	8009348 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800934a:	f7ff fedb 	bl	8009104 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800934e:	2100      	movs	r1, #0
 8009350:	4620      	mov	r0, r4
 8009352:	f7ff fddd 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009356:	f7ff ff6f 	bl	8009238 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800935a:	b938      	cbnz	r0, 800936c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <vTaskDelay+0x48>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	f3bf 8f6f 	isb	sy
	}
 800936c:	bd10      	pop	{r4, pc}
 800936e:	bf00      	nop
 8009370:	200013a8 	.word	0x200013a8
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009378:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <prvCheckTasksWaitingTermination+0x50>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	b313      	cbz	r3, 80093c4 <prvCheckTasksWaitingTermination+0x4c>
{
 800937e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8009380:	f7ff fec0 	bl	8009104 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8009384:	4b11      	ldr	r3, [pc, #68]	; (80093cc <prvCheckTasksWaitingTermination+0x54>)
 8009386:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8009388:	f7ff ff56 	bl	8009238 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800938c:	b924      	cbnz	r4, 8009398 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800938e:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <prvCheckTasksWaitingTermination+0x50>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f4      	bne.n	8009380 <prvCheckTasksWaitingTermination+0x8>
}
 8009396:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8009398:	f000 fcfc 	bl	8009d94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <prvCheckTasksWaitingTermination+0x54>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a2:	1d20      	adds	r0, r4, #4
 80093a4:	f7fe ffe6 	bl	8008374 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80093a8:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <prvCheckTasksWaitingTermination+0x58>)
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80093b0:	4a05      	ldr	r2, [pc, #20]	; (80093c8 <prvCheckTasksWaitingTermination+0x50>)
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80093b8:	f000 fd0e 	bl	8009dd8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80093bc:	4620      	mov	r0, r4
 80093be:	f7ff fd8b 	bl	8008ed8 <prvDeleteTCB>
 80093c2:	e7e4      	b.n	800938e <prvCheckTasksWaitingTermination+0x16>
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	200013a0 	.word	0x200013a0
 80093cc:	20001410 	.word	0x20001410
 80093d0:	2000139c 	.word	0x2000139c

080093d4 <prvIdleTask>:
{
 80093d4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80093d6:	f7ff ffcf 	bl	8009378 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <prvIdleTask+0x20>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d9f9      	bls.n	80093d6 <prvIdleTask+0x2>
				taskYIELD();
 80093e2:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <prvIdleTask+0x24>)
 80093e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	e7f0      	b.n	80093d6 <prvIdleTask+0x2>
 80093f4:	2000130c 	.word	0x2000130c
 80093f8:	e000ed04 	.word	0xe000ed04

080093fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093fc:	4b26      	ldr	r3, [pc, #152]	; (8009498 <vTaskSwitchContext+0x9c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	b11b      	cbz	r3, 800940a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009402:	4b26      	ldr	r3, [pc, #152]	; (800949c <vTaskSwitchContext+0xa0>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	4770      	bx	lr
{
 800940a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800940c:	4b23      	ldr	r3, [pc, #140]	; (800949c <vTaskSwitchContext+0xa0>)
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009412:	f7f7 f9e7 	bl	80007e4 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009416:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <vTaskSwitchContext+0xa4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4298      	cmp	r0, r3
 800941c:	d905      	bls.n	800942a <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800941e:	4a21      	ldr	r2, [pc, #132]	; (80094a4 <vTaskSwitchContext+0xa8>)
 8009420:	6811      	ldr	r1, [r2, #0]
 8009422:	1ac3      	subs	r3, r0, r3
 8009424:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009426:	4413      	add	r3, r2
 8009428:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 800942a:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <vTaskSwitchContext+0xa4>)
 800942c:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800942e:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <vTaskSwitchContext+0xac>)
 8009430:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8009432:	fab3 f383 	clz	r3, r3
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f1c3 031f 	rsb	r3, r3, #31
 800943c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009440:	008a      	lsls	r2, r1, #2
 8009442:	491a      	ldr	r1, [pc, #104]	; (80094ac <vTaskSwitchContext+0xb0>)
 8009444:	588a      	ldr	r2, [r1, r2]
 8009446:	b942      	cbnz	r2, 800945a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	e7fe      	b.n	8009458 <vTaskSwitchContext+0x5c>
 800945a:	4814      	ldr	r0, [pc, #80]	; (80094ac <vTaskSwitchContext+0xb0>)
 800945c:	009a      	lsls	r2, r3, #2
 800945e:	18d4      	adds	r4, r2, r3
 8009460:	00a1      	lsls	r1, r4, #2
 8009462:	4401      	add	r1, r0
 8009464:	684c      	ldr	r4, [r1, #4]
 8009466:	6864      	ldr	r4, [r4, #4]
 8009468:	604c      	str	r4, [r1, #4]
 800946a:	441a      	add	r2, r3
 800946c:	0091      	lsls	r1, r2, #2
 800946e:	3108      	adds	r1, #8
 8009470:	4408      	add	r0, r1
 8009472:	4284      	cmp	r4, r0
 8009474:	d009      	beq.n	800948a <vTaskSwitchContext+0x8e>
 8009476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800947a:	009a      	lsls	r2, r3, #2
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <vTaskSwitchContext+0xb0>)
 800947e:	4413      	add	r3, r2
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <vTaskSwitchContext+0xa8>)
 8009486:	601a      	str	r2, [r3, #0]
}
 8009488:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800948a:	6861      	ldr	r1, [r4, #4]
 800948c:	4807      	ldr	r0, [pc, #28]	; (80094ac <vTaskSwitchContext+0xb0>)
 800948e:	2214      	movs	r2, #20
 8009490:	fb02 0203 	mla	r2, r2, r3, r0
 8009494:	6051      	str	r1, [r2, #4]
 8009496:	e7ee      	b.n	8009476 <vTaskSwitchContext+0x7a>
 8009498:	200013a8 	.word	0x200013a8
 800949c:	20001428 	.word	0x20001428
 80094a0:	20001398 	.word	0x20001398
 80094a4:	20001300 	.word	0x20001300
 80094a8:	200013b0 	.word	0x200013b0
 80094ac:	2000130c 	.word	0x2000130c

080094b0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80094b0:	b940      	cbnz	r0, 80094c4 <vTaskPlaceOnEventList+0x14>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	e7fe      	b.n	80094c2 <vTaskPlaceOnEventList+0x12>
{
 80094c4:	b510      	push	{r4, lr}
 80094c6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <vTaskPlaceOnEventList+0x2c>)
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	3118      	adds	r1, #24
 80094ce:	f7fe ff37 	bl	8008340 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094d2:	2101      	movs	r1, #1
 80094d4:	4620      	mov	r0, r4
 80094d6:	f7ff fd1b 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
}
 80094da:	bd10      	pop	{r4, pc}
 80094dc:	20001300 	.word	0x20001300

080094e0 <vTaskPlaceOnEventListRestricted>:
	{
 80094e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80094e2:	b940      	cbnz	r0, 80094f6 <vTaskPlaceOnEventListRestricted+0x16>
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	e7fe      	b.n	80094f4 <vTaskPlaceOnEventListRestricted+0x14>
 80094f6:	460c      	mov	r4, r1
 80094f8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094fa:	4a06      	ldr	r2, [pc, #24]	; (8009514 <vTaskPlaceOnEventListRestricted+0x34>)
 80094fc:	6811      	ldr	r1, [r2, #0]
 80094fe:	3118      	adds	r1, #24
 8009500:	f7fe ff12 	bl	8008328 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009504:	b10d      	cbz	r5, 800950a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8009506:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800950a:	4629      	mov	r1, r5
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fcff 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
	}
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	20001300 	.word	0x20001300

08009518 <xTaskRemoveFromEventList>:
{
 8009518:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800951a:	68c3      	ldr	r3, [r0, #12]
 800951c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800951e:	b944      	cbnz	r4, 8009532 <xTaskRemoveFromEventList+0x1a>
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	e7fe      	b.n	8009530 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009532:	f104 0518 	add.w	r5, r4, #24
 8009536:	4628      	mov	r0, r5
 8009538:	f7fe ff1c 	bl	8008374 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800953c:	4b13      	ldr	r3, [pc, #76]	; (800958c <xTaskRemoveFromEventList+0x74>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	b9e3      	cbnz	r3, 800957c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009542:	1d25      	adds	r5, r4, #4
 8009544:	4628      	mov	r0, r5
 8009546:	f7fe ff15 	bl	8008374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800954a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800954c:	2201      	movs	r2, #1
 800954e:	409a      	lsls	r2, r3
 8009550:	490f      	ldr	r1, [pc, #60]	; (8009590 <xTaskRemoveFromEventList+0x78>)
 8009552:	6808      	ldr	r0, [r1, #0]
 8009554:	4302      	orrs	r2, r0
 8009556:	600a      	str	r2, [r1, #0]
 8009558:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800955c:	009a      	lsls	r2, r3, #2
 800955e:	4629      	mov	r1, r5
 8009560:	480c      	ldr	r0, [pc, #48]	; (8009594 <xTaskRemoveFromEventList+0x7c>)
 8009562:	4410      	add	r0, r2
 8009564:	f7fe fee0 	bl	8008328 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009568:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <xTaskRemoveFromEventList+0x80>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	429a      	cmp	r2, r3
 8009572:	d908      	bls.n	8009586 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009574:	2001      	movs	r0, #1
 8009576:	4b09      	ldr	r3, [pc, #36]	; (800959c <xTaskRemoveFromEventList+0x84>)
 8009578:	6018      	str	r0, [r3, #0]
}
 800957a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800957c:	4629      	mov	r1, r5
 800957e:	4808      	ldr	r0, [pc, #32]	; (80095a0 <xTaskRemoveFromEventList+0x88>)
 8009580:	f7fe fed2 	bl	8008328 <vListInsertEnd>
 8009584:	e7f0      	b.n	8009568 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009586:	2000      	movs	r0, #0
	return xReturn;
 8009588:	e7f7      	b.n	800957a <xTaskRemoveFromEventList+0x62>
 800958a:	bf00      	nop
 800958c:	200013a8 	.word	0x200013a8
 8009590:	200013b0 	.word	0x200013b0
 8009594:	2000130c 	.word	0x2000130c
 8009598:	20001300 	.word	0x20001300
 800959c:	20001428 	.word	0x20001428
 80095a0:	200013e4 	.word	0x200013e4

080095a4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80095a4:	b130      	cbz	r0, 80095b4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095a6:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <vTaskSetTimeOutState+0x24>)
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095ac:	4a07      	ldr	r2, [pc, #28]	; (80095cc <vTaskSetTimeOutState+0x28>)
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	6042      	str	r2, [r0, #4]
}
 80095b2:	4770      	bx	lr
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	e7fe      	b.n	80095c4 <vTaskSetTimeOutState+0x20>
 80095c6:	bf00      	nop
 80095c8:	200013e0 	.word	0x200013e0
 80095cc:	20001424 	.word	0x20001424

080095d0 <xTaskCheckForTimeOut>:
{
 80095d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 80095d2:	b150      	cbz	r0, 80095ea <xTaskCheckForTimeOut+0x1a>
 80095d4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 80095d6:	b989      	cbnz	r1, 80095fc <xTaskCheckForTimeOut+0x2c>
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	e7fe      	b.n	80095e8 <xTaskCheckForTimeOut+0x18>
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	e7fe      	b.n	80095fa <xTaskCheckForTimeOut+0x2a>
 80095fc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80095fe:	f000 fbc9 	bl	8009d94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009602:	4b17      	ldr	r3, [pc, #92]	; (8009660 <xTaskCheckForTimeOut+0x90>)
 8009604:	6819      	ldr	r1, [r3, #0]
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8009606:	4b17      	ldr	r3, [pc, #92]	; (8009664 <xTaskCheckForTimeOut+0x94>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800960e:	b9bb      	cbnz	r3, 8009640 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d01d      	beq.n	8009654 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	4a13      	ldr	r2, [pc, #76]	; (8009668 <xTaskCheckForTimeOut+0x98>)
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	4290      	cmp	r0, r2
 8009620:	d002      	beq.n	8009628 <xTaskCheckForTimeOut+0x58>
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	428a      	cmp	r2, r1
 8009626:	d917      	bls.n	8009658 <xTaskCheckForTimeOut+0x88>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009628:	6862      	ldr	r2, [r4, #4]
 800962a:	1a88      	subs	r0, r1, r2
 800962c:	4283      	cmp	r3, r0
 800962e:	d915      	bls.n	800965c <xTaskCheckForTimeOut+0x8c>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8009630:	1a52      	subs	r2, r2, r1
 8009632:	4413      	add	r3, r2
 8009634:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ffb4 	bl	80095a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800963c:	2400      	movs	r4, #0
 800963e:	e005      	b.n	800964c <xTaskCheckForTimeOut+0x7c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <xTaskCheckForTimeOut+0x94>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				xReturn = pdTRUE;
 800964a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800964c:	f000 fbc4 	bl	8009dd8 <vPortExitCritical>
}
 8009650:	4620      	mov	r0, r4
 8009652:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8009654:	2400      	movs	r4, #0
 8009656:	e7f9      	b.n	800964c <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 8009658:	2401      	movs	r4, #1
 800965a:	e7f7      	b.n	800964c <xTaskCheckForTimeOut+0x7c>
			xReturn = pdTRUE;
 800965c:	2401      	movs	r4, #1
 800965e:	e7f5      	b.n	800964c <xTaskCheckForTimeOut+0x7c>
 8009660:	20001424 	.word	0x20001424
 8009664:	20001300 	.word	0x20001300
 8009668:	200013e0 	.word	0x200013e0

0800966c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800966c:	4b01      	ldr	r3, [pc, #4]	; (8009674 <vTaskMissedYield+0x8>)
 800966e:	2201      	movs	r2, #1
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	4770      	bx	lr
 8009674:	20001428 	.word	0x20001428

08009678 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <xTaskGetSchedulerState+0x18>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	b133      	cbz	r3, 800968c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800967e:	4b05      	ldr	r3, [pc, #20]	; (8009694 <xTaskGetSchedulerState+0x1c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	b10b      	cbz	r3, 8009688 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009684:	2000      	movs	r0, #0
	}
 8009686:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009688:	2002      	movs	r0, #2
 800968a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800968c:	2001      	movs	r0, #1
 800968e:	4770      	bx	lr
 8009690:	200013f8 	.word	0x200013f8
 8009694:	200013a8 	.word	0x200013a8

08009698 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009698:	2800      	cmp	r0, #0
 800969a:	d045      	beq.n	8009728 <vTaskPriorityInherit+0x90>
	{
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80096a2:	4922      	ldr	r1, [pc, #136]	; (800972c <vTaskPriorityInherit+0x94>)
 80096a4:	6809      	ldr	r1, [r1, #0]
 80096a6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80096a8:	428a      	cmp	r2, r1
 80096aa:	d214      	bcs.n	80096d6 <vTaskPriorityInherit+0x3e>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096ac:	6981      	ldr	r1, [r0, #24]
 80096ae:	2900      	cmp	r1, #0
 80096b0:	db05      	blt.n	80096be <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	491e      	ldr	r1, [pc, #120]	; (800972c <vTaskPriorityInherit+0x94>)
 80096b4:	6809      	ldr	r1, [r1, #0]
 80096b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80096b8:	f1c1 0107 	rsb	r1, r1, #7
 80096bc:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096be:	6960      	ldr	r0, [r4, #20]
 80096c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80096c4:	0091      	lsls	r1, r2, #2
 80096c6:	4a1a      	ldr	r2, [pc, #104]	; (8009730 <vTaskPriorityInherit+0x98>)
 80096c8:	440a      	add	r2, r1
 80096ca:	4290      	cmp	r0, r2
 80096cc:	d004      	beq.n	80096d8 <vTaskPriorityInherit+0x40>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ce:	4a17      	ldr	r2, [pc, #92]	; (800972c <vTaskPriorityInherit+0x94>)
 80096d0:	6812      	ldr	r2, [r2, #0]
 80096d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80096d4:	62e2      	str	r2, [r4, #44]	; 0x2c
	}
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d8:	1d25      	adds	r5, r4, #4
 80096da:	4628      	mov	r0, r5
 80096dc:	f7fe fe4a 	bl	8008374 <uxListRemove>
 80096e0:	b190      	cbz	r0, 8009708 <vTaskPriorityInherit+0x70>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096e2:	4b12      	ldr	r3, [pc, #72]	; (800972c <vTaskPriorityInherit+0x94>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80096ea:	2201      	movs	r2, #1
 80096ec:	409a      	lsls	r2, r3
 80096ee:	4911      	ldr	r1, [pc, #68]	; (8009734 <vTaskPriorityInherit+0x9c>)
 80096f0:	6808      	ldr	r0, [r1, #0]
 80096f2:	4302      	orrs	r2, r0
 80096f4:	600a      	str	r2, [r1, #0]
 80096f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80096fa:	009a      	lsls	r2, r3, #2
 80096fc:	4629      	mov	r1, r5
 80096fe:	480c      	ldr	r0, [pc, #48]	; (8009730 <vTaskPriorityInherit+0x98>)
 8009700:	4410      	add	r0, r2
 8009702:	f7fe fe11 	bl	8008328 <vListInsertEnd>
	}
 8009706:	e7e6      	b.n	80096d6 <vTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800970a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800970e:	008a      	lsls	r2, r1, #2
 8009710:	4907      	ldr	r1, [pc, #28]	; (8009730 <vTaskPriorityInherit+0x98>)
 8009712:	588a      	ldr	r2, [r1, r2]
 8009714:	2a00      	cmp	r2, #0
 8009716:	d1e4      	bne.n	80096e2 <vTaskPriorityInherit+0x4a>
 8009718:	2201      	movs	r2, #1
 800971a:	409a      	lsls	r2, r3
 800971c:	4905      	ldr	r1, [pc, #20]	; (8009734 <vTaskPriorityInherit+0x9c>)
 800971e:	680b      	ldr	r3, [r1, #0]
 8009720:	ea23 0302 	bic.w	r3, r3, r2
 8009724:	600b      	str	r3, [r1, #0]
 8009726:	e7dc      	b.n	80096e2 <vTaskPriorityInherit+0x4a>
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001300 	.word	0x20001300
 8009730:	2000130c 	.word	0x2000130c
 8009734:	200013b0 	.word	0x200013b0

08009738 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009738:	2800      	cmp	r0, #0
 800973a:	d049      	beq.n	80097d0 <xTaskPriorityDisinherit+0x98>
	{
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009740:	4a26      	ldr	r2, [pc, #152]	; (80097dc <xTaskPriorityDisinherit+0xa4>)
 8009742:	6812      	ldr	r2, [r2, #0]
 8009744:	4282      	cmp	r2, r0
 8009746:	d008      	beq.n	800975a <xTaskPriorityDisinherit+0x22>
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	e7fe      	b.n	8009758 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800975a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800975c:	b942      	cbnz	r2, 8009770 <xTaskPriorityDisinherit+0x38>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	e7fe      	b.n	800976e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009770:	3a01      	subs	r2, #1
 8009772:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009774:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009776:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009778:	4288      	cmp	r0, r1
 800977a:	d02b      	beq.n	80097d4 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800977c:	bb62      	cbnz	r2, 80097d8 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800977e:	1d25      	adds	r5, r4, #4
 8009780:	4628      	mov	r0, r5
 8009782:	f7fe fdf7 	bl	8008374 <uxListRemove>
 8009786:	b970      	cbnz	r0, 80097a6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009788:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800978a:	2314      	movs	r3, #20
 800978c:	fb03 f302 	mul.w	r3, r3, r2
 8009790:	4913      	ldr	r1, [pc, #76]	; (80097e0 <xTaskPriorityDisinherit+0xa8>)
 8009792:	58cb      	ldr	r3, [r1, r3]
 8009794:	b93b      	cbnz	r3, 80097a6 <xTaskPriorityDisinherit+0x6e>
 8009796:	2301      	movs	r3, #1
 8009798:	fa03 f202 	lsl.w	r2, r3, r2
 800979c:	4911      	ldr	r1, [pc, #68]	; (80097e4 <xTaskPriorityDisinherit+0xac>)
 800979e:	680b      	ldr	r3, [r1, #0]
 80097a0:	ea23 0302 	bic.w	r3, r3, r2
 80097a4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80097a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097aa:	f1c3 0207 	rsb	r2, r3, #7
 80097ae:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80097b0:	2401      	movs	r4, #1
 80097b2:	fa04 f203 	lsl.w	r2, r4, r3
 80097b6:	490b      	ldr	r1, [pc, #44]	; (80097e4 <xTaskPriorityDisinherit+0xac>)
 80097b8:	6808      	ldr	r0, [r1, #0]
 80097ba:	4302      	orrs	r2, r0
 80097bc:	600a      	str	r2, [r1, #0]
 80097be:	4629      	mov	r1, r5
 80097c0:	4a07      	ldr	r2, [pc, #28]	; (80097e0 <xTaskPriorityDisinherit+0xa8>)
 80097c2:	2014      	movs	r0, #20
 80097c4:	fb00 2003 	mla	r0, r0, r3, r2
 80097c8:	f7fe fdae 	bl	8008328 <vListInsertEnd>
					xReturn = pdTRUE;
 80097cc:	4620      	mov	r0, r4
	}
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80097d0:	2000      	movs	r0, #0
	}
 80097d2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80097d4:	2000      	movs	r0, #0
 80097d6:	e7fa      	b.n	80097ce <xTaskPriorityDisinherit+0x96>
 80097d8:	2000      	movs	r0, #0
		return xReturn;
 80097da:	e7f8      	b.n	80097ce <xTaskPriorityDisinherit+0x96>
 80097dc:	20001300 	.word	0x20001300
 80097e0:	2000130c 	.word	0x2000130c
 80097e4:	200013b0 	.word	0x200013b0

080097e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80097e8:	4b05      	ldr	r3, [pc, #20]	; (8009800 <pvTaskIncrementMutexHeldCount+0x18>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	b123      	cbz	r3, 80097f8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80097ee:	4b04      	ldr	r3, [pc, #16]	; (8009800 <pvTaskIncrementMutexHeldCount+0x18>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80097f4:	3301      	adds	r3, #1
 80097f6:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <pvTaskIncrementMutexHeldCount+0x18>)
 80097fa:	6818      	ldr	r0, [r3, #0]
	}
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20001300 	.word	0x20001300

08009804 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <prvGetNextExpireTime+0x1c>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	fab3 f383 	clz	r3, r3
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009812:	b913      	cbnz	r3, 800981a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009814:	68d3      	ldr	r3, [r2, #12]
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800981a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	2000142c 	.word	0x2000142c

08009824 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009824:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009826:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009828:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800982a:	4291      	cmp	r1, r2
 800982c:	d80c      	bhi.n	8009848 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	6983      	ldr	r3, [r0, #24]
 8009832:	429a      	cmp	r2, r3
 8009834:	d301      	bcc.n	800983a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009836:	2001      	movs	r0, #1
 8009838:	e010      	b.n	800985c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800983a:	1d01      	adds	r1, r0, #4
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <prvInsertTimerInActiveList+0x40>)
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	f7fe fd7e 	bl	8008340 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009844:	2000      	movs	r0, #0
 8009846:	e009      	b.n	800985c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009848:	429a      	cmp	r2, r3
 800984a:	d201      	bcs.n	8009850 <prvInsertTimerInActiveList+0x2c>
 800984c:	4299      	cmp	r1, r3
 800984e:	d206      	bcs.n	800985e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009850:	1d01      	adds	r1, r0, #4
 8009852:	4b05      	ldr	r3, [pc, #20]	; (8009868 <prvInsertTimerInActiveList+0x44>)
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f7fe fd73 	bl	8008340 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800985a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800985c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800985e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009860:	e7fc      	b.n	800985c <prvInsertTimerInActiveList+0x38>
 8009862:	bf00      	nop
 8009864:	20001430 	.word	0x20001430
 8009868:	2000142c 	.word	0x2000142c

0800986c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009870:	f000 fa90 	bl	8009d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009874:	4b11      	ldr	r3, [pc, #68]	; (80098bc <prvCheckForValidListAndQueue+0x50>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	b11b      	cbz	r3, 8009882 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800987a:	f000 faad 	bl	8009dd8 <vPortExitCritical>
}
 800987e:	b003      	add	sp, #12
 8009880:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009882:	4d0f      	ldr	r5, [pc, #60]	; (80098c0 <prvCheckForValidListAndQueue+0x54>)
 8009884:	4628      	mov	r0, r5
 8009886:	f7fe fd41 	bl	800830c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800988a:	4c0e      	ldr	r4, [pc, #56]	; (80098c4 <prvCheckForValidListAndQueue+0x58>)
 800988c:	4620      	mov	r0, r4
 800988e:	f7fe fd3d 	bl	800830c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <prvCheckForValidListAndQueue+0x5c>)
 8009894:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <prvCheckForValidListAndQueue+0x60>)
 8009898:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800989a:	2300      	movs	r3, #0
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <prvCheckForValidListAndQueue+0x64>)
 80098a0:	4a0c      	ldr	r2, [pc, #48]	; (80098d4 <prvCheckForValidListAndQueue+0x68>)
 80098a2:	210c      	movs	r1, #12
 80098a4:	200a      	movs	r0, #10
 80098a6:	f7fe fe6c 	bl	8008582 <xQueueGenericCreateStatic>
 80098aa:	4b04      	ldr	r3, [pc, #16]	; (80098bc <prvCheckForValidListAndQueue+0x50>)
 80098ac:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0e3      	beq.n	800987a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098b2:	4909      	ldr	r1, [pc, #36]	; (80098d8 <prvCheckForValidListAndQueue+0x6c>)
 80098b4:	f7ff f9e6 	bl	8008c84 <vQueueAddToRegistry>
 80098b8:	e7df      	b.n	800987a <prvCheckForValidListAndQueue+0xe>
 80098ba:	bf00      	nop
 80098bc:	20001528 	.word	0x20001528
 80098c0:	200014ac 	.word	0x200014ac
 80098c4:	200014c0 	.word	0x200014c0
 80098c8:	2000142c 	.word	0x2000142c
 80098cc:	20001430 	.word	0x20001430
 80098d0:	200014d8 	.word	0x200014d8
 80098d4:	20001434 	.word	0x20001434
 80098d8:	0800f330 	.word	0x0800f330

080098dc <prvInitialiseNewTimer>:
{
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80098e2:	b941      	cbnz	r1, 80098f6 <prvInitialiseNewTimer+0x1a>
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	e7fe      	b.n	80098f4 <prvInitialiseNewTimer+0x18>
 80098f6:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 80098f8:	b174      	cbz	r4, 8009918 <prvInitialiseNewTimer+0x3c>
 80098fa:	461d      	mov	r5, r3
 80098fc:	4616      	mov	r6, r2
 80098fe:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 8009900:	f7ff ffb4 	bl	800986c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009904:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009908:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800990a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800990c:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009912:	1d20      	adds	r0, r4, #4
 8009914:	f7fe fd05 	bl	8008322 <vListInitialiseItem>
}
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800991c <xTimerCreateTimerTask>:
{
 800991c:	b510      	push	{r4, lr}
 800991e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009920:	f7ff ffa4 	bl	800986c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <xTimerCreateTimerTask+0x54>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	b1cb      	cbz	r3, 800995e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800992a:	2400      	movs	r4, #0
 800992c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800992e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009930:	aa07      	add	r2, sp, #28
 8009932:	a906      	add	r1, sp, #24
 8009934:	a805      	add	r0, sp, #20
 8009936:	f7f6 ff65 	bl	8000804 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	9b06      	ldr	r3, [sp, #24]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	2305      	movs	r3, #5
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	4623      	mov	r3, r4
 8009948:	9a07      	ldr	r2, [sp, #28]
 800994a:	490a      	ldr	r1, [pc, #40]	; (8009974 <xTimerCreateTimerTask+0x58>)
 800994c:	480a      	ldr	r0, [pc, #40]	; (8009978 <xTimerCreateTimerTask+0x5c>)
 800994e:	f7ff fb2f 	bl	8008fb0 <xTaskCreateStatic>
 8009952:	4b0a      	ldr	r3, [pc, #40]	; (800997c <xTimerCreateTimerTask+0x60>)
 8009954:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009956:	b110      	cbz	r0, 800995e <xTimerCreateTimerTask+0x42>
}
 8009958:	2001      	movs	r0, #1
 800995a:	b008      	add	sp, #32
 800995c:	bd10      	pop	{r4, pc}
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	e7fe      	b.n	800996e <xTimerCreateTimerTask+0x52>
 8009970:	20001528 	.word	0x20001528
 8009974:	0800f338 	.word	0x0800f338
 8009978:	08009cd5 	.word	0x08009cd5
 800997c:	2000152c 	.word	0x2000152c

08009980 <xTimerCreate>:
	{
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	4605      	mov	r5, r0
 8009988:	460e      	mov	r6, r1
 800998a:	4617      	mov	r7, r2
 800998c:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800998e:	2030      	movs	r0, #48	; 0x30
 8009990:	f000 fb62 	bl	800a058 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009994:	4604      	mov	r4, r0
 8009996:	b158      	cbz	r0, 80099b0 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009998:	9001      	str	r0, [sp, #4]
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	4643      	mov	r3, r8
 80099a0:	463a      	mov	r2, r7
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	f7ff ff99 	bl	80098dc <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 80099b0:	4620      	mov	r0, r4
 80099b2:	b002      	add	sp, #8
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099b8 <xTimerCreateStatic>:
	{
 80099b8:	b530      	push	{r4, r5, lr}
 80099ba:	b085      	sub	sp, #20
 80099bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 80099be:	2530      	movs	r5, #48	; 0x30
 80099c0:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 80099c2:	9d03      	ldr	r5, [sp, #12]
 80099c4:	2d30      	cmp	r5, #48	; 0x30
 80099c6:	d008      	beq.n	80099da <xTimerCreateStatic+0x22>
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	e7fe      	b.n	80099d8 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
 80099da:	b944      	cbnz	r4, 80099ee <xTimerCreateStatic+0x36>
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	e7fe      	b.n	80099ec <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80099ee:	9401      	str	r4, [sp, #4]
 80099f0:	9d08      	ldr	r5, [sp, #32]
 80099f2:	9500      	str	r5, [sp, #0]
 80099f4:	f7ff ff72 	bl	80098dc <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
 80099fe:	4620      	mov	r0, r4
 8009a00:	b005      	add	sp, #20
 8009a02:	bd30      	pop	{r4, r5, pc}

08009a04 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009a04:	b1c8      	cbz	r0, 8009a3a <xTimerGenericCommand+0x36>
{
 8009a06:	b530      	push	{r4, r5, lr}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	4615      	mov	r5, r2
 8009a0c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8009a0e:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <xTimerGenericCommand+0x68>)
 8009a10:	6810      	ldr	r0, [r2, #0]
 8009a12:	b340      	cbz	r0, 8009a66 <xTimerGenericCommand+0x62>
 8009a14:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8009a16:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a18:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009a1a:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a1c:	2905      	cmp	r1, #5
 8009a1e:	dc1d      	bgt.n	8009a5c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a20:	f7ff fe2a 	bl	8009678 <xTaskGetSchedulerState>
 8009a24:	2802      	cmp	r0, #2
 8009a26:	d011      	beq.n	8009a4c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a28:	2300      	movs	r3, #0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	a901      	add	r1, sp, #4
 8009a2e:	480f      	ldr	r0, [pc, #60]	; (8009a6c <xTimerGenericCommand+0x68>)
 8009a30:	6800      	ldr	r0, [r0, #0]
 8009a32:	f7fe fe5b 	bl	80086ec <xQueueGenericSend>
}
 8009a36:	b005      	add	sp, #20
 8009a38:	bd30      	pop	{r4, r5, pc}
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	e7fe      	b.n	8009a4a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9a08      	ldr	r2, [sp, #32]
 8009a50:	a901      	add	r1, sp, #4
 8009a52:	4806      	ldr	r0, [pc, #24]	; (8009a6c <xTimerGenericCommand+0x68>)
 8009a54:	6800      	ldr	r0, [r0, #0]
 8009a56:	f7fe fe49 	bl	80086ec <xQueueGenericSend>
 8009a5a:	e7ec      	b.n	8009a36 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	a901      	add	r1, sp, #4
 8009a60:	f7fe ff28 	bl	80088b4 <xQueueGenericSendFromISR>
 8009a64:	e7e7      	b.n	8009a36 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 8009a66:	2000      	movs	r0, #0
	return xReturn;
 8009a68:	e7e5      	b.n	8009a36 <xTimerGenericCommand+0x32>
 8009a6a:	bf00      	nop
 8009a6c:	20001528 	.word	0x20001528

08009a70 <prvSwitchTimerLists>:
{
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a74:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <prvSwitchTimerLists+0x70>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	b352      	cbz	r2, 8009ad2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a80:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a82:	1d25      	adds	r5, r4, #4
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7fe fc75 	bl	8008374 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a90:	69e3      	ldr	r3, [r4, #28]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d1ee      	bne.n	8009a74 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a96:	69a3      	ldr	r3, [r4, #24]
 8009a98:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009a9a:	429e      	cmp	r6, r3
 8009a9c:	d207      	bcs.n	8009aae <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a9e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aa0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4b0e      	ldr	r3, [pc, #56]	; (8009ae0 <prvSwitchTimerLists+0x70>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	f7fe fc4a 	bl	8008340 <vListInsert>
 8009aac:	e7e2      	b.n	8009a74 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aae:	2100      	movs	r1, #0
 8009ab0:	9100      	str	r1, [sp, #0]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7ff ffa4 	bl	8009a04 <xTimerGenericCommand>
				configASSERT( xResult );
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d1d9      	bne.n	8009a74 <prvSwitchTimerLists+0x4>
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	e7fe      	b.n	8009ad0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8009ad2:	4a04      	ldr	r2, [pc, #16]	; (8009ae4 <prvSwitchTimerLists+0x74>)
 8009ad4:	6810      	ldr	r0, [r2, #0]
 8009ad6:	4902      	ldr	r1, [pc, #8]	; (8009ae0 <prvSwitchTimerLists+0x70>)
 8009ad8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009ada:	6013      	str	r3, [r2, #0]
}
 8009adc:	b002      	add	sp, #8
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	2000142c 	.word	0x2000142c
 8009ae4:	20001430 	.word	0x20001430

08009ae8 <prvSampleTimeNow>:
{
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009aec:	f7ff fb12 	bl	8009114 <xTaskGetTickCount>
 8009af0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009af2:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <prvSampleTimeNow+0x28>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d805      	bhi.n	8009b06 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009afe:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <prvSampleTimeNow+0x28>)
 8009b00:	601c      	str	r4, [r3, #0]
}
 8009b02:	4620      	mov	r0, r4
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009b06:	f7ff ffb3 	bl	8009a70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	e7f6      	b.n	8009afe <prvSampleTimeNow+0x16>
 8009b10:	200014d4 	.word	0x200014d4

08009b14 <prvProcessExpiredTimer>:
{
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	4605      	mov	r5, r0
 8009b1a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b1c:	4b14      	ldr	r3, [pc, #80]	; (8009b70 <prvProcessExpiredTimer+0x5c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b24:	1d20      	adds	r0, r4, #4
 8009b26:	f7fe fc25 	bl	8008374 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b2a:	69e3      	ldr	r3, [r4, #28]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d004      	beq.n	8009b3a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b32:	4620      	mov	r0, r4
 8009b34:	4798      	blx	r3
}
 8009b36:	b002      	add	sp, #8
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b3a:	69a1      	ldr	r1, [r4, #24]
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	4632      	mov	r2, r6
 8009b40:	4429      	add	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff fe6e 	bl	8009824 <prvInsertTimerInActiveList>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0f1      	beq.n	8009b30 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	9100      	str	r1, [sp, #0]
 8009b50:	460b      	mov	r3, r1
 8009b52:	462a      	mov	r2, r5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff ff55 	bl	8009a04 <xTimerGenericCommand>
			configASSERT( xResult );
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1e8      	bne.n	8009b30 <prvProcessExpiredTimer+0x1c>
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	e7fe      	b.n	8009b6e <prvProcessExpiredTimer+0x5a>
 8009b70:	2000142c 	.word	0x2000142c

08009b74 <prvProcessTimerOrBlockTask>:
{
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009b7c:	f7ff fac2 	bl	8009104 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b80:	a801      	add	r0, sp, #4
 8009b82:	f7ff ffb1 	bl	8009ae8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <prvProcessTimerOrBlockTask+0x5e>
 8009b8a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b8c:	b90c      	cbnz	r4, 8009b92 <prvProcessTimerOrBlockTask+0x1e>
 8009b8e:	42b0      	cmp	r0, r6
 8009b90:	d218      	bcs.n	8009bc4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 8009b92:	b12c      	cbz	r4, 8009ba0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b94:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <prvProcessTimerOrBlockTask+0x68>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681c      	ldr	r4, [r3, #0]
 8009b9a:	fab4 f484 	clz	r4, r4
 8009b9e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	1b71      	subs	r1, r6, r5
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <prvProcessTimerOrBlockTask+0x6c>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	f7ff f880 	bl	8008cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bac:	f7ff fb44 	bl	8009238 <xTaskResumeAll>
 8009bb0:	b988      	cbnz	r0, 8009bd6 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <prvProcessTimerOrBlockTask+0x70>)
 8009bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	e008      	b.n	8009bd6 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 8009bc4:	f7ff fb38 	bl	8009238 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7ff ffa2 	bl	8009b14 <prvProcessExpiredTimer>
 8009bd0:	e001      	b.n	8009bd6 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 8009bd2:	f7ff fb31 	bl	8009238 <xTaskResumeAll>
}
 8009bd6:	b002      	add	sp, #8
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	bf00      	nop
 8009bdc:	20001430 	.word	0x20001430
 8009be0:	20001528 	.word	0x20001528
 8009be4:	e000ed04 	.word	0xe000ed04

08009be8 <prvProcessReceivedCommands>:
{
 8009be8:	b530      	push	{r4, r5, lr}
 8009bea:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bec:	2300      	movs	r3, #0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	a903      	add	r1, sp, #12
 8009bf2:	4837      	ldr	r0, [pc, #220]	; (8009cd0 <prvProcessReceivedCommands+0xe8>)
 8009bf4:	6800      	ldr	r0, [r0, #0]
 8009bf6:	f7fe ff1d 	bl	8008a34 <xQueueGenericReceive>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d065      	beq.n	8009cca <prvProcessReceivedCommands+0xe2>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dbf3      	blt.n	8009bec <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c04:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8009c06:	6963      	ldr	r3, [r4, #20]
 8009c08:	b113      	cbz	r3, 8009c10 <prvProcessReceivedCommands+0x28>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c0a:	1d20      	adds	r0, r4, #4
 8009c0c:	f7fe fbb2 	bl	8008374 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c10:	a802      	add	r0, sp, #8
 8009c12:	f7ff ff69 	bl	8009ae8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	2b09      	cmp	r3, #9
 8009c1a:	d8e7      	bhi.n	8009bec <prvProcessReceivedCommands+0x4>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <prvProcessReceivedCommands+0x3c>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009bed 	.word	0x08009bed
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009cbb 	.word	0x08009cbb
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009c4d 	.word	0x08009c4d
 8009c44:	08009bed 	.word	0x08009bed
 8009c48:	08009c95 	.word	0x08009c95
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c4c:	9904      	ldr	r1, [sp, #16]
 8009c4e:	69a5      	ldr	r5, [r4, #24]
 8009c50:	460b      	mov	r3, r1
 8009c52:	4602      	mov	r2, r0
 8009c54:	4429      	add	r1, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff fde4 	bl	8009824 <prvInsertTimerInActiveList>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0c5      	beq.n	8009bec <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c62:	4620      	mov	r0, r4
 8009c64:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c66:	69e3      	ldr	r3, [r4, #28]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d1bf      	bne.n	8009bec <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c6c:	69a2      	ldr	r2, [r4, #24]
 8009c6e:	2100      	movs	r1, #0
 8009c70:	9100      	str	r1, [sp, #0]
 8009c72:	460b      	mov	r3, r1
 8009c74:	9804      	ldr	r0, [sp, #16]
 8009c76:	4402      	add	r2, r0
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f7ff fec3 	bl	8009a04 <xTimerGenericCommand>
							configASSERT( xResult );
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d1b4      	bne.n	8009bec <prvProcessReceivedCommands+0x4>
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	e7fe      	b.n	8009c92 <prvProcessReceivedCommands+0xaa>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c94:	9904      	ldr	r1, [sp, #16]
 8009c96:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c98:	b131      	cbz	r1, 8009ca8 <prvProcessReceivedCommands+0xc0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	4401      	add	r1, r0
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff fdbf 	bl	8009824 <prvInsertTimerInActiveList>
					break;
 8009ca6:	e7a1      	b.n	8009bec <prvProcessReceivedCommands+0x4>
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	e7fe      	b.n	8009cb8 <prvProcessReceivedCommands+0xd0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d194      	bne.n	8009bec <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fa56 	bl	800a174 <vPortFree>
 8009cc8:	e790      	b.n	8009bec <prvProcessReceivedCommands+0x4>
}
 8009cca:	b007      	add	sp, #28
 8009ccc:	bd30      	pop	{r4, r5, pc}
 8009cce:	bf00      	nop
 8009cd0:	20001528 	.word	0x20001528

08009cd4 <prvTimerTask>:
{
 8009cd4:	b500      	push	{lr}
 8009cd6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cd8:	a801      	add	r0, sp, #4
 8009cda:	f7ff fd93 	bl	8009804 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cde:	9901      	ldr	r1, [sp, #4]
 8009ce0:	f7ff ff48 	bl	8009b74 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009ce4:	f7ff ff80 	bl	8009be8 <prvProcessReceivedCommands>
 8009ce8:	e7f6      	b.n	8009cd8 <prvTimerTask+0x4>
	...

08009cec <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <prvTaskExitError+0x30>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf4:	d008      	beq.n	8009d08 <prvTaskExitError+0x1c>
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	e7fe      	b.n	8009d06 <prvTaskExitError+0x1a>
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	e7fe      	b.n	8009d18 <prvTaskExitError+0x2c>
 8009d1a:	bf00      	nop
 8009d1c:	200000b0 	.word	0x200000b0

08009d20 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009d20:	4806      	ldr	r0, [pc, #24]	; (8009d3c <prvPortStartFirstTask+0x1c>)
 8009d22:	6800      	ldr	r0, [r0, #0]
 8009d24:	6800      	ldr	r0, [r0, #0]
 8009d26:	f380 8808 	msr	MSP, r0
 8009d2a:	b662      	cpsie	i
 8009d2c:	b661      	cpsie	f
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	df00      	svc	0
 8009d38:	bf00      	nop
 8009d3a:	0000      	.short	0x0000
 8009d3c:	e000ed08 	.word	0xe000ed08

08009d40 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d44:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d48:	f021 0101 	bic.w	r1, r1, #1
 8009d4c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d50:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <pxPortInitialiseStack+0x20>)
 8009d52:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d56:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009d5a:	3840      	subs	r0, #64	; 0x40
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	08009ced 	.word	0x08009ced
	...

08009d70 <SVC_Handler>:
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d8e:	4770      	bx	lr

08009d90 <pxCurrentTCBConst2>:
 8009d90:	20001300 	.word	0x20001300

08009d94 <vPortEnterCritical>:
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009da4:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <vPortEnterCritical+0x3c>)
 8009da6:	6813      	ldr	r3, [r2, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d000      	beq.n	8009db2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009db0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <vPortEnterCritical+0x40>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009dba:	d0f9      	beq.n	8009db0 <vPortEnterCritical+0x1c>
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	e7fe      	b.n	8009dcc <vPortEnterCritical+0x38>
 8009dce:	bf00      	nop
 8009dd0:	200000b0 	.word	0x200000b0
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009dd8:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <vPortExitCritical+0x28>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	b943      	cbnz	r3, 8009df0 <vPortExitCritical+0x18>
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	e7fe      	b.n	8009dee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009df0:	3b01      	subs	r3, #1
 8009df2:	4a03      	ldr	r2, [pc, #12]	; (8009e00 <vPortExitCritical+0x28>)
 8009df4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009df6:	b90b      	cbnz	r3, 8009dfc <vPortExitCritical+0x24>
	__asm volatile
 8009df8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	200000b0 	.word	0x200000b0
	...

08009e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e10:	f3ef 8009 	mrs	r0, PSP
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <pxCurrentTCBConst>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e20:	6010      	str	r0, [r2, #0]
 8009e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e2a:	f380 8811 	msr	BASEPRI, r0
 8009e2e:	f7ff fae5 	bl	80093fc <vTaskSwitchContext>
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8811 	msr	BASEPRI, r0
 8009e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	6808      	ldr	r0, [r1, #0]
 8009e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e46:	f380 8809 	msr	PSP, r0
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	4770      	bx	lr

08009e50 <pxCurrentTCBConst>:
 8009e50:	20001300 	.word	0x20001300

08009e54 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e54:	b508      	push	{r3, lr}
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e66:	f7ff f95b 	bl	8009120 <xTaskIncrementTick>
 8009e6a:	b118      	cbz	r0, 8009e74 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6c:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <SysTick_Handler+0x28>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009e74:	2300      	movs	r3, #0
 8009e76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e7a:	bd08      	pop	{r3, pc}
 8009e7c:	e000ed04 	.word	0xe000ed04

08009e80 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e80:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <vPortSetupTimerInterrupt+0x1c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vPortSetupTimerInterrupt+0x20>)
 8009e86:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8a:	099b      	lsrs	r3, r3, #6
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	4a05      	ldr	r2, [pc, #20]	; (8009ea4 <vPortSetupTimerInterrupt+0x24>)
 8009e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <vPortSetupTimerInterrupt+0x28>)
 8009e94:	2207      	movs	r2, #7
 8009e96:	601a      	str	r2, [r3, #0]
}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	20000000 	.word	0x20000000
 8009ea0:	10624dd3 	.word	0x10624dd3
 8009ea4:	e000e014 	.word	0xe000e014
 8009ea8:	e000e010 	.word	0xe000e010

08009eac <xPortStartScheduler>:
{
 8009eac:	b500      	push	{lr}
 8009eae:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eb0:	4b1f      	ldr	r3, [pc, #124]	; (8009f30 <xPortStartScheduler+0x84>)
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	b2d2      	uxtb	r2, r2
 8009eb6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009eb8:	22ff      	movs	r2, #255	; 0xff
 8009eba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ec4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009ec8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ecc:	4a19      	ldr	r2, [pc, #100]	; (8009f34 <xPortStartScheduler+0x88>)
 8009ece:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <xPortStartScheduler+0x8c>)
 8009ed2:	2207      	movs	r2, #7
 8009ed4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ed6:	e009      	b.n	8009eec <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8009ed8:	4a17      	ldr	r2, [pc, #92]	; (8009f38 <xPortStartScheduler+0x8c>)
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ee0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ef4:	d1f0      	bne.n	8009ed8 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ef6:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <xPortStartScheduler+0x8c>)
 8009ef8:	6813      	ldr	r3, [r2, #0]
 8009efa:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f00:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	4a0a      	ldr	r2, [pc, #40]	; (8009f30 <xPortStartScheduler+0x84>)
 8009f08:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <xPortStartScheduler+0x90>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009f12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009f1a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009f1c:	f7ff ffb0 	bl	8009e80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009f20:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <xPortStartScheduler+0x94>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8009f26:	f7ff fefb 	bl	8009d20 <prvPortStartFirstTask>
	prvTaskExitError();
 8009f2a:	f7ff fedf 	bl	8009cec <prvTaskExitError>
 8009f2e:	bf00      	nop
 8009f30:	e000e400 	.word	0xe000e400
 8009f34:	20001530 	.word	0x20001530
 8009f38:	20001534 	.word	0x20001534
 8009f3c:	e000ed20 	.word	0xe000ed20
 8009f40:	200000b0 	.word	0x200000b0

08009f44 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f48:	2b0f      	cmp	r3, #15
 8009f4a:	d90f      	bls.n	8009f6c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4c:	4a10      	ldr	r2, [pc, #64]	; (8009f90 <vPortValidateInterruptPriority+0x4c>)
 8009f4e:	5c9b      	ldrb	r3, [r3, r2]
 8009f50:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f52:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <vPortValidateInterruptPriority+0x50>)
 8009f54:	7812      	ldrb	r2, [r2, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d908      	bls.n	8009f6c <vPortValidateInterruptPriority+0x28>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	e7fe      	b.n	8009f6a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <vPortValidateInterruptPriority+0x54>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f74:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <vPortValidateInterruptPriority+0x58>)
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d908      	bls.n	8009f8e <vPortValidateInterruptPriority+0x4a>
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	e7fe      	b.n	8009f8c <vPortValidateInterruptPriority+0x48>
	}
 8009f8e:	4770      	bx	lr
 8009f90:	e000e3f0 	.word	0xe000e3f0
 8009f94:	20001530 	.word	0x20001530
 8009f98:	e000ed0c 	.word	0xe000ed0c
 8009f9c:	20001534 	.word	0x20001534

08009fa0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4a12      	ldr	r2, [pc, #72]	; (8009fec <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa2:	f012 0f07 	tst.w	r2, #7
 8009fa6:	d01e      	beq.n	8009fe6 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fa8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009faa:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fae:	f5c1 531c 	rsb	r3, r1, #9984	; 0x2700
 8009fb2:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fb6:	480e      	ldr	r0, [pc, #56]	; (8009ff0 <prvHeapInit+0x50>)
 8009fb8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fba:	2100      	movs	r1, #0
 8009fbc:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fbe:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009fc0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009fc6:	480b      	ldr	r0, [pc, #44]	; (8009ff4 <prvHeapInit+0x54>)
 8009fc8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009fca:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fcc:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fce:	1a99      	subs	r1, r3, r2
 8009fd0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fd2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <prvHeapInit+0x58>)
 8009fd6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fd8:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <prvHeapInit+0x5c>)
 8009fda:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fdc:	4b08      	ldr	r3, [pc, #32]	; (800a000 <prvHeapInit+0x60>)
 8009fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fe2:	601a      	str	r2, [r3, #0]
}
 8009fe4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fe6:	f44f 531c 	mov.w	r3, #9984	; 0x2700
 8009fea:	e7e4      	b.n	8009fb6 <prvHeapInit+0x16>
 8009fec:	2000153c 	.word	0x2000153c
 8009ff0:	20003c48 	.word	0x20003c48
 8009ff4:	20001538 	.word	0x20001538
 8009ff8:	20003c44 	.word	0x20003c44
 8009ffc:	20003c40 	.word	0x20003c40
 800a000:	20003c3c 	.word	0x20003c3c

0800a004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a004:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a006:	4b12      	ldr	r3, [pc, #72]	; (800a050 <prvInsertBlockIntoFreeList+0x4c>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4282      	cmp	r2, r0
 800a00c:	d31a      	bcc.n	800a044 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a00e:	6859      	ldr	r1, [r3, #4]
 800a010:	185c      	adds	r4, r3, r1
 800a012:	4284      	cmp	r4, r0
 800a014:	d103      	bne.n	800a01e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a016:	6840      	ldr	r0, [r0, #4]
 800a018:	4401      	add	r1, r0
 800a01a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a01c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a01e:	6841      	ldr	r1, [r0, #4]
 800a020:	1844      	adds	r4, r0, r1
 800a022:	42a2      	cmp	r2, r4
 800a024:	d112      	bne.n	800a04c <prvInsertBlockIntoFreeList+0x48>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a026:	4c0b      	ldr	r4, [pc, #44]	; (800a054 <prvInsertBlockIntoFreeList+0x50>)
 800a028:	6824      	ldr	r4, [r4, #0]
 800a02a:	42a2      	cmp	r2, r4
 800a02c:	d00c      	beq.n	800a048 <prvInsertBlockIntoFreeList+0x44>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a02e:	6852      	ldr	r2, [r2, #4]
 800a030:	4411      	add	r1, r2
 800a032:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a03a:	4298      	cmp	r0, r3
 800a03c:	d000      	beq.n	800a040 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a03e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a040:	bc10      	pop	{r4}
 800a042:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a044:	4613      	mov	r3, r2
 800a046:	e7df      	b.n	800a008 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a048:	6004      	str	r4, [r0, #0]
 800a04a:	e7f6      	b.n	800a03a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a04c:	6002      	str	r2, [r0, #0]
 800a04e:	e7f4      	b.n	800a03a <prvInsertBlockIntoFreeList+0x36>
 800a050:	20003c48 	.word	0x20003c48
 800a054:	20001538 	.word	0x20001538

0800a058 <pvPortMalloc>:
{
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a05c:	f7ff f852 	bl	8009104 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a060:	4b3f      	ldr	r3, [pc, #252]	; (800a160 <pvPortMalloc+0x108>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	b1a3      	cbz	r3, 800a090 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a066:	4b3f      	ldr	r3, [pc, #252]	; (800a164 <pvPortMalloc+0x10c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	421c      	tst	r4, r3
 800a06c:	d013      	beq.n	800a096 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 800a06e:	f7ff f8e3 	bl	8009238 <xTaskResumeAll>
void *pvReturn = NULL;
 800a072:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800a074:	f7f6 fbb8 	bl	80007e8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a078:	f016 0f07 	tst.w	r6, #7
 800a07c:	d06e      	beq.n	800a15c <pvPortMalloc+0x104>
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	e7fe      	b.n	800a08e <pvPortMalloc+0x36>
			prvHeapInit();
 800a090:	f7ff ff86 	bl	8009fa0 <prvHeapInit>
 800a094:	e7e7      	b.n	800a066 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 800a096:	b194      	cbz	r4, 800a0be <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 800a098:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a09a:	f014 0f07 	tst.w	r4, #7
 800a09e:	d00e      	beq.n	800a0be <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0a0:	f024 0407 	bic.w	r4, r4, #7
 800a0a4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a6:	f004 0307 	and.w	r3, r4, #7
 800a0aa:	b143      	cbz	r3, 800a0be <pvPortMalloc+0x66>
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	e7fe      	b.n	800a0bc <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0be:	b134      	cbz	r4, 800a0ce <pvPortMalloc+0x76>
 800a0c0:	4b29      	ldr	r3, [pc, #164]	; (800a168 <pvPortMalloc+0x110>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	42a3      	cmp	r3, r4
 800a0c6:	d306      	bcc.n	800a0d6 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 800a0c8:	4b28      	ldr	r3, [pc, #160]	; (800a16c <pvPortMalloc+0x114>)
 800a0ca:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0cc:	e009      	b.n	800a0e2 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800a0ce:	f7ff f8b3 	bl	8009238 <xTaskResumeAll>
void *pvReturn = NULL;
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	e7ce      	b.n	800a074 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 800a0d6:	f7ff f8af 	bl	8009238 <xTaskResumeAll>
void *pvReturn = NULL;
 800a0da:	2600      	movs	r6, #0
 800a0dc:	e7ca      	b.n	800a074 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 800a0de:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0e0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e2:	686a      	ldr	r2, [r5, #4]
 800a0e4:	42a2      	cmp	r2, r4
 800a0e6:	d202      	bcs.n	800a0ee <pvPortMalloc+0x96>
 800a0e8:	682a      	ldr	r2, [r5, #0]
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d1f7      	bne.n	800a0de <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 800a0ee:	4a1c      	ldr	r2, [pc, #112]	; (800a160 <pvPortMalloc+0x108>)
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	42aa      	cmp	r2, r5
 800a0f4:	d014      	beq.n	800a120 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0f6:	681e      	ldr	r6, [r3, #0]
 800a0f8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0fa:	682a      	ldr	r2, [r5, #0]
 800a0fc:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0fe:	686b      	ldr	r3, [r5, #4]
 800a100:	1b1b      	subs	r3, r3, r4
 800a102:	2b10      	cmp	r3, #16
 800a104:	d914      	bls.n	800a130 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a106:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a108:	f010 0f07 	tst.w	r0, #7
 800a10c:	d00c      	beq.n	800a128 <pvPortMalloc+0xd0>
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	e7fe      	b.n	800a11e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 800a120:	f7ff f88a 	bl	8009238 <xTaskResumeAll>
void *pvReturn = NULL;
 800a124:	2600      	movs	r6, #0
 800a126:	e7a5      	b.n	800a074 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a128:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a12a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a12c:	f7ff ff6a 	bl	800a004 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a130:	686a      	ldr	r2, [r5, #4]
 800a132:	490d      	ldr	r1, [pc, #52]	; (800a168 <pvPortMalloc+0x110>)
 800a134:	680b      	ldr	r3, [r1, #0]
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a13a:	490d      	ldr	r1, [pc, #52]	; (800a170 <pvPortMalloc+0x118>)
 800a13c:	6809      	ldr	r1, [r1, #0]
 800a13e:	428b      	cmp	r3, r1
 800a140:	d201      	bcs.n	800a146 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a142:	490b      	ldr	r1, [pc, #44]	; (800a170 <pvPortMalloc+0x118>)
 800a144:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <pvPortMalloc+0x10c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a152:	f7ff f871 	bl	8009238 <xTaskResumeAll>
		if( pvReturn == NULL )
 800a156:	2e00      	cmp	r6, #0
 800a158:	d18e      	bne.n	800a078 <pvPortMalloc+0x20>
 800a15a:	e78b      	b.n	800a074 <pvPortMalloc+0x1c>
}
 800a15c:	4630      	mov	r0, r6
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	20001538 	.word	0x20001538
 800a164:	20003c3c 	.word	0x20003c3c
 800a168:	20003c40 	.word	0x20003c40
 800a16c:	20003c48 	.word	0x20003c48
 800a170:	20003c44 	.word	0x20003c44

0800a174 <vPortFree>:
	if( pv != NULL )
 800a174:	b380      	cbz	r0, 800a1d8 <vPortFree+0x64>
{
 800a176:	b538      	push	{r3, r4, r5, lr}
 800a178:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a17a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a17e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a182:	4916      	ldr	r1, [pc, #88]	; (800a1dc <vPortFree+0x68>)
 800a184:	6809      	ldr	r1, [r1, #0]
 800a186:	420a      	tst	r2, r1
 800a188:	d108      	bne.n	800a19c <vPortFree+0x28>
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	e7fe      	b.n	800a19a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a19c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800a1a0:	b140      	cbz	r0, 800a1b4 <vPortFree+0x40>
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	e7fe      	b.n	800a1b2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1b4:	ea22 0201 	bic.w	r2, r2, r1
 800a1b8:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800a1bc:	f7fe ffa2 	bl	8009104 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1c0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a1c4:	4a06      	ldr	r2, [pc, #24]	; (800a1e0 <vPortFree+0x6c>)
 800a1c6:	6813      	ldr	r3, [r2, #0]
 800a1c8:	440b      	add	r3, r1
 800a1ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7ff ff19 	bl	800a004 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a1d2:	f7ff f831 	bl	8009238 <xTaskResumeAll>
}
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20003c3c 	.word	0x20003c3c
 800a1e0:	20003c40 	.word	0x20003c40

0800a1e4 <lfs_alloc_lookahead>:
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
 800a1e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a1e6:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800a1e8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a1ea:	6a1a      	ldr	r2, [r3, #32]
 800a1ec:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
 800a1ee:	fbb1 f3f2 	udiv	r3, r1, r2
 800a1f2:	fb02 1113 	mls	r1, r2, r3, r1

    if (off < lfs->free.size) {
 800a1f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a1f8:	428b      	cmp	r3, r1
 800a1fa:	d90b      	bls.n	800a214 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800a1fc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a1fe:	0948      	lsrs	r0, r1, #5
 800a200:	f001 011f 	and.w	r1, r1, #31
 800a204:	2301      	movs	r3, #1
 800a206:	fa03 f101 	lsl.w	r1, r3, r1
 800a20a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800a20e:	430b      	orrs	r3, r1
 800a210:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    }

    return 0;
}
 800a214:	2000      	movs	r0, #0
 800a216:	4770      	bx	lr

0800a218 <lfs_alloc_ack>:
        }
    }
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
 800a218:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800a21e:	4770      	bx	lr

0800a220 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800a220:	b410      	push	{r4}
    lfs_tag_t *filtertag = p;
    (void)buffer;

    // check for redundancy
    uint32_t mask = LFS_MKTAG(0x7ff, 0x3ff, 0);
    if ((mask & tag) == (mask & *filtertag) ||
 800a222:	6802      	ldr	r2, [r0, #0]
 800a224:	ea82 0401 	eor.w	r4, r2, r1
 800a228:	4b13      	ldr	r3, [pc, #76]	; (800a278 <lfs_dir_traverse_filter+0x58>)
 800a22a:	4023      	ands	r3, r4
 800a22c:	b1eb      	cbz	r3, 800a26a <lfs_dir_traverse_filter+0x4a>
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a22e:	4c12      	ldr	r4, [pc, #72]	; (800a278 <lfs_dir_traverse_filter+0x58>)
 800a230:	400c      	ands	r4, r1
            (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <lfs_dir_traverse_filter+0x5c>)
 800a234:	4013      	ands	r3, r2
        (mask & tag) == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a236:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a23a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    if ((mask & tag) == (mask & *filtertag) ||
 800a23e:	429c      	cmp	r4, r3
 800a240:	d016      	beq.n	800a270 <lfs_dir_traverse_filter+0x50>
    return (tag & 0x70000000) >> 20;
 800a242:	0d0b      	lsrs	r3, r1, #20
 800a244:	f403 64e0 	and.w	r4, r3, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a248:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a24c:	d001      	beq.n	800a252 <lfs_dir_traverse_filter+0x32>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 800a24e:	2000      	movs	r0, #0
 800a250:	e00c      	b.n	800a26c <lfs_dir_traverse_filter+0x4c>
    return (tag & 0x000ffc00) >> 10;
 800a252:	f3c1 2189 	ubfx	r1, r1, #10, #10
 800a256:	f3c2 2489 	ubfx	r4, r2, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a25a:	428c      	cmp	r4, r1
 800a25c:	d30a      	bcc.n	800a274 <lfs_dir_traverse_filter+0x54>
    return (int8_t)lfs_tag_chunk(tag);
 800a25e:	b25b      	sxtb	r3, r3
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a260:	eb02 2283 	add.w	r2, r2, r3, lsl #10
 800a264:	6002      	str	r2, [r0, #0]
    return false;
 800a266:	2000      	movs	r0, #0
 800a268:	e000      	b.n	800a26c <lfs_dir_traverse_filter+0x4c>
        return true;
 800a26a:	2001      	movs	r0, #1
}
 800a26c:	bc10      	pop	{r4}
 800a26e:	4770      	bx	lr
        return true;
 800a270:	2001      	movs	r0, #1
 800a272:	e7fb      	b.n	800a26c <lfs_dir_traverse_filter+0x4c>
    return false;
 800a274:	2000      	movs	r0, #0
 800a276:	e7f9      	b.n	800a26c <lfs_dir_traverse_filter+0x4c>
 800a278:	7ffffc00 	.word	0x7ffffc00
 800a27c:	000ffc00 	.word	0x000ffc00

0800a280 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a280:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	bf08      	it	eq
 800a28a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 800a28c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a290:	3104      	adds	r1, #4

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800a292:	6803      	ldr	r3, [r0, #0]
 800a294:	4419      	add	r1, r3
 800a296:	6001      	str	r1, [r0, #0]
    return 0;
}
 800a298:	2000      	movs	r0, #0
 800a29a:	4770      	bx	lr

0800a29c <lfs_fs_preporphans>:

    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    lfs->gpending.tag += orphans;
 800a29c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a29e:	4419      	add	r1, r3
    return tag & 0x000003ff;
 800a2a0:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 800a2a4:	3300      	adds	r3, #0
 800a2a6:	bf18      	it	ne
 800a2a8:	2301      	movne	r3, #1
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ (orphans << 31));
 800a2aa:	ea81 73c3 	eor.w	r3, r1, r3, lsl #31
 800a2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2b2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800a2b4:	405a      	eors	r2, r3
 800a2b6:	6482      	str	r2, [r0, #72]	; 0x48
 800a2b8:	4059      	eors	r1, r3
 800a2ba:	63c1      	str	r1, [r0, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
            lfs_gstate_hasorphans(&lfs->gpending));
}
 800a2bc:	4770      	bx	lr

0800a2be <lfs_fs_size_count>:
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 800a2be:	6803      	ldr	r3, [r0, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	6003      	str	r3, [r0, #0]
    return 0;
}
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	4770      	bx	lr

0800a2c8 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800a2c8:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 800a2ca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a2cc:	6a03      	ldr	r3, [r0, #32]
 800a2ce:	428b      	cmp	r3, r1
 800a2d0:	d902      	bls.n	800a2d8 <lfs_bd_erase+0x10>
    return lfs->cfg->erase(lfs->cfg, block);
 800a2d2:	68c3      	ldr	r3, [r0, #12]
 800a2d4:	4798      	blx	r3
}
 800a2d6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->cfg->block_count);
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <lfs_bd_erase+0x1c>)
 800a2da:	4a03      	ldr	r2, [pc, #12]	; (800a2e8 <lfs_bd_erase+0x20>)
 800a2dc:	21dc      	movs	r1, #220	; 0xdc
 800a2de:	4803      	ldr	r0, [pc, #12]	; (800a2ec <lfs_bd_erase+0x24>)
 800a2e0:	f003 fb6a 	bl	800d9b8 <__assert_func>
 800a2e4:	0800f420 	.word	0x0800f420
 800a2e8:	0800f368 	.word	0x0800f368
 800a2ec:	0800f3e8 	.word	0x0800f3e8

0800a2f0 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a2fa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 800a2fe:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a302:	d00c      	beq.n	800a31e <lfs_bd_read+0x2e>
 800a304:	4607      	mov	r7, r0
 800a306:	468a      	mov	sl, r1
 800a308:	4614      	mov	r4, r2
 800a30a:	469b      	mov	fp, r3
    if (off+size > lfs->cfg->block_size) {
 800a30c:	eb05 0309 	add.w	r3, r5, r9
 800a310:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800a312:	69d2      	ldr	r2, [r2, #28]
 800a314:	4293      	cmp	r3, r2
 800a316:	d95a      	bls.n	800a3ce <lfs_bd_read+0xde>
        return LFS_ERR_CORRUPT;
 800a318:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a31c:	e087      	b.n	800a42e <lfs_bd_read+0x13e>
    LFS_ASSERT(block != 0xffffffff);
 800a31e:	4b46      	ldr	r3, [pc, #280]	; (800a438 <lfs_bd_read+0x148>)
 800a320:	4a46      	ldr	r2, [pc, #280]	; (800a43c <lfs_bd_read+0x14c>)
 800a322:	2129      	movs	r1, #41	; 0x29
 800a324:	4846      	ldr	r0, [pc, #280]	; (800a440 <lfs_bd_read+0x150>)
 800a326:	f003 fb47 	bl	800d9b8 <__assert_func>
                off < pcache->off + pcache->size) {
 800a32a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a32e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a332:	18ca      	adds	r2, r1, r3
        if (pcache && block == pcache->block &&
 800a334:	42aa      	cmp	r2, r5
 800a336:	d956      	bls.n	800a3e6 <lfs_bd_read+0xf6>
            if (off >= pcache->off) {
 800a338:	42a9      	cmp	r1, r5
 800a33a:	d904      	bls.n	800a346 <lfs_bd_read+0x56>
            diff = lfs_min(diff, pcache->off-off);
 800a33c:	1b49      	subs	r1, r1, r5
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
 800a33e:	4549      	cmp	r1, r9
 800a340:	bf28      	it	cs
 800a342:	4649      	movcs	r1, r9
 800a344:	e015      	b.n	800a372 <lfs_bd_read+0x82>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a346:	eba1 0805 	sub.w	r8, r1, r5
 800a34a:	4498      	add	r8, r3
 800a34c:	45c8      	cmp	r8, r9
 800a34e:	bf28      	it	cs
 800a350:	46c8      	movcs	r8, r9
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a352:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a356:	1a69      	subs	r1, r5, r1
 800a358:	4642      	mov	r2, r8
 800a35a:	4419      	add	r1, r3
 800a35c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a35e:	f003 fb9e 	bl	800da9e <memcpy>
                data += diff;
 800a362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a364:	4443      	add	r3, r8
 800a366:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 800a368:	4445      	add	r5, r8
                size -= diff;
 800a36a:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 800a36e:	e02e      	b.n	800a3ce <lfs_bd_read+0xde>
        lfs_size_t diff = size;
 800a370:	4649      	mov	r1, r9
        if (block == rcache->block &&
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	42b3      	cmp	r3, r6
 800a376:	d038      	beq.n	800a3ea <lfs_bd_read+0xfa>
        LFS_ASSERT(block < lfs->cfg->block_count);
 800a378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	42b3      	cmp	r3, r6
 800a37e:	d94f      	bls.n	800a420 <lfs_bd_read+0x130>
        rcache->block = block;
 800a380:	6026      	str	r6, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a384:	695b      	ldr	r3, [r3, #20]
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
 800a386:	fbb5 f2f3 	udiv	r2, r5, r3
 800a38a:	fb03 5212 	mls	r2, r3, r2, r5
 800a38e:	1aaa      	subs	r2, r5, r2
 800a390:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a392:	eb05 030b 	add.w	r3, r5, fp
 800a396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a398:	6948      	ldr	r0, [r1, #20]
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
 800a39a:	4403      	add	r3, r0
 800a39c:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800a39e:	fbb3 fcf0 	udiv	ip, r3, r0
 800a3a2:	fb00 301c 	mls	r0, r0, ip, r3
 800a3a6:	1a1b      	subs	r3, r3, r0
                lfs_min(lfs->cfg->block_size - rcache->off,
 800a3a8:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a3aa:	1a80      	subs	r0, r0, r2
 800a3ac:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
 800a3ae:	4288      	cmp	r0, r1
 800a3b0:	bf28      	it	cs
 800a3b2:	4608      	movcs	r0, r1
 800a3b4:	4283      	cmp	r3, r0
 800a3b6:	bf28      	it	cs
 800a3b8:	4603      	movcs	r3, r0
 800a3ba:	60a3      	str	r3, [r4, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800a3bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a3be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	68e3      	ldr	r3, [r4, #12]
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	47c0      	blx	r8
        if (err) {
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	bb78      	cbnz	r0, 800a42e <lfs_bd_read+0x13e>
    while (size > 0) {
 800a3ce:	f1b9 0f00 	cmp.w	r9, #0
 800a3d2:	d02b      	beq.n	800a42c <lfs_bd_read+0x13c>
        if (pcache && block == pcache->block &&
 800a3d4:	f1ba 0f00 	cmp.w	sl, #0
 800a3d8:	d0ca      	beq.n	800a370 <lfs_bd_read+0x80>
 800a3da:	f8da 3000 	ldr.w	r3, [sl]
 800a3de:	42b3      	cmp	r3, r6
 800a3e0:	d0a3      	beq.n	800a32a <lfs_bd_read+0x3a>
        lfs_size_t diff = size;
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	e7c5      	b.n	800a372 <lfs_bd_read+0x82>
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	e7c3      	b.n	800a372 <lfs_bd_read+0x82>
                off < rcache->off + rcache->size) {
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	68a2      	ldr	r2, [r4, #8]
 800a3ee:	1898      	adds	r0, r3, r2
        if (block == rcache->block &&
 800a3f0:	42a8      	cmp	r0, r5
 800a3f2:	d9c1      	bls.n	800a378 <lfs_bd_read+0x88>
            if (off >= rcache->off) {
 800a3f4:	42ab      	cmp	r3, r5
 800a3f6:	d8bf      	bhi.n	800a378 <lfs_bd_read+0x88>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a3f8:	eba3 0805 	sub.w	r8, r3, r5
 800a3fc:	4490      	add	r8, r2
 800a3fe:	4588      	cmp	r8, r1
 800a400:	bf28      	it	cs
 800a402:	4688      	movcs	r8, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a404:	68e1      	ldr	r1, [r4, #12]
 800a406:	1aeb      	subs	r3, r5, r3
 800a408:	4642      	mov	r2, r8
 800a40a:	4419      	add	r1, r3
 800a40c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a40e:	f003 fb46 	bl	800da9e <memcpy>
                data += diff;
 800a412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a414:	4443      	add	r3, r8
 800a416:	930e      	str	r3, [sp, #56]	; 0x38
                off += diff;
 800a418:	4445      	add	r5, r8
                size -= diff;
 800a41a:	eba9 0908 	sub.w	r9, r9, r8
                continue;
 800a41e:	e7d6      	b.n	800a3ce <lfs_bd_read+0xde>
        LFS_ASSERT(block < lfs->cfg->block_count);
 800a420:	4b08      	ldr	r3, [pc, #32]	; (800a444 <lfs_bd_read+0x154>)
 800a422:	4a06      	ldr	r2, [pc, #24]	; (800a43c <lfs_bd_read+0x14c>)
 800a424:	2154      	movs	r1, #84	; 0x54
 800a426:	4806      	ldr	r0, [pc, #24]	; (800a440 <lfs_bd_read+0x150>)
 800a428:	f003 fac6 	bl	800d9b8 <__assert_func>
    return 0;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	b003      	add	sp, #12
 800a432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a436:	bf00      	nop
 800a438:	0800f480 	.word	0x0800f480
 800a43c:	0800f340 	.word	0x0800f340
 800a440:	0800f3e8 	.word	0x0800f3e8
 800a444:	0800f420 	.word	0x0800f420

0800a448 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 800a448:	b530      	push	{r4, r5, lr}
 800a44a:	b087      	sub	sp, #28
 800a44c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 800a44e:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800a450:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	6811      	ldr	r1, [r2, #0]
 800a456:	6852      	ldr	r2, [r2, #4]
 800a458:	2508      	movs	r5, #8
 800a45a:	9503      	str	r5, [sp, #12]
 800a45c:	ad04      	add	r5, sp, #16
 800a45e:	9502      	str	r5, [sp, #8]
 800a460:	9201      	str	r2, [sp, #4]
 800a462:	9100      	str	r1, [sp, #0]
 800a464:	4602      	mov	r2, r0
 800a466:	f100 0110 	add.w	r1, r0, #16
 800a46a:	f7ff ff41 	bl	800a2f0 <lfs_bd_read>
    if (err) {
 800a46e:	4603      	mov	r3, r0
 800a470:	b978      	cbnz	r0, 800a492 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	6861      	ldr	r1, [r4, #4]
 800a476:	4291      	cmp	r1, r2
 800a478:	d008      	beq.n	800a48c <lfs_fs_parent_match+0x44>
 800a47a:	9d05      	ldr	r5, [sp, #20]
 800a47c:	68a0      	ldr	r0, [r4, #8]
 800a47e:	4285      	cmp	r5, r0
 800a480:	d004      	beq.n	800a48c <lfs_fs_parent_match+0x44>
 800a482:	4282      	cmp	r2, r0
 800a484:	d002      	beq.n	800a48c <lfs_fs_parent_match+0x44>
 800a486:	42a9      	cmp	r1, r5
 800a488:	d000      	beq.n	800a48c <lfs_fs_parent_match+0x44>
 800a48a:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800a48c:	3300      	adds	r3, #0
 800a48e:	bf18      	it	ne
 800a490:	2301      	movne	r3, #1
}
 800a492:	4618      	mov	r0, r3
 800a494:	b007      	add	sp, #28
 800a496:	bd30      	pop	{r4, r5, pc}

0800a498 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	b089      	sub	sp, #36	; 0x24
 800a49e:	4682      	mov	sl, r0
 800a4a0:	4689      	mov	r9, r1
 800a4a2:	9205      	str	r2, [sp, #20]
 800a4a4:	4698      	mov	r8, r3
 800a4a6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a4a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a4aa:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800a4ae:	9d15      	ldr	r5, [sp, #84]	; 0x54
    for (lfs_off_t i = 0; i < size; i++) {
 800a4b0:	2400      	movs	r4, #0
 800a4b2:	42ac      	cmp	r4, r5
 800a4b4:	d21d      	bcs.n	800a4f2 <lfs_bd_cmp+0x5a>
        int err = lfs_bd_read(lfs,
 800a4b6:	19a3      	adds	r3, r4, r6
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	f10d 021f 	add.w	r2, sp, #31
 800a4c0:	9202      	str	r2, [sp, #8]
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	9700      	str	r7, [sp, #0]
 800a4c6:	eba8 0304 	sub.w	r3, r8, r4
 800a4ca:	9a05      	ldr	r2, [sp, #20]
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	4650      	mov	r0, sl
 800a4d0:	f7ff ff0e 	bl	800a2f0 <lfs_bd_read>
        if (err) {
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	b968      	cbnz	r0, 800a4f4 <lfs_bd_cmp+0x5c>
        if (dat != data[i]) {
 800a4d8:	f81b 2004 	ldrb.w	r2, [fp, r4]
 800a4dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d101      	bne.n	800a4e8 <lfs_bd_cmp+0x50>
    for (lfs_off_t i = 0; i < size; i++) {
 800a4e4:	3401      	adds	r4, #1
 800a4e6:	e7e4      	b.n	800a4b2 <lfs_bd_cmp+0x1a>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 800a4e8:	d801      	bhi.n	800a4ee <lfs_bd_cmp+0x56>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e002      	b.n	800a4f4 <lfs_bd_cmp+0x5c>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e000      	b.n	800a4f4 <lfs_bd_cmp+0x5c>
    return LFS_CMP_EQ;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	b009      	add	sp, #36	; 0x24
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4fc <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 800a4fc:	b530      	push	{r4, r5, lr}
 800a4fe:	b085      	sub	sp, #20
 800a500:	4604      	mov	r4, r0
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800a502:	6883      	ldr	r3, [r0, #8]
    return tag & 0x000003ff;
 800a504:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800a508:	42ab      	cmp	r3, r5
 800a50a:	bf28      	it	cs
 800a50c:	462b      	movcs	r3, r5
    int res = lfs_bd_cmp(lfs,
 800a50e:	6811      	ldr	r1, [r2, #0]
 800a510:	6852      	ldr	r2, [r2, #4]
 800a512:	6840      	ldr	r0, [r0, #4]
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	9002      	str	r0, [sp, #8]
 800a518:	9201      	str	r2, [sp, #4]
 800a51a:	9100      	str	r1, [sp, #0]
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	2100      	movs	r1, #0
 800a520:	4610      	mov	r0, r2
 800a522:	f7ff ffb9 	bl	800a498 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 800a526:	4603      	mov	r3, r0
 800a528:	b920      	cbnz	r0, 800a534 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
 800a52a:	68a2      	ldr	r2, [r4, #8]
 800a52c:	42aa      	cmp	r2, r5
 800a52e:	d001      	beq.n	800a534 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a530:	d203      	bcs.n	800a53a <lfs_dir_find_match+0x3e>
 800a532:	2301      	movs	r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	b005      	add	sp, #20
 800a538:	bd30      	pop	{r4, r5, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800a53a:	2302      	movs	r3, #2
 800a53c:	e7fa      	b.n	800a534 <lfs_dir_find_match+0x38>
	...

0800a540 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	b095      	sub	sp, #84	; 0x54
 800a546:	4683      	mov	fp, r0
 800a548:	4688      	mov	r8, r1
 800a54a:	4615      	mov	r5, r2
 800a54c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t revs[2] = {0, 0};
 800a54e:	2400      	movs	r4, #0
 800a550:	9410      	str	r4, [sp, #64]	; 0x40
 800a552:	9411      	str	r4, [sp, #68]	; 0x44
    for (int i = 0; i < 2; i++) {
 800a554:	4626      	mov	r6, r4
 800a556:	e000      	b.n	800a55a <lfs_dir_fetchmatch+0x1a>
 800a558:	3601      	adds	r6, #1
 800a55a:	2e01      	cmp	r6, #1
 800a55c:	dc2a      	bgt.n	800a5b4 <lfs_dir_fetchmatch+0x74>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a55e:	00b7      	lsls	r7, r6, #2
        int err = lfs_bd_read(lfs,
 800a560:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a564:	ab10      	add	r3, sp, #64	; 0x40
 800a566:	19da      	adds	r2, r3, r7
        int err = lfs_bd_read(lfs,
 800a568:	2304      	movs	r3, #4
 800a56a:	9303      	str	r3, [sp, #12]
 800a56c:	9202      	str	r2, [sp, #8]
 800a56e:	2100      	movs	r1, #0
 800a570:	9101      	str	r1, [sp, #4]
 800a572:	9000      	str	r0, [sp, #0]
 800a574:	465a      	mov	r2, fp
 800a576:	4658      	mov	r0, fp
 800a578:	f7ff feba 	bl	800a2f0 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 800a57c:	ab14      	add	r3, sp, #80	; 0x50
 800a57e:	441f      	add	r7, r3
 800a580:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 800a584:	4603      	mov	r3, r0
 800a586:	b118      	cbz	r0, 800a590 <lfs_dir_fetchmatch+0x50>
 800a588:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a58c:	f040 823d 	bne.w	800aa0a <lfs_dir_fetchmatch+0x4ca>
        if (err != LFS_ERR_CORRUPT &&
 800a590:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a594:	d0e0      	beq.n	800a558 <lfs_dir_fetchmatch+0x18>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a596:	1c73      	adds	r3, r6, #1
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	bf48      	it	mi
 800a59e:	425b      	negmi	r3, r3
 800a5a0:	a914      	add	r1, sp, #80	; 0x50
 800a5a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a5a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
 800a5aa:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	ddd3      	ble.n	800a558 <lfs_dir_fetchmatch+0x18>
            r = i;
 800a5b0:	4634      	mov	r4, r6
 800a5b2:	e7d1      	b.n	800a558 <lfs_dir_fetchmatch+0x18>
    dir->pair[0] = pair[(r+0)%2];
 800a5b4:	2c00      	cmp	r4, #0
 800a5b6:	f004 0301 	and.w	r3, r4, #1
 800a5ba:	bfb8      	it	lt
 800a5bc:	425b      	neglt	r3, r3
 800a5be:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800a5c2:	f8c8 2000 	str.w	r2, [r8]
    dir->pair[1] = pair[(r+1)%2];
 800a5c6:	3401      	adds	r4, #1
 800a5c8:	f004 0401 	and.w	r4, r4, #1
 800a5cc:	bf48      	it	mi
 800a5ce:	4264      	negmi	r4, r4
 800a5d0:	940a      	str	r4, [sp, #40]	; 0x28
 800a5d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5d6:	f8c8 2004 	str.w	r2, [r8, #4]
    dir->rev = revs[(r+0)%2];
 800a5da:	aa14      	add	r2, sp, #80	; 0x50
 800a5dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5e0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a5e4:	f8c8 3008 	str.w	r3, [r8, #8]
    dir->off = 0; // nonzero = found some commits
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f8c8 300c 	str.w	r3, [r8, #12]
    for (int i = 0; i < 2; i++) {
 800a5ee:	4699      	mov	r9, r3
    lfs_stag_t besttag = -1;
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	9308      	str	r3, [sp, #32]
    for (int i = 0; i < 2; i++) {
 800a5f6:	e04e      	b.n	800a696 <lfs_dir_fetchmatch+0x156>
                if (err == LFS_ERR_CORRUPT) {
 800a5f8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a5fc:	f040 819b 	bne.w	800a936 <lfs_dir_fetchmatch+0x3f6>
                    dir->erased = false;
 800a600:	2300      	movs	r3, #0
 800a602:	f888 3016 	strb.w	r3, [r8, #22]
                    break;
 800a606:	e02f      	b.n	800a668 <lfs_dir_fetchmatch+0x128>
    return (tag & 0x70000000) >> 20;
 800a608:	0d2b      	lsrs	r3, r5, #20
 800a60a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a60e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a612:	d005      	beq.n	800a620 <lfs_dir_fetchmatch+0xe0>
 800a614:	9b06      	ldr	r3, [sp, #24]
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	f888 3016 	strb.w	r3, [r8, #22]
                break;
 800a61e:	e023      	b.n	800a668 <lfs_dir_fetchmatch+0x128>
                        dir->off % lfs->cfg->prog_size == 0);
 800a620:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a624:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	fbb1 f3f2 	udiv	r3, r1, r2
 800a62e:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1ee      	bne.n	800a614 <lfs_dir_fetchmatch+0xd4>
 800a636:	2301      	movs	r3, #1
 800a638:	9306      	str	r3, [sp, #24]
 800a63a:	e7eb      	b.n	800a614 <lfs_dir_fetchmatch+0xd4>
                err = lfs_bd_read(lfs,
 800a63c:	f8d8 2000 	ldr.w	r2, [r8]
 800a640:	1d39      	adds	r1, r7, #4
 800a642:	2004      	movs	r0, #4
 800a644:	9003      	str	r0, [sp, #12]
 800a646:	a80d      	add	r0, sp, #52	; 0x34
 800a648:	9002      	str	r0, [sp, #8]
 800a64a:	9101      	str	r1, [sp, #4]
 800a64c:	9200      	str	r2, [sp, #0]
 800a64e:	465a      	mov	r2, fp
 800a650:	2100      	movs	r1, #0
 800a652:	4658      	mov	r0, fp
 800a654:	f7ff fe4c 	bl	800a2f0 <lfs_bd_read>
                if (err) {
 800a658:	2800      	cmp	r0, #0
 800a65a:	d138      	bne.n	800a6ce <lfs_dir_fetchmatch+0x18e>
                dcrc = lfs_fromle32(dcrc);
 800a65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
 800a65e:	42b3      	cmp	r3, r6
 800a660:	d03e      	beq.n	800a6e0 <lfs_dir_fetchmatch+0x1a0>
                    dir->erased = false;
 800a662:	2300      	movs	r3, #0
 800a664:	f888 3016 	strb.w	r3, [r8, #22]
        if (dir->off > 0) {
 800a668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f040 8167 	bne.w	800a940 <lfs_dir_fetchmatch+0x400>
    lfs_block_t t = pair[0];
 800a672:	f8d8 3000 	ldr.w	r3, [r8]
    pair[0] = pair[1];
 800a676:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a67a:	f8c8 2000 	str.w	r2, [r8]
    pair[1] = t;
 800a67e:	f8c8 3004 	str.w	r3, [r8, #4]
        dir->rev = revs[(r+1)%2];
 800a682:	aa14      	add	r2, sp, #80	; 0x50
 800a684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a68a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800a68e:	f8c8 3008 	str.w	r3, [r8, #8]
    for (int i = 0; i < 2; i++) {
 800a692:	f109 0901 	add.w	r9, r9, #1
 800a696:	f1b9 0f01 	cmp.w	r9, #1
 800a69a:	f300 81a6 	bgt.w	800a9ea <lfs_dir_fetchmatch+0x4aa>
        lfs_block_t temptail[2] = {0xffffffff, 0xffffffff};
 800a69e:	4ac1      	ldr	r2, [pc, #772]	; (800a9a4 <lfs_dir_fetchmatch+0x464>)
 800a6a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a6a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6a6:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a6aa:	2204      	movs	r2, #4
 800a6ac:	f108 0108 	add.w	r1, r8, #8
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	f002 ff2a 	bl	800d50c <lfs_crc>
        lfs_stag_t tempbesttag = besttag;
 800a6b8:	9b08      	ldr	r3, [sp, #32]
 800a6ba:	9307      	str	r3, [sp, #28]
        bool tempsplit = false;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	930b      	str	r3, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
 800a6c0:	461f      	mov	r7, r3
        lfs_tag_t ptag = 0xffffffff;
 800a6c2:	f04f 3aff 	mov.w	sl, #4294967295
        lfs_off_t off = 0;
 800a6c6:	4655      	mov	r5, sl
 800a6c8:	469a      	mov	sl, r3
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	e063      	b.n	800a796 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a6ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a6d2:	d103      	bne.n	800a6dc <lfs_dir_fetchmatch+0x19c>
                        dir->erased = false;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a6da:	e7c5      	b.n	800a668 <lfs_dir_fetchmatch+0x128>
                    return err;
 800a6dc:	9008      	str	r0, [sp, #32]
 800a6de:	e190      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
 800a6e2:	0d1d      	lsrs	r5, r3, #20
                ptag ^= (lfs_tag_chunk(tag) & 1U) << 31;
 800a6e4:	ea84 75c5 	eor.w	r5, r4, r5, lsl #31
                lfs->seed ^= crc;
 800a6e8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a6ec:	4072      	eors	r2, r6
 800a6ee:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a6f2:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a6f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6fa:	bf08      	it	eq
 800a6fc:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a6fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a702:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 800a704:	443b      	add	r3, r7
 800a706:	f8c8 300c 	str.w	r3, [r8, #12]
                dir->etag = ptag;
 800a70a:	f8c8 5010 	str.w	r5, [r8, #16]
                dir->count = tempcount;
 800a70e:	f8a8 a014 	strh.w	sl, [r8, #20]
                dir->tail[0] = temptail[0];
 800a712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a714:	f8c8 3018 	str.w	r3, [r8, #24]
                dir->tail[1] = temptail[1];
 800a718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a71a:	f8c8 301c 	str.w	r3, [r8, #28]
                dir->split = tempsplit;
 800a71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a720:	f888 3017 	strb.w	r3, [r8, #23]
                besttag = tempbesttag;
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	9308      	str	r3, [sp, #32]
                crc = 0xffffffff;
 800a728:	f04f 36ff 	mov.w	r6, #4294967295
 800a72c:	e033      	b.n	800a796 <lfs_dir_fetchmatch+0x256>
                    if (err == LFS_ERR_CORRUPT) {
 800a72e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a732:	d10e      	bne.n	800a752 <lfs_dir_fetchmatch+0x212>
                        dir->erased = false;
 800a734:	2300      	movs	r3, #0
 800a736:	f888 3016 	strb.w	r3, [r8, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a73c:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a73e:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
 800a742:	d108      	bne.n	800a756 <lfs_dir_fetchmatch+0x216>
    return (tag & 0x000ffc00) >> 10;
 800a744:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 800a748:	459a      	cmp	sl, r3
 800a74a:	d80c      	bhi.n	800a766 <lfs_dir_fetchmatch+0x226>
                    tempcount = lfs_tag_id(tag) + 1;
 800a74c:	f103 0a01 	add.w	sl, r3, #1
 800a750:	e009      	b.n	800a766 <lfs_dir_fetchmatch+0x226>
                    return err;
 800a752:	9008      	str	r0, [sp, #32]
 800a754:	e155      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800a756:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a75a:	f000 808c 	beq.w	800a876 <lfs_dir_fetchmatch+0x336>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800a75e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800a762:	f000 80b1 	beq.w	800a8c8 <lfs_dir_fetchmatch+0x388>
            if ((fmask & tag) == (fmask & ftag)) {
 800a766:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a76a:	404b      	eors	r3, r1
 800a76c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a76e:	4213      	tst	r3, r2
 800a770:	d110      	bne.n	800a794 <lfs_dir_fetchmatch+0x254>
                        dir->pair[0], off+sizeof(tag)});
 800a772:	f8d8 3000 	ldr.w	r3, [r8]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a776:	9312      	str	r3, [sp, #72]	; 0x48
                        dir->pair[0], off+sizeof(tag)});
 800a778:	1d3b      	adds	r3, r7, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800a77a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a77c:	aa12      	add	r2, sp, #72	; 0x48
 800a77e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a782:	4798      	blx	r3
                if (res < 0) {
 800a784:	2800      	cmp	r0, #0
 800a786:	f2c0 80bf 	blt.w	800a908 <lfs_dir_fetchmatch+0x3c8>
                if (res == LFS_CMP_EQ) {
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f040 80c3 	bne.w	800a916 <lfs_dir_fetchmatch+0x3d6>
                    tempbesttag = tag;
 800a790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a792:	9307      	str	r3, [sp, #28]
            ptag = tag;
 800a794:	4625      	mov	r5, r4
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a796:	f345 0309 	sbfx	r3, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	bf14      	ite	ne
 800a7a0:	462b      	movne	r3, r5
 800a7a2:	1c6b      	addeq	r3, r5, #1
    return tag & 0x000003ff;
 800a7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a7a8:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 800a7aa:	441f      	add	r7, r3
            int err = lfs_bd_read(lfs,
 800a7ac:	f8cd b014 	str.w	fp, [sp, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a7b0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	9103      	str	r1, [sp, #12]
 800a7be:	a90c      	add	r1, sp, #48	; 0x30
 800a7c0:	9102      	str	r1, [sp, #8]
 800a7c2:	9701      	str	r7, [sp, #4]
 800a7c4:	9200      	str	r2, [sp, #0]
 800a7c6:	465a      	mov	r2, fp
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4658      	mov	r0, fp
 800a7cc:	f7ff fd90 	bl	800a2f0 <lfs_bd_read>
            if (err) {
 800a7d0:	9006      	str	r0, [sp, #24]
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	f47f af10 	bne.w	800a5f8 <lfs_dir_fetchmatch+0xb8>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a7d8:	2204      	movs	r2, #4
 800a7da:	a90c      	add	r1, sp, #48	; 0x30
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f002 fe95 	bl	800d50c <lfs_crc>
 800a7e2:	4606      	mov	r6, r0
            tag = lfs_frombe32(tag) ^ ptag;
 800a7e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800a7e6:	ba24      	rev	r4, r4
 800a7e8:	406c      	eors	r4, r5
 800a7ea:	940c      	str	r4, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag) ||
 800a7ec:	2c00      	cmp	r4, #0
 800a7ee:	f6ff af0b 	blt.w	800a608 <lfs_dir_fetchmatch+0xc8>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a7f2:	f344 0209 	sbfx	r2, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a7f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7fa:	bf14      	ite	ne
 800a7fc:	4622      	movne	r2, r4
 800a7fe:	1c62      	addeq	r2, r4, #1
    return tag & 0x000003ff;
 800a800:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a804:	3204      	adds	r2, #4
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a806:	443a      	add	r2, r7
 800a808:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 800a80c:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 800a80e:	429a      	cmp	r2, r3
 800a810:	f63f aefa 	bhi.w	800a608 <lfs_dir_fetchmatch+0xc8>
    return (tag & 0x70000000) >> 20;
 800a814:	0d22      	lsrs	r2, r4, #20
 800a816:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800a81a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a81e:	f43f af0d 	beq.w	800a63c <lfs_dir_fetchmatch+0xfc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a822:	2504      	movs	r5, #4
 800a824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800a826:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a82a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a82e:	bf08      	it	eq
 800a830:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 800a832:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800a836:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a838:	429d      	cmp	r5, r3
 800a83a:	f4bf af7e 	bcs.w	800a73a <lfs_dir_fetchmatch+0x1fa>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a83e:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f8d8 2000 	ldr.w	r2, [r8]
 800a848:	19e9      	adds	r1, r5, r7
 800a84a:	2001      	movs	r0, #1
 800a84c:	9003      	str	r0, [sp, #12]
 800a84e:	a80d      	add	r0, sp, #52	; 0x34
 800a850:	9002      	str	r0, [sp, #8]
 800a852:	9101      	str	r1, [sp, #4]
 800a854:	9200      	str	r2, [sp, #0]
 800a856:	9a05      	ldr	r2, [sp, #20]
 800a858:	2100      	movs	r1, #0
 800a85a:	4658      	mov	r0, fp
 800a85c:	f7ff fd48 	bl	800a2f0 <lfs_bd_read>
                if (err) {
 800a860:	2800      	cmp	r0, #0
 800a862:	f47f af64 	bne.w	800a72e <lfs_dir_fetchmatch+0x1ee>
                crc = lfs_crc(crc, &dat, 1);
 800a866:	2201      	movs	r2, #1
 800a868:	a90d      	add	r1, sp, #52	; 0x34
 800a86a:	4630      	mov	r0, r6
 800a86c:	f002 fe4e 	bl	800d50c <lfs_crc>
 800a870:	4606      	mov	r6, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a872:	3501      	adds	r5, #1
 800a874:	e7d6      	b.n	800a824 <lfs_dir_fetchmatch+0x2e4>
    return (int8_t)lfs_tag_chunk(tag);
 800a876:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
 800a878:	b291      	uxth	r1, r2
 800a87a:	448a      	add	sl, r1
 800a87c:	fa1f fa8a 	uxth.w	sl, sl
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800a880:	9907      	ldr	r1, [sp, #28]
 800a882:	4608      	mov	r0, r1
 800a884:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800a888:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800a88c:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
 800a890:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a894:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
 800a898:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
 800a89c:	428b      	cmp	r3, r1
 800a89e:	d00f      	beq.n	800a8c0 <lfs_dir_fetchmatch+0x380>
                } else if (tempbesttag != -1 &&
 800a8a0:	9907      	ldr	r1, [sp, #28]
 800a8a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a8a6:	f43f af5e 	beq.w	800a766 <lfs_dir_fetchmatch+0x226>
    return (tag & 0x000ffc00) >> 10;
 800a8aa:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a8ae:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	f4ff af57 	bcc.w	800a766 <lfs_dir_fetchmatch+0x226>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a8b8:	eb00 2382 	add.w	r3, r0, r2, lsl #10
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	e752      	b.n	800a766 <lfs_dir_fetchmatch+0x226>
                    tempbesttag |= 0x80000000;
 800a8c0:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
 800a8c4:	9307      	str	r3, [sp, #28]
 800a8c6:	e74e      	b.n	800a766 <lfs_dir_fetchmatch+0x226>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800a8c8:	f002 0201 	and.w	r2, r2, #1
 800a8cc:	b2d3      	uxtb	r3, r2
 800a8ce:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a8d0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a8da:	1d39      	adds	r1, r7, #4
 800a8dc:	2008      	movs	r0, #8
 800a8de:	9003      	str	r0, [sp, #12]
 800a8e0:	a80e      	add	r0, sp, #56	; 0x38
 800a8e2:	9002      	str	r0, [sp, #8]
 800a8e4:	9101      	str	r1, [sp, #4]
 800a8e6:	9200      	str	r2, [sp, #0]
 800a8e8:	465a      	mov	r2, fp
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4658      	mov	r0, fp
 800a8ee:	f7ff fcff 	bl	800a2f0 <lfs_bd_read>
                if (err) {
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f43f af37 	beq.w	800a766 <lfs_dir_fetchmatch+0x226>
                    if (err == LFS_ERR_CORRUPT) {
 800a8f8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a8fc:	f47f af33 	bne.w	800a766 <lfs_dir_fetchmatch+0x226>
                        dir->erased = false;
 800a900:	2300      	movs	r3, #0
 800a902:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a906:	e6af      	b.n	800a668 <lfs_dir_fetchmatch+0x128>
                    if (res == LFS_ERR_CORRUPT) {
 800a908:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800a90c:	d116      	bne.n	800a93c <lfs_dir_fetchmatch+0x3fc>
                        dir->erased = false;
 800a90e:	2300      	movs	r3, #0
 800a910:	f888 3016 	strb.w	r3, [r8, #22]
                        break;
 800a914:	e6a8      	b.n	800a668 <lfs_dir_fetchmatch+0x128>
                } else if (res == LFS_CMP_GT &&
 800a916:	2802      	cmp	r0, #2
 800a918:	f47f af3c 	bne.w	800a794 <lfs_dir_fetchmatch+0x254>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800a91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 800a91e:	f3c3 2289 	ubfx	r2, r3, #10, #10
 800a922:	9907      	ldr	r1, [sp, #28]
 800a924:	f3c1 2189 	ubfx	r1, r1, #10, #10
                } else if (res == LFS_CMP_GT &&
 800a928:	4291      	cmp	r1, r2
 800a92a:	f4ff af33 	bcc.w	800a794 <lfs_dir_fetchmatch+0x254>
                    tempbesttag = tag | 0x80000000;
 800a92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	e72e      	b.n	800a794 <lfs_dir_fetchmatch+0x254>
                return err;
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	9308      	str	r3, [sp, #32]
 800a93a:	e062      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
                    return res;
 800a93c:	9008      	str	r0, [sp, #32]
 800a93e:	e060      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a940:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800a944:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a946:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800a94a:	d013      	beq.n	800a974 <lfs_dir_fetchmatch+0x434>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800a94c:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
 800a950:	f8d8 1000 	ldr.w	r1, [r8]
 800a954:	428c      	cmp	r4, r1
 800a956:	d021      	beq.n	800a99c <lfs_dir_fetchmatch+0x45c>
 800a958:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800a95c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a960:	4283      	cmp	r3, r0
 800a962:	d01d      	beq.n	800a9a0 <lfs_dir_fetchmatch+0x460>
 800a964:	4284      	cmp	r4, r0
 800a966:	d01f      	beq.n	800a9a8 <lfs_dir_fetchmatch+0x468>
 800a968:	4299      	cmp	r1, r3
 800a96a:	d001      	beq.n	800a970 <lfs_dir_fetchmatch+0x430>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e002      	b.n	800a976 <lfs_dir_fetchmatch+0x436>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <lfs_dir_fetchmatch+0x436>
 800a974:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 800a976:	b1e3      	cbz	r3, 800a9b2 <lfs_dir_fetchmatch+0x472>
    return (tag & 0x000ffc00) >> 10;
 800a978:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a97c:	9a08      	ldr	r2, [sp, #32]
 800a97e:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
 800a980:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 800a984:	429a      	cmp	r2, r3
 800a986:	d011      	beq.n	800a9ac <lfs_dir_fetchmatch+0x46c>
                } else if (besttag != -1 &&
 800a988:	9808      	ldr	r0, [sp, #32]
 800a98a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a98e:	d010      	beq.n	800a9b2 <lfs_dir_fetchmatch+0x472>
 800a990:	429a      	cmp	r2, r3
 800a992:	d90e      	bls.n	800a9b2 <lfs_dir_fetchmatch+0x472>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800a994:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
 800a998:	9308      	str	r3, [sp, #32]
 800a99a:	e00a      	b.n	800a9b2 <lfs_dir_fetchmatch+0x472>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e7ea      	b.n	800a976 <lfs_dir_fetchmatch+0x436>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7e8      	b.n	800a976 <lfs_dir_fetchmatch+0x436>
 800a9a4:	0800ee50 	.word	0x0800ee50
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e7e4      	b.n	800a976 <lfs_dir_fetchmatch+0x436>
                    besttag |= 0x80000000;
 800a9ac:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
 800a9b0:	9308      	str	r3, [sp, #32]
            if (id) {
 800a9b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9b4:	b14b      	cbz	r3, 800a9ca <lfs_dir_fetchmatch+0x48a>
    return (tag & 0x000ffc00) >> 10;
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800a9bc:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    return (a < b) ? a : b;
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bf28      	it	cs
 800a9c4:	4613      	movcs	r3, r2
 800a9c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a9c8:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	da18      	bge.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
    return (tag & 0x000ffc00) >> 10;
 800a9d0:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
 800a9d4:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d802      	bhi.n	800a9e2 <lfs_dir_fetchmatch+0x4a2>
                return 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9308      	str	r3, [sp, #32]
 800a9e0:	e00f      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
                return LFS_ERR_NOENT;
 800a9e2:	f06f 0301 	mvn.w	r3, #1
 800a9e6:	9308      	str	r3, [sp, #32]
 800a9e8:	e00b      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
    LFS_ERROR("Corrupted dir pair at %"PRIu32" %"PRIu32,
 800a9ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a9f2:	f240 31c6 	movw	r1, #966	; 0x3c6
 800a9f6:	4806      	ldr	r0, [pc, #24]	; (800aa10 <lfs_dir_fetchmatch+0x4d0>)
 800a9f8:	f003 fbd0 	bl	800e19c <iprintf>
    return LFS_ERR_CORRUPT;
 800a9fc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800aa00:	9308      	str	r3, [sp, #32]
}
 800aa02:	9808      	ldr	r0, [sp, #32]
 800aa04:	b015      	add	sp, #84	; 0x54
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	9008      	str	r0, [sp, #32]
 800aa0c:	e7f9      	b.n	800aa02 <lfs_dir_fetchmatch+0x4c2>
 800aa0e:	bf00      	nop
 800aa10:	0800f594 	.word	0x0800f594

0800aa14 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	4606      	mov	r6, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 800aa22:	2301      	movs	r3, #1
 800aa24:	61d3      	str	r3, [r2, #28]
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aa26:	69a3      	ldr	r3, [r4, #24]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d022      	beq.n	800aa74 <lfs_fs_parent+0x60>
 800aa2e:	69e3      	ldr	r3, [r4, #28]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d01c      	beq.n	800aa70 <lfs_fs_parent+0x5c>
 800aa36:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(parent->tail)) {
 800aa38:	b9f3      	cbnz	r3, 800aa78 <lfs_fs_parent+0x64>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800aa3a:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
 800aa3c:	682b      	ldr	r3, [r5, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800aa3e:	9306      	str	r3, [sp, #24]
 800aa40:	686b      	ldr	r3, [r5, #4]
 800aa42:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800aa44:	ab05      	add	r3, sp, #20
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <lfs_fs_parent+0x70>)
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <lfs_fs_parent+0x74>)
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <lfs_fs_parent+0x78>)
 800aa56:	f104 0218 	add.w	r2, r4, #24
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7ff fd6f 	bl	800a540 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 800aa62:	4603      	mov	r3, r0
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d0de      	beq.n	800aa26 <lfs_fs_parent+0x12>
 800aa68:	f110 0f02 	cmn.w	r0, #2
 800aa6c:	d0db      	beq.n	800aa26 <lfs_fs_parent+0x12>
 800aa6e:	e005      	b.n	800aa7c <lfs_fs_parent+0x68>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e7e1      	b.n	800aa38 <lfs_fs_parent+0x24>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e7df      	b.n	800aa38 <lfs_fs_parent+0x24>
    return LFS_ERR_NOENT;
 800aa78:	f06f 0301 	mvn.w	r3, #1
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	b008      	add	sp, #32
 800aa80:	bd70      	pop	{r4, r5, r6, pc}
 800aa82:	bf00      	nop
 800aa84:	0800a449 	.word	0x0800a449
 800aa88:	20000008 	.word	0x20000008
 800aa8c:	7ff003ff 	.word	0x7ff003ff

0800aa90 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800aa90:	b500      	push	{lr}
 800aa92:	b085      	sub	sp, #20
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 800aa94:	2300      	movs	r3, #0
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	9302      	str	r3, [sp, #8]
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa2:	f7ff fd4d 	bl	800a540 <lfs_dir_fetchmatch>
}
 800aaa6:	b005      	add	sp, #20
 800aaa8:	f85d fb04 	ldr.w	pc, [sp], #4

0800aaac <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4606      	mov	r6, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 800aab8:	2301      	movs	r3, #1
 800aaba:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 800aabc:	e016      	b.n	800aaec <lfs_fs_pred+0x40>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aabe:	2201      	movs	r2, #1
 800aac0:	e000      	b.n	800aac4 <lfs_fs_pred+0x18>
 800aac2:	2201      	movs	r2, #1
    while (!lfs_pair_isnull(pdir->tail)) {
 800aac4:	b9e2      	cbnz	r2, 800ab00 <lfs_fs_pred+0x54>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800aac6:	682a      	ldr	r2, [r5, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d01d      	beq.n	800ab08 <lfs_fs_pred+0x5c>
 800aacc:	69e0      	ldr	r0, [r4, #28]
 800aace:	6869      	ldr	r1, [r5, #4]
 800aad0:	4288      	cmp	r0, r1
 800aad2:	d01b      	beq.n	800ab0c <lfs_fs_pred+0x60>
 800aad4:	4299      	cmp	r1, r3
 800aad6:	d01b      	beq.n	800ab10 <lfs_fs_pred+0x64>
 800aad8:	4282      	cmp	r2, r0
 800aada:	d01b      	beq.n	800ab14 <lfs_fs_pred+0x68>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800aadc:	f104 0218 	add.w	r2, r4, #24
 800aae0:	4621      	mov	r1, r4
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffd4 	bl	800aa90 <lfs_dir_fetch>
        if (err) {
 800aae8:	4603      	mov	r3, r0
 800aaea:	b958      	cbnz	r0, 800ab04 <lfs_fs_pred+0x58>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800aaec:	69a3      	ldr	r3, [r4, #24]
 800aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf2:	d0e6      	beq.n	800aac2 <lfs_fs_pred+0x16>
 800aaf4:	69e2      	ldr	r2, [r4, #28]
 800aaf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aafa:	d0e0      	beq.n	800aabe <lfs_fs_pred+0x12>
 800aafc:	2200      	movs	r2, #0
 800aafe:	e7e1      	b.n	800aac4 <lfs_fs_pred+0x18>
    return LFS_ERR_NOENT;
 800ab00:	f06f 0301 	mvn.w	r3, #1
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e7fb      	b.n	800ab04 <lfs_fs_pred+0x58>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e7f9      	b.n	800ab04 <lfs_fs_pred+0x58>
 800ab10:	2300      	movs	r3, #0
 800ab12:	e7f7      	b.n	800ab04 <lfs_fs_pred+0x58>
 800ab14:	2300      	movs	r3, #0
 800ab16:	e7f5      	b.n	800ab04 <lfs_fs_pred+0x58>

0800ab18 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	b097      	sub	sp, #92	; 0x5c
 800ab1e:	900a      	str	r0, [sp, #40]	; 0x28
 800ab20:	460d      	mov	r5, r1
 800ab22:	4691      	mov	r9, r2
 800ab24:	461c      	mov	r4, r3
 800ab26:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ab28:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ab2a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 800ab2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab30:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800ab34:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800ab38:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800ab3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab3e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800ab42:	930e      	str	r3, [sp, #56]	; 0x38
 800ab44:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 800ab48:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ab4a:	f344 0a09 	sbfx	sl, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ab4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ab52:	bf14      	ite	ne
 800ab54:	46a2      	movne	sl, r4
 800ab56:	f104 0a01 	addeq.w	sl, r4, #1
    return tag & 0x000003ff;
 800ab5a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800ab5e:	f10a 0a04 	add.w	sl, sl, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800ab62:	44ca      	add	sl, r9
 800ab64:	68eb      	ldr	r3, [r5, #12]
 800ab66:	459a      	cmp	sl, r3
 800ab68:	d32f      	bcc.n	800abca <lfs_dir_traverse+0xb2>
        } else if (attrcount > 0) {
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	dd4c      	ble.n	800ac08 <lfs_dir_traverse+0xf0>
            tag = attrs[0].tag;
 800ab6e:	6833      	ldr	r3, [r6, #0]
 800ab70:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
 800ab72:	f8d6 a004 	ldr.w	sl, [r6, #4]
            attrs += 1;
 800ab76:	3608      	adds	r6, #8
            attrcount -= 1;
 800ab78:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800ab7a:	4b78      	ldr	r3, [pc, #480]	; (800ad5c <lfs_dir_traverse+0x244>)
 800ab7c:	ea08 0303 	and.w	r3, r8, r3
 800ab80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab82:	ea8b 0202 	eor.w	r2, fp, r2
 800ab86:	421a      	tst	r2, r3
 800ab88:	d1df      	bne.n	800ab4a <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800ab8a:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(tmask) != 0) {
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d166      	bne.n	800ac60 <lfs_dir_traverse+0x148>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800ab92:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
 800ab94:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0d6      	beq.n	800ab4a <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800ab9c:	f240 1201 	movw	r2, #257	; 0x101
 800aba0:	4293      	cmp	r3, r2
 800aba2:	f000 8082 	beq.w	800acaa <lfs_dir_traverse+0x192>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800aba6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800abaa:	f000 80a4 	beq.w	800acf6 <lfs_dir_traverse+0x1de>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800abae:	4652      	mov	r2, sl
 800abb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abb2:	eb01 2183 	add.w	r1, r1, r3, lsl #10
 800abb6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800abb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800abba:	4798      	blx	r3
            if (err) {
 800abbc:	4603      	mov	r3, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0c3      	beq.n	800ab4a <lfs_dir_traverse+0x32>
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	b017      	add	sp, #92	; 0x5c
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int err = lfs_bd_read(lfs,
 800abca:	682a      	ldr	r2, [r5, #0]
 800abcc:	2304      	movs	r3, #4
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	a913      	add	r1, sp, #76	; 0x4c
 800abd2:	9102      	str	r1, [sp, #8]
 800abd4:	f8cd a004 	str.w	sl, [sp, #4]
 800abd8:	9200      	str	r2, [sp, #0]
 800abda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abdc:	4602      	mov	r2, r0
 800abde:	2100      	movs	r1, #0
 800abe0:	f7ff fb86 	bl	800a2f0 <lfs_bd_read>
            if (err) {
 800abe4:	4603      	mov	r3, r0
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d1eb      	bne.n	800abc2 <lfs_dir_traverse+0xaa>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800abea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
 800abec:	ba1b      	rev	r3, r3
 800abee:	405c      	eors	r4, r3
 800abf0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800abf4:	9413      	str	r4, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
 800abfa:	f10a 0304 	add.w	r3, sl, #4
 800abfe:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
 800ac00:	46d1      	mov	r9, sl
            buffer = &disk;
 800ac02:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800ac06:	e7b8      	b.n	800ab7a <lfs_dir_traverse+0x62>
        } else if (!hasseenmove &&
 800ac08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 80a1 	bne.w	800ad52 <lfs_dir_traverse+0x23a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ac10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800ac14:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ac16:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800ac1a:	d010      	beq.n	800ac3e <lfs_dir_traverse+0x126>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ac1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ac1e:	6829      	ldr	r1, [r5, #0]
 800ac20:	428b      	cmp	r3, r1
 800ac22:	d017      	beq.n	800ac54 <lfs_dir_traverse+0x13c>
 800ac24:	f8d0 c044 	ldr.w	ip, [r0, #68]	; 0x44
 800ac28:	6868      	ldr	r0, [r5, #4]
 800ac2a:	4584      	cmp	ip, r0
 800ac2c:	d014      	beq.n	800ac58 <lfs_dir_traverse+0x140>
 800ac2e:	4283      	cmp	r3, r0
 800ac30:	d014      	beq.n	800ac5c <lfs_dir_traverse+0x144>
 800ac32:	4561      	cmp	r1, ip
 800ac34:	d001      	beq.n	800ac3a <lfs_dir_traverse+0x122>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e002      	b.n	800ac40 <lfs_dir_traverse+0x128>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e000      	b.n	800ac40 <lfs_dir_traverse+0x128>
 800ac3e:	2300      	movs	r3, #0
        } else if (!hasseenmove &&
 800ac40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 8087 	beq.w	800ad56 <lfs_dir_traverse+0x23e>
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800ac48:	4b45      	ldr	r3, [pc, #276]	; (800ad60 <lfs_dir_traverse+0x248>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = NULL;
 800ac4e:	f04f 0a00 	mov.w	sl, #0
            hasseenmove = true;
 800ac52:	e792      	b.n	800ab7a <lfs_dir_traverse+0x62>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e7f3      	b.n	800ac40 <lfs_dir_traverse+0x128>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e7f1      	b.n	800ac40 <lfs_dir_traverse+0x128>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e7ef      	b.n	800ac40 <lfs_dir_traverse+0x128>
            int filter = lfs_dir_traverse(lfs,
 800ac60:	ab13      	add	r3, sp, #76	; 0x4c
 800ac62:	9309      	str	r3, [sp, #36]	; 0x24
 800ac64:	4b3f      	ldr	r3, [pc, #252]	; (800ad64 <lfs_dir_traverse+0x24c>)
 800ac66:	9308      	str	r3, [sp, #32]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	9306      	str	r3, [sp, #24]
 800ac6e:	9305      	str	r3, [sp, #20]
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	9303      	str	r3, [sp, #12]
 800ac74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac76:	9302      	str	r3, [sp, #8]
 800ac78:	9701      	str	r7, [sp, #4]
 800ac7a:	9600      	str	r6, [sp, #0]
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	464a      	mov	r2, r9
 800ac80:	4629      	mov	r1, r5
 800ac82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac84:	f7ff ff48 	bl	800ab18 <lfs_dir_traverse>
            if (filter < 0) {
 800ac88:	1e03      	subs	r3, r0, #0
 800ac8a:	db9a      	blt.n	800abc2 <lfs_dir_traverse+0xaa>
            if (filter) {
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f47f af5c 	bne.w	800ab4a <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 800ac92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac94:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800ac98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	f63f af55 	bhi.w	800ab4a <lfs_dir_traverse+0x32>
 800aca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aca2:	429a      	cmp	r2, r3
 800aca4:	f63f af75 	bhi.w	800ab92 <lfs_dir_traverse+0x7a>
 800aca8:	e74f      	b.n	800ab4a <lfs_dir_traverse+0x32>
            uint16_t fromid = lfs_tag_size(tag);
 800acaa:	f3c1 0209 	ubfx	r2, r1, #0, #10
    return (tag & 0x000ffc00) >> 10;
 800acae:	f3c1 2389 	ubfx	r3, r1, #10, #10
            int err = lfs_dir_traverse(lfs,
 800acb2:	1c50      	adds	r0, r2, #1
                    fromid, fromid+1, toid-fromid+diff,
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acba:	440b      	add	r3, r1
            int err = lfs_dir_traverse(lfs,
 800acbc:	b21b      	sxth	r3, r3
 800acbe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800acc0:	9109      	str	r1, [sp, #36]	; 0x24
 800acc2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800acc4:	9108      	str	r1, [sp, #32]
 800acc6:	9307      	str	r3, [sp, #28]
 800acc8:	9006      	str	r0, [sp, #24]
 800acca:	9205      	str	r2, [sp, #20]
 800accc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <lfs_dir_traverse+0x250>)
 800acd4:	9303      	str	r3, [sp, #12]
 800acd6:	2301      	movs	r3, #1
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	2200      	movs	r2, #0
 800acdc:	9201      	str	r2, [sp, #4]
 800acde:	9200      	str	r2, [sp, #0]
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295
 800ace4:	4651      	mov	r1, sl
 800ace6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ace8:	f7ff ff16 	bl	800ab18 <lfs_dir_traverse>
            if (err) {
 800acec:	4603      	mov	r3, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	f43f af2b 	beq.w	800ab4a <lfs_dir_traverse+0x32>
 800acf4:	e765      	b.n	800abc2 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800acf6:	2300      	movs	r3, #0
 800acf8:	950f      	str	r5, [sp, #60]	; 0x3c
 800acfa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800acfe:	9411      	str	r4, [sp, #68]	; 0x44
 800ad00:	461c      	mov	r4, r3
 800ad02:	46b1      	mov	r9, r6
 800ad04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad06:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800ad08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
 800ad0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ad0e:	4294      	cmp	r4, r2
 800ad10:	d219      	bcs.n	800ad46 <lfs_dir_traverse+0x22e>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800ad12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ad16:	0091      	lsls	r1, r2, #2
 800ad18:	eb0a 0201 	add.w	r2, sl, r1
 800ad1c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 800ad20:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
 800ad24:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800ad28:	442b      	add	r3, r5
 800ad2a:	029b      	lsls	r3, r3, #10
 800ad2c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800ad30:	6891      	ldr	r1, [r2, #8]
 800ad32:	6852      	ldr	r2, [r2, #4]
 800ad34:	4319      	orrs	r1, r3
 800ad36:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ad38:	47b0      	blx	r6
                if (err) {
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f47f af40 	bne.w	800abc2 <lfs_dir_traverse+0xaa>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ad42:	3401      	adds	r4, #1
 800ad44:	e7e0      	b.n	800ad08 <lfs_dir_traverse+0x1f0>
 800ad46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ad4a:	464e      	mov	r6, r9
 800ad4c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800ad50:	e6fb      	b.n	800ab4a <lfs_dir_traverse+0x32>
            return 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e735      	b.n	800abc2 <lfs_dir_traverse+0xaa>
 800ad56:	2300      	movs	r3, #0
 800ad58:	e733      	b.n	800abc2 <lfs_dir_traverse+0xaa>
 800ad5a:	bf00      	nop
 800ad5c:	7ff00000 	.word	0x7ff00000
 800ad60:	7ffffc00 	.word	0x7ffffc00
 800ad64:	0800a221 	.word	0x0800a221
 800ad68:	600ffc00 	.word	0x600ffc00

0800ad6c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	b089      	sub	sp, #36	; 0x24
 800ad72:	4607      	mov	r7, r0
 800ad74:	468a      	mov	sl, r1
 800ad76:	4691      	mov	r9, r2
 800ad78:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 800ad7a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 800ad7c:	690b      	ldr	r3, [r1, #16]
 800ad7e:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad80:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800ad82:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ad84:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800ad88:	d010      	beq.n	800adac <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ad8a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ad8c:	6809      	ldr	r1, [r1, #0]
 800ad8e:	4291      	cmp	r1, r2
 800ad90:	d019      	beq.n	800adc6 <lfs_dir_getslice+0x5a>
 800ad92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ad94:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d016      	beq.n	800adca <lfs_dir_getslice+0x5e>
 800ad9c:	4290      	cmp	r0, r2
 800ad9e:	d016      	beq.n	800adce <lfs_dir_getslice+0x62>
 800ada0:	428c      	cmp	r4, r1
 800ada2:	d001      	beq.n	800ada8 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ada4:	2200      	movs	r2, #0
 800ada6:	e002      	b.n	800adae <lfs_dir_getslice+0x42>
 800ada8:	2201      	movs	r2, #1
 800adaa:	e000      	b.n	800adae <lfs_dir_getslice+0x42>
 800adac:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800adae:	2a00      	cmp	r2, #0
 800adb0:	f000 8088 	beq.w	800aec4 <lfs_dir_getslice+0x158>
    return (tag & 0x000ffc00) >> 10;
 800adb4:	f3cb 2289 	ubfx	r2, fp, #10, #10
 800adb8:	f3c3 2389 	ubfx	r3, r3, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 800adbc:	4293      	cmp	r3, r2
 800adbe:	f080 8083 	bcs.w	800aec8 <lfs_dir_getslice+0x15c>
    lfs_stag_t gdiff = 0;
 800adc2:	2600      	movs	r6, #0
 800adc4:	e00e      	b.n	800ade4 <lfs_dir_getslice+0x78>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800adc6:	2201      	movs	r2, #1
 800adc8:	e7f1      	b.n	800adae <lfs_dir_getslice+0x42>
 800adca:	2201      	movs	r2, #1
 800adcc:	e7ef      	b.n	800adae <lfs_dir_getslice+0x42>
 800adce:	2201      	movs	r2, #1
 800add0:	e7ed      	b.n	800adae <lfs_dir_getslice+0x42>
    return (int8_t)lfs_tag_chunk(tag);
 800add2:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800add4:	eb01 2686 	add.w	r6, r1, r6, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800add8:	ebab 0306 	sub.w	r3, fp, r6
 800addc:	4063      	eors	r3, r4
 800adde:	ea13 0f09 	tst.w	r3, r9
 800ade2:	d049      	beq.n	800ae78 <lfs_dir_getslice+0x10c>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800ade4:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ade6:	f344 0809 	sbfx	r8, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800adea:	f1b8 3fff 	cmp.w	r8, #4294967295
 800adee:	bf14      	ite	ne
 800adf0:	4623      	movne	r3, r4
 800adf2:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 800adf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800adf8:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800adfa:	3308      	adds	r3, #8
 800adfc:	42ab      	cmp	r3, r5
 800adfe:	d865      	bhi.n	800aecc <lfs_dir_getslice+0x160>
        off -= lfs_tag_dsize(ntag);
 800ae00:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
 800ae02:	9705      	str	r7, [sp, #20]
 800ae04:	f8da 2000 	ldr.w	r2, [sl]
 800ae08:	2304      	movs	r3, #4
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	a907      	add	r1, sp, #28
 800ae0e:	9102      	str	r1, [sp, #8]
 800ae10:	9501      	str	r5, [sp, #4]
 800ae12:	9200      	str	r2, [sp, #0]
 800ae14:	463a      	mov	r2, r7
 800ae16:	2100      	movs	r1, #0
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f7ff fa69 	bl	800a2f0 <lfs_bd_read>
        if (err) {
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d155      	bne.n	800aed0 <lfs_dir_getslice+0x164>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	ba1b      	rev	r3, r3
 800ae28:	4063      	eors	r3, r4
 800ae2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae2e:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 800ae30:	f3c9 2389 	ubfx	r3, r9, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0cf      	beq.n	800add8 <lfs_dir_getslice+0x6c>
    return (tag & 0x70000000) >> 20;
 800ae38:	0d23      	lsrs	r3, r4, #20
 800ae3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
 800ae3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae42:	d1c9      	bne.n	800add8 <lfs_dir_getslice+0x6c>
    return (tag & 0x000ffc00) >> 10;
 800ae44:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800ae48:	4631      	mov	r1, r6
 800ae4a:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 800ae4e:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800ae52:	4584      	cmp	ip, r0
 800ae54:	d3c0      	bcc.n	800add8 <lfs_dir_getslice+0x6c>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800ae56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ae5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ae5e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800ae62:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800ae66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ae6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ae6e:	42a2      	cmp	r2, r4
 800ae70:	d1af      	bne.n	800add2 <lfs_dir_getslice+0x66>
                return LFS_ERR_NOENT;
 800ae72:	f06f 0301 	mvn.w	r3, #1
 800ae76:	e02b      	b.n	800aed0 <lfs_dir_getslice+0x164>
 800ae78:	46b1      	mov	r9, r6
            if (lfs_tag_isdelete(tag)) {
 800ae7a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ae7e:	d02b      	beq.n	800aed8 <lfs_dir_getslice+0x16c>
    return tag & 0x000003ff;
 800ae80:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 800ae84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae86:	429e      	cmp	r6, r3
 800ae88:	bf28      	it	cs
 800ae8a:	461e      	movcs	r6, r3
            err = lfs_bd_read(lfs,
 800ae8c:	f8da 2000 	ldr.w	r2, [sl]
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800ae90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae92:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 800ae94:	3304      	adds	r3, #4
 800ae96:	9603      	str	r6, [sp, #12]
 800ae98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae9a:	9102      	str	r1, [sp, #8]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	9200      	str	r2, [sp, #0]
 800aea0:	4633      	mov	r3, r6
 800aea2:	9a05      	ldr	r2, [sp, #20]
 800aea4:	2100      	movs	r1, #0
 800aea6:	4638      	mov	r0, r7
 800aea8:	f7ff fa22 	bl	800a2f0 <lfs_bd_read>
            if (err) {
 800aeac:	4603      	mov	r3, r0
 800aeae:	b978      	cbnz	r0, 800aed0 <lfs_dir_getslice+0x164>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800aeb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeb2:	1b9a      	subs	r2, r3, r6
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aeb8:	1998      	adds	r0, r3, r6
 800aeba:	f002 fdfb 	bl	800dab4 <memset>
            return tag + gdiff;
 800aebe:	464b      	mov	r3, r9
 800aec0:	4423      	add	r3, r4
 800aec2:	e005      	b.n	800aed0 <lfs_dir_getslice+0x164>
    lfs_stag_t gdiff = 0;
 800aec4:	2600      	movs	r6, #0
 800aec6:	e78d      	b.n	800ade4 <lfs_dir_getslice+0x78>
        gdiff -= LFS_MKTAG(0, 1, 0);
 800aec8:	4e05      	ldr	r6, [pc, #20]	; (800aee0 <lfs_dir_getslice+0x174>)
 800aeca:	e78b      	b.n	800ade4 <lfs_dir_getslice+0x78>
    return LFS_ERR_NOENT;
 800aecc:	f06f 0301 	mvn.w	r3, #1
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	b009      	add	sp, #36	; 0x24
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
 800aed8:	f06f 0301 	mvn.w	r3, #1
 800aedc:	e7f8      	b.n	800aed0 <lfs_dir_getslice+0x164>
 800aede:	bf00      	nop
 800aee0:	fffffc00 	.word	0xfffffc00

0800aee4 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800aee4:	b510      	push	{r4, lr}
 800aee6:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 800aee8:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 800aeec:	9402      	str	r4, [sp, #8]
 800aeee:	9c06      	ldr	r4, [sp, #24]
 800aef0:	9401      	str	r4, [sp, #4]
 800aef2:	2400      	movs	r4, #0
 800aef4:	9400      	str	r4, [sp, #0]
 800aef6:	f7ff ff39 	bl	800ad6c <lfs_dir_getslice>
}
 800aefa:	b004      	add	sp, #16
 800aefc:	bd10      	pop	{r4, pc}
	...

0800af00 <lfs_dir_getgstate>:
        struct lfs_gstate *gstate) {
 800af00:	b510      	push	{r4, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800af06:	ab03      	add	r3, sp, #12
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	4b10      	ldr	r3, [pc, #64]	; (800af4c <lfs_dir_getgstate+0x4c>)
 800af0c:	4a10      	ldr	r2, [pc, #64]	; (800af50 <lfs_dir_getgstate+0x50>)
 800af0e:	f7ff ffe9 	bl	800aee4 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800af12:	2800      	cmp	r0, #0
 800af14:	db04      	blt.n	800af20 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
 800af16:	f110 0f02 	cmn.w	r0, #2
 800af1a:	d005      	beq.n	800af28 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
 800af1c:	2300      	movs	r3, #0
 800af1e:	e010      	b.n	800af42 <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
 800af20:	f110 0f02 	cmn.w	r0, #2
 800af24:	d110      	bne.n	800af48 <lfs_dir_getgstate+0x48>
 800af26:	e7f6      	b.n	800af16 <lfs_dir_getgstate+0x16>
    return 0;
 800af28:	2000      	movs	r0, #0
 800af2a:	e00d      	b.n	800af48 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800af2c:	aa06      	add	r2, sp, #24
 800af2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800af32:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 800af36:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800af3a:	404a      	eors	r2, r1
 800af3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 800af40:	3301      	adds	r3, #1
 800af42:	2b02      	cmp	r3, #2
 800af44:	ddf2      	ble.n	800af2c <lfs_dir_getgstate+0x2c>
    return 0;
 800af46:	2000      	movs	r0, #0
}
 800af48:	b006      	add	sp, #24
 800af4a:	bd10      	pop	{r4, pc}
 800af4c:	7ff0000c 	.word	0x7ff0000c
 800af50:	7ff00000 	.word	0x7ff00000

0800af54 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	b085      	sub	sp, #20
 800af5a:	4606      	mov	r6, r0
 800af5c:	468a      	mov	sl, r1
 800af5e:	4690      	mov	r8, r2
 800af60:	461c      	mov	r4, r3
 800af62:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800af66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800af68:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
 800af6a:	19ea      	adds	r2, r5, r7
 800af6c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	429a      	cmp	r2, r3
 800af72:	d951      	bls.n	800b018 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 800af74:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800af78:	e078      	b.n	800b06c <lfs_dir_getread+0x118>
                off < pcache->off + pcache->size) {
 800af7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af82:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == 0xfffffffe &&
 800af84:	42aa      	cmp	r2, r5
 800af86:	d91d      	bls.n	800afc4 <lfs_dir_getread+0x70>
            if (off >= pcache->off) {
 800af88:	42a9      	cmp	r1, r5
 800af8a:	d904      	bls.n	800af96 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
 800af8c:	1b49      	subs	r1, r1, r5
 800af8e:	42b9      	cmp	r1, r7
 800af90:	bf28      	it	cs
 800af92:	4639      	movcs	r1, r7
 800af94:	e04a      	b.n	800b02c <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800af96:	eba1 0b05 	sub.w	fp, r1, r5
 800af9a:	449b      	add	fp, r3
 800af9c:	45bb      	cmp	fp, r7
 800af9e:	bf28      	it	cs
 800afa0:	46bb      	movcs	fp, r7
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800afa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afa6:	1a69      	subs	r1, r5, r1
 800afa8:	465a      	mov	r2, fp
 800afaa:	4419      	add	r1, r3
 800afac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afae:	f002 fd76 	bl	800da9e <memcpy>
                data += diff;
 800afb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb4:	445b      	add	r3, fp
 800afb6:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800afb8:	445d      	add	r5, fp
                size -= diff;
 800afba:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800afbe:	e02b      	b.n	800b018 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 800afc0:	4639      	mov	r1, r7
 800afc2:	e033      	b.n	800b02c <lfs_dir_getread+0xd8>
 800afc4:	4639      	mov	r1, r7
 800afc6:	e031      	b.n	800b02c <lfs_dir_getread+0xd8>
        rcache->block = 0xfffffffe;
 800afc8:	f06f 0301 	mvn.w	r3, #1
 800afcc:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800afce:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800afd0:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
 800afd2:	fbb5 f2f3 	udiv	r2, r5, r3
 800afd6:	fb03 5212 	mls	r2, r3, r2, r5
 800afda:	1aaa      	subs	r2, r5, r2
 800afdc:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800afde:	eb05 0309 	add.w	r3, r5, r9
 800afe2:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800afe4:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 800afe8:	4463      	add	r3, ip
 800afea:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800afec:	fbb3 f1fc 	udiv	r1, r3, ip
 800aff0:	fb0c 3111 	mls	r1, ip, r1, r3
 800aff4:	1a5b      	subs	r3, r3, r1
 800aff6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
 800aff8:	428b      	cmp	r3, r1
 800affa:	bf28      	it	cs
 800affc:	460b      	movcs	r3, r1
 800affe:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 800b000:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800b002:	9302      	str	r3, [sp, #8]
 800b004:	9101      	str	r1, [sp, #4]
 800b006:	9200      	str	r2, [sp, #0]
 800b008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b00a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b00c:	4651      	mov	r1, sl
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff feac 	bl	800ad6c <lfs_dir_getslice>
        if (err) {
 800b014:	4603      	mov	r3, r0
 800b016:	bb48      	cbnz	r0, 800b06c <lfs_dir_getread+0x118>
    while (size > 0) {
 800b018:	b33f      	cbz	r7, 800b06a <lfs_dir_getread+0x116>
        if (pcache && pcache->block == 0xfffffffe &&
 800b01a:	f1b8 0f00 	cmp.w	r8, #0
 800b01e:	d0cf      	beq.n	800afc0 <lfs_dir_getread+0x6c>
 800b020:	f8d8 3000 	ldr.w	r3, [r8]
 800b024:	f113 0f02 	cmn.w	r3, #2
 800b028:	d0a7      	beq.n	800af7a <lfs_dir_getread+0x26>
        lfs_size_t diff = size;
 800b02a:	4639      	mov	r1, r7
        if (rcache->block == 0xfffffffe &&
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f113 0f02 	cmn.w	r3, #2
 800b032:	d1c9      	bne.n	800afc8 <lfs_dir_getread+0x74>
                off < rcache->off + rcache->size) {
 800b034:	6863      	ldr	r3, [r4, #4]
 800b036:	68a2      	ldr	r2, [r4, #8]
 800b038:	1898      	adds	r0, r3, r2
        if (rcache->block == 0xfffffffe &&
 800b03a:	42a8      	cmp	r0, r5
 800b03c:	d9c4      	bls.n	800afc8 <lfs_dir_getread+0x74>
            if (off >= rcache->off) {
 800b03e:	42ab      	cmp	r3, r5
 800b040:	d8c2      	bhi.n	800afc8 <lfs_dir_getread+0x74>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800b042:	eba3 0b05 	sub.w	fp, r3, r5
 800b046:	4493      	add	fp, r2
 800b048:	458b      	cmp	fp, r1
 800b04a:	bf28      	it	cs
 800b04c:	468b      	movcs	fp, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800b04e:	68e1      	ldr	r1, [r4, #12]
 800b050:	1aeb      	subs	r3, r5, r3
 800b052:	465a      	mov	r2, fp
 800b054:	4419      	add	r1, r3
 800b056:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b058:	f002 fd21 	bl	800da9e <memcpy>
                data += diff;
 800b05c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b05e:	445b      	add	r3, fp
 800b060:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 800b062:	445d      	add	r5, fp
                size -= diff;
 800b064:	eba7 070b 	sub.w	r7, r7, fp
                continue;
 800b068:	e7d6      	b.n	800b018 <lfs_dir_getread+0xc4>
    return 0;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	b005      	add	sp, #20
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b074 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	460d      	mov	r5, r1
    if (pcache->block != 0xffffffff && pcache->block != 0xfffffffe) {
 800b07c:	6809      	ldr	r1, [r1, #0]
 800b07e:	1c8c      	adds	r4, r1, #2
 800b080:	2c01      	cmp	r4, #1
 800b082:	d93d      	bls.n	800b100 <lfs_bd_flush+0x8c>
 800b084:	4698      	mov	r8, r3
 800b086:	4692      	mov	sl, r2
 800b088:	4606      	mov	r6, r0
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800b08a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800b08c:	6a03      	ldr	r3, [r0, #32]
 800b08e:	4299      	cmp	r1, r3
 800b090:	d230      	bcs.n	800b0f4 <lfs_bd_flush+0x80>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800b092:	68ac      	ldr	r4, [r5, #8]
 800b094:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800b096:	4414      	add	r4, r2
 800b098:	3c01      	subs	r4, #1
    return a - (a % alignment);
 800b09a:	fbb4 f3f2 	udiv	r3, r4, r2
 800b09e:	fb02 4313 	mls	r3, r2, r3, r4
 800b0a2:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800b0a4:	6887      	ldr	r7, [r0, #8]
 800b0a6:	9400      	str	r4, [sp, #0]
 800b0a8:	68eb      	ldr	r3, [r5, #12]
 800b0aa:	686a      	ldr	r2, [r5, #4]
 800b0ac:	47b8      	blx	r7
        if (err) {
 800b0ae:	4681      	mov	r9, r0
 800b0b0:	bb40      	cbnz	r0, 800b104 <lfs_bd_flush+0x90>
        if (validate) {
 800b0b2:	f1b8 0f00 	cmp.w	r8, #0
 800b0b6:	d013      	beq.n	800b0e0 <lfs_bd_flush+0x6c>
    rcache->block = 0xffffffff;
 800b0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0bc:	f8ca 3000 	str.w	r3, [sl]
            int res = lfs_bd_cmp(lfs,
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	686a      	ldr	r2, [r5, #4]
                    pcache->block, pcache->off, pcache->buffer, diff);
 800b0c4:	68e9      	ldr	r1, [r5, #12]
            int res = lfs_bd_cmp(lfs,
 800b0c6:	9403      	str	r4, [sp, #12]
 800b0c8:	9102      	str	r1, [sp, #8]
 800b0ca:	9201      	str	r2, [sp, #4]
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	4652      	mov	r2, sl
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff f9df 	bl	800a498 <lfs_bd_cmp>
            if (res < 0) {
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	db16      	blt.n	800b10c <lfs_bd_flush+0x98>
            if (res != LFS_CMP_EQ) {
 800b0de:	b9b8      	cbnz	r0, 800b110 <lfs_bd_flush+0x9c>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b0e0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800b0e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0e4:	21ff      	movs	r1, #255	; 0xff
 800b0e6:	68e8      	ldr	r0, [r5, #12]
 800b0e8:	f002 fce4 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	e007      	b.n	800b104 <lfs_bd_flush+0x90>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800b0f4:	4b08      	ldr	r3, [pc, #32]	; (800b118 <lfs_bd_flush+0xa4>)
 800b0f6:	4a09      	ldr	r2, [pc, #36]	; (800b11c <lfs_bd_flush+0xa8>)
 800b0f8:	2184      	movs	r1, #132	; 0x84
 800b0fa:	4809      	ldr	r0, [pc, #36]	; (800b120 <lfs_bd_flush+0xac>)
 800b0fc:	f002 fc5c 	bl	800d9b8 <__assert_func>
    return 0;
 800b100:	f04f 0900 	mov.w	r9, #0
}
 800b104:	4648      	mov	r0, r9
 800b106:	b004      	add	sp, #16
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return res;
 800b10c:	4681      	mov	r9, r0
 800b10e:	e7f9      	b.n	800b104 <lfs_bd_flush+0x90>
                return LFS_ERR_CORRUPT;
 800b110:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800b114:	e7f6      	b.n	800b104 <lfs_bd_flush+0x90>
 800b116:	bf00      	nop
 800b118:	0800f418 	.word	0x0800f418
 800b11c:	0800f34c 	.word	0x0800f34c
 800b120:	0800f3e8 	.word	0x0800f3e8

0800b124 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	b083      	sub	sp, #12
 800b12a:	9201      	str	r2, [sp, #4]
 800b12c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b12e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b130:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b134:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block != 0xffffffff);
 800b136:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b13a:	d00d      	beq.n	800b158 <lfs_bd_prog+0x34>
 800b13c:	4680      	mov	r8, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	469b      	mov	fp, r3
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800b142:	19eb      	adds	r3, r5, r7
 800b144:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800b146:	69d2      	ldr	r2, [r2, #28]
 800b148:	4293      	cmp	r3, r2
 800b14a:	d91a      	bls.n	800b182 <lfs_bd_prog+0x5e>
 800b14c:	4b2a      	ldr	r3, [pc, #168]	; (800b1f8 <lfs_bd_prog+0xd4>)
 800b14e:	4a2b      	ldr	r2, [pc, #172]	; (800b1fc <lfs_bd_prog+0xd8>)
 800b150:	21b3      	movs	r1, #179	; 0xb3
 800b152:	482b      	ldr	r0, [pc, #172]	; (800b200 <lfs_bd_prog+0xdc>)
 800b154:	f002 fc30 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(block != 0xffffffff);
 800b158:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <lfs_bd_prog+0xe0>)
 800b15a:	4a28      	ldr	r2, [pc, #160]	; (800b1fc <lfs_bd_prog+0xd8>)
 800b15c:	21b2      	movs	r1, #178	; 0xb2
 800b15e:	4828      	ldr	r0, [pc, #160]	; (800b200 <lfs_bd_prog+0xdc>)
 800b160:	f002 fc2a 	bl	800d9b8 <__assert_func>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800b164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b168:	d13a      	bne.n	800b1e0 <lfs_bd_prog+0xbc>
        pcache->block = block;
 800b16a:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800b16c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	fbb5 f3f2 	udiv	r3, r5, r2
 800b176:	fb02 5313 	mls	r3, r2, r3, r5
 800b17a:	1aeb      	subs	r3, r5, r3
 800b17c:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 800b182:	b39f      	cbz	r7, 800b1ec <lfs_bd_prog+0xc8>
        if (block == pcache->block &&
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	42b3      	cmp	r3, r6
 800b188:	d1ec      	bne.n	800b164 <lfs_bd_prog+0x40>
                off >= pcache->off &&
 800b18a:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 800b18c:	42aa      	cmp	r2, r5
 800b18e:	d8e9      	bhi.n	800b164 <lfs_bd_prog+0x40>
                off < pcache->off + lfs->cfg->cache_size) {
 800b190:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 800b194:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800b196:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 800b198:	42a8      	cmp	r0, r5
 800b19a:	d9e3      	bls.n	800b164 <lfs_bd_prog+0x40>
                    lfs->cfg->cache_size - (off-pcache->off));
 800b19c:	eba2 0905 	sub.w	r9, r2, r5
            lfs_size_t diff = lfs_min(size,
 800b1a0:	4489      	add	r9, r1
    return (a < b) ? a : b;
 800b1a2:	45b9      	cmp	r9, r7
 800b1a4:	bf28      	it	cs
 800b1a6:	46b9      	movcs	r9, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800b1a8:	68e3      	ldr	r3, [r4, #12]
 800b1aa:	1aa8      	subs	r0, r5, r2
 800b1ac:	464a      	mov	r2, r9
 800b1ae:	4651      	mov	r1, sl
 800b1b0:	4418      	add	r0, r3
 800b1b2:	f002 fc74 	bl	800da9e <memcpy>
            data += diff;
 800b1b6:	44ca      	add	sl, r9
            off += diff;
 800b1b8:	444d      	add	r5, r9
            size -= diff;
 800b1ba:	eba7 0709 	sub.w	r7, r7, r9
            pcache->size = off - pcache->off;
 800b1be:	6863      	ldr	r3, [r4, #4]
 800b1c0:	1aeb      	subs	r3, r5, r3
 800b1c2:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800b1c4:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800b1c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d1d9      	bne.n	800b182 <lfs_bd_prog+0x5e>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b1ce:	465b      	mov	r3, fp
 800b1d0:	9a01      	ldr	r2, [sp, #4]
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	f7ff ff4d 	bl	800b074 <lfs_bd_flush>
                if (err) {
 800b1da:	4603      	mov	r3, r0
 800b1dc:	b938      	cbnz	r0, 800b1ee <lfs_bd_prog+0xca>
 800b1de:	e7d0      	b.n	800b182 <lfs_bd_prog+0x5e>
        LFS_ASSERT(pcache->block == 0xffffffff);
 800b1e0:	4b09      	ldr	r3, [pc, #36]	; (800b208 <lfs_bd_prog+0xe4>)
 800b1e2:	4a06      	ldr	r2, [pc, #24]	; (800b1fc <lfs_bd_prog+0xd8>)
 800b1e4:	21d0      	movs	r1, #208	; 0xd0
 800b1e6:	4806      	ldr	r0, [pc, #24]	; (800b200 <lfs_bd_prog+0xdc>)
 800b1e8:	f002 fbe6 	bl	800d9b8 <__assert_func>
    return 0;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	b003      	add	sp, #12
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	bf00      	nop
 800b1f8:	0800f440 	.word	0x0800f440
 800b1fc:	0800f35c 	.word	0x0800f35c
 800b200:	0800f3e8 	.word	0x0800f3e8
 800b204:	0800f480 	.word	0x0800f480
 800b208:	0800f464 	.word	0x0800f464

0800b20c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 800b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20e:	b085      	sub	sp, #20
 800b210:	460c      	mov	r4, r1
 800b212:	4617      	mov	r7, r2
 800b214:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
 800b216:	680b      	ldr	r3, [r1, #0]
 800b218:	684a      	ldr	r2, [r1, #4]
 800b21a:	9603      	str	r6, [sp, #12]
 800b21c:	9702      	str	r7, [sp, #8]
 800b21e:	9201      	str	r2, [sp, #4]
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	4602      	mov	r2, r0
 800b226:	f100 0110 	add.w	r1, r0, #16
 800b22a:	f7ff ff7b 	bl	800b124 <lfs_bd_prog>
    if (err) {
 800b22e:	4605      	mov	r5, r0
 800b230:	b110      	cbz	r0, 800b238 <lfs_dir_commitprog+0x2c>
}
 800b232:	4628      	mov	r0, r5
 800b234:	b005      	add	sp, #20
 800b236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 800b238:	4632      	mov	r2, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	68e0      	ldr	r0, [r4, #12]
 800b23e:	f002 f965 	bl	800d50c <lfs_crc>
 800b242:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 800b244:	6863      	ldr	r3, [r4, #4]
 800b246:	441e      	add	r6, r3
 800b248:	6066      	str	r6, [r4, #4]
    return 0;
 800b24a:	e7f2      	b.n	800b232 <lfs_dir_commitprog+0x26>

0800b24c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	b087      	sub	sp, #28
    return ((int32_t)(tag << 22) >> 22) == -1;
 800b252:	f342 0709 	sbfx	r7, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b256:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b25a:	bf14      	ite	ne
 800b25c:	4617      	movne	r7, r2
 800b25e:	1c57      	addeq	r7, r2, #1
    return tag & 0x000003ff;
 800b260:	f3c7 0709 	ubfx	r7, r7, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800b264:	f107 0904 	add.w	r9, r7, #4
    if (commit->off + dsize > commit->end) {
 800b268:	684c      	ldr	r4, [r1, #4]
 800b26a:	eb04 0c09 	add.w	ip, r4, r9
 800b26e:	694c      	ldr	r4, [r1, #20]
 800b270:	45a4      	cmp	ip, r4
 800b272:	d846      	bhi.n	800b302 <lfs_dir_commitattr+0xb6>
 800b274:	4698      	mov	r8, r3
 800b276:	4615      	mov	r5, r2
 800b278:	460e      	mov	r6, r1
 800b27a:	4604      	mov	r4, r0
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b27c:	f022 4b00 	bic.w	fp, r2, #2147483648	; 0x80000000
 800b280:	688b      	ldr	r3, [r1, #8]
 800b282:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 800b286:	ba1b      	rev	r3, r3
 800b288:	aa06      	add	r2, sp, #24
 800b28a:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b28e:	2304      	movs	r3, #4
 800b290:	f7ff ffbc 	bl	800b20c <lfs_dir_commitprog>
    if (err) {
 800b294:	4682      	mov	sl, r0
 800b296:	bb70      	cbnz	r0, 800b2f6 <lfs_dir_commitattr+0xaa>
    if (!(tag & 0x80000000)) {
 800b298:	2d00      	cmp	r5, #0
 800b29a:	da23      	bge.n	800b2e4 <lfs_dir_commitattr+0x98>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b29c:	2500      	movs	r5, #0
 800b29e:	42bd      	cmp	r5, r7
 800b2a0:	d227      	bcs.n	800b2f2 <lfs_dir_commitattr+0xa6>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b2a2:	eba9 0305 	sub.w	r3, r9, r5
            err = lfs_bd_read(lfs,
 800b2a6:	f8d8 1000 	ldr.w	r1, [r8]
                    disk->block, disk->off+i, &dat, 1);
 800b2aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
            err = lfs_bd_read(lfs,
 800b2ae:	442a      	add	r2, r5
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	9003      	str	r0, [sp, #12]
 800b2b4:	f10d 0013 	add.w	r0, sp, #19
 800b2b8:	9002      	str	r0, [sp, #8]
 800b2ba:	9201      	str	r2, [sp, #4]
 800b2bc:	9100      	str	r1, [sp, #0]
 800b2be:	3b04      	subs	r3, #4
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f7ff f813 	bl	800a2f0 <lfs_bd_read>
            if (err) {
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	b9b8      	cbnz	r0, 800b2fe <lfs_dir_commitattr+0xb2>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f10d 0213 	add.w	r2, sp, #19
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff ff98 	bl	800b20c <lfs_dir_commitprog>
            if (err) {
 800b2dc:	4603      	mov	r3, r0
 800b2de:	b970      	cbnz	r0, 800b2fe <lfs_dir_commitattr+0xb2>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	e7dc      	b.n	800b29e <lfs_dir_commitattr+0x52>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	4642      	mov	r2, r8
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7ff ff8e 	bl	800b20c <lfs_dir_commitprog>
        if (err) {
 800b2f0:	b950      	cbnz	r0, 800b308 <lfs_dir_commitattr+0xbc>
    commit->ptag = tag & 0x7fffffff;
 800b2f2:	f8c6 b008 	str.w	fp, [r6, #8]
}
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	b007      	add	sp, #28
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 800b2fe:	469a      	mov	sl, r3
 800b300:	e7f9      	b.n	800b2f6 <lfs_dir_commitattr+0xaa>
        return LFS_ERR_NOSPC;
 800b302:	f06f 0a1b 	mvn.w	sl, #27
 800b306:	e7f6      	b.n	800b2f6 <lfs_dir_commitattr+0xaa>
            return err;
 800b308:	4682      	mov	sl, r0
 800b30a:	e7f4      	b.n	800b2f6 <lfs_dir_commitattr+0xaa>

0800b30c <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b30c:	b508      	push	{r3, lr}
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b30e:	4613      	mov	r3, r2
 800b310:	460a      	mov	r2, r1
 800b312:	6841      	ldr	r1, [r0, #4]
 800b314:	6800      	ldr	r0, [r0, #0]
 800b316:	f7ff ff99 	bl	800b24c <lfs_dir_commitattr>
}
 800b31a:	bd08      	pop	{r3, pc}

0800b31c <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
    rcache->block = 0xffffffff;
 800b320:	f04f 34ff 	mov.w	r4, #4294967295
 800b324:	6014      	str	r4, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800b326:	f7ff fea5 	bl	800b074 <lfs_bd_flush>
    if (err) {
 800b32a:	4603      	mov	r3, r0
 800b32c:	b918      	cbnz	r0, 800b336 <lfs_bd_sync+0x1a>
    return lfs->cfg->sync(lfs->cfg);
 800b32e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800b330:	6903      	ldr	r3, [r0, #16]
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
}
 800b336:	4618      	mov	r0, r3
 800b338:	bd38      	pop	{r3, r4, r5, pc}

0800b33a <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b33a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b344:	684b      	ldr	r3, [r1, #4]
 800b346:	3308      	adds	r3, #8
            lfs->cfg->prog_size);
 800b348:	6e82      	ldr	r2, [r0, #104]	; 0x68
    lfs_off_t off = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b34a:	6992      	ldr	r2, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800b34c:	4413      	add	r3, r2
 800b34e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 800b350:	fbb3 f8f2 	udiv	r8, r3, r2
 800b354:	fb02 3818 	mls	r8, r2, r8, r3
 800b358:	eba3 0708 	sub.w	r7, r3, r8
    int err = lfs_bd_read(lfs,
 800b35c:	4683      	mov	fp, r0
 800b35e:	680a      	ldr	r2, [r1, #0]
 800b360:	2304      	movs	r3, #4
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	a907      	add	r1, sp, #28
 800b366:	9102      	str	r1, [sp, #8]
 800b368:	9701      	str	r7, [sp, #4]
 800b36a:	9200      	str	r2, [sp, #0]
 800b36c:	4602      	mov	r2, r0
 800b36e:	2100      	movs	r1, #0
 800b370:	f7fe ffbe 	bl	800a2f0 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
 800b374:	b138      	cbz	r0, 800b386 <lfs_dir_commitcrc+0x4c>
 800b376:	4681      	mov	r9, r0
 800b378:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800b37c:	d003      	beq.n	800b386 <lfs_dir_commitcrc+0x4c>
}
 800b37e:	4648      	mov	r0, r9
 800b380:	b009      	add	sp, #36	; 0x24
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool reset = ~lfs_frombe32(tag) >> 31;
 800b386:	9e07      	ldr	r6, [sp, #28]
    return __builtin_bswap32(a);
 800b388:	ba36      	rev	r6, r6
 800b38a:	43f6      	mvns	r6, r6
 800b38c:	0ff6      	lsrs	r6, r6, #31
 800b38e:	b2f6      	uxtb	r6, r6
    tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff,
 800b390:	f506 62a0 	add.w	r2, r6, #1280	; 0x500
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	1afb      	subs	r3, r7, r3
 800b398:	3b04      	subs	r3, #4
 800b39a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b39e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b3a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b3a6:	9307      	str	r3, [sp, #28]
    footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b3a8:	68a2      	ldr	r2, [r4, #8]
 800b3aa:	4053      	eors	r3, r2
 800b3ac:	ba1b      	rev	r3, r3
 800b3ae:	f10d 0820 	add.w	r8, sp, #32
 800b3b2:	f848 3d0c 	str.w	r3, [r8, #-12]!
    commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	68e0      	ldr	r0, [r4, #12]
 800b3bc:	f002 f8a6 	bl	800d50c <lfs_crc>
 800b3c0:	60e0      	str	r0, [r4, #12]
    footer[1] = lfs_tole32(commit->crc);
 800b3c2:	9006      	str	r0, [sp, #24]
    err = lfs_bd_prog(lfs,
 800b3c4:	f105 0a10 	add.w	sl, r5, #16
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	6862      	ldr	r2, [r4, #4]
 800b3cc:	2108      	movs	r1, #8
 800b3ce:	9103      	str	r1, [sp, #12]
 800b3d0:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3d4:	9201      	str	r2, [sp, #4]
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	2300      	movs	r3, #0
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4651      	mov	r1, sl
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f7ff fea0 	bl	800b124 <lfs_bd_prog>
    if (err) {
 800b3e4:	4681      	mov	r9, r0
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d1c9      	bne.n	800b37e <lfs_dir_commitcrc+0x44>
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b3ea:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
 800b3ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
    commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b3f0:	1d11      	adds	r1, r2, #4
 800b3f2:	6862      	ldr	r2, [r4, #4]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	6062      	str	r2, [r4, #4]
    commit->ptag = tag ^ (reset << 31);
 800b3f8:	ea83 76c6 	eor.w	r6, r3, r6, lsl #31
 800b3fc:	60a6      	str	r6, [r4, #8]
    err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b3fe:	2300      	movs	r3, #0
 800b400:	462a      	mov	r2, r5
 800b402:	4651      	mov	r1, sl
 800b404:	4628      	mov	r0, r5
 800b406:	f7ff ff89 	bl	800b31c <lfs_bd_sync>
    if (err) {
 800b40a:	4681      	mov	r9, r0
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1b6      	bne.n	800b37e <lfs_dir_commitcrc+0x44>
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	9a07      	ldr	r2, [sp, #28]
    return tag & 0x000003ff;
 800b414:	f3c2 0809 	ubfx	r8, r2, #0, #10
    lfs_size_t size = commit->off - lfs_tag_size(tag) - commit->begin;
 800b418:	eba3 0308 	sub.w	r3, r3, r8
 800b41c:	6922      	ldr	r2, [r4, #16]
 800b41e:	eba3 0802 	sub.w	r8, r3, r2
    for (lfs_off_t i = 0; i < size; i++) {
 800b422:	2600      	movs	r6, #0
    uint32_t crc = 0xffffffff;
 800b424:	f04f 3aff 	mov.w	sl, #4294967295
    for (lfs_off_t i = 0; i < size; i++) {
 800b428:	e007      	b.n	800b43a <lfs_dir_commitcrc+0x100>
        crc = lfs_crc(crc, &dat, 1);
 800b42a:	2201      	movs	r2, #1
 800b42c:	f10d 0113 	add.w	r1, sp, #19
 800b430:	4650      	mov	r0, sl
 800b432:	f002 f86b 	bl	800d50c <lfs_crc>
 800b436:	4682      	mov	sl, r0
    for (lfs_off_t i = 0; i < size; i++) {
 800b438:	3601      	adds	r6, #1
 800b43a:	4546      	cmp	r6, r8
 800b43c:	d214      	bcs.n	800b468 <lfs_dir_commitcrc+0x12e>
        err = lfs_bd_read(lfs,
 800b43e:	6822      	ldr	r2, [r4, #0]
                commit->block, commit->begin+i, &dat, 1);
 800b440:	6923      	ldr	r3, [r4, #16]
        err = lfs_bd_read(lfs,
 800b442:	4433      	add	r3, r6
 800b444:	2101      	movs	r1, #1
 800b446:	9103      	str	r1, [sp, #12]
 800b448:	f10d 0113 	add.w	r1, sp, #19
 800b44c:	9102      	str	r1, [sp, #8]
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	9200      	str	r2, [sp, #0]
 800b452:	eba8 0306 	sub.w	r3, r8, r6
 800b456:	465a      	mov	r2, fp
 800b458:	2100      	movs	r1, #0
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7fe ff48 	bl	800a2f0 <lfs_bd_read>
        if (err) {
 800b460:	4681      	mov	r9, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	d0e1      	beq.n	800b42a <lfs_dir_commitcrc+0xf0>
 800b466:	e78a      	b.n	800b37e <lfs_dir_commitcrc+0x44>
    if (err) {
 800b468:	f1b9 0f00 	cmp.w	r9, #0
 800b46c:	d187      	bne.n	800b37e <lfs_dir_commitcrc+0x44>
    if (crc != commit->crc) {
 800b46e:	68e3      	ldr	r3, [r4, #12]
 800b470:	4553      	cmp	r3, sl
 800b472:	d084      	beq.n	800b37e <lfs_dir_commitcrc+0x44>
        return LFS_ERR_CORRUPT;
 800b474:	f06f 0953 	mvn.w	r9, #83	; 0x53
 800b478:	e781      	b.n	800b37e <lfs_dir_commitcrc+0x44>
	...

0800b47c <lfs_dir_find>:
        const char **path, uint16_t *id) {
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	b08d      	sub	sp, #52	; 0x34
 800b482:	4683      	mov	fp, r0
 800b484:	460f      	mov	r7, r1
 800b486:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 800b488:	6812      	ldr	r2, [r2, #0]
 800b48a:	9205      	str	r2, [sp, #20]
    if (id) {
 800b48c:	9306      	str	r3, [sp, #24]
 800b48e:	b11b      	cbz	r3, 800b498 <lfs_dir_find+0x1c>
 800b490:	461a      	mov	r2, r3
        *id = 0x3ff;
 800b492:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b496:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 800b498:	f8db 3020 	ldr.w	r3, [fp, #32]
 800b49c:	61bb      	str	r3, [r7, #24]
    dir->tail[1] = lfs->root[1];
 800b49e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800b4a2:	61fb      	str	r3, [r7, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800b4a4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800b5f0 <lfs_dir_find+0x174>
 800b4a8:	46b8      	mov	r8, r7
        name += strspn(name, "/");
 800b4aa:	4c4d      	ldr	r4, [pc, #308]	; (800b5e0 <lfs_dir_find+0x164>)
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	9e05      	ldr	r6, [sp, #20]
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f002 feda 	bl	800e26a <strspn>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	1837      	adds	r7, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f002 fec2 	bl	800e246 <strcspn>
 800b4c2:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b4c4:	2801      	cmp	r0, #1
 800b4c6:	d00b      	beq.n	800b4e0 <lfs_dir_find+0x64>
 800b4c8:	f1ba 0f02 	cmp.w	sl, #2
 800b4cc:	d00d      	beq.n	800b4ea <lfs_dir_find+0x6e>
        const char *suffix = name + namelen;
 800b4ce:	eb07 030a 	add.w	r3, r7, sl
 800b4d2:	9305      	str	r3, [sp, #20]
 800b4d4:	461c      	mov	r4, r3
        int depth = 1;
 800b4d6:	2601      	movs	r6, #1
 800b4d8:	e014      	b.n	800b504 <lfs_dir_find+0x88>
 800b4da:	4681      	mov	r9, r0
 800b4dc:	46ab      	mov	fp, r5
 800b4de:	e7e4      	b.n	800b4aa <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b4e0:	9b05      	ldr	r3, [sp, #20]
 800b4e2:	5d5b      	ldrb	r3, [r3, r5]
 800b4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e6:	d1ef      	bne.n	800b4c8 <lfs_dir_find+0x4c>
 800b4e8:	e006      	b.n	800b4f8 <lfs_dir_find+0x7c>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	493d      	ldr	r1, [pc, #244]	; (800b5e4 <lfs_dir_find+0x168>)
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f002 fac6 	bl	800da80 <memcmp>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d1ea      	bne.n	800b4ce <lfs_dir_find+0x52>
            name += namelen;
 800b4f8:	eb07 030a 	add.w	r3, r7, sl
 800b4fc:	9305      	str	r3, [sp, #20]
            goto nextname;
 800b4fe:	e7d4      	b.n	800b4aa <lfs_dir_find+0x2e>
                depth += 1;
 800b500:	3601      	adds	r6, #1
            suffix += sufflen;
 800b502:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
 800b504:	4d36      	ldr	r5, [pc, #216]	; (800b5e0 <lfs_dir_find+0x164>)
 800b506:	4629      	mov	r1, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	f002 feae 	bl	800e26a <strspn>
 800b50e:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
 800b510:	4629      	mov	r1, r5
 800b512:	4620      	mov	r0, r4
 800b514:	f002 fe97 	bl	800e246 <strcspn>
            if (sufflen == 0) {
 800b518:	4605      	mov	r5, r0
 800b51a:	b168      	cbz	r0, 800b538 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800b51c:	2802      	cmp	r0, #2
 800b51e:	d1ef      	bne.n	800b500 <lfs_dir_find+0x84>
 800b520:	2202      	movs	r2, #2
 800b522:	4930      	ldr	r1, [pc, #192]	; (800b5e4 <lfs_dir_find+0x168>)
 800b524:	4620      	mov	r0, r4
 800b526:	f002 faab 	bl	800da80 <memcmp>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1e8      	bne.n	800b500 <lfs_dir_find+0x84>
                if (depth == 0) {
 800b52e:	3e01      	subs	r6, #1
 800b530:	d1e7      	bne.n	800b502 <lfs_dir_find+0x86>
                    name = suffix + sufflen;
 800b532:	1963      	adds	r3, r4, r5
 800b534:	9305      	str	r3, [sp, #20]
                    goto nextname;
 800b536:	e7b8      	b.n	800b4aa <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 800b538:	783b      	ldrb	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d04b      	beq.n	800b5d6 <lfs_dir_find+0x15a>
        *path = name;
 800b53e:	9b07      	ldr	r3, [sp, #28]
 800b540:	601f      	str	r7, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
 800b542:	f3c9 530a 	ubfx	r3, r9, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800b546:	2b02      	cmp	r3, #2
 800b548:	d141      	bne.n	800b5ce <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 800b54a:	f3c9 2989 	ubfx	r9, r9, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 800b54e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b552:	4599      	cmp	r9, r3
 800b554:	d102      	bne.n	800b55c <lfs_dir_find+0xe0>
 800b556:	4654      	mov	r4, sl
 800b558:	465d      	mov	r5, fp
 800b55a:	e02b      	b.n	800b5b4 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b55c:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b560:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	f049 5300 	orr.w	r3, r9, #536870912	; 0x20000000
 800b56a:	f043 0308 	orr.w	r3, r3, #8
 800b56e:	4a1e      	ldr	r2, [pc, #120]	; (800b5e8 <lfs_dir_find+0x16c>)
 800b570:	4641      	mov	r1, r8
 800b572:	4658      	mov	r0, fp
 800b574:	f7ff fcb6 	bl	800aee4 <lfs_dir_get>
            if (res < 0) {
 800b578:	f1b0 0900 	subs.w	r9, r0, #0
 800b57c:	db2b      	blt.n	800b5d6 <lfs_dir_find+0x15a>
 800b57e:	4654      	mov	r4, sl
 800b580:	465d      	mov	r5, fp
 800b582:	e017      	b.n	800b5b4 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b584:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b586:	9509      	str	r5, [sp, #36]	; 0x24
 800b588:	970a      	str	r7, [sp, #40]	; 0x28
 800b58a:	940b      	str	r4, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b58c:	aa09      	add	r2, sp, #36	; 0x24
 800b58e:	9203      	str	r2, [sp, #12]
 800b590:	4a16      	ldr	r2, [pc, #88]	; (800b5ec <lfs_dir_find+0x170>)
 800b592:	9202      	str	r2, [sp, #8]
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	9400      	str	r4, [sp, #0]
 800b598:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b59c:	4632      	mov	r2, r6
 800b59e:	4641      	mov	r1, r8
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f7fe ffcd 	bl	800a540 <lfs_dir_fetchmatch>
            if (tag < 0) {
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	db14      	blt.n	800b5d4 <lfs_dir_find+0x158>
            if (tag) {
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d195      	bne.n	800b4da <lfs_dir_find+0x5e>
            if (!dir->split) {
 800b5ae:	f898 3017 	ldrb.w	r3, [r8, #23]
 800b5b2:	b14b      	cbz	r3, 800b5c8 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b5b4:	f108 0618 	add.w	r6, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b5b8:	212f      	movs	r1, #47	; 0x2f
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	f002 fe36 	bl	800e22c <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d0df      	beq.n	800b584 <lfs_dir_find+0x108>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e7de      	b.n	800b586 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 800b5c8:	f06f 0901 	mvn.w	r9, #1
 800b5cc:	e003      	b.n	800b5d6 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 800b5ce:	f06f 0913 	mvn.w	r9, #19
 800b5d2:	e000      	b.n	800b5d6 <lfs_dir_find+0x15a>
 800b5d4:	4681      	mov	r9, r0
}
 800b5d6:	4648      	mov	r0, r9
 800b5d8:	b00d      	add	sp, #52	; 0x34
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5de:	bf00      	nop
 800b5e0:	0800f5c4 	.word	0x0800f5c4
 800b5e4:	0800f5c8 	.word	0x0800f5c8
 800b5e8:	700ffc00 	.word	0x700ffc00
 800b5ec:	0800a4fd 	.word	0x0800a4fd
 800b5f0:	002ffc00 	.word	0x002ffc00

0800b5f4 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 800b5f8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fc:	b13b      	cbz	r3, 800b60e <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 800b5fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b602:	b143      	cbz	r3, 800b616 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 800b604:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	b14b      	cbz	r3, 800b61e <lfs_deinit+0x2a>
}
 800b60a:	2000      	movs	r0, #0
 800b60c:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 800b60e:	68c0      	ldr	r0, [r0, #12]
 800b610:	f002 fa2e 	bl	800da70 <free>
 800b614:	e7f3      	b.n	800b5fe <lfs_deinit+0xa>
 800b616:	69e0      	ldr	r0, [r4, #28]
 800b618:	f002 fa2a 	bl	800da70 <free>
 800b61c:	e7f2      	b.n	800b604 <lfs_deinit+0x10>
 800b61e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b620:	f002 fa26 	bl	800da70 <free>
 800b624:	e7f1      	b.n	800b60a <lfs_deinit+0x16>

0800b626 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800b626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 800b628:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800b62a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b62c:	69dc      	ldr	r4, [r3, #28]
 800b62e:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
 800b630:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
 800b634:	b190      	cbz	r0, 800b65c <lfs_ctz_index+0x36>
 800b636:	460e      	mov	r6, r1
    return __builtin_popcount(a);
 800b638:	3801      	subs	r0, #1
 800b63a:	f7f4 fe01 	bl	8000240 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800b63e:	1c85      	adds	r5, r0, #2
 800b640:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
 800b644:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
 800b648:	fb05 7414 	mls	r4, r5, r4, r7
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7f4 fdf7 	bl	8000240 <__popcountsi2>
 800b652:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
 800b656:	6034      	str	r4, [r6, #0]
    return i;
 800b658:	4628      	mov	r0, r5
}
 800b65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7fc      	b.n	800b65a <lfs_ctz_index+0x34>

0800b660 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	b089      	sub	sp, #36	; 0x24
 800b666:	461c      	mov	r4, r3
 800b668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b66a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    if (size == 0) {
 800b66c:	b923      	cbnz	r3, 800b678 <lfs_ctz_traverse+0x18>
        return 0;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	b009      	add	sp, #36	; 0x24
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	4681      	mov	r9, r0
 800b67a:	468a      	mov	sl, r1
 800b67c:	4693      	mov	fp, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b67e:	3b01      	subs	r3, #1
 800b680:	a908      	add	r1, sp, #32
 800b682:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b686:	f7ff ffce 	bl	800b626 <lfs_ctz_index>
 800b68a:	4680      	mov	r8, r0
        int err = cb(data, head);
 800b68c:	4621      	mov	r1, r4
 800b68e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b690:	47a8      	blx	r5
        if (err) {
 800b692:	4603      	mov	r3, r0
 800b694:	2800      	cmp	r0, #0
 800b696:	d1eb      	bne.n	800b670 <lfs_ctz_traverse+0x10>
        if (index == 0) {
 800b698:	f1b8 0f00 	cmp.w	r8, #0
 800b69c:	d0e8      	beq.n	800b670 <lfs_ctz_traverse+0x10>
        int count = 2 - (index & 1);
 800b69e:	f008 0701 	and.w	r7, r8, #1
 800b6a2:	f1c7 0702 	rsb	r7, r7, #2
 800b6a6:	463e      	mov	r6, r7
                pcache, rcache, count*sizeof(head),
 800b6a8:	00bb      	lsls	r3, r7, #2
        err = lfs_bd_read(lfs,
 800b6aa:	9303      	str	r3, [sp, #12]
 800b6ac:	aa05      	add	r2, sp, #20
 800b6ae:	9202      	str	r2, [sp, #8]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	9400      	str	r4, [sp, #0]
 800b6b6:	465a      	mov	r2, fp
 800b6b8:	4651      	mov	r1, sl
 800b6ba:	4648      	mov	r0, r9
 800b6bc:	f7fe fe18 	bl	800a2f0 <lfs_bd_read>
        if (err) {
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	b9b0      	cbnz	r0, 800b6f2 <lfs_ctz_traverse+0x92>
        for (int i = 0; i < count-1; i++) {
 800b6c4:	1e73      	subs	r3, r6, #1
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	dd0b      	ble.n	800b6e2 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 800b6ca:	ab08      	add	r3, sp, #32
 800b6cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b6d0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800b6d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b6d6:	47a8      	blx	r5
            if (err) {
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d1c8      	bne.n	800b670 <lfs_ctz_traverse+0x10>
        for (int i = 0; i < count-1; i++) {
 800b6de:	3401      	adds	r4, #1
 800b6e0:	e7f0      	b.n	800b6c4 <lfs_ctz_traverse+0x64>
        head = heads[count-1];
 800b6e2:	aa08      	add	r2, sp, #32
 800b6e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6e8:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 800b6ec:	eba8 0807 	sub.w	r8, r8, r7
    while (true) {
 800b6f0:	e7cc      	b.n	800b68c <lfs_ctz_traverse+0x2c>
            return err;
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	e7bc      	b.n	800b670 <lfs_ctz_traverse+0x10>
	...

0800b6f8 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4604      	mov	r4, r0
    lfs->cfg = cfg;
 800b6fc:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b6fe:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800b700:	694a      	ldr	r2, [r1, #20]
 800b702:	fbb0 f3f2 	udiv	r3, r0, r2
 800b706:	fb02 0313 	mls	r3, r2, r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d172      	bne.n	800b7f4 <lfs_init+0xfc>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b70e:	698a      	ldr	r2, [r1, #24]
 800b710:	fbb0 f3f2 	udiv	r3, r0, r2
 800b714:	fb02 0313 	mls	r3, r2, r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d172      	bne.n	800b802 <lfs_init+0x10a>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b71c:	69ca      	ldr	r2, [r1, #28]
 800b71e:	fbb2 f3f0 	udiv	r3, r2, r0
 800b722:	fb00 2313 	mls	r3, r0, r3, r2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d172      	bne.n	800b810 <lfs_init+0x118>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b72a:	f1a2 0508 	sub.w	r5, r2, #8
 800b72e:	f04f 33ff 	mov.w	r3, #4294967295
 800b732:	fbb3 f3f5 	udiv	r3, r3, r5
    return 32 - __builtin_clz(a-1);
 800b736:	3b01      	subs	r3, #1
 800b738:	fab3 f383 	clz	r3, r3
 800b73c:	f1c3 0320 	rsb	r3, r3, #32
 800b740:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b744:	d36b      	bcc.n	800b81e <lfs_init+0x126>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b746:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d06e      	beq.n	800b82c <lfs_init+0x134>
    if (lfs->cfg->read_buffer) {
 800b74e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800b750:	2b00      	cmp	r3, #0
 800b752:	d072      	beq.n	800b83a <lfs_init+0x142>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800b754:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 800b756:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b758:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d078      	beq.n	800b850 <lfs_init+0x158>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800b75e:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b760:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b764:	21ff      	movs	r1, #255	; 0xff
 800b766:	68e0      	ldr	r0, [r4, #12]
 800b768:	f002 f9a4 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b76c:	f04f 35ff 	mov.w	r5, #4294967295
 800b770:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800b772:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b776:	21ff      	movs	r1, #255	; 0xff
 800b778:	69e0      	ldr	r0, [r4, #28]
 800b77a:	f002 f99b 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800b77e:	6125      	str	r5, [r4, #16]
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b780:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b782:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b784:	2800      	cmp	r0, #0
 800b786:	d06a      	beq.n	800b85e <lfs_init+0x166>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b788:	f010 0f07 	tst.w	r0, #7
 800b78c:	d16e      	bne.n	800b86c <lfs_init+0x174>
 800b78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b790:	f013 0f07 	tst.w	r3, #7
 800b794:	d16a      	bne.n	800b86c <lfs_init+0x174>
    if (lfs->cfg->lookahead_buffer) {
 800b796:	2b00      	cmp	r3, #0
 800b798:	d06f      	beq.n	800b87a <lfs_init+0x182>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800b79a:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b79c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7a0:	2aff      	cmp	r2, #255	; 0xff
 800b7a2:	d870      	bhi.n	800b886 <lfs_init+0x18e>
    lfs->name_max = lfs->cfg->name_max;
 800b7a4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
 800b7a6:	b90a      	cbnz	r2, 800b7ac <lfs_init+0xb4>
        lfs->name_max = LFS_NAME_MAX;
 800b7a8:	22ff      	movs	r2, #255	; 0xff
 800b7aa:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b7ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7ae:	f1b2 6ff0 	cmp.w	r2, #125829120	; 0x7800000
 800b7b2:	d86f      	bhi.n	800b894 <lfs_init+0x19c>
    lfs->file_max = lfs->cfg->file_max;
 800b7b4:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
 800b7b6:	b912      	cbnz	r2, 800b7be <lfs_init+0xc6>
        lfs->file_max = LFS_FILE_MAX;
 800b7b8:	f04f 62f0 	mov.w	r2, #125829120	; 0x7800000
 800b7bc:	6722      	str	r2, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d86c      	bhi.n	800b8a2 <lfs_init+0x1aa>
    lfs->attr_max = lfs->cfg->attr_max;
 800b7c8:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
 800b7ca:	b913      	cbnz	r3, 800b7d2 <lfs_init+0xda>
        lfs->attr_max = LFS_ATTR_MAX;
 800b7cc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800b7d0:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = 0xffffffff;
 800b7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d6:	6223      	str	r3, [r4, #32]
    lfs->root[1] = 0xffffffff;
 800b7d8:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
 800b7da:	2000      	movs	r0, #0
 800b7dc:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
 800b7de:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 800b7e0:	6320      	str	r0, [r4, #48]	; 0x30
 800b7e2:	6360      	str	r0, [r4, #52]	; 0x34
 800b7e4:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gpending = (struct lfs_gstate){0};
 800b7e6:	63e0      	str	r0, [r4, #60]	; 0x3c
 800b7e8:	6420      	str	r0, [r4, #64]	; 0x40
 800b7ea:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gdelta = (struct lfs_gstate){0};
 800b7ec:	64a0      	str	r0, [r4, #72]	; 0x48
 800b7ee:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b7f0:	6520      	str	r0, [r4, #80]	; 0x50
}
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800b7f4:	4b2e      	ldr	r3, [pc, #184]	; (800b8b0 <lfs_init+0x1b8>)
 800b7f6:	4a2f      	ldr	r2, [pc, #188]	; (800b8b4 <lfs_init+0x1bc>)
 800b7f8:	f640 4171 	movw	r1, #3185	; 0xc71
 800b7fc:	482e      	ldr	r0, [pc, #184]	; (800b8b8 <lfs_init+0x1c0>)
 800b7fe:	f002 f8db 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800b802:	4b2e      	ldr	r3, [pc, #184]	; (800b8bc <lfs_init+0x1c4>)
 800b804:	4a2b      	ldr	r2, [pc, #172]	; (800b8b4 <lfs_init+0x1bc>)
 800b806:	f640 4172 	movw	r1, #3186	; 0xc72
 800b80a:	482b      	ldr	r0, [pc, #172]	; (800b8b8 <lfs_init+0x1c0>)
 800b80c:	f002 f8d4 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800b810:	4b2b      	ldr	r3, [pc, #172]	; (800b8c0 <lfs_init+0x1c8>)
 800b812:	4a28      	ldr	r2, [pc, #160]	; (800b8b4 <lfs_init+0x1bc>)
 800b814:	f640 4173 	movw	r1, #3187	; 0xc73
 800b818:	4827      	ldr	r0, [pc, #156]	; (800b8b8 <lfs_init+0x1c0>)
 800b81a:	f002 f8cd 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800b81e:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <lfs_init+0x1cc>)
 800b820:	4a24      	ldr	r2, [pc, #144]	; (800b8b4 <lfs_init+0x1bc>)
 800b822:	f640 4177 	movw	r1, #3191	; 0xc77
 800b826:	4824      	ldr	r0, [pc, #144]	; (800b8b8 <lfs_init+0x1c0>)
 800b828:	f002 f8c6 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles < 0xffffffff);
 800b82c:	4b26      	ldr	r3, [pc, #152]	; (800b8c8 <lfs_init+0x1d0>)
 800b82e:	4a21      	ldr	r2, [pc, #132]	; (800b8b4 <lfs_init+0x1bc>)
 800b830:	f640 417a 	movw	r1, #3194	; 0xc7a
 800b834:	4820      	ldr	r0, [pc, #128]	; (800b8b8 <lfs_init+0x1c0>)
 800b836:	f002 f8bf 	bl	800d9b8 <__assert_func>
    return malloc(size);
 800b83a:	f002 f911 	bl	800da60 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b83e:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 800b840:	2800      	cmp	r0, #0
 800b842:	d188      	bne.n	800b756 <lfs_init+0x5e>
    lfs_deinit(lfs);
 800b844:	4620      	mov	r0, r4
 800b846:	f7ff fed5 	bl	800b5f4 <lfs_deinit>
    return err;
 800b84a:	f06f 000b 	mvn.w	r0, #11
 800b84e:	e7d0      	b.n	800b7f2 <lfs_init+0xfa>
 800b850:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b852:	f002 f905 	bl	800da60 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800b856:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 800b858:	2800      	cmp	r0, #0
 800b85a:	d181      	bne.n	800b760 <lfs_init+0x68>
 800b85c:	e7f2      	b.n	800b844 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800b85e:	4b1b      	ldr	r3, [pc, #108]	; (800b8cc <lfs_init+0x1d4>)
 800b860:	4a14      	ldr	r2, [pc, #80]	; (800b8b4 <lfs_init+0x1bc>)
 800b862:	f640 4197 	movw	r1, #3223	; 0xc97
 800b866:	4814      	ldr	r0, [pc, #80]	; (800b8b8 <lfs_init+0x1c0>)
 800b868:	f002 f8a6 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 && (uintptr_t)lfs->cfg->lookahead_buffer % 8 == 0);
 800b86c:	4b18      	ldr	r3, [pc, #96]	; (800b8d0 <lfs_init+0x1d8>)
 800b86e:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <lfs_init+0x1bc>)
 800b870:	f640 4198 	movw	r1, #3224	; 0xc98
 800b874:	4810      	ldr	r0, [pc, #64]	; (800b8b8 <lfs_init+0x1c0>)
 800b876:	f002 f89f 	bl	800d9b8 <__assert_func>
 800b87a:	f002 f8f1 	bl	800da60 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800b87e:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 800b880:	2800      	cmp	r0, #0
 800b882:	d18b      	bne.n	800b79c <lfs_init+0xa4>
 800b884:	e7de      	b.n	800b844 <lfs_init+0x14c>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800b886:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <lfs_init+0x1dc>)
 800b888:	4a0a      	ldr	r2, [pc, #40]	; (800b8b4 <lfs_init+0x1bc>)
 800b88a:	f640 41a4 	movw	r1, #3236	; 0xca4
 800b88e:	480a      	ldr	r0, [pc, #40]	; (800b8b8 <lfs_init+0x1c0>)
 800b890:	f002 f892 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <lfs_init+0x1e0>)
 800b896:	4a07      	ldr	r2, [pc, #28]	; (800b8b4 <lfs_init+0x1bc>)
 800b898:	f640 41aa 	movw	r1, #3242	; 0xcaa
 800b89c:	4806      	ldr	r0, [pc, #24]	; (800b8b8 <lfs_init+0x1c0>)
 800b89e:	f002 f88b 	bl	800d9b8 <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <lfs_init+0x1e4>)
 800b8a4:	4a03      	ldr	r2, [pc, #12]	; (800b8b4 <lfs_init+0x1bc>)
 800b8a6:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 800b8aa:	4803      	ldr	r0, [pc, #12]	; (800b8b8 <lfs_init+0x1c0>)
 800b8ac:	f002 f884 	bl	800d9b8 <__assert_func>
 800b8b0:	0800f690 	.word	0x0800f690
 800b8b4:	0800f3a8 	.word	0x0800f3a8
 800b8b8:	0800f3e8 	.word	0x0800f3e8
 800b8bc:	0800f6c0 	.word	0x0800f6c0
 800b8c0:	0800f6f0 	.word	0x0800f6f0
 800b8c4:	0800f724 	.word	0x0800f724
 800b8c8:	0800f770 	.word	0x0800f770
 800b8cc:	0800f794 	.word	0x0800f794
 800b8d0:	0800f7b4 	.word	0x0800f7b4
 800b8d4:	0800f808 	.word	0x0800f808
 800b8d8:	0800f824 	.word	0x0800f824
 800b8dc:	0800f844 	.word	0x0800f844

0800b8e0 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800b8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	b089      	sub	sp, #36	; 0x24
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
 800b8ea:	b953      	cbnz	r3, 800b902 <lfs_ctz_find+0x22>
        *block = 0xffffffff;
 800b8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8f2:	6013      	str	r3, [r2, #0]
        *off = 0;
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8f8:	601a      	str	r2, [r3, #0]
}
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	b009      	add	sp, #36	; 0x24
 800b8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b902:	4691      	mov	r9, r2
 800b904:	4688      	mov	r8, r1
 800b906:	4606      	mov	r6, r0
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800b908:	3b01      	subs	r3, #1
 800b90a:	a908      	add	r1, sp, #32
 800b90c:	f841 3d04 	str.w	r3, [r1, #-4]!
 800b910:	f7ff fe89 	bl	800b626 <lfs_ctz_index>
 800b914:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800b916:	a911      	add	r1, sp, #68	; 0x44
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff fe84 	bl	800b626 <lfs_ctz_index>
 800b91e:	4607      	mov	r7, r0
    while (current > target) {
 800b920:	e003      	b.n	800b92a <lfs_ctz_find+0x4a>
        current -= 1 << skip;
 800b922:	2301      	movs	r3, #1
 800b924:	fa03 f404 	lsl.w	r4, r3, r4
 800b928:	1b2d      	subs	r5, r5, r4
    while (current > target) {
 800b92a:	42bd      	cmp	r5, r7
 800b92c:	d92a      	bls.n	800b984 <lfs_ctz_find+0xa4>
                lfs_npw2(current-target+1) - 1,
 800b92e:	1bec      	subs	r4, r5, r7
    return 32 - __builtin_clz(a-1);
 800b930:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 800b934:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 800b938:	fa95 f3a5 	rbit	r3, r5
 800b93c:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 800b940:	429c      	cmp	r4, r3
 800b942:	bf28      	it	cs
 800b944:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 800b946:	aa08      	add	r2, sp, #32
 800b948:	f852 1d0c 	ldr.w	r1, [r2, #-12]!
 800b94c:	00a0      	lsls	r0, r4, #2
 800b94e:	2304      	movs	r3, #4
 800b950:	9303      	str	r3, [sp, #12]
 800b952:	9202      	str	r2, [sp, #8]
 800b954:	9001      	str	r0, [sp, #4]
 800b956:	9100      	str	r1, [sp, #0]
 800b958:	464a      	mov	r2, r9
 800b95a:	4641      	mov	r1, r8
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7fe fcc7 	bl	800a2f0 <lfs_bd_read>
        head = lfs_fromle32(head);
 800b962:	9b05      	ldr	r3, [sp, #20]
        if (err) {
 800b964:	4602      	mov	r2, r0
 800b966:	2800      	cmp	r0, #0
 800b968:	d1c7      	bne.n	800b8fa <lfs_ctz_find+0x1a>
        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d903      	bls.n	800b976 <lfs_ctz_find+0x96>
 800b96e:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 800b970:	6a12      	ldr	r2, [r2, #32]
 800b972:	4293      	cmp	r3, r2
 800b974:	d9d5      	bls.n	800b922 <lfs_ctz_find+0x42>
 800b976:	4b07      	ldr	r3, [pc, #28]	; (800b994 <lfs_ctz_find+0xb4>)
 800b978:	4a07      	ldr	r2, [pc, #28]	; (800b998 <lfs_ctz_find+0xb8>)
 800b97a:	f640 012a 	movw	r1, #2090	; 0x82a
 800b97e:	4807      	ldr	r0, [pc, #28]	; (800b99c <lfs_ctz_find+0xbc>)
 800b980:	f002 f81a 	bl	800d9b8 <__assert_func>
    *block = head;
 800b984:	9b05      	ldr	r3, [sp, #20]
 800b986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b988:	6013      	str	r3, [r2, #0]
    *off = pos;
 800b98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b98c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b98e:	6013      	str	r3, [r2, #0]
    return 0;
 800b990:	2200      	movs	r2, #0
 800b992:	e7b2      	b.n	800b8fa <lfs_ctz_find+0x1a>
 800b994:	0800f4c4 	.word	0x0800f4c4
 800b998:	0800f388 	.word	0x0800f388
 800b99c:	0800f3e8 	.word	0x0800f3e8

0800b9a0 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
 800b9a0:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 800b9a2:	f7ff fe27 	bl	800b5f4 <lfs_deinit>
}
 800b9a6:	bd08      	pop	{r3, pc}

0800b9a8 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800b9a8:	b530      	push	{r4, r5, lr}
 800b9aa:	b097      	sub	sp, #92	; 0x5c
 800b9ac:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 800b9ae:	f7ff fea3 	bl	800b6f8 <lfs_init>
    if (err) {
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f040 80ca 	bne.w	800bb4e <lfs_mount+0x1a6>
    lfs_mdir_t dir = {.tail = {0, 1}};
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9be:	930c      	str	r3, [sp, #48]	; 0x30
 800b9c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b9c2:	930e      	str	r3, [sp, #56]	; 0x38
 800b9c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9c6:	9310      	str	r3, [sp, #64]	; 0x40
 800b9c8:	9311      	str	r3, [sp, #68]	; 0x44
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	9312      	str	r3, [sp, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 800b9ce:	e02b      	b.n	800ba28 <lfs_mount+0x80>
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f640 513d 	movw	r1, #3389	; 0xd3d
 800b9d6:	4862      	ldr	r0, [pc, #392]	; (800bb60 <lfs_mount+0x1b8>)
 800b9d8:	f002 fbe0 	bl	800e19c <iprintf>
                err = LFS_ERR_INVAL;
 800b9dc:	f06f 0515 	mvn.w	r5, #21
                goto cleanup;
 800b9e0:	e0b2      	b.n	800bb48 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800b9e2:	f640 5146 	movw	r1, #3398	; 0xd46
 800b9e6:	485f      	ldr	r0, [pc, #380]	; (800bb64 <lfs_mount+0x1bc>)
 800b9e8:	f002 fbd8 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800b9ec:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800b9f0:	e0aa      	b.n	800bb48 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800b9f2:	f640 5151 	movw	r1, #3409	; 0xd51
 800b9f6:	485c      	ldr	r0, [pc, #368]	; (800bb68 <lfs_mount+0x1c0>)
 800b9f8:	f002 fbd0 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800b9fc:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800ba00:	e0a2      	b.n	800bb48 <lfs_mount+0x1a0>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800ba02:	f640 515c 	movw	r1, #3420	; 0xd5c
 800ba06:	4859      	ldr	r0, [pc, #356]	; (800bb6c <lfs_mount+0x1c4>)
 800ba08:	f002 fbc8 	bl	800e19c <iprintf>
                    err = LFS_ERR_INVAL;
 800ba0c:	f06f 0515 	mvn.w	r5, #21
                    goto cleanup;
 800ba10:	e09a      	b.n	800bb48 <lfs_mount+0x1a0>
                err = tag;
 800ba12:	4605      	mov	r5, r0
 800ba14:	e098      	b.n	800bb48 <lfs_mount+0x1a0>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 800ba16:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800ba1a:	a90b      	add	r1, sp, #44	; 0x2c
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7ff fa6f 	bl	800af00 <lfs_dir_getgstate>
        if (err) {
 800ba22:	2800      	cmp	r0, #0
 800ba24:	f040 8099 	bne.w	800bb5a <lfs_mount+0x1b2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800ba28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d04f      	beq.n	800bad0 <lfs_mount+0x128>
 800ba30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba36:	d049      	beq.n	800bacc <lfs_mount+0x124>
 800ba38:	462b      	mov	r3, r5
    while (!lfs_pair_isnull(dir.tail)) {
 800ba3a:	f013 0f01 	tst.w	r3, #1
 800ba3e:	d149      	bne.n	800bad4 <lfs_mount+0x12c>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800ba40:	9413      	str	r4, [sp, #76]	; 0x4c
 800ba42:	4b4b      	ldr	r3, [pc, #300]	; (800bb70 <lfs_mount+0x1c8>)
 800ba44:	9314      	str	r3, [sp, #80]	; 0x50
 800ba46:	2308      	movs	r3, #8
 800ba48:	9315      	str	r3, [sp, #84]	; 0x54
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800ba4a:	ab13      	add	r3, sp, #76	; 0x4c
 800ba4c:	9303      	str	r3, [sp, #12]
 800ba4e:	4b49      	ldr	r3, [pc, #292]	; (800bb74 <lfs_mount+0x1cc>)
 800ba50:	9302      	str	r3, [sp, #8]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	4b48      	ldr	r3, [pc, #288]	; (800bb78 <lfs_mount+0x1d0>)
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	4b48      	ldr	r3, [pc, #288]	; (800bb7c <lfs_mount+0x1d4>)
 800ba5c:	aa11      	add	r2, sp, #68	; 0x44
 800ba5e:	a90b      	add	r1, sp, #44	; 0x2c
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7fe fd6d 	bl	800a540 <lfs_dir_fetchmatch>
        if (tag < 0) {
 800ba66:	2800      	cmp	r0, #0
 800ba68:	db6d      	blt.n	800bb46 <lfs_mount+0x19e>
        if (tag && !lfs_tag_isdelete(tag)) {
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d0d3      	beq.n	800ba16 <lfs_mount+0x6e>
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ba6e:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 800ba72:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba76:	d0ce      	beq.n	800ba16 <lfs_mount+0x6e>
            lfs->root[0] = dir.pair[0];
 800ba78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7a:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 800ba7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba7e:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800ba80:	ab05      	add	r3, sp, #20
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	4b3e      	ldr	r3, [pc, #248]	; (800bb80 <lfs_mount+0x1d8>)
 800ba86:	4a3d      	ldr	r2, [pc, #244]	; (800bb7c <lfs_mount+0x1d4>)
 800ba88:	a90b      	add	r1, sp, #44	; 0x2c
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f7ff fa2a 	bl	800aee4 <lfs_dir_get>
            if (tag < 0) {
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dbbe      	blt.n	800ba12 <lfs_mount+0x6a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800ba94:	9b05      	ldr	r3, [sp, #20]
 800ba96:	0c1a      	lsrs	r2, r3, #16
 800ba98:	b291      	uxth	r1, r2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800ba9a:	b298      	uxth	r0, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800ba9c:	2902      	cmp	r1, #2
 800ba9e:	d197      	bne.n	800b9d0 <lfs_mount+0x28>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d195      	bne.n	800b9d0 <lfs_mount+0x28>
            if (superblock.name_max) {
 800baa4:	9a08      	ldr	r2, [sp, #32]
 800baa6:	b11a      	cbz	r2, 800bab0 <lfs_mount+0x108>
                if (superblock.name_max > lfs->name_max) {
 800baa8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d899      	bhi.n	800b9e2 <lfs_mount+0x3a>
                lfs->name_max = superblock.name_max;
 800baae:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 800bab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab2:	b11a      	cbz	r2, 800babc <lfs_mount+0x114>
                if (superblock.file_max > lfs->file_max) {
 800bab4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d89b      	bhi.n	800b9f2 <lfs_mount+0x4a>
                lfs->file_max = superblock.file_max;
 800baba:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 800babc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800babe:	2a00      	cmp	r2, #0
 800bac0:	d0a9      	beq.n	800ba16 <lfs_mount+0x6e>
                if (superblock.attr_max > lfs->attr_max) {
 800bac2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d89c      	bhi.n	800ba02 <lfs_mount+0x5a>
                lfs->attr_max = superblock.attr_max;
 800bac8:	6762      	str	r2, [r4, #116]	; 0x74
 800baca:	e7a4      	b.n	800ba16 <lfs_mount+0x6e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bacc:	2301      	movs	r3, #1
 800bace:	e7b4      	b.n	800ba3a <lfs_mount+0x92>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e7b2      	b.n	800ba3a <lfs_mount+0x92>
 800bad4:	6a23      	ldr	r3, [r4, #32]
 800bad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bada:	d027      	beq.n	800bb2c <lfs_mount+0x184>
 800badc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d021      	beq.n	800bb28 <lfs_mount+0x180>
 800bae4:	462b      	mov	r3, r5
    if (lfs_pair_isnull(lfs->root)) {
 800bae6:	f013 0f01 	tst.w	r3, #1
 800baea:	d133      	bne.n	800bb54 <lfs_mount+0x1ac>
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 800baec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800baee:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800baf2:	63e3      	str	r3, [r4, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 800baf4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800baf8:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800bafc:	ca07      	ldmia	r2, {r0, r1, r2}
 800bafe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return (tag & 0x70000000) >> 20;
 800bb02:	0d02      	lsrs	r2, r0, #20
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 800bb04:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800bb08:	d112      	bne.n	800bb30 <lfs_mount+0x188>
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 800bb0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bb0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bb0e:	69da      	ldr	r2, [r3, #28]
 800bb10:	fbb1 f3f2 	udiv	r3, r1, r2
 800bb14:	fb02 1313 	mls	r3, r2, r3, r1
 800bb18:	6563      	str	r3, [r4, #84]	; 0x54
    lfs->free.size = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	65a3      	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
 800bb1e:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7fe fb79 	bl	800a218 <lfs_alloc_ack>
    return 0;
 800bb26:	e012      	b.n	800bb4e <lfs_mount+0x1a6>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e7dc      	b.n	800bae6 <lfs_mount+0x13e>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e7da      	b.n	800bae6 <lfs_mount+0x13e>
    return (tag & 0x000ffc00) >> 10;
 800bb30:	f3c0 2389 	ubfx	r3, r0, #10, #10
        LFS_DEBUG("Found move %"PRIu32" %"PRIu32" %"PRIu16,
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb38:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bb3a:	f640 5179 	movw	r1, #3449	; 0xd79
 800bb3e:	4811      	ldr	r0, [pc, #68]	; (800bb84 <lfs_mount+0x1dc>)
 800bb40:	f002 fb2c 	bl	800e19c <iprintf>
 800bb44:	e7e1      	b.n	800bb0a <lfs_mount+0x162>
            err = tag;
 800bb46:	4605      	mov	r5, r0
    lfs_unmount(lfs);
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f7ff ff29 	bl	800b9a0 <lfs_unmount>
}
 800bb4e:	4628      	mov	r0, r5
 800bb50:	b017      	add	sp, #92	; 0x5c
 800bb52:	bd30      	pop	{r4, r5, pc}
        err = LFS_ERR_INVAL;
 800bb54:	f06f 0515 	mvn.w	r5, #21
 800bb58:	e7f6      	b.n	800bb48 <lfs_mount+0x1a0>
            return err;
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	e7f7      	b.n	800bb4e <lfs_mount+0x1a6>
 800bb5e:	bf00      	nop
 800bb60:	0800f86c 	.word	0x0800f86c
 800bb64:	0800f894 	.word	0x0800f894
 800bb68:	0800f8c4 	.word	0x0800f8c4
 800bb6c:	0800f8f4 	.word	0x0800f8f4
 800bb70:	0800f860 	.word	0x0800f860
 800bb74:	0800a4fd 	.word	0x0800a4fd
 800bb78:	0ff00008 	.word	0x0ff00008
 800bb7c:	7ffffc00 	.word	0x7ffffc00
 800bb80:	20100018 	.word	0x20100018
 800bb84:	0800f924 	.word	0x0800f924

0800bb88 <lfs_fs_traverse>:
        int (*cb)(void *data, lfs_block_t block), void *data) {
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b08f      	sub	sp, #60	; 0x3c
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	460e      	mov	r6, r1
 800bb90:	4617      	mov	r7, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 800bb92:	2300      	movs	r3, #0
 800bb94:	9306      	str	r3, [sp, #24]
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	9308      	str	r3, [sp, #32]
 800bb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9c:	930a      	str	r3, [sp, #40]	; 0x28
 800bb9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bba0:	930c      	str	r3, [sp, #48]	; 0x30
 800bba2:	2301      	movs	r3, #1
 800bba4:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbac:	d04e      	beq.n	800bc4c <lfs_fs_traverse+0xc4>
 800bbae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb4:	d048      	beq.n	800bc48 <lfs_fs_traverse+0xc0>
 800bbb6:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d149      	bne.n	800bc50 <lfs_fs_traverse+0xc8>
        for (int i = 0; i < 2; i++) {
 800bbbc:	2400      	movs	r4, #0
 800bbbe:	2c01      	cmp	r4, #1
 800bbc0:	dc0b      	bgt.n	800bbda <lfs_fs_traverse+0x52>
            int err = cb(data, dir.tail[i]);
 800bbc2:	1da3      	adds	r3, r4, #6
 800bbc4:	aa0e      	add	r2, sp, #56	; 0x38
 800bbc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbca:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800bbce:	4638      	mov	r0, r7
 800bbd0:	47b0      	blx	r6
            if (err) {
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	b968      	cbnz	r0, 800bbf2 <lfs_fs_traverse+0x6a>
        for (int i = 0; i < 2; i++) {
 800bbd6:	3401      	adds	r4, #1
 800bbd8:	e7f1      	b.n	800bbbe <lfs_fs_traverse+0x36>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800bbda:	aa0c      	add	r2, sp, #48	; 0x30
 800bbdc:	a906      	add	r1, sp, #24
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f7fe ff56 	bl	800aa90 <lfs_dir_fetch>
        if (err) {
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	b920      	cbnz	r0, 800bbf2 <lfs_fs_traverse+0x6a>
        for (uint16_t id = 0; id < dir.count; id++) {
 800bbe8:	2400      	movs	r4, #0
 800bbea:	e007      	b.n	800bbfc <lfs_fs_traverse+0x74>
                if (tag == LFS_ERR_NOENT) {
 800bbec:	f113 0f02 	cmn.w	r3, #2
 800bbf0:	d002      	beq.n	800bbf8 <lfs_fs_traverse+0x70>
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	b00f      	add	sp, #60	; 0x3c
 800bbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (uint16_t id = 0; id < dir.count; id++) {
 800bbf8:	3401      	adds	r4, #1
 800bbfa:	b2a4      	uxth	r4, r4
 800bbfc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d9d0      	bls.n	800bba6 <lfs_fs_traverse+0x1e>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800bc04:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800bc06:	aa04      	add	r2, sp, #16
 800bc08:	9200      	str	r2, [sp, #0]
 800bc0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc0e:	f043 0308 	orr.w	r3, r3, #8
 800bc12:	4a28      	ldr	r2, [pc, #160]	; (800bcb4 <lfs_fs_traverse+0x12c>)
 800bc14:	a906      	add	r1, sp, #24
 800bc16:	4628      	mov	r0, r5
 800bc18:	f7ff f964 	bl	800aee4 <lfs_dir_get>
            if (tag < 0) {
 800bc1c:	1e03      	subs	r3, r0, #0
 800bc1e:	dbe5      	blt.n	800bbec <lfs_fs_traverse+0x64>
    return (tag & 0x7ff00000) >> 20;
 800bc20:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800bc24:	f240 2202 	movw	r2, #514	; 0x202
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d1e5      	bne.n	800bbf8 <lfs_fs_traverse+0x70>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800bc2c:	9702      	str	r7, [sp, #8]
 800bc2e:	9601      	str	r6, [sp, #4]
 800bc30:	9b05      	ldr	r3, [sp, #20]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	9b04      	ldr	r3, [sp, #16]
 800bc36:	462a      	mov	r2, r5
 800bc38:	2100      	movs	r1, #0
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f7ff fd10 	bl	800b660 <lfs_ctz_traverse>
                if (err) {
 800bc40:	4603      	mov	r3, r0
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d0d8      	beq.n	800bbf8 <lfs_fs_traverse+0x70>
 800bc46:	e7d4      	b.n	800bbf2 <lfs_fs_traverse+0x6a>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e7b5      	b.n	800bbb8 <lfs_fs_traverse+0x30>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7b3      	b.n	800bbb8 <lfs_fs_traverse+0x30>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bc50:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800bc52:	e00e      	b.n	800bc72 <lfs_fs_traverse+0xea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bc54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc58:	9702      	str	r7, [sp, #8]
 800bc5a:	9601      	str	r6, [sp, #4]
 800bc5c:	9200      	str	r2, [sp, #0]
 800bc5e:	462a      	mov	r2, r5
 800bc60:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bc64:	4628      	mov	r0, r5
 800bc66:	f7ff fcfb 	bl	800b660 <lfs_ctz_traverse>
            if (err) {
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	b158      	cbz	r0, 800bc86 <lfs_fs_traverse+0xfe>
 800bc6e:	e7c0      	b.n	800bbf2 <lfs_fs_traverse+0x6a>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bc70:	6824      	ldr	r4, [r4, #0]
 800bc72:	b1ec      	cbz	r4, 800bcb0 <lfs_fs_traverse+0x128>
        if (f->type != LFS_TYPE_REG) {
 800bc74:	79a3      	ldrb	r3, [r4, #6]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d1fa      	bne.n	800bc70 <lfs_fs_traverse+0xe8>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800bc7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc7c:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 800bc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc84:	d0e6      	beq.n	800bc54 <lfs_fs_traverse+0xcc>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800bc86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc88:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 800bc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc90:	d1ee      	bne.n	800bc70 <lfs_fs_traverse+0xe8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800bc92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc94:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bc96:	9702      	str	r7, [sp, #8]
 800bc98:	9601      	str	r6, [sp, #4]
 800bc9a:	9200      	str	r2, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7ff fcdc 	bl	800b660 <lfs_ctz_traverse>
            if (err) {
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0e0      	beq.n	800bc70 <lfs_fs_traverse+0xe8>
 800bcae:	e7a0      	b.n	800bbf2 <lfs_fs_traverse+0x6a>
    return 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e79e      	b.n	800bbf2 <lfs_fs_traverse+0x6a>
 800bcb4:	700ffc00 	.word	0x700ffc00

0800bcb8 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
 800bcbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bcc0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d02d      	beq.n	800bd22 <lfs_alloc+0x6a>
            lfs->free.i += 1;
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
 800bcca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bccc:	3a01      	subs	r2, #1
 800bcce:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800bcd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd2:	0959      	lsrs	r1, r3, #5
 800bcd4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800bcd8:	f003 001f 	and.w	r0, r3, #31
 800bcdc:	2201      	movs	r2, #1
 800bcde:	4082      	lsls	r2, r0
 800bce0:	4211      	tst	r1, r2
 800bce2:	d1ec      	bne.n	800bcbe <lfs_alloc+0x6>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800bce4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bce6:	4413      	add	r3, r2
 800bce8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bcea:	6a11      	ldr	r1, [r2, #32]
 800bcec:	fbb3 f2f1 	udiv	r2, r3, r1
 800bcf0:	fb01 3312 	mls	r3, r1, r2, r3
 800bcf4:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
 800bcf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bcf8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d03b      	beq.n	800bd76 <lfs_alloc+0xbe>
                        (lfs->free.buffer[lfs->free.i / 32]
 800bcfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd00:	0959      	lsrs	r1, r3, #5
 800bd02:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
 800bd06:	f003 001f 	and.w	r0, r3, #31
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
 800bd0e:	4211      	tst	r1, r2
 800bd10:	d005      	beq.n	800bd1e <lfs_alloc+0x66>
                    lfs->free.i += 1;
 800bd12:	3301      	adds	r3, #1
 800bd14:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800bd16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	6623      	str	r3, [r4, #96]	; 0x60
 800bd1c:	e7eb      	b.n	800bcf6 <lfs_alloc+0x3e>
                return 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e02a      	b.n	800bd78 <lfs_alloc+0xc0>
        if (lfs->free.ack == 0) {
 800bd22:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bd24:	b1e9      	cbz	r1, 800bd62 <lfs_alloc+0xaa>
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800bd26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bd28:	441a      	add	r2, r3
                % lfs->cfg->block_count;
 800bd2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bd2c:	6a1e      	ldr	r6, [r3, #32]
 800bd2e:	fbb2 f0f6 	udiv	r0, r2, r6
 800bd32:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800bd36:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3a:	00d2      	lsls	r2, r2, #3
 800bd3c:	4291      	cmp	r1, r2
 800bd3e:	bf28      	it	cs
 800bd40:	4611      	movcs	r1, r2
 800bd42:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800bd44:	2100      	movs	r1, #0
 800bd46:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800bd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bd4c:	f001 feb2 	bl	800dab4 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 800bd50:	4622      	mov	r2, r4
 800bd52:	490a      	ldr	r1, [pc, #40]	; (800bd7c <lfs_alloc+0xc4>)
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7ff ff17 	bl	800bb88 <lfs_fs_traverse>
        if (err) {
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d0ae      	beq.n	800bcbe <lfs_alloc+0x6>
 800bd60:	e00a      	b.n	800bd78 <lfs_alloc+0xc0>
            LFS_WARN("No more free space %"PRIu32,
 800bd62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bd64:	441a      	add	r2, r3
 800bd66:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800bd6a:	4805      	ldr	r0, [pc, #20]	; (800bd80 <lfs_alloc+0xc8>)
 800bd6c:	f002 fa16 	bl	800e19c <iprintf>
            return LFS_ERR_NOSPC;
 800bd70:	f06f 031b 	mvn.w	r3, #27
 800bd74:	e000      	b.n	800bd78 <lfs_alloc+0xc0>
                return 0;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	0800a1e5 	.word	0x0800a1e5
 800bd80:	0800f3c0 	.word	0x0800f3c0

0800bd84 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	4606      	mov	r6, r0
 800bd8a:	460d      	mov	r5, r1
    for (int i = 0; i < 2; i++) {
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	2c01      	cmp	r4, #1
 800bd90:	dc0d      	bgt.n	800bdae <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800bd92:	3401      	adds	r4, #1
 800bd94:	f004 0101 	and.w	r1, r4, #1
 800bd98:	bf48      	it	mi
 800bd9a:	4249      	negmi	r1, r1
 800bd9c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7ff ff89 	bl	800bcb8 <lfs_alloc>
        if (err) {
 800bda6:	4603      	mov	r3, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d0f0      	beq.n	800bd8e <lfs_dir_alloc+0xa>
 800bdac:	e021      	b.n	800bdf2 <lfs_dir_alloc+0x6e>
    int err = lfs_bd_read(lfs,
 800bdae:	462a      	mov	r2, r5
 800bdb0:	f852 0b08 	ldr.w	r0, [r2], #8
 800bdb4:	2304      	movs	r3, #4
 800bdb6:	9303      	str	r3, [sp, #12]
 800bdb8:	9202      	str	r2, [sp, #8]
 800bdba:	2100      	movs	r1, #0
 800bdbc:	9101      	str	r1, [sp, #4]
 800bdbe:	9000      	str	r0, [sp, #0]
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fe fa94 	bl	800a2f0 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 800bdc8:	68aa      	ldr	r2, [r5, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800bdca:	4603      	mov	r3, r0
 800bdcc:	b110      	cbz	r0, 800bdd4 <lfs_dir_alloc+0x50>
 800bdce:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bdd2:	d10e      	bne.n	800bdf2 <lfs_dir_alloc+0x6e>
    dir->rev += dir->rev & 1;
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	f022 0201 	bic.w	r2, r2, #1
 800bdda:	60aa      	str	r2, [r5, #8]
    dir->off = sizeof(dir->rev);
 800bddc:	2304      	movs	r3, #4
 800bdde:	60eb      	str	r3, [r5, #12]
    dir->etag = 0xffffffff;
 800bde0:	f04f 32ff 	mov.w	r2, #4294967295
 800bde4:	612a      	str	r2, [r5, #16]
    dir->count = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	82ab      	strh	r3, [r5, #20]
    dir->tail[0] = 0xffffffff;
 800bdea:	61aa      	str	r2, [r5, #24]
    dir->tail[1] = 0xffffffff;
 800bdec:	61ea      	str	r2, [r5, #28]
    dir->erased = false;
 800bdee:	75ab      	strb	r3, [r5, #22]
    dir->split = false;
 800bdf0:	75eb      	strb	r3, [r5, #23]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	b004      	add	sp, #16
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}

0800bdf8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800bdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdfa:	b089      	sub	sp, #36	; 0x24
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460e      	mov	r6, r1
 800be00:	e050      	b.n	800bea4 <lfs_file_relocate+0xac>
                err = lfs_bd_read(lfs,
 800be02:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800be04:	2101      	movs	r1, #1
 800be06:	9103      	str	r1, [sp, #12]
 800be08:	f10d 011b 	add.w	r1, sp, #27
 800be0c:	9102      	str	r1, [sp, #8]
 800be0e:	9401      	str	r4, [sp, #4]
 800be10:	9200      	str	r2, [sp, #0]
 800be12:	1b1b      	subs	r3, r3, r4
 800be14:	462a      	mov	r2, r5
 800be16:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800be1a:	4628      	mov	r0, r5
 800be1c:	f7fe fa68 	bl	800a2f0 <lfs_bd_read>
                if (err) {
 800be20:	2800      	cmp	r0, #0
 800be22:	d151      	bne.n	800bec8 <lfs_file_relocate+0xd0>
            err = lfs_bd_prog(lfs,
 800be24:	2301      	movs	r3, #1
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	f10d 021b 	add.w	r2, sp, #27
 800be2c:	9202      	str	r2, [sp, #8]
 800be2e:	9401      	str	r4, [sp, #4]
 800be30:	9a07      	ldr	r2, [sp, #28]
 800be32:	9200      	str	r2, [sp, #0]
 800be34:	462a      	mov	r2, r5
 800be36:	f105 0110 	add.w	r1, r5, #16
 800be3a:	4628      	mov	r0, r5
 800be3c:	f7ff f972 	bl	800b124 <lfs_bd_prog>
            if (err) {
 800be40:	bb20      	cbnz	r0, 800be8c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800be42:	3401      	adds	r4, #1
 800be44:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800be46:	42a3      	cmp	r3, r4
 800be48:	d942      	bls.n	800bed0 <lfs_file_relocate+0xd8>
            if (file->flags & LFS_F_INLINE) {
 800be4a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800be4c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800be50:	d0d7      	beq.n	800be02 <lfs_file_relocate+0xa>
                err = lfs_dir_getread(lfs, &file->m,
 800be52:	1b1b      	subs	r3, r3, r4
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800be54:	88b2      	ldrh	r2, [r6, #4]
 800be56:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 800be58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800be5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800be60:	2101      	movs	r1, #1
 800be62:	9105      	str	r1, [sp, #20]
 800be64:	f10d 011b 	add.w	r1, sp, #27
 800be68:	9104      	str	r1, [sp, #16]
 800be6a:	9403      	str	r4, [sp, #12]
 800be6c:	9202      	str	r2, [sp, #8]
 800be6e:	4a28      	ldr	r2, [pc, #160]	; (800bf10 <lfs_file_relocate+0x118>)
 800be70:	9201      	str	r2, [sp, #4]
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	f106 0340 	add.w	r3, r6, #64	; 0x40
 800be78:	2200      	movs	r2, #0
 800be7a:	f106 0108 	add.w	r1, r6, #8
 800be7e:	4628      	mov	r0, r5
 800be80:	f7ff f868 	bl	800af54 <lfs_dir_getread>
                if (err) {
 800be84:	2800      	cmp	r0, #0
 800be86:	d0cd      	beq.n	800be24 <lfs_file_relocate+0x2c>
                    return err;
 800be88:	4607      	mov	r7, r0
 800be8a:	e03e      	b.n	800bf0a <lfs_file_relocate+0x112>
                if (err == LFS_ERR_CORRUPT) {
 800be8c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800be90:	d118      	bne.n	800bec4 <lfs_file_relocate+0xcc>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800be92:	9a07      	ldr	r2, [sp, #28]
 800be94:	f44f 611b 	mov.w	r1, #2480	; 0x9b0
 800be98:	481e      	ldr	r0, [pc, #120]	; (800bf14 <lfs_file_relocate+0x11c>)
 800be9a:	f002 f97f 	bl	800e19c <iprintf>
    rcache->block = 0xffffffff;
 800be9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bea2:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 800bea4:	a907      	add	r1, sp, #28
 800bea6:	4628      	mov	r0, r5
 800bea8:	f7ff ff06 	bl	800bcb8 <lfs_alloc>
        if (err) {
 800beac:	4607      	mov	r7, r0
 800beae:	bb60      	cbnz	r0, 800bf0a <lfs_file_relocate+0x112>
        err = lfs_bd_erase(lfs, nblock);
 800beb0:	9907      	ldr	r1, [sp, #28]
 800beb2:	4628      	mov	r0, r5
 800beb4:	f7fe fa08 	bl	800a2c8 <lfs_bd_erase>
        if (err) {
 800beb8:	4607      	mov	r7, r0
 800beba:	b138      	cbz	r0, 800becc <lfs_file_relocate+0xd4>
            if (err == LFS_ERR_CORRUPT) {
 800bebc:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bec0:	d0e7      	beq.n	800be92 <lfs_file_relocate+0x9a>
 800bec2:	e022      	b.n	800bf0a <lfs_file_relocate+0x112>
                return err;
 800bec4:	4607      	mov	r7, r0
 800bec6:	e020      	b.n	800bf0a <lfs_file_relocate+0x112>
                    return err;
 800bec8:	4607      	mov	r7, r0
 800beca:	e01e      	b.n	800bf0a <lfs_file_relocate+0x112>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800becc:	2400      	movs	r4, #0
 800bece:	e7b9      	b.n	800be44 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800bed0:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800bed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bed4:	69e9      	ldr	r1, [r5, #28]
 800bed6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800bed8:	f001 fde1 	bl	800da9e <memcpy>
        file->cache.block = lfs->pcache.block;
 800bedc:	692b      	ldr	r3, [r5, #16]
 800bede:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800bee0:	696b      	ldr	r3, [r5, #20]
 800bee2:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800bee4:	69ab      	ldr	r3, [r5, #24]
 800bee6:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800bee8:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800beea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beec:	21ff      	movs	r1, #255	; 0xff
 800beee:	69e8      	ldr	r0, [r5, #28]
 800bef0:	f001 fde0 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800bef4:	f04f 33ff 	mov.w	r3, #4294967295
 800bef8:	612b      	str	r3, [r5, #16]
        file->block = nblock;
 800befa:	9b07      	ldr	r3, [sp, #28]
 800befc:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags &= ~LFS_F_INLINE;
 800befe:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800bf00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
        file->flags |= LFS_F_WRITING;
 800bf04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf08:	6333      	str	r3, [r6, #48]	; 0x30
}
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	b009      	add	sp, #36	; 0x24
 800bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf10:	fff7fc00 	.word	0xfff7fc00
 800bf14:	0800f5cc 	.word	0x0800f5cc

0800bf18 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	b089      	sub	sp, #36	; 0x24
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460f      	mov	r7, r1
 800bf22:	4616      	mov	r6, r2
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	e04f      	b.n	800bfc8 <lfs_ctz_extend+0xb0>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800bf28:	4b5f      	ldr	r3, [pc, #380]	; (800c0a8 <lfs_ctz_extend+0x190>)
 800bf2a:	4a60      	ldr	r2, [pc, #384]	; (800c0ac <lfs_ctz_extend+0x194>)
 800bf2c:	f640 013e 	movw	r1, #2110	; 0x83e
 800bf30:	485f      	ldr	r0, [pc, #380]	; (800c0b0 <lfs_ctz_extend+0x198>)
 800bf32:	f001 fd41 	bl	800d9b8 <__assert_func>
            if (size == 0) {
 800bf36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d032      	beq.n	800bfa2 <lfs_ctz_extend+0x8a>
            size -= 1;
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	9312      	str	r3, [sp, #72]	; 0x48
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 800bf40:	a912      	add	r1, sp, #72	; 0x48
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff fb6f 	bl	800b626 <lfs_ctz_index>
            size += 1;
 800bf48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	9312      	str	r3, [sp, #72]	; 0x48
            if (size != lfs->cfg->block_size) {
 800bf4e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bf50:	69d2      	ldr	r2, [r2, #28]
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d05b      	beq.n	800c00e <lfs_ctz_extend+0xf6>
                for (lfs_off_t i = 0; i < size; i++) {
 800bf56:	2500      	movs	r5, #0
 800bf58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf5a:	42ab      	cmp	r3, r5
 800bf5c:	d94d      	bls.n	800bffa <lfs_ctz_extend+0xe2>
                    err = lfs_bd_read(lfs,
 800bf5e:	2201      	movs	r2, #1
 800bf60:	9203      	str	r2, [sp, #12]
 800bf62:	f10d 021b 	add.w	r2, sp, #27
 800bf66:	9202      	str	r2, [sp, #8]
 800bf68:	9501      	str	r5, [sp, #4]
 800bf6a:	9a05      	ldr	r2, [sp, #20]
 800bf6c:	9200      	str	r2, [sp, #0]
 800bf6e:	1b5b      	subs	r3, r3, r5
 800bf70:	4632      	mov	r2, r6
 800bf72:	2100      	movs	r1, #0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7fe f9bb 	bl	800a2f0 <lfs_bd_read>
                    if (err) {
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d13a      	bne.n	800bff6 <lfs_ctz_extend+0xde>
                    err = lfs_bd_prog(lfs,
 800bf80:	2301      	movs	r3, #1
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	f10d 021b 	add.w	r2, sp, #27
 800bf88:	9202      	str	r2, [sp, #8]
 800bf8a:	9501      	str	r5, [sp, #4]
 800bf8c:	9a07      	ldr	r2, [sp, #28]
 800bf8e:	9200      	str	r2, [sp, #0]
 800bf90:	4632      	mov	r2, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	4620      	mov	r0, r4
 800bf96:	f7ff f8c5 	bl	800b124 <lfs_bd_prog>
                    if (err) {
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	b940      	cbnz	r0, 800bfb0 <lfs_ctz_extend+0x98>
                for (lfs_off_t i = 0; i < size; i++) {
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	e7da      	b.n	800bf58 <lfs_ctz_extend+0x40>
                *block = nblock;
 800bfa2:	9b07      	ldr	r3, [sp, #28]
 800bfa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfa6:	6013      	str	r3, [r2, #0]
                *off = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfac:	6013      	str	r3, [r2, #0]
                return 0;
 800bfae:	e02a      	b.n	800c006 <lfs_ctz_extend+0xee>
                        if (err == LFS_ERR_CORRUPT) {
 800bfb0:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bfb4:	d11f      	bne.n	800bff6 <lfs_ctz_extend+0xde>
        LFS_DEBUG("Bad block at %"PRIu32, nblock);
 800bfb6:	9a07      	ldr	r2, [sp, #28]
 800bfb8:	f640 0191 	movw	r1, #2193	; 0x891
 800bfbc:	483d      	ldr	r0, [pc, #244]	; (800c0b4 <lfs_ctz_extend+0x19c>)
 800bfbe:	f002 f8ed 	bl	800e19c <iprintf>
    rcache->block = 0xffffffff;
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc6:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 800bfc8:	a907      	add	r1, sp, #28
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7ff fe74 	bl	800bcb8 <lfs_alloc>
        if (err) {
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	b9c0      	cbnz	r0, 800c006 <lfs_ctz_extend+0xee>
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 800bfd4:	9907      	ldr	r1, [sp, #28]
 800bfd6:	2901      	cmp	r1, #1
 800bfd8:	d9a6      	bls.n	800bf28 <lfs_ctz_extend+0x10>
 800bfda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	d8a2      	bhi.n	800bf28 <lfs_ctz_extend+0x10>
            err = lfs_bd_erase(lfs, nblock);
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7fe f970 	bl	800a2c8 <lfs_bd_erase>
            if (err) {
 800bfe8:	4680      	mov	r8, r0
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0a3      	beq.n	800bf36 <lfs_ctz_extend+0x1e>
                if (err == LFS_ERR_CORRUPT) {
 800bfee:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800bff2:	d0e0      	beq.n	800bfb6 <lfs_ctz_extend+0x9e>
 800bff4:	e007      	b.n	800c006 <lfs_ctz_extend+0xee>
                        return err;
 800bff6:	4698      	mov	r8, r3
 800bff8:	e005      	b.n	800c006 <lfs_ctz_extend+0xee>
                *block = nblock;
 800bffa:	9b07      	ldr	r3, [sp, #28]
 800bffc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bffe:	6013      	str	r3, [r2, #0]
                *off = size;
 800c000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c004:	6013      	str	r3, [r2, #0]
}
 800c006:	4640      	mov	r0, r8
 800c008:	b009      	add	sp, #36	; 0x24
 800c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 800c00e:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 800c010:	fa90 faa0 	rbit	sl, r0
 800c014:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
 800c018:	f10a 0b01 	add.w	fp, sl, #1
            for (lfs_off_t i = 0; i < skips; i++) {
 800c01c:	2500      	movs	r5, #0
 800c01e:	e00c      	b.n	800c03a <lfs_ctz_extend+0x122>
                    if (err == LFS_ERR_CORRUPT) {
 800c020:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c024:	d0c7      	beq.n	800bfb6 <lfs_ctz_extend+0x9e>
                    return err;
 800c026:	4680      	mov	r8, r0
 800c028:	e7ed      	b.n	800c006 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800c02a:	9b05      	ldr	r3, [sp, #20]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d92b      	bls.n	800c088 <lfs_ctz_extend+0x170>
 800c030:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800c032:	6a12      	ldr	r2, [r2, #32]
 800c034:	4293      	cmp	r3, r2
 800c036:	d827      	bhi.n	800c088 <lfs_ctz_extend+0x170>
            for (lfs_off_t i = 0; i < skips; i++) {
 800c038:	3501      	adds	r5, #1
 800c03a:	455d      	cmp	r5, fp
 800c03c:	d22b      	bcs.n	800c096 <lfs_ctz_extend+0x17e>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800c03e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800c042:	2304      	movs	r3, #4
 800c044:	9303      	str	r3, [sp, #12]
 800c046:	ab05      	add	r3, sp, #20
 800c048:	9302      	str	r3, [sp, #8]
 800c04a:	f8cd 9004 	str.w	r9, [sp, #4]
 800c04e:	9b07      	ldr	r3, [sp, #28]
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	2301      	movs	r3, #1
 800c054:	4632      	mov	r2, r6
 800c056:	4639      	mov	r1, r7
 800c058:	4620      	mov	r0, r4
 800c05a:	f7ff f863 	bl	800b124 <lfs_bd_prog>
                head = lfs_fromle32(head);
 800c05e:	9a05      	ldr	r2, [sp, #20]
                if (err) {
 800c060:	2800      	cmp	r0, #0
 800c062:	d1dd      	bne.n	800c020 <lfs_ctz_extend+0x108>
                if (i != skips-1) {
 800c064:	4555      	cmp	r5, sl
 800c066:	d0e0      	beq.n	800c02a <lfs_ctz_extend+0x112>
                    err = lfs_bd_read(lfs,
 800c068:	2304      	movs	r3, #4
 800c06a:	9303      	str	r3, [sp, #12]
 800c06c:	a905      	add	r1, sp, #20
 800c06e:	9102      	str	r1, [sp, #8]
 800c070:	f8cd 9004 	str.w	r9, [sp, #4]
 800c074:	9200      	str	r2, [sp, #0]
 800c076:	4632      	mov	r2, r6
 800c078:	2100      	movs	r1, #0
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7fe f938 	bl	800a2f0 <lfs_bd_read>
                    if (err) {
 800c080:	2800      	cmp	r0, #0
 800c082:	d0d2      	beq.n	800c02a <lfs_ctz_extend+0x112>
                        return err;
 800c084:	4680      	mov	r8, r0
 800c086:	e7be      	b.n	800c006 <lfs_ctz_extend+0xee>
                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800c088:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <lfs_ctz_extend+0x1a0>)
 800c08a:	4a08      	ldr	r2, [pc, #32]	; (800c0ac <lfs_ctz_extend+0x194>)
 800c08c:	f640 0188 	movw	r1, #2184	; 0x888
 800c090:	4807      	ldr	r0, [pc, #28]	; (800c0b0 <lfs_ctz_extend+0x198>)
 800c092:	f001 fc91 	bl	800d9b8 <__assert_func>
            *block = nblock;
 800c096:	9b07      	ldr	r3, [sp, #28]
 800c098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c09a:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 800c09c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c0a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c0a2:	6013      	str	r3, [r2, #0]
            return 0;
 800c0a4:	e7af      	b.n	800c006 <lfs_ctz_extend+0xee>
 800c0a6:	bf00      	nop
 800c0a8:	0800f494 	.word	0x0800f494
 800c0ac:	0800f398 	.word	0x0800f398
 800c0b0:	0800f3e8 	.word	0x0800f3e8
 800c0b4:	0800f5cc 	.word	0x0800f5cc
 800c0b8:	0800f4c4 	.word	0x0800f4c4

0800c0bc <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
 800c0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	b087      	sub	sp, #28
 800c0c2:	4617      	mov	r7, r2
 800c0c4:	4699      	mov	r9, r3
    if ((file->flags & 3) == LFS_O_RDONLY) {
 800c0c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c0c8:	f003 0203 	and.w	r2, r3, #3
 800c0cc:	2a01      	cmp	r2, #1
 800c0ce:	f000 80f3 	beq.w	800c2b8 <lfs_file_write+0x1fc>
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 800c0d6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c0da:	d125      	bne.n	800c128 <lfs_file_write+0x6c>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800c0dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800c0e2:	d004      	beq.n	800c0ee <lfs_file_write+0x32>
 800c0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c0e8:	4291      	cmp	r1, r2
 800c0ea:	d200      	bcs.n	800c0ee <lfs_file_write+0x32>
        file->pos = file->ctz.size;
 800c0ec:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
 800c0ee:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800c0f0:	eb06 0109 	add.w	r1, r6, r9
 800c0f4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800c0f6:	4291      	cmp	r1, r2
 800c0f8:	f200 80e1 	bhi.w	800c2be <lfs_file_write+0x202>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800c0fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c100:	d118      	bne.n	800c134 <lfs_file_write+0x78>
 800c102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c104:	429e      	cmp	r6, r3
 800c106:	d915      	bls.n	800c134 <lfs_file_write+0x78>
        file->pos = file->ctz.size;
 800c108:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 800c10a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c10c:	429e      	cmp	r6, r3
 800c10e:	d911      	bls.n	800c134 <lfs_file_write+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 800c110:	aa06      	add	r2, sp, #24
 800c112:	2300      	movs	r3, #0
 800c114:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800c118:	2301      	movs	r3, #1
 800c11a:	4621      	mov	r1, r4
 800c11c:	4628      	mov	r0, r5
 800c11e:	f7ff ffcd 	bl	800c0bc <lfs_file_write>
            if (res < 0) {
 800c122:	1e03      	subs	r3, r0, #0
 800c124:	daf1      	bge.n	800c10a <lfs_file_write+0x4e>
 800c126:	e0b0      	b.n	800c28a <lfs_file_write+0x1ce>
        int err = lfs_file_flush(lfs, file);
 800c128:	f000 f8cc 	bl	800c2c4 <lfs_file_flush>
        if (err) {
 800c12c:	4603      	mov	r3, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d0d4      	beq.n	800c0dc <lfs_file_write+0x20>
 800c132:	e0aa      	b.n	800c28a <lfs_file_write+0x1ce>
    if ((file->flags & LFS_F_INLINE) &&
 800c134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c136:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c13a:	d014      	beq.n	800c166 <lfs_file_write+0xaa>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800c13c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c13e:	eb00 0209 	add.w	r2, r0, r9
 800c142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
 800c144:	429a      	cmp	r2, r3
 800c146:	bf38      	it	cc
 800c148:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800c14a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800c14c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 800c14e:	69c9      	ldr	r1, [r1, #28]
            lfs_min(LFS_ATTR_MAX, lfs_min(
 800c150:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
 800c152:	428b      	cmp	r3, r1
 800c154:	bf28      	it	cs
 800c156:	460b      	movcs	r3, r1
 800c158:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800c15c:	428b      	cmp	r3, r1
 800c15e:	bf28      	it	cs
 800c160:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
 800c162:	429a      	cmp	r2, r3
 800c164:	d82d      	bhi.n	800c1c2 <lfs_file_write+0x106>
        const void *buffer, lfs_size_t size) {
 800c166:	46c8      	mov	r8, r9
    while (nsize > 0) {
 800c168:	f1b8 0f00 	cmp.w	r8, #0
 800c16c:	f000 809e 	beq.w	800c2ac <lfs_file_write+0x1f0>
        if (!(file->flags & LFS_F_WRITING) ||
 800c170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c172:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
 800c176:	d004      	beq.n	800c182 <lfs_file_write+0xc6>
                file->off == lfs->cfg->block_size) {
 800c178:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c17a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c17c:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800c17e:	4288      	cmp	r0, r1
 800c180:	d15a      	bne.n	800c238 <lfs_file_write+0x17c>
            if (!(file->flags & LFS_F_INLINE)) {
 800c182:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c186:	d14e      	bne.n	800c226 <lfs_file_write+0x16a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800c188:	b90a      	cbnz	r2, 800c18e <lfs_file_write+0xd2>
 800c18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c18c:	bb4b      	cbnz	r3, 800c1e2 <lfs_file_write+0x126>
                lfs_alloc_ack(lfs);
 800c18e:	4628      	mov	r0, r5
 800c190:	f7fe f842 	bl	800a218 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800c194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c196:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800c19a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800c19e:	9102      	str	r1, [sp, #8]
 800c1a0:	9201      	str	r2, [sp, #4]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1a6:	462a      	mov	r2, r5
 800c1a8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f7ff feb3 	bl	800bf18 <lfs_ctz_extend>
                if (err) {
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d03b      	beq.n	800c230 <lfs_file_write+0x174>
                    file->flags |= LFS_F_ERRED;
 800c1b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c1ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c1be:	6322      	str	r2, [r4, #48]	; 0x30
                    return err;
 800c1c0:	e063      	b.n	800c28a <lfs_file_write+0x1ce>
        file->off = file->pos;
 800c1c2:	63e0      	str	r0, [r4, #60]	; 0x3c
        lfs_alloc_ack(lfs);
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7fe f827 	bl	800a218 <lfs_alloc_ack>
        int err = lfs_file_relocate(lfs, file);
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f7ff fe13 	bl	800bdf8 <lfs_file_relocate>
        if (err) {
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0c6      	beq.n	800c166 <lfs_file_write+0xaa>
            file->flags |= LFS_F_ERRED;
 800c1d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c1da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c1de:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800c1e0:	e053      	b.n	800c28a <lfs_file_write+0x1ce>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800c1e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c1ea:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c1ee:	9003      	str	r0, [sp, #12]
 800c1f0:	9102      	str	r1, [sp, #8]
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	9200      	str	r2, [sp, #0]
 800c1f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1f8:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4628      	mov	r0, r5
 800c200:	f7ff fb6e 	bl	800b8e0 <lfs_ctz_find>
                    if (err) {
 800c204:	4603      	mov	r3, r0
 800c206:	b948      	cbnz	r0, 800c21c <lfs_file_write+0x160>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800c208:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c20a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c20c:	21ff      	movs	r1, #255	; 0xff
 800c20e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c210:	f001 fc50 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800c214:	f04f 33ff 	mov.w	r3, #4294967295
 800c218:	6423      	str	r3, [r4, #64]	; 0x40
 800c21a:	e7b8      	b.n	800c18e <lfs_file_write+0xd2>
                        file->flags |= LFS_F_ERRED;
 800c21c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c21e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c222:	6322      	str	r2, [r4, #48]	; 0x30
                        return err;
 800c224:	e031      	b.n	800c28a <lfs_file_write+0x1ce>
                file->block = 0xfffffffe;
 800c226:	f06f 0301 	mvn.w	r3, #1
 800c22a:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800c22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c22e:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 800c230:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c236:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800c238:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c23a:	69de      	ldr	r6, [r3, #28]
 800c23c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c23e:	1af6      	subs	r6, r6, r3
 800c240:	4546      	cmp	r6, r8
 800c242:	bf28      	it	cs
 800c244:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800c246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c248:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c24a:	9603      	str	r6, [sp, #12]
 800c24c:	9702      	str	r7, [sp, #8]
 800c24e:	9201      	str	r2, [sp, #4]
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	2301      	movs	r3, #1
 800c254:	462a      	mov	r2, r5
 800c256:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c25a:	4628      	mov	r0, r5
 800c25c:	f7fe ff62 	bl	800b124 <lfs_bd_prog>
            if (err) {
 800c260:	4603      	mov	r3, r0
 800c262:	b1b0      	cbz	r0, 800c292 <lfs_file_write+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 800c264:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c268:	d10b      	bne.n	800c282 <lfs_file_write+0x1c6>
            err = lfs_file_relocate(lfs, file);
 800c26a:	4621      	mov	r1, r4
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7ff fdc3 	bl	800bdf8 <lfs_file_relocate>
            if (err) {
 800c272:	4603      	mov	r3, r0
 800c274:	2800      	cmp	r0, #0
 800c276:	d0e6      	beq.n	800c246 <lfs_file_write+0x18a>
                file->flags |= LFS_F_ERRED;
 800c278:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c27a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c27e:	6322      	str	r2, [r4, #48]	; 0x30
                return err;
 800c280:	e003      	b.n	800c28a <lfs_file_write+0x1ce>
                file->flags |= LFS_F_ERRED;
 800c282:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c284:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c288:	6322      	str	r2, [r4, #48]	; 0x30
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	b007      	add	sp, #28
 800c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 800c292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c294:	4433      	add	r3, r6
 800c296:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800c298:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c29a:	4433      	add	r3, r6
 800c29c:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800c29e:	4437      	add	r7, r6
        nsize -= diff;
 800c2a0:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ack(lfs);
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f7fd ffb7 	bl	800a218 <lfs_alloc_ack>
 800c2aa:	e75d      	b.n	800c168 <lfs_file_write+0xac>
    file->flags &= ~LFS_F_ERRED;
 800c2ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c2b2:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
 800c2b4:	464b      	mov	r3, r9
 800c2b6:	e7e8      	b.n	800c28a <lfs_file_write+0x1ce>
        return LFS_ERR_BADF;
 800c2b8:	f06f 0308 	mvn.w	r3, #8
 800c2bc:	e7e5      	b.n	800c28a <lfs_file_write+0x1ce>
        return LFS_ERR_FBIG;
 800c2be:	f06f 031a 	mvn.w	r3, #26
 800c2c2:	e7e2      	b.n	800c28a <lfs_file_write+0x1ce>

0800c2c4 <lfs_file_flush>:
    if (file->flags & LFS_F_READING) {
 800c2c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c2c6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c2ca:	d008      	beq.n	800c2de <lfs_file_flush+0x1a>
        if (!(file->flags & LFS_F_INLINE)) {
 800c2cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c2d0:	d102      	bne.n	800c2d8 <lfs_file_flush+0x14>
    rcache->block = 0xffffffff;
 800c2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d6:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 800c2d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2dc:	630b      	str	r3, [r1, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 800c2de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c2e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c2e4:	d064      	beq.n	800c3b0 <lfs_file_flush+0xec>
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800c2e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2e8:	b097      	sub	sp, #92	; 0x5c
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	4605      	mov	r5, r0
        lfs_off_t pos = file->pos;
 800c2ee:	6b4e      	ldr	r6, [r1, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 800c2f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c2f4:	d14d      	bne.n	800c392 <lfs_file_flush+0xce>
            lfs_file_t orig = {
 800c2f6:	2254      	movs	r2, #84	; 0x54
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	a801      	add	r0, sp, #4
 800c2fc:	f001 fbda 	bl	800dab4 <memset>
                .ctz.head = file->ctz.head,
 800c300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
 800c302:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
 800c304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
 800c306:	930c      	str	r3, [sp, #48]	; 0x30
 800c308:	2301      	movs	r3, #1
 800c30a:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
 800c30c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
 800c30e:	930e      	str	r3, [sp, #56]	; 0x38
 800c310:	af11      	add	r7, sp, #68	; 0x44
 800c312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c316:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = 0xffffffff;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 800c320:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c324:	429a      	cmp	r2, r3
 800c326:	d21a      	bcs.n	800c35e <lfs_file_flush+0x9a>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 800c328:	2301      	movs	r3, #1
 800c32a:	f10d 0203 	add.w	r2, sp, #3
 800c32e:	a901      	add	r1, sp, #4
 800c330:	4628      	mov	r0, r5
 800c332:	f000 f843 	bl	800c3bc <lfs_file_read>
                if (res < 0) {
 800c336:	1e03      	subs	r3, r0, #0
 800c338:	db37      	blt.n	800c3aa <lfs_file_flush+0xe6>
                res = lfs_file_write(lfs, file, &data, 1);
 800c33a:	2301      	movs	r3, #1
 800c33c:	f10d 0203 	add.w	r2, sp, #3
 800c340:	4621      	mov	r1, r4
 800c342:	4628      	mov	r0, r5
 800c344:	f7ff feba 	bl	800c0bc <lfs_file_write>
                if (res < 0) {
 800c348:	1e03      	subs	r3, r0, #0
 800c34a:	db2e      	blt.n	800c3aa <lfs_file_flush+0xe6>
                if (lfs->rcache.block != 0xffffffff) {
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d0e5      	beq.n	800c320 <lfs_file_flush+0x5c>
    rcache->block = 0xffffffff;
 800c354:	f04f 33ff 	mov.w	r3, #4294967295
 800c358:	9311      	str	r3, [sp, #68]	; 0x44
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	e7e0      	b.n	800c320 <lfs_file_flush+0x5c>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800c35e:	2301      	movs	r3, #1
 800c360:	462a      	mov	r2, r5
 800c362:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800c366:	4628      	mov	r0, r5
 800c368:	f7fe fe84 	bl	800b074 <lfs_bd_flush>
                if (err) {
 800c36c:	4603      	mov	r3, r0
 800c36e:	b180      	cbz	r0, 800c392 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
 800c370:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c374:	d119      	bne.n	800c3aa <lfs_file_flush+0xe6>
                LFS_DEBUG("Bad block at %"PRIu32, file->block);
 800c376:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c378:	f640 11ef 	movw	r1, #2543	; 0x9ef
 800c37c:	480e      	ldr	r0, [pc, #56]	; (800c3b8 <lfs_file_flush+0xf4>)
 800c37e:	f001 ff0d 	bl	800e19c <iprintf>
                err = lfs_file_relocate(lfs, file);
 800c382:	4621      	mov	r1, r4
 800c384:	4628      	mov	r0, r5
 800c386:	f7ff fd37 	bl	800bdf8 <lfs_file_relocate>
                if (err) {
 800c38a:	4603      	mov	r3, r0
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d0e6      	beq.n	800c35e <lfs_file_flush+0x9a>
 800c390:	e00b      	b.n	800c3aa <lfs_file_flush+0xe6>
        file->ctz.head = file->block;
 800c392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c394:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 800c396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c398:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800c39a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c39c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
 800c3a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3a4:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
 800c3a6:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	b017      	add	sp, #92	; 0x5c
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	0800f5cc 	.word	0x0800f5cc

0800c3bc <lfs_file_read>:
        void *buffer, lfs_size_t size) {
 800c3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	b087      	sub	sp, #28
 800c3c2:	4617      	mov	r7, r2
 800c3c4:	461d      	mov	r5, r3
    if ((file->flags & 3) == LFS_O_WRONLY) {
 800c3c6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800c3c8:	f003 0203 	and.w	r2, r3, #3
 800c3cc:	2a02      	cmp	r2, #2
 800c3ce:	f000 8081 	beq.w	800c4d4 <lfs_file_read+0x118>
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	460c      	mov	r4, r1
    if (file->flags & LFS_F_WRITING) {
 800c3d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c3da:	d10a      	bne.n	800c3f2 <lfs_file_read+0x36>
    if (file->pos >= file->ctz.size) {
 800c3dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c3de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d27a      	bcs.n	800c4da <lfs_file_read+0x11e>
    size = lfs_min(size, file->ctz.size - file->pos);
 800c3e4:	eba3 0902 	sub.w	r9, r3, r2
 800c3e8:	45a9      	cmp	r9, r5
 800c3ea:	bf28      	it	cs
 800c3ec:	46a9      	movcs	r9, r5
    nsize = size;
 800c3ee:	464e      	mov	r6, r9
    while (nsize > 0) {
 800c3f0:	e03d      	b.n	800c46e <lfs_file_read+0xb2>
        int err = lfs_file_flush(lfs, file);
 800c3f2:	f7ff ff67 	bl	800c2c4 <lfs_file_flush>
        if (err) {
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d0ef      	beq.n	800c3dc <lfs_file_read+0x20>
 800c3fc:	e06e      	b.n	800c4dc <lfs_file_read+0x120>
            if (!(file->flags & LFS_F_INLINE)) {
 800c3fe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c402:	d041      	beq.n	800c488 <lfs_file_read+0xcc>
                file->block = 0xfffffffe;
 800c404:	f06f 0301 	mvn.w	r3, #1
 800c408:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 800c40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c40c:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
 800c40e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c414:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800c416:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 800c41a:	69db      	ldr	r3, [r3, #28]
 800c41c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c41e:	1a5d      	subs	r5, r3, r1
 800c420:	42b5      	cmp	r5, r6
 800c422:	bf28      	it	cs
 800c424:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 800c426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c428:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c42c:	d041      	beq.n	800c4b2 <lfs_file_read+0xf6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800c42e:	88a2      	ldrh	r2, [r4, #4]
 800c430:	0292      	lsls	r2, r2, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800c432:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c436:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c43a:	9505      	str	r5, [sp, #20]
 800c43c:	9704      	str	r7, [sp, #16]
 800c43e:	9103      	str	r1, [sp, #12]
 800c440:	9202      	str	r2, [sp, #8]
 800c442:	4a28      	ldr	r2, [pc, #160]	; (800c4e4 <lfs_file_read+0x128>)
 800c444:	9201      	str	r2, [sp, #4]
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c44c:	2200      	movs	r2, #0
 800c44e:	f104 0108 	add.w	r1, r4, #8
 800c452:	4640      	mov	r0, r8
 800c454:	f7fe fd7e 	bl	800af54 <lfs_dir_getread>
            if (err) {
 800c458:	4603      	mov	r3, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d13e      	bne.n	800c4dc <lfs_file_read+0x120>
        file->pos += diff;
 800c45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c460:	442b      	add	r3, r5
 800c462:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 800c464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c466:	442b      	add	r3, r5
 800c468:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 800c46a:	442f      	add	r7, r5
        nsize -= diff;
 800c46c:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 800c46e:	2e00      	cmp	r6, #0
 800c470:	d02e      	beq.n	800c4d0 <lfs_file_read+0x114>
        if (!(file->flags & LFS_F_READING) ||
 800c472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c474:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c478:	d0c1      	beq.n	800c3fe <lfs_file_read+0x42>
                file->off == lfs->cfg->block_size) {
 800c47a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c47c:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800c480:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
 800c482:	4291      	cmp	r1, r2
 800c484:	d1c7      	bne.n	800c416 <lfs_file_read+0x5a>
 800c486:	e7ba      	b.n	800c3fe <lfs_file_read+0x42>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800c488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c48a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c48c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c490:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c494:	9003      	str	r0, [sp, #12]
 800c496:	9102      	str	r1, [sp, #8]
 800c498:	9201      	str	r2, [sp, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c49e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	f7ff fa1b 	bl	800b8e0 <lfs_ctz_find>
                if (err) {
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d0ae      	beq.n	800c40e <lfs_file_read+0x52>
 800c4b0:	e014      	b.n	800c4dc <lfs_file_read+0x120>
            int err = lfs_bd_read(lfs,
 800c4b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c4b4:	9503      	str	r5, [sp, #12]
 800c4b6:	9702      	str	r7, [sp, #8]
 800c4b8:	9101      	str	r1, [sp, #4]
 800c4ba:	9200      	str	r2, [sp, #0]
 800c4bc:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	f7fd ff14 	bl	800a2f0 <lfs_bd_read>
            if (err) {
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d0c7      	beq.n	800c45e <lfs_file_read+0xa2>
 800c4ce:	e005      	b.n	800c4dc <lfs_file_read+0x120>
    return size;
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	e003      	b.n	800c4dc <lfs_file_read+0x120>
        return LFS_ERR_BADF;
 800c4d4:	f06f 0308 	mvn.w	r3, #8
 800c4d8:	e000      	b.n	800c4dc <lfs_file_read+0x120>
        return 0;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	b007      	add	sp, #28
 800c4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4e4:	fff7fc00 	.word	0xfff7fc00

0800c4e8 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
 800c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	4617      	mov	r7, r2
 800c4f0:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
 800c4f2:	f7ff fee7 	bl	800c2c4 <lfs_file_flush>
    if (err) {
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	b938      	cbnz	r0, 800c50a <lfs_file_seek+0x22>
    lfs_off_t npos = file->pos;
 800c4fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 800c4fc:	b93d      	cbnz	r5, 800c50e <lfs_file_seek+0x26>
        npos = off;
 800c4fe:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
 800c500:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c502:	4283      	cmp	r3, r0
 800c504:	d30c      	bcc.n	800c520 <lfs_file_seek+0x38>
    file->pos = npos;
 800c506:	6360      	str	r0, [r4, #52]	; 0x34
    return npos;
 800c508:	4603      	mov	r3, r0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
 800c50e:	2d01      	cmp	r5, #1
 800c510:	d004      	beq.n	800c51c <lfs_file_seek+0x34>
    } else if (whence == LFS_SEEK_END) {
 800c512:	2d02      	cmp	r5, #2
 800c514:	d1f4      	bne.n	800c500 <lfs_file_seek+0x18>
        npos = file->ctz.size + off;
 800c516:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c518:	4438      	add	r0, r7
 800c51a:	e7f1      	b.n	800c500 <lfs_file_seek+0x18>
        npos = file->pos + off;
 800c51c:	4438      	add	r0, r7
 800c51e:	e7ef      	b.n	800c500 <lfs_file_seek+0x18>
        return LFS_ERR_INVAL;
 800c520:	f06f 0315 	mvn.w	r3, #21
 800c524:	e7f1      	b.n	800c50a <lfs_file_seek+0x22>

0800c526 <lfs_file_rewind>:
int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800c526:	b508      	push	{r3, lr}
    lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_SET);
 800c528:	2300      	movs	r3, #0
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7ff ffdc 	bl	800c4e8 <lfs_file_seek>
    if (res < 0) {
 800c530:	2800      	cmp	r0, #0
 800c532:	db00      	blt.n	800c536 <lfs_file_rewind+0x10>
    return 0;
 800c534:	2000      	movs	r0, #0
}
 800c536:	bd08      	pop	{r3, pc}

0800c538 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 800c538:	b500      	push	{lr}
 800c53a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 800c53c:	aa02      	add	r2, sp, #8
 800c53e:	2300      	movs	r3, #0
 800c540:	f842 3d04 	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 800c544:	4904      	ldr	r1, [pc, #16]	; (800c558 <lfs_fs_size+0x20>)
 800c546:	f7ff fb1f 	bl	800bb88 <lfs_fs_traverse>
    if (err) {
 800c54a:	4603      	mov	r3, r0
 800c54c:	b900      	cbnz	r0, 800c550 <lfs_fs_size+0x18>
        return err;
    }

  return size;
 800c54e:	9b01      	ldr	r3, [sp, #4]
}
 800c550:	4618      	mov	r0, r3
 800c552:	b003      	add	sp, #12
 800c554:	f85d fb04 	ldr.w	pc, [sp], #4
 800c558:	0800a2bf 	.word	0x0800a2bf

0800c55c <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	b099      	sub	sp, #100	; 0x64
 800c562:	4607      	mov	r7, r0
 800c564:	468b      	mov	fp, r1
 800c566:	4691      	mov	r9, r2
 800c568:	469a      	mov	sl, r3
 800c56a:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800c56e:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800c572:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 800c576:	684b      	ldr	r3, [r1, #4]
 800c578:	9314      	str	r3, [sp, #80]	; 0x50
 800c57a:	680b      	ldr	r3, [r1, #0]
 800c57c:	9315      	str	r3, [sp, #84]	; 0x54
    while (end - begin > 1) {
 800c57e:	e012      	b.n	800c5a6 <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
 800c580:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800c584:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c588:	442c      	add	r4, r5
 800c58a:	b2a4      	uxth	r4, r4
 800c58c:	9602      	str	r6, [sp, #8]
 800c58e:	9401      	str	r4, [sp, #4]
 800c590:	f8cd 8000 	str.w	r8, [sp]
 800c594:	4653      	mov	r3, sl
 800c596:	464a      	mov	r2, r9
 800c598:	4659      	mov	r1, fp
 800c59a:	4638      	mov	r0, r7
 800c59c:	f000 ff76 	bl	800d48c <lfs_dir_split>
        if (err) {
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d160      	bne.n	800c666 <lfs_dir_compact+0x10a>
        end = begin + split;
 800c5a4:	4626      	mov	r6, r4
    while (end - begin > 1) {
 800c5a6:	1b74      	subs	r4, r6, r5
 800c5a8:	2c01      	cmp	r4, #1
 800c5aa:	dd31      	ble.n	800c610 <lfs_dir_compact+0xb4>
        lfs_size_t size = 0;
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	a918      	add	r1, sp, #96	; 0x60
 800c5b0:	f841 2d28 	str.w	r2, [r1, #-40]!
        int err = lfs_dir_traverse(lfs,
 800c5b4:	426b      	negs	r3, r5
 800c5b6:	b21b      	sxth	r3, r3
 800c5b8:	9109      	str	r1, [sp, #36]	; 0x24
 800c5ba:	49a3      	ldr	r1, [pc, #652]	; (800c848 <lfs_dir_compact+0x2ec>)
 800c5bc:	9108      	str	r1, [sp, #32]
 800c5be:	9307      	str	r3, [sp, #28]
 800c5c0:	9606      	str	r6, [sp, #24]
 800c5c2:	9505      	str	r5, [sp, #20]
 800c5c4:	9204      	str	r2, [sp, #16]
 800c5c6:	4ba1      	ldr	r3, [pc, #644]	; (800c84c <lfs_dir_compact+0x2f0>)
 800c5c8:	9303      	str	r3, [sp, #12]
 800c5ca:	9202      	str	r2, [sp, #8]
 800c5cc:	f8cd a004 	str.w	sl, [sp, #4]
 800c5d0:	f8cd 9000 	str.w	r9, [sp]
 800c5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d8:	4641      	mov	r1, r8
 800c5da:	4638      	mov	r0, r7
 800c5dc:	f7fe fa9c 	bl	800ab18 <lfs_dir_traverse>
        if (err) {
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	f040 81c1 	bne.w	800c968 <lfs_dir_compact+0x40c>
        if (end - begin < 0xff &&
 800c5e6:	2cfe      	cmp	r4, #254	; 0xfe
 800c5e8:	dcca      	bgt.n	800c580 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800c5ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5ec:	69da      	ldr	r2, [r3, #28]
 800c5ee:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
 800c5f2:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 800c5f4:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800c5f8:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
 800c5fa:	fbb3 f2f0 	udiv	r2, r3, r0
 800c5fe:	fb00 3212 	mls	r2, r0, r2, r3
 800c602:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 800c604:	428b      	cmp	r3, r1
 800c606:	bf28      	it	cs
 800c608:	460b      	movcs	r3, r1
 800c60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if (end - begin < 0xff &&
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d8b7      	bhi.n	800c580 <lfs_dir_compact+0x24>
    dir->rev += 1;
 800c610:	f8db 3008 	ldr.w	r3, [fp, #8]
 800c614:	3301      	adds	r3, #1
 800c616:	f8cb 3008 	str.w	r3, [fp, #8]
    if (lfs->cfg->block_cycles &&
 800c61a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c61c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c61e:	2a00      	cmp	r2, #0
 800c620:	d048      	beq.n	800c6b4 <lfs_dir_compact+0x158>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 800c622:	3201      	adds	r2, #1
 800c624:	fbb3 f1f2 	udiv	r1, r3, r2
 800c628:	fb02 3211 	mls	r2, r2, r1, r3
    if (lfs->cfg->block_cycles &&
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	d145      	bne.n	800c6bc <lfs_dir_compact+0x160>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c630:	f8db 3000 	ldr.w	r3, [fp]
 800c634:	b143      	cbz	r3, 800c648 <lfs_dir_compact+0xec>
 800c636:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c63a:	2a01      	cmp	r2, #1
 800c63c:	d004      	beq.n	800c648 <lfs_dir_compact+0xec>
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d002      	beq.n	800c648 <lfs_dir_compact+0xec>
 800c642:	2a00      	cmp	r2, #0
 800c644:	f040 8165 	bne.w	800c912 <lfs_dir_compact+0x3b6>
            lfs_ssize_t res = lfs_fs_size(lfs);
 800c648:	4638      	mov	r0, r7
 800c64a:	f7ff ff75 	bl	800c538 <lfs_fs_size>
            if (res < 0) {
 800c64e:	1e02      	subs	r2, r0, #0
 800c650:	920b      	str	r2, [sp, #44]	; 0x2c
 800c652:	db3f      	blt.n	800c6d4 <lfs_dir_compact+0x178>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800c654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 800c65c:	d30e      	bcc.n	800c67c <lfs_dir_compact+0x120>
    bool exhausted = false;
 800c65e:	2300      	movs	r3, #0
 800c660:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c662:	930d      	str	r3, [sp, #52]	; 0x34
 800c664:	e02d      	b.n	800c6c2 <lfs_dir_compact+0x166>
 800c666:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800c668:	f110 0f1c 	cmn.w	r0, #28
 800c66c:	d132      	bne.n	800c6d4 <lfs_dir_compact+0x178>
 800c66e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	3b24      	subs	r3, #36	; 0x24
 800c674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c676:	4293      	cmp	r3, r2
 800c678:	d2ca      	bcs.n	800c610 <lfs_dir_compact+0xb4>
 800c67a:	e02b      	b.n	800c6d4 <lfs_dir_compact+0x178>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800c67c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800c680:	f240 51ba 	movw	r1, #1466	; 0x5ba
 800c684:	4872      	ldr	r0, [pc, #456]	; (800c850 <lfs_dir_compact+0x2f4>)
 800c686:	f001 fd89 	bl	800e19c <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800c68a:	9602      	str	r6, [sp, #8]
 800c68c:	9501      	str	r5, [sp, #4]
 800c68e:	f8cd 8000 	str.w	r8, [sp]
 800c692:	4653      	mov	r3, sl
 800c694:	464a      	mov	r2, r9
 800c696:	4659      	mov	r1, fp
 800c698:	4638      	mov	r0, r7
 800c69a:	f000 fef7 	bl	800d48c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
 800c69e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6a0:	b110      	cbz	r0, 800c6a8 <lfs_dir_compact+0x14c>
 800c6a2:	f110 0f1c 	cmn.w	r0, #28
 800c6a6:	d115      	bne.n	800c6d4 <lfs_dir_compact+0x178>
                if (!err) {
 800c6a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6aa:	b1bb      	cbz	r3, 800c6dc <lfs_dir_compact+0x180>
    bool exhausted = false;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c6b0:	930d      	str	r3, [sp, #52]	; 0x34
 800c6b2:	e006      	b.n	800c6c2 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c6b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6ba:	e002      	b.n	800c6c2 <lfs_dir_compact+0x166>
    bool exhausted = false;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c6c0:	930d      	str	r3, [sp, #52]	; 0x34
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800c6c2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	4659      	mov	r1, fp
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	f7fe fc18 	bl	800af00 <lfs_dir_getgstate>
            if (err) {
 800c6d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6d2:	b170      	cbz	r0, 800c6f2 <lfs_dir_compact+0x196>
}
 800c6d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c6d6:	b019      	add	sp, #100	; 0x64
 800c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    end = begin;
 800c6dc:	462e      	mov	r6, r5
    bool exhausted = false;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	930c      	str	r3, [sp, #48]	; 0x30
    bool relocated = false;
 800c6e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c6e4:	e7ed      	b.n	800c6c2 <lfs_dir_compact+0x166>
        relocated = true;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6ea:	e7ea      	b.n	800c6c2 <lfs_dir_compact+0x166>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f0:	e7e7      	b.n	800c6c2 <lfs_dir_compact+0x166>
                .block = dir->pair[1],
 800c6f2:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
 800c6f6:	910e      	str	r1, [sp, #56]	; 0x38
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c700:	9210      	str	r2, [sp, #64]	; 0x40
 800c702:	9211      	str	r2, [sp, #68]	; 0x44
 800c704:	9312      	str	r3, [sp, #72]	; 0x48
                .end = lfs->cfg->block_size - 8,
 800c706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800c70c:	9313      	str	r3, [sp, #76]	; 0x4c
            err = lfs_bd_erase(lfs, dir->pair[1]);
 800c70e:	4638      	mov	r0, r7
 800c710:	f7fd fdda 	bl	800a2c8 <lfs_bd_erase>
            if (err) {
 800c714:	900b      	str	r0, [sp, #44]	; 0x2c
 800c716:	b340      	cbz	r0, 800c76a <lfs_dir_compact+0x20e>
                if (err == LFS_ERR_CORRUPT) {
 800c718:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c71c:	d1da      	bne.n	800c6d4 <lfs_dir_compact+0x178>
    rcache->block = 0xffffffff;
 800c71e:	f04f 33ff 	mov.w	r3, #4294967295
 800c722:	613b      	str	r3, [r7, #16]
        if (!exhausted) {
 800c724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 80f6 	beq.w	800c918 <lfs_dir_compact+0x3bc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c72e:	2a00      	cmp	r2, #0
 800c730:	f000 80fa 	beq.w	800c928 <lfs_dir_compact+0x3cc>
 800c734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c736:	2b01      	cmp	r3, #1
 800c738:	f000 80f6 	beq.w	800c928 <lfs_dir_compact+0x3cc>
 800c73c:	2a01      	cmp	r2, #1
 800c73e:	f000 80f3 	beq.w	800c928 <lfs_dir_compact+0x3cc>
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 80f0 	beq.w	800c928 <lfs_dir_compact+0x3cc>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800c748:	f10b 0104 	add.w	r1, fp, #4
 800c74c:	4638      	mov	r0, r7
 800c74e:	f7ff fab3 	bl	800bcb8 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 800c752:	900b      	str	r0, [sp, #44]	; 0x2c
 800c754:	2800      	cmp	r0, #0
 800c756:	d0c6      	beq.n	800c6e6 <lfs_dir_compact+0x18a>
 800c758:	f110 0f1c 	cmn.w	r0, #28
 800c75c:	d0c6      	beq.n	800c6ec <lfs_dir_compact+0x190>
 800c75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0b7      	beq.n	800c6d4 <lfs_dir_compact+0x178>
        relocated = true;
 800c764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c766:	930d      	str	r3, [sp, #52]	; 0x34
 800c768:	e7ab      	b.n	800c6c2 <lfs_dir_compact+0x166>
            err = lfs_dir_commitprog(lfs, &commit,
 800c76a:	2304      	movs	r3, #4
 800c76c:	f10b 0208 	add.w	r2, fp, #8
 800c770:	a90e      	add	r1, sp, #56	; 0x38
 800c772:	4638      	mov	r0, r7
 800c774:	f7fe fd4a 	bl	800b20c <lfs_dir_commitprog>
            if (err) {
 800c778:	900b      	str	r0, [sp, #44]	; 0x2c
 800c77a:	b118      	cbz	r0, 800c784 <lfs_dir_compact+0x228>
                if (err == LFS_ERR_CORRUPT) {
 800c77c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c780:	d1a8      	bne.n	800c6d4 <lfs_dir_compact+0x178>
 800c782:	e7cc      	b.n	800c71e <lfs_dir_compact+0x1c2>
            err = lfs_dir_traverse(lfs,
 800c784:	426b      	negs	r3, r5
 800c786:	b21b      	sxth	r3, r3
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c788:	9716      	str	r7, [sp, #88]	; 0x58
 800c78a:	aa0e      	add	r2, sp, #56	; 0x38
 800c78c:	9217      	str	r2, [sp, #92]	; 0x5c
            err = lfs_dir_traverse(lfs,
 800c78e:	aa16      	add	r2, sp, #88	; 0x58
 800c790:	9209      	str	r2, [sp, #36]	; 0x24
 800c792:	4a30      	ldr	r2, [pc, #192]	; (800c854 <lfs_dir_compact+0x2f8>)
 800c794:	9208      	str	r2, [sp, #32]
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	9606      	str	r6, [sp, #24]
 800c79a:	9505      	str	r5, [sp, #20]
 800c79c:	2200      	movs	r2, #0
 800c79e:	9204      	str	r2, [sp, #16]
 800c7a0:	4b2a      	ldr	r3, [pc, #168]	; (800c84c <lfs_dir_compact+0x2f0>)
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	9202      	str	r2, [sp, #8]
 800c7a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c7aa:	f8cd 9000 	str.w	r9, [sp]
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	4641      	mov	r1, r8
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7fe f9af 	bl	800ab18 <lfs_dir_traverse>
            if (err) {
 800c7ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7bc:	b118      	cbz	r0, 800c7c6 <lfs_dir_compact+0x26a>
                if (err == LFS_ERR_CORRUPT) {
 800c7be:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c7c2:	d187      	bne.n	800c6d4 <lfs_dir_compact+0x178>
 800c7c4:	e7ab      	b.n	800c71e <lfs_dir_compact+0x1c2>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c7c6:	f8db 3018 	ldr.w	r3, [fp, #24]
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d014      	beq.n	800c7fa <lfs_dir_compact+0x29e>
 800c7d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d8:	d00d      	beq.n	800c7f6 <lfs_dir_compact+0x29a>
 800c7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
 800c7dc:	f013 0f01 	tst.w	r3, #1
 800c7e0:	d00d      	beq.n	800c7fe <lfs_dir_compact+0x2a2>
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e4:	bb13      	cbnz	r3, 800c82c <lfs_dir_compact+0x2d0>
 800c7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	dc1d      	bgt.n	800c828 <lfs_dir_compact+0x2cc>
        if (((uint32_t*)a)[i] != 0) {
 800c7ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800c7f0:	bb3a      	cbnz	r2, 800c842 <lfs_dir_compact+0x2e6>
    for (int i = 0; i < 3; i++) {
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	e7f8      	b.n	800c7e8 <lfs_dir_compact+0x28c>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7f0      	b.n	800c7dc <lfs_dir_compact+0x280>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e7ee      	b.n	800c7dc <lfs_dir_compact+0x280>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800c7fe:	f89b 2017 	ldrb.w	r2, [fp, #23]
 800c802:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 800c806:	f10b 0318 	add.w	r3, fp, #24
 800c80a:	4913      	ldr	r1, [pc, #76]	; (800c858 <lfs_dir_compact+0x2fc>)
 800c80c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800c810:	a90e      	add	r1, sp, #56	; 0x38
 800c812:	4638      	mov	r0, r7
 800c814:	f7fe fd1a 	bl	800b24c <lfs_dir_commitattr>
                if (err) {
 800c818:	2800      	cmp	r0, #0
 800c81a:	d0e2      	beq.n	800c7e2 <lfs_dir_compact+0x286>
                    if (err == LFS_ERR_CORRUPT) {
 800c81c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c820:	f43f af7d 	beq.w	800c71e <lfs_dir_compact+0x1c2>
                    return err;
 800c824:	900b      	str	r0, [sp, #44]	; 0x2c
 800c826:	e755      	b.n	800c6d4 <lfs_dir_compact+0x178>
    return true;
 800c828:	2301      	movs	r3, #1
            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800c82a:	b1bb      	cbz	r3, 800c85c <lfs_dir_compact+0x300>
            err = lfs_dir_commitcrc(lfs, &commit);
 800c82c:	a90e      	add	r1, sp, #56	; 0x38
 800c82e:	4638      	mov	r0, r7
 800c830:	f7fe fd83 	bl	800b33a <lfs_dir_commitcrc>
            if (err) {
 800c834:	900b      	str	r0, [sp, #44]	; 0x2c
 800c836:	b1f8      	cbz	r0, 800c878 <lfs_dir_compact+0x31c>
                if (err == LFS_ERR_CORRUPT) {
 800c838:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c83c:	f47f af4a 	bne.w	800c6d4 <lfs_dir_compact+0x178>
 800c840:	e76d      	b.n	800c71e <lfs_dir_compact+0x1c2>
            return false;
 800c842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c844:	e7f1      	b.n	800c82a <lfs_dir_compact+0x2ce>
 800c846:	bf00      	nop
 800c848:	0800a281 	.word	0x0800a281
 800c84c:	400ffc00 	.word	0x400ffc00
 800c850:	0800f500 	.word	0x0800f500
 800c854:	0800b30d 	.word	0x0800b30d
 800c858:	000ffc08 	.word	0x000ffc08
                err = lfs_dir_commitattr(lfs, &commit,
 800c85c:	4623      	mov	r3, r4
 800c85e:	4a43      	ldr	r2, [pc, #268]	; (800c96c <lfs_dir_compact+0x410>)
 800c860:	a90e      	add	r1, sp, #56	; 0x38
 800c862:	4638      	mov	r0, r7
 800c864:	f7fe fcf2 	bl	800b24c <lfs_dir_commitattr>
                if (err) {
 800c868:	900b      	str	r0, [sp, #44]	; 0x2c
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d0de      	beq.n	800c82c <lfs_dir_compact+0x2d0>
                    if (err == LFS_ERR_CORRUPT) {
 800c86e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800c872:	f47f af2f 	bne.w	800c6d4 <lfs_dir_compact+0x178>
 800c876:	e752      	b.n	800c71e <lfs_dir_compact+0x1c2>
    lfs_block_t t = pair[0];
 800c878:	f8db 1000 	ldr.w	r1, [fp]
    pair[0] = pair[1];
 800c87c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c880:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
 800c884:	f8cb 1004 	str.w	r1, [fp, #4]
            dir->count = end - begin;
 800c888:	1b75      	subs	r5, r6, r5
 800c88a:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
 800c88e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c890:	f8cb 000c 	str.w	r0, [fp, #12]
            dir->etag = commit.ptag;
 800c894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c896:	f8cb 3010 	str.w	r3, [fp, #16]
            dir->erased = (dir->off % lfs->cfg->prog_size == 0);
 800c89a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c89c:	699c      	ldr	r4, [r3, #24]
 800c89e:	fbb0 f3f4 	udiv	r3, r0, r4
 800c8a2:	fb04 0313 	mls	r3, r4, r3, r0
 800c8a6:	fab3 f383 	clz	r3, r3
 800c8aa:	095b      	lsrs	r3, r3, #5
 800c8ac:	f88b 3016 	strb.w	r3, [fp, #22]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c8b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800c8b2:	0d03      	lsrs	r3, r0, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c8b4:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800c8b8:	d00d      	beq.n	800c8d6 <lfs_dir_compact+0x37a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c8ba:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c8bc:	4294      	cmp	r4, r2
 800c8be:	d022      	beq.n	800c906 <lfs_dir_compact+0x3aa>
 800c8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8c2:	428b      	cmp	r3, r1
 800c8c4:	d021      	beq.n	800c90a <lfs_dir_compact+0x3ae>
 800c8c6:	428c      	cmp	r4, r1
 800c8c8:	d021      	beq.n	800c90e <lfs_dir_compact+0x3b2>
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d001      	beq.n	800c8d2 <lfs_dir_compact+0x376>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d0:	e002      	b.n	800c8d8 <lfs_dir_compact+0x37c>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <lfs_dir_compact+0x37c>
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800c8d8:	f013 0f01 	tst.w	r3, #1
 800c8dc:	d005      	beq.n	800c8ea <lfs_dir_compact+0x38e>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800c8de:	4b24      	ldr	r3, [pc, #144]	; (800c970 <lfs_dir_compact+0x414>)
 800c8e0:	4003      	ands	r3, r0
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800c8e8:	647b      	str	r3, [r7, #68]	; 0x44
    if (!relocated) {
 800c8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ec:	bb33      	cbnz	r3, 800c93c <lfs_dir_compact+0x3e0>
        lfs->gstate = lfs->gpending;
 800c8ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c8f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c900:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c902:	653b      	str	r3, [r7, #80]	; 0x50
 800c904:	e6e6      	b.n	800c6d4 <lfs_dir_compact+0x178>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800c906:	2301      	movs	r3, #1
 800c908:	e7e6      	b.n	800c8d8 <lfs_dir_compact+0x37c>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e7e4      	b.n	800c8d8 <lfs_dir_compact+0x37c>
 800c90e:	2301      	movs	r3, #1
 800c910:	e7e2      	b.n	800c8d8 <lfs_dir_compact+0x37c>
            exhausted = true;
 800c912:	2301      	movs	r3, #1
 800c914:	930c      	str	r3, [sp, #48]	; 0x30
 800c916:	e702      	b.n	800c71e <lfs_dir_compact+0x1c2>
            LFS_DEBUG("Bad block at %"PRIu32, dir->pair[1]);
 800c918:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c91c:	f240 6141 	movw	r1, #1601	; 0x641
 800c920:	4814      	ldr	r0, [pc, #80]	; (800c974 <lfs_dir_compact+0x418>)
 800c922:	f001 fc3b 	bl	800e19c <iprintf>
 800c926:	e701      	b.n	800c72c <lfs_dir_compact+0x1d0>
            LFS_WARN("Superblock %"PRIu32" has become unwritable", oldpair[1]);
 800c928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c92a:	f240 6146 	movw	r1, #1606	; 0x646
 800c92e:	4812      	ldr	r0, [pc, #72]	; (800c978 <lfs_dir_compact+0x41c>)
 800c930:	f001 fc34 	bl	800e19c <iprintf>
            return LFS_ERR_NOSPC;
 800c934:	f06f 031b 	mvn.w	r3, #27
 800c938:	930b      	str	r3, [sp, #44]	; 0x2c
 800c93a:	e6cb      	b.n	800c6d4 <lfs_dir_compact+0x178>
        LFS_DEBUG("Relocating %"PRIu32" %"PRIu32" to %"PRIu32" %"PRIu32,
 800c93c:	ac18      	add	r4, sp, #96	; 0x60
 800c93e:	f854 2d10 	ldr.w	r2, [r4, #-16]!
 800c942:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	f8db 3000 	ldr.w	r3, [fp]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c950:	f240 6159 	movw	r1, #1625	; 0x659
 800c954:	4809      	ldr	r0, [pc, #36]	; (800c97c <lfs_dir_compact+0x420>)
 800c956:	f001 fc21 	bl	800e19c <iprintf>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800c95a:	465a      	mov	r2, fp
 800c95c:	4621      	mov	r1, r4
 800c95e:	4638      	mov	r0, r7
 800c960:	f000 fafe 	bl	800cf60 <lfs_fs_relocate>
 800c964:	900b      	str	r0, [sp, #44]	; 0x2c
 800c966:	e6b5      	b.n	800c6d4 <lfs_dir_compact+0x178>
 800c968:	900b      	str	r0, [sp, #44]	; 0x2c
 800c96a:	e6b3      	b.n	800c6d4 <lfs_dir_compact+0x178>
 800c96c:	7ffffc0c 	.word	0x7ffffc0c
 800c970:	800003ff 	.word	0x800003ff
 800c974:	0800f5cc 	.word	0x0800f5cc
 800c978:	0800f530 	.word	0x0800f530
 800c97c:	0800f564 	.word	0x0800f564

0800c980 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 800c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	b09c      	sub	sp, #112	; 0x70
 800c986:	4607      	mov	r7, r0
 800c988:	460d      	mov	r5, r1
 800c98a:	4616      	mov	r6, r2
 800c98c:	4698      	mov	r8, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c98e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c990:	e003      	b.n	800c99a <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c992:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c994:	2b01      	cmp	r3, #1
 800c996:	d012      	beq.n	800c9be <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c998:	6824      	ldr	r4, [r4, #0]
 800c99a:	b38c      	cbz	r4, 800ca00 <lfs_dir_commit+0x80>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c99c:	f104 0308 	add.w	r3, r4, #8
 800c9a0:	42ab      	cmp	r3, r5
 800c9a2:	d0f9      	beq.n	800c998 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800c9a4:	68a3      	ldr	r3, [r4, #8]
 800c9a6:	682a      	ldr	r2, [r5, #0]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d0f2      	beq.n	800c992 <lfs_dir_commit+0x12>
 800c9ac:	68e0      	ldr	r0, [r4, #12]
 800c9ae:	6869      	ldr	r1, [r5, #4]
 800c9b0:	4281      	cmp	r1, r0
 800c9b2:	d0ee      	beq.n	800c992 <lfs_dir_commit+0x12>
 800c9b4:	4299      	cmp	r1, r3
 800c9b6:	d0ec      	beq.n	800c992 <lfs_dir_commit+0x12>
 800c9b8:	4290      	cmp	r0, r2
 800c9ba:	d1ed      	bne.n	800c998 <lfs_dir_commit+0x18>
 800c9bc:	e7e9      	b.n	800c992 <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c9be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c9c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c9c4:	d0e8      	beq.n	800c998 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 800c9c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c9c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c9cc:	4291      	cmp	r1, r2
 800c9ce:	d9e3      	bls.n	800c998 <lfs_dir_commit+0x18>
            f->flags &= ~LFS_F_READING;
 800c9d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9d4:	6323      	str	r3, [r4, #48]	; 0x30
            f->off = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	63e3      	str	r3, [r4, #60]	; 0x3c
            lfs_alloc_ack(lfs);
 800c9da:	4638      	mov	r0, r7
 800c9dc:	f7fd fc1c 	bl	800a218 <lfs_alloc_ack>
            int err = lfs_file_relocate(lfs, f);
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	f7ff fa08 	bl	800bdf8 <lfs_file_relocate>
            if (err) {
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	f040 8163 	bne.w	800ccb6 <lfs_dir_commit+0x336>
            err = lfs_file_flush(lfs, f);
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	f7ff fc66 	bl	800c2c4 <lfs_file_flush>
            if (err) {
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0cc      	beq.n	800c998 <lfs_dir_commit+0x18>
 800c9fe:	e15a      	b.n	800ccb6 <lfs_dir_commit+0x336>
    for (int i = 0; i < attrcount; i++) {
 800ca00:	2300      	movs	r3, #0
    lfs_tag_t createtag = 0xffffffff;
 800ca02:	f04f 3aff 	mov.w	sl, #4294967295
    lfs_tag_t deletetag = 0xffffffff;
 800ca06:	46d1      	mov	r9, sl
 800ca08:	e004      	b.n	800ca14 <lfs_dir_commit+0x94>
            dir->count += 1;
 800ca0a:	8aaa      	ldrh	r2, [r5, #20]
 800ca0c:	3201      	adds	r2, #1
 800ca0e:	82aa      	strh	r2, [r5, #20]
            createtag = attrs[i].tag;
 800ca10:	4682      	mov	sl, r0
    for (int i = 0; i < attrcount; i++) {
 800ca12:	3301      	adds	r3, #1
 800ca14:	4543      	cmp	r3, r8
 800ca16:	da2e      	bge.n	800ca76 <lfs_dir_commit+0xf6>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800ca18:	00dc      	lsls	r4, r3, #3
 800ca1a:	eb06 0e04 	add.w	lr, r6, r4
 800ca1e:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 800ca22:	0d02      	lsrs	r2, r0, #20
 800ca24:	f3c2 010a 	ubfx	r1, r2, #0, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800ca28:	f240 4c01 	movw	ip, #1025	; 0x401
 800ca2c:	4561      	cmp	r1, ip
 800ca2e:	d0ec      	beq.n	800ca0a <lfs_dir_commit+0x8a>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800ca30:	f240 4cff 	movw	ip, #1279	; 0x4ff
 800ca34:	4561      	cmp	r1, ip
 800ca36:	d011      	beq.n	800ca5c <lfs_dir_commit+0xdc>
    return (tag & 0x70000000) >> 20;
 800ca38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800ca3c:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800ca40:	d1e7      	bne.n	800ca12 <lfs_dir_commit+0x92>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800ca42:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800ca4a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ca4e:	6852      	ldr	r2, [r2, #4]
 800ca50:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800ca52:	5932      	ldr	r2, [r6, r4]
 800ca54:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800ca58:	75ea      	strb	r2, [r5, #23]
 800ca5a:	e7da      	b.n	800ca12 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800ca5c:	8aaa      	ldrh	r2, [r5, #20]
 800ca5e:	b11a      	cbz	r2, 800ca68 <lfs_dir_commit+0xe8>
            dir->count -= 1;
 800ca60:	3a01      	subs	r2, #1
 800ca62:	82aa      	strh	r2, [r5, #20]
            deletetag = attrs[i].tag;
 800ca64:	4681      	mov	r9, r0
 800ca66:	e7d4      	b.n	800ca12 <lfs_dir_commit+0x92>
            LFS_ASSERT(dir->count > 0);
 800ca68:	4b9d      	ldr	r3, [pc, #628]	; (800cce0 <lfs_dir_commit+0x360>)
 800ca6a:	4a9e      	ldr	r2, [pc, #632]	; (800cce4 <lfs_dir_commit+0x364>)
 800ca6c:	f240 6184 	movw	r1, #1668	; 0x684
 800ca70:	489d      	ldr	r0, [pc, #628]	; (800cce8 <lfs_dir_commit+0x368>)
 800ca72:	f000 ffa1 	bl	800d9b8 <__assert_func>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800ca78:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca7a:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800ca7e:	d00f      	beq.n	800caa0 <lfs_dir_commit+0x120>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ca80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca82:	6829      	ldr	r1, [r5, #0]
 800ca84:	428a      	cmp	r2, r1
 800ca86:	d078      	beq.n	800cb7a <lfs_dir_commit+0x1fa>
 800ca88:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ca8a:	6868      	ldr	r0, [r5, #4]
 800ca8c:	4284      	cmp	r4, r0
 800ca8e:	d076      	beq.n	800cb7e <lfs_dir_commit+0x1fe>
 800ca90:	4282      	cmp	r2, r0
 800ca92:	d076      	beq.n	800cb82 <lfs_dir_commit+0x202>
 800ca94:	42a1      	cmp	r1, r4
 800ca96:	d001      	beq.n	800ca9c <lfs_dir_commit+0x11c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800ca98:	2200      	movs	r2, #0
 800ca9a:	e002      	b.n	800caa2 <lfs_dir_commit+0x122>
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	e000      	b.n	800caa2 <lfs_dir_commit+0x122>
 800caa0:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800caa2:	b1b2      	cbz	r2, 800cad2 <lfs_dir_commit+0x152>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 800caa4:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800ccec <lfs_dir_commit+0x36c>
 800caa8:	ea03 0909 	and.w	r9, r3, r9
        LFS_ASSERT(dir->count > 0);
 800caac:	8aab      	ldrh	r3, [r5, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d069      	beq.n	800cb86 <lfs_dir_commit+0x206>
        dir->count -= 1;
 800cab2:	3b01      	subs	r3, #1
 800cab4:	82ab      	strh	r3, [r5, #20]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800cab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab8:	4a8c      	ldr	r2, [pc, #560]	; (800ccec <lfs_dir_commit+0x36c>)
 800caba:	401a      	ands	r2, r3
 800cabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cabe:	4053      	eors	r3, r2
 800cac0:	64bb      	str	r3, [r7, #72]	; 0x48
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800cac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac6:	4053      	eors	r3, r2
 800cac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800caca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cace:	4053      	eors	r3, r2
 800cad0:	653b      	str	r3, [r7, #80]	; 0x50
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	db02      	blt.n	800cade <lfs_dir_commit+0x15e>
 800cad8:	8aab      	ldrh	r3, [r5, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d05a      	beq.n	800cb94 <lfs_dir_commit+0x214>
    if (dir->erased || dir->count >= 0xff) {
 800cade:	7dab      	ldrb	r3, [r5, #22]
 800cae0:	b913      	cbnz	r3, 800cae8 <lfs_dir_commit+0x168>
 800cae2:	8aab      	ldrh	r3, [r5, #20]
 800cae4:	2bfe      	cmp	r3, #254	; 0xfe
 800cae6:	d92c      	bls.n	800cb42 <lfs_dir_commit+0x1c2>
            .block = dir->pair[0],
 800cae8:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
 800caea:	930a      	str	r3, [sp, #40]	; 0x28
            .off = dir->off,
 800caec:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
 800caee:	920b      	str	r2, [sp, #44]	; 0x2c
            .ptag = dir->etag,
 800caf0:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 800caf2:	930c      	str	r3, [sp, #48]	; 0x30
 800caf4:	f04f 31ff 	mov.w	r1, #4294967295
 800caf8:	910d      	str	r1, [sp, #52]	; 0x34
 800cafa:	920e      	str	r2, [sp, #56]	; 0x38
            .end = lfs->cfg->block_size - 8,
 800cafc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cafe:	69c9      	ldr	r1, [r1, #28]
 800cb00:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 800cb02:	910f      	str	r1, [sp, #60]	; 0x3c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800cb04:	971a      	str	r7, [sp, #104]	; 0x68
 800cb06:	a90a      	add	r1, sp, #40	; 0x28
 800cb08:	911b      	str	r1, [sp, #108]	; 0x6c
        int err = lfs_dir_traverse(lfs,
 800cb0a:	a91a      	add	r1, sp, #104	; 0x68
 800cb0c:	9109      	str	r1, [sp, #36]	; 0x24
 800cb0e:	4978      	ldr	r1, [pc, #480]	; (800ccf0 <lfs_dir_commit+0x370>)
 800cb10:	9108      	str	r1, [sp, #32]
 800cb12:	2100      	movs	r1, #0
 800cb14:	9107      	str	r1, [sp, #28]
 800cb16:	9106      	str	r1, [sp, #24]
 800cb18:	9105      	str	r1, [sp, #20]
 800cb1a:	9104      	str	r1, [sp, #16]
 800cb1c:	9103      	str	r1, [sp, #12]
 800cb1e:	9102      	str	r1, [sp, #8]
 800cb20:	f8cd 8004 	str.w	r8, [sp, #4]
 800cb24:	9600      	str	r6, [sp, #0]
 800cb26:	4629      	mov	r1, r5
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7fd fff5 	bl	800ab18 <lfs_dir_traverse>
        if (err) {
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d048      	beq.n	800cbc6 <lfs_dir_commit+0x246>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cb34:	f110 0f1c 	cmn.w	r0, #28
 800cb38:	d003      	beq.n	800cb42 <lfs_dir_commit+0x1c2>
 800cb3a:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cb3e:	f040 80ba 	bne.w	800ccb6 <lfs_dir_commit+0x336>
    rcache->block = 0xffffffff;
 800cb42:	f04f 33ff 	mov.w	r3, #4294967295
 800cb46:	613b      	str	r3, [r7, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800cb48:	8aab      	ldrh	r3, [r5, #20]
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	9500      	str	r5, [sp, #0]
 800cb52:	4643      	mov	r3, r8
 800cb54:	4632      	mov	r2, r6
 800cb56:	4629      	mov	r1, r5
 800cb58:	4638      	mov	r0, r7
 800cb5a:	f7ff fcff 	bl	800c55c <lfs_dir_compact>
        if (err) {
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2800      	cmp	r0, #0
 800cb62:	f040 80a8 	bne.w	800ccb6 <lfs_dir_commit+0x336>
    lfs_mdir_t copy = *dir;
 800cb66:	ac12      	add	r4, sp, #72	; 0x48
 800cb68:	462e      	mov	r6, r5
 800cb6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cb72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cb76:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cb78:	e0c1      	b.n	800ccfe <lfs_dir_commit+0x37e>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	e791      	b.n	800caa2 <lfs_dir_commit+0x122>
 800cb7e:	2201      	movs	r2, #1
 800cb80:	e78f      	b.n	800caa2 <lfs_dir_commit+0x122>
 800cb82:	2201      	movs	r2, #1
 800cb84:	e78d      	b.n	800caa2 <lfs_dir_commit+0x122>
        LFS_ASSERT(dir->count > 0);
 800cb86:	4b56      	ldr	r3, [pc, #344]	; (800cce0 <lfs_dir_commit+0x360>)
 800cb88:	4a56      	ldr	r2, [pc, #344]	; (800cce4 <lfs_dir_commit+0x364>)
 800cb8a:	f240 6191 	movw	r1, #1681	; 0x691
 800cb8e:	4856      	ldr	r0, [pc, #344]	; (800cce8 <lfs_dir_commit+0x368>)
 800cb90:	f000 ff12 	bl	800d9b8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800cb94:	aa0a      	add	r2, sp, #40	; 0x28
 800cb96:	4629      	mov	r1, r5
 800cb98:	4638      	mov	r0, r7
 800cb9a:	f7fd ff87 	bl	800aaac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 800cb9e:	4603      	mov	r3, r0
 800cba0:	b118      	cbz	r0, 800cbaa <lfs_dir_commit+0x22a>
 800cba2:	f110 0f02 	cmn.w	r0, #2
 800cba6:	f040 8086 	bne.w	800ccb6 <lfs_dir_commit+0x336>
        if (err != LFS_ERR_NOENT && pdir.split) {
 800cbaa:	f113 0f02 	cmn.w	r3, #2
 800cbae:	d096      	beq.n	800cade <lfs_dir_commit+0x15e>
 800cbb0:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d092      	beq.n	800cade <lfs_dir_commit+0x15e>
            return lfs_dir_drop(lfs, &pdir, dir);
 800cbb8:	462a      	mov	r2, r5
 800cbba:	a90a      	add	r1, sp, #40	; 0x28
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f000 f8f3 	bl	800cda8 <lfs_dir_drop>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	e077      	b.n	800ccb6 <lfs_dir_commit+0x336>
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800cbc6:	f107 0448 	add.w	r4, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	dc04      	bgt.n	800cbd8 <lfs_dir_commit+0x258>
        if (((uint32_t*)a)[i] != 0) {
 800cbce:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800cbd2:	b9d2      	cbnz	r2, 800cc0a <lfs_dir_commit+0x28a>
    for (int i = 0; i < 3; i++) {
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	e7f8      	b.n	800cbca <lfs_dir_commit+0x24a>
    return true;
 800cbd8:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800cbda:	b9c3      	cbnz	r3, 800cc0e <lfs_dir_commit+0x28e>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800cbdc:	4622      	mov	r2, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	f7fe f98d 	bl	800af00 <lfs_dir_getgstate>
            if (err) {
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d164      	bne.n	800ccb6 <lfs_dir_commit+0x336>
            err = lfs_dir_commitattr(lfs, &commit,
 800cbec:	4623      	mov	r3, r4
 800cbee:	4a41      	ldr	r2, [pc, #260]	; (800ccf4 <lfs_dir_commit+0x374>)
 800cbf0:	a90a      	add	r1, sp, #40	; 0x28
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7fe fb2a 	bl	800b24c <lfs_dir_commitattr>
            if (err) {
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	b140      	cbz	r0, 800cc0e <lfs_dir_commit+0x28e>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cbfc:	f110 0f1c 	cmn.w	r0, #28
 800cc00:	d09f      	beq.n	800cb42 <lfs_dir_commit+0x1c2>
 800cc02:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cc06:	d156      	bne.n	800ccb6 <lfs_dir_commit+0x336>
 800cc08:	e79b      	b.n	800cb42 <lfs_dir_commit+0x1c2>
            return false;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e7e5      	b.n	800cbda <lfs_dir_commit+0x25a>
        err = lfs_dir_commitcrc(lfs, &commit);
 800cc0e:	a90a      	add	r1, sp, #40	; 0x28
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7fe fb92 	bl	800b33a <lfs_dir_commitcrc>
        if (err) {
 800cc16:	4603      	mov	r3, r0
 800cc18:	b130      	cbz	r0, 800cc28 <lfs_dir_commit+0x2a8>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800cc1a:	f110 0f1c 	cmn.w	r0, #28
 800cc1e:	d090      	beq.n	800cb42 <lfs_dir_commit+0x1c2>
 800cc20:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800cc24:	d147      	bne.n	800ccb6 <lfs_dir_commit+0x336>
 800cc26:	e78c      	b.n	800cb42 <lfs_dir_commit+0x1c2>
        dir->off = commit.off;
 800cc28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc2a:	60ea      	str	r2, [r5, #12]
        dir->etag = commit.ptag;
 800cc2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2e:	612a      	str	r2, [r5, #16]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cc30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800cc32:	0d11      	lsrs	r1, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cc34:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 800cc38:	d00e      	beq.n	800cc58 <lfs_dir_commit+0x2d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cc3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cc3c:	6829      	ldr	r1, [r5, #0]
 800cc3e:	4288      	cmp	r0, r1
 800cc40:	d009      	beq.n	800cc56 <lfs_dir_commit+0x2d6>
 800cc42:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800cc44:	686e      	ldr	r6, [r5, #4]
 800cc46:	42b4      	cmp	r4, r6
 800cc48:	d01b      	beq.n	800cc82 <lfs_dir_commit+0x302>
 800cc4a:	42b0      	cmp	r0, r6
 800cc4c:	d01b      	beq.n	800cc86 <lfs_dir_commit+0x306>
 800cc4e:	42a1      	cmp	r1, r4
 800cc50:	d102      	bne.n	800cc58 <lfs_dir_commit+0x2d8>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cc52:	2301      	movs	r3, #1
 800cc54:	e000      	b.n	800cc58 <lfs_dir_commit+0x2d8>
 800cc56:	2301      	movs	r3, #1
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 800cc58:	f013 0f01 	tst.w	r3, #1
 800cc5c:	d005      	beq.n	800cc6a <lfs_dir_commit+0x2ea>
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 800cc5e:	4b26      	ldr	r3, [pc, #152]	; (800ccf8 <lfs_dir_commit+0x378>)
 800cc60:	4013      	ands	r3, r2
 800cc62:	63fb      	str	r3, [r7, #60]	; 0x3c
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 800cc64:	2300      	movs	r3, #0
 800cc66:	643b      	str	r3, [r7, #64]	; 0x40
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 800cc68:	647b      	str	r3, [r7, #68]	; 0x44
        lfs->gstate = lfs->gpending;
 800cc6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cc72:	ca07      	ldmia	r2, {r0, r1, r2}
 800cc74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 800cc78:	2200      	movs	r2, #0
 800cc7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cc7e:	653a      	str	r2, [r7, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
 800cc80:	e771      	b.n	800cb66 <lfs_dir_commit+0x1e6>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e7e8      	b.n	800cc58 <lfs_dir_commit+0x2d8>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e7e6      	b.n	800cc58 <lfs_dir_commit+0x2d8>
                d->m.pair[0] = 0xffffffff;
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8e:	60a3      	str	r3, [r4, #8]
                d->m.pair[1] = 0xffffffff;
 800cc90:	60e3      	str	r3, [r4, #12]
            while (d->id >= d->m.count && d->m.split) {
 800cc92:	88a3      	ldrh	r3, [r4, #4]
 800cc94:	8ba2      	ldrh	r2, [r4, #28]
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d330      	bcc.n	800ccfc <lfs_dir_commit+0x37c>
 800cc9a:	7fe1      	ldrb	r1, [r4, #31]
 800cc9c:	b371      	cbz	r1, 800ccfc <lfs_dir_commit+0x37c>
                d->id -= d->m.count;
 800cc9e:	1a9b      	subs	r3, r3, r2
 800cca0:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800cca2:	f104 0220 	add.w	r2, r4, #32
 800cca6:	f104 0108 	add.w	r1, r4, #8
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7fd fef0 	bl	800aa90 <lfs_dir_fetch>
                if (err) {
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d0ed      	beq.n	800cc92 <lfs_dir_commit+0x312>
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	b01c      	add	sp, #112	; 0x70
 800ccba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800ccbe:	f104 0208 	add.w	r2, r4, #8
 800ccc2:	42aa      	cmp	r2, r5
 800ccc4:	d0e5      	beq.n	800cc92 <lfs_dir_commit+0x312>
    return (tag & 0x000ffc00) >> 10;
 800ccc6:	f3ca 2289 	ubfx	r2, sl, #10, #10
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d3e1      	bcc.n	800cc92 <lfs_dir_commit+0x312>
                d->id += 1;
 800ccce:	3301      	adds	r3, #1
 800ccd0:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800ccd2:	79a3      	ldrb	r3, [r4, #6]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d1dc      	bne.n	800cc92 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos += 1;
 800ccd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccda:	3301      	adds	r3, #1
 800ccdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccde:	e7d8      	b.n	800cc92 <lfs_dir_commit+0x312>
 800cce0:	0800f4f0 	.word	0x0800f4f0
 800cce4:	0800f378 	.word	0x0800f378
 800cce8:	0800f3e8 	.word	0x0800f3e8
 800ccec:	7ffffc00 	.word	0x7ffffc00
 800ccf0:	0800b30d 	.word	0x0800b30d
 800ccf4:	7ffffc0c 	.word	0x7ffffc0c
 800ccf8:	800003ff 	.word	0x800003ff
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800ccfc:	6824      	ldr	r4, [r4, #0]
 800ccfe:	b32c      	cbz	r4, 800cd4c <lfs_dir_commit+0x3cc>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cd00:	68a3      	ldr	r3, [r4, #8]
 800cd02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d007      	beq.n	800cd18 <lfs_dir_commit+0x398>
 800cd08:	68e0      	ldr	r0, [r4, #12]
 800cd0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd0c:	4288      	cmp	r0, r1
 800cd0e:	d003      	beq.n	800cd18 <lfs_dir_commit+0x398>
 800cd10:	428b      	cmp	r3, r1
 800cd12:	d001      	beq.n	800cd18 <lfs_dir_commit+0x398>
 800cd14:	4282      	cmp	r2, r0
 800cd16:	d1f1      	bne.n	800ccfc <lfs_dir_commit+0x37c>
            d->m = *dir;
 800cd18:	f104 0608 	add.w	r6, r4, #8
 800cd1c:	46ac      	mov	ip, r5
 800cd1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cd24:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800cd28:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 800cd2c:	88a3      	ldrh	r3, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 800cd2e:	f3c9 2289 	ubfx	r2, r9, #10, #10
            if (d->id == lfs_tag_id(deletetag)) {
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d0a9      	beq.n	800cc8a <lfs_dir_commit+0x30a>
            } else if (d->id > lfs_tag_id(deletetag)) {
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d9c1      	bls.n	800ccbe <lfs_dir_commit+0x33e>
                d->id -= 1;
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	80a3      	strh	r3, [r4, #4]
                if (d->type == LFS_TYPE_DIR) {
 800cd3e:	79a3      	ldrb	r3, [r4, #6]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d1a6      	bne.n	800cc92 <lfs_dir_commit+0x312>
                    ((lfs_dir_t*)d)->pos -= 1;
 800cd44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd46:	3b01      	subs	r3, #1
 800cd48:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd4a:	e7a2      	b.n	800cc92 <lfs_dir_commit+0x312>
    return 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e7b2      	b.n	800ccb6 <lfs_dir_commit+0x336>

0800cd50 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 800cd50:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 800cd52:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gstate)) {
 800cd54:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800cd58:	d102      	bne.n	800cd60 <lfs_fs_demove+0x10>
        return 0;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 800cd60:	b530      	push	{r4, r5, lr}
 800cd62:	b08b      	sub	sp, #44	; 0x2c
 800cd64:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 800cd66:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move %"PRIu32" %"PRIu32" %"PRIu16,
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	f855 2f34 	ldr.w	r2, [r5, #52]!
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd74:	f640 6173 	movw	r1, #3699	; 0xe73
 800cd78:	480a      	ldr	r0, [pc, #40]	; (800cda4 <lfs_fs_demove+0x54>)
 800cd7a:	f001 fa0f 	bl	800e19c <iprintf>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gstate.pair);
 800cd7e:	462a      	mov	r2, r5
 800cd80:	a902      	add	r1, sp, #8
 800cd82:	4620      	mov	r0, r4
 800cd84:	f7fd fe84 	bl	800aa90 <lfs_dir_fetch>
    if (err) {
 800cd88:	4603      	mov	r3, r0
 800cd8a:	b110      	cbz	r0, 800cd92 <lfs_fs_demove+0x42>
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	b00b      	add	sp, #44	; 0x2c
 800cd90:	bd30      	pop	{r4, r5, pc}
    err = lfs_dir_commit(lfs, &movedir, NULL, 0);
 800cd92:	2300      	movs	r3, #0
 800cd94:	461a      	mov	r2, r3
 800cd96:	a902      	add	r1, sp, #8
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f7ff fdf1 	bl	800c980 <lfs_dir_commit>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	e7f4      	b.n	800cd8c <lfs_fs_demove+0x3c>
 800cda2:	bf00      	nop
 800cda4:	0800f5ec 	.word	0x0800f5ec

0800cda8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	4605      	mov	r5, r0
 800cdae:	460e      	mov	r6, r1
 800cdb0:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800cdb2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	f7fe f8a2 	bl	800af00 <lfs_dir_getgstate>
    if (err) {
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	b110      	cbz	r0, 800cdc6 <lfs_dir_drop+0x1e>
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	b002      	add	sp, #8
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 800cdc6:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800cdca:	7de3      	ldrb	r3, [r4, #23]
 800cdcc:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800cdd0:	4b06      	ldr	r3, [pc, #24]	; (800cdec <lfs_dir_drop+0x44>)
 800cdd2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	9101      	str	r1, [sp, #4]
 800cdda:	2301      	movs	r3, #1
 800cddc:	466a      	mov	r2, sp
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7ff fdcd 	bl	800c980 <lfs_dir_commit>
 800cde6:	4603      	mov	r3, r0
 800cde8:	e7ea      	b.n	800cdc0 <lfs_dir_drop+0x18>
 800cdea:	bf00      	nop
 800cdec:	000ffc08 	.word	0x000ffc08

0800cdf0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
 800cdf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
 800cdf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 8096 	beq.w	800cf2c <lfs_fs_deorphan+0x13c>
 800ce00:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true};
 800ce02:	2220      	movs	r2, #32
 800ce04:	2100      	movs	r1, #0
 800ce06:	a814      	add	r0, sp, #80	; 0x50
 800ce08:	f000 fe54 	bl	800dab4 <memset>
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
    lfs_mdir_t dir = {.tail = {0, 1}};
 800ce12:	2300      	movs	r3, #0
 800ce14:	930c      	str	r3, [sp, #48]	; 0x30
 800ce16:	930d      	str	r3, [sp, #52]	; 0x34
 800ce18:	930e      	str	r3, [sp, #56]	; 0x38
 800ce1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce1c:	9310      	str	r3, [sp, #64]	; 0x40
 800ce1e:	9311      	str	r3, [sp, #68]	; 0x44
 800ce20:	9312      	str	r3, [sp, #72]	; 0x48
 800ce22:	9213      	str	r2, [sp, #76]	; 0x4c
    while (!lfs_pair_isnull(dir.tail)) {
 800ce24:	e078      	b.n	800cf18 <lfs_fs_deorphan+0x128>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800ce26:	aa04      	add	r2, sp, #16
 800ce28:	a91a      	add	r1, sp, #104	; 0x68
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fd fdf2 	bl	800aa14 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800ce30:	1e03      	subs	r3, r0, #0
 800ce32:	db28      	blt.n	800ce86 <lfs_fs_deorphan+0x96>
            if (tag == LFS_ERR_NOENT) {
 800ce34:	f113 0f02 	cmn.w	r3, #2
 800ce38:	d02a      	beq.n	800ce90 <lfs_fs_deorphan+0xa0>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800ce3a:	aa02      	add	r2, sp, #8
 800ce3c:	9200      	str	r2, [sp, #0]
 800ce3e:	4a3d      	ldr	r2, [pc, #244]	; (800cf34 <lfs_fs_deorphan+0x144>)
 800ce40:	a904      	add	r1, sp, #16
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7fe f84e 	bl	800aee4 <lfs_dir_get>
            if (res < 0) {
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	db4b      	blt.n	800cee4 <lfs_fs_deorphan+0xf4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ce4c:	9a02      	ldr	r2, [sp, #8]
 800ce4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d03c      	beq.n	800cece <lfs_fs_deorphan+0xde>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ce54:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ce56:	428a      	cmp	r2, r1
 800ce58:	d03f      	beq.n	800ceda <lfs_fs_deorphan+0xea>
            if (!lfs_pair_sync(pair, pdir.tail)) {
 800ce5a:	f014 0f01 	tst.w	r4, #1
 800ce5e:	d153      	bne.n	800cf08 <lfs_fs_deorphan+0x118>
                LFS_DEBUG("Fixing half-orphan %"PRIu32" %"PRIu32,
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	f640 61b6 	movw	r1, #3766	; 0xeb6
 800ce66:	4834      	ldr	r0, [pc, #208]	; (800cf38 <lfs_fs_deorphan+0x148>)
 800ce68:	f001 f998 	bl	800e19c <iprintf>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800ce6c:	4b33      	ldr	r3, [pc, #204]	; (800cf3c <lfs_fs_deorphan+0x14c>)
 800ce6e:	931c      	str	r3, [sp, #112]	; 0x70
 800ce70:	ab02      	add	r3, sp, #8
 800ce72:	931d      	str	r3, [sp, #116]	; 0x74
 800ce74:	2301      	movs	r3, #1
 800ce76:	aa1c      	add	r2, sp, #112	; 0x70
 800ce78:	a914      	add	r1, sp, #80	; 0x50
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f7ff fd80 	bl	800c980 <lfs_dir_commit>
                if (err) {
 800ce80:	4604      	mov	r4, r0
 800ce82:	b1a0      	cbz	r0, 800ceae <lfs_fs_deorphan+0xbe>
 800ce84:	e053      	b.n	800cf2e <lfs_fs_deorphan+0x13e>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800ce86:	f113 0f02 	cmn.w	r3, #2
 800ce8a:	d0d3      	beq.n	800ce34 <lfs_fs_deorphan+0x44>
                return tag;
 800ce8c:	461c      	mov	r4, r3
 800ce8e:	e04e      	b.n	800cf2e <lfs_fs_deorphan+0x13e>
                LFS_DEBUG("Fixing orphan %"PRIu32" %"PRIu32,
 800ce90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce94:	f640 61a1 	movw	r1, #3745	; 0xea1
 800ce98:	4829      	ldr	r0, [pc, #164]	; (800cf40 <lfs_fs_deorphan+0x150>)
 800ce9a:	f001 f97f 	bl	800e19c <iprintf>
                err = lfs_dir_drop(lfs, &pdir, &dir);
 800ce9e:	aa0c      	add	r2, sp, #48	; 0x30
 800cea0:	a914      	add	r1, sp, #80	; 0x50
 800cea2:	4630      	mov	r0, r6
 800cea4:	f7ff ff80 	bl	800cda8 <lfs_dir_drop>
                if (err) {
 800cea8:	4604      	mov	r4, r0
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d13f      	bne.n	800cf2e <lfs_fs_deorphan+0x13e>
    return lfs_tag_size(a->tag);
 800ceae:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800ceb2:	4249      	negs	r1, r1
 800ceb4:	b249      	sxtb	r1, r1
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f7fd f9f0 	bl	800a29c <lfs_fs_preporphans>
    lfs->gstate = lfs->gpending;
 800cebc:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800cec0:	363c      	adds	r6, #60	; 0x3c
 800cec2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return 0;
 800ceca:	2400      	movs	r4, #0
 800cecc:	e02f      	b.n	800cf2e <lfs_fs_deorphan+0x13e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cece:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ced0:	9903      	ldr	r1, [sp, #12]
 800ced2:	4288      	cmp	r0, r1
 800ced4:	d1be      	bne.n	800ce54 <lfs_fs_deorphan+0x64>
 800ced6:	2401      	movs	r4, #1
 800ced8:	e7bf      	b.n	800ce5a <lfs_fs_deorphan+0x6a>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ceda:	9903      	ldr	r1, [sp, #12]
 800cedc:	428b      	cmp	r3, r1
 800cede:	d1bc      	bne.n	800ce5a <lfs_fs_deorphan+0x6a>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800cee0:	2401      	movs	r4, #1
 800cee2:	e7ba      	b.n	800ce5a <lfs_fs_deorphan+0x6a>
                return res;
 800cee4:	4604      	mov	r4, r0
 800cee6:	e022      	b.n	800cf2e <lfs_fs_deorphan+0x13e>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e000      	b.n	800ceee <lfs_fs_deorphan+0xfe>
 800ceec:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(dir.tail)) {
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1dd      	bne.n	800ceae <lfs_fs_deorphan+0xbe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800cef2:	aa12      	add	r2, sp, #72	; 0x48
 800cef4:	a90c      	add	r1, sp, #48	; 0x30
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7fd fdca 	bl	800aa90 <lfs_dir_fetch>
        if (err) {
 800cefc:	4604      	mov	r4, r0
 800cefe:	b9b0      	cbnz	r0, 800cf2e <lfs_fs_deorphan+0x13e>
        if (!pdir.split) {
 800cf00:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d08e      	beq.n	800ce26 <lfs_fs_deorphan+0x36>
        memcpy(&pdir, &dir, sizeof(pdir));
 800cf08:	ac14      	add	r4, sp, #80	; 0x50
 800cf0a:	ad0c      	add	r5, sp, #48	; 0x30
 800cf0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cf14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800cf18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1e:	d0e5      	beq.n	800ceec <lfs_fs_deorphan+0xfc>
 800cf20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf26:	d0df      	beq.n	800cee8 <lfs_fs_deorphan+0xf8>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e7e0      	b.n	800ceee <lfs_fs_deorphan+0xfe>
        return 0;
 800cf2c:	2400      	movs	r4, #0
}
 800cf2e:	4620      	mov	r0, r4
 800cf30:	b01e      	add	sp, #120	; 0x78
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	7ffffc00 	.word	0x7ffffc00
 800cf38:	0800f63c 	.word	0x0800f63c
 800cf3c:	600ffc08 	.word	0x600ffc08
 800cf40:	0800f614 	.word	0x0800f614

0800cf44 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800cf44:	b510      	push	{r4, lr}
 800cf46:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
 800cf48:	f7ff ff02 	bl	800cd50 <lfs_fs_demove>
    if (err) {
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	b108      	cbz	r0, 800cf54 <lfs_fs_forceconsistency+0x10>
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7ff ff4b 	bl	800cdf0 <lfs_fs_deorphan>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	e7f8      	b.n	800cf50 <lfs_fs_forceconsistency+0xc>
	...

0800cf60 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	b08d      	sub	sp, #52	; 0x34
 800cf64:	4606      	mov	r6, r0
 800cf66:	460d      	mov	r5, r1
 800cf68:	4614      	mov	r4, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cf6a:	680b      	ldr	r3, [r1, #0]
 800cf6c:	6a02      	ldr	r2, [r0, #32]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d007      	beq.n	800cf82 <lfs_fs_relocate+0x22>
 800cf72:	6848      	ldr	r0, [r1, #4]
 800cf74:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800cf76:	4281      	cmp	r1, r0
 800cf78:	d003      	beq.n	800cf82 <lfs_fs_relocate+0x22>
 800cf7a:	4299      	cmp	r1, r3
 800cf7c:	d001      	beq.n	800cf82 <lfs_fs_relocate+0x22>
 800cf7e:	4290      	cmp	r0, r2
 800cf80:	d10a      	bne.n	800cf98 <lfs_fs_relocate+0x38>
        LFS_DEBUG("Relocating root %"PRIu32" %"PRIu32,
 800cf82:	6863      	ldr	r3, [r4, #4]
 800cf84:	6822      	ldr	r2, [r4, #0]
 800cf86:	f640 6123 	movw	r1, #3619	; 0xe23
 800cf8a:	4830      	ldr	r0, [pc, #192]	; (800d04c <lfs_fs_relocate+0xec>)
 800cf8c:	f001 f906 	bl	800e19c <iprintf>
        lfs->root[0] = newpair[0];
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	6233      	str	r3, [r6, #32]
        lfs->root[1] = newpair[1];
 800cf94:	6863      	ldr	r3, [r4, #4]
 800cf96:	6273      	str	r3, [r6, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cf98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800cf9a:	e004      	b.n	800cfa6 <lfs_fs_relocate+0x46>
            d->m.pair[0] = newpair[0];
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800cfa0:	6862      	ldr	r2, [r4, #4]
 800cfa2:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	b163      	cbz	r3, 800cfc2 <lfs_fs_relocate+0x62>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800cfa8:	682a      	ldr	r2, [r5, #0]
 800cfaa:	6899      	ldr	r1, [r3, #8]
 800cfac:	428a      	cmp	r2, r1
 800cfae:	d0f5      	beq.n	800cf9c <lfs_fs_relocate+0x3c>
 800cfb0:	686f      	ldr	r7, [r5, #4]
 800cfb2:	68d8      	ldr	r0, [r3, #12]
 800cfb4:	4287      	cmp	r7, r0
 800cfb6:	d0f1      	beq.n	800cf9c <lfs_fs_relocate+0x3c>
 800cfb8:	4282      	cmp	r2, r0
 800cfba:	d0ef      	beq.n	800cf9c <lfs_fs_relocate+0x3c>
 800cfbc:	42b9      	cmp	r1, r7
 800cfbe:	d1f1      	bne.n	800cfa4 <lfs_fs_relocate+0x44>
 800cfc0:	e7ec      	b.n	800cf9c <lfs_fs_relocate+0x3c>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800cfc2:	466a      	mov	r2, sp
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7fd fd24 	bl	800aa14 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cfcc:	1e07      	subs	r7, r0, #0
 800cfce:	db13      	blt.n	800cff8 <lfs_fs_relocate+0x98>
    if (tag != LFS_ERR_NOENT) {
 800cfd0:	f117 0f02 	cmn.w	r7, #2
 800cfd4:	d019      	beq.n	800d00a <lfs_fs_relocate+0xaa>
        lfs_fs_preporphans(lfs, +1);
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7fd f95f 	bl	800a29c <lfs_fs_preporphans>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 800cfde:	9708      	str	r7, [sp, #32]
 800cfe0:	9409      	str	r4, [sp, #36]	; 0x24
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	aa08      	add	r2, sp, #32
 800cfe6:	4669      	mov	r1, sp
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f7ff fcc9 	bl	800c980 <lfs_dir_commit>
        if (err) {
 800cfee:	4607      	mov	r7, r0
 800cff0:	b130      	cbz	r0, 800d000 <lfs_fs_relocate+0xa0>
}
 800cff2:	4638      	mov	r0, r7
 800cff4:	b00d      	add	sp, #52	; 0x34
 800cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800cff8:	f117 0f02 	cmn.w	r7, #2
 800cffc:	d1f9      	bne.n	800cff2 <lfs_fs_relocate+0x92>
 800cffe:	e7e7      	b.n	800cfd0 <lfs_fs_relocate+0x70>
        lfs_fs_preporphans(lfs, -1);
 800d000:	f04f 31ff 	mov.w	r1, #4294967295
 800d004:	4630      	mov	r0, r6
 800d006:	f7fd f949 	bl	800a29c <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800d00a:	466a      	mov	r2, sp
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7fd fd4c 	bl	800aaac <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
 800d014:	4607      	mov	r7, r0
 800d016:	b110      	cbz	r0, 800d01e <lfs_fs_relocate+0xbe>
 800d018:	f110 0f02 	cmn.w	r0, #2
 800d01c:	d1e9      	bne.n	800cff2 <lfs_fs_relocate+0x92>
    if (err != LFS_ERR_NOENT) {
 800d01e:	f117 0f02 	cmn.w	r7, #2
 800d022:	d010      	beq.n	800d046 <lfs_fs_relocate+0xe6>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800d024:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d028:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <lfs_fs_relocate+0xf0>)
 800d02e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d032:	930a      	str	r3, [sp, #40]	; 0x28
 800d034:	940b      	str	r4, [sp, #44]	; 0x2c
 800d036:	2301      	movs	r3, #1
 800d038:	aa0a      	add	r2, sp, #40	; 0x28
 800d03a:	4669      	mov	r1, sp
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff fc9f 	bl	800c980 <lfs_dir_commit>
 800d042:	4607      	mov	r7, r0
 800d044:	e7d5      	b.n	800cff2 <lfs_fs_relocate+0x92>
    return 0;
 800d046:	2700      	movs	r7, #0
 800d048:	e7d3      	b.n	800cff2 <lfs_fs_relocate+0x92>
 800d04a:	bf00      	nop
 800d04c:	0800f668 	.word	0x0800f668
 800d050:	000ffc08 	.word	0x000ffc08

0800d054 <lfs_file_sync>:
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
 800d054:	b530      	push	{r4, r5, lr}
 800d056:	b087      	sub	sp, #28
 800d058:	4605      	mov	r5, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	e039      	b.n	800d0d2 <lfs_file_sync+0x7e>
            file->flags |= LFS_F_ERRED;
 800d05e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d060:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d064:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800d066:	e05b      	b.n	800d120 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800d068:	2101      	movs	r1, #1
 800d06a:	e000      	b.n	800d06e <lfs_file_sync+0x1a>
 800d06c:	2101      	movs	r1, #1
                !(file->flags & LFS_F_ERRED) &&
 800d06e:	f011 0f01 	tst.w	r1, #1
 800d072:	d155      	bne.n	800d120 <lfs_file_sync+0xcc>
            if (file->flags & LFS_F_INLINE) {
 800d074:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800d078:	d042      	beq.n	800d100 <lfs_file_sync+0xac>
                buffer = file->cache.buffer;
 800d07a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                size = file->ctz.size;
 800d07c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                type = LFS_TYPE_INLINESTRUCT;
 800d07e:	f240 2201 	movw	r2, #513	; 0x201
            err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800d082:	88a3      	ldrh	r3, [r4, #4]
 800d084:	029b      	lsls	r3, r3, #10
 800d086:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 800d08a:	4302      	orrs	r2, r0
 800d08c:	9202      	str	r2, [sp, #8]
 800d08e:	9103      	str	r1, [sp, #12]
 800d090:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d092:	6891      	ldr	r1, [r2, #8]
 800d094:	430b      	orrs	r3, r1
 800d096:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	6853      	ldr	r3, [r2, #4]
 800d09e:	9305      	str	r3, [sp, #20]
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	aa02      	add	r2, sp, #8
 800d0a4:	f104 0108 	add.w	r1, r4, #8
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7ff fc69 	bl	800c980 <lfs_dir_commit>
            if (err) {
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d038      	beq.n	800d126 <lfs_file_sync+0xd2>
                if (err == LFS_ERR_NOSPC && (file->flags & LFS_F_INLINE)) {
 800d0b4:	f110 0f1c 	cmn.w	r0, #28
 800d0b8:	d12e      	bne.n	800d118 <lfs_file_sync+0xc4>
 800d0ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d0bc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800d0c0:	d02a      	beq.n	800d118 <lfs_file_sync+0xc4>
        file->off = file->pos;
 800d0c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0c4:	63e3      	str	r3, [r4, #60]	; 0x3c
        err = lfs_file_relocate(lfs, file);
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f7fe fe95 	bl	800bdf8 <lfs_file_relocate>
        if (err) {
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	bb70      	cbnz	r0, 800d130 <lfs_file_sync+0xdc>
        int err = lfs_file_flush(lfs, file);
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f7ff f8f5 	bl	800c2c4 <lfs_file_flush>
        if (err) {
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d1be      	bne.n	800d05e <lfs_file_sync+0xa>
        if ((file->flags & LFS_F_DIRTY) &&
 800d0e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d0e2:	f402 2110 	and.w	r1, r2, #589824	; 0x90000
 800d0e6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800d0ea:	d119      	bne.n	800d120 <lfs_file_sync+0xcc>
    return pair[0] == 0xffffffff || pair[1] == 0xffffffff;
 800d0ec:	68a1      	ldr	r1, [r4, #8]
 800d0ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d0f2:	d0bb      	beq.n	800d06c <lfs_file_sync+0x18>
 800d0f4:	68e1      	ldr	r1, [r4, #12]
 800d0f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d0fa:	d0b5      	beq.n	800d068 <lfs_file_sync+0x14>
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	e7b6      	b.n	800d06e <lfs_file_sync+0x1a>
                ctz = file->ctz;
 800d100:	466b      	mov	r3, sp
 800d102:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800d106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d10a:	e883 0003 	stmia.w	r3, {r0, r1}
                size = sizeof(ctz);
 800d10e:	2008      	movs	r0, #8
                buffer = &ctz;
 800d110:	4619      	mov	r1, r3
                type = LFS_TYPE_CTZSTRUCT;
 800d112:	f240 2202 	movw	r2, #514	; 0x202
 800d116:	e7b4      	b.n	800d082 <lfs_file_sync+0x2e>
                file->flags |= LFS_F_ERRED;
 800d118:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d11a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d11e:	6322      	str	r2, [r4, #48]	; 0x30
}
 800d120:	4618      	mov	r0, r3
 800d122:	b007      	add	sp, #28
 800d124:	bd30      	pop	{r4, r5, pc}
            file->flags &= ~LFS_F_DIRTY;
 800d126:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d12c:	6322      	str	r2, [r4, #48]	; 0x30
 800d12e:	e7f7      	b.n	800d120 <lfs_file_sync+0xcc>
            file->flags |= LFS_F_ERRED;
 800d130:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d132:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800d136:	6322      	str	r2, [r4, #48]	; 0x30
            return err;
 800d138:	e7f2      	b.n	800d120 <lfs_file_sync+0xcc>

0800d13a <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800d13a:	b570      	push	{r4, r5, r6, lr}
 800d13c:	4604      	mov	r4, r0
 800d13e:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
 800d140:	f7ff ff88 	bl	800d054 <lfs_file_sync>
 800d144:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d146:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d14a:	6803      	ldr	r3, [r0, #0]
 800d14c:	b12b      	cbz	r3, 800d15a <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
 800d14e:	42ab      	cmp	r3, r5
 800d150:	d001      	beq.n	800d156 <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800d152:	4618      	mov	r0, r3
 800d154:	e7f9      	b.n	800d14a <lfs_file_close+0x10>
            *p = (*p)->next;
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6003      	str	r3, [r0, #0]
    if (!file->cfg->buffer) {
 800d15a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	b10b      	cbz	r3, 800d164 <lfs_file_close+0x2a>
}
 800d160:	4630      	mov	r0, r6
 800d162:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 800d164:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800d166:	f000 fc83 	bl	800da70 <free>
    return err;
 800d16a:	e7f9      	b.n	800d160 <lfs_file_close+0x26>

0800d16c <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
 800d16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d170:	b08a      	sub	sp, #40	; 0x28
 800d172:	4605      	mov	r5, r0
 800d174:	460c      	mov	r4, r1
 800d176:	9203      	str	r2, [sp, #12]
 800d178:	461f      	mov	r7, r3
    if ((flags & 3) != LFS_O_RDONLY) {
 800d17a:	f003 0303 	and.w	r3, r3, #3
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d005      	beq.n	800d18e <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
 800d182:	f7ff fedf 	bl	800cf44 <lfs_fs_forceconsistency>
        if (err) {
 800d186:	4606      	mov	r6, r0
 800d188:	2800      	cmp	r0, #0
 800d18a:	f040 8109 	bne.w	800d3a0 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
 800d18e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d190:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags;
 800d192:	6327      	str	r7, [r4, #48]	; 0x30
    file->pos = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	6363      	str	r3, [r4, #52]	; 0x34
    file->cache.buffer = NULL;
 800d198:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800d19a:	f104 0808 	add.w	r8, r4, #8
 800d19e:	1d23      	adds	r3, r4, #4
 800d1a0:	aa03      	add	r2, sp, #12
 800d1a2:	4641      	mov	r1, r8
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f7fe f969 	bl	800b47c <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800d1aa:	1e06      	subs	r6, r0, #0
 800d1ac:	db12      	blt.n	800d1d4 <lfs_file_opencfg+0x68>
    file->type = LFS_TYPE_REG;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
 800d1b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d1b4:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
 800d1b6:	62ac      	str	r4, [r5, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
 800d1b8:	f116 0f02 	cmn.w	r6, #2
 800d1bc:	d014      	beq.n	800d1e8 <lfs_file_opencfg+0x7c>
    } else if (flags & LFS_O_EXCL) {
 800d1be:	f417 7f00 	tst.w	r7, #512	; 0x200
 800d1c2:	f040 80e3 	bne.w	800d38c <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
 800d1c6:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800d1ca:	2e01      	cmp	r6, #1
 800d1cc:	d039      	beq.n	800d242 <lfs_file_opencfg+0xd6>
        err = LFS_ERR_ISDIR;
 800d1ce:	f06f 0614 	mvn.w	r6, #20
 800d1d2:	e0dd      	b.n	800d390 <lfs_file_opencfg+0x224>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800d1d4:	f116 0f02 	cmn.w	r6, #2
 800d1d8:	f040 80da 	bne.w	800d390 <lfs_file_opencfg+0x224>
 800d1dc:	88a2      	ldrh	r2, [r4, #4]
 800d1de:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d1e3      	bne.n	800d1ae <lfs_file_opencfg+0x42>
 800d1e6:	e0d3      	b.n	800d390 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
 800d1e8:	f417 7f80 	tst.w	r7, #256	; 0x100
 800d1ec:	f000 80c8 	beq.w	800d380 <lfs_file_opencfg+0x214>
        lfs_size_t nlen = strlen(path);
 800d1f0:	9e03      	ldr	r6, [sp, #12]
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7f3 f81c 	bl	8000230 <strlen>
        if (nlen > lfs->name_max) {
 800d1f8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d1fa:	4283      	cmp	r3, r0
 800d1fc:	d202      	bcs.n	800d204 <lfs_file_opencfg+0x98>
            err = LFS_ERR_NAMETOOLONG;
 800d1fe:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800d202:	e0c5      	b.n	800d390 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800d204:	88a3      	ldrh	r3, [r4, #4]
 800d206:	029b      	lsls	r3, r3, #10
 800d208:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d20c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d210:	9204      	str	r2, [sp, #16]
 800d212:	2200      	movs	r2, #0
 800d214:	9205      	str	r2, [sp, #20]
 800d216:	4318      	orrs	r0, r3
 800d218:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800d21c:	9006      	str	r0, [sp, #24]
 800d21e:	9607      	str	r6, [sp, #28]
 800d220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d228:	9308      	str	r3, [sp, #32]
 800d22a:	9209      	str	r2, [sp, #36]	; 0x24
 800d22c:	2303      	movs	r3, #3
 800d22e:	aa04      	add	r2, sp, #16
 800d230:	4641      	mov	r1, r8
 800d232:	4628      	mov	r0, r5
 800d234:	f7ff fba4 	bl	800c980 <lfs_dir_commit>
        if (err) {
 800d238:	2800      	cmp	r0, #0
 800d23a:	f040 80a4 	bne.w	800d386 <lfs_file_opencfg+0x21a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800d23e:	4e5c      	ldr	r6, [pc, #368]	; (800d3b0 <lfs_file_opencfg+0x244>)
 800d240:	e00c      	b.n	800d25c <lfs_file_opencfg+0xf0>
    } else if (flags & LFS_O_TRUNC) {
 800d242:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800d246:	d00b      	beq.n	800d260 <lfs_file_opencfg+0xf4>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800d248:	88a6      	ldrh	r6, [r4, #4]
 800d24a:	02b6      	lsls	r6, r6, #10
 800d24c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800d250:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 800d254:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d25a:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d25c:	2700      	movs	r7, #0
 800d25e:	e024      	b.n	800d2aa <lfs_file_opencfg+0x13e>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800d260:	88a3      	ldrh	r3, [r4, #4]
 800d262:	029b      	lsls	r3, r3, #10
 800d264:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800d268:	9200      	str	r2, [sp, #0]
 800d26a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d26e:	f043 0308 	orr.w	r3, r3, #8
 800d272:	4a50      	ldr	r2, [pc, #320]	; (800d3b4 <lfs_file_opencfg+0x248>)
 800d274:	4641      	mov	r1, r8
 800d276:	4628      	mov	r0, r5
 800d278:	f7fd fe34 	bl	800aee4 <lfs_dir_get>
        if (tag < 0) {
 800d27c:	1e06      	subs	r6, r0, #0
 800d27e:	daed      	bge.n	800d25c <lfs_file_opencfg+0xf0>
 800d280:	e086      	b.n	800d390 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
 800d282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d284:	f003 0203 	and.w	r2, r3, #3
 800d288:	2a01      	cmp	r2, #1
 800d28a:	d00d      	beq.n	800d2a8 <lfs_file_opencfg+0x13c>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800d28c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d28e:	6852      	ldr	r2, [r2, #4]
 800d290:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800d294:	0081      	lsls	r1, r0, #2
 800d296:	440a      	add	r2, r1
 800d298:	6891      	ldr	r1, [r2, #8]
 800d29a:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800d29c:	4291      	cmp	r1, r2
 800d29e:	f200 8083 	bhi.w	800d3a8 <lfs_file_opencfg+0x23c>
            file->flags |= LFS_F_DIRTY;
 800d2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2a6:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d2a8:	3701      	adds	r7, #1
 800d2aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d2ac:	6893      	ldr	r3, [r2, #8]
 800d2ae:	42bb      	cmp	r3, r7
 800d2b0:	d920      	bls.n	800d2f4 <lfs_file_opencfg+0x188>
        if ((file->flags & 3) != LFS_O_WRONLY) {
 800d2b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d0e2      	beq.n	800d282 <lfs_file_opencfg+0x116>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800d2bc:	6852      	ldr	r2, [r2, #4]
 800d2be:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 800d2c2:	008b      	lsls	r3, r1, #2
 800d2c4:	18d1      	adds	r1, r2, r3
 800d2c6:	5cd3      	ldrb	r3, [r2, r3]
 800d2c8:	f503 7240 	add.w	r2, r3, #768	; 0x300
 800d2cc:	88a3      	ldrh	r3, [r4, #4]
 800d2ce:	029b      	lsls	r3, r3, #10
 800d2d0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d2d4:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d2d6:	6849      	ldr	r1, [r1, #4]
 800d2d8:	9100      	str	r1, [sp, #0]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	4a36      	ldr	r2, [pc, #216]	; (800d3b8 <lfs_file_opencfg+0x24c>)
 800d2de:	4641      	mov	r1, r8
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f7fd fdff 	bl	800aee4 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	dacb      	bge.n	800d282 <lfs_file_opencfg+0x116>
 800d2ea:	f110 0f02 	cmn.w	r0, #2
 800d2ee:	d0c8      	beq.n	800d282 <lfs_file_opencfg+0x116>
                err = res;
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	e04d      	b.n	800d390 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
 800d2f4:	6813      	ldr	r3, [r2, #0]
 800d2f6:	b18b      	cbz	r3, 800d31c <lfs_file_opencfg+0x1b0>
        file->cache.buffer = file->cfg->buffer;
 800d2f8:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800d2fa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800d2fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2fe:	21ff      	movs	r1, #255	; 0xff
 800d300:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d302:	f000 fbd7 	bl	800dab4 <memset>
    pcache->block = 0xffffffff;
 800d306:	f04f 33ff 	mov.w	r3, #4294967295
 800d30a:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
 800d30c:	f3c6 520a 	ubfx	r2, r6, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800d310:	f240 2301 	movw	r3, #513	; 0x201
 800d314:	429a      	cmp	r2, r3
 800d316:	d00b      	beq.n	800d330 <lfs_file_opencfg+0x1c4>
    return 0;
 800d318:	2600      	movs	r6, #0
 800d31a:	e041      	b.n	800d3a0 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d31c:	6eab      	ldr	r3, [r5, #104]	; 0x68
    return malloc(size);
 800d31e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d320:	f000 fb9e 	bl	800da60 <malloc>
 800d324:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 800d326:	2800      	cmp	r0, #0
 800d328:	d1e7      	bne.n	800d2fa <lfs_file_opencfg+0x18e>
            err = LFS_ERR_NOMEM;
 800d32a:	f06f 060b 	mvn.w	r6, #11
 800d32e:	e02f      	b.n	800d390 <lfs_file_opencfg+0x224>
        file->ctz.head = 0xfffffffe;
 800d330:	f06f 0201 	mvn.w	r2, #1
 800d334:	62a2      	str	r2, [r4, #40]	; 0x28
    return tag & 0x000003ff;
 800d336:	f3c6 0609 	ubfx	r6, r6, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 800d33a:	62e6      	str	r6, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800d33c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d33e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d342:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800d344:	6422      	str	r2, [r4, #64]	; 0x40
        file->cache.off = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800d34a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 800d350:	b90e      	cbnz	r6, 800d356 <lfs_file_opencfg+0x1ea>
    return 0;
 800d352:	2600      	movs	r6, #0
 800d354:	e024      	b.n	800d3a0 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800d356:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
 800d358:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800d35c:	428b      	cmp	r3, r1
 800d35e:	bf28      	it	cs
 800d360:	460b      	movcs	r3, r1
 800d362:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
 800d366:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d368:	9200      	str	r2, [sp, #0]
 800d36a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d36e:	4a11      	ldr	r2, [pc, #68]	; (800d3b4 <lfs_file_opencfg+0x248>)
 800d370:	4641      	mov	r1, r8
 800d372:	4628      	mov	r0, r5
 800d374:	f7fd fdb6 	bl	800aee4 <lfs_dir_get>
            if (res < 0) {
 800d378:	1e06      	subs	r6, r0, #0
 800d37a:	db09      	blt.n	800d390 <lfs_file_opencfg+0x224>
    return 0;
 800d37c:	2600      	movs	r6, #0
 800d37e:	e00f      	b.n	800d3a0 <lfs_file_opencfg+0x234>
            err = LFS_ERR_NOENT;
 800d380:	f06f 0601 	mvn.w	r6, #1
 800d384:	e004      	b.n	800d390 <lfs_file_opencfg+0x224>
            err = LFS_ERR_NAMETOOLONG;
 800d386:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800d38a:	e001      	b.n	800d390 <lfs_file_opencfg+0x224>
        err = LFS_ERR_EXIST;
 800d38c:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 800d390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d396:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
 800d398:	4621      	mov	r1, r4
 800d39a:	4628      	mov	r0, r5
 800d39c:	f7ff fecd 	bl	800d13a <lfs_file_close>
}
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	b00a      	add	sp, #40	; 0x28
 800d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                err = LFS_ERR_NOSPC;
 800d3a8:	f06f 061b 	mvn.w	r6, #27
 800d3ac:	e7f0      	b.n	800d390 <lfs_file_opencfg+0x224>
 800d3ae:	bf00      	nop
 800d3b0:	20100000 	.word	0x20100000
 800d3b4:	700ffc00 	.word	0x700ffc00
 800d3b8:	7ffffc00 	.word	0x7ffffc00

0800d3bc <lfs_file_open>:
        const char *path, int flags) {
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	b082      	sub	sp, #8
    return lfs_file_opencfg(lfs, file, path, flags, &defaults);
 800d3c0:	4c02      	ldr	r4, [pc, #8]	; (800d3cc <lfs_file_open+0x10>)
 800d3c2:	9400      	str	r4, [sp, #0]
 800d3c4:	f7ff fed2 	bl	800d16c <lfs_file_opencfg>
}
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd10      	pop	{r4, pc}
 800d3cc:	0800f3b4 	.word	0x0800f3b4

0800d3d0 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800d3d0:	b530      	push	{r4, r5, lr}
 800d3d2:	b097      	sub	sp, #92	; 0x5c
 800d3d4:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
 800d3d6:	f7fe f98f 	bl	800b6f8 <lfs_init>
        if (err) {
 800d3da:	4605      	mov	r5, r0
 800d3dc:	b110      	cbz	r0, 800d3e4 <lfs_format+0x14>
}
 800d3de:	4628      	mov	r0, r5
 800d3e0:	b017      	add	sp, #92	; 0x5c
 800d3e2:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d3e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800d3ec:	f000 fb62 	bl	800dab4 <memset>
        lfs->free.off = 0;
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d3f4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d3f6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	6a09      	ldr	r1, [r1, #32]
 800d3fc:	428b      	cmp	r3, r1
 800d3fe:	bf28      	it	cs
 800d400:	460b      	movcs	r3, r1
 800d402:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
 800d404:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800d406:	4620      	mov	r0, r4
 800d408:	f7fc ff06 	bl	800a218 <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
 800d40c:	a906      	add	r1, sp, #24
 800d40e:	4620      	mov	r0, r4
 800d410:	f7fe fcb8 	bl	800bd84 <lfs_dir_alloc>
        if (err) {
 800d414:	4605      	mov	r5, r0
 800d416:	b118      	cbz	r0, 800d420 <lfs_format+0x50>
    lfs_deinit(lfs);
 800d418:	4620      	mov	r0, r4
 800d41a:	f7fe f8eb 	bl	800b5f4 <lfs_deinit>
    return err;
 800d41e:	e7de      	b.n	800d3de <lfs_format+0xe>
        lfs_superblock_t superblock = {
 800d420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d424:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 800d426:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d428:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 800d42a:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
 800d42c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800d42e:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 800d430:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800d432:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 800d434:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
 800d436:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 800d438:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
 800d43a:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800d43c:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <lfs_format+0xac>)
 800d43e:	930e      	str	r3, [sp, #56]	; 0x38
 800d440:	2300      	movs	r3, #0
 800d442:	930f      	str	r3, [sp, #60]	; 0x3c
 800d444:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <lfs_format+0xb0>)
 800d446:	9310      	str	r3, [sp, #64]	; 0x40
 800d448:	4b0e      	ldr	r3, [pc, #56]	; (800d484 <lfs_format+0xb4>)
 800d44a:	9311      	str	r3, [sp, #68]	; 0x44
 800d44c:	4b0e      	ldr	r3, [pc, #56]	; (800d488 <lfs_format+0xb8>)
 800d44e:	9312      	str	r3, [sp, #72]	; 0x48
 800d450:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
 800d454:	2303      	movs	r3, #3
 800d456:	aa0e      	add	r2, sp, #56	; 0x38
 800d458:	a906      	add	r1, sp, #24
 800d45a:	4620      	mov	r0, r4
 800d45c:	f7ff fa90 	bl	800c980 <lfs_dir_commit>
        if (err) {
 800d460:	4605      	mov	r5, r0
 800d462:	2800      	cmp	r0, #0
 800d464:	d1d8      	bne.n	800d418 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800d466:	2300      	movs	r3, #0
 800d468:	9314      	str	r3, [sp, #80]	; 0x50
 800d46a:	2301      	movs	r3, #1
 800d46c:	9315      	str	r3, [sp, #84]	; 0x54
 800d46e:	aa14      	add	r2, sp, #80	; 0x50
 800d470:	a906      	add	r1, sp, #24
 800d472:	4620      	mov	r0, r4
 800d474:	f7fd fb0c 	bl	800aa90 <lfs_dir_fetch>
 800d478:	4605      	mov	r5, r0
 800d47a:	e7cd      	b.n	800d418 <lfs_format+0x48>
 800d47c:	40100000 	.word	0x40100000
 800d480:	0ff00008 	.word	0x0ff00008
 800d484:	0800f860 	.word	0x0800f860
 800d488:	20100018 	.word	0x20100018

0800d48c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	b08c      	sub	sp, #48	; 0x30
 800d492:	4605      	mov	r5, r0
 800d494:	460c      	mov	r4, r1
 800d496:	4617      	mov	r7, r2
 800d498:	4698      	mov	r8, r3
 800d49a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    int err = lfs_dir_alloc(lfs, &tail);
 800d49e:	a904      	add	r1, sp, #16
 800d4a0:	f7fe fc70 	bl	800bd84 <lfs_dir_alloc>
    if (err) {
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	b118      	cbz	r0, 800d4b0 <lfs_dir_split+0x24>
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	b00c      	add	sp, #48	; 0x30
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
 800d4b0:	7de3      	ldrb	r3, [r4, #23]
 800d4b2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800d4b6:	69a3      	ldr	r3, [r4, #24]
 800d4b8:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800d4ba:	69e3      	ldr	r3, [r4, #28]
 800d4bc:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800d4be:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d4c2:	9302      	str	r3, [sp, #8]
 800d4c4:	9601      	str	r6, [sp, #4]
 800d4c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	4643      	mov	r3, r8
 800d4cc:	463a      	mov	r2, r7
 800d4ce:	a904      	add	r1, sp, #16
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff f843 	bl	800c55c <lfs_dir_compact>
    if (err) {
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d1e5      	bne.n	800d4a8 <lfs_dir_split+0x1c>
    dir->tail[0] = tail.pair[0];
 800d4dc:	9904      	ldr	r1, [sp, #16]
 800d4de:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 800d4e0:	9a05      	ldr	r2, [sp, #20]
 800d4e2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 800d4e4:	2001      	movs	r0, #1
 800d4e6:	75e0      	strb	r0, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	6a2f      	ldr	r7, [r5, #32]
 800d4ec:	42b8      	cmp	r0, r7
 800d4ee:	d008      	beq.n	800d502 <lfs_dir_split+0x76>
 800d4f0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d4f4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d4f6:	45a4      	cmp	ip, r4
 800d4f8:	d003      	beq.n	800d502 <lfs_dir_split+0x76>
 800d4fa:	42a0      	cmp	r0, r4
 800d4fc:	d001      	beq.n	800d502 <lfs_dir_split+0x76>
 800d4fe:	4567      	cmp	r7, ip
 800d500:	d1d2      	bne.n	800d4a8 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800d502:	2e00      	cmp	r6, #0
 800d504:	d1d0      	bne.n	800d4a8 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 800d506:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 800d508:	626a      	str	r2, [r5, #36]	; 0x24
 800d50a:	e7cd      	b.n	800d4a8 <lfs_dir_split+0x1c>

0800d50c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800d50c:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 800d50e:	2400      	movs	r4, #0
 800d510:	e012      	b.n	800d538 <lfs_crc+0x2c>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800d512:	5d0b      	ldrb	r3, [r1, r4]
 800d514:	ea83 0500 	eor.w	r5, r3, r0
 800d518:	f005 050f 	and.w	r5, r5, #15
 800d51c:	4e08      	ldr	r6, [pc, #32]	; (800d540 <lfs_crc+0x34>)
 800d51e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800d522:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800d526:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 800d52a:	f003 030f 	and.w	r3, r3, #15
 800d52e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d532:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 800d536:	3401      	adds	r4, #1
 800d538:	4294      	cmp	r4, r2
 800d53a:	d3ea      	bcc.n	800d512 <lfs_crc+0x6>
    }

    return crc;
}
 800d53c:	bc70      	pop	{r4, r5, r6}
 800d53e:	4770      	bx	lr
 800d540:	0800f94c 	.word	0x0800f94c

0800d544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d544:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d546:	e003      	b.n	800d550 <LoopCopyDataInit>

0800d548 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d548:	4b0b      	ldr	r3, [pc, #44]	; (800d578 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800d54a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d54c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d54e:	3104      	adds	r1, #4

0800d550 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d550:	480a      	ldr	r0, [pc, #40]	; (800d57c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800d552:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800d554:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d556:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d558:	d3f6      	bcc.n	800d548 <CopyDataInit>
  ldr r2, =_sbss
 800d55a:	4a0a      	ldr	r2, [pc, #40]	; (800d584 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800d55c:	e002      	b.n	800d564 <LoopFillZerobss>

0800d55e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d55e:	2300      	movs	r3, #0
  str r3, [r2], #4
 800d560:	f842 3b04 	str.w	r3, [r2], #4

0800d564 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800d564:	4b08      	ldr	r3, [pc, #32]	; (800d588 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800d566:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d568:	d3f9      	bcc.n	800d55e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d56a:	f7f3 febf 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d56e:	f000 fa53 	bl	800da18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d572:	f7f3 fbf5 	bl	8000d60 <main>
  bx lr
 800d576:	4770      	bx	lr
  ldr r3, =_sidata
 800d578:	0800fad0 	.word	0x0800fad0
  ldr r0, =_sdata
 800d57c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d580:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 800d584:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 800d588:	20006960 	.word	0x20006960

0800d58c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d58c:	e7fe      	b.n	800d58c <ADC1_2_IRQHandler>
	...

0800d590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d592:	2200      	movs	r2, #0
 800d594:	490f      	ldr	r1, [pc, #60]	; (800d5d4 <MX_USB_DEVICE_Init+0x44>)
 800d596:	4810      	ldr	r0, [pc, #64]	; (800d5d8 <MX_USB_DEVICE_Init+0x48>)
 800d598:	f7fa f8f8 	bl	800778c <USBD_Init>
 800d59c:	b970      	cbnz	r0, 800d5bc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d59e:	490f      	ldr	r1, [pc, #60]	; (800d5dc <MX_USB_DEVICE_Init+0x4c>)
 800d5a0:	480d      	ldr	r0, [pc, #52]	; (800d5d8 <MX_USB_DEVICE_Init+0x48>)
 800d5a2:	f7fa f90a 	bl	80077ba <USBD_RegisterClass>
 800d5a6:	b960      	cbnz	r0, 800d5c2 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d5a8:	490d      	ldr	r1, [pc, #52]	; (800d5e0 <MX_USB_DEVICE_Init+0x50>)
 800d5aa:	480b      	ldr	r0, [pc, #44]	; (800d5d8 <MX_USB_DEVICE_Init+0x48>)
 800d5ac:	f7f9 fc87 	bl	8006ebe <USBD_MSC_RegisterStorage>
 800d5b0:	b950      	cbnz	r0, 800d5c8 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d5b2:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <MX_USB_DEVICE_Init+0x48>)
 800d5b4:	f7fa f908 	bl	80077c8 <USBD_Start>
 800d5b8:	b948      	cbnz	r0, 800d5ce <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 800d5bc:	f7f3 fbfc 	bl	8000db8 <Error_Handler>
 800d5c0:	e7ed      	b.n	800d59e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800d5c2:	f7f3 fbf9 	bl	8000db8 <Error_Handler>
 800d5c6:	e7ef      	b.n	800d5a8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800d5c8:	f7f3 fbf6 	bl	8000db8 <Error_Handler>
 800d5cc:	e7f1      	b.n	800d5b2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800d5ce:	f7f3 fbf3 	bl	8000db8 <Error_Handler>
}
 800d5d2:	e7f2      	b.n	800d5ba <MX_USB_DEVICE_Init+0x2a>
 800d5d4:	200000b4 	.word	0x200000b4
 800d5d8:	200060d8 	.word	0x200060d8
 800d5dc:	20000008 	.word	0x20000008
 800d5e0:	20000104 	.word	0x20000104

0800d5e4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5e4:	2312      	movs	r3, #18
 800d5e6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800d5e8:	4800      	ldr	r0, [pc, #0]	; (800d5ec <USBD_FS_DeviceDescriptor+0x8>)
 800d5ea:	4770      	bx	lr
 800d5ec:	200000d0 	.word	0x200000d0

0800d5f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800d5f0:	2304      	movs	r3, #4
 800d5f2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800d5f4:	4800      	ldr	r0, [pc, #0]	; (800d5f8 <USBD_FS_LangIDStrDescriptor+0x8>)
 800d5f6:	4770      	bx	lr
 800d5f8:	200000e4 	.word	0x200000e4

0800d5fc <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d216      	bcs.n	800d630 <IntToUnicode+0x34>
{
 800d602:	b430      	push	{r4, r5}
 800d604:	e00b      	b.n	800d61e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d606:	3437      	adds	r4, #55	; 0x37
 800d608:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800d60c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800d60e:	005c      	lsls	r4, r3, #1
 800d610:	3401      	adds	r4, #1
 800d612:	2500      	movs	r5, #0
 800d614:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800d616:	3301      	adds	r3, #1
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d206      	bcs.n	800d62c <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800d61e:	0f04      	lsrs	r4, r0, #28
 800d620:	2c09      	cmp	r4, #9
 800d622:	d8f0      	bhi.n	800d606 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800d624:	3430      	adds	r4, #48	; 0x30
 800d626:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800d62a:	e7ef      	b.n	800d60c <IntToUnicode+0x10>
  }
}
 800d62c:	bc30      	pop	{r4, r5}
 800d62e:	4770      	bx	lr
 800d630:	4770      	bx	lr
	...

0800d634 <Get_SerialNum>:
{
 800d634:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <Get_SerialNum+0x2c>)
 800d638:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d63a:	3304      	adds	r3, #4
 800d63c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d63e:	3304      	adds	r3, #4
 800d640:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800d642:	18c0      	adds	r0, r0, r3
 800d644:	d100      	bne.n	800d648 <Get_SerialNum+0x14>
}
 800d646:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d648:	4d06      	ldr	r5, [pc, #24]	; (800d664 <Get_SerialNum+0x30>)
 800d64a:	2208      	movs	r2, #8
 800d64c:	1ca9      	adds	r1, r5, #2
 800d64e:	f7ff ffd5 	bl	800d5fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d652:	2204      	movs	r2, #4
 800d654:	f105 0112 	add.w	r1, r5, #18
 800d658:	4620      	mov	r0, r4
 800d65a:	f7ff ffcf 	bl	800d5fc <IntToUnicode>
}
 800d65e:	e7f2      	b.n	800d646 <Get_SerialNum+0x12>
 800d660:	1ffff7e8 	.word	0x1ffff7e8
 800d664:	200000e8 	.word	0x200000e8

0800d668 <USBD_FS_SerialStrDescriptor>:
{
 800d668:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800d66a:	231a      	movs	r3, #26
 800d66c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800d66e:	f7ff ffe1 	bl	800d634 <Get_SerialNum>
}
 800d672:	4801      	ldr	r0, [pc, #4]	; (800d678 <USBD_FS_SerialStrDescriptor+0x10>)
 800d674:	bd08      	pop	{r3, pc}
 800d676:	bf00      	nop
 800d678:	200000e8 	.word	0x200000e8

0800d67c <USBD_FS_ProductStrDescriptor>:
{
 800d67c:	b508      	push	{r3, lr}
 800d67e:	460a      	mov	r2, r1
  if(speed == 0)
 800d680:	b128      	cbz	r0, 800d68e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d682:	4905      	ldr	r1, [pc, #20]	; (800d698 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d684:	4805      	ldr	r0, [pc, #20]	; (800d69c <USBD_FS_ProductStrDescriptor+0x20>)
 800d686:	f7fa fc10 	bl	8007eaa <USBD_GetString>
}
 800d68a:	4803      	ldr	r0, [pc, #12]	; (800d698 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d68c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d68e:	4902      	ldr	r1, [pc, #8]	; (800d698 <USBD_FS_ProductStrDescriptor+0x1c>)
 800d690:	4802      	ldr	r0, [pc, #8]	; (800d69c <USBD_FS_ProductStrDescriptor+0x20>)
 800d692:	f7fa fc0a 	bl	8007eaa <USBD_GetString>
 800d696:	e7f8      	b.n	800d68a <USBD_FS_ProductStrDescriptor+0xe>
 800d698:	200062fc 	.word	0x200062fc
 800d69c:	0800f9bc 	.word	0x0800f9bc

0800d6a0 <USBD_FS_ManufacturerStrDescriptor>:
{
 800d6a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6a2:	4c04      	ldr	r4, [pc, #16]	; (800d6b4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800d6a4:	460a      	mov	r2, r1
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4803      	ldr	r0, [pc, #12]	; (800d6b8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d6aa:	f7fa fbfe 	bl	8007eaa <USBD_GetString>
}
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	bd10      	pop	{r4, pc}
 800d6b2:	bf00      	nop
 800d6b4:	200062fc 	.word	0x200062fc
 800d6b8:	0800f9a8 	.word	0x0800f9a8

0800d6bc <USBD_FS_ConfigStrDescriptor>:
{
 800d6bc:	b508      	push	{r3, lr}
 800d6be:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800d6c0:	b128      	cbz	r0, 800d6ce <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6c2:	4905      	ldr	r1, [pc, #20]	; (800d6d8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d6c4:	4805      	ldr	r0, [pc, #20]	; (800d6dc <USBD_FS_ConfigStrDescriptor+0x20>)
 800d6c6:	f7fa fbf0 	bl	8007eaa <USBD_GetString>
}
 800d6ca:	4803      	ldr	r0, [pc, #12]	; (800d6d8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d6cc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6ce:	4902      	ldr	r1, [pc, #8]	; (800d6d8 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800d6d0:	4802      	ldr	r0, [pc, #8]	; (800d6dc <USBD_FS_ConfigStrDescriptor+0x20>)
 800d6d2:	f7fa fbea 	bl	8007eaa <USBD_GetString>
 800d6d6:	e7f8      	b.n	800d6ca <USBD_FS_ConfigStrDescriptor+0xe>
 800d6d8:	200062fc 	.word	0x200062fc
 800d6dc:	0800f98c 	.word	0x0800f98c

0800d6e0 <USBD_FS_InterfaceStrDescriptor>:
{
 800d6e0:	b508      	push	{r3, lr}
 800d6e2:	460a      	mov	r2, r1
  if(speed == 0)
 800d6e4:	b128      	cbz	r0, 800d6f2 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6e6:	4905      	ldr	r1, [pc, #20]	; (800d6fc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d6e8:	4805      	ldr	r0, [pc, #20]	; (800d700 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d6ea:	f7fa fbde 	bl	8007eaa <USBD_GetString>
}
 800d6ee:	4803      	ldr	r0, [pc, #12]	; (800d6fc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d6f0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6f2:	4902      	ldr	r1, [pc, #8]	; (800d6fc <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800d6f4:	4802      	ldr	r0, [pc, #8]	; (800d700 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800d6f6:	f7fa fbd8 	bl	8007eaa <USBD_GetString>
 800d6fa:	e7f8      	b.n	800d6ee <USBD_FS_InterfaceStrDescriptor+0xe>
 800d6fc:	200062fc 	.word	0x200062fc
 800d700:	0800f998 	.word	0x0800f998

0800d704 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 800d704:	2000      	movs	r0, #0
 800d706:	4770      	bx	lr

0800d708 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800d708:	2000      	movs	r0, #0
 800d70a:	4770      	bx	lr

0800d70c <STORAGE_Write_FS>:
{
 800d70c:	b500      	push	{lr}
 800d70e:	b083      	sub	sp, #12
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 800d710:	200a      	movs	r0, #10
 800d712:	9000      	str	r0, [sp, #0]
 800d714:	4803      	ldr	r0, [pc, #12]	; (800d724 <STORAGE_Write_FS+0x18>)
 800d716:	f7f6 fc17 	bl	8003f48 <HAL_SD_WriteBlocks>
}
 800d71a:	2000      	movs	r0, #0
 800d71c:	b003      	add	sp, #12
 800d71e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d722:	bf00      	nop
 800d724:	20005b50 	.word	0x20005b50

0800d728 <STORAGE_Read_FS>:
{
 800d728:	b500      	push	{lr}
 800d72a:	b083      	sub	sp, #12
HAL_SD_ReadBlocks(&hsd, buf, blk_addr, (uint32_t) blk_len, 10);
 800d72c:	200a      	movs	r0, #10
 800d72e:	9000      	str	r0, [sp, #0]
 800d730:	4803      	ldr	r0, [pc, #12]	; (800d740 <STORAGE_Read_FS+0x18>)
 800d732:	f7f6 fafc 	bl	8003d2e <HAL_SD_ReadBlocks>
}
 800d736:	2000      	movs	r0, #0
 800d738:	b003      	add	sp, #12
 800d73a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d73e:	bf00      	nop
 800d740:	20005b50 	.word	0x20005b50

0800d744 <STORAGE_IsReady_FS>:
{
 800d744:	b508      	push	{r3, lr}
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_READY) {return (USBD_OK);}
 800d746:	4802      	ldr	r0, [pc, #8]	; (800d750 <STORAGE_IsReady_FS+0xc>)
 800d748:	f7f6 ff76 	bl	8004638 <HAL_SD_GetCardState>
}
 800d74c:	2000      	movs	r0, #0
 800d74e:	bd08      	pop	{r3, pc}
 800d750:	20005b50 	.word	0x20005b50

0800d754 <STORAGE_GetCapacity_FS>:
{
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	460e      	mov	r6, r1
 800d758:	4615      	mov	r5, r2
  HAL_SD_GetCardInfo(&hsd, &SDCardInfo);
 800d75a:	4c06      	ldr	r4, [pc, #24]	; (800d774 <STORAGE_GetCapacity_FS+0x20>)
 800d75c:	4621      	mov	r1, r4
 800d75e:	4806      	ldr	r0, [pc, #24]	; (800d778 <STORAGE_GetCapacity_FS+0x24>)
 800d760:	f7f6 fef6 	bl	8004550 <HAL_SD_GetCardInfo>
  *block_num  = SDCardInfo.BlockNbr; //STORAGE_BLK_NBR;
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	6033      	str	r3, [r6, #0]
  *block_size = STORAGE_BLK_SIZ;
 800d768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d76c:	802b      	strh	r3, [r5, #0]
}
 800d76e:	2000      	movs	r0, #0
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	bf00      	nop
 800d774:	20005b30 	.word	0x20005b30
 800d778:	20005b50 	.word	0x20005b50

0800d77c <STORAGE_Init_FS>:
{
 800d77c:	b508      	push	{r3, lr}
  HAL_SD_Init(&hsd);
 800d77e:	4802      	ldr	r0, [pc, #8]	; (800d788 <STORAGE_Init_FS+0xc>)
 800d780:	f7f6 fe7a 	bl	8004478 <HAL_SD_Init>
}
 800d784:	2000      	movs	r0, #0
 800d786:	bd08      	pop	{r3, pc}
 800d788:	20005b50 	.word	0x20005b50

0800d78c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d78c:	b118      	cbz	r0, 800d796 <USBD_Get_USB_Status+0xa>
 800d78e:	2802      	cmp	r0, #2
 800d790:	d003      	beq.n	800d79a <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d792:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d794:	4770      	bx	lr
      usb_status = USBD_OK;
 800d796:	2000      	movs	r0, #0
 800d798:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800d79a:	2001      	movs	r0, #1
    break;
 800d79c:	4770      	bx	lr
	...

0800d7a0 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800d7a0:	6802      	ldr	r2, [r0, #0]
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	; (800d7dc <HAL_PCD_MspInit+0x3c>)
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d000      	beq.n	800d7aa <HAL_PCD_MspInit+0xa>
 800d7a8:	4770      	bx	lr
{
 800d7aa:	b500      	push	{lr}
 800d7ac:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d7ae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800d7b2:	69da      	ldr	r2, [r3, #28]
 800d7b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d7b8:	61da      	str	r2, [r3, #28]
 800d7ba:	69db      	ldr	r3, [r3, #28]
 800d7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2105      	movs	r1, #5
 800d7c8:	2014      	movs	r0, #20
 800d7ca:	f7f4 ff41 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d7ce:	2014      	movs	r0, #20
 800d7d0:	f7f4 ff84 	bl	80026dc <HAL_NVIC_EnableIRQ>
}
 800d7d4:	b003      	add	sp, #12
 800d7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7da:	bf00      	nop
 800d7dc:	40005c00 	.word	0x40005c00

0800d7e0 <HAL_PCD_SetupStageCallback>:
{
 800d7e0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7e2:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800d7e6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d7ea:	f7fa f806 	bl	80077fa <USBD_LL_SetupStage>
}
 800d7ee:	bd08      	pop	{r3, pc}

0800d7f0 <HAL_PCD_DataOutStageCallback>:
{
 800d7f0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7f2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d7f6:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800d7fa:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d7fe:	f7fa f829 	bl	8007854 <USBD_LL_DataOutStage>
}
 800d802:	bd08      	pop	{r3, pc}

0800d804 <HAL_PCD_DataInStageCallback>:
{
 800d804:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d806:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800d80a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d80c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d810:	f7fa f855 	bl	80078be <USBD_LL_DataInStage>
}
 800d814:	bd08      	pop	{r3, pc}

0800d816 <HAL_PCD_SOFCallback>:
{
 800d816:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d818:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d81c:	f7fa f8d8 	bl	80079d0 <USBD_LL_SOF>
}
 800d820:	bd08      	pop	{r3, pc}

0800d822 <HAL_PCD_ResetCallback>:
{ 
 800d822:	b510      	push	{r4, lr}
 800d824:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d826:	6883      	ldr	r3, [r0, #8]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d001      	beq.n	800d830 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800d82c:	f7f3 fac4 	bl	8000db8 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d830:	2101      	movs	r1, #1
 800d832:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d836:	f7fa f8b9 	bl	80079ac <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d83a:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800d83e:	f7fa f896 	bl	800796e <USBD_LL_Reset>
}
 800d842:	bd10      	pop	{r4, pc}

0800d844 <HAL_PCD_SuspendCallback>:
{
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d848:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d84c:	f7fa f8b1 	bl	80079b2 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800d850:	69a3      	ldr	r3, [r4, #24]
 800d852:	b123      	cbz	r3, 800d85e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d854:	4a02      	ldr	r2, [pc, #8]	; (800d860 <HAL_PCD_SuspendCallback+0x1c>)
 800d856:	6913      	ldr	r3, [r2, #16]
 800d858:	f043 0306 	orr.w	r3, r3, #6
 800d85c:	6113      	str	r3, [r2, #16]
}
 800d85e:	bd10      	pop	{r4, pc}
 800d860:	e000ed00 	.word	0xe000ed00

0800d864 <HAL_PCD_ResumeCallback>:
{
 800d864:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d866:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800d86a:	f7fa f8ab 	bl	80079c4 <USBD_LL_Resume>
}
 800d86e:	bd08      	pop	{r3, pc}

0800d870 <USBD_LL_Init>:
{
 800d870:	b510      	push	{r4, lr}
 800d872:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800d874:	4819      	ldr	r0, [pc, #100]	; (800d8dc <USBD_LL_Init+0x6c>)
 800d876:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800d87a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Instance = USB;
 800d87e:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <USBD_LL_Init+0x70>)
 800d880:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d882:	2308      	movs	r3, #8
 800d884:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d886:	2302      	movs	r3, #2
 800d888:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d88e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d890:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d892:	f7f5 fbf1 	bl	8003078 <HAL_PCD_Init>
 800d896:	b9e8      	cbnz	r0, 800d8d4 <USBD_LL_Init+0x64>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d898:	2318      	movs	r3, #24
 800d89a:	2200      	movs	r2, #0
 800d89c:	4611      	mov	r1, r2
 800d89e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8a2:	f7f6 f862 	bl	800396a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d8a6:	2358      	movs	r3, #88	; 0x58
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2180      	movs	r1, #128	; 0x80
 800d8ac:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8b0:	f7f6 f85b 	bl	800396a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800d8b4:	2398      	movs	r3, #152	; 0x98
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2181      	movs	r1, #129	; 0x81
 800d8ba:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8be:	f7f6 f854 	bl	800396a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800d8c2:	23d8      	movs	r3, #216	; 0xd8
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2101      	movs	r1, #1
 800d8c8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800d8cc:	f7f6 f84d 	bl	800396a <HAL_PCDEx_PMAConfig>
}
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d8d4:	f7f3 fa70 	bl	8000db8 <Error_Handler>
 800d8d8:	e7de      	b.n	800d898 <USBD_LL_Init+0x28>
 800d8da:	bf00      	nop
 800d8dc:	200064fc 	.word	0x200064fc
 800d8e0:	40005c00 	.word	0x40005c00

0800d8e4 <USBD_LL_Start>:
{
 800d8e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d8e6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d8ea:	f7f5 fc3d 	bl	8003168 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ee:	f7ff ff4d 	bl	800d78c <USBD_Get_USB_Status>
}
 800d8f2:	bd08      	pop	{r3, pc}

0800d8f4 <USBD_LL_OpenEP>:
{
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	4622      	mov	r2, r4
 800d8fc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d900:	f7f5 fc5d 	bl	80031be <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d904:	f7ff ff42 	bl	800d78c <USBD_Get_USB_Status>
}
 800d908:	bd10      	pop	{r4, pc}

0800d90a <USBD_LL_CloseEP>:
{
 800d90a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d90c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d910:	f7f5 fc7e 	bl	8003210 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d914:	f7ff ff3a 	bl	800d78c <USBD_Get_USB_Status>
}
 800d918:	bd08      	pop	{r3, pc}

0800d91a <USBD_LL_FlushEP>:
{
 800d91a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d91c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d920:	f7f6 f808 	bl	8003934 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d924:	f7ff ff32 	bl	800d78c <USBD_Get_USB_Status>
}
 800d928:	bd08      	pop	{r3, pc}

0800d92a <USBD_LL_StallEP>:
{
 800d92a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d92c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d930:	f7f5 ffab 	bl	800388a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d934:	f7ff ff2a 	bl	800d78c <USBD_Get_USB_Status>
}
 800d938:	bd08      	pop	{r3, pc}

0800d93a <USBD_LL_ClearStallEP>:
{
 800d93a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d93c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d940:	f7f5 ffd1 	bl	80038e6 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d944:	f7ff ff22 	bl	800d78c <USBD_Get_USB_Status>
}
 800d948:	bd08      	pop	{r3, pc}

0800d94a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d94a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800d94e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d952:	d106      	bne.n	800d962 <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d954:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d958:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d95c:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
}
 800d960:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d962:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d966:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800d96a:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 800d96e:	4770      	bx	lr

0800d970 <USBD_LL_SetUSBAddress>:
{
 800d970:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d972:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d976:	f7f5 fc0e 	bl	8003196 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97a:	f7ff ff07 	bl	800d78c <USBD_Get_USB_Status>
}
 800d97e:	bd08      	pop	{r3, pc}

0800d980 <USBD_LL_Transmit>:
{
 800d980:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d982:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d986:	f7f5 fc90 	bl	80032aa <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d98a:	f7ff feff 	bl	800d78c <USBD_Get_USB_Status>
}
 800d98e:	bd08      	pop	{r3, pc}

0800d990 <USBD_LL_PrepareReceive>:
{
 800d990:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d992:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d996:	f7f5 fc62 	bl	800325e <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d99a:	f7ff fef7 	bl	800d78c <USBD_Get_USB_Status>
}
 800d99e:	bd08      	pop	{r3, pc}

0800d9a0 <USBD_LL_GetRxDataSize>:
{
 800d9a0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800d9a6:	f7f5 fc79 	bl	800329c <HAL_PCD_EP_GetRxCount>
}
 800d9aa:	bd08      	pop	{r3, pc}

0800d9ac <USBD_static_malloc>:
}
 800d9ac:	4800      	ldr	r0, [pc, #0]	; (800d9b0 <USBD_static_malloc+0x4>)
 800d9ae:	4770      	bx	lr
 800d9b0:	20003c50 	.word	0x20003c50

0800d9b4 <USBD_static_free>:
}
 800d9b4:	4770      	bx	lr

0800d9b6 <HAL_PCDEx_SetConnectionState>:
}
 800d9b6:	4770      	bx	lr

0800d9b8 <__assert_func>:
 800d9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <__assert_func+0x2c>)
 800d9be:	4605      	mov	r5, r0
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68d8      	ldr	r0, [r3, #12]
 800d9c4:	b152      	cbz	r2, 800d9dc <__assert_func+0x24>
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <__assert_func+0x30>)
 800d9c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9cc:	9100      	str	r1, [sp, #0]
 800d9ce:	462b      	mov	r3, r5
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	4906      	ldr	r1, [pc, #24]	; (800d9ec <__assert_func+0x34>)
 800d9d4:	f000 f80e 	bl	800d9f4 <fiprintf>
 800d9d8:	f000 fd1a 	bl	800e410 <abort>
 800d9dc:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <__assert_func+0x38>)
 800d9de:	461a      	mov	r2, r3
 800d9e0:	e7f2      	b.n	800d9c8 <__assert_func+0x10>
 800d9e2:	bf00      	nop
 800d9e4:	20000124 	.word	0x20000124
 800d9e8:	0800f9f4 	.word	0x0800f9f4
 800d9ec:	0800fa01 	.word	0x0800fa01
 800d9f0:	0800fa2f 	.word	0x0800fa2f

0800d9f4 <fiprintf>:
 800d9f4:	b40e      	push	{r1, r2, r3}
 800d9f6:	b503      	push	{r0, r1, lr}
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	ab03      	add	r3, sp, #12
 800d9fc:	4805      	ldr	r0, [pc, #20]	; (800da14 <fiprintf+0x20>)
 800d9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800da02:	6800      	ldr	r0, [r0, #0]
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	f000 f92b 	bl	800dc60 <_vfiprintf_r>
 800da0a:	b002      	add	sp, #8
 800da0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da10:	b003      	add	sp, #12
 800da12:	4770      	bx	lr
 800da14:	20000124 	.word	0x20000124

0800da18 <__libc_init_array>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	2500      	movs	r5, #0
 800da1c:	4e0c      	ldr	r6, [pc, #48]	; (800da50 <__libc_init_array+0x38>)
 800da1e:	4c0d      	ldr	r4, [pc, #52]	; (800da54 <__libc_init_array+0x3c>)
 800da20:	1ba4      	subs	r4, r4, r6
 800da22:	10a4      	asrs	r4, r4, #2
 800da24:	42a5      	cmp	r5, r4
 800da26:	d109      	bne.n	800da3c <__libc_init_array+0x24>
 800da28:	f001 f9c2 	bl	800edb0 <_init>
 800da2c:	2500      	movs	r5, #0
 800da2e:	4e0a      	ldr	r6, [pc, #40]	; (800da58 <__libc_init_array+0x40>)
 800da30:	4c0a      	ldr	r4, [pc, #40]	; (800da5c <__libc_init_array+0x44>)
 800da32:	1ba4      	subs	r4, r4, r6
 800da34:	10a4      	asrs	r4, r4, #2
 800da36:	42a5      	cmp	r5, r4
 800da38:	d105      	bne.n	800da46 <__libc_init_array+0x2e>
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da40:	4798      	blx	r3
 800da42:	3501      	adds	r5, #1
 800da44:	e7ee      	b.n	800da24 <__libc_init_array+0xc>
 800da46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da4a:	4798      	blx	r3
 800da4c:	3501      	adds	r5, #1
 800da4e:	e7f2      	b.n	800da36 <__libc_init_array+0x1e>
 800da50:	0800fac8 	.word	0x0800fac8
 800da54:	0800fac8 	.word	0x0800fac8
 800da58:	0800fac8 	.word	0x0800fac8
 800da5c:	0800facc 	.word	0x0800facc

0800da60 <malloc>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <malloc+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f000 b879 	b.w	800db5c <_malloc_r>
 800da6a:	bf00      	nop
 800da6c:	20000124 	.word	0x20000124

0800da70 <free>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <free+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f000 b825 	b.w	800dac4 <_free_r>
 800da7a:	bf00      	nop
 800da7c:	20000124 	.word	0x20000124

0800da80 <memcmp>:
 800da80:	b530      	push	{r4, r5, lr}
 800da82:	2400      	movs	r4, #0
 800da84:	42a2      	cmp	r2, r4
 800da86:	d101      	bne.n	800da8c <memcmp+0xc>
 800da88:	2000      	movs	r0, #0
 800da8a:	e007      	b.n	800da9c <memcmp+0x1c>
 800da8c:	5d03      	ldrb	r3, [r0, r4]
 800da8e:	3401      	adds	r4, #1
 800da90:	190d      	adds	r5, r1, r4
 800da92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800da96:	42ab      	cmp	r3, r5
 800da98:	d0f4      	beq.n	800da84 <memcmp+0x4>
 800da9a:	1b58      	subs	r0, r3, r5
 800da9c:	bd30      	pop	{r4, r5, pc}

0800da9e <memcpy>:
 800da9e:	b510      	push	{r4, lr}
 800daa0:	1e43      	subs	r3, r0, #1
 800daa2:	440a      	add	r2, r1
 800daa4:	4291      	cmp	r1, r2
 800daa6:	d100      	bne.n	800daaa <memcpy+0xc>
 800daa8:	bd10      	pop	{r4, pc}
 800daaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab2:	e7f7      	b.n	800daa4 <memcpy+0x6>

0800dab4 <memset>:
 800dab4:	4603      	mov	r3, r0
 800dab6:	4402      	add	r2, r0
 800dab8:	4293      	cmp	r3, r2
 800daba:	d100      	bne.n	800dabe <memset+0xa>
 800dabc:	4770      	bx	lr
 800dabe:	f803 1b01 	strb.w	r1, [r3], #1
 800dac2:	e7f9      	b.n	800dab8 <memset+0x4>

0800dac4 <_free_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4605      	mov	r5, r0
 800dac8:	2900      	cmp	r1, #0
 800daca:	d043      	beq.n	800db54 <_free_r+0x90>
 800dacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad0:	1f0c      	subs	r4, r1, #4
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	bfb8      	it	lt
 800dad6:	18e4      	addlt	r4, r4, r3
 800dad8:	f000 fea7 	bl	800e82a <__malloc_lock>
 800dadc:	4a1e      	ldr	r2, [pc, #120]	; (800db58 <_free_r+0x94>)
 800dade:	6813      	ldr	r3, [r2, #0]
 800dae0:	4610      	mov	r0, r2
 800dae2:	b933      	cbnz	r3, 800daf2 <_free_r+0x2e>
 800dae4:	6063      	str	r3, [r4, #4]
 800dae6:	6014      	str	r4, [r2, #0]
 800dae8:	4628      	mov	r0, r5
 800daea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daee:	f000 be9d 	b.w	800e82c <__malloc_unlock>
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	d90b      	bls.n	800db0e <_free_r+0x4a>
 800daf6:	6821      	ldr	r1, [r4, #0]
 800daf8:	1862      	adds	r2, r4, r1
 800dafa:	4293      	cmp	r3, r2
 800dafc:	bf01      	itttt	eq
 800dafe:	681a      	ldreq	r2, [r3, #0]
 800db00:	685b      	ldreq	r3, [r3, #4]
 800db02:	1852      	addeq	r2, r2, r1
 800db04:	6022      	streq	r2, [r4, #0]
 800db06:	6063      	str	r3, [r4, #4]
 800db08:	6004      	str	r4, [r0, #0]
 800db0a:	e7ed      	b.n	800dae8 <_free_r+0x24>
 800db0c:	4613      	mov	r3, r2
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	b10a      	cbz	r2, 800db16 <_free_r+0x52>
 800db12:	42a2      	cmp	r2, r4
 800db14:	d9fa      	bls.n	800db0c <_free_r+0x48>
 800db16:	6819      	ldr	r1, [r3, #0]
 800db18:	1858      	adds	r0, r3, r1
 800db1a:	42a0      	cmp	r0, r4
 800db1c:	d10b      	bne.n	800db36 <_free_r+0x72>
 800db1e:	6820      	ldr	r0, [r4, #0]
 800db20:	4401      	add	r1, r0
 800db22:	1858      	adds	r0, r3, r1
 800db24:	4282      	cmp	r2, r0
 800db26:	6019      	str	r1, [r3, #0]
 800db28:	d1de      	bne.n	800dae8 <_free_r+0x24>
 800db2a:	6810      	ldr	r0, [r2, #0]
 800db2c:	6852      	ldr	r2, [r2, #4]
 800db2e:	4401      	add	r1, r0
 800db30:	6019      	str	r1, [r3, #0]
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	e7d8      	b.n	800dae8 <_free_r+0x24>
 800db36:	d902      	bls.n	800db3e <_free_r+0x7a>
 800db38:	230c      	movs	r3, #12
 800db3a:	602b      	str	r3, [r5, #0]
 800db3c:	e7d4      	b.n	800dae8 <_free_r+0x24>
 800db3e:	6820      	ldr	r0, [r4, #0]
 800db40:	1821      	adds	r1, r4, r0
 800db42:	428a      	cmp	r2, r1
 800db44:	bf01      	itttt	eq
 800db46:	6811      	ldreq	r1, [r2, #0]
 800db48:	6852      	ldreq	r2, [r2, #4]
 800db4a:	1809      	addeq	r1, r1, r0
 800db4c:	6021      	streq	r1, [r4, #0]
 800db4e:	6062      	str	r2, [r4, #4]
 800db50:	605c      	str	r4, [r3, #4]
 800db52:	e7c9      	b.n	800dae8 <_free_r+0x24>
 800db54:	bd38      	pop	{r3, r4, r5, pc}
 800db56:	bf00      	nop
 800db58:	20003ec0 	.word	0x20003ec0

0800db5c <_malloc_r>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	1ccd      	adds	r5, r1, #3
 800db60:	f025 0503 	bic.w	r5, r5, #3
 800db64:	3508      	adds	r5, #8
 800db66:	2d0c      	cmp	r5, #12
 800db68:	bf38      	it	cc
 800db6a:	250c      	movcc	r5, #12
 800db6c:	2d00      	cmp	r5, #0
 800db6e:	4606      	mov	r6, r0
 800db70:	db01      	blt.n	800db76 <_malloc_r+0x1a>
 800db72:	42a9      	cmp	r1, r5
 800db74:	d903      	bls.n	800db7e <_malloc_r+0x22>
 800db76:	230c      	movs	r3, #12
 800db78:	6033      	str	r3, [r6, #0]
 800db7a:	2000      	movs	r0, #0
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
 800db7e:	f000 fe54 	bl	800e82a <__malloc_lock>
 800db82:	4a21      	ldr	r2, [pc, #132]	; (800dc08 <_malloc_r+0xac>)
 800db84:	6814      	ldr	r4, [r2, #0]
 800db86:	4621      	mov	r1, r4
 800db88:	b991      	cbnz	r1, 800dbb0 <_malloc_r+0x54>
 800db8a:	4c20      	ldr	r4, [pc, #128]	; (800dc0c <_malloc_r+0xb0>)
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	b91b      	cbnz	r3, 800db98 <_malloc_r+0x3c>
 800db90:	4630      	mov	r0, r6
 800db92:	f000 fb1b 	bl	800e1cc <_sbrk_r>
 800db96:	6020      	str	r0, [r4, #0]
 800db98:	4629      	mov	r1, r5
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 fb16 	bl	800e1cc <_sbrk_r>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d124      	bne.n	800dbee <_malloc_r+0x92>
 800dba4:	230c      	movs	r3, #12
 800dba6:	4630      	mov	r0, r6
 800dba8:	6033      	str	r3, [r6, #0]
 800dbaa:	f000 fe3f 	bl	800e82c <__malloc_unlock>
 800dbae:	e7e4      	b.n	800db7a <_malloc_r+0x1e>
 800dbb0:	680b      	ldr	r3, [r1, #0]
 800dbb2:	1b5b      	subs	r3, r3, r5
 800dbb4:	d418      	bmi.n	800dbe8 <_malloc_r+0x8c>
 800dbb6:	2b0b      	cmp	r3, #11
 800dbb8:	d90f      	bls.n	800dbda <_malloc_r+0x7e>
 800dbba:	600b      	str	r3, [r1, #0]
 800dbbc:	18cc      	adds	r4, r1, r3
 800dbbe:	50cd      	str	r5, [r1, r3]
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f000 fe33 	bl	800e82c <__malloc_unlock>
 800dbc6:	f104 000b 	add.w	r0, r4, #11
 800dbca:	1d23      	adds	r3, r4, #4
 800dbcc:	f020 0007 	bic.w	r0, r0, #7
 800dbd0:	1ac3      	subs	r3, r0, r3
 800dbd2:	d0d3      	beq.n	800db7c <_malloc_r+0x20>
 800dbd4:	425a      	negs	r2, r3
 800dbd6:	50e2      	str	r2, [r4, r3]
 800dbd8:	e7d0      	b.n	800db7c <_malloc_r+0x20>
 800dbda:	684b      	ldr	r3, [r1, #4]
 800dbdc:	428c      	cmp	r4, r1
 800dbde:	bf16      	itet	ne
 800dbe0:	6063      	strne	r3, [r4, #4]
 800dbe2:	6013      	streq	r3, [r2, #0]
 800dbe4:	460c      	movne	r4, r1
 800dbe6:	e7eb      	b.n	800dbc0 <_malloc_r+0x64>
 800dbe8:	460c      	mov	r4, r1
 800dbea:	6849      	ldr	r1, [r1, #4]
 800dbec:	e7cc      	b.n	800db88 <_malloc_r+0x2c>
 800dbee:	1cc4      	adds	r4, r0, #3
 800dbf0:	f024 0403 	bic.w	r4, r4, #3
 800dbf4:	42a0      	cmp	r0, r4
 800dbf6:	d005      	beq.n	800dc04 <_malloc_r+0xa8>
 800dbf8:	1a21      	subs	r1, r4, r0
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f000 fae6 	bl	800e1cc <_sbrk_r>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d0cf      	beq.n	800dba4 <_malloc_r+0x48>
 800dc04:	6025      	str	r5, [r4, #0]
 800dc06:	e7db      	b.n	800dbc0 <_malloc_r+0x64>
 800dc08:	20003ec0 	.word	0x20003ec0
 800dc0c:	20003ec4 	.word	0x20003ec4

0800dc10 <__sfputc_r>:
 800dc10:	6893      	ldr	r3, [r2, #8]
 800dc12:	b410      	push	{r4}
 800dc14:	3b01      	subs	r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	6093      	str	r3, [r2, #8]
 800dc1a:	da07      	bge.n	800dc2c <__sfputc_r+0x1c>
 800dc1c:	6994      	ldr	r4, [r2, #24]
 800dc1e:	42a3      	cmp	r3, r4
 800dc20:	db01      	blt.n	800dc26 <__sfputc_r+0x16>
 800dc22:	290a      	cmp	r1, #10
 800dc24:	d102      	bne.n	800dc2c <__sfputc_r+0x1c>
 800dc26:	bc10      	pop	{r4}
 800dc28:	f000 bb32 	b.w	800e290 <__swbuf_r>
 800dc2c:	6813      	ldr	r3, [r2, #0]
 800dc2e:	1c58      	adds	r0, r3, #1
 800dc30:	6010      	str	r0, [r2, #0]
 800dc32:	7019      	strb	r1, [r3, #0]
 800dc34:	4608      	mov	r0, r1
 800dc36:	bc10      	pop	{r4}
 800dc38:	4770      	bx	lr

0800dc3a <__sfputs_r>:
 800dc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	460f      	mov	r7, r1
 800dc40:	4614      	mov	r4, r2
 800dc42:	18d5      	adds	r5, r2, r3
 800dc44:	42ac      	cmp	r4, r5
 800dc46:	d101      	bne.n	800dc4c <__sfputs_r+0x12>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e007      	b.n	800dc5c <__sfputs_r+0x22>
 800dc4c:	463a      	mov	r2, r7
 800dc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7ff ffdc 	bl	800dc10 <__sfputc_r>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d1f3      	bne.n	800dc44 <__sfputs_r+0xa>
 800dc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc60 <_vfiprintf_r>:
 800dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	460c      	mov	r4, r1
 800dc66:	b09d      	sub	sp, #116	; 0x74
 800dc68:	4617      	mov	r7, r2
 800dc6a:	461d      	mov	r5, r3
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	b118      	cbz	r0, 800dc78 <_vfiprintf_r+0x18>
 800dc70:	6983      	ldr	r3, [r0, #24]
 800dc72:	b90b      	cbnz	r3, 800dc78 <_vfiprintf_r+0x18>
 800dc74:	f000 fcc4 	bl	800e600 <__sinit>
 800dc78:	4b7c      	ldr	r3, [pc, #496]	; (800de6c <_vfiprintf_r+0x20c>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	d158      	bne.n	800dd30 <_vfiprintf_r+0xd0>
 800dc7e:	6874      	ldr	r4, [r6, #4]
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	0718      	lsls	r0, r3, #28
 800dc84:	d55e      	bpl.n	800dd44 <_vfiprintf_r+0xe4>
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d05b      	beq.n	800dd44 <_vfiprintf_r+0xe4>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc90:	2320      	movs	r3, #32
 800dc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc96:	2330      	movs	r3, #48	; 0x30
 800dc98:	f04f 0b01 	mov.w	fp, #1
 800dc9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dca0:	9503      	str	r5, [sp, #12]
 800dca2:	46b8      	mov	r8, r7
 800dca4:	4645      	mov	r5, r8
 800dca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcaa:	b10b      	cbz	r3, 800dcb0 <_vfiprintf_r+0x50>
 800dcac:	2b25      	cmp	r3, #37	; 0x25
 800dcae:	d154      	bne.n	800dd5a <_vfiprintf_r+0xfa>
 800dcb0:	ebb8 0a07 	subs.w	sl, r8, r7
 800dcb4:	d00b      	beq.n	800dcce <_vfiprintf_r+0x6e>
 800dcb6:	4653      	mov	r3, sl
 800dcb8:	463a      	mov	r2, r7
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f7ff ffbc 	bl	800dc3a <__sfputs_r>
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	f000 80c2 	beq.w	800de4c <_vfiprintf_r+0x1ec>
 800dcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcca:	4453      	add	r3, sl
 800dccc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcce:	f898 3000 	ldrb.w	r3, [r8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 80ba 	beq.w	800de4c <_vfiprintf_r+0x1ec>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f04f 32ff 	mov.w	r2, #4294967295
 800dcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dce2:	9304      	str	r3, [sp, #16]
 800dce4:	9307      	str	r3, [sp, #28]
 800dce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcea:	931a      	str	r3, [sp, #104]	; 0x68
 800dcec:	46a8      	mov	r8, r5
 800dcee:	2205      	movs	r2, #5
 800dcf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dcf4:	485e      	ldr	r0, [pc, #376]	; (800de70 <_vfiprintf_r+0x210>)
 800dcf6:	f000 fd71 	bl	800e7dc <memchr>
 800dcfa:	9b04      	ldr	r3, [sp, #16]
 800dcfc:	bb78      	cbnz	r0, 800dd5e <_vfiprintf_r+0xfe>
 800dcfe:	06d9      	lsls	r1, r3, #27
 800dd00:	bf44      	itt	mi
 800dd02:	2220      	movmi	r2, #32
 800dd04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd08:	071a      	lsls	r2, r3, #28
 800dd0a:	bf44      	itt	mi
 800dd0c:	222b      	movmi	r2, #43	; 0x2b
 800dd0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd12:	782a      	ldrb	r2, [r5, #0]
 800dd14:	2a2a      	cmp	r2, #42	; 0x2a
 800dd16:	d02a      	beq.n	800dd6e <_vfiprintf_r+0x10e>
 800dd18:	46a8      	mov	r8, r5
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	250a      	movs	r5, #10
 800dd1e:	9a07      	ldr	r2, [sp, #28]
 800dd20:	4641      	mov	r1, r8
 800dd22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd26:	3b30      	subs	r3, #48	; 0x30
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	d969      	bls.n	800de00 <_vfiprintf_r+0x1a0>
 800dd2c:	b360      	cbz	r0, 800dd88 <_vfiprintf_r+0x128>
 800dd2e:	e024      	b.n	800dd7a <_vfiprintf_r+0x11a>
 800dd30:	4b50      	ldr	r3, [pc, #320]	; (800de74 <_vfiprintf_r+0x214>)
 800dd32:	429c      	cmp	r4, r3
 800dd34:	d101      	bne.n	800dd3a <_vfiprintf_r+0xda>
 800dd36:	68b4      	ldr	r4, [r6, #8]
 800dd38:	e7a2      	b.n	800dc80 <_vfiprintf_r+0x20>
 800dd3a:	4b4f      	ldr	r3, [pc, #316]	; (800de78 <_vfiprintf_r+0x218>)
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	bf08      	it	eq
 800dd40:	68f4      	ldreq	r4, [r6, #12]
 800dd42:	e79d      	b.n	800dc80 <_vfiprintf_r+0x20>
 800dd44:	4621      	mov	r1, r4
 800dd46:	4630      	mov	r0, r6
 800dd48:	f000 faf4 	bl	800e334 <__swsetup_r>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d09d      	beq.n	800dc8c <_vfiprintf_r+0x2c>
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	b01d      	add	sp, #116	; 0x74
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5a:	46a8      	mov	r8, r5
 800dd5c:	e7a2      	b.n	800dca4 <_vfiprintf_r+0x44>
 800dd5e:	4a44      	ldr	r2, [pc, #272]	; (800de70 <_vfiprintf_r+0x210>)
 800dd60:	4645      	mov	r5, r8
 800dd62:	1a80      	subs	r0, r0, r2
 800dd64:	fa0b f000 	lsl.w	r0, fp, r0
 800dd68:	4318      	orrs	r0, r3
 800dd6a:	9004      	str	r0, [sp, #16]
 800dd6c:	e7be      	b.n	800dcec <_vfiprintf_r+0x8c>
 800dd6e:	9a03      	ldr	r2, [sp, #12]
 800dd70:	1d11      	adds	r1, r2, #4
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	9103      	str	r1, [sp, #12]
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	db01      	blt.n	800dd7e <_vfiprintf_r+0x11e>
 800dd7a:	9207      	str	r2, [sp, #28]
 800dd7c:	e004      	b.n	800dd88 <_vfiprintf_r+0x128>
 800dd7e:	4252      	negs	r2, r2
 800dd80:	f043 0302 	orr.w	r3, r3, #2
 800dd84:	9207      	str	r2, [sp, #28]
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	f898 3000 	ldrb.w	r3, [r8]
 800dd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8e:	d10e      	bne.n	800ddae <_vfiprintf_r+0x14e>
 800dd90:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd94:	2b2a      	cmp	r3, #42	; 0x2a
 800dd96:	d138      	bne.n	800de0a <_vfiprintf_r+0x1aa>
 800dd98:	9b03      	ldr	r3, [sp, #12]
 800dd9a:	f108 0802 	add.w	r8, r8, #2
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	9203      	str	r2, [sp, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bfb8      	it	lt
 800dda8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	4d33      	ldr	r5, [pc, #204]	; (800de7c <_vfiprintf_r+0x21c>)
 800ddb0:	2203      	movs	r2, #3
 800ddb2:	f898 1000 	ldrb.w	r1, [r8]
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f000 fd10 	bl	800e7dc <memchr>
 800ddbc:	b140      	cbz	r0, 800ddd0 <_vfiprintf_r+0x170>
 800ddbe:	2340      	movs	r3, #64	; 0x40
 800ddc0:	1b40      	subs	r0, r0, r5
 800ddc2:	fa03 f000 	lsl.w	r0, r3, r0
 800ddc6:	9b04      	ldr	r3, [sp, #16]
 800ddc8:	f108 0801 	add.w	r8, r8, #1
 800ddcc:	4303      	orrs	r3, r0
 800ddce:	9304      	str	r3, [sp, #16]
 800ddd0:	f898 1000 	ldrb.w	r1, [r8]
 800ddd4:	2206      	movs	r2, #6
 800ddd6:	482a      	ldr	r0, [pc, #168]	; (800de80 <_vfiprintf_r+0x220>)
 800ddd8:	f108 0701 	add.w	r7, r8, #1
 800dddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dde0:	f000 fcfc 	bl	800e7dc <memchr>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d037      	beq.n	800de58 <_vfiprintf_r+0x1f8>
 800dde8:	4b26      	ldr	r3, [pc, #152]	; (800de84 <_vfiprintf_r+0x224>)
 800ddea:	bb1b      	cbnz	r3, 800de34 <_vfiprintf_r+0x1d4>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	3307      	adds	r3, #7
 800ddf0:	f023 0307 	bic.w	r3, r3, #7
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	9303      	str	r3, [sp, #12]
 800ddf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfa:	444b      	add	r3, r9
 800ddfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfe:	e750      	b.n	800dca2 <_vfiprintf_r+0x42>
 800de00:	fb05 3202 	mla	r2, r5, r2, r3
 800de04:	2001      	movs	r0, #1
 800de06:	4688      	mov	r8, r1
 800de08:	e78a      	b.n	800dd20 <_vfiprintf_r+0xc0>
 800de0a:	2300      	movs	r3, #0
 800de0c:	250a      	movs	r5, #10
 800de0e:	4619      	mov	r1, r3
 800de10:	f108 0801 	add.w	r8, r8, #1
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	4640      	mov	r0, r8
 800de18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de1c:	3a30      	subs	r2, #48	; 0x30
 800de1e:	2a09      	cmp	r2, #9
 800de20:	d903      	bls.n	800de2a <_vfiprintf_r+0x1ca>
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0c3      	beq.n	800ddae <_vfiprintf_r+0x14e>
 800de26:	9105      	str	r1, [sp, #20]
 800de28:	e7c1      	b.n	800ddae <_vfiprintf_r+0x14e>
 800de2a:	fb05 2101 	mla	r1, r5, r1, r2
 800de2e:	2301      	movs	r3, #1
 800de30:	4680      	mov	r8, r0
 800de32:	e7f0      	b.n	800de16 <_vfiprintf_r+0x1b6>
 800de34:	ab03      	add	r3, sp, #12
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4622      	mov	r2, r4
 800de3a:	4b13      	ldr	r3, [pc, #76]	; (800de88 <_vfiprintf_r+0x228>)
 800de3c:	a904      	add	r1, sp, #16
 800de3e:	4630      	mov	r0, r6
 800de40:	f3af 8000 	nop.w
 800de44:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de48:	4681      	mov	r9, r0
 800de4a:	d1d5      	bne.n	800ddf8 <_vfiprintf_r+0x198>
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	065b      	lsls	r3, r3, #25
 800de50:	f53f af7e 	bmi.w	800dd50 <_vfiprintf_r+0xf0>
 800de54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de56:	e77d      	b.n	800dd54 <_vfiprintf_r+0xf4>
 800de58:	ab03      	add	r3, sp, #12
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4622      	mov	r2, r4
 800de5e:	4b0a      	ldr	r3, [pc, #40]	; (800de88 <_vfiprintf_r+0x228>)
 800de60:	a904      	add	r1, sp, #16
 800de62:	4630      	mov	r0, r6
 800de64:	f000 f888 	bl	800df78 <_printf_i>
 800de68:	e7ec      	b.n	800de44 <_vfiprintf_r+0x1e4>
 800de6a:	bf00      	nop
 800de6c:	0800fa88 	.word	0x0800fa88
 800de70:	0800fa34 	.word	0x0800fa34
 800de74:	0800faa8 	.word	0x0800faa8
 800de78:	0800fa68 	.word	0x0800fa68
 800de7c:	0800fa3a 	.word	0x0800fa3a
 800de80:	0800fa3e 	.word	0x0800fa3e
 800de84:	00000000 	.word	0x00000000
 800de88:	0800dc3b 	.word	0x0800dc3b

0800de8c <_printf_common>:
 800de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	4691      	mov	r9, r2
 800de92:	461f      	mov	r7, r3
 800de94:	688a      	ldr	r2, [r1, #8]
 800de96:	690b      	ldr	r3, [r1, #16]
 800de98:	4606      	mov	r6, r0
 800de9a:	4293      	cmp	r3, r2
 800de9c:	bfb8      	it	lt
 800de9e:	4613      	movlt	r3, r2
 800dea0:	f8c9 3000 	str.w	r3, [r9]
 800dea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dea8:	460c      	mov	r4, r1
 800deaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800deae:	b112      	cbz	r2, 800deb6 <_printf_common+0x2a>
 800deb0:	3301      	adds	r3, #1
 800deb2:	f8c9 3000 	str.w	r3, [r9]
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	0699      	lsls	r1, r3, #26
 800deba:	bf42      	ittt	mi
 800debc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dec0:	3302      	addmi	r3, #2
 800dec2:	f8c9 3000 	strmi.w	r3, [r9]
 800dec6:	6825      	ldr	r5, [r4, #0]
 800dec8:	f015 0506 	ands.w	r5, r5, #6
 800decc:	d107      	bne.n	800dede <_printf_common+0x52>
 800dece:	f104 0a19 	add.w	sl, r4, #25
 800ded2:	68e3      	ldr	r3, [r4, #12]
 800ded4:	f8d9 2000 	ldr.w	r2, [r9]
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	42ab      	cmp	r3, r5
 800dedc:	dc29      	bgt.n	800df32 <_printf_common+0xa6>
 800dede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	3300      	adds	r3, #0
 800dee6:	bf18      	it	ne
 800dee8:	2301      	movne	r3, #1
 800deea:	0692      	lsls	r2, r2, #26
 800deec:	d42e      	bmi.n	800df4c <_printf_common+0xc0>
 800deee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800def2:	4639      	mov	r1, r7
 800def4:	4630      	mov	r0, r6
 800def6:	47c0      	blx	r8
 800def8:	3001      	adds	r0, #1
 800defa:	d021      	beq.n	800df40 <_printf_common+0xb4>
 800defc:	6823      	ldr	r3, [r4, #0]
 800defe:	68e5      	ldr	r5, [r4, #12]
 800df00:	f003 0306 	and.w	r3, r3, #6
 800df04:	2b04      	cmp	r3, #4
 800df06:	bf18      	it	ne
 800df08:	2500      	movne	r5, #0
 800df0a:	f8d9 2000 	ldr.w	r2, [r9]
 800df0e:	f04f 0900 	mov.w	r9, #0
 800df12:	bf08      	it	eq
 800df14:	1aad      	subeq	r5, r5, r2
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	6922      	ldr	r2, [r4, #16]
 800df1a:	bf08      	it	eq
 800df1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df20:	4293      	cmp	r3, r2
 800df22:	bfc4      	itt	gt
 800df24:	1a9b      	subgt	r3, r3, r2
 800df26:	18ed      	addgt	r5, r5, r3
 800df28:	341a      	adds	r4, #26
 800df2a:	454d      	cmp	r5, r9
 800df2c:	d11a      	bne.n	800df64 <_printf_common+0xd8>
 800df2e:	2000      	movs	r0, #0
 800df30:	e008      	b.n	800df44 <_printf_common+0xb8>
 800df32:	2301      	movs	r3, #1
 800df34:	4652      	mov	r2, sl
 800df36:	4639      	mov	r1, r7
 800df38:	4630      	mov	r0, r6
 800df3a:	47c0      	blx	r8
 800df3c:	3001      	adds	r0, #1
 800df3e:	d103      	bne.n	800df48 <_printf_common+0xbc>
 800df40:	f04f 30ff 	mov.w	r0, #4294967295
 800df44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df48:	3501      	adds	r5, #1
 800df4a:	e7c2      	b.n	800ded2 <_printf_common+0x46>
 800df4c:	2030      	movs	r0, #48	; 0x30
 800df4e:	18e1      	adds	r1, r4, r3
 800df50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df5a:	4422      	add	r2, r4
 800df5c:	3302      	adds	r3, #2
 800df5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df62:	e7c4      	b.n	800deee <_printf_common+0x62>
 800df64:	2301      	movs	r3, #1
 800df66:	4622      	mov	r2, r4
 800df68:	4639      	mov	r1, r7
 800df6a:	4630      	mov	r0, r6
 800df6c:	47c0      	blx	r8
 800df6e:	3001      	adds	r0, #1
 800df70:	d0e6      	beq.n	800df40 <_printf_common+0xb4>
 800df72:	f109 0901 	add.w	r9, r9, #1
 800df76:	e7d8      	b.n	800df2a <_printf_common+0x9e>

0800df78 <_printf_i>:
 800df78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df80:	460c      	mov	r4, r1
 800df82:	7e09      	ldrb	r1, [r1, #24]
 800df84:	b085      	sub	sp, #20
 800df86:	296e      	cmp	r1, #110	; 0x6e
 800df88:	4617      	mov	r7, r2
 800df8a:	4606      	mov	r6, r0
 800df8c:	4698      	mov	r8, r3
 800df8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df90:	f000 80b3 	beq.w	800e0fa <_printf_i+0x182>
 800df94:	d822      	bhi.n	800dfdc <_printf_i+0x64>
 800df96:	2963      	cmp	r1, #99	; 0x63
 800df98:	d036      	beq.n	800e008 <_printf_i+0x90>
 800df9a:	d80a      	bhi.n	800dfb2 <_printf_i+0x3a>
 800df9c:	2900      	cmp	r1, #0
 800df9e:	f000 80b9 	beq.w	800e114 <_printf_i+0x19c>
 800dfa2:	2958      	cmp	r1, #88	; 0x58
 800dfa4:	f000 8083 	beq.w	800e0ae <_printf_i+0x136>
 800dfa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dfb0:	e032      	b.n	800e018 <_printf_i+0xa0>
 800dfb2:	2964      	cmp	r1, #100	; 0x64
 800dfb4:	d001      	beq.n	800dfba <_printf_i+0x42>
 800dfb6:	2969      	cmp	r1, #105	; 0x69
 800dfb8:	d1f6      	bne.n	800dfa8 <_printf_i+0x30>
 800dfba:	6820      	ldr	r0, [r4, #0]
 800dfbc:	6813      	ldr	r3, [r2, #0]
 800dfbe:	0605      	lsls	r5, r0, #24
 800dfc0:	f103 0104 	add.w	r1, r3, #4
 800dfc4:	d52a      	bpl.n	800e01c <_printf_i+0xa4>
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6011      	str	r1, [r2, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da03      	bge.n	800dfd6 <_printf_i+0x5e>
 800dfce:	222d      	movs	r2, #45	; 0x2d
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfd6:	486f      	ldr	r0, [pc, #444]	; (800e194 <_printf_i+0x21c>)
 800dfd8:	220a      	movs	r2, #10
 800dfda:	e039      	b.n	800e050 <_printf_i+0xd8>
 800dfdc:	2973      	cmp	r1, #115	; 0x73
 800dfde:	f000 809d 	beq.w	800e11c <_printf_i+0x1a4>
 800dfe2:	d808      	bhi.n	800dff6 <_printf_i+0x7e>
 800dfe4:	296f      	cmp	r1, #111	; 0x6f
 800dfe6:	d020      	beq.n	800e02a <_printf_i+0xb2>
 800dfe8:	2970      	cmp	r1, #112	; 0x70
 800dfea:	d1dd      	bne.n	800dfa8 <_printf_i+0x30>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	f043 0320 	orr.w	r3, r3, #32
 800dff2:	6023      	str	r3, [r4, #0]
 800dff4:	e003      	b.n	800dffe <_printf_i+0x86>
 800dff6:	2975      	cmp	r1, #117	; 0x75
 800dff8:	d017      	beq.n	800e02a <_printf_i+0xb2>
 800dffa:	2978      	cmp	r1, #120	; 0x78
 800dffc:	d1d4      	bne.n	800dfa8 <_printf_i+0x30>
 800dffe:	2378      	movs	r3, #120	; 0x78
 800e000:	4865      	ldr	r0, [pc, #404]	; (800e198 <_printf_i+0x220>)
 800e002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e006:	e055      	b.n	800e0b4 <_printf_i+0x13c>
 800e008:	6813      	ldr	r3, [r2, #0]
 800e00a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e00e:	1d19      	adds	r1, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6011      	str	r1, [r2, #0]
 800e014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e018:	2301      	movs	r3, #1
 800e01a:	e08c      	b.n	800e136 <_printf_i+0x1be>
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e022:	6011      	str	r1, [r2, #0]
 800e024:	bf18      	it	ne
 800e026:	b21b      	sxthne	r3, r3
 800e028:	e7cf      	b.n	800dfca <_printf_i+0x52>
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	6825      	ldr	r5, [r4, #0]
 800e02e:	1d18      	adds	r0, r3, #4
 800e030:	6010      	str	r0, [r2, #0]
 800e032:	0628      	lsls	r0, r5, #24
 800e034:	d501      	bpl.n	800e03a <_printf_i+0xc2>
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	e002      	b.n	800e040 <_printf_i+0xc8>
 800e03a:	0668      	lsls	r0, r5, #25
 800e03c:	d5fb      	bpl.n	800e036 <_printf_i+0xbe>
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	296f      	cmp	r1, #111	; 0x6f
 800e042:	bf14      	ite	ne
 800e044:	220a      	movne	r2, #10
 800e046:	2208      	moveq	r2, #8
 800e048:	4852      	ldr	r0, [pc, #328]	; (800e194 <_printf_i+0x21c>)
 800e04a:	2100      	movs	r1, #0
 800e04c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e050:	6865      	ldr	r5, [r4, #4]
 800e052:	2d00      	cmp	r5, #0
 800e054:	60a5      	str	r5, [r4, #8]
 800e056:	f2c0 8095 	blt.w	800e184 <_printf_i+0x20c>
 800e05a:	6821      	ldr	r1, [r4, #0]
 800e05c:	f021 0104 	bic.w	r1, r1, #4
 800e060:	6021      	str	r1, [r4, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d13d      	bne.n	800e0e2 <_printf_i+0x16a>
 800e066:	2d00      	cmp	r5, #0
 800e068:	f040 808e 	bne.w	800e188 <_printf_i+0x210>
 800e06c:	4665      	mov	r5, ip
 800e06e:	2a08      	cmp	r2, #8
 800e070:	d10b      	bne.n	800e08a <_printf_i+0x112>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	07db      	lsls	r3, r3, #31
 800e076:	d508      	bpl.n	800e08a <_printf_i+0x112>
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	6862      	ldr	r2, [r4, #4]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	bfde      	ittt	le
 800e080:	2330      	movle	r3, #48	; 0x30
 800e082:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e08a:	ebac 0305 	sub.w	r3, ip, r5
 800e08e:	6123      	str	r3, [r4, #16]
 800e090:	f8cd 8000 	str.w	r8, [sp]
 800e094:	463b      	mov	r3, r7
 800e096:	aa03      	add	r2, sp, #12
 800e098:	4621      	mov	r1, r4
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7ff fef6 	bl	800de8c <_printf_common>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d14d      	bne.n	800e140 <_printf_i+0x1c8>
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	b005      	add	sp, #20
 800e0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ae:	4839      	ldr	r0, [pc, #228]	; (800e194 <_printf_i+0x21c>)
 800e0b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e0b4:	6813      	ldr	r3, [r2, #0]
 800e0b6:	6821      	ldr	r1, [r4, #0]
 800e0b8:	1d1d      	adds	r5, r3, #4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6015      	str	r5, [r2, #0]
 800e0be:	060a      	lsls	r2, r1, #24
 800e0c0:	d50b      	bpl.n	800e0da <_printf_i+0x162>
 800e0c2:	07ca      	lsls	r2, r1, #31
 800e0c4:	bf44      	itt	mi
 800e0c6:	f041 0120 	orrmi.w	r1, r1, #32
 800e0ca:	6021      	strmi	r1, [r4, #0]
 800e0cc:	b91b      	cbnz	r3, 800e0d6 <_printf_i+0x15e>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	f022 0220 	bic.w	r2, r2, #32
 800e0d4:	6022      	str	r2, [r4, #0]
 800e0d6:	2210      	movs	r2, #16
 800e0d8:	e7b7      	b.n	800e04a <_printf_i+0xd2>
 800e0da:	064d      	lsls	r5, r1, #25
 800e0dc:	bf48      	it	mi
 800e0de:	b29b      	uxthmi	r3, r3
 800e0e0:	e7ef      	b.n	800e0c2 <_printf_i+0x14a>
 800e0e2:	4665      	mov	r5, ip
 800e0e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0e8:	fb02 3311 	mls	r3, r2, r1, r3
 800e0ec:	5cc3      	ldrb	r3, [r0, r3]
 800e0ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	d1f5      	bne.n	800e0e4 <_printf_i+0x16c>
 800e0f8:	e7b9      	b.n	800e06e <_printf_i+0xf6>
 800e0fa:	6813      	ldr	r3, [r2, #0]
 800e0fc:	6825      	ldr	r5, [r4, #0]
 800e0fe:	1d18      	adds	r0, r3, #4
 800e100:	6961      	ldr	r1, [r4, #20]
 800e102:	6010      	str	r0, [r2, #0]
 800e104:	0628      	lsls	r0, r5, #24
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	d501      	bpl.n	800e10e <_printf_i+0x196>
 800e10a:	6019      	str	r1, [r3, #0]
 800e10c:	e002      	b.n	800e114 <_printf_i+0x19c>
 800e10e:	066a      	lsls	r2, r5, #25
 800e110:	d5fb      	bpl.n	800e10a <_printf_i+0x192>
 800e112:	8019      	strh	r1, [r3, #0]
 800e114:	2300      	movs	r3, #0
 800e116:	4665      	mov	r5, ip
 800e118:	6123      	str	r3, [r4, #16]
 800e11a:	e7b9      	b.n	800e090 <_printf_i+0x118>
 800e11c:	6813      	ldr	r3, [r2, #0]
 800e11e:	1d19      	adds	r1, r3, #4
 800e120:	6011      	str	r1, [r2, #0]
 800e122:	681d      	ldr	r5, [r3, #0]
 800e124:	6862      	ldr	r2, [r4, #4]
 800e126:	2100      	movs	r1, #0
 800e128:	4628      	mov	r0, r5
 800e12a:	f000 fb57 	bl	800e7dc <memchr>
 800e12e:	b108      	cbz	r0, 800e134 <_printf_i+0x1bc>
 800e130:	1b40      	subs	r0, r0, r5
 800e132:	6060      	str	r0, [r4, #4]
 800e134:	6863      	ldr	r3, [r4, #4]
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	2300      	movs	r3, #0
 800e13a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e13e:	e7a7      	b.n	800e090 <_printf_i+0x118>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	462a      	mov	r2, r5
 800e144:	4639      	mov	r1, r7
 800e146:	4630      	mov	r0, r6
 800e148:	47c0      	blx	r8
 800e14a:	3001      	adds	r0, #1
 800e14c:	d0aa      	beq.n	800e0a4 <_printf_i+0x12c>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	079b      	lsls	r3, r3, #30
 800e152:	d413      	bmi.n	800e17c <_printf_i+0x204>
 800e154:	68e0      	ldr	r0, [r4, #12]
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	4298      	cmp	r0, r3
 800e15a:	bfb8      	it	lt
 800e15c:	4618      	movlt	r0, r3
 800e15e:	e7a3      	b.n	800e0a8 <_printf_i+0x130>
 800e160:	2301      	movs	r3, #1
 800e162:	464a      	mov	r2, r9
 800e164:	4639      	mov	r1, r7
 800e166:	4630      	mov	r0, r6
 800e168:	47c0      	blx	r8
 800e16a:	3001      	adds	r0, #1
 800e16c:	d09a      	beq.n	800e0a4 <_printf_i+0x12c>
 800e16e:	3501      	adds	r5, #1
 800e170:	68e3      	ldr	r3, [r4, #12]
 800e172:	9a03      	ldr	r2, [sp, #12]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	42ab      	cmp	r3, r5
 800e178:	dcf2      	bgt.n	800e160 <_printf_i+0x1e8>
 800e17a:	e7eb      	b.n	800e154 <_printf_i+0x1dc>
 800e17c:	2500      	movs	r5, #0
 800e17e:	f104 0919 	add.w	r9, r4, #25
 800e182:	e7f5      	b.n	800e170 <_printf_i+0x1f8>
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1ac      	bne.n	800e0e2 <_printf_i+0x16a>
 800e188:	7803      	ldrb	r3, [r0, #0]
 800e18a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e18e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e192:	e76c      	b.n	800e06e <_printf_i+0xf6>
 800e194:	0800fa45 	.word	0x0800fa45
 800e198:	0800fa56 	.word	0x0800fa56

0800e19c <iprintf>:
 800e19c:	b40f      	push	{r0, r1, r2, r3}
 800e19e:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <iprintf+0x2c>)
 800e1a0:	b513      	push	{r0, r1, r4, lr}
 800e1a2:	681c      	ldr	r4, [r3, #0]
 800e1a4:	b124      	cbz	r4, 800e1b0 <iprintf+0x14>
 800e1a6:	69a3      	ldr	r3, [r4, #24]
 800e1a8:	b913      	cbnz	r3, 800e1b0 <iprintf+0x14>
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fa28 	bl	800e600 <__sinit>
 800e1b0:	ab05      	add	r3, sp, #20
 800e1b2:	9a04      	ldr	r2, [sp, #16]
 800e1b4:	68a1      	ldr	r1, [r4, #8]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	f7ff fd51 	bl	800dc60 <_vfiprintf_r>
 800e1be:	b002      	add	sp, #8
 800e1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c4:	b004      	add	sp, #16
 800e1c6:	4770      	bx	lr
 800e1c8:	20000124 	.word	0x20000124

0800e1cc <_sbrk_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	4c05      	ldr	r4, [pc, #20]	; (800e1e8 <_sbrk_r+0x1c>)
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	6023      	str	r3, [r4, #0]
 800e1d8:	f000 fdd2 	bl	800ed80 <_sbrk>
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	d102      	bne.n	800e1e6 <_sbrk_r+0x1a>
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	b103      	cbz	r3, 800e1e6 <_sbrk_r+0x1a>
 800e1e4:	602b      	str	r3, [r5, #0]
 800e1e6:	bd38      	pop	{r3, r4, r5, pc}
 800e1e8:	2000695c 	.word	0x2000695c

0800e1ec <siprintf>:
 800e1ec:	b40e      	push	{r1, r2, r3}
 800e1ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1f2:	b500      	push	{lr}
 800e1f4:	b09c      	sub	sp, #112	; 0x70
 800e1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e1f8:	9002      	str	r0, [sp, #8]
 800e1fa:	9006      	str	r0, [sp, #24]
 800e1fc:	9107      	str	r1, [sp, #28]
 800e1fe:	9104      	str	r1, [sp, #16]
 800e200:	4808      	ldr	r0, [pc, #32]	; (800e224 <siprintf+0x38>)
 800e202:	4909      	ldr	r1, [pc, #36]	; (800e228 <siprintf+0x3c>)
 800e204:	f853 2b04 	ldr.w	r2, [r3], #4
 800e208:	9105      	str	r1, [sp, #20]
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	a902      	add	r1, sp, #8
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	f000 fb8e 	bl	800e930 <_svfiprintf_r>
 800e214:	2200      	movs	r2, #0
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	701a      	strb	r2, [r3, #0]
 800e21a:	b01c      	add	sp, #112	; 0x70
 800e21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e220:	b003      	add	sp, #12
 800e222:	4770      	bx	lr
 800e224:	20000124 	.word	0x20000124
 800e228:	ffff0208 	.word	0xffff0208

0800e22c <strchr>:
 800e22c:	b2c9      	uxtb	r1, r1
 800e22e:	4603      	mov	r3, r0
 800e230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e234:	b11a      	cbz	r2, 800e23e <strchr+0x12>
 800e236:	428a      	cmp	r2, r1
 800e238:	d1f9      	bne.n	800e22e <strchr+0x2>
 800e23a:	4618      	mov	r0, r3
 800e23c:	4770      	bx	lr
 800e23e:	2900      	cmp	r1, #0
 800e240:	bf18      	it	ne
 800e242:	2300      	movne	r3, #0
 800e244:	e7f9      	b.n	800e23a <strchr+0xe>

0800e246 <strcspn>:
 800e246:	4603      	mov	r3, r0
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	461a      	mov	r2, r3
 800e24c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e250:	b14d      	cbz	r5, 800e266 <strcspn+0x20>
 800e252:	1e4c      	subs	r4, r1, #1
 800e254:	e001      	b.n	800e25a <strcspn+0x14>
 800e256:	42ae      	cmp	r6, r5
 800e258:	d005      	beq.n	800e266 <strcspn+0x20>
 800e25a:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800e25e:	2e00      	cmp	r6, #0
 800e260:	d1f9      	bne.n	800e256 <strcspn+0x10>
 800e262:	4613      	mov	r3, r2
 800e264:	e7f1      	b.n	800e24a <strcspn+0x4>
 800e266:	1a18      	subs	r0, r3, r0
 800e268:	bd70      	pop	{r4, r5, r6, pc}

0800e26a <strspn>:
 800e26a:	4603      	mov	r3, r0
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	461a      	mov	r2, r3
 800e270:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e274:	b13d      	cbz	r5, 800e286 <strspn+0x1c>
 800e276:	1e4c      	subs	r4, r1, #1
 800e278:	e001      	b.n	800e27e <strspn+0x14>
 800e27a:	42ae      	cmp	r6, r5
 800e27c:	d005      	beq.n	800e28a <strspn+0x20>
 800e27e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800e282:	2e00      	cmp	r6, #0
 800e284:	d1f9      	bne.n	800e27a <strspn+0x10>
 800e286:	1a18      	subs	r0, r3, r0
 800e288:	bd70      	pop	{r4, r5, r6, pc}
 800e28a:	4613      	mov	r3, r2
 800e28c:	e7ef      	b.n	800e26e <strspn+0x4>
	...

0800e290 <__swbuf_r>:
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e292:	460e      	mov	r6, r1
 800e294:	4614      	mov	r4, r2
 800e296:	4605      	mov	r5, r0
 800e298:	b118      	cbz	r0, 800e2a2 <__swbuf_r+0x12>
 800e29a:	6983      	ldr	r3, [r0, #24]
 800e29c:	b90b      	cbnz	r3, 800e2a2 <__swbuf_r+0x12>
 800e29e:	f000 f9af 	bl	800e600 <__sinit>
 800e2a2:	4b21      	ldr	r3, [pc, #132]	; (800e328 <__swbuf_r+0x98>)
 800e2a4:	429c      	cmp	r4, r3
 800e2a6:	d12a      	bne.n	800e2fe <__swbuf_r+0x6e>
 800e2a8:	686c      	ldr	r4, [r5, #4]
 800e2aa:	69a3      	ldr	r3, [r4, #24]
 800e2ac:	60a3      	str	r3, [r4, #8]
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	071a      	lsls	r2, r3, #28
 800e2b2:	d52e      	bpl.n	800e312 <__swbuf_r+0x82>
 800e2b4:	6923      	ldr	r3, [r4, #16]
 800e2b6:	b363      	cbz	r3, 800e312 <__swbuf_r+0x82>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	6820      	ldr	r0, [r4, #0]
 800e2bc:	b2f6      	uxtb	r6, r6
 800e2be:	1ac0      	subs	r0, r0, r3
 800e2c0:	6963      	ldr	r3, [r4, #20]
 800e2c2:	4637      	mov	r7, r6
 800e2c4:	4283      	cmp	r3, r0
 800e2c6:	dc04      	bgt.n	800e2d2 <__swbuf_r+0x42>
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f000 f92e 	bl	800e52c <_fflush_r>
 800e2d0:	bb28      	cbnz	r0, 800e31e <__swbuf_r+0x8e>
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	60a3      	str	r3, [r4, #8]
 800e2da:	6823      	ldr	r3, [r4, #0]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	6022      	str	r2, [r4, #0]
 800e2e0:	701e      	strb	r6, [r3, #0]
 800e2e2:	6963      	ldr	r3, [r4, #20]
 800e2e4:	4283      	cmp	r3, r0
 800e2e6:	d004      	beq.n	800e2f2 <__swbuf_r+0x62>
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	07db      	lsls	r3, r3, #31
 800e2ec:	d519      	bpl.n	800e322 <__swbuf_r+0x92>
 800e2ee:	2e0a      	cmp	r6, #10
 800e2f0:	d117      	bne.n	800e322 <__swbuf_r+0x92>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f000 f919 	bl	800e52c <_fflush_r>
 800e2fa:	b190      	cbz	r0, 800e322 <__swbuf_r+0x92>
 800e2fc:	e00f      	b.n	800e31e <__swbuf_r+0x8e>
 800e2fe:	4b0b      	ldr	r3, [pc, #44]	; (800e32c <__swbuf_r+0x9c>)
 800e300:	429c      	cmp	r4, r3
 800e302:	d101      	bne.n	800e308 <__swbuf_r+0x78>
 800e304:	68ac      	ldr	r4, [r5, #8]
 800e306:	e7d0      	b.n	800e2aa <__swbuf_r+0x1a>
 800e308:	4b09      	ldr	r3, [pc, #36]	; (800e330 <__swbuf_r+0xa0>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	bf08      	it	eq
 800e30e:	68ec      	ldreq	r4, [r5, #12]
 800e310:	e7cb      	b.n	800e2aa <__swbuf_r+0x1a>
 800e312:	4621      	mov	r1, r4
 800e314:	4628      	mov	r0, r5
 800e316:	f000 f80d 	bl	800e334 <__swsetup_r>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d0cc      	beq.n	800e2b8 <__swbuf_r+0x28>
 800e31e:	f04f 37ff 	mov.w	r7, #4294967295
 800e322:	4638      	mov	r0, r7
 800e324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e326:	bf00      	nop
 800e328:	0800fa88 	.word	0x0800fa88
 800e32c:	0800faa8 	.word	0x0800faa8
 800e330:	0800fa68 	.word	0x0800fa68

0800e334 <__swsetup_r>:
 800e334:	4b32      	ldr	r3, [pc, #200]	; (800e400 <__swsetup_r+0xcc>)
 800e336:	b570      	push	{r4, r5, r6, lr}
 800e338:	681d      	ldr	r5, [r3, #0]
 800e33a:	4606      	mov	r6, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	b125      	cbz	r5, 800e34a <__swsetup_r+0x16>
 800e340:	69ab      	ldr	r3, [r5, #24]
 800e342:	b913      	cbnz	r3, 800e34a <__swsetup_r+0x16>
 800e344:	4628      	mov	r0, r5
 800e346:	f000 f95b 	bl	800e600 <__sinit>
 800e34a:	4b2e      	ldr	r3, [pc, #184]	; (800e404 <__swsetup_r+0xd0>)
 800e34c:	429c      	cmp	r4, r3
 800e34e:	d10f      	bne.n	800e370 <__swsetup_r+0x3c>
 800e350:	686c      	ldr	r4, [r5, #4]
 800e352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e356:	b29a      	uxth	r2, r3
 800e358:	0715      	lsls	r5, r2, #28
 800e35a:	d42c      	bmi.n	800e3b6 <__swsetup_r+0x82>
 800e35c:	06d0      	lsls	r0, r2, #27
 800e35e:	d411      	bmi.n	800e384 <__swsetup_r+0x50>
 800e360:	2209      	movs	r2, #9
 800e362:	6032      	str	r2, [r6, #0]
 800e364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	f04f 30ff 	mov.w	r0, #4294967295
 800e36e:	e03e      	b.n	800e3ee <__swsetup_r+0xba>
 800e370:	4b25      	ldr	r3, [pc, #148]	; (800e408 <__swsetup_r+0xd4>)
 800e372:	429c      	cmp	r4, r3
 800e374:	d101      	bne.n	800e37a <__swsetup_r+0x46>
 800e376:	68ac      	ldr	r4, [r5, #8]
 800e378:	e7eb      	b.n	800e352 <__swsetup_r+0x1e>
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <__swsetup_r+0xd8>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	bf08      	it	eq
 800e380:	68ec      	ldreq	r4, [r5, #12]
 800e382:	e7e6      	b.n	800e352 <__swsetup_r+0x1e>
 800e384:	0751      	lsls	r1, r2, #29
 800e386:	d512      	bpl.n	800e3ae <__swsetup_r+0x7a>
 800e388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e38a:	b141      	cbz	r1, 800e39e <__swsetup_r+0x6a>
 800e38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e390:	4299      	cmp	r1, r3
 800e392:	d002      	beq.n	800e39a <__swsetup_r+0x66>
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff fb95 	bl	800dac4 <_free_r>
 800e39a:	2300      	movs	r3, #0
 800e39c:	6363      	str	r3, [r4, #52]	; 0x34
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3a4:	81a3      	strh	r3, [r4, #12]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	f043 0308 	orr.w	r3, r3, #8
 800e3b4:	81a3      	strh	r3, [r4, #12]
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	b94b      	cbnz	r3, 800e3ce <__swsetup_r+0x9a>
 800e3ba:	89a3      	ldrh	r3, [r4, #12]
 800e3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3c4:	d003      	beq.n	800e3ce <__swsetup_r+0x9a>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f000 f9c7 	bl	800e75c <__smakebuf_r>
 800e3ce:	89a2      	ldrh	r2, [r4, #12]
 800e3d0:	f012 0301 	ands.w	r3, r2, #1
 800e3d4:	d00c      	beq.n	800e3f0 <__swsetup_r+0xbc>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60a3      	str	r3, [r4, #8]
 800e3da:	6963      	ldr	r3, [r4, #20]
 800e3dc:	425b      	negs	r3, r3
 800e3de:	61a3      	str	r3, [r4, #24]
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	b953      	cbnz	r3, 800e3fa <__swsetup_r+0xc6>
 800e3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e3ec:	d1ba      	bne.n	800e364 <__swsetup_r+0x30>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	0792      	lsls	r2, r2, #30
 800e3f2:	bf58      	it	pl
 800e3f4:	6963      	ldrpl	r3, [r4, #20]
 800e3f6:	60a3      	str	r3, [r4, #8]
 800e3f8:	e7f2      	b.n	800e3e0 <__swsetup_r+0xac>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7f7      	b.n	800e3ee <__swsetup_r+0xba>
 800e3fe:	bf00      	nop
 800e400:	20000124 	.word	0x20000124
 800e404:	0800fa88 	.word	0x0800fa88
 800e408:	0800faa8 	.word	0x0800faa8
 800e40c:	0800fa68 	.word	0x0800fa68

0800e410 <abort>:
 800e410:	b508      	push	{r3, lr}
 800e412:	2006      	movs	r0, #6
 800e414:	f000 fbac 	bl	800eb70 <raise>
 800e418:	2001      	movs	r0, #1
 800e41a:	f000 fcc7 	bl	800edac <_exit>
	...

0800e420 <__sflush_r>:
 800e420:	898a      	ldrh	r2, [r1, #12]
 800e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	4605      	mov	r5, r0
 800e428:	0710      	lsls	r0, r2, #28
 800e42a:	460c      	mov	r4, r1
 800e42c:	d458      	bmi.n	800e4e0 <__sflush_r+0xc0>
 800e42e:	684b      	ldr	r3, [r1, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	dc05      	bgt.n	800e440 <__sflush_r+0x20>
 800e434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	dc02      	bgt.n	800e440 <__sflush_r+0x20>
 800e43a:	2000      	movs	r0, #0
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e442:	2e00      	cmp	r6, #0
 800e444:	d0f9      	beq.n	800e43a <__sflush_r+0x1a>
 800e446:	2300      	movs	r3, #0
 800e448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e44c:	682f      	ldr	r7, [r5, #0]
 800e44e:	6a21      	ldr	r1, [r4, #32]
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	d032      	beq.n	800e4ba <__sflush_r+0x9a>
 800e454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	075a      	lsls	r2, r3, #29
 800e45a:	d505      	bpl.n	800e468 <__sflush_r+0x48>
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	1ac0      	subs	r0, r0, r3
 800e460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e462:	b10b      	cbz	r3, 800e468 <__sflush_r+0x48>
 800e464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e466:	1ac0      	subs	r0, r0, r3
 800e468:	2300      	movs	r3, #0
 800e46a:	4602      	mov	r2, r0
 800e46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e46e:	6a21      	ldr	r1, [r4, #32]
 800e470:	4628      	mov	r0, r5
 800e472:	47b0      	blx	r6
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	d106      	bne.n	800e488 <__sflush_r+0x68>
 800e47a:	6829      	ldr	r1, [r5, #0]
 800e47c:	291d      	cmp	r1, #29
 800e47e:	d848      	bhi.n	800e512 <__sflush_r+0xf2>
 800e480:	4a29      	ldr	r2, [pc, #164]	; (800e528 <__sflush_r+0x108>)
 800e482:	40ca      	lsrs	r2, r1
 800e484:	07d6      	lsls	r6, r2, #31
 800e486:	d544      	bpl.n	800e512 <__sflush_r+0xf2>
 800e488:	2200      	movs	r2, #0
 800e48a:	6062      	str	r2, [r4, #4]
 800e48c:	6922      	ldr	r2, [r4, #16]
 800e48e:	04d9      	lsls	r1, r3, #19
 800e490:	6022      	str	r2, [r4, #0]
 800e492:	d504      	bpl.n	800e49e <__sflush_r+0x7e>
 800e494:	1c42      	adds	r2, r0, #1
 800e496:	d101      	bne.n	800e49c <__sflush_r+0x7c>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	b903      	cbnz	r3, 800e49e <__sflush_r+0x7e>
 800e49c:	6560      	str	r0, [r4, #84]	; 0x54
 800e49e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4a0:	602f      	str	r7, [r5, #0]
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	d0c9      	beq.n	800e43a <__sflush_r+0x1a>
 800e4a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	d002      	beq.n	800e4b4 <__sflush_r+0x94>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff fb08 	bl	800dac4 <_free_r>
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	6360      	str	r0, [r4, #52]	; 0x34
 800e4b8:	e7c0      	b.n	800e43c <__sflush_r+0x1c>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b0      	blx	r6
 800e4c0:	1c41      	adds	r1, r0, #1
 800e4c2:	d1c8      	bne.n	800e456 <__sflush_r+0x36>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0c5      	beq.n	800e456 <__sflush_r+0x36>
 800e4ca:	2b1d      	cmp	r3, #29
 800e4cc:	d001      	beq.n	800e4d2 <__sflush_r+0xb2>
 800e4ce:	2b16      	cmp	r3, #22
 800e4d0:	d101      	bne.n	800e4d6 <__sflush_r+0xb6>
 800e4d2:	602f      	str	r7, [r5, #0]
 800e4d4:	e7b1      	b.n	800e43a <__sflush_r+0x1a>
 800e4d6:	89a3      	ldrh	r3, [r4, #12]
 800e4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	e7ad      	b.n	800e43c <__sflush_r+0x1c>
 800e4e0:	690f      	ldr	r7, [r1, #16]
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d0a9      	beq.n	800e43a <__sflush_r+0x1a>
 800e4e6:	0793      	lsls	r3, r2, #30
 800e4e8:	bf18      	it	ne
 800e4ea:	2300      	movne	r3, #0
 800e4ec:	680e      	ldr	r6, [r1, #0]
 800e4ee:	bf08      	it	eq
 800e4f0:	694b      	ldreq	r3, [r1, #20]
 800e4f2:	eba6 0807 	sub.w	r8, r6, r7
 800e4f6:	600f      	str	r7, [r1, #0]
 800e4f8:	608b      	str	r3, [r1, #8]
 800e4fa:	f1b8 0f00 	cmp.w	r8, #0
 800e4fe:	dd9c      	ble.n	800e43a <__sflush_r+0x1a>
 800e500:	4643      	mov	r3, r8
 800e502:	463a      	mov	r2, r7
 800e504:	6a21      	ldr	r1, [r4, #32]
 800e506:	4628      	mov	r0, r5
 800e508:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e50a:	47b0      	blx	r6
 800e50c:	2800      	cmp	r0, #0
 800e50e:	dc06      	bgt.n	800e51e <__sflush_r+0xfe>
 800e510:	89a3      	ldrh	r3, [r4, #12]
 800e512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	f04f 30ff 	mov.w	r0, #4294967295
 800e51c:	e78e      	b.n	800e43c <__sflush_r+0x1c>
 800e51e:	4407      	add	r7, r0
 800e520:	eba8 0800 	sub.w	r8, r8, r0
 800e524:	e7e9      	b.n	800e4fa <__sflush_r+0xda>
 800e526:	bf00      	nop
 800e528:	20400001 	.word	0x20400001

0800e52c <_fflush_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	690b      	ldr	r3, [r1, #16]
 800e530:	4605      	mov	r5, r0
 800e532:	460c      	mov	r4, r1
 800e534:	b1db      	cbz	r3, 800e56e <_fflush_r+0x42>
 800e536:	b118      	cbz	r0, 800e540 <_fflush_r+0x14>
 800e538:	6983      	ldr	r3, [r0, #24]
 800e53a:	b90b      	cbnz	r3, 800e540 <_fflush_r+0x14>
 800e53c:	f000 f860 	bl	800e600 <__sinit>
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <_fflush_r+0x48>)
 800e542:	429c      	cmp	r4, r3
 800e544:	d109      	bne.n	800e55a <_fflush_r+0x2e>
 800e546:	686c      	ldr	r4, [r5, #4]
 800e548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e54c:	b17b      	cbz	r3, 800e56e <_fflush_r+0x42>
 800e54e:	4621      	mov	r1, r4
 800e550:	4628      	mov	r0, r5
 800e552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e556:	f7ff bf63 	b.w	800e420 <__sflush_r>
 800e55a:	4b07      	ldr	r3, [pc, #28]	; (800e578 <_fflush_r+0x4c>)
 800e55c:	429c      	cmp	r4, r3
 800e55e:	d101      	bne.n	800e564 <_fflush_r+0x38>
 800e560:	68ac      	ldr	r4, [r5, #8]
 800e562:	e7f1      	b.n	800e548 <_fflush_r+0x1c>
 800e564:	4b05      	ldr	r3, [pc, #20]	; (800e57c <_fflush_r+0x50>)
 800e566:	429c      	cmp	r4, r3
 800e568:	bf08      	it	eq
 800e56a:	68ec      	ldreq	r4, [r5, #12]
 800e56c:	e7ec      	b.n	800e548 <_fflush_r+0x1c>
 800e56e:	2000      	movs	r0, #0
 800e570:	bd38      	pop	{r3, r4, r5, pc}
 800e572:	bf00      	nop
 800e574:	0800fa88 	.word	0x0800fa88
 800e578:	0800faa8 	.word	0x0800faa8
 800e57c:	0800fa68 	.word	0x0800fa68

0800e580 <std>:
 800e580:	2300      	movs	r3, #0
 800e582:	b510      	push	{r4, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	e9c0 3300 	strd	r3, r3, [r0]
 800e58a:	6083      	str	r3, [r0, #8]
 800e58c:	8181      	strh	r1, [r0, #12]
 800e58e:	6643      	str	r3, [r0, #100]	; 0x64
 800e590:	81c2      	strh	r2, [r0, #14]
 800e592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e596:	6183      	str	r3, [r0, #24]
 800e598:	4619      	mov	r1, r3
 800e59a:	2208      	movs	r2, #8
 800e59c:	305c      	adds	r0, #92	; 0x5c
 800e59e:	f7ff fa89 	bl	800dab4 <memset>
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x38>)
 800e5a4:	6224      	str	r4, [r4, #32]
 800e5a6:	6263      	str	r3, [r4, #36]	; 0x24
 800e5a8:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <std+0x3c>)
 800e5aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <std+0x40>)
 800e5ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5b0:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <std+0x44>)
 800e5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b4:	bd10      	pop	{r4, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0800eba9 	.word	0x0800eba9
 800e5bc:	0800ebcb 	.word	0x0800ebcb
 800e5c0:	0800ec03 	.word	0x0800ec03
 800e5c4:	0800ec27 	.word	0x0800ec27

0800e5c8 <_cleanup_r>:
 800e5c8:	4901      	ldr	r1, [pc, #4]	; (800e5d0 <_cleanup_r+0x8>)
 800e5ca:	f000 b885 	b.w	800e6d8 <_fwalk_reent>
 800e5ce:	bf00      	nop
 800e5d0:	0800e52d 	.word	0x0800e52d

0800e5d4 <__sfmoreglue>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	2568      	movs	r5, #104	; 0x68
 800e5d8:	1e4a      	subs	r2, r1, #1
 800e5da:	4355      	muls	r5, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5e2:	f7ff fabb 	bl	800db5c <_malloc_r>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b140      	cbz	r0, 800e5fc <__sfmoreglue+0x28>
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	60a0      	str	r0, [r4, #8]
 800e5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f8:	f7ff fa5c 	bl	800dab4 <memset>
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}

0800e600 <__sinit>:
 800e600:	6983      	ldr	r3, [r0, #24]
 800e602:	b510      	push	{r4, lr}
 800e604:	4604      	mov	r4, r0
 800e606:	bb33      	cbnz	r3, 800e656 <__sinit+0x56>
 800e608:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e60c:	6503      	str	r3, [r0, #80]	; 0x50
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <__sinit+0x58>)
 800e610:	4a12      	ldr	r2, [pc, #72]	; (800e65c <__sinit+0x5c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6282      	str	r2, [r0, #40]	; 0x28
 800e616:	4298      	cmp	r0, r3
 800e618:	bf04      	itt	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	6183      	streq	r3, [r0, #24]
 800e61e:	f000 f81f 	bl	800e660 <__sfp>
 800e622:	6060      	str	r0, [r4, #4]
 800e624:	4620      	mov	r0, r4
 800e626:	f000 f81b 	bl	800e660 <__sfp>
 800e62a:	60a0      	str	r0, [r4, #8]
 800e62c:	4620      	mov	r0, r4
 800e62e:	f000 f817 	bl	800e660 <__sfp>
 800e632:	2200      	movs	r2, #0
 800e634:	60e0      	str	r0, [r4, #12]
 800e636:	2104      	movs	r1, #4
 800e638:	6860      	ldr	r0, [r4, #4]
 800e63a:	f7ff ffa1 	bl	800e580 <std>
 800e63e:	2201      	movs	r2, #1
 800e640:	2109      	movs	r1, #9
 800e642:	68a0      	ldr	r0, [r4, #8]
 800e644:	f7ff ff9c 	bl	800e580 <std>
 800e648:	2202      	movs	r2, #2
 800e64a:	2112      	movs	r1, #18
 800e64c:	68e0      	ldr	r0, [r4, #12]
 800e64e:	f7ff ff97 	bl	800e580 <std>
 800e652:	2301      	movs	r3, #1
 800e654:	61a3      	str	r3, [r4, #24]
 800e656:	bd10      	pop	{r4, pc}
 800e658:	0800fa30 	.word	0x0800fa30
 800e65c:	0800e5c9 	.word	0x0800e5c9

0800e660 <__sfp>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <__sfp+0x70>)
 800e664:	4607      	mov	r7, r0
 800e666:	681e      	ldr	r6, [r3, #0]
 800e668:	69b3      	ldr	r3, [r6, #24]
 800e66a:	b913      	cbnz	r3, 800e672 <__sfp+0x12>
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ffc7 	bl	800e600 <__sinit>
 800e672:	3648      	adds	r6, #72	; 0x48
 800e674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e678:	3b01      	subs	r3, #1
 800e67a:	d503      	bpl.n	800e684 <__sfp+0x24>
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	b133      	cbz	r3, 800e68e <__sfp+0x2e>
 800e680:	6836      	ldr	r6, [r6, #0]
 800e682:	e7f7      	b.n	800e674 <__sfp+0x14>
 800e684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e688:	b16d      	cbz	r5, 800e6a6 <__sfp+0x46>
 800e68a:	3468      	adds	r4, #104	; 0x68
 800e68c:	e7f4      	b.n	800e678 <__sfp+0x18>
 800e68e:	2104      	movs	r1, #4
 800e690:	4638      	mov	r0, r7
 800e692:	f7ff ff9f 	bl	800e5d4 <__sfmoreglue>
 800e696:	6030      	str	r0, [r6, #0]
 800e698:	2800      	cmp	r0, #0
 800e69a:	d1f1      	bne.n	800e680 <__sfp+0x20>
 800e69c:	230c      	movs	r3, #12
 800e69e:	4604      	mov	r4, r0
 800e6a0:	603b      	str	r3, [r7, #0]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <__sfp+0x74>)
 800e6a8:	6665      	str	r5, [r4, #100]	; 0x64
 800e6aa:	e9c4 5500 	strd	r5, r5, [r4]
 800e6ae:	60a5      	str	r5, [r4, #8]
 800e6b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6c0:	f7ff f9f8 	bl	800dab4 <memset>
 800e6c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6cc:	e7e9      	b.n	800e6a2 <__sfp+0x42>
 800e6ce:	bf00      	nop
 800e6d0:	0800fa30 	.word	0x0800fa30
 800e6d4:	ffff0001 	.word	0xffff0001

0800e6d8 <_fwalk_reent>:
 800e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	2600      	movs	r6, #0
 800e6e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6e6:	b914      	cbnz	r4, 800e6ee <_fwalk_reent+0x16>
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e6f2:	3f01      	subs	r7, #1
 800e6f4:	d501      	bpl.n	800e6fa <_fwalk_reent+0x22>
 800e6f6:	6824      	ldr	r4, [r4, #0]
 800e6f8:	e7f5      	b.n	800e6e6 <_fwalk_reent+0xe>
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d907      	bls.n	800e710 <_fwalk_reent+0x38>
 800e700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e704:	3301      	adds	r3, #1
 800e706:	d003      	beq.n	800e710 <_fwalk_reent+0x38>
 800e708:	4629      	mov	r1, r5
 800e70a:	4640      	mov	r0, r8
 800e70c:	47c8      	blx	r9
 800e70e:	4306      	orrs	r6, r0
 800e710:	3568      	adds	r5, #104	; 0x68
 800e712:	e7ee      	b.n	800e6f2 <_fwalk_reent+0x1a>

0800e714 <__swhatbuf_r>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	460e      	mov	r6, r1
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	b096      	sub	sp, #88	; 0x58
 800e71e:	2900      	cmp	r1, #0
 800e720:	4614      	mov	r4, r2
 800e722:	461d      	mov	r5, r3
 800e724:	da07      	bge.n	800e736 <__swhatbuf_r+0x22>
 800e726:	2300      	movs	r3, #0
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	89b3      	ldrh	r3, [r6, #12]
 800e72c:	061a      	lsls	r2, r3, #24
 800e72e:	d410      	bmi.n	800e752 <__swhatbuf_r+0x3e>
 800e730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e734:	e00e      	b.n	800e754 <__swhatbuf_r+0x40>
 800e736:	466a      	mov	r2, sp
 800e738:	f000 fa9c 	bl	800ec74 <_fstat_r>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dbf2      	blt.n	800e726 <__swhatbuf_r+0x12>
 800e740:	9a01      	ldr	r2, [sp, #4]
 800e742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e74a:	425a      	negs	r2, r3
 800e74c:	415a      	adcs	r2, r3
 800e74e:	602a      	str	r2, [r5, #0]
 800e750:	e7ee      	b.n	800e730 <__swhatbuf_r+0x1c>
 800e752:	2340      	movs	r3, #64	; 0x40
 800e754:	2000      	movs	r0, #0
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	b016      	add	sp, #88	; 0x58
 800e75a:	bd70      	pop	{r4, r5, r6, pc}

0800e75c <__smakebuf_r>:
 800e75c:	898b      	ldrh	r3, [r1, #12]
 800e75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e760:	079d      	lsls	r5, r3, #30
 800e762:	4606      	mov	r6, r0
 800e764:	460c      	mov	r4, r1
 800e766:	d507      	bpl.n	800e778 <__smakebuf_r+0x1c>
 800e768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	6123      	str	r3, [r4, #16]
 800e770:	2301      	movs	r3, #1
 800e772:	6163      	str	r3, [r4, #20]
 800e774:	b002      	add	sp, #8
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	ab01      	add	r3, sp, #4
 800e77a:	466a      	mov	r2, sp
 800e77c:	f7ff ffca 	bl	800e714 <__swhatbuf_r>
 800e780:	9900      	ldr	r1, [sp, #0]
 800e782:	4605      	mov	r5, r0
 800e784:	4630      	mov	r0, r6
 800e786:	f7ff f9e9 	bl	800db5c <_malloc_r>
 800e78a:	b948      	cbnz	r0, 800e7a0 <__smakebuf_r+0x44>
 800e78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d4ef      	bmi.n	800e774 <__smakebuf_r+0x18>
 800e794:	f023 0303 	bic.w	r3, r3, #3
 800e798:	f043 0302 	orr.w	r3, r3, #2
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	e7e3      	b.n	800e768 <__smakebuf_r+0xc>
 800e7a0:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <__smakebuf_r+0x7c>)
 800e7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	6020      	str	r0, [r4, #0]
 800e7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	6120      	str	r0, [r4, #16]
 800e7b2:	6163      	str	r3, [r4, #20]
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	b15b      	cbz	r3, 800e7d0 <__smakebuf_r+0x74>
 800e7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 fa6b 	bl	800ec98 <_isatty_r>
 800e7c2:	b128      	cbz	r0, 800e7d0 <__smakebuf_r+0x74>
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	f023 0303 	bic.w	r3, r3, #3
 800e7ca:	f043 0301 	orr.w	r3, r3, #1
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	431d      	orrs	r5, r3
 800e7d4:	81a5      	strh	r5, [r4, #12]
 800e7d6:	e7cd      	b.n	800e774 <__smakebuf_r+0x18>
 800e7d8:	0800e5c9 	.word	0x0800e5c9

0800e7dc <memchr>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	b2c9      	uxtb	r1, r1
 800e7e0:	4402      	add	r2, r0
 800e7e2:	4290      	cmp	r0, r2
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	d101      	bne.n	800e7ec <memchr+0x10>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e003      	b.n	800e7f4 <memchr+0x18>
 800e7ec:	781c      	ldrb	r4, [r3, #0]
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	428c      	cmp	r4, r1
 800e7f2:	d1f6      	bne.n	800e7e2 <memchr+0x6>
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	bd10      	pop	{r4, pc}

0800e7f8 <memmove>:
 800e7f8:	4288      	cmp	r0, r1
 800e7fa:	b510      	push	{r4, lr}
 800e7fc:	eb01 0302 	add.w	r3, r1, r2
 800e800:	d807      	bhi.n	800e812 <memmove+0x1a>
 800e802:	1e42      	subs	r2, r0, #1
 800e804:	4299      	cmp	r1, r3
 800e806:	d00a      	beq.n	800e81e <memmove+0x26>
 800e808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e80c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e810:	e7f8      	b.n	800e804 <memmove+0xc>
 800e812:	4283      	cmp	r3, r0
 800e814:	d9f5      	bls.n	800e802 <memmove+0xa>
 800e816:	1881      	adds	r1, r0, r2
 800e818:	1ad2      	subs	r2, r2, r3
 800e81a:	42d3      	cmn	r3, r2
 800e81c:	d100      	bne.n	800e820 <memmove+0x28>
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e824:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e828:	e7f7      	b.n	800e81a <memmove+0x22>

0800e82a <__malloc_lock>:
 800e82a:	4770      	bx	lr

0800e82c <__malloc_unlock>:
 800e82c:	4770      	bx	lr

0800e82e <_realloc_r>:
 800e82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e830:	4607      	mov	r7, r0
 800e832:	4614      	mov	r4, r2
 800e834:	460e      	mov	r6, r1
 800e836:	b921      	cbnz	r1, 800e842 <_realloc_r+0x14>
 800e838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e83c:	4611      	mov	r1, r2
 800e83e:	f7ff b98d 	b.w	800db5c <_malloc_r>
 800e842:	b922      	cbnz	r2, 800e84e <_realloc_r+0x20>
 800e844:	f7ff f93e 	bl	800dac4 <_free_r>
 800e848:	4625      	mov	r5, r4
 800e84a:	4628      	mov	r0, r5
 800e84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84e:	f000 fa45 	bl	800ecdc <_malloc_usable_size_r>
 800e852:	42a0      	cmp	r0, r4
 800e854:	d20f      	bcs.n	800e876 <_realloc_r+0x48>
 800e856:	4621      	mov	r1, r4
 800e858:	4638      	mov	r0, r7
 800e85a:	f7ff f97f 	bl	800db5c <_malloc_r>
 800e85e:	4605      	mov	r5, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d0f2      	beq.n	800e84a <_realloc_r+0x1c>
 800e864:	4631      	mov	r1, r6
 800e866:	4622      	mov	r2, r4
 800e868:	f7ff f919 	bl	800da9e <memcpy>
 800e86c:	4631      	mov	r1, r6
 800e86e:	4638      	mov	r0, r7
 800e870:	f7ff f928 	bl	800dac4 <_free_r>
 800e874:	e7e9      	b.n	800e84a <_realloc_r+0x1c>
 800e876:	4635      	mov	r5, r6
 800e878:	e7e7      	b.n	800e84a <_realloc_r+0x1c>

0800e87a <__ssputs_r>:
 800e87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e87e:	688e      	ldr	r6, [r1, #8]
 800e880:	4682      	mov	sl, r0
 800e882:	429e      	cmp	r6, r3
 800e884:	460c      	mov	r4, r1
 800e886:	4690      	mov	r8, r2
 800e888:	4699      	mov	r9, r3
 800e88a:	d837      	bhi.n	800e8fc <__ssputs_r+0x82>
 800e88c:	898a      	ldrh	r2, [r1, #12]
 800e88e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e892:	d031      	beq.n	800e8f8 <__ssputs_r+0x7e>
 800e894:	2302      	movs	r3, #2
 800e896:	6825      	ldr	r5, [r4, #0]
 800e898:	6909      	ldr	r1, [r1, #16]
 800e89a:	1a6f      	subs	r7, r5, r1
 800e89c:	6965      	ldr	r5, [r4, #20]
 800e89e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8a2:	fb95 f5f3 	sdiv	r5, r5, r3
 800e8a6:	f109 0301 	add.w	r3, r9, #1
 800e8aa:	443b      	add	r3, r7
 800e8ac:	429d      	cmp	r5, r3
 800e8ae:	bf38      	it	cc
 800e8b0:	461d      	movcc	r5, r3
 800e8b2:	0553      	lsls	r3, r2, #21
 800e8b4:	d530      	bpl.n	800e918 <__ssputs_r+0x9e>
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7ff f950 	bl	800db5c <_malloc_r>
 800e8bc:	4606      	mov	r6, r0
 800e8be:	b950      	cbnz	r0, 800e8d6 <__ssputs_r+0x5c>
 800e8c0:	230c      	movs	r3, #12
 800e8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c6:	f8ca 3000 	str.w	r3, [sl]
 800e8ca:	89a3      	ldrh	r3, [r4, #12]
 800e8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d6:	463a      	mov	r2, r7
 800e8d8:	6921      	ldr	r1, [r4, #16]
 800e8da:	f7ff f8e0 	bl	800da9e <memcpy>
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	6126      	str	r6, [r4, #16]
 800e8ec:	443e      	add	r6, r7
 800e8ee:	6026      	str	r6, [r4, #0]
 800e8f0:	464e      	mov	r6, r9
 800e8f2:	6165      	str	r5, [r4, #20]
 800e8f4:	1bed      	subs	r5, r5, r7
 800e8f6:	60a5      	str	r5, [r4, #8]
 800e8f8:	454e      	cmp	r6, r9
 800e8fa:	d900      	bls.n	800e8fe <__ssputs_r+0x84>
 800e8fc:	464e      	mov	r6, r9
 800e8fe:	4632      	mov	r2, r6
 800e900:	4641      	mov	r1, r8
 800e902:	6820      	ldr	r0, [r4, #0]
 800e904:	f7ff ff78 	bl	800e7f8 <memmove>
 800e908:	68a3      	ldr	r3, [r4, #8]
 800e90a:	2000      	movs	r0, #0
 800e90c:	1b9b      	subs	r3, r3, r6
 800e90e:	60a3      	str	r3, [r4, #8]
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	441e      	add	r6, r3
 800e914:	6026      	str	r6, [r4, #0]
 800e916:	e7dc      	b.n	800e8d2 <__ssputs_r+0x58>
 800e918:	462a      	mov	r2, r5
 800e91a:	f7ff ff88 	bl	800e82e <_realloc_r>
 800e91e:	4606      	mov	r6, r0
 800e920:	2800      	cmp	r0, #0
 800e922:	d1e2      	bne.n	800e8ea <__ssputs_r+0x70>
 800e924:	6921      	ldr	r1, [r4, #16]
 800e926:	4650      	mov	r0, sl
 800e928:	f7ff f8cc 	bl	800dac4 <_free_r>
 800e92c:	e7c8      	b.n	800e8c0 <__ssputs_r+0x46>
	...

0800e930 <_svfiprintf_r>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	461d      	mov	r5, r3
 800e936:	898b      	ldrh	r3, [r1, #12]
 800e938:	b09d      	sub	sp, #116	; 0x74
 800e93a:	061f      	lsls	r7, r3, #24
 800e93c:	4680      	mov	r8, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	4616      	mov	r6, r2
 800e942:	d50f      	bpl.n	800e964 <_svfiprintf_r+0x34>
 800e944:	690b      	ldr	r3, [r1, #16]
 800e946:	b96b      	cbnz	r3, 800e964 <_svfiprintf_r+0x34>
 800e948:	2140      	movs	r1, #64	; 0x40
 800e94a:	f7ff f907 	bl	800db5c <_malloc_r>
 800e94e:	6020      	str	r0, [r4, #0]
 800e950:	6120      	str	r0, [r4, #16]
 800e952:	b928      	cbnz	r0, 800e960 <_svfiprintf_r+0x30>
 800e954:	230c      	movs	r3, #12
 800e956:	f8c8 3000 	str.w	r3, [r8]
 800e95a:	f04f 30ff 	mov.w	r0, #4294967295
 800e95e:	e0c8      	b.n	800eaf2 <_svfiprintf_r+0x1c2>
 800e960:	2340      	movs	r3, #64	; 0x40
 800e962:	6163      	str	r3, [r4, #20]
 800e964:	2300      	movs	r3, #0
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	2320      	movs	r3, #32
 800e96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e96e:	2330      	movs	r3, #48	; 0x30
 800e970:	f04f 0b01 	mov.w	fp, #1
 800e974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e978:	9503      	str	r5, [sp, #12]
 800e97a:	4637      	mov	r7, r6
 800e97c:	463d      	mov	r5, r7
 800e97e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e982:	b10b      	cbz	r3, 800e988 <_svfiprintf_r+0x58>
 800e984:	2b25      	cmp	r3, #37	; 0x25
 800e986:	d13e      	bne.n	800ea06 <_svfiprintf_r+0xd6>
 800e988:	ebb7 0a06 	subs.w	sl, r7, r6
 800e98c:	d00b      	beq.n	800e9a6 <_svfiprintf_r+0x76>
 800e98e:	4653      	mov	r3, sl
 800e990:	4632      	mov	r2, r6
 800e992:	4621      	mov	r1, r4
 800e994:	4640      	mov	r0, r8
 800e996:	f7ff ff70 	bl	800e87a <__ssputs_r>
 800e99a:	3001      	adds	r0, #1
 800e99c:	f000 80a4 	beq.w	800eae8 <_svfiprintf_r+0x1b8>
 800e9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a2:	4453      	add	r3, sl
 800e9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a6:	783b      	ldrb	r3, [r7, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 809d 	beq.w	800eae8 <_svfiprintf_r+0x1b8>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9b8:	9304      	str	r3, [sp, #16]
 800e9ba:	9307      	str	r3, [sp, #28]
 800e9bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e9c2:	462f      	mov	r7, r5
 800e9c4:	2205      	movs	r2, #5
 800e9c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e9ca:	4850      	ldr	r0, [pc, #320]	; (800eb0c <_svfiprintf_r+0x1dc>)
 800e9cc:	f7ff ff06 	bl	800e7dc <memchr>
 800e9d0:	9b04      	ldr	r3, [sp, #16]
 800e9d2:	b9d0      	cbnz	r0, 800ea0a <_svfiprintf_r+0xda>
 800e9d4:	06d9      	lsls	r1, r3, #27
 800e9d6:	bf44      	itt	mi
 800e9d8:	2220      	movmi	r2, #32
 800e9da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9de:	071a      	lsls	r2, r3, #28
 800e9e0:	bf44      	itt	mi
 800e9e2:	222b      	movmi	r2, #43	; 0x2b
 800e9e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9e8:	782a      	ldrb	r2, [r5, #0]
 800e9ea:	2a2a      	cmp	r2, #42	; 0x2a
 800e9ec:	d015      	beq.n	800ea1a <_svfiprintf_r+0xea>
 800e9ee:	462f      	mov	r7, r5
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	250a      	movs	r5, #10
 800e9f4:	9a07      	ldr	r2, [sp, #28]
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9fc:	3b30      	subs	r3, #48	; 0x30
 800e9fe:	2b09      	cmp	r3, #9
 800ea00:	d94d      	bls.n	800ea9e <_svfiprintf_r+0x16e>
 800ea02:	b1b8      	cbz	r0, 800ea34 <_svfiprintf_r+0x104>
 800ea04:	e00f      	b.n	800ea26 <_svfiprintf_r+0xf6>
 800ea06:	462f      	mov	r7, r5
 800ea08:	e7b8      	b.n	800e97c <_svfiprintf_r+0x4c>
 800ea0a:	4a40      	ldr	r2, [pc, #256]	; (800eb0c <_svfiprintf_r+0x1dc>)
 800ea0c:	463d      	mov	r5, r7
 800ea0e:	1a80      	subs	r0, r0, r2
 800ea10:	fa0b f000 	lsl.w	r0, fp, r0
 800ea14:	4318      	orrs	r0, r3
 800ea16:	9004      	str	r0, [sp, #16]
 800ea18:	e7d3      	b.n	800e9c2 <_svfiprintf_r+0x92>
 800ea1a:	9a03      	ldr	r2, [sp, #12]
 800ea1c:	1d11      	adds	r1, r2, #4
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	9103      	str	r1, [sp, #12]
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	db01      	blt.n	800ea2a <_svfiprintf_r+0xfa>
 800ea26:	9207      	str	r2, [sp, #28]
 800ea28:	e004      	b.n	800ea34 <_svfiprintf_r+0x104>
 800ea2a:	4252      	negs	r2, r2
 800ea2c:	f043 0302 	orr.w	r3, r3, #2
 800ea30:	9207      	str	r2, [sp, #28]
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	783b      	ldrb	r3, [r7, #0]
 800ea36:	2b2e      	cmp	r3, #46	; 0x2e
 800ea38:	d10c      	bne.n	800ea54 <_svfiprintf_r+0x124>
 800ea3a:	787b      	ldrb	r3, [r7, #1]
 800ea3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea3e:	d133      	bne.n	800eaa8 <_svfiprintf_r+0x178>
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	3702      	adds	r7, #2
 800ea44:	1d1a      	adds	r2, r3, #4
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	9203      	str	r2, [sp, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	bfb8      	it	lt
 800ea4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	4d2e      	ldr	r5, [pc, #184]	; (800eb10 <_svfiprintf_r+0x1e0>)
 800ea56:	2203      	movs	r2, #3
 800ea58:	7839      	ldrb	r1, [r7, #0]
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f7ff febe 	bl	800e7dc <memchr>
 800ea60:	b138      	cbz	r0, 800ea72 <_svfiprintf_r+0x142>
 800ea62:	2340      	movs	r3, #64	; 0x40
 800ea64:	1b40      	subs	r0, r0, r5
 800ea66:	fa03 f000 	lsl.w	r0, r3, r0
 800ea6a:	9b04      	ldr	r3, [sp, #16]
 800ea6c:	3701      	adds	r7, #1
 800ea6e:	4303      	orrs	r3, r0
 800ea70:	9304      	str	r3, [sp, #16]
 800ea72:	7839      	ldrb	r1, [r7, #0]
 800ea74:	2206      	movs	r2, #6
 800ea76:	4827      	ldr	r0, [pc, #156]	; (800eb14 <_svfiprintf_r+0x1e4>)
 800ea78:	1c7e      	adds	r6, r7, #1
 800ea7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea7e:	f7ff fead 	bl	800e7dc <memchr>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d038      	beq.n	800eaf8 <_svfiprintf_r+0x1c8>
 800ea86:	4b24      	ldr	r3, [pc, #144]	; (800eb18 <_svfiprintf_r+0x1e8>)
 800ea88:	bb13      	cbnz	r3, 800ead0 <_svfiprintf_r+0x1a0>
 800ea8a:	9b03      	ldr	r3, [sp, #12]
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	f023 0307 	bic.w	r3, r3, #7
 800ea92:	3308      	adds	r3, #8
 800ea94:	9303      	str	r3, [sp, #12]
 800ea96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea98:	444b      	add	r3, r9
 800ea9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea9c:	e76d      	b.n	800e97a <_svfiprintf_r+0x4a>
 800ea9e:	fb05 3202 	mla	r2, r5, r2, r3
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	460f      	mov	r7, r1
 800eaa6:	e7a6      	b.n	800e9f6 <_svfiprintf_r+0xc6>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	250a      	movs	r5, #10
 800eaac:	4619      	mov	r1, r3
 800eaae:	3701      	adds	r7, #1
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	4638      	mov	r0, r7
 800eab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eab8:	3a30      	subs	r2, #48	; 0x30
 800eaba:	2a09      	cmp	r2, #9
 800eabc:	d903      	bls.n	800eac6 <_svfiprintf_r+0x196>
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0c8      	beq.n	800ea54 <_svfiprintf_r+0x124>
 800eac2:	9105      	str	r1, [sp, #20]
 800eac4:	e7c6      	b.n	800ea54 <_svfiprintf_r+0x124>
 800eac6:	fb05 2101 	mla	r1, r5, r1, r2
 800eaca:	2301      	movs	r3, #1
 800eacc:	4607      	mov	r7, r0
 800eace:	e7f0      	b.n	800eab2 <_svfiprintf_r+0x182>
 800ead0:	ab03      	add	r3, sp, #12
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	4622      	mov	r2, r4
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <_svfiprintf_r+0x1ec>)
 800ead8:	a904      	add	r1, sp, #16
 800eada:	4640      	mov	r0, r8
 800eadc:	f3af 8000 	nop.w
 800eae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eae4:	4681      	mov	r9, r0
 800eae6:	d1d6      	bne.n	800ea96 <_svfiprintf_r+0x166>
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	065b      	lsls	r3, r3, #25
 800eaec:	f53f af35 	bmi.w	800e95a <_svfiprintf_r+0x2a>
 800eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaf2:	b01d      	add	sp, #116	; 0x74
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	ab03      	add	r3, sp, #12
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4622      	mov	r2, r4
 800eafe:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <_svfiprintf_r+0x1ec>)
 800eb00:	a904      	add	r1, sp, #16
 800eb02:	4640      	mov	r0, r8
 800eb04:	f7ff fa38 	bl	800df78 <_printf_i>
 800eb08:	e7ea      	b.n	800eae0 <_svfiprintf_r+0x1b0>
 800eb0a:	bf00      	nop
 800eb0c:	0800fa34 	.word	0x0800fa34
 800eb10:	0800fa3a 	.word	0x0800fa3a
 800eb14:	0800fa3e 	.word	0x0800fa3e
 800eb18:	00000000 	.word	0x00000000
 800eb1c:	0800e87b 	.word	0x0800e87b

0800eb20 <_raise_r>:
 800eb20:	291f      	cmp	r1, #31
 800eb22:	b538      	push	{r3, r4, r5, lr}
 800eb24:	4604      	mov	r4, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	d904      	bls.n	800eb34 <_raise_r+0x14>
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb36:	b112      	cbz	r2, 800eb3e <_raise_r+0x1e>
 800eb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb3c:	b94b      	cbnz	r3, 800eb52 <_raise_r+0x32>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f000 f830 	bl	800eba4 <_getpid_r>
 800eb44:	462a      	mov	r2, r5
 800eb46:	4601      	mov	r1, r0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4e:	f000 b817 	b.w	800eb80 <_kill_r>
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d00a      	beq.n	800eb6c <_raise_r+0x4c>
 800eb56:	1c59      	adds	r1, r3, #1
 800eb58:	d103      	bne.n	800eb62 <_raise_r+0x42>
 800eb5a:	2316      	movs	r3, #22
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	2001      	movs	r0, #1
 800eb60:	e7e7      	b.n	800eb32 <_raise_r+0x12>
 800eb62:	2400      	movs	r4, #0
 800eb64:	4628      	mov	r0, r5
 800eb66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb6a:	4798      	blx	r3
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e7e0      	b.n	800eb32 <_raise_r+0x12>

0800eb70 <raise>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <raise+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f7ff bfd3 	b.w	800eb20 <_raise_r>
 800eb7a:	bf00      	nop
 800eb7c:	20000124 	.word	0x20000124

0800eb80 <_kill_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	2300      	movs	r3, #0
 800eb84:	4c06      	ldr	r4, [pc, #24]	; (800eba0 <_kill_r+0x20>)
 800eb86:	4605      	mov	r5, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	6023      	str	r3, [r4, #0]
 800eb8e:	f000 f8df 	bl	800ed50 <_kill>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	d102      	bne.n	800eb9c <_kill_r+0x1c>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	b103      	cbz	r3, 800eb9c <_kill_r+0x1c>
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	2000695c 	.word	0x2000695c

0800eba4 <_getpid_r>:
 800eba4:	f000 b8c4 	b.w	800ed30 <_getpid>

0800eba8 <__sread>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	460c      	mov	r4, r1
 800ebac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb0:	f000 f89c 	bl	800ecec <_read_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	bfab      	itete	ge
 800ebb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebba:	89a3      	ldrhlt	r3, [r4, #12]
 800ebbc:	181b      	addge	r3, r3, r0
 800ebbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebc2:	bfac      	ite	ge
 800ebc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebc6:	81a3      	strhlt	r3, [r4, #12]
 800ebc8:	bd10      	pop	{r4, pc}

0800ebca <__swrite>:
 800ebca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebce:	461f      	mov	r7, r3
 800ebd0:	898b      	ldrh	r3, [r1, #12]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	05db      	lsls	r3, r3, #23
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	4616      	mov	r6, r2
 800ebda:	d505      	bpl.n	800ebe8 <__swrite+0x1e>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe4:	f000 f868 	bl	800ecb8 <_lseek_r>
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	4632      	mov	r2, r6
 800ebec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfe:	f000 b817 	b.w	800ec30 <_write_r>

0800ec02 <__sseek>:
 800ec02:	b510      	push	{r4, lr}
 800ec04:	460c      	mov	r4, r1
 800ec06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0a:	f000 f855 	bl	800ecb8 <_lseek_r>
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	89a3      	ldrh	r3, [r4, #12]
 800ec12:	bf15      	itete	ne
 800ec14:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec1e:	81a3      	strheq	r3, [r4, #12]
 800ec20:	bf18      	it	ne
 800ec22:	81a3      	strhne	r3, [r4, #12]
 800ec24:	bd10      	pop	{r4, pc}

0800ec26 <__sclose>:
 800ec26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2a:	f000 b813 	b.w	800ec54 <_close_r>
	...

0800ec30 <_write_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4605      	mov	r5, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	4611      	mov	r1, r2
 800ec38:	2200      	movs	r2, #0
 800ec3a:	4c05      	ldr	r4, [pc, #20]	; (800ec50 <_write_r+0x20>)
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f000 f8ac 	bl	800ed9c <_write>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_write_r+0x1e>
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_write_r+0x1e>
 800ec4c:	602b      	str	r3, [r5, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	2000695c 	.word	0x2000695c

0800ec54 <_close_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	2300      	movs	r3, #0
 800ec58:	4c05      	ldr	r4, [pc, #20]	; (800ec70 <_close_r+0x1c>)
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	f000 f856 	bl	800ed10 <_close>
 800ec64:	1c43      	adds	r3, r0, #1
 800ec66:	d102      	bne.n	800ec6e <_close_r+0x1a>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	b103      	cbz	r3, 800ec6e <_close_r+0x1a>
 800ec6c:	602b      	str	r3, [r5, #0]
 800ec6e:	bd38      	pop	{r3, r4, r5, pc}
 800ec70:	2000695c 	.word	0x2000695c

0800ec74 <_fstat_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	2300      	movs	r3, #0
 800ec78:	4c06      	ldr	r4, [pc, #24]	; (800ec94 <_fstat_r+0x20>)
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	4611      	mov	r1, r2
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	f000 f84d 	bl	800ed20 <_fstat>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d102      	bne.n	800ec90 <_fstat_r+0x1c>
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	b103      	cbz	r3, 800ec90 <_fstat_r+0x1c>
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop
 800ec94:	2000695c 	.word	0x2000695c

0800ec98 <_isatty_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	4c05      	ldr	r4, [pc, #20]	; (800ecb4 <_isatty_r+0x1c>)
 800ec9e:	4605      	mov	r5, r0
 800eca0:	4608      	mov	r0, r1
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	f000 f84c 	bl	800ed40 <_isatty>
 800eca8:	1c43      	adds	r3, r0, #1
 800ecaa:	d102      	bne.n	800ecb2 <_isatty_r+0x1a>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	b103      	cbz	r3, 800ecb2 <_isatty_r+0x1a>
 800ecb0:	602b      	str	r3, [r5, #0]
 800ecb2:	bd38      	pop	{r3, r4, r5, pc}
 800ecb4:	2000695c 	.word	0x2000695c

0800ecb8 <_lseek_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4605      	mov	r5, r0
 800ecbc:	4608      	mov	r0, r1
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4c05      	ldr	r4, [pc, #20]	; (800ecd8 <_lseek_r+0x20>)
 800ecc4:	6022      	str	r2, [r4, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f000 f84a 	bl	800ed60 <_lseek>
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	d102      	bne.n	800ecd6 <_lseek_r+0x1e>
 800ecd0:	6823      	ldr	r3, [r4, #0]
 800ecd2:	b103      	cbz	r3, 800ecd6 <_lseek_r+0x1e>
 800ecd4:	602b      	str	r3, [r5, #0]
 800ecd6:	bd38      	pop	{r3, r4, r5, pc}
 800ecd8:	2000695c 	.word	0x2000695c

0800ecdc <_malloc_usable_size_r>:
 800ecdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece0:	1f18      	subs	r0, r3, #4
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	bfbc      	itt	lt
 800ece6:	580b      	ldrlt	r3, [r1, r0]
 800ece8:	18c0      	addlt	r0, r0, r3
 800ecea:	4770      	bx	lr

0800ecec <_read_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4605      	mov	r5, r0
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4c05      	ldr	r4, [pc, #20]	; (800ed0c <_read_r+0x20>)
 800ecf8:	6022      	str	r2, [r4, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f000 f838 	bl	800ed70 <_read>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d102      	bne.n	800ed0a <_read_r+0x1e>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	b103      	cbz	r3, 800ed0a <_read_r+0x1e>
 800ed08:	602b      	str	r3, [r5, #0]
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
 800ed0c:	2000695c 	.word	0x2000695c

0800ed10 <_close>:
 800ed10:	2258      	movs	r2, #88	; 0x58
 800ed12:	4b02      	ldr	r3, [pc, #8]	; (800ed1c <_close+0xc>)
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	4770      	bx	lr
 800ed1c:	2000695c 	.word	0x2000695c

0800ed20 <_fstat>:
 800ed20:	2258      	movs	r2, #88	; 0x58
 800ed22:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <_fstat+0xc>)
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	4770      	bx	lr
 800ed2c:	2000695c 	.word	0x2000695c

0800ed30 <_getpid>:
 800ed30:	2258      	movs	r2, #88	; 0x58
 800ed32:	4b02      	ldr	r3, [pc, #8]	; (800ed3c <_getpid+0xc>)
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	4770      	bx	lr
 800ed3c:	2000695c 	.word	0x2000695c

0800ed40 <_isatty>:
 800ed40:	2258      	movs	r2, #88	; 0x58
 800ed42:	4b02      	ldr	r3, [pc, #8]	; (800ed4c <_isatty+0xc>)
 800ed44:	2000      	movs	r0, #0
 800ed46:	601a      	str	r2, [r3, #0]
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	2000695c 	.word	0x2000695c

0800ed50 <_kill>:
 800ed50:	2258      	movs	r2, #88	; 0x58
 800ed52:	4b02      	ldr	r3, [pc, #8]	; (800ed5c <_kill+0xc>)
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	4770      	bx	lr
 800ed5c:	2000695c 	.word	0x2000695c

0800ed60 <_lseek>:
 800ed60:	2258      	movs	r2, #88	; 0x58
 800ed62:	4b02      	ldr	r3, [pc, #8]	; (800ed6c <_lseek+0xc>)
 800ed64:	f04f 30ff 	mov.w	r0, #4294967295
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	4770      	bx	lr
 800ed6c:	2000695c 	.word	0x2000695c

0800ed70 <_read>:
 800ed70:	2258      	movs	r2, #88	; 0x58
 800ed72:	4b02      	ldr	r3, [pc, #8]	; (800ed7c <_read+0xc>)
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4770      	bx	lr
 800ed7c:	2000695c 	.word	0x2000695c

0800ed80 <_sbrk>:
 800ed80:	4b04      	ldr	r3, [pc, #16]	; (800ed94 <_sbrk+0x14>)
 800ed82:	4602      	mov	r2, r0
 800ed84:	6819      	ldr	r1, [r3, #0]
 800ed86:	b909      	cbnz	r1, 800ed8c <_sbrk+0xc>
 800ed88:	4903      	ldr	r1, [pc, #12]	; (800ed98 <_sbrk+0x18>)
 800ed8a:	6019      	str	r1, [r3, #0]
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	4402      	add	r2, r0
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	4770      	bx	lr
 800ed94:	20003ec8 	.word	0x20003ec8
 800ed98:	20006960 	.word	0x20006960

0800ed9c <_write>:
 800ed9c:	2258      	movs	r2, #88	; 0x58
 800ed9e:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <_write+0xc>)
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	4770      	bx	lr
 800eda8:	2000695c 	.word	0x2000695c

0800edac <_exit>:
 800edac:	e7fe      	b.n	800edac <_exit>
	...

0800edb0 <_init>:
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb2:	bf00      	nop
 800edb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb6:	bc08      	pop	{r3}
 800edb8:	469e      	mov	lr, r3
 800edba:	4770      	bx	lr

0800edbc <_fini>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	bf00      	nop
 800edc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc2:	bc08      	pop	{r3}
 800edc4:	469e      	mov	lr, r3
 800edc6:	4770      	bx	lr
